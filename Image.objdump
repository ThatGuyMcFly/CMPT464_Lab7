
Image.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:

const piniod_t __input_pins [] = INPUT_PIN_LIST;

void pin_sensor_init () { __pinsen_setedge_irq; }

void pin_sensor_read (word st, const byte *junk, address val) {
       0:	20005000 	andcs	r5, r0, r0

	const piniod_t *p;
	word i;
	byte v;

	if (val == NULL) {
       4:	00001c31 	andeq	r1, r0, r1, lsr ip
		// Called to issue a wait request
		if (st == WNONE)
       8:	00001c2b 	andeq	r1, r0, fp, lsr #24
       c:	00001c2d 	andeq	r1, r0, sp, lsr #24
			// Make sure this is not WNONE
			return;
		cli;
		__pinsen_clear_and_enable;
      10:	00001c2f 	andeq	r1, r0, pc, lsr #24
      14:	00001c2f 	andeq	r1, r0, pc, lsr #24
		when (&__input_pins, st);
      18:	00001c2f 	andeq	r1, r0, pc, lsr #24
	...
	}

	*val = 0;
	for (i = 0, p = __input_pins;
	    	    i < sizeof (__input_pins) / sizeof (piniod_t); i++, p++)
		*val |= __port_in_value (p) << i;
      2c:	00001c2f 	andeq	r1, r0, pc, lsr #24
      30:	00001c2f 	andeq	r1, r0, pc, lsr #24
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Return the input value from the specified DIO.
    //
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      34:	00000000 	andeq	r0, r0, r0
      38:	00001c2f 	andeq	r1, r0, pc, lsr #24
      3c:	00001c2f 	andeq	r1, r0, pc, lsr #24
      40:	0000096d 	andeq	r0, r0, sp, ror #18
      44:	00001c2f 	andeq	r1, r0, pc, lsr #24
      48:	00001c2f 	andeq	r1, r0, pc, lsr #24
}
      4c:	00001c2f 	andeq	r1, r0, pc, lsr #24
      50:	0000052d 	andeq	r0, r0, sp, lsr #10
      54:	0000082d 	andeq	r0, r0, sp, lsr #16
	if (!button_still_pressed (__button_list [pbutton]))
		goto Done;

	if (BUTTON_REPEAT (__button_list [pbutton])) {
		// Wait for repeat
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      58:	00001c2f 	andeq	r1, r0, pc, lsr #24
	    pbutton++) {
      5c:	00001c2f 	andeq	r1, r0, pc, lsr #24
      60:	00001c2f 	andeq	r1, r0, pc, lsr #24
	if (!button_still_pressed (__button_list [pbutton]))
      64:	000025f5 	strdeq	r2, [r0], -r5
      68:	00001c2f 	andeq	r1, r0, pc, lsr #24
      6c:	00001c2f 	andeq	r1, r0, pc, lsr #24
      70:	00001c2f 	andeq	r1, r0, pc, lsr #24
      74:	00001c2f 	andeq	r1, r0, pc, lsr #24
	if (BUTTON_REPEAT (__button_list [pbutton])) {
      78:	00001c2f 	andeq	r1, r0, pc, lsr #24
      7c:	00001c2f 	andeq	r1, r0, pc, lsr #24
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      80:	00001c2f 	andeq	r1, r0, pc, lsr #24
      84:	00001c2f 	andeq	r1, r0, pc, lsr #24
	} else
		goto Debounce;

  entry (BU_LOOP)

	if (!button_still_pressed (__button_list [pbutton]))
      88:	00001c2f 	andeq	r1, r0, pc, lsr #24
      8c:	00001c2f 	andeq	r1, r0, pc, lsr #24
      90:	00001c2f 	andeq	r1, r0, pc, lsr #24
      94:	00001c2f 	andeq	r1, r0, pc, lsr #24
      98:	00001c2f 	andeq	r1, r0, pc, lsr #24
		goto Done;

	if (baction == NULL)
      9c:	00001c2f 	andeq	r1, r0, pc, lsr #24
      a0:	00001c2f 	andeq	r1, r0, pc, lsr #24
		goto Term;

	(*baction) (pbutton);
      a4:	00001c2f 	andeq	r1, r0, pc, lsr #24

	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);

endthread
      a8:	00001c2f 	andeq	r1, r0, pc, lsr #24
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00001c2f 	andeq	r1, r0, pc, lsr #24
      b0:	00001c2f 	andeq	r1, r0, pc, lsr #24
endthread
      b4:	00001c2f 	andeq	r1, r0, pc, lsr #24
      b8:	00001c2f 	andeq	r1, r0, pc, lsr #24
      bc:	00001c2f 	andeq	r1, r0, pc, lsr #24
      c0:	00001c2f 	andeq	r1, r0, pc, lsr #24
      c4:	00001c2f 	andeq	r1, r0, pc, lsr #24

000000c8 <receiver>:
    byte receiverId;
    byte sequenceNumber;
    byte payload[PAYLOAD_LENGTH];
} message;

fsm receiver {
      c8:	b507      	push	{r0, r1, r2, lr}
      ca:	2804      	cmp	r0, #4
      cc:	d840      	bhi.n	150 <_Min_Stack_Size+0x50>
      ce:	e8df f000 	tbb	[pc, r0]
      d2:	211a0a03 	tstcs	sl, r3, lsl #20
      d6:	4b200025 	blmi	800172 <__ccfg+0x7e01ca>
    address packet;
    message * receivedMessage;

    state Receiving:
        packet = tcv_rnp(Receiving, sfd);
      da:	2000      	movs	r0, #0
      dc:	6819      	ldr	r1, [r3, #0]
      de:	f001 fbbd 	bl	185c <tcv_rnp>
      e2:	4b1f      	ldr	r3, [pc, #124]	; (160 <_Min_Stack_Size+0x60>)
      e4:	6018      	str	r0, [r3, #0]
    
    state Get_Message:
        receivedMessage = (message *)(packet + 1);
      e6:	4b1e      	ldr	r3, [pc, #120]	; (160 <_Min_Stack_Size+0x60>)
      e8:	4a1e      	ldr	r2, [pc, #120]	; (164 <_Min_Stack_Size+0x64>)
      ea:	681b      	ldr	r3, [r3, #0]
      ec:	1c99      	adds	r1, r3, #2
      ee:	6011      	str	r1, [r2, #0]

        if(receivedMessage->receiverId == nodeId) {
      f0:	4a1d      	ldr	r2, [pc, #116]	; (168 <_Min_Stack_Size+0x68>)
      f2:	78db      	ldrb	r3, [r3, #3]
      f4:	7812      	ldrb	r2, [r2, #0]
      f6:	429a      	cmp	r2, r3
      f8:	d124      	bne.n	144 <_Min_Stack_Size+0x44>
            proceed From_Direct;
      fa:	2002      	movs	r0, #2
        } else if (receivedMessage->receiverId == '0' || receivedMessage->receiverId == 0) {
            proceed From_Broadcast;
      fc:	f000 ffdc 	bl	10b8 <proceed>
        }

        proceed Receiving;
     100:	2000      	movs	r0, #0
     102:	f000 ffd9 	bl	10b8 <proceed>
    
    state From_Direct:
        ser_outf(Get_Message, "Message ");
     106:	2001      	movs	r0, #1
     108:	4918      	ldr	r1, [pc, #96]	; (16c <_Min_Stack_Size+0x6c>)
     10a:	f001 fea1 	bl	1e50 <ser_outf>
        proceed Show_Message;
     10e:	2004      	movs	r0, #4
     110:	f000 ffd2 	bl	10b8 <proceed>
    
    state From_Broadcast:
        ser_outf(From_Broadcast, "Broadcast ");
     114:	2003      	movs	r0, #3
     116:	4916      	ldr	r1, [pc, #88]	; (170 <_Min_Stack_Size+0x70>)
     118:	f001 fe9a 	bl	1e50 <ser_outf>

    state Show_Message:
        ser_outf(Show_Message, "from node %d (Seq %d): %s\n\r", receivedMessage->senderId, receivedMessage->sequenceNumber, receivedMessage->payload);
     11c:	4b11      	ldr	r3, [pc, #68]	; (164 <_Min_Stack_Size+0x64>)
     11e:	2004      	movs	r0, #4
     120:	6819      	ldr	r1, [r3, #0]
     122:	788b      	ldrb	r3, [r1, #2]
     124:	f811 2b03 	ldrb.w	r2, [r1], #3
     128:	9100      	str	r1, [sp, #0]
     12a:	4912      	ldr	r1, [pc, #72]	; (174 <_Min_Stack_Size+0x74>)
     12c:	f001 fe90 	bl	1e50 <ser_outf>

        tcv_endp(packet);
     130:	4b0b      	ldr	r3, [pc, #44]	; (160 <_Min_Stack_Size+0x60>)
     132:	6818      	ldr	r0, [r3, #0]
     134:	f001 fae8 	bl	1708 <tcv_endp>
        proceed Receiving;
     138:	2000      	movs	r0, #0

}
     13a:	b003      	add	sp, #12
     13c:	f85d eb04 	ldr.w	lr, [sp], #4
        proceed Receiving;
     140:	f000 bfba 	b.w	10b8 <proceed>
        } else if (receivedMessage->receiverId == '0' || receivedMessage->receiverId == 0) {
     144:	2b30      	cmp	r3, #48	; 0x30
     146:	d001      	beq.n	14c <_Min_Stack_Size+0x4c>
     148:	2b00      	cmp	r3, #0
     14a:	d1d9      	bne.n	100 <_Min_Stack_Size>
            proceed From_Broadcast;
     14c:	2003      	movs	r0, #3
     14e:	e7d5      	b.n	fc <receiver+0x34>
}
     150:	b003      	add	sp, #12
     152:	f85d eb04 	ldr.w	lr, [sp], #4
     156:	f000 bf27 	b.w	fa8 <__pi_badstate>
     15a:	bf00      	nop
     15c:	20000000 	andcs	r0, r0, r0
     160:	20000110 	andcs	r0, r0, r0, lsl r1
     164:	20000114 	andcs	r0, r0, r4, lsl r1
     168:	200001fc 	strdcs	r0, [r0], -ip
     16c:	000040b4 	strheq	r4, [r0], -r4	; <UNPREDICTABLE>
     170:	000040bd 	strheq	r4, [r0], -sp
     174:	000040c8 	andeq	r4, r0, r8, asr #1

00000178 <transmitter>:

fsm transmitter (message * messagePtr) {
     178:	b570      	push	{r4, r5, r6, lr}
     17a:	4605      	mov	r5, r0
     17c:	b128      	cbz	r0, 18a <transmitter+0x12>
     17e:	2801      	cmp	r0, #1
     180:	d021      	beq.n	1c6 <transmitter+0x4e>
        sequence++;

    state Confirm_Transmission:
        ser_outf(Transmit_Message, "Message Sent\n\r");
        finish;
}
     182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     186:	f000 bf0f 	b.w	fa8 <__pi_badstate>
fsm transmitter (message * messagePtr) {
     18a:	4b13      	ldr	r3, [pc, #76]	; (1d8 <transmitter+0x60>)
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
     18c:	4913      	ldr	r1, [pc, #76]	; (1dc <transmitter+0x64>)
fsm transmitter (message * messagePtr) {
     18e:	681b      	ldr	r3, [r3, #0]
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
     190:	2222      	movs	r2, #34	; 0x22
fsm transmitter (message * messagePtr) {
     192:	689e      	ldr	r6, [r3, #8]
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
     194:	6809      	ldr	r1, [r1, #0]
     196:	4603      	mov	r3, r0
     198:	f001 fba0 	bl	18dc <tcv_wnps>
     19c:	4604      	mov	r4, r0
        spkt [0] = 0;
     19e:	8005      	strh	r5, [r0, #0]
        *p = messagePtr->senderId; p++;
     1a0:	7833      	ldrb	r3, [r6, #0]
        strcpy(p, messagePtr->payload);
     1a2:	1cf1      	adds	r1, r6, #3
        *p = messagePtr->senderId; p++;
     1a4:	7083      	strb	r3, [r0, #2]
        *p = messagePtr->receiverId; p++;
     1a6:	7873      	ldrb	r3, [r6, #1]
        strcpy(p, messagePtr->payload);
     1a8:	3005      	adds	r0, #5
        *p = messagePtr->receiverId; p++;
     1aa:	f800 3c02 	strb.w	r3, [r0, #-2]
        *p = messagePtr->sequenceNumber; p++;
     1ae:	78b3      	ldrb	r3, [r6, #2]
     1b0:	f800 3c01 	strb.w	r3, [r0, #-1]
        strcpy(p, messagePtr->payload);
     1b4:	f001 f805 	bl	11c2 <__pi_strcpy>
        tcv_endp (spkt);
     1b8:	4620      	mov	r0, r4
     1ba:	f001 faa5 	bl	1708 <tcv_endp>
        sequence++;
     1be:	4a08      	ldr	r2, [pc, #32]	; (1e0 <transmitter+0x68>)
     1c0:	7813      	ldrb	r3, [r2, #0]
     1c2:	3301      	adds	r3, #1
     1c4:	7013      	strb	r3, [r2, #0]
        ser_outf(Transmit_Message, "Message Sent\n\r");
     1c6:	2000      	movs	r0, #0
     1c8:	4906      	ldr	r1, [pc, #24]	; (1e4 <transmitter+0x6c>)
     1ca:	f001 fe41 	bl	1e50 <ser_outf>
}
     1ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        finish;
     1d2:	2000      	movs	r0, #0
     1d4:	f001 b8ba 	b.w	134c <kill>
     1d8:	20000230 	andcs	r0, r0, r0, lsr r2
     1dc:	20000000 	andcs	r0, r0, r0
     1e0:	200001fd 	strdcs	r0, [r0], -sp
     1e4:	000040e4 	andeq	r4, r0, r4, ror #1

000001e8 <root>:
    }

    return YES;
}

fsm root {
     1e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
     1ea:	280a      	cmp	r0, #10
     1ec:	f200 80ab 	bhi.w	346 <root+0x15e>
     1f0:	e8df f000 	tbb	[pc, r0]
     1f4:	3e3a3106 	rsfcce	f3, f2, f6
     1f8:	726e5e5a 	rsbvc	r5, lr, #1440	; 0x5a0
     1fc:	0093837f 	addseq	r8, r3, pc, ror r3
"(D)irect transmission\n\r"
"(B)roadcast transmission\n\r"
"Selection: ";

    state Initialize:
        nodeId = 1;
     200:	2201      	movs	r2, #1
        sequence = 0;
     202:	2400      	movs	r4, #0
        nodeId = 1;
     204:	4b52      	ldr	r3, [pc, #328]	; (350 <root+0x168>)

        messagePtr = (message *) umalloc(sizeof(message));
     206:	201e      	movs	r0, #30
        nodeId = 1;
     208:	701a      	strb	r2, [r3, #0]
        sequence = 0;
     20a:	4b52      	ldr	r3, [pc, #328]	; (354 <root+0x16c>)

        phys_cc1350(0, MAX_PACKET_LENGTH);

        tcv_plug(0, &plug_null);
        sfd = tcv_open(WNONE, 0, 0);
     20c:	4d52      	ldr	r5, [pc, #328]	; (358 <root+0x170>)
        sequence = 0;
     20e:	701c      	strb	r4, [r3, #0]
        messagePtr = (message *) umalloc(sizeof(message));
     210:	f001 f8c4 	bl	139c <__pi_malloc>
     214:	4b51      	ldr	r3, [pc, #324]	; (35c <root+0x174>)
        phys_cc1350(0, MAX_PACKET_LENGTH);
     216:	21fa      	movs	r1, #250	; 0xfa
        messagePtr = (message *) umalloc(sizeof(message));
     218:	6018      	str	r0, [r3, #0]
        phys_cc1350(0, MAX_PACKET_LENGTH);
     21a:	4620      	mov	r0, r4
     21c:	f002 fa22 	bl	2664 <phys_cc1350>
        tcv_plug(0, &plug_null);
     220:	494f      	ldr	r1, [pc, #316]	; (360 <root+0x178>)
     222:	4620      	mov	r0, r4
     224:	f001 fb08 	bl	1838 <tcv_plug>
        sfd = tcv_open(WNONE, 0, 0);
     228:	4622      	mov	r2, r4
     22a:	4621      	mov	r1, r4
     22c:	f64f 70ff 	movw	r0, #65535	; 0xffff
     230:	f001 faa2 	bl	1778 <tcv_open>
		tcv_control(sfd, PHYSOPT_ON, NULL);
     234:	4622      	mov	r2, r4
     236:	2104      	movs	r1, #4
        sfd = tcv_open(WNONE, 0, 0);
     238:	6028      	str	r0, [r5, #0]
		tcv_control(sfd, PHYSOPT_ON, NULL);
     23a:	f001 fbc3 	bl	19c4 <tcv_control>

		if (sfd < 0) {
     23e:	682b      	ldr	r3, [r5, #0]
     240:	42a3      	cmp	r3, r4
     242:	da04      	bge.n	24e <root+0x66>
			diag("Cannot open tcv interface");
     244:	4847      	ldr	r0, [pc, #284]	; (364 <root+0x17c>)
     246:	f001 f923 	bl	1490 <diag>
			halt();
     24a:	f000 fdfb 	bl	e44 <halt>
		}

        runfsm receiver;
     24e:	4621      	mov	r1, r4
     250:	4845      	ldr	r0, [pc, #276]	; (368 <root+0x180>)
     252:	f001 f8f7 	bl	1444 <__pi_fork>

    state Menu_Start:
        receiverId = 0;
     256:	2200      	movs	r2, #0
     258:	4b44      	ldr	r3, [pc, #272]	; (36c <root+0x184>)
        ser_outf(Menu_Start, "P2P Chat (Node #%d)\n\r", nodeId);
     25a:	2001      	movs	r0, #1
        receiverId = 0;
     25c:	701a      	strb	r2, [r3, #0]
        ser_outf(Menu_Start, "P2P Chat (Node #%d)\n\r", nodeId);
     25e:	4b3c      	ldr	r3, [pc, #240]	; (350 <root+0x168>)
     260:	4943      	ldr	r1, [pc, #268]	; (370 <root+0x188>)
     262:	781a      	ldrb	r2, [r3, #0]
     264:	f001 fdf4 	bl	1e50 <ser_outf>
    
    state Menu_Choices:
        ser_outf(Menu_Choices, menuText);
     268:	2002      	movs	r0, #2
     26a:	4942      	ldr	r1, [pc, #264]	; (374 <root+0x18c>)
     26c:	f001 fdf0 	bl	1e50 <ser_outf>

    state Choice:
        char choice;

        ser_inf(Choice, "%c", &choice);
     270:	2003      	movs	r0, #3
     272:	4941      	ldr	r1, [pc, #260]	; (378 <root+0x190>)
     274:	f10d 0207 	add.w	r2, sp, #7
     278:	f001 fe14 	bl	1ea4 <ser_inf>
    
        switch (choice)
     27c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     280:	2b62      	cmp	r3, #98	; 0x62
     282:	d05e      	beq.n	342 <root+0x15a>
     284:	d807      	bhi.n	296 <root+0xae>
     286:	2b43      	cmp	r3, #67	; 0x43
     288:	d00b      	beq.n	2a2 <root+0xba>
     28a:	2b44      	cmp	r3, #68	; 0x44
     28c:	d007      	beq.n	29e <root+0xb6>
     28e:	2b42      	cmp	r3, #66	; 0x42
     290:	d057      	beq.n	342 <root+0x15a>
            case 'b':
                proceed Broadcast_Transmission;
                break;

            default:
                proceed Menu_Start;
     292:	2001      	movs	r0, #1
     294:	e006      	b.n	2a4 <root+0xbc>
     296:	2b63      	cmp	r3, #99	; 0x63
     298:	d003      	beq.n	2a2 <root+0xba>
     29a:	2b64      	cmp	r3, #100	; 0x64
     29c:	d1f9      	bne.n	292 <root+0xaa>
                proceed Direct_Transmission;
     29e:	2006      	movs	r0, #6
     2a0:	e000      	b.n	2a4 <root+0xbc>
                proceed Change_ID;
     2a2:	2004      	movs	r0, #4
                proceed Menu_Start;
     2a4:	f000 ff08 	bl	10b8 <proceed>
                break;
        }
    
    state Change_ID:
        ser_outf(Change_ID, "New node ID (1-25):");
     2a8:	2004      	movs	r0, #4
     2aa:	4934      	ldr	r1, [pc, #208]	; (37c <root+0x194>)
     2ac:	f001 fdd0 	bl	1e50 <ser_outf>
    
    state Get_New_ID:
        ser_inf(Get_New_ID, "%d", &nodeId);
     2b0:	4c27      	ldr	r4, [pc, #156]	; (350 <root+0x168>)
     2b2:	2005      	movs	r0, #5
     2b4:	4622      	mov	r2, r4
     2b6:	4932      	ldr	r1, [pc, #200]	; (380 <root+0x198>)
     2b8:	f001 fdf4 	bl	1ea4 <ser_inf>
    if (node < 1 || node > 25) {
     2bc:	7823      	ldrb	r3, [r4, #0]
     2be:	3b01      	subs	r3, #1
     2c0:	2b18      	cmp	r3, #24
     2c2:	d902      	bls.n	2ca <root+0xe2>

        if (!isValidNodeId(nodeId)) {
            proceed Change_ID;
     2c4:	2004      	movs	r0, #4
     2c6:	f000 fef7 	bl	10b8 <proceed>
        }

        proceed Menu_Start;
     2ca:	2001      	movs	r0, #1
     2cc:	f000 fef4 	bl	10b8 <proceed>
    
    state Direct_Transmission:
        ser_outf(Direct_Transmission, "Receiver node ID (1-25):");
     2d0:	2006      	movs	r0, #6
     2d2:	492c      	ldr	r1, [pc, #176]	; (384 <root+0x19c>)
     2d4:	f001 fdbc 	bl	1e50 <ser_outf>
    
    state Get_Receiver_Node:
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     2d8:	4c24      	ldr	r4, [pc, #144]	; (36c <root+0x184>)
     2da:	2007      	movs	r0, #7
     2dc:	4622      	mov	r2, r4
     2de:	4928      	ldr	r1, [pc, #160]	; (380 <root+0x198>)
     2e0:	f001 fde0 	bl	1ea4 <ser_inf>
    if (node < 1 || node > 25) {
     2e4:	7823      	ldrb	r3, [r4, #0]
     2e6:	3b01      	subs	r3, #1
     2e8:	2b18      	cmp	r3, #24
     2ea:	d902      	bls.n	2f2 <root+0x10a>

        if(!isValidNodeId(receiverId)) {
            proceed Direct_Transmission;
     2ec:	2006      	movs	r0, #6
     2ee:	f000 fee3 	bl	10b8 <proceed>
        }

    state Broadcast_Transmission:
        ser_outf(Broadcast_Transmission, "Message: ");
     2f2:	2008      	movs	r0, #8
     2f4:	4924      	ldr	r1, [pc, #144]	; (388 <root+0x1a0>)
     2f6:	f001 fdab 	bl	1e50 <ser_outf>
    
    state Get_Message:
        //byte mes[PAYLOAD_LENGTH];

        ser_in(Get_Message, messagePtr->payload, PAYLOAD_LENGTH);
     2fa:	4c18      	ldr	r4, [pc, #96]	; (35c <root+0x174>)
     2fc:	221b      	movs	r2, #27
     2fe:	6821      	ldr	r1, [r4, #0]
     300:	2009      	movs	r0, #9
     302:	3103      	adds	r1, #3
     304:	f001 fd68 	bl	1dd8 <ser_in>

        if(strlen(messagePtr->payload) > PAYLOAD_LENGTH) {
     308:	6820      	ldr	r0, [r4, #0]
     30a:	3003      	adds	r0, #3
     30c:	f000 ff52 	bl	11b4 <__pi_strlen>
     310:	281b      	cmp	r0, #27
            messagePtr->payload[PAYLOAD_LENGTH - 1] = '/0';
     312:	bfc2      	ittt	gt
     314:	2230      	movgt	r2, #48	; 0x30
     316:	6823      	ldrgt	r3, [r4, #0]
     318:	775a      	strbgt	r2, [r3, #29]
        }

    state Transmit:
        messagePtr->senderId = nodeId;
     31a:	4b10      	ldr	r3, [pc, #64]	; (35c <root+0x174>)
        messagePtr->receiverId = receiverId;
        messagePtr->sequenceNumber = sequence;

        call transmitter(messagePtr, Menu_Start);
     31c:	481b      	ldr	r0, [pc, #108]	; (38c <root+0x1a4>)
        messagePtr->senderId = nodeId;
     31e:	6819      	ldr	r1, [r3, #0]
     320:	4b0b      	ldr	r3, [pc, #44]	; (350 <root+0x168>)
     322:	781b      	ldrb	r3, [r3, #0]
     324:	700b      	strb	r3, [r1, #0]
        messagePtr->receiverId = receiverId;
     326:	4b11      	ldr	r3, [pc, #68]	; (36c <root+0x184>)
     328:	781b      	ldrb	r3, [r3, #0]
     32a:	704b      	strb	r3, [r1, #1]
        messagePtr->sequenceNumber = sequence;
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <root+0x16c>)
     32e:	781b      	ldrb	r3, [r3, #0]
     330:	708b      	strb	r3, [r1, #2]
        call transmitter(messagePtr, Menu_Start);
     332:	f001 f887 	bl	1444 <__pi_fork>
     336:	2101      	movs	r1, #1
     338:	f000 fefc 	bl	1134 <__pi_join>
     33c:	b128      	cbz	r0, 34a <root+0x162>
     33e:	f000 fc55 	bl	bec <__pi_release>
                proceed Broadcast_Transmission;
     342:	2008      	movs	r0, #8
     344:	e7ae      	b.n	2a4 <root+0xbc>
     346:	f000 fe2f 	bl	fa8 <__pi_badstate>
     34a:	b003      	add	sp, #12
     34c:	bd30      	pop	{r4, r5, pc}
     34e:	bf00      	nop
     350:	200001fc 	strdcs	r0, [r0], -ip
     354:	200001fd 	strdcs	r0, [r0], -sp
     358:	20000000 	andcs	r0, r0, r0
     35c:	2000010c 	andcs	r0, r0, ip, lsl #2
     360:	00004d34 	andeq	r4, r0, r4, lsr sp
     364:	000040f3 	strdeq	r4, [r0], -r3
     368:	000000c9 	andeq	r0, r0, r9, asr #1
     36c:	20000118 	andcs	r0, r0, r8, lsl r1
     370:	0000410d 	andeq	r4, r0, sp, lsl #2
     374:	00004123 	andeq	r4, r0, r3, lsr #2
     378:	00004172 	andeq	r4, r0, r2, ror r1
     37c:	00004175 	andeq	r4, r0, r5, ror r1
     380:	000043bb 			; <UNDEFINED> instruction: 0x000043bb
     384:	00004189 	andeq	r4, r0, r9, lsl #3
     388:	000041a2 	andeq	r4, r0, r2, lsr #3
     38c:	00000179 	andeq	r0, r0, r9, ror r1

00000390 <devinit_uart>:
			/* No return */
			return 0;
	}
}

static void devinit_uart (int devnum) {
     390:	4601      	mov	r1, r0

	adddevfunc (ioreq_uart_a, devnum);
     392:	4801      	ldr	r0, [pc, #4]	; (398 <devinit_uart+0x8>)
     394:	f000 bf2e 	b.w	11f4 <adddevfunc>
     398:	0000071d 	andeq	r0, r0, sp, lsl r7

0000039c <udelay>:
void udelay (volatile word n) {
     39c:	b082      	sub	sp, #8
     39e:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     3a2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     3a6:	b29b      	uxth	r3, r3
     3a8:	b90b      	cbnz	r3, 3ae <udelay+0x12>
}
     3aa:	b002      	add	sp, #8
     3ac:	4770      	bx	lr
		_gdelay (__USEC_DELAY);
     3ae:	2304      	movs	r3, #4
	while (n--);
     3b0:	461a      	mov	r2, r3
     3b2:	3b01      	subs	r3, #1
     3b4:	b29b      	uxth	r3, r3
     3b6:	2a00      	cmp	r2, #0
     3b8:	d1fa      	bne.n	3b0 <udelay+0x14>
		n--;
     3ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     3be:	3b01      	subs	r3, #1
     3c0:	b29b      	uxth	r3, r3
     3c2:	f8ad 3006 	strh.w	r3, [sp, #6]
     3c6:	e7ec      	b.n	3a2 <udelay+0x6>

000003c8 <mdelay>:
void mdelay (volatile word n) {
     3c8:	b507      	push	{r0, r1, r2, lr}
     3ca:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     3ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     3d2:	b29b      	uxth	r3, r3
     3d4:	b913      	cbnz	r3, 3dc <mdelay+0x14>
}
     3d6:	b003      	add	sp, #12
     3d8:	f85d fb04 	ldr.w	pc, [sp], #4
		udelay (999);
     3dc:	f240 30e7 	movw	r0, #999	; 0x3e7
     3e0:	f7ff ffdc 	bl	39c <udelay>
		n--;
     3e4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     3e8:	3b01      	subs	r3, #1
     3ea:	b29b      	uxth	r3, r3
     3ec:	f8ad 3006 	strh.w	r3, [sp, #6]
     3f0:	e7ed      	b.n	3ce <mdelay+0x6>
	...

000003f4 <__pi_ondomain>:
void __pi_ondomain (lword d) {
     3f4:	b538      	push	{r3, r4, r5, lr}
	if (d & PRCM_DOMAIN_RFCORE) {
     3f6:	07c3      	lsls	r3, r0, #31
void __pi_ondomain (lword d) {
     3f8:	4604      	mov	r4, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     3fa:	d505      	bpl.n	408 <__pi_ondomain+0x14>
		if (__pi_systat.effpdm > 1)
     3fc:	4b0a      	ldr	r3, [pc, #40]	; (428 <__pi_ondomain+0x34>)
     3fe:	78da      	ldrb	r2, [r3, #3]
     400:	2a01      	cmp	r2, #1
			__pi_systat.effpdm = 1;
     402:	bf84      	itt	hi
     404:	2201      	movhi	r2, #1
     406:	70da      	strbhi	r2, [r3, #3]
	PRCMPowerDomainOn (d);
     408:	4d08      	ldr	r5, [pc, #32]	; (42c <__pi_ondomain+0x38>)
     40a:	4620      	mov	r0, r4
     40c:	682b      	ldr	r3, [r5, #0]
     40e:	695b      	ldr	r3, [r3, #20]
     410:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     412:	682b      	ldr	r3, [r5, #0]
     414:	4620      	mov	r0, r4
     416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     418:	4798      	blx	r3
     41a:	2801      	cmp	r0, #1
     41c:	d1f9      	bne.n	412 <__pi_ondomain+0x1e>
	__pi_systat.ondmns |= d;
     41e:	4b02      	ldr	r3, [pc, #8]	; (428 <__pi_ondomain+0x34>)
     420:	6858      	ldr	r0, [r3, #4]
     422:	4304      	orrs	r4, r0
     424:	605c      	str	r4, [r3, #4]
}
     426:	bd38      	pop	{r3, r4, r5, pc}
     428:	20000214 	andcs	r0, r0, r4, lsl r2
     42c:	100001b8 			; <UNDEFINED> instruction: 0x100001b8

00000430 <__pi_offdomain>:
void __pi_offdomain (lword d) {
     430:	b538      	push	{r3, r4, r5, lr}
	PRCMPowerDomainOff (d);
     432:	4d0d      	ldr	r5, [pc, #52]	; (468 <__pi_offdomain+0x38>)
void __pi_offdomain (lword d) {
     434:	4604      	mov	r4, r0
	PRCMPowerDomainOff (d);
     436:	682b      	ldr	r3, [r5, #0]
     438:	699b      	ldr	r3, [r3, #24]
     43a:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     43c:	682b      	ldr	r3, [r5, #0]
     43e:	4620      	mov	r0, r4
     440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     442:	4798      	blx	r3
     444:	2802      	cmp	r0, #2
     446:	d1f9      	bne.n	43c <__pi_offdomain+0xc>
	if (d & PRCM_DOMAIN_RFCORE) {
     448:	f014 0f01 	tst.w	r4, #1
     44c:	4b07      	ldr	r3, [pc, #28]	; (46c <__pi_offdomain+0x3c>)
     44e:	d006      	beq.n	45e <__pi_offdomain+0x2e>
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     450:	7899      	ldrb	r1, [r3, #2]
     452:	78da      	ldrb	r2, [r3, #3]
     454:	4291      	cmp	r1, r2
			__pi_systat.effpdm = __pi_systat.reqpdm;
     456:	bf82      	ittt	hi
     458:	789a      	ldrbhi	r2, [r3, #2]
     45a:	b2d2      	uxtbhi	r2, r2
     45c:	70da      	strbhi	r2, [r3, #3]
	__pi_systat.ondmns &= ~d;
     45e:	6858      	ldr	r0, [r3, #4]
     460:	ea20 0404 	bic.w	r4, r0, r4
     464:	605c      	str	r4, [r3, #4]
}
     466:	bd38      	pop	{r3, r4, r5, pc}
     468:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     46c:	20000214 	andcs	r0, r0, r4, lsl r2

00000470 <__pi_syserror>:
void __pi_syserror (word ec, const char *m) {
     470:	460a      	mov	r2, r1
     472:	b580      	push	{r7, lr}
	diag ("SYSERR: %x, %s", ec, m);
     474:	4601      	mov	r1, r0
     476:	480f      	ldr	r0, [pc, #60]	; (4b4 <__pi_syserror+0x44>)
     478:	f001 f80a 	bl	1490 <diag>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     47c:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Set the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     47e:	2540      	movs	r5, #64	; 0x40
     480:	462f      	mov	r7, r5
     482:	4e0d      	ldr	r6, [pc, #52]	; (4b8 <__pi_syserror+0x48>)
     484:	2480      	movs	r4, #128	; 0x80
		all_leds_blink;
     486:	490d      	ldr	r1, [pc, #52]	; (4bc <__pi_syserror+0x4c>)
     488:	6037      	str	r7, [r6, #0]
     48a:	6034      	str	r4, [r6, #0]
     48c:	780b      	ldrb	r3, [r1, #0]
     48e:	780b      	ldrb	r3, [r1, #0]
     490:	20c8      	movs	r0, #200	; 0xc8
     492:	f36f 1307 	bfc	r3, #4, #4
     496:	700b      	strb	r3, [r1, #0]
     498:	f7ff ff96 	bl	3c8 <mdelay>
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     49c:	4b08      	ldr	r3, [pc, #32]	; (4c0 <__pi_syserror+0x50>)
     49e:	20c8      	movs	r0, #200	; 0xc8
     4a0:	601d      	str	r5, [r3, #0]
     4a2:	601c      	str	r4, [r3, #0]
     4a4:	780b      	ldrb	r3, [r1, #0]
     4a6:	780b      	ldrb	r3, [r1, #0]
     4a8:	f36f 1307 	bfc	r3, #4, #4
     4ac:	700b      	strb	r3, [r1, #0]
     4ae:	f7ff ff8b 	bl	3c8 <mdelay>
	while (1) {
     4b2:	e7e7      	b.n	484 <__pi_syserror+0x14>
     4b4:	000041ac 	andeq	r4, r0, ip, lsr #3
     4b8:	40022090 	mulmi	r2, r0, r0
     4bc:	20000214 	andcs	r0, r0, r4, lsl r2
     4c0:	400220a0 	andmi	r2, r2, r0, lsr #1

000004c4 <tci_run_delay_timer>:
void tci_run_delay_timer () {
     4c4:	b510      	push	{r4, lr}
	setdel = __pi_mintk - __pi_old;
     4c6:	4b0a      	ldr	r3, [pc, #40]	; (4f0 <tci_run_delay_timer+0x2c>)
     4c8:	881c      	ldrh	r4, [r3, #0]
     4ca:	4b0a      	ldr	r3, [pc, #40]	; (4f4 <tci_run_delay_timer+0x30>)
     4cc:	8818      	ldrh	r0, [r3, #0]
     4ce:	4b0a      	ldr	r3, [pc, #40]	; (4f8 <tci_run_delay_timer+0x34>)
     4d0:	1b00      	subs	r0, r0, r4
     4d2:	b284      	uxth	r4, r0
     4d4:	801c      	strh	r4, [r3, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4d6:	f002 fde9 	bl	30ac <NOROM_AONRTCCurrent64BitValueGet>
	sti_tim;
     4da:	2201      	movs	r2, #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4dc:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     4de:	4b07      	ldr	r3, [pc, #28]	; (4fc <tci_run_delay_timer+0x38>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     4e4:	eb00 1084 	add.w	r0, r0, r4, lsl #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     4e8:	6018      	str	r0, [r3, #0]
	sti_tim;
     4ea:	4b05      	ldr	r3, [pc, #20]	; (500 <tci_run_delay_timer+0x3c>)
     4ec:	601a      	str	r2, [r3, #0]
}
     4ee:	bd10      	pop	{r4, pc}
     4f0:	20000212 	andcs	r0, r0, r2, lsl r2
     4f4:	20000210 	andcs	r0, r0, r0, lsl r2
     4f8:	2000011a 	andcs	r0, r0, sl, lsl r1
     4fc:	40092018 	andmi	r2, r9, r8, lsl r0
     500:	43240280 			; <UNDEFINED> instruction: 0x43240280

00000504 <tci_run_auxiliary_timer>:
	cli_aux;
     504:	2300      	movs	r3, #0
void tci_run_auxiliary_timer () {
     506:	b510      	push	{r4, lr}
	cli_aux;
     508:	4c06      	ldr	r4, [pc, #24]	; (524 <tci_run_auxiliary_timer+0x20>)
     50a:	6023      	str	r3, [r4, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     50c:	f002 fdce 	bl	30ac <NOROM_AONRTCCurrent64BitValueGet>
     510:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     512:	4b05      	ldr	r3, [pc, #20]	; (528 <tci_run_auxiliary_timer+0x24>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     514:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     518:	3040      	adds	r0, #64	; 0x40
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     51a:	6018      	str	r0, [r3, #0]
	sti_aux;
     51c:	2301      	movs	r3, #1
     51e:	6023      	str	r3, [r4, #0]
}
     520:	bd10      	pop	{r4, pc}
     522:	bf00      	nop
     524:	432402c0 			; <UNDEFINED> instruction: 0x432402c0
     528:	40092020 	andmi	r2, r9, r0, lsr #32

0000052c <AONRTCIntHandler>:
void AONRTCIntHandler () {
     52c:	b510      	push	{r4, lr}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     52e:	4b3b      	ldr	r3, [pc, #236]	; (61c <AONRTCIntHandler+0xf0>)
     530:	6818      	ldr	r0, [r3, #0]
     532:	f000 1201 	and.w	r2, r0, #65537	; 0x10001
	if (events & AON_RTC_EVFLAGS_CH2) {
     536:	03c4      	lsls	r4, r0, #15
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     538:	601a      	str	r2, [r3, #0]
	if (events & AON_RTC_EVFLAGS_CH2) {
     53a:	d542      	bpl.n	5c2 <AONRTCIntHandler+0x96>
		if (__pi_utims [0] == 0)
     53c:	4b38      	ldr	r3, [pc, #224]	; (620 <AONRTCIntHandler+0xf4>)
     53e:	6819      	ldr	r1, [r3, #0]
     540:	2900      	cmp	r1, #0
     542:	d053      	beq.n	5ec <AONRTCIntHandler+0xc0>
		if (*(__pi_utims [0])) {
     544:	880a      	ldrh	r2, [r1, #0]
     546:	2a00      	cmp	r2, #0
     548:	d04e      	beq.n	5e8 <AONRTCIntHandler+0xbc>
			(*(__pi_utims [0]))--;
     54a:	3a01      	subs	r2, #1
     54c:	800a      	strh	r2, [r1, #0]
			aux_timer_inactive = 0;
     54e:	2200      	movs	r2, #0
		if (__pi_utims [1] == 0)
     550:	685c      	ldr	r4, [r3, #4]
     552:	b194      	cbz	r4, 57a <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [1])) {
     554:	8821      	ldrh	r1, [r4, #0]
     556:	b111      	cbz	r1, 55e <AONRTCIntHandler+0x32>
			aux_timer_inactive = 0;
     558:	2200      	movs	r2, #0
			(*(__pi_utims [1]))--;
     55a:	3901      	subs	r1, #1
     55c:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [2] == 0)
     55e:	689c      	ldr	r4, [r3, #8]
     560:	b15c      	cbz	r4, 57a <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [2])) {
     562:	8821      	ldrh	r1, [r4, #0]
     564:	b111      	cbz	r1, 56c <AONRTCIntHandler+0x40>
			aux_timer_inactive = 0;
     566:	2200      	movs	r2, #0
			(*(__pi_utims [2]))--;
     568:	3901      	subs	r1, #1
     56a:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [3] != 0) {
     56c:	68d9      	ldr	r1, [r3, #12]
     56e:	b121      	cbz	r1, 57a <AONRTCIntHandler+0x4e>
			if (*(__pi_utims [3])) {
     570:	880b      	ldrh	r3, [r1, #0]
     572:	b113      	cbz	r3, 57a <AONRTCIntHandler+0x4e>
				aux_timer_inactive = 0;
     574:	2200      	movs	r2, #0
				(*(__pi_utims [3]))--;
     576:	3b01      	subs	r3, #1
     578:	800b      	strh	r3, [r1, #0]
/* ==================================================================== */
/* Copyright (C) Olsonet Communications, 2002 - 2006                    */
/* All rights reserved.                                                 */
/* ==================================================================== */

	if (__pi_systat.ledsts) {
     57a:	4b2a      	ldr	r3, [pc, #168]	; (624 <AONRTCIntHandler+0xf8>)
     57c:	7819      	ldrb	r1, [r3, #0]
     57e:	0909      	lsrs	r1, r1, #4
     580:	d047      	beq.n	612 <AONRTCIntHandler+0xe6>
		// Some leds are supposed to blink
		if (__pi_systat.ledblc++ == 0) {
     582:	7859      	ldrb	r1, [r3, #1]
     584:	1c4a      	adds	r2, r1, #1
     586:	b2d2      	uxtb	r2, r2
     588:	705a      	strb	r2, [r3, #1]
     58a:	b9d1      	cbnz	r1, 5c2 <AONRTCIntHandler+0x96>
			if (__pi_systat.ledblk) {
     58c:	781a      	ldrb	r2, [r3, #0]
     58e:	f012 0f08 	tst.w	r2, #8
				if (__pi_systat.ledsts & 0x1)
     592:	781a      	ldrb	r2, [r3, #0]
			if (__pi_systat.ledblk) {
     594:	d02c      	beq.n	5f0 <AONRTCIntHandler+0xc4>
				if (__pi_systat.ledsts & 0x1)
     596:	06d1      	lsls	r1, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     598:	bf42      	ittt	mi
     59a:	2140      	movmi	r1, #64	; 0x40
     59c:	4a22      	ldrmi	r2, [pc, #136]	; (628 <AONRTCIntHandler+0xfc>)
     59e:	6011      	strmi	r1, [r2, #0]
					LED0_ON;
				if (__pi_systat.ledsts & 0x2)
     5a0:	781a      	ldrb	r2, [r3, #0]
     5a2:	0692      	lsls	r2, r2, #26
     5a4:	bf42      	ittt	mi
     5a6:	2180      	movmi	r1, #128	; 0x80
     5a8:	4a1f      	ldrmi	r2, [pc, #124]	; (628 <AONRTCIntHandler+0xfc>)
     5aa:	6011      	strmi	r1, [r2, #0]
					LED1_ON;
				if (__pi_systat.ledsts & 0x4)
     5ac:	781a      	ldrb	r2, [r3, #0]
					LED2_ON;
				if (__pi_systat.ledsts & 0x8)
     5ae:	781a      	ldrb	r2, [r3, #0]
					LED3_ON;
				__pi_systat.ledblk = 0;
     5b0:	781a      	ldrb	r2, [r3, #0]
     5b2:	f36f 02c3 	bfc	r2, #3, #1
					LED1_OFF;
				if (__pi_systat.ledsts & 0x4)
					LED2_OFF;
				if (__pi_systat.ledsts & 0x8)
					LED3_OFF;
				__pi_systat.ledblk = 1;
     5b6:	701a      	strb	r2, [r3, #0]
			}
			if (__pi_systat.fstblk)
     5b8:	781a      	ldrb	r2, [r3, #0]
     5ba:	0752      	lsls	r2, r2, #29
     5bc:	d501      	bpl.n	5c2 <AONRTCIntHandler+0x96>
				__pi_systat.ledblc = 200;
     5be:	22c8      	movs	r2, #200	; 0xc8
     5c0:	705a      	strb	r2, [r3, #1]
	if (events & AON_RTC_EVFLAGS_CH0) {
     5c2:	07c3      	lsls	r3, r0, #31
     5c4:	d50f      	bpl.n	5e6 <AONRTCIntHandler+0xba>
		cli_tim;
     5c6:	2100      	movs	r1, #0
     5c8:	4b18      	ldr	r3, [pc, #96]	; (62c <AONRTCIntHandler+0x100>)
		__pi_new += setdel;
     5ca:	4a19      	ldr	r2, [pc, #100]	; (630 <AONRTCIntHandler+0x104>)
     5cc:	4819      	ldr	r0, [pc, #100]	; (634 <AONRTCIntHandler+0x108>)
		cli_tim;
     5ce:	6019      	str	r1, [r3, #0]
		__pi_new += setdel;
     5d0:	8803      	ldrh	r3, [r0, #0]
     5d2:	8814      	ldrh	r4, [r2, #0]
		setdel = 0;
     5d4:	8011      	strh	r1, [r2, #0]
		__pi_new += setdel;
     5d6:	4423      	add	r3, r4
		RISE_N_SHINE;
     5d8:	4a12      	ldr	r2, [pc, #72]	; (624 <AONRTCIntHandler+0xf8>)
		__pi_new += setdel;
     5da:	b29b      	uxth	r3, r3
     5dc:	8003      	strh	r3, [r0, #0]
		RISE_N_SHINE;
     5de:	7813      	ldrb	r3, [r2, #0]
     5e0:	f043 0302 	orr.w	r3, r3, #2
     5e4:	7013      	strb	r3, [r2, #0]
}
     5e6:	bd10      	pop	{r4, pc}
		aux_timer_inactive = 1;
     5e8:	2201      	movs	r2, #1
     5ea:	e7b1      	b.n	550 <AONRTCIntHandler+0x24>
     5ec:	2201      	movs	r2, #1
     5ee:	e7c4      	b.n	57a <AONRTCIntHandler+0x4e>
				if (__pi_systat.ledsts & 0x1)
     5f0:	06d4      	lsls	r4, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     5f2:	bf42      	ittt	mi
     5f4:	2140      	movmi	r1, #64	; 0x40
     5f6:	4a10      	ldrmi	r2, [pc, #64]	; (638 <AONRTCIntHandler+0x10c>)
     5f8:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x2)
     5fa:	781a      	ldrb	r2, [r3, #0]
     5fc:	0691      	lsls	r1, r2, #26
     5fe:	bf42      	ittt	mi
     600:	2180      	movmi	r1, #128	; 0x80
     602:	4a0d      	ldrmi	r2, [pc, #52]	; (638 <AONRTCIntHandler+0x10c>)
     604:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x4)
     606:	781a      	ldrb	r2, [r3, #0]
				if (__pi_systat.ledsts & 0x8)
     608:	781a      	ldrb	r2, [r3, #0]
				__pi_systat.ledblk = 1;
     60a:	781a      	ldrb	r2, [r3, #0]
     60c:	f042 0208 	orr.w	r2, r2, #8
     610:	e7d1      	b.n	5b6 <AONRTCIntHandler+0x8a>
		if (aux_timer_inactive) {
     612:	2a00      	cmp	r2, #0
     614:	d0d5      	beq.n	5c2 <AONRTCIntHandler+0x96>
			cli_aux;
     616:	4b09      	ldr	r3, [pc, #36]	; (63c <AONRTCIntHandler+0x110>)
     618:	6019      	str	r1, [r3, #0]
     61a:	e7d2      	b.n	5c2 <AONRTCIntHandler+0x96>
     61c:	40092004 	andmi	r2, r9, r4
     620:	20000220 	andcs	r0, r0, r0, lsr #4
     624:	20000214 	andcs	r0, r0, r4, lsl r2
     628:	40022090 	mulmi	r2, r0, r0
     62c:	43240280 			; <UNDEFINED> instruction: 0x43240280
     630:	2000011a 	andcs	r0, r0, sl, lsl r1
     634:	2000021c 	andcs	r0, r0, ip, lsl r2
     638:	400220a0 	andmi	r2, r2, r0, lsr #1
     63c:	432402c0 			; <UNDEFINED> instruction: 0x432402c0

00000640 <tci_update_delay_ticks>:
word tci_update_delay_ticks (Boolean force) {
     640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cli_tim;
     642:	2600      	movs	r6, #0
     644:	4b0e      	ldr	r3, [pc, #56]	; (680 <tci_update_delay_ticks+0x40>)
	if (setdel) {
     646:	4f0f      	ldr	r7, [pc, #60]	; (684 <tci_update_delay_ticks+0x44>)
	cli_tim;
     648:	601e      	str	r6, [r3, #0]
	if (setdel) {
     64a:	883d      	ldrh	r5, [r7, #0]
     64c:	b19d      	cbz	r5, 676 <tci_update_delay_ticks+0x36>
		if (force) {
     64e:	b1a0      	cbz	r0, 67a <tci_update_delay_ticks+0x3a>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     650:	4b0d      	ldr	r3, [pc, #52]	; (688 <tci_update_delay_ticks+0x48>)
     652:	681c      	ldr	r4, [r3, #0]
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     654:	f002 fd2a 	bl	30ac <NOROM_AONRTCCurrent64BitValueGet>
     658:	0d80      	lsrs	r0, r0, #22
     65a:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     65e:	f3c4 148f 	ubfx	r4, r4, #6, #16
				AON_RTC_O_CH0CMP)) - gettav ());
     662:	b280      	uxth	r0, r0
     664:	1a24      	subs	r4, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     666:	1b2c      	subs	r4, r5, r4
	return NO;
     668:	4635      	mov	r5, r6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     66a:	4b08      	ldr	r3, [pc, #32]	; (68c <tci_update_delay_ticks+0x4c>)
			setdel = 0;
     66c:	803e      	strh	r6, [r7, #0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     66e:	881a      	ldrh	r2, [r3, #0]
     670:	4414      	add	r4, r2
     672:	b2a4      	uxth	r4, r4
     674:	801c      	strh	r4, [r3, #0]
}
     676:	4628      	mov	r0, r5
     678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sti_tim;
     67a:	2501      	movs	r5, #1
     67c:	601d      	str	r5, [r3, #0]
		return YES;
     67e:	e7fa      	b.n	676 <tci_update_delay_ticks+0x36>
     680:	43240280 			; <UNDEFINED> instruction: 0x43240280
     684:	2000011a 	andcs	r0, r0, sl, lsl r1
     688:	40092018 	andmi	r2, r9, r8, lsl r0
     68c:	2000021c 	andcs	r0, r0, ip, lsl r2

00000690 <__pi_uart_setrate>:
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     690:	b570      	push	{r4, r5, r6, lr}
	UARTDisable (UART0_BASE);
     692:	4e0f      	ldr	r6, [pc, #60]	; (6d0 <__pi_uart_setrate+0x40>)
     694:	4d0f      	ldr	r5, [pc, #60]	; (6d4 <__pi_uart_setrate+0x44>)
     696:	6833      	ldr	r3, [r6, #0]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     698:	4604      	mov	r4, r0
	UARTDisable (UART0_BASE);
     69a:	68db      	ldr	r3, [r3, #12]
     69c:	4628      	mov	r0, r5
     69e:	4798      	blx	r3
	UARTConfigSetExpClk (UART0_BASE,
     6a0:	2264      	movs	r2, #100	; 0x64
     6a2:	6833      	ldr	r3, [r6, #0]
     6a4:	4628      	mov	r0, r5
     6a6:	4362      	muls	r2, r4
     6a8:	685e      	ldr	r6, [r3, #4]
     6aa:	490b      	ldr	r1, [pc, #44]	; (6d8 <__pi_uart_setrate+0x48>)
     6ac:	2360      	movs	r3, #96	; 0x60
     6ae:	47b0      	blx	r6
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6b0:	4a0a      	ldr	r2, [pc, #40]	; (6dc <__pi_uart_setrate+0x4c>)
}
     6b2:	2001      	movs	r0, #1
     6b4:	6813      	ldr	r3, [r2, #0]
     6b6:	f043 0310 	orr.w	r3, r3, #16
     6ba:	6013      	str	r3, [r2, #0]

    //
    // Enable RX, TX, and the UART.
    //
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     6bc:	6853      	ldr	r3, [r2, #4]
     6be:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     6c2:	f043 0301 	orr.w	r3, r3, #1
     6c6:	6053      	str	r3, [r2, #4]
	urates [0] = rate;
     6c8:	4b05      	ldr	r3, [pc, #20]	; (6e0 <__pi_uart_setrate+0x50>)
     6ca:	801c      	strh	r4, [r3, #0]
}
     6cc:	bd70      	pop	{r4, r5, r6, pc}
     6ce:	bf00      	nop
     6d0:	100001d0 	ldrdne	r0, [r0], -r0	; <UNPREDICTABLE>
     6d4:	40001000 	andmi	r1, r0, r0
     6d8:	02dc6c00 	sbcseq	r6, ip, #0, 24
     6dc:	4000102c 	andmi	r1, r0, ip, lsr #32
     6e0:	2000011c 	andcs	r0, r0, ip, lsl r1

000006e4 <reinit_uart>:
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6e4:	4a08      	ldr	r2, [pc, #32]	; (708 <reinit_uart+0x24>)
	__pi_uart_setrate (urates [0], __pi_uart);
     6e6:	4909      	ldr	r1, [pc, #36]	; (70c <reinit_uart+0x28>)
     6e8:	6813      	ldr	r3, [r2, #0]
     6ea:	f043 0310 	orr.w	r3, r3, #16
     6ee:	6013      	str	r3, [r2, #0]
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     6f0:	2212      	movs	r2, #18
     6f2:	4b07      	ldr	r3, [pc, #28]	; (710 <reinit_uart+0x2c>)
     6f4:	601a      	str	r2, [r3, #0]
    //
    // Check the arguments.
    //
    ASSERT( UARTBaseValid( ui32Base ));

    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     6f6:	4a07      	ldr	r2, [pc, #28]	; (714 <reinit_uart+0x30>)
     6f8:	6813      	ldr	r3, [r2, #0]
     6fa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     6fe:	6013      	str	r3, [r2, #0]
     700:	4b05      	ldr	r3, [pc, #20]	; (718 <reinit_uart+0x34>)
     702:	8818      	ldrh	r0, [r3, #0]
     704:	f7ff bfc4 	b.w	690 <__pi_uart_setrate>
     708:	4000102c 	andmi	r1, r0, ip, lsr #32
     70c:	20000200 	andcs	r0, r0, r0, lsl #4
     710:	40001034 	andmi	r1, r0, r4, lsr r0
     714:	40001030 	andmi	r1, r0, r0, lsr r0
     718:	2000011c 	andcs	r0, r0, ip, lsl r1

0000071c <ioreq_uart_a>:
	switch (operation) {
     71c:	3001      	adds	r0, #1
static int ioreq_uart_a (int operation, char *buf, int len) {
     71e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     722:	460d      	mov	r5, r1
     724:	4614      	mov	r4, r2
     726:	2803      	cmp	r0, #3
     728:	d86e      	bhi.n	808 <ioreq_uart_a+0xec>
     72a:	e8df f000 	tbb	[pc, r0]
     72e:	5a471253 	bpl	11c5082 <__ccfg+0x11a50da>
				*buf++ = uart_a_read;
     732:	f8d9 3000 	ldr.w	r3, [r9]
				len--;
     736:	3e01      	subs	r6, #1
				*buf++ = uart_a_read;
     738:	f805 3b01 	strb.w	r3, [r5], #1
			while (len && uart_a_char_available) {
     73c:	b11e      	cbz	r6, 746 <ioreq_uart_a+0x2a>
     73e:	f8d8 3000 	ldr.w	r3, [r8]
     742:	06d8      	lsls	r0, r3, #27
     744:	d5f5      	bpl.n	732 <ioreq_uart_a+0x16>
			if (len != operation) {
     746:	42a6      	cmp	r6, r4
     748:	d00a      	beq.n	760 <ioreq_uart_a+0x44>
				return operation - len;
     74a:	1ba4      	subs	r4, r4, r6
}
     74c:	4620      	mov	r0, r4
     74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				*buf++ = uart_a_read;
     752:	4616      	mov	r6, r2
			uart_a_disable_int;
     754:	4f2e      	ldr	r7, [pc, #184]	; (810 <ioreq_uart_a+0xf4>)
			if (uart_a_char_available) {
     756:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 824 <ioreq_uart_a+0x108>
				*buf++ = uart_a_read;
     75a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 828 <ioreq_uart_a+0x10c>
     75e:	e7ed      	b.n	73c <ioreq_uart_a+0x20>
			uart_a_disable_int;
     760:	683b      	ldr	r3, [r7, #0]
     762:	2015      	movs	r0, #21
     764:	695b      	ldr	r3, [r3, #20]
     766:	4798      	blx	r3
			if (uart_a_char_available) {
     768:	f8d8 3000 	ldr.w	r3, [r8]
     76c:	06d9      	lsls	r1, r3, #27
     76e:	d404      	bmi.n	77a <ioreq_uart_a+0x5e>
				uart_a_enable_int;
     770:	683b      	ldr	r3, [r7, #0]
     772:	2015      	movs	r0, #21
     774:	691b      	ldr	r3, [r3, #16]
     776:	4798      	blx	r3
				goto Redo_rx;
     778:	e7e0      	b.n	73c <ioreq_uart_a+0x20>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     77a:	4a26      	ldr	r2, [pc, #152]	; (814 <ioreq_uart_a+0xf8>)
     77c:	7993      	ldrb	r3, [r2, #6]
     77e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			return -2;
     782:	f06f 0401 	mvn.w	r4, #1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     786:	7193      	strb	r3, [r2, #6]
			return -2;
     788:	e7e0      	b.n	74c <ioreq_uart_a+0x30>
				uart_a_write (*buf);
     78a:	f815 3b01 	ldrb.w	r3, [r5], #1
				len--;
     78e:	3e01      	subs	r6, #1
				uart_a_write (*buf);
     790:	f8c9 3000 	str.w	r3, [r9]
			while (len && uart_a_room_in_tx) {
     794:	b11e      	cbz	r6, 79e <ioreq_uart_a+0x82>
     796:	f8d8 3000 	ldr.w	r3, [r8]
     79a:	069a      	lsls	r2, r3, #26
     79c:	d5f5      	bpl.n	78a <ioreq_uart_a+0x6e>
			if (len != operation) {
     79e:	42a6      	cmp	r6, r4
     7a0:	d1d3      	bne.n	74a <ioreq_uart_a+0x2e>
			uart_a_disable_int;
     7a2:	683b      	ldr	r3, [r7, #0]
     7a4:	2015      	movs	r0, #21
     7a6:	695b      	ldr	r3, [r3, #20]
     7a8:	4798      	blx	r3
			if (uart_a_room_in_tx) {
     7aa:	f8d8 3000 	ldr.w	r3, [r8]
     7ae:	069b      	lsls	r3, r3, #26
     7b0:	d40b      	bmi.n	7ca <ioreq_uart_a+0xae>
				uart_a_enable_int;
     7b2:	683b      	ldr	r3, [r7, #0]
     7b4:	2015      	movs	r0, #21
     7b6:	691b      	ldr	r3, [r3, #16]
     7b8:	4798      	blx	r3
				goto Redo_tx;
     7ba:	e7eb      	b.n	794 <ioreq_uart_a+0x78>
				*buf++ = uart_a_read;
     7bc:	4616      	mov	r6, r2
			uart_a_disable_int;
     7be:	4f14      	ldr	r7, [pc, #80]	; (810 <ioreq_uart_a+0xf4>)
			if (uart_a_room_in_tx) {
     7c0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 824 <ioreq_uart_a+0x108>
				uart_a_write (*buf);
     7c4:	f8df 9060 	ldr.w	r9, [pc, #96]	; 828 <ioreq_uart_a+0x10c>
     7c8:	e7e4      	b.n	794 <ioreq_uart_a+0x78>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7ca:	4a12      	ldr	r2, [pc, #72]	; (814 <ioreq_uart_a+0xf8>)
     7cc:	7993      	ldrb	r3, [r2, #6]
     7ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     7d2:	e7d6      	b.n	782 <ioreq_uart_a+0x66>
			uart_a_enable_int;
     7d4:	4b0e      	ldr	r3, [pc, #56]	; (810 <ioreq_uart_a+0xf4>)
     7d6:	2015      	movs	r0, #21
     7d8:	681b      	ldr	r3, [r3, #0]
			return 0;
     7da:	2400      	movs	r4, #0
			uart_a_enable_int;
     7dc:	691b      	ldr	r3, [r3, #16]
     7de:	4798      	blx	r3
			return 0;
     7e0:	e7b4      	b.n	74c <ioreq_uart_a+0x30>
			if (len == UART_CNTRL_SETRATE) {
     7e2:	2a01      	cmp	r2, #1
     7e4:	d109      	bne.n	7fa <ioreq_uart_a+0xde>
				if (__pi_uart_setrate (*((word*)buf),
     7e6:	490b      	ldr	r1, [pc, #44]	; (814 <ioreq_uart_a+0xf8>)
     7e8:	8828      	ldrh	r0, [r5, #0]
     7ea:	f7ff ff51 	bl	690 <__pi_uart_setrate>
     7ee:	2800      	cmp	r0, #0
     7f0:	d1ac      	bne.n	74c <ioreq_uart_a+0x30>
				syserror (EREQPAR, "uar");
     7f2:	2003      	movs	r0, #3
     7f4:	4908      	ldr	r1, [pc, #32]	; (818 <ioreq_uart_a+0xfc>)
			syserror (ENOOPER, "uai");
     7f6:	f7ff fe3b 	bl	470 <__pi_syserror>
			if (len == UART_CNTRL_GETRATE) {
     7fa:	2a02      	cmp	r2, #2
     7fc:	d104      	bne.n	808 <ioreq_uart_a+0xec>
	return urates [0];
     7fe:	4b07      	ldr	r3, [pc, #28]	; (81c <ioreq_uart_a+0x100>)
				return 1;
     800:	2401      	movs	r4, #1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     802:	881b      	ldrh	r3, [r3, #0]
     804:	800b      	strh	r3, [r1, #0]
				return 1;
     806:	e7a1      	b.n	74c <ioreq_uart_a+0x30>
			syserror (ENOOPER, "uai");
     808:	2002      	movs	r0, #2
     80a:	4905      	ldr	r1, [pc, #20]	; (820 <ioreq_uart_a+0x104>)
     80c:	e7f3      	b.n	7f6 <ioreq_uart_a+0xda>
     80e:	bf00      	nop
     810:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     814:	20000200 	andcs	r0, r0, r0, lsl #4
     818:	000041bb 			; <UNDEFINED> instruction: 0x000041bb
     81c:	2000011c 	andcs	r0, r0, ip, lsl r1
     820:	000041bf 			; <UNDEFINED> instruction: 0x000041bf
     824:	40001018 	andmi	r1, r0, r8, lsl r0
     828:	40001000 	andmi	r1, r0, r0

0000082c <UART0IntHandler>:
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     82c:	f240 72f2 	movw	r2, #2034	; 0x7f2
}

void UART0IntHandler () {
     830:	b530      	push	{r4, r5, lr}
     832:	4b29      	ldr	r3, [pc, #164]	; (8d8 <UART0IntHandler+0xac>)

	uart_a_clear_interrupts;

	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     834:	4c29      	ldr	r4, [pc, #164]	; (8dc <UART0IntHandler+0xb0>)
     836:	601a      	str	r2, [r3, #0]
     838:	6822      	ldr	r2, [r4, #0]
     83a:	06d5      	lsls	r5, r2, #27
     83c:	d423      	bmi.n	886 <UART0IntHandler+0x5a>
     83e:	4b28      	ldr	r3, [pc, #160]	; (8e0 <UART0IntHandler+0xb4>)
     840:	799a      	ldrb	r2, [r3, #6]
     842:	0610      	lsls	r0, r2, #24
     844:	d51f      	bpl.n	886 <UART0IntHandler+0x5a>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     846:	799a      	ldrb	r2, [r3, #6]
     848:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     84c:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     84e:	4a25      	ldr	r2, [pc, #148]	; (8e4 <UART0IntHandler+0xb8>)
     850:	7813      	ldrb	r3, [r2, #0]
     852:	f043 0302 	orr.w	r3, r3, #2
     856:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, READ));
     858:	4b23      	ldr	r3, [pc, #140]	; (8e8 <UART0IntHandler+0xbc>)
     85a:	681a      	ldr	r2, [r3, #0]
     85c:	b19a      	cbz	r2, 886 <UART0IntHandler+0x5a>
     85e:	4610      	mov	r0, r2
     860:	2300      	movs	r3, #0
     862:	f830 1b10 	ldrh.w	r1, [r0], #16
     866:	f001 0107 	and.w	r1, r1, #7
     86a:	4299      	cmp	r1, r3
     86c:	dd09      	ble.n	882 <UART0IntHandler+0x56>
     86e:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     872:	3301      	adds	r3, #1
     874:	f515 7f81 	cmn.w	r5, #258	; 0x102
     878:	d1f7      	bne.n	86a <UART0IntHandler+0x3e>
     87a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     87e:	889b      	ldrh	r3, [r3, #4]
     880:	8013      	strh	r3, [r2, #0]
     882:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     884:	e7ea      	b.n	85c <UART0IntHandler+0x30>
	}

	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     886:	6823      	ldr	r3, [r4, #0]
     888:	0699      	lsls	r1, r3, #26
     88a:	d424      	bmi.n	8d6 <UART0IntHandler+0xaa>
     88c:	4b14      	ldr	r3, [pc, #80]	; (8e0 <UART0IntHandler+0xb4>)
     88e:	799a      	ldrb	r2, [r3, #6]
     890:	0652      	lsls	r2, r2, #25
     892:	d520      	bpl.n	8d6 <UART0IntHandler+0xaa>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
		RISE_N_SHINE;
		i_trigger (devevent (UART_A, WRITE));
     894:	f46f 7480 	mvn.w	r4, #256	; 0x100
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     898:	799a      	ldrb	r2, [r3, #6]
     89a:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
     89e:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     8a0:	4a10      	ldr	r2, [pc, #64]	; (8e4 <UART0IntHandler+0xb8>)
     8a2:	7813      	ldrb	r3, [r2, #0]
     8a4:	f043 0302 	orr.w	r3, r3, #2
     8a8:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, WRITE));
     8aa:	4b0f      	ldr	r3, [pc, #60]	; (8e8 <UART0IntHandler+0xbc>)
     8ac:	681a      	ldr	r2, [r3, #0]
     8ae:	b192      	cbz	r2, 8d6 <UART0IntHandler+0xaa>
     8b0:	4610      	mov	r0, r2
     8b2:	2300      	movs	r3, #0
     8b4:	f830 1b10 	ldrh.w	r1, [r0], #16
     8b8:	f001 0107 	and.w	r1, r1, #7
     8bc:	4299      	cmp	r1, r3
     8be:	dd08      	ble.n	8d2 <UART0IntHandler+0xa6>
     8c0:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     8c4:	3301      	adds	r3, #1
     8c6:	42a5      	cmp	r5, r4
     8c8:	d1f8      	bne.n	8bc <UART0IntHandler+0x90>
     8ca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     8ce:	889b      	ldrh	r3, [r3, #4]
     8d0:	8013      	strh	r3, [r2, #0]
     8d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     8d4:	e7eb      	b.n	8ae <UART0IntHandler+0x82>
	}

	RTNI;
}
     8d6:	bd30      	pop	{r4, r5, pc}
     8d8:	40001044 	andmi	r1, r0, r4, asr #32
     8dc:	40001018 	andmi	r1, r0, r8, lsl r0
     8e0:	20000200 	andcs	r0, r0, r0, lsl #4
     8e4:	20000214 	andcs	r0, r0, r4, lsl r2
     8e8:	20000120 	andcs	r0, r0, r0, lsr #2

000008ec <__buttons_setirq>:

// ============================================================================

#ifdef	BUTTON_LIST

void __buttons_setirq (int val) {
     8ec:	b570      	push	{r4, r5, r6, lr}
     8ee:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the event status for the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     8f0:	2101      	movs	r1, #1
	int i;
	lword bn;

	cli;
	for (i = 0; i < N_BUTTONS; i++) {
		bn = BUTTON_GPIO (__button_list [i]);
     8f2:	4e0c      	ldr	r6, [pc, #48]	; (924 <__buttons_setirq+0x38>)
     8f4:	4d0c      	ldr	r5, [pc, #48]	; (928 <__buttons_setirq+0x3c>)
     8f6:	8833      	ldrh	r3, [r6, #0]
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8f8:	4c0c      	ldr	r4, [pc, #48]	; (92c <__buttons_setirq+0x40>)
		bn = BUTTON_GPIO (__button_list [i]);
     8fa:	0a1b      	lsrs	r3, r3, #8
     8fc:	fa01 f203 	lsl.w	r2, r1, r3
     900:	602a      	str	r2, [r5, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     902:	01da      	lsls	r2, r3, #7
		bn = BUTTON_GPIO (__button_list [i]);
     904:	8873      	ldrh	r3, [r6, #2]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     906:	f102 7281 	add.w	r2, r2, #16908288	; 0x1020000
		bn = BUTTON_GPIO (__button_list [i]);
     90a:	0a1b      	lsrs	r3, r3, #8
     90c:	4099      	lsls	r1, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     90e:	01db      	lsls	r3, r3, #7
     910:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     914:	4322      	orrs	r2, r4
     916:	4323      	orrs	r3, r4
     918:	6010      	str	r0, [r2, #0]
     91a:	6029      	str	r1, [r5, #0]
     91c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
     91e:	b662      	cpsie	i
			val;
	}
	sti;
}
     920:	bd70      	pop	{r4, r5, r6, pc}
     922:	bf00      	nop
     924:	00004356 	andeq	r4, r0, r6, asr r3
     928:	400220e0 	andmi	r2, r2, r0, ror #1
     92c:	42000048 	andmi	r0, r0, #72	; 0x48

00000930 <__pinlist_setirq>:

#endif

#ifdef	INPUT_PIN_LIST

void __pinlist_setirq (int val) {
     930:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
     932:	b672      	cpsid	i

	int i;
	lword bn;

	cli;
	for (i = 0; i < N_PINLIST; i++) {
     934:	2200      	movs	r2, #0
     936:	2601      	movs	r6, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     938:	4f09      	ldr	r7, [pc, #36]	; (960 <__pinlist_setirq+0x30>)
     93a:	4c0a      	ldr	r4, [pc, #40]	; (964 <__pinlist_setirq+0x34>)
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     93c:	490a      	ldr	r1, [pc, #40]	; (968 <__pinlist_setirq+0x38>)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     93e:	5cbb      	ldrb	r3, [r7, r2]
	for (i = 0; i < N_PINLIST; i++) {
     940:	3201      	adds	r2, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     946:	fa06 f503 	lsl.w	r5, r6, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     94a:	01db      	lsls	r3, r3, #7
     94c:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     950:	430b      	orrs	r3, r1
	for (i = 0; i < N_PINLIST; i++) {
     952:	2a04      	cmp	r2, #4
     954:	6025      	str	r5, [r4, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     956:	6018      	str	r0, [r3, #0]
	for (i = 0; i < N_PINLIST; i++) {
     958:	d1f1      	bne.n	93e <__pinlist_setirq+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
     95a:	b662      	cpsie	i
			val;
	}
	sti;
}
     95c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     95e:	bf00      	nop
     960:	00004351 	andeq	r4, r0, r1, asr r3
     964:	400220e0 	andmi	r2, r2, r0, ror #1
     968:	42000048 	andmi	r0, r0, #72	; 0x48

0000096c <GPIOIntHandler>:
void GPIOIntHandler () {
     96c:	b570      	push	{r4, r5, r6, lr}
if (buttons_int) {
     96e:	4c23      	ldr	r4, [pc, #140]	; (9fc <GPIOIntHandler+0x90>)
     970:	6822      	ldr	r2, [r4, #0]
     972:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
     976:	d01e      	beq.n	9b6 <GPIOIntHandler+0x4a>
	buttons_disable ();
     978:	2000      	movs	r0, #0
     97a:	f7ff ffb7 	bl	8ec <__buttons_setirq>
	i_trigger ((aword)&__button_list);
     97e:	4b20      	ldr	r3, [pc, #128]	; (a00 <GPIOIntHandler+0x94>)
     980:	4d20      	ldr	r5, [pc, #128]	; (a04 <GPIOIntHandler+0x98>)
     982:	681a      	ldr	r2, [r3, #0]
     984:	b192      	cbz	r2, 9ac <GPIOIntHandler+0x40>
     986:	4610      	mov	r0, r2
     988:	2300      	movs	r3, #0
     98a:	f830 1b10 	ldrh.w	r1, [r0], #16
     98e:	f001 0107 	and.w	r1, r1, #7
     992:	4299      	cmp	r1, r3
     994:	dd08      	ble.n	9a8 <GPIOIntHandler+0x3c>
     996:	f850 6033 	ldr.w	r6, [r0, r3, lsl #3]
     99a:	3301      	adds	r3, #1
     99c:	42ae      	cmp	r6, r5
     99e:	d1f8      	bne.n	992 <GPIOIntHandler+0x26>
     9a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     9a4:	889b      	ldrh	r3, [r3, #4]
     9a6:	8013      	strh	r3, [r2, #0]
     9a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     9aa:	e7eb      	b.n	984 <GPIOIntHandler+0x18>
	RISE_N_SHINE;
     9ac:	4a16      	ldr	r2, [pc, #88]	; (a08 <GPIOIntHandler+0x9c>)
     9ae:	7813      	ldrb	r3, [r2, #0]
     9b0:	f043 0302 	orr.w	r3, r3, #2
     9b4:	7013      	strb	r3, [r2, #0]
if (pin_sensor_int) {
     9b6:	6823      	ldr	r3, [r4, #0]
     9b8:	f013 5ff0 	tst.w	r3, #503316480	; 0x1e000000
     9bc:	d01d      	beq.n	9fa <GPIOIntHandler+0x8e>
	i_trigger ((aword)(&__input_pins));
     9be:	4b10      	ldr	r3, [pc, #64]	; (a00 <GPIOIntHandler+0x94>)
     9c0:	4c12      	ldr	r4, [pc, #72]	; (a0c <GPIOIntHandler+0xa0>)
     9c2:	6818      	ldr	r0, [r3, #0]
     9c4:	b190      	cbz	r0, 9ec <GPIOIntHandler+0x80>
     9c6:	4601      	mov	r1, r0
     9c8:	2300      	movs	r3, #0
     9ca:	f831 2b10 	ldrh.w	r2, [r1], #16
     9ce:	f002 0207 	and.w	r2, r2, #7
     9d2:	429a      	cmp	r2, r3
     9d4:	dd08      	ble.n	9e8 <GPIOIntHandler+0x7c>
     9d6:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
     9da:	3301      	adds	r3, #1
     9dc:	42a5      	cmp	r5, r4
     9de:	d1f8      	bne.n	9d2 <GPIOIntHandler+0x66>
     9e0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
     9e4:	889b      	ldrh	r3, [r3, #4]
     9e6:	8003      	strh	r3, [r0, #0]
     9e8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     9ea:	e7eb      	b.n	9c4 <GPIOIntHandler+0x58>
	__pinsen_disable_and_clear;
     9ec:	f7ff ffa0 	bl	930 <__pinlist_setirq>
	RISE_N_SHINE;
     9f0:	4a05      	ldr	r2, [pc, #20]	; (a08 <GPIOIntHandler+0x9c>)
     9f2:	7813      	ldrb	r3, [r2, #0]
     9f4:	f043 0302 	orr.w	r3, r3, #2
     9f8:	7013      	strb	r3, [r2, #0]
}
     9fa:	bd70      	pop	{r4, r5, r6, pc}
     9fc:	400220e0 	andmi	r2, r2, r0, ror #1
     a00:	20000120 	andcs	r0, r0, r0, lsr #2
     a04:	00004356 	andeq	r4, r0, r6, asr r3
     a08:	20000214 	andcs	r0, r0, r4, lsl r2
     a0c:	00004351 	andeq	r4, r0, r1, asr r3

00000a10 <system_init>:
#endif

// ============================================================================
// ============================================================================

void system_init () {
     a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	__pi_ondomain (PRCM_DOMAIN_PERIPH);

	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a14:	4c58      	ldr	r4, [pc, #352]	; (b78 <system_init+0x168>)
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a16:	2004      	movs	r0, #4
     a18:	f7ff fcec 	bl	3f4 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a1c:	6823      	ldr	r3, [r4, #0]
     a1e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     a22:	69db      	ldr	r3, [r3, #28]
     a24:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a26:	6823      	ldr	r3, [r4, #0]
     a28:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     a2e:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a30:	6823      	ldr	r3, [r4, #0]
     a32:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     a38:	4798      	blx	r3
PRCMLoadSet(void)
{
    //
    // Enable the update of all load related registers.
    //
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a3a:	2301      	movs	r3, #1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a3c:	2600      	movs	r6, #0
     a3e:	4c4f      	ldr	r4, [pc, #316]	; (b7c <system_init+0x16c>)
     a40:	4f4f      	ldr	r7, [pc, #316]	; (b80 <system_init+0x170>)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a42:	f8df c17c 	ldr.w	ip, [pc, #380]	; bc0 <system_init+0x1b0>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a46:	f8df e17c 	ldr.w	lr, [pc, #380]	; bc4 <system_init+0x1b4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a4a:	f8df 8140 	ldr.w	r8, [pc, #320]	; b8c <system_init+0x17c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a4e:	f8df 9134 	ldr.w	r9, [pc, #308]	; b84 <system_init+0x174>
     a52:	6023      	str	r3, [r4, #0]
		pin = (port_confs [i] >> 19) & 0x1f;
     a54:	f857 5b04 	ldr.w	r5, [r7], #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a58:	3601      	adds	r6, #1
		pin = (port_confs [i] >> 19) & 0x1f;
     a5a:	f3c5 42c4 	ubfx	r2, r5, #19, #5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a5e:	0091      	lsls	r1, r2, #2
     a60:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
     a64:	f500 2001 	add.w	r0, r0, #528384	; 0x81000
     a68:	ea05 0a0c 	and.w	sl, r5, ip
     a6c:	f8c0 a000 	str.w	sl, [r0]
		if (port_confs [i] & 0x80)
     a70:	0628      	lsls	r0, r5, #24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a72:	bf44      	itt	mi
     a74:	ea41 010e 	orrmi.w	r1, r1, lr
     a78:	600b      	strmi	r3, [r1, #0]
		if (port_confs [i] & 0x40)
     a7a:	fa03 f202 	lsl.w	r2, r3, r2
     a7e:	0669      	lsls	r1, r5, #25
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a80:	bf4c      	ite	mi
     a82:	f8c9 2000 	strmi.w	r2, [r9]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a86:	f8c8 2000 	strpl.w	r2, [r8]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a8a:	2e11      	cmp	r6, #17
     a8c:	d1e2      	bne.n	a54 <system_init+0x44>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a8e:	2540      	movs	r5, #64	; 0x40
     a90:	2680      	movs	r6, #128	; 0x80
     a92:	4b3c      	ldr	r3, [pc, #240]	; (b84 <system_init+0x174>)

	// Initialize DIO ports
	port_config ();

#if	LEDS_DRIVER
	all_leds_blink;
     a94:	493c      	ldr	r1, [pc, #240]	; (b88 <system_init+0x178>)
     a96:	601d      	str	r5, [r3, #0]
     a98:	601e      	str	r6, [r3, #0]
     a9a:	780b      	ldrb	r3, [r1, #0]
     a9c:	780b      	ldrb	r3, [r1, #0]
     a9e:	20c8      	movs	r0, #200	; 0xc8
     aa0:	f36f 1307 	bfc	r3, #4, #4
     aa4:	700b      	strb	r3, [r1, #0]
     aa6:	f7ff fc8f 	bl	3c8 <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     aaa:	4b38      	ldr	r3, [pc, #224]	; (b8c <system_init+0x17c>)
     aac:	20c8      	movs	r0, #200	; 0xc8
     aae:	601d      	str	r5, [r3, #0]
     ab0:	601e      	str	r6, [r3, #0]

	// The autoincrement value on channel 2 set to 1 msec
	AONRTCIncValueCh2Set (TCI_TINCR (1));
	// Enable continuous operation of channel 2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CHCTL,
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ab2:	2601      	movs	r6, #1
	all_leds_blink;
     ab4:	780b      	ldrb	r3, [r1, #0]
     ab6:	780b      	ldrb	r3, [r1, #0]
     ab8:	f36f 1307 	bfc	r3, #4, #4
     abc:	700b      	strb	r3, [r1, #0]
     abe:	f7ff fc83 	bl	3c8 <mdelay>
//
//*****************************************************************************
__STATIC_INLINE void
AONRTCIncValueCh2Set(uint32_t ui32IncValue)
{
    HWREG(AON_RTC_BASE + AON_RTC_O_CH2CMPINC) = ui32IncValue;
     ac2:	4b33      	ldr	r3, [pc, #204]	; (b90 <system_init+0x180>)

	// Define the combined event as consisting of channels 0 and 2 and
	// enable the clock
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     ac4:	4a33      	ldr	r2, [pc, #204]	; (b94 <system_init+0x184>)
     ac6:	601d      	str	r5, [r3, #0]
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ac8:	4b33      	ldr	r3, [pc, #204]	; (b98 <system_init+0x188>)
		// For the radio
		AON_RTC_CTL_RTC_UPD_EN |
		AON_RTC_CTL_EN;

	// Enable RTC interrupts
	IntEnable (INT_AON_RTC_COMB);
     aca:	4d34      	ldr	r5, [pc, #208]	; (b9c <system_init+0x18c>)
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     acc:	601e      	str	r6, [r3, #0]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     ace:	4b34      	ldr	r3, [pc, #208]	; (ba0 <system_init+0x190>)
	IntEnable (INT_AON_RTC_COMB);
     ad0:	2014      	movs	r0, #20
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     ad2:	601a      	str	r2, [r3, #0]
	IntEnable (INT_AON_RTC_COMB);
     ad4:	682b      	ldr	r3, [r5, #0]
     ad6:	691b      	ldr	r3, [r3, #16]
     ad8:	4798      	blx	r3

	// Initialize the memory allocator
	__pi_malloc_init ();
     ada:	f000 fbeb 	bl	12b4 <__pi_malloc_init>

	// Enable GPIO interrupts
	IntEnable (INT_AON_GPIO_EDGE);
     ade:	682b      	ldr	r3, [r5, #0]
     ae0:	2010      	movs	r0, #16
     ae2:	691b      	ldr	r3, [r3, #16]
     ae4:	4798      	blx	r3
		EMERGENCY_STARTUP_ACTION;
	}
#endif

#ifdef	NEED_SERIAL_DOMAIN
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     ae6:	2002      	movs	r0, #2
     ae8:	f7ff fc84 	bl	3f4 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     aec:	68ab      	ldr	r3, [r5, #8]
     aee:	f44f 7000 	mov.w	r0, #512	; 0x200
     af2:	69db      	ldr	r3, [r3, #28]
     af4:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     af6:	68ab      	ldr	r3, [r5, #8]
     af8:	f44f 7000 	mov.w	r0, #512	; 0x200
     afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     afe:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b00:	68ab      	ldr	r3, [r5, #8]
     b02:	f44f 7000 	mov.w	r0, #512	; 0x200
     b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     b08:	4798      	blx	r3
	urates [0] = UART_RATE / 100;
     b0a:	2260      	movs	r2, #96	; 0x60
     b0c:	4b25      	ldr	r3, [pc, #148]	; (ba4 <system_init+0x194>)
     b0e:	6026      	str	r6, [r4, #0]
     b10:	801a      	strh	r2, [r3, #0]
	reinit_uart ();
     b12:	f7ff fde7 	bl	6e4 <reinit_uart>
	__pi_init_actuators ();
#endif

#ifdef	EXTRA_INITIALIZERS
	// Extra initialization
	EXTRA_INITIALIZERS;
     b16:	f001 f94b 	bl	1db0 <ee_open>
     b1a:	f001 f953 	bl	1dc4 <ee_close>
#endif
	// If waking from shutdown, unfreeze the I/O
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b1e:	f003 f9e7 	bl	3ef0 <NOROM_SysCtrlResetSourceGet>
     b22:	2808      	cmp	r0, #8
     b24:	d11a      	bne.n	b5c <system_init+0x14c>
AONIOCFreezeDisable(void)
{
    //
    // Set the AON IOC latches as transparent.
    //
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     b26:	4b20      	ldr	r3, [pc, #128]	; (ba8 <system_init+0x198>)
     b28:	601e      	str	r6, [r3, #0]
{
    //
    // Open the IO latches at AON_IOC level and in the padring
    //
    AONIOCFreezeDisable();
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b2a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     b2e:	3b04      	subs	r3, #4
     b30:	601e      	str	r6, [r3, #0]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b32:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     b36:	3324      	adds	r3, #36	; 0x24
     b38:	681b      	ldr	r3, [r3, #0]
	}

#if	MAX_DEVICES
	for (int i = UART; i < MAX_DEVICES; i++)
		if (devinit [i] . init != NULL)
			devinit [i] . init (devinit [i] . param);
     b3a:	2000      	movs	r0, #0
     b3c:	f7ff fc28 	bl	390 <devinit_uart>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b40:	4a1a      	ldr	r2, [pc, #104]	; (bac <system_init+0x19c>)
#endif

#ifdef	N_UARTS
	// The same for UART_DRIVER and UART_TCV
	enable_uart_interrupts ();
	IntEnable (INT_UART0_COMB);
     b42:	2015      	movs	r0, #21
     b44:	6813      	ldr	r3, [r2, #0]
     b46:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     b4a:	6013      	str	r3, [r2, #0]
     b4c:	4b13      	ldr	r3, [pc, #76]	; (b9c <system_init+0x18c>)
     b4e:	681b      	ldr	r3, [r3, #0]
     b50:	691b      	ldr	r3, [r3, #16]
     b52:	4798      	blx	r3
#endif
	// Kick the auxiliary timer in case something is needed by the
	// drivers
	tci_run_auxiliary_timer ();
}
     b54:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tci_run_auxiliary_timer ();
     b58:	f7ff bcd4 	b.w	504 <tci_run_auxiliary_timer>
		diag ("");
     b5c:	4814      	ldr	r0, [pc, #80]	; (bb0 <system_init+0x1a0>)
     b5e:	f000 fc97 	bl	1490 <diag>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     b62:	4814      	ldr	r0, [pc, #80]	; (bb4 <system_init+0x1a4>)
     b64:	f000 fc94 	bl	1490 <diag>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     b68:	4913      	ldr	r1, [pc, #76]	; (bb8 <system_init+0x1a8>)
		diag ("Leftover RAM: %d bytes",
     b6a:	4814      	ldr	r0, [pc, #80]	; (bbc <system_init+0x1ac>)
     b6c:	f5c1 4198 	rsb	r1, r1, #19456	; 0x4c00
     b70:	b289      	uxth	r1, r1
     b72:	f000 fc8d 	bl	1490 <diag>
     b76:	e7e0      	b.n	b3a <system_init+0x12a>
     b78:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     b7c:	60082028 	andvs	r2, r8, r8, lsr #32
     b80:	00004238 	andeq	r4, r0, r8, lsr r2
     b84:	40022090 	mulmi	r2, r0, r0
     b88:	20000214 	andcs	r0, r0, r4, lsl r2
     b8c:	400220a0 	andmi	r2, r2, r0, lsr #1
     b90:	40092024 	andmi	r2, r9, r4, lsr #32
     b94:	00050003 	andeq	r0, r5, r3
     b98:	432402c8 			; <UNDEFINED> instruction: 0x432402c8
     b9c:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     ba0:	40092000 	andmi	r2, r9, r0
     ba4:	2000011c 	andcs	r0, r0, ip, lsl r1
     ba8:	4009400c 	andmi	r4, r9, ip
     bac:	40001038 	andmi	r1, r0, r8, lsr r0
     bb0:	00004122 	andeq	r4, r0, r2, lsr #2
     bb4:	000041c3 	andeq	r4, r0, r3, asr #3
     bb8:	20000234 	andcs	r0, r0, r4, lsr r2
     bbc:	0000420f 	andeq	r4, r0, pc, lsl #4
     bc0:	7f077f3f 	svcvc	0x00077f3f
     bc4:	42441a00 	submi	r1, r4, #0, 20

00000bc8 <setpowermode>:
//
	if (mode > 3)
		// This is the maximum
		mode = 3;

	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     bc8:	2803      	cmp	r0, #3
     bca:	4603      	mov	r3, r0
     bcc:	bf28      	it	cs
     bce:	2303      	movcs	r3, #3
     bd0:	4a05      	ldr	r2, [pc, #20]	; (be8 <setpowermode+0x20>)
     bd2:	b2db      	uxtb	r3, r3
     bd4:	2801      	cmp	r0, #1
     bd6:	7093      	strb	r3, [r2, #2]
     bd8:	d904      	bls.n	be4 <setpowermode+0x1c>
	    (__pi_systat.ondmns & PRCM_DOMAIN_RFCORE) == 0) ?
     bda:	6851      	ldr	r1, [r2, #4]
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     bdc:	f011 0f01 	tst.w	r1, #1
     be0:	bf18      	it	ne
     be2:	2301      	movne	r3, #1
     be4:	70d3      	strb	r3, [r2, #3]
		mode : 1;
}
     be6:	4770      	bx	lr
     be8:	20000214 	andcs	r0, r0, r4, lsl r2

00000bec <__pi_release>:
	return sc;
}

#endif

__attribute__ ((noreturn)) void __pi_release () {
     bec:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
     bf0:	b083      	sub	sp, #12
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     bf2:	4b79      	ldr	r3, [pc, #484]	; (dd8 <__pi_release+0x1ec>)
     bf4:	af00      	add	r7, sp, #0
     bf6:	f383 8808 	msr	MSP, r3

	__set_MSP ((lword)(STACK_START));

	check_stack_overflow;
     bfa:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
     bfe:	681a      	ldr	r2, [r3, #0]
     c00:	4b76      	ldr	r3, [pc, #472]	; (ddc <__pi_release+0x1f0>)
     c02:	429a      	cmp	r2, r3
     c04:	d127      	bne.n	c56 <__pi_release+0x6a>
SysCtrlAonSync(void)
{
    //
    // Sync the AON interface
    //
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     c06:	4e76      	ldr	r6, [pc, #472]	; (de0 <__pi_release+0x1f4>)

#ifdef	MONITOR_PIN_SCHED
	_PVS (MONITOR_PIN_SCHED, 1);
#endif
	// Catch up with time
	update_n_wake (MAX_WORD, NO);
     c08:	2100      	movs	r1, #0
     c0a:	f64f 70ff 	movw	r0, #65535	; 0xffff
     c0e:	f000 f9ed 	bl	fec <update_n_wake>

	// Run the first ready process
	for_all_tasks (__pi_curr) {
     c12:	4a74      	ldr	r2, [pc, #464]	; (de4 <__pi_release+0x1f8>)
     c14:	4b74      	ldr	r3, [pc, #464]	; (de8 <__pi_release+0x1fc>)
     c16:	6812      	ldr	r2, [r2, #0]
     c18:	601a      	str	r2, [r3, #0]
     c1a:	681a      	ldr	r2, [r3, #0]
     c1c:	b9fa      	cbnz	r2, c5e <__pi_release+0x72>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c1e:	4c73      	ldr	r4, [pc, #460]	; (dec <__pi_release+0x200>)
  __ASM volatile ("cpsid i" : : : "memory");
     c20:	b672      	cpsid	i
	entropy++;
#endif

#else	/* NOT SPIN_WHEN_HALTED */

	__SLEEP;
     c22:	4d73      	ldr	r5, [pc, #460]	; (df0 <__pi_release+0x204>)
     c24:	782b      	ldrb	r3, [r5, #0]
     c26:	f3c3 0240 	ubfx	r2, r3, #1, #1
     c2a:	0798      	lsls	r0, r3, #30
     c2c:	607a      	str	r2, [r7, #4]
     c2e:	f100 80cd 	bmi.w	dcc <__pi_release+0x1e0>
	system_event_count ++;
     c32:	4a70      	ldr	r2, [pc, #448]	; (df4 <__pi_release+0x208>)
     c34:	6813      	ldr	r3, [r2, #0]
     c36:	3301      	adds	r3, #1
     c38:	6013      	str	r3, [r2, #0]
	switch (__pi_systat.effpdm) {
     c3a:	78ea      	ldrb	r2, [r5, #3]
     c3c:	2a01      	cmp	r2, #1
     c3e:	b2d3      	uxtb	r3, r2
     c40:	d017      	beq.n	c72 <__pi_release+0x86>
     c42:	2b02      	cmp	r3, #2
     c44:	d031      	beq.n	caa <__pi_release+0xbe>
     c46:	2b00      	cmp	r3, #0
     c48:	f040 8095 	bne.w	d76 <__pi_release+0x18a>
			__WFI ();
     c4c:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
     c4e:	b662      	cpsie	i
     c50:	bf00      	nop
     c52:	bf00      	nop
     c54:	e7e4      	b.n	c20 <__pi_release+0x34>
	check_stack_overflow;
     c56:	200b      	movs	r0, #11
     c58:	4967      	ldr	r1, [pc, #412]	; (df8 <__pi_release+0x20c>)
     c5a:	f7ff fc09 	bl	470 <__pi_syserror>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c5e:	6851      	ldr	r1, [r2, #4]
     c60:	b129      	cbz	r1, c6e <__pi_release+0x82>
     c62:	8810      	ldrh	r0, [r2, #0]
     c64:	0704      	lsls	r4, r0, #28
     c66:	d102      	bne.n	c6e <__pi_release+0x82>
			(__pi_curr->code) (tstate (__pi_curr));
     c68:	0900      	lsrs	r0, r0, #4
     c6a:	4788      	blx	r1
			goto Redo;
     c6c:	e7cc      	b.n	c08 <__pi_release+0x1c>
	for_all_tasks (__pi_curr) {
     c6e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     c70:	e7d2      	b.n	c18 <__pi_release+0x2c>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c72:	4a62      	ldr	r2, [pc, #392]	; (dfc <__pi_release+0x210>)
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c74:	2020      	movs	r0, #32
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c76:	6813      	ldr	r3, [r2, #0]
     c78:	f043 0301 	orr.w	r3, r3, #1
     c7c:	6013      	str	r3, [r2, #0]
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionEnable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c7e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
     c82:	f043 0303 	orr.w	r3, r3, #3
     c86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c8a:	4b5d      	ldr	r3, [pc, #372]	; (e00 <__pi_release+0x214>)
     c8c:	681b      	ldr	r3, [r3, #0]
     c8e:	699b      	ldr	r3, [r3, #24]
     c90:	4798      	blx	r3
     c92:	6833      	ldr	r3, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c94:	6823      	ldr	r3, [r4, #0]
     c96:	f043 0304 	orr.w	r3, r3, #4
     c9a:	6023      	str	r3, [r4, #0]
			__WFI ();
     c9c:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     c9e:	6823      	ldr	r3, [r4, #0]
     ca0:	f023 0304 	bic.w	r3, r3, #4
     ca4:	6023      	str	r3, [r4, #0]
     ca6:	6833      	ldr	r3, [r6, #0]
}
     ca8:	e7d1      	b.n	c4e <__pi_release+0x62>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     caa:	f04f 0801 	mov.w	r8, #1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cae:	687a      	ldr	r2, [r7, #4]
     cb0:	4b54      	ldr	r3, [pc, #336]	; (e04 <__pi_release+0x218>)
    // Check the arguments.
    ASSERT((ui32Mode == AONWUC_AUX_WAKEUP) ||
           (ui32Mode == AONWUC_AUX_ALLOW_SLEEP));

    // Wake up the AUX domain.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cb2:	f8df b188 	ldr.w	fp, [pc, #392]	; e3c <__pi_release+0x250>
     cb6:	601a      	str	r2, [r3, #0]
     cb8:	687b      	ldr	r3, [r7, #4]
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cba:	f8df a144 	ldr.w	sl, [pc, #324]	; e00 <__pi_release+0x214>
     cbe:	f8cb 3000 	str.w	r3, [fp]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     cc2:	6833      	ldr	r3, [r6, #0]
     cc4:	4b50      	ldr	r3, [pc, #320]	; (e08 <__pi_release+0x21c>)
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionDisable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cc6:	f8df 9178 	ldr.w	r9, [pc, #376]	; e40 <__pi_release+0x254>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cca:	f8c3 8000 	str.w	r8, [r3]
     cce:	6868      	ldr	r0, [r5, #4]
     cd0:	f8da 3000 	ldr.w	r3, [sl]
     cd4:	f040 0020 	orr.w	r0, r0, #32
     cd8:	699b      	ldr	r3, [r3, #24]
     cda:	4798      	blx	r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     cdc:	4b4b      	ldr	r3, [pc, #300]	; (e0c <__pi_release+0x220>)
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     cde:	2103      	movs	r1, #3
     ce0:	f8c3 8000 	str.w	r8, [r3]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ce4:	f8d9 3000 	ldr.w	r3, [r9]
     ce8:	4849      	ldr	r0, [pc, #292]	; (e10 <__pi_release+0x224>)
     cea:	f023 0303 	bic.w	r3, r3, #3
     cee:	f8c9 3000 	str.w	r3, [r9]
     cf2:	4b48      	ldr	r3, [pc, #288]	; (e14 <__pi_release+0x228>)
     cf4:	681a      	ldr	r2, [r3, #0]
     cf6:	6852      	ldr	r2, [r2, #4]
     cf8:	4790      	blx	r2
			SysCtrlSetRechargeBeforePowerDown
     cfa:	6878      	ldr	r0, [r7, #4]
     cfc:	f002 ffb8 	bl	3c70 <NOROM_SysCtrlSetRechargeBeforePowerDown>
     d00:	6832      	ldr	r2, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d02:	6822      	ldr	r2, [r4, #0]
     d04:	f042 0204 	orr.w	r2, r2, #4
     d08:	6022      	str	r2, [r4, #0]
			__WFI ();
     d0a:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d0c:	6822      	ldr	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d0e:	4b41      	ldr	r3, [pc, #260]	; (e14 <__pi_release+0x228>)
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d10:	f022 0204 	bic.w	r2, r2, #4
     d14:	6022      	str	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d16:	681b      	ldr	r3, [r3, #0]
     d18:	4641      	mov	r1, r8
     d1a:	685b      	ldr	r3, [r3, #4]
     d1c:	483c      	ldr	r0, [pc, #240]	; (e10 <__pi_release+0x224>)
     d1e:	4798      	blx	r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d20:	f8d9 3000 	ldr.w	r3, [r9]
AONWUCPowerStatusGet(void)
{
    //
    // Return the power status.
    //
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d24:	4a3c      	ldr	r2, [pc, #240]	; (e18 <__pi_release+0x22c>)
     d26:	f043 0303 	orr.w	r3, r3, #3
     d2a:	f8c9 3000 	str.w	r3, [r9]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d2e:	f8cb 8000 	str.w	r8, [fp]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d32:	6813      	ldr	r3, [r2, #0]
			while (!(AONWUCPowerStatusGet () &
     d34:	0699      	lsls	r1, r3, #26
     d36:	d5fc      	bpl.n	d32 <__pi_release+0x146>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d38:	f8da 3000 	ldr.w	r3, [sl]
     d3c:	6868      	ldr	r0, [r5, #4]
     d3e:	695b      	ldr	r3, [r3, #20]
     d40:	4798      	blx	r3
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d42:	4d2f      	ldr	r5, [pc, #188]	; (e00 <__pi_release+0x214>)
     d44:	4b2a      	ldr	r3, [pc, #168]	; (df0 <__pi_release+0x204>)
     d46:	6858      	ldr	r0, [r3, #4]
     d48:	682b      	ldr	r3, [r5, #0]
     d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     d4c:	4798      	blx	r3
     d4e:	2801      	cmp	r0, #1
     d50:	d1f8      	bne.n	d44 <__pi_release+0x158>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d52:	4b2d      	ldr	r3, [pc, #180]	; (e08 <__pi_release+0x21c>)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d54:	4a2d      	ldr	r2, [pc, #180]	; (e0c <__pi_release+0x220>)
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d56:	6018      	str	r0, [r3, #0]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d58:	2300      	movs	r3, #0
     d5a:	6013      	str	r3, [r2, #0]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d5c:	4b29      	ldr	r3, [pc, #164]	; (e04 <__pi_release+0x218>)
     d5e:	6018      	str	r0, [r3, #0]
     d60:	6833      	ldr	r3, [r6, #0]
			SysCtrlAdjustRechargeAfterPowerDown ();
     d62:	f003 f895 	bl	3e90 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>
			reinit_uart ();
     d66:	f7ff fcbd 	bl	6e4 <reinit_uart>
     d6a:	4a2c      	ldr	r2, [pc, #176]	; (e1c <__pi_release+0x230>)
     d6c:	6813      	ldr	r3, [r2, #0]
     d6e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     d72:	6013      	str	r3, [r2, #0]
}
     d74:	e76b      	b.n	c4e <__pi_release+0x62>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d76:	4b2a      	ldr	r3, [pc, #168]	; (e20 <__pi_release+0x234>)
     d78:	2001      	movs	r0, #1
     d7a:	681b      	ldr	r3, [r3, #0]
     d7c:	68db      	ldr	r3, [r3, #12]
     d7e:	4798      	blx	r3
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d80:	4a28      	ldr	r2, [pc, #160]	; (e24 <__pi_release+0x238>)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     d82:	4929      	ldr	r1, [pc, #164]	; (e28 <__pi_release+0x23c>)
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d84:	6813      	ldr	r3, [r2, #0]
     d86:	f023 0301 	bic.w	r3, r3, #1
     d8a:	6013      	str	r3, [r2, #0]
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     d8c:	4b27      	ldr	r3, [pc, #156]	; (e2c <__pi_release+0x240>)
     d8e:	681a      	ldr	r2, [r3, #0]
     d90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
     d94:	601a      	str	r2, [r3, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     d96:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
     d9a:	600a      	str	r2, [r1, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     d9c:	604a      	str	r2, [r1, #4]
     d9e:	6832      	ldr	r2, [r6, #0]
__STATIC_INLINE void
AONWUCShutDownEnable(void)
{
    // Ensure the JTAG domain is turned off;
    // otherwise MCU domain can't be turned off.
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     da0:	687a      	ldr	r2, [r7, #4]
     da2:	601a      	str	r2, [r3, #0]

    // Enable shutdown of the device.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     da4:	687a      	ldr	r2, [r7, #4]
     da6:	4b22      	ldr	r3, [pc, #136]	; (e30 <__pi_release+0x244>)
     da8:	601a      	str	r2, [r3, #0]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     daa:	2201      	movs	r2, #1
     dac:	4b21      	ldr	r3, [pc, #132]	; (e34 <__pi_release+0x248>)
     dae:	601a      	str	r2, [r3, #0]
     db0:	6833      	ldr	r3, [r6, #0]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     db2:	4a19      	ldr	r2, [pc, #100]	; (e18 <__pi_release+0x22c>)
     db4:	6813      	ldr	r3, [r2, #0]
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     db6:	069b      	lsls	r3, r3, #26
     db8:	d4fc      	bmi.n	db4 <__pi_release+0x1c8>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     dba:	2201      	movs	r2, #1
     dbc:	4b1e      	ldr	r3, [pc, #120]	; (e38 <__pi_release+0x24c>)
			PRCMPowerDomainOff (
     dbe:	2037      	movs	r0, #55	; 0x37
     dc0:	601a      	str	r2, [r3, #0]
     dc2:	4b0f      	ldr	r3, [pc, #60]	; (e00 <__pi_release+0x214>)
     dc4:	681b      	ldr	r3, [r3, #0]
     dc6:	699b      	ldr	r3, [r3, #24]
     dc8:	4798      	blx	r3
			goto DeepSleep;
     dca:	e763      	b.n	c94 <__pi_release+0xa8>
	__SLEEP;
     dcc:	782b      	ldrb	r3, [r5, #0]
     dce:	f36f 0341 	bfc	r3, #1, #1
     dd2:	702b      	strb	r3, [r5, #0]
     dd4:	b662      	cpsie	i

#endif	/* SPIN_WHEN_HALTED */

	goto Redo;
     dd6:	e717      	b.n	c08 <__pi_release+0x1c>
     dd8:	20005000 	andcs	r5, r0, r0
     ddc:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     de0:	4009202c 	andmi	r2, r9, ip, lsr #32
     de4:	20000120 	andcs	r0, r0, r0, lsr #2
     de8:	20000230 	andcs	r0, r0, r0, lsr r2
     dec:	e000ed10 	and	lr, r0, r0, lsl sp
     df0:	20000214 	andcs	r0, r0, r4, lsl r2
     df4:	20000208 	andcs	r0, r0, r8, lsl #4
     df8:	00004226 	andeq	r4, r0, r6, lsr #4
     dfc:	4008218c 	andmi	r2, r8, ip, lsl #3
     e00:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     e04:	4009400c 	andmi	r4, r9, ip
     e08:	60082028 	andvs	r2, r8, r8, lsr #32
     e0c:	43040180 	movwmi	r0, #16768	; 0x4180
     e10:	40034000 	andmi	r4, r3, r0
     e14:	100001d8 	ldrdne	r0, [r0], -r8
     e18:	40091014 	andmi	r1, r9, r4, lsl r0
     e1c:	40001038 	andmi	r1, r0, r8, lsr r0
     e20:	100001a0 	andne	r0, r0, r0, lsr #3
     e24:	40091010 	andmi	r1, r9, r0, lsl r0
     e28:	40093000 	andmi	r3, r9, r0
     e2c:	40091040 	andmi	r1, r9, r0, asr #32
     e30:	43220420 			; <UNDEFINED> instruction: 0x43220420
     e34:	40091018 	andmi	r1, r9, r8, lsl r0
     e38:	43040188 	movwmi	r0, #16776	; 0x4188
     e3c:	43220200 			; <UNDEFINED> instruction: 0x43220200
     e40:	40082224 	andmi	r2, r8, r4, lsr #4

00000e44 <halt>:
	cli_tim;
     e44:	2400      	movs	r4, #0
void halt (void) {
     e46:	b508      	push	{r3, lr}
	cli_tim;
     e48:	4b07      	ldr	r3, [pc, #28]	; (e68 <halt+0x24>)
	diag ("PicOS halted");
     e4a:	4808      	ldr	r0, [pc, #32]	; (e6c <halt+0x28>)
	cli_tim;
     e4c:	601c      	str	r4, [r3, #0]
	diag ("PicOS halted");
     e4e:	f000 fb1f 	bl	1490 <diag>
	mdelay (500);
     e52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     e56:	f7ff fab7 	bl	3c8 <mdelay>
	setpowermode (2);
     e5a:	2002      	movs	r0, #2
     e5c:	f7ff feb4 	bl	bc8 <setpowermode>
	__PCB = NULL;
     e60:	4b03      	ldr	r3, [pc, #12]	; (e70 <halt+0x2c>)
     e62:	601c      	str	r4, [r3, #0]
	release;
     e64:	f7ff fec2 	bl	bec <__pi_release>
     e68:	43240280 			; <UNDEFINED> instruction: 0x43240280
     e6c:	00004229 	andeq	r4, r0, r9, lsr #4
     e70:	20000120 	andcs	r0, r0, r0, lsr #2

00000e74 <main>:

#include "scheduler.h"

}

int main (void) {
     e74:	b510      	push	{r4, lr}
     e76:	4b11      	ldr	r3, [pc, #68]	; (ebc <main+0x48>)

#if	STACK_GUARD
	{
		register sint i;
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e78:	4911      	ldr	r1, [pc, #68]	; (ec0 <main+0x4c>)
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e7a:	4a12      	ldr	r2, [pc, #72]	; (ec4 <main+0x50>)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e7c:	f843 1b04 	str.w	r1, [r3], #4
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e80:	4293      	cmp	r3, r2
     e82:	d1fb      	bne.n	e7c <main+0x8>
#if	TCV_PRESENT
	tcv_init ();
#endif

	// For standby mode wakeup on timer
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e84:	4c10      	ldr	r4, [pc, #64]	; (ec8 <main+0x54>)
	system_init ();
     e86:	f7ff fdc3 	bl	a10 <system_init>
	tcv_init ();
     e8a:	f000 fecd 	bl	1c28 <tcv_init>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e8e:	6823      	ldr	r3, [r4, #0]
     e90:	2129      	movs	r1, #41	; 0x29
     e92:	2000      	movs	r0, #0
     e94:	681b      	ldr	r3, [r3, #0]
     e96:	4798      	blx	r3
	// Edge on any I/O, will it take care of UART? No, of course not!
	// But it does work for buttons.
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e98:	6823      	ldr	r3, [r4, #0]
     e9a:	2120      	movs	r1, #32
     e9c:	681b      	ldr	r3, [r3, #0]
     e9e:	2001      	movs	r0, #1
     ea0:	4798      	blx	r3

	// Assume root process identity
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     ea2:	2100      	movs	r1, #0
     ea4:	4809      	ldr	r0, [pc, #36]	; (ecc <main+0x58>)
     ea6:	f000 facd 	bl	1444 <__pi_fork>
     eaa:	4b09      	ldr	r3, [pc, #36]	; (ed0 <main+0x5c>)
	// Delay root startup for 16 msec to make sure that the drivers go
	// first
	delay (16, 0);
     eac:	2100      	movs	r1, #0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     eae:	6018      	str	r0, [r3, #0]
	delay (16, 0);
     eb0:	2010      	movs	r0, #16
     eb2:	f000 f951 	bl	1158 <delay>
     eb6:	b662      	cpsie	i

	sti;

	__pi_release ();
     eb8:	f7ff fe98 	bl	bec <__pi_release>
     ebc:	20004bfc 	strdcs	r4, [r0], -ip
     ec0:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     ec4:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
     ec8:	10000184 	andne	r0, r0, r4, lsl #3
     ecc:	000001e9 	andeq	r0, r0, r9, ror #3
     ed0:	20000230 	andcs	r0, r0, r0, lsr r2

00000ed4 <killev>:
	}

	return i->Timer - __pi_old;
}

static void killev (__pi_pcb_t *pid) {
     ed4:	b570      	push	{r4, r5, r6, lr}
	aword wfun;
	int j;
	__pi_pcb_t *i;

	wfun = (aword)(pid->code);
	for_all_tasks (i) {
     ed6:	4b0d      	ldr	r3, [pc, #52]	; (f0c <killev+0x38>)
	wfun = (aword)(pid->code);
     ed8:	6846      	ldr	r6, [r0, #4]
	for_all_tasks (i) {
     eda:	681a      	ldr	r2, [r3, #0]
     edc:	b1aa      	cbz	r2, f0a <killev+0x36>
		for (j = 0; j < nevents (i); j++) {
     ede:	4614      	mov	r4, r2
     ee0:	f834 1b10 	ldrh.w	r1, [r4], #16
     ee4:	2300      	movs	r3, #0
     ee6:	f001 0107 	and.w	r1, r1, #7
     eea:	e001      	b.n	ef0 <killev+0x1c>
			if (i->Events [j] . Event == (aword)pid
			    || i->Events [j] . Event == wfun
     eec:	42b5      	cmp	r5, r6
     eee:	d006      	beq.n	efe <killev+0x2a>
		for (j = 0; j < nevents (i); j++) {
     ef0:	4299      	cmp	r1, r3
     ef2:	dd08      	ble.n	f06 <killev+0x32>
			if (i->Events [j] . Event == (aword)pid
     ef4:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
     ef8:	3301      	adds	r3, #1
     efa:	42a8      	cmp	r0, r5
     efc:	d1f6      	bne.n	eec <killev+0x18>
			    ) {
				wakeupev (i, j);
     efe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     f02:	889b      	ldrh	r3, [r3, #4]
     f04:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
     f06:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     f08:	e7e8      	b.n	edc <killev+0x8>
				break;
			}
		}
	}
}
     f0a:	bd70      	pop	{r4, r5, r6, pc}
     f0c:	20000120 	andcs	r0, r0, r0, lsr #2

00000f10 <qfree>:
	// volatile
#endif
	aword *chunk, *cc;

	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f10:	4a1d      	ldr	r2, [pc, #116]	; (f88 <qfree+0x78>)
static void qfree (aword *ch) {
     f12:	b530      	push	{r4, r5, lr}
     f14:	4614      	mov	r4, r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f16:	6813      	ldr	r3, [r2, #0]
     f18:	b93b      	cbnz	r3, f2a <qfree+0x1a>
		}
	}

	/* Insert */
	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     f1a:	6823      	ldr	r3, [r4, #0]
	cc = (aword*)(mpools + MA_NP);
     f1c:	4a1a      	ldr	r2, [pc, #104]	; (f88 <qfree+0x78>)
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     f1e:	bb53      	cbnz	r3, f76 <qfree+0x66>
		chunk = m_nextp (chunk))
			if (m_size (chunk) >= m_size (ch))
				break;

	m_setnextp (ch, chunk);
     f20:	6003      	str	r3, [r0, #0]
	m_setnextp (cc, ch);

#if	MALLOC_SAFE
	m_magic (ch) = MALLOC_MAGIC;
     f22:	4b1a      	ldr	r3, [pc, #104]	; (f8c <qfree+0x7c>)
	m_setnextp (cc, ch);
     f24:	6010      	str	r0, [r2, #0]
	m_magic (ch) = MALLOC_MAGIC;
     f26:	6043      	str	r3, [r0, #4]
#endif

#undef	MA_NP
}
     f28:	bd30      	pop	{r4, r5, pc}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f2a:	e953 1501 	ldrd	r1, r5, [r3, #-4]
     f2e:	3101      	adds	r1, #1
     f30:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     f34:	4288      	cmp	r0, r1
     f36:	d10b      	bne.n	f50 <qfree+0x40>
			m_setnextp (cc, m_nextp (chunk));
     f38:	6015      	str	r5, [r2, #0]
			m_size (chunk) += m_hdrlen + m_size (ch);
     f3a:	f850 0c04 	ldr.w	r0, [r0, #-4]
     f3e:	f853 1c04 	ldr.w	r1, [r3, #-4]
     f42:	4401      	add	r1, r0
     f44:	4618      	mov	r0, r3
     f46:	3101      	adds	r1, #1
     f48:	f843 1c04 	str.w	r1, [r3, #-4]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f4c:	681b      	ldr	r3, [r3, #0]
     f4e:	e7e3      	b.n	f18 <qfree+0x8>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f50:	f850 1c04 	ldr.w	r1, [r0, #-4]
     f54:	3101      	adds	r1, #1
     f56:	eb00 0181 	add.w	r1, r0, r1, lsl #2
     f5a:	428b      	cmp	r3, r1
			m_setnextp (cc, m_nextp (chunk));
     f5c:	bf03      	ittte	eq
     f5e:	6015      	streq	r5, [r2, #0]
			m_size (ch) += m_hdrlen + m_size (chunk);
     f60:	f850 1c04 	ldreq.w	r1, [r0, #-4]
     f64:	f853 5c04 	ldreq.w	r5, [r3, #-4]
     f68:	461a      	movne	r2, r3
     f6a:	bf02      	ittt	eq
     f6c:	1949      	addeq	r1, r1, r5
     f6e:	3101      	addeq	r1, #1
     f70:	f840 1c04 	streq.w	r1, [r0, #-4]
     f74:	e7ea      	b.n	f4c <qfree+0x3c>
			if (m_size (chunk) >= m_size (ch))
     f76:	f853 4c04 	ldr.w	r4, [r3, #-4]
     f7a:	f850 1c04 	ldr.w	r1, [r0, #-4]
     f7e:	428c      	cmp	r4, r1
     f80:	d2ce      	bcs.n	f20 <qfree+0x10>
		chunk = m_nextp (chunk))
     f82:	461a      	mov	r2, r3
     f84:	681b      	ldr	r3, [r3, #0]
     f86:	e7ca      	b.n	f1e <qfree+0xe>
     f88:	20000134 	andcs	r0, r0, r4, lsr r1
     f8c:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}

00000f90 <dgout>:
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f90:	4a03      	ldr	r2, [pc, #12]	; (fa0 <dgout+0x10>)
     f92:	6813      	ldr	r3, [r2, #0]

#if	dbg_level != 0 || DIAG_MESSAGES

static void dgout (word c) {

	diag_wait (a);
     f94:	071b      	lsls	r3, r3, #28
     f96:	d4fc      	bmi.n	f92 <dgout+0x2>
	diag_wchar (c, a);
     f98:	4b02      	ldr	r3, [pc, #8]	; (fa4 <dgout+0x14>)
     f9a:	b2c0      	uxtb	r0, r0
     f9c:	6018      	str	r0, [r3, #0]
}
     f9e:	4770      	bx	lr
     fa0:	40001018 	andmi	r1, r0, r8, lsl r0
     fa4:	40001000 	andmi	r1, r0, r0

00000fa8 <__pi_badstate>:
	syserror (ESTATE, "state");
     fa8:	2007      	movs	r0, #7
void __pi_badstate (void) {
     faa:	b508      	push	{r3, lr}
	syserror (ESTATE, "state");
     fac:	4901      	ldr	r1, [pc, #4]	; (fb4 <__pi_badstate+0xc>)
     fae:	f7ff fa5f 	bl	470 <__pi_syserror>
     fb2:	bf00      	nop
     fb4:	0000427c 	andeq	r4, r0, ip, ror r2

00000fb8 <utimer_add>:
	for (i = 0; i < MAX_UTIMERS; i++)
     fb8:	4a08      	ldr	r2, [pc, #32]	; (fdc <utimer_add+0x24>)
void utimer_add (address ut) {
     fba:	4603      	mov	r3, r0
     fbc:	4611      	mov	r1, r2
	for (i = 0; i < MAX_UTIMERS; i++)
     fbe:	2000      	movs	r0, #0
void utimer_add (address ut) {
     fc0:	b510      	push	{r4, lr}
		if (__pi_utims [i] == NULL)
     fc2:	f852 4b04 	ldr.w	r4, [r2], #4
     fc6:	b12c      	cbz	r4, fd4 <utimer_add+0x1c>
	for (i = 0; i < MAX_UTIMERS; i++)
     fc8:	3001      	adds	r0, #1
     fca:	2804      	cmp	r0, #4
     fcc:	d1f9      	bne.n	fc2 <utimer_add+0xa>
		syserror (ERESOURCE, "ut a");
     fce:	4904      	ldr	r1, [pc, #16]	; (fe0 <utimer_add+0x28>)
     fd0:	f7ff fa4e 	bl	470 <__pi_syserror>
	__pi_utims [i] = ut;
     fd4:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
     fd8:	bd10      	pop	{r4, pc}
     fda:	bf00      	nop
     fdc:	20000220 	andcs	r0, r0, r0, lsr #4
     fe0:	00004282 	andeq	r4, r0, r2, lsl #5

00000fe4 <__pi_utimer_set>:
	*t = v;
     fe4:	8001      	strh	r1, [r0, #0]
	TCI_RUN_AUXILIARY_TIMER;
     fe6:	f7ff ba8d 	b.w	504 <tci_run_auxiliary_timer>
	...

00000fec <update_n_wake>:
void update_n_wake (word min, Boolean force) {
     fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fee:	4604      	mov	r4, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
     ff0:	4608      	mov	r0, r1
     ff2:	f7ff fb25 	bl	640 <tci_update_delay_ticks>
     ff6:	2800      	cmp	r0, #0
     ff8:	d154      	bne.n	10a4 <update_n_wake+0xb8>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     ffa:	4b2b      	ldr	r3, [pc, #172]	; (10a8 <update_n_wake+0xbc>)
     ffc:	4d2b      	ldr	r5, [pc, #172]	; (10ac <update_n_wake+0xc0>)
     ffe:	8819      	ldrh	r1, [r3, #0]
    1000:	882a      	ldrh	r2, [r5, #0]
    1002:	b289      	uxth	r1, r1
    1004:	428a      	cmp	r2, r1
    1006:	492a      	ldr	r1, [pc, #168]	; (10b0 <update_n_wake+0xc4>)
    1008:	d803      	bhi.n	1012 <update_n_wake+0x26>
    100a:	8808      	ldrh	r0, [r1, #0]
    100c:	b280      	uxth	r0, r0
    100e:	4282      	cmp	r2, r0
    1010:	d20d      	bcs.n	102e <update_n_wake+0x42>
    1012:	881e      	ldrh	r6, [r3, #0]
    1014:	8808      	ldrh	r0, [r1, #0]
    1016:	b2b6      	uxth	r6, r6
    1018:	b280      	uxth	r0, r0
    101a:	4286      	cmp	r6, r0
    101c:	d236      	bcs.n	108c <update_n_wake+0xa0>
    101e:	8818      	ldrh	r0, [r3, #0]
    1020:	b280      	uxth	r0, r0
    1022:	4282      	cmp	r2, r0
    1024:	d903      	bls.n	102e <update_n_wake+0x42>
    1026:	8808      	ldrh	r0, [r1, #0]
    1028:	b280      	uxth	r0, r0
    102a:	4282      	cmp	r2, r0
    102c:	d32e      	bcc.n	108c <update_n_wake+0xa0>
		for_all_tasks (i) {
    102e:	4a21      	ldr	r2, [pc, #132]	; (10b4 <update_n_wake+0xc8>)
    1030:	6810      	ldr	r0, [r2, #0]
    1032:	b918      	cbnz	r0, 103c <update_n_wake+0x50>
	__pi_mintk = znew + min;
    1034:	8818      	ldrh	r0, [r3, #0]
    1036:	4404      	add	r4, r0
    1038:	802c      	strh	r4, [r5, #0]
    103a:	e02c      	b.n	1096 <update_n_wake+0xaa>
			if (!twaiting (i))
    103c:	8806      	ldrh	r6, [r0, #0]
    103e:	0732      	lsls	r2, r6, #28
    1040:	d51b      	bpl.n	107a <update_n_wake+0x8e>
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1042:	881f      	ldrh	r7, [r3, #0]
    1044:	8842      	ldrh	r2, [r0, #2]
    1046:	b2bf      	uxth	r7, r7
    1048:	42ba      	cmp	r2, r7
    104a:	d803      	bhi.n	1054 <update_n_wake+0x68>
    104c:	880f      	ldrh	r7, [r1, #0]
    104e:	b2bf      	uxth	r7, r7
    1050:	42ba      	cmp	r2, r7
    1052:	d20f      	bcs.n	1074 <update_n_wake+0x88>
    1054:	f8b3 c000 	ldrh.w	ip, [r3]
    1058:	880f      	ldrh	r7, [r1, #0]
    105a:	fa1f fc8c 	uxth.w	ip, ip
    105e:	b2bf      	uxth	r7, r7
    1060:	45bc      	cmp	ip, r7
    1062:	d20c      	bcs.n	107e <update_n_wake+0x92>
    1064:	881f      	ldrh	r7, [r3, #0]
    1066:	b2bf      	uxth	r7, r7
    1068:	42ba      	cmp	r2, r7
    106a:	d903      	bls.n	1074 <update_n_wake+0x88>
    106c:	880f      	ldrh	r7, [r1, #0]
    106e:	b2bf      	uxth	r7, r7
    1070:	42ba      	cmp	r2, r7
    1072:	d304      	bcc.n	107e <update_n_wake+0x92>
				wakeuptm (i);
    1074:	f026 060f 	bic.w	r6, r6, #15
    1078:	8006      	strh	r6, [r0, #0]
		for_all_tasks (i) {
    107a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    107c:	e7d9      	b.n	1032 <update_n_wake+0x46>
				d = i->Timer - znew;
    107e:	881e      	ldrh	r6, [r3, #0]
    1080:	1b92      	subs	r2, r2, r6
    1082:	b292      	uxth	r2, r2
    1084:	4294      	cmp	r4, r2
    1086:	bf28      	it	cs
    1088:	4614      	movcs	r4, r2
    108a:	e7f6      	b.n	107a <update_n_wake+0x8e>
		if ((word)(__pi_mintk - znew) < min) 
    108c:	8818      	ldrh	r0, [r3, #0]
    108e:	1a12      	subs	r2, r2, r0
    1090:	b292      	uxth	r2, r2
    1092:	4294      	cmp	r4, r2
    1094:	d9ce      	bls.n	1034 <update_n_wake+0x48>
	__pi_old = znew;
    1096:	881b      	ldrh	r3, [r3, #0]
    1098:	b29b      	uxth	r3, r3
    109a:	800b      	strh	r3, [r1, #0]
}
    109c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TCI_RUN_DELAY_TIMER;
    10a0:	f7ff ba10 	b.w	4c4 <tci_run_delay_timer>
}
    10a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    10a6:	bf00      	nop
    10a8:	2000021c 	andcs	r0, r0, ip, lsl r2
    10ac:	20000210 	andcs	r0, r0, r0, lsl r2
    10b0:	20000212 	andcs	r0, r0, r2, lsl r2
    10b4:	20000120 	andcs	r0, r0, r0, lsr #2

000010b8 <proceed>:
void proceed (word state) {
    10b8:	b508      	push	{r3, lr}
	prcdstate (__pi_curr, state);
    10ba:	4b03      	ldr	r3, [pc, #12]	; (10c8 <proceed+0x10>)
    10bc:	0100      	lsls	r0, r0, #4
    10be:	681b      	ldr	r3, [r3, #0]
    10c0:	8018      	strh	r0, [r3, #0]
	release;
    10c2:	f7ff fd93 	bl	bec <__pi_release>
    10c6:	bf00      	nop
    10c8:	20000230 	andcs	r0, r0, r0, lsr r2

000010cc <__pi_wait>:
void __pi_wait (aword event, word state) {
    10cc:	b510      	push	{r4, lr}
	sint j = nevents (__pi_curr);
    10ce:	4b0a      	ldr	r3, [pc, #40]	; (10f8 <__pi_wait+0x2c>)
    10d0:	681c      	ldr	r4, [r3, #0]
    10d2:	8823      	ldrh	r3, [r4, #0]
	if (j >= MAX_EVENTS_PER_TASK)
    10d4:	f013 0f04 	tst.w	r3, #4
    10d8:	f003 0207 	and.w	r2, r3, #7
    10dc:	d003      	beq.n	10e6 <__pi_wait+0x1a>
		syserror (ENEVENTS, "sw");
    10de:	2005      	movs	r0, #5
    10e0:	4906      	ldr	r1, [pc, #24]	; (10fc <__pi_wait+0x30>)
    10e2:	f7ff f9c5 	bl	470 <__pi_syserror>
	setestate (__pi_curr->Events [j], state, event);
    10e6:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    10ea:	0109      	lsls	r1, r1, #4
	incwait (__pi_curr);
    10ec:	3301      	adds	r3, #1
	setestate (__pi_curr->Events [j], state, event);
    10ee:	8191      	strh	r1, [r2, #12]
    10f0:	6110      	str	r0, [r2, #16]
	incwait (__pi_curr);
    10f2:	8023      	strh	r3, [r4, #0]
}
    10f4:	bd10      	pop	{r4, pc}
    10f6:	bf00      	nop
    10f8:	20000230 	andcs	r0, r0, r0, lsr r2
    10fc:	00004287 	andeq	r4, r0, r7, lsl #5

00001100 <__pi_trigger>:
void __pi_trigger (aword event) {
    1100:	b530      	push	{r4, r5, lr}
	for_all_tasks (i) {
    1102:	4b0b      	ldr	r3, [pc, #44]	; (1130 <__pi_trigger+0x30>)
    1104:	681a      	ldr	r2, [r3, #0]
    1106:	b192      	cbz	r2, 112e <__pi_trigger+0x2e>
		for (j = 0; j < nevents (i); j++) {
    1108:	4614      	mov	r4, r2
    110a:	2300      	movs	r3, #0
    110c:	f834 1b10 	ldrh.w	r1, [r4], #16
    1110:	f001 0107 	and.w	r1, r1, #7
    1114:	4299      	cmp	r1, r3
    1116:	dd08      	ble.n	112a <__pi_trigger+0x2a>
			if (i->Events [j] . Event == event) {
    1118:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    111c:	3301      	adds	r3, #1
    111e:	4285      	cmp	r5, r0
    1120:	d1f8      	bne.n	1114 <__pi_trigger+0x14>
				wakeupev (i, j);
    1122:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1126:	889b      	ldrh	r3, [r3, #4]
    1128:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    112a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    112c:	e7eb      	b.n	1106 <__pi_trigger+0x6>
}
    112e:	bd30      	pop	{r4, r5, pc}
    1130:	20000120 	andcs	r0, r0, r0, lsr #2

00001134 <__pi_join>:
aword __pi_join (aword pid, word st) {
    1134:	b510      	push	{r4, lr}
    1136:	4604      	mov	r4, r0
	for_all_tasks (i) {
    1138:	4b06      	ldr	r3, [pc, #24]	; (1154 <__pi_join+0x20>)
    113a:	681b      	ldr	r3, [r3, #0]
    113c:	b90b      	cbnz	r3, 1142 <__pi_join+0xe>
	return 0;
    113e:	461c      	mov	r4, r3
    1140:	e004      	b.n	114c <__pi_join+0x18>
		if ((aword)i == pid) {
    1142:	42a3      	cmp	r3, r4
    1144:	d104      	bne.n	1150 <__pi_join+0x1c>
			__pi_wait (pid, st);
    1146:	4620      	mov	r0, r4
    1148:	f7ff ffc0 	bl	10cc <__pi_wait>
}
    114c:	4620      	mov	r0, r4
    114e:	bd10      	pop	{r4, pc}
	for_all_tasks (i) {
    1150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1152:	e7f3      	b.n	113c <__pi_join+0x8>
    1154:	20000120 	andcs	r0, r0, r0, lsr #2

00001158 <delay>:
void delay (word d, word state) {
    1158:	b538      	push	{r3, r4, r5, lr}
    115a:	4604      	mov	r4, r0
	settstate (__pi_curr, state);
    115c:	4d0a      	ldr	r5, [pc, #40]	; (1188 <delay+0x30>)
    115e:	682a      	ldr	r2, [r5, #0]
    1160:	8813      	ldrh	r3, [r2, #0]
    1162:	f003 0307 	and.w	r3, r3, #7
    1166:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    116a:	8013      	strh	r3, [r2, #0]
	update_n_wake (d, YES);
    116c:	2101      	movs	r1, #1
    116e:	f7ff ff3d 	bl	fec <update_n_wake>
	__pi_curr->Timer = __pi_old + d;
    1172:	4b06      	ldr	r3, [pc, #24]	; (118c <delay+0x34>)
    1174:	8818      	ldrh	r0, [r3, #0]
    1176:	682b      	ldr	r3, [r5, #0]
    1178:	4404      	add	r4, r0
    117a:	805c      	strh	r4, [r3, #2]
	inctimer (__pi_curr);
    117c:	682a      	ldr	r2, [r5, #0]
    117e:	8813      	ldrh	r3, [r2, #0]
    1180:	f043 0308 	orr.w	r3, r3, #8
    1184:	8013      	strh	r3, [r2, #0]
}
    1186:	bd38      	pop	{r3, r4, r5, pc}
    1188:	20000230 	andcs	r0, r0, r0, lsr r2
    118c:	20000212 	andcs	r0, r0, r2, lsl r2

00001190 <running>:
	if (fun == NULL)
    1190:	4603      	mov	r3, r0
    1192:	b910      	cbnz	r0, 119a <running+0xa>
		return (int) __pi_curr;
    1194:	4b05      	ldr	r3, [pc, #20]	; (11ac <running+0x1c>)
    1196:	6818      	ldr	r0, [r3, #0]
    1198:	4770      	bx	lr
	for_all_tasks (i)
    119a:	4a05      	ldr	r2, [pc, #20]	; (11b0 <running+0x20>)
    119c:	6810      	ldr	r0, [r2, #0]
    119e:	b900      	cbnz	r0, 11a2 <running+0x12>
}
    11a0:	4770      	bx	lr
		if (i->code == fun)
    11a2:	6842      	ldr	r2, [r0, #4]
    11a4:	429a      	cmp	r2, r3
    11a6:	d0fb      	beq.n	11a0 <running+0x10>
	for_all_tasks (i)
    11a8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    11aa:	e7f8      	b.n	119e <running+0xe>
    11ac:	20000230 	andcs	r0, r0, r0, lsr r2
    11b0:	20000120 	andcs	r0, r0, r0, lsr #2

000011b4 <__pi_strlen>:
int __pi_strlen (const char *s) {
    11b4:	4603      	mov	r3, r0
	for (i = 0; *(s+i) != '\0'; i++);
    11b6:	2000      	movs	r0, #0
    11b8:	5c1a      	ldrb	r2, [r3, r0]
    11ba:	b902      	cbnz	r2, 11be <__pi_strlen+0xa>
}
    11bc:	4770      	bx	lr
	for (i = 0; *(s+i) != '\0'; i++);
    11be:	3001      	adds	r0, #1
    11c0:	e7fa      	b.n	11b8 <__pi_strlen+0x4>

000011c2 <__pi_strcpy>:
	while ((Boolean)(*d++ = *s++));
    11c2:	3801      	subs	r0, #1
    11c4:	f811 3b01 	ldrb.w	r3, [r1], #1
    11c8:	f800 3f01 	strb.w	r3, [r0, #1]!
    11cc:	2b00      	cmp	r3, #0
    11ce:	d1f9      	bne.n	11c4 <__pi_strcpy+0x2>
}
    11d0:	4770      	bx	lr

000011d2 <__pi_memcpy>:
	while (n--)
    11d2:	3801      	subs	r0, #1
    11d4:	440a      	add	r2, r1
    11d6:	4291      	cmp	r1, r2
    11d8:	d100      	bne.n	11dc <__pi_memcpy+0xa>
}
    11da:	4770      	bx	lr
		*dest++ = *src++;
    11dc:	f811 3b01 	ldrb.w	r3, [r1], #1
    11e0:	f800 3f01 	strb.w	r3, [r0, #1]!
    11e4:	e7f7      	b.n	11d6 <__pi_memcpy+0x4>

000011e6 <__pi_memset>:
	while (n--)
    11e6:	4402      	add	r2, r0
    11e8:	4290      	cmp	r0, r2
    11ea:	d100      	bne.n	11ee <__pi_memset+0x8>
}
    11ec:	4770      	bx	lr
		*dest++ = c;
    11ee:	f800 1b01 	strb.w	r1, [r0], #1
    11f2:	e7f9      	b.n	11e8 <__pi_memset+0x2>

000011f4 <adddevfunc>:
void adddevfunc (devreqfun_t rf, int loc) {
    11f4:	b508      	push	{r3, lr}
	if (loc < 0 || loc >= MAX_DEVICES)
    11f6:	b119      	cbz	r1, 1200 <adddevfunc+0xc>
		syserror (EREQPAR, "addv");
    11f8:	2003      	movs	r0, #3
    11fa:	4905      	ldr	r1, [pc, #20]	; (1210 <adddevfunc+0x1c>)
		syserror (ERESOURCE, "addv");
    11fc:	f7ff f938 	bl	470 <__pi_syserror>
	if (ioreq [loc] != NULL)
    1200:	4b04      	ldr	r3, [pc, #16]	; (1214 <adddevfunc+0x20>)
    1202:	681a      	ldr	r2, [r3, #0]
    1204:	b112      	cbz	r2, 120c <adddevfunc+0x18>
		syserror (ERESOURCE, "addv");
    1206:	2004      	movs	r0, #4
    1208:	4901      	ldr	r1, [pc, #4]	; (1210 <adddevfunc+0x1c>)
    120a:	e7f7      	b.n	11fc <adddevfunc+0x8>
	ioreq [loc] = rf;
    120c:	6018      	str	r0, [r3, #0]
}
    120e:	bd08      	pop	{r3, pc}
    1210:	0000428a 	andeq	r4, r0, sl, lsl #5
    1214:	20000124 	andcs	r0, r0, r4, lsr #2

00001218 <io>:
sint io (word retry, word dev, word operation, char *buf, word len) {
    1218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    121c:	4604      	mov	r4, r0
    121e:	4616      	mov	r6, r2
    1220:	461d      	mov	r5, r3
    1222:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1226:	b921      	cbnz	r1, 1232 <io+0x1a>
    1228:	f8df 9084 	ldr.w	r9, [pc, #132]	; 12b0 <io+0x98>
    122c:	f8d9 3000 	ldr.w	r3, [r9]
    1230:	b91b      	cbnz	r3, 123a <io+0x22>
		syserror (ENODEVICE, "io");
    1232:	2001      	movs	r0, #1
    1234:	491d      	ldr	r1, [pc, #116]	; (12ac <io+0x94>)
    1236:	f7ff f91b 	bl	470 <__pi_syserror>
	if (len == 0)
    123a:	f1b8 0f00 	cmp.w	r8, #0
    123e:	d028      	beq.n	1292 <io+0x7a>
	ret = (ioreq [dev]) (operation, buf, len);
    1240:	4642      	mov	r2, r8
    1242:	4629      	mov	r1, r5
    1244:	4630      	mov	r0, r6
    1246:	4798      	blx	r3
	if (ret >= 0)
    1248:	2800      	cmp	r0, #0
    124a:	da23      	bge.n	1294 <io+0x7c>
	if (ret == -1) {
    124c:	1c41      	adds	r1, r0, #1
    124e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1252:	d108      	bne.n	1266 <io+0x4e>
		if (retry == WNONE)
    1254:	429c      	cmp	r4, r3
    1256:	d01c      	beq.n	1292 <io+0x7a>
		iowait (dev, operation, retry);
    1258:	4621      	mov	r1, r4
    125a:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    125e:	f7ff ff35 	bl	10cc <__pi_wait>
			release;
    1262:	f7ff fcc3 	bl	bec <__pi_release>
	if (ret == -2) {
    1266:	1c82      	adds	r2, r0, #2
    1268:	d116      	bne.n	1298 <io+0x80>
		if (retry != WNONE) {
    126a:	429c      	cmp	r4, r3
    126c:	f8d9 9000 	ldr.w	r9, [r9]
    1270:	d00a      	beq.n	1288 <io+0x70>
			iowait (dev, operation, retry);
    1272:	4621      	mov	r1, r4
    1274:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    1278:	f7ff ff28 	bl	10cc <__pi_wait>
			(ioreq [dev]) (NONE, buf, len);
    127c:	4642      	mov	r2, r8
    127e:	4629      	mov	r1, r5
    1280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1284:	47c8      	blx	r9
    1286:	e7ec      	b.n	1262 <io+0x4a>
		(ioreq [dev]) (NONE, buf, len);
    1288:	4642      	mov	r2, r8
    128a:	4629      	mov	r1, r5
    128c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1290:	47c8      	blx	r9
		return 0;
    1292:	2000      	movs	r0, #0
}
    1294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (retry != WNONE) {
    1298:	429c      	cmp	r4, r3
    129a:	d0fa      	beq.n	1292 <io+0x7a>
		delay (-ret - 2, retry);
    129c:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    12a0:	30fe      	adds	r0, #254	; 0xfe
    12a2:	4621      	mov	r1, r4
    12a4:	b280      	uxth	r0, r0
    12a6:	f7ff ff57 	bl	1158 <delay>
		release;
    12aa:	e7da      	b.n	1262 <io+0x4a>
    12ac:	0000428f 	andeq	r4, r0, pc, lsl #5
    12b0:	20000124 	andcs	r0, r0, r4, lsr #2

000012b4 <__pi_malloc_init>:
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    12b4:	4a0d      	ldr	r2, [pc, #52]	; (12ec <__pi_malloc_init+0x38>)
void __pi_malloc_init () {
    12b6:	b508      	push	{r3, lr}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    12b8:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
    12bc:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
    12c0:	089b      	lsrs	r3, r3, #2
    12c2:	1e59      	subs	r1, r3, #1
    12c4:	29ff      	cmp	r1, #255	; 0xff
    12c6:	d803      	bhi.n	12d0 <__pi_malloc_init+0x1c>
		syserror (ERESOURCE, "mal1");
    12c8:	2004      	movs	r0, #4
    12ca:	4909      	ldr	r1, [pc, #36]	; (12f0 <__pi_malloc_init+0x3c>)
    12cc:	f7ff f8d0 	bl	470 <__pi_syserror>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    12d0:	4908      	ldr	r1, [pc, #32]	; (12f4 <__pi_malloc_init+0x40>)
    12d2:	1d10      	adds	r0, r2, #4
    12d4:	6008      	str	r0, [r1, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12d6:	2000      	movs	r0, #0
    12d8:	4907      	ldr	r1, [pc, #28]	; (12f8 <__pi_malloc_init+0x44>)
	m_size (mpools [0]) = mlen - m_hdrlen;
    12da:	3b02      	subs	r3, #2
    12dc:	6013      	str	r3, [r2, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12de:	e9c2 0101 	strd	r0, r1, [r2, #4]
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12e2:	4a06      	ldr	r2, [pc, #24]	; (12fc <__pi_malloc_init+0x48>)
    12e4:	6013      	str	r3, [r2, #0]
    12e6:	4a06      	ldr	r2, [pc, #24]	; (1300 <__pi_malloc_init+0x4c>)
    12e8:	6013      	str	r3, [r2, #0]
}
    12ea:	bd08      	pop	{r3, pc}
    12ec:	20000234 	andcs	r0, r0, r4, lsr r2
    12f0:	00004292 	muleq	r0, r2, r2
    12f4:	20000134 	andcs	r0, r0, r4, lsr r1
    12f8:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    12fc:	20000128 	andcs	r0, r0, r8, lsr #2
    1300:	20000130 	andcs	r0, r0, r0, lsr r1

00001304 <__pi_free>:
void __pi_free (aword *ch) {
    1304:	b508      	push	{r3, lr}
	if (ch == NULL)
    1306:	b1c8      	cbz	r0, 133c <__pi_free+0x38>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1308:	f850 3c04 	ldr.w	r3, [r0, #-4]
    130c:	2b00      	cmp	r3, #0
    130e:	db03      	blt.n	1318 <__pi_free+0x14>
		syserror (EMALLOC, "malg");
    1310:	2006      	movs	r0, #6
    1312:	490b      	ldr	r1, [pc, #44]	; (1340 <__pi_free+0x3c>)
    1314:	f7ff f8ac 	bl	470 <__pi_syserror>
	mcfree [MA_NP] += m_size (ch);
    1318:	490a      	ldr	r1, [pc, #40]	; (1344 <__pi_free+0x40>)
		m_size (ch) ^= MALLOC_UMASK;
    131a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
	mcfree [MA_NP] += m_size (ch);
    131e:	680a      	ldr	r2, [r1, #0]
		m_size (ch) ^= MALLOC_UMASK;
    1320:	f840 3c04 	str.w	r3, [r0, #-4]
	mcfree [MA_NP] += m_size (ch);
    1324:	4413      	add	r3, r2
    1326:	600b      	str	r3, [r1, #0]
	QFREE;
    1328:	f7ff fdf2 	bl	f10 <qfree>
	if (mevent [MA_NP] . nwait) {
    132c:	4806      	ldr	r0, [pc, #24]	; (1348 <__pi_free+0x44>)
    132e:	7803      	ldrb	r3, [r0, #0]
    1330:	b123      	cbz	r3, 133c <__pi_free+0x38>
		trigger ((aword)(&(mevent [MA_NP])));
    1332:	f7ff fee5 	bl	1100 <__pi_trigger>
		mevent [MA_NP] . nwait --;
    1336:	7803      	ldrb	r3, [r0, #0]
    1338:	3b01      	subs	r3, #1
    133a:	7003      	strb	r3, [r0, #0]
}
    133c:	bd08      	pop	{r3, pc}
    133e:	bf00      	nop
    1340:	00004297 	muleq	r0, r7, r2
    1344:	20000128 	andcs	r0, r0, r8, lsr #2
    1348:	2000012c 	andcs	r0, r0, ip, lsr #2

0000134c <kill>:
void kill (aword pid) {
    134c:	b510      	push	{r4, lr}
	if (pid == 0)
    134e:	b908      	cbnz	r0, 1354 <kill+0x8>
		pid = (aword) __pi_curr;
    1350:	4b0f      	ldr	r3, [pc, #60]	; (1390 <kill+0x44>)
    1352:	6818      	ldr	r0, [r3, #0]
	j = NULL;
    1354:	2200      	movs	r2, #0
	for_all_tasks (i) {
    1356:	4b0f      	ldr	r3, [pc, #60]	; (1394 <kill+0x48>)
    1358:	681c      	ldr	r4, [r3, #0]
    135a:	b91c      	cbnz	r4, 1364 <kill+0x18>
	syserror (EREQPAR, "kpi");
    135c:	2003      	movs	r0, #3
    135e:	490e      	ldr	r1, [pc, #56]	; (1398 <kill+0x4c>)
    1360:	f7ff f886 	bl	470 <__pi_syserror>
		if ((aword)i == pid) {
    1364:	4284      	cmp	r4, r0
    1366:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1368:	d10e      	bne.n	1388 <kill+0x3c>
			if (j == NULL)
    136a:	b95a      	cbnz	r2, 1384 <kill+0x38>
				__PCB = i->Next;
    136c:	6019      	str	r1, [r3, #0]
			killev (i);
    136e:	4620      	mov	r0, r4
    1370:	f7ff fdb0 	bl	ed4 <killev>
			ufree (i);
    1374:	f7ff ffc6 	bl	1304 <__pi_free>
			if (i == __pi_curr)
    1378:	4b05      	ldr	r3, [pc, #20]	; (1390 <kill+0x44>)
    137a:	681b      	ldr	r3, [r3, #0]
    137c:	42a3      	cmp	r3, r4
    137e:	d106      	bne.n	138e <kill+0x42>
				release;
    1380:	f7ff fc34 	bl	bec <__pi_release>
				j->Next = i->Next;
    1384:	62d1      	str	r1, [r2, #44]	; 0x2c
    1386:	e7f2      	b.n	136e <kill+0x22>
    1388:	4622      	mov	r2, r4
    138a:	460c      	mov	r4, r1
    138c:	e7e5      	b.n	135a <kill+0xe>
}
    138e:	bd10      	pop	{r4, pc}
    1390:	20000230 	andcs	r0, r0, r0, lsr r2
    1394:	20000120 	andcs	r0, r0, r0, lsr #2
    1398:	0000429c 	muleq	r0, ip, r2

0000139c <__pi_malloc>:
	if (size < 8)
    139c:	2807      	cmp	r0, #7
		_size = 2;
    139e:	bf98      	it	ls
    13a0:	2002      	movls	r0, #2
aword *__pi_malloc (word size) {
    13a2:	b538      	push	{r3, r4, r5, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13a4:	4b21      	ldr	r3, [pc, #132]	; (142c <__pi_malloc+0x90>)
		_size = (((aword)size) + 3) >> 2;
    13a6:	bf88      	it	hi
    13a8:	3003      	addhi	r0, #3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13aa:	681c      	ldr	r4, [r3, #0]
		if (m_magic (chunk) != MALLOC_MAGIC)
    13ac:	4920      	ldr	r1, [pc, #128]	; (1430 <__pi_malloc+0x94>)
		_size = (((aword)size) + 3) >> 2;
    13ae:	bf88      	it	hi
    13b0:	0880      	lsrhi	r0, r0, #2
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13b2:	b94c      	cbnz	r4, 13c8 <__pi_malloc+0x2c>
		if (mevent [MA_NP] . nfail != 255)
    13b4:	4a1f      	ldr	r2, [pc, #124]	; (1434 <__pi_malloc+0x98>)
    13b6:	7853      	ldrb	r3, [r2, #1]
    13b8:	2bff      	cmp	r3, #255	; 0xff
    13ba:	d001      	beq.n	13c0 <__pi_malloc+0x24>
			mevent [MA_NP] . nfail ++;
    13bc:	3301      	adds	r3, #1
    13be:	7053      	strb	r3, [r2, #1]
		mnfree [MA_NP] = 0;
    13c0:	2200      	movs	r2, #0
    13c2:	4b1d      	ldr	r3, [pc, #116]	; (1438 <__pi_malloc+0x9c>)
    13c4:	601a      	str	r2, [r3, #0]
	return chunk;
    13c6:	e02f      	b.n	1428 <__pi_malloc+0x8c>
		if (m_magic (chunk) != MALLOC_MAGIC)
    13c8:	6862      	ldr	r2, [r4, #4]
    13ca:	428a      	cmp	r2, r1
    13cc:	d003      	beq.n	13d6 <__pi_malloc+0x3a>
			syserror (EMALLOC, "malc");
    13ce:	2006      	movs	r0, #6
    13d0:	491a      	ldr	r1, [pc, #104]	; (143c <__pi_malloc+0xa0>)
    13d2:	f7ff f84d 	bl	470 <__pi_syserror>
		if (m_size (chunk) >= _size)
    13d6:	e954 5201 	ldrd	r5, r2, [r4, #-4]
    13da:	4285      	cmp	r5, r0
    13dc:	d202      	bcs.n	13e4 <__pi_malloc+0x48>
		chunk = m_nextp (chunk)) {
    13de:	4623      	mov	r3, r4
    13e0:	4614      	mov	r4, r2
    13e2:	e7e6      	b.n	13b2 <__pi_malloc+0x16>
		m_setnextp (cc, m_nextp (chunk));
    13e4:	601a      	str	r2, [r3, #0]
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    13e6:	f854 3c04 	ldr.w	r3, [r4, #-4]
    13ea:	1a1b      	subs	r3, r3, r0
    13ec:	2b08      	cmp	r3, #8
    13ee:	d909      	bls.n	1404 <__pi_malloc+0x68>
			m_size (chunk) = _size;
    13f0:	f844 0c04 	str.w	r0, [r4, #-4]
			cc = chunk + _size + m_hdrlen;
    13f4:	3001      	adds	r0, #1
    13f6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
			m_size (cc) = waste - m_hdrlen;
    13fa:	3b01      	subs	r3, #1
    13fc:	f840 3c04 	str.w	r3, [r0, #-4]
			QFREE;
    1400:	f7ff fd86 	bl	f10 <qfree>
		mevent [MA_NP] . nfail = 0;
    1404:	2200      	movs	r2, #0
    1406:	4b0b      	ldr	r3, [pc, #44]	; (1434 <__pi_malloc+0x98>)
		mcfree [MA_NP] -= m_size (chunk);
    1408:	490d      	ldr	r1, [pc, #52]	; (1440 <__pi_malloc+0xa4>)
		mevent [MA_NP] . nfail = 0;
    140a:	705a      	strb	r2, [r3, #1]
		mcfree [MA_NP] -= m_size (chunk);
    140c:	f854 2c04 	ldr.w	r2, [r4, #-4]
    1410:	680b      	ldr	r3, [r1, #0]
    1412:	1a9b      	subs	r3, r3, r2
    1414:	600b      	str	r3, [r1, #0]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1416:	4908      	ldr	r1, [pc, #32]	; (1438 <__pi_malloc+0x9c>)
		m_size (chunk) |= MALLOC_UMASK;
    1418:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		if (mnfree [MA_NP] > mcfree [MA_NP])
    141c:	6808      	ldr	r0, [r1, #0]
		m_size (chunk) |= MALLOC_UMASK;
    141e:	f844 2c04 	str.w	r2, [r4, #-4]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1422:	4283      	cmp	r3, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    1424:	bf38      	it	cc
    1426:	600b      	strcc	r3, [r1, #0]
}
    1428:	4620      	mov	r0, r4
    142a:	bd38      	pop	{r3, r4, r5, pc}
    142c:	20000134 	andcs	r0, r0, r4, lsr r1
    1430:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1434:	2000012c 	andcs	r0, r0, ip, lsr #2
    1438:	20000130 	andcs	r0, r0, r0, lsr r1
    143c:	000042a0 	andeq	r4, r0, r0, lsr #5
    1440:	20000128 	andcs	r0, r0, r8, lsr #2

00001444 <__pi_fork>:
aword __pi_fork (fsmcode func, aword data) {
    1444:	b538      	push	{r3, r4, r5, lr}
    1446:	4605      	mov	r5, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1448:	2030      	movs	r0, #48	; 0x30
aword __pi_fork (fsmcode func, aword data) {
    144a:	460c      	mov	r4, r1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    144c:	f7ff ffa6 	bl	139c <__pi_malloc>
    1450:	2300      	movs	r3, #0
    1452:	b138      	cbz	r0, 1464 <__pi_fork+0x20>
		if ((j = __PCB) == NULL)
    1454:	4a07      	ldr	r2, [pc, #28]	; (1474 <__pi_fork+0x30>)
	i->Status = 0;
    1456:	8003      	strh	r3, [r0, #0]
	i->Next = NULL;
    1458:	62c3      	str	r3, [r0, #44]	; 0x2c
		if ((j = __PCB) == NULL)
    145a:	6813      	ldr	r3, [r2, #0]
	i->data = data;
    145c:	e9c0 5401 	strd	r5, r4, [r0, #4]
		if ((j = __PCB) == NULL)
    1460:	b90b      	cbnz	r3, 1466 <__pi_fork+0x22>
			__PCB = i;
    1462:	6010      	str	r0, [r2, #0]
}
    1464:	bd38      	pop	{r3, r4, r5, pc}
			for (; j->Next != NULL; j = j->Next);
    1466:	461a      	mov	r2, r3
    1468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    146a:	2b00      	cmp	r3, #0
    146c:	d1fb      	bne.n	1466 <__pi_fork+0x22>
			j->Next = i;
    146e:	62d0      	str	r0, [r2, #44]	; 0x2c
	return (aword) i;
    1470:	e7f8      	b.n	1464 <__pi_fork+0x20>
    1472:	bf00      	nop
    1474:	20000120 	andcs	r0, r0, r0, lsr #2

00001478 <__pi_waitmem>:
	if (mevent [MA_NP] . nwait != 255)
    1478:	4a04      	ldr	r2, [pc, #16]	; (148c <__pi_waitmem+0x14>)
void __pi_waitmem (word state) {
    147a:	4601      	mov	r1, r0
	if (mevent [MA_NP] . nwait != 255)
    147c:	7813      	ldrb	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    147e:	4803      	ldr	r0, [pc, #12]	; (148c <__pi_waitmem+0x14>)
	if (mevent [MA_NP] . nwait != 255)
    1480:	2bff      	cmp	r3, #255	; 0xff
		mevent [MA_NP] . nwait ++;
    1482:	bf1c      	itt	ne
    1484:	3301      	addne	r3, #1
    1486:	7013      	strbne	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1488:	f7ff be20 	b.w	10cc <__pi_wait>
    148c:	2000012c 	andcs	r0, r0, ip, lsr #2

00001490 <diag>:

#endif	/* dbg_level */

#if	DIAG_MESSAGES

void diag (const char *mess, ...) {
    1490:	b40f      	push	{r0, r1, r2, r3}
    1492:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    1496:	ab0a      	add	r3, sp, #40	; 0x28
    1498:	f853 4b04 	ldr.w	r4, [r3], #4
	sint bc;
	word v;
	byte is;

	va_start (ap, mess);
	diag_disable_int (a, is);
    149c:	2015      	movs	r0, #21
	va_start (ap, mess);
    149e:	9301      	str	r3, [sp, #4]
	diag_disable_int (a, is);
    14a0:	4b46      	ldr	r3, [pc, #280]	; (15bc <diag+0x12c>)
				d = (bc == 16) ? 10000 : 1000000000;
				while (1) {
					// Strip initial zeros
					v = (word) (val / d);
					if (v || d == 1) break;
					d /= 10;
    14a2:	270a      	movs	r7, #10
	diag_disable_int (a, is);
    14a4:	681b      	ldr	r3, [r3, #0]
				d = (bc == 16) ? 10000 : 1000000000;
    14a6:	f8df 811c 	ldr.w	r8, [pc, #284]	; 15c4 <diag+0x134>
	diag_disable_int (a, is);
    14aa:	695b      	ldr	r3, [r3, #20]
    14ac:	4798      	blx	r3
	while (*mess != '\0') {
    14ae:	7820      	ldrb	r0, [r4, #0]
    14b0:	b998      	cbnz	r0, 14da <diag+0x4a>
		} else {
			dgout (*mess++);
		}
	}

	dgout ('\r');
    14b2:	200d      	movs	r0, #13
    14b4:	f7ff fd6c 	bl	f90 <dgout>
	dgout ('\n');
    14b8:	200a      	movs	r0, #10
    14ba:	f7ff fd69 	bl	f90 <dgout>
    14be:	4a40      	ldr	r2, [pc, #256]	; (15c0 <diag+0x130>)
    14c0:	6813      	ldr	r3, [r2, #0]
	diag_wait (a);
    14c2:	071b      	lsls	r3, r3, #28
    14c4:	d4fc      	bmi.n	14c0 <diag+0x30>
	diag_enable_int (a, is);
    14c6:	4b3d      	ldr	r3, [pc, #244]	; (15bc <diag+0x12c>)
    14c8:	2015      	movs	r0, #21
    14ca:	681b      	ldr	r3, [r3, #0]
    14cc:	691b      	ldr	r3, [r3, #16]
    14ce:	4798      	blx	r3
}
    14d0:	b003      	add	sp, #12
    14d2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    14d6:	b004      	add	sp, #16
    14d8:	4770      	bx	lr
		if (*mess == '%') {
    14da:	2825      	cmp	r0, #37	; 0x25
    14dc:	f104 0601 	add.w	r6, r4, #1
    14e0:	d169      	bne.n	15b6 <diag+0x126>
			if (*mess == 'l') {
    14e2:	9b01      	ldr	r3, [sp, #4]
    14e4:	7862      	ldrb	r2, [r4, #1]
    14e6:	f853 1b04 	ldr.w	r1, [r3], #4
    14ea:	2a6c      	cmp	r2, #108	; 0x6c
				mess++;
    14ec:	bf08      	it	eq
    14ee:	1ca6      	addeq	r6, r4, #2
				val = va_arg (ap, lword);
    14f0:	9301      	str	r3, [sp, #4]
			switch (*mess) {
    14f2:	7833      	ldrb	r3, [r6, #0]
				bc = 32;
    14f4:	bf0c      	ite	eq
    14f6:	2520      	moveq	r5, #32
				bc = 16;
    14f8:	2510      	movne	r5, #16
			switch (*mess) {
    14fa:	2b75      	cmp	r3, #117	; 0x75
    14fc:	d04e      	beq.n	159c <diag+0x10c>
    14fe:	d80a      	bhi.n	1516 <diag+0x86>
    1500:	2b64      	cmp	r3, #100	; 0x64
    1502:	d01c      	beq.n	153e <diag+0xae>
    1504:	2b73      	cmp	r3, #115	; 0x73
    1506:	d052      	beq.n	15ae <diag+0x11e>
				dgout ('%');
    1508:	2025      	movs	r0, #37	; 0x25
    150a:	f7ff fd41 	bl	f90 <dgout>
				dgout (*mess);
    150e:	7830      	ldrb	r0, [r6, #0]
    1510:	f7ff fd3e 	bl	f90 <dgout>
    1514:	e010      	b.n	1538 <diag+0xa8>
			switch (*mess) {
    1516:	2b78      	cmp	r3, #120	; 0x78
    1518:	d1f6      	bne.n	1508 <diag+0x78>
    151a:	2400      	movs	r4, #0
					v = __pi_hex_enc_table [
    151c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 15c8 <diag+0x138>
					i += 4;
    1520:	3404      	adds	r4, #4
					(val >> (bc - i)) & 0xf];
    1522:	1b2b      	subs	r3, r5, r4
    1524:	fa21 f303 	lsr.w	r3, r1, r3
    1528:	f003 030f 	and.w	r3, r3, #15
					dgout (v);
    152c:	f819 0003 	ldrb.w	r0, [r9, r3]
    1530:	f7ff fd2e 	bl	f90 <dgout>
				while (i < bc) {
    1534:	42a5      	cmp	r5, r4
    1536:	dcf3      	bgt.n	1520 <diag+0x90>
			mess++;
    1538:	3601      	adds	r6, #1
					d /= 10;
    153a:	4634      	mov	r4, r6
    153c:	e7b7      	b.n	14ae <diag+0x1e>
				if ((val >> (bc - 1)) & 1) {
    153e:	1e6b      	subs	r3, r5, #1
    1540:	fa21 f303 	lsr.w	r3, r1, r3
    1544:	07da      	lsls	r2, r3, #31
    1546:	d509      	bpl.n	155c <diag+0xcc>
					dgout ('-');
    1548:	202d      	movs	r0, #45	; 0x2d
    154a:	f7ff fd21 	bl	f90 <dgout>
					if (bc == 16)
    154e:	2d10      	cmp	r5, #16
						val |= 0xffff0000;
    1550:	bf04      	itt	eq
    1552:	ea6f 4101 	mvneq.w	r1, r1, lsl #16
    1556:	ea6f 4111 	mvneq.w	r1, r1, lsr #16
					val = ~val + 1;
    155a:	4249      	negs	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    155c:	f242 7410 	movw	r4, #10000	; 0x2710
    1560:	2d10      	cmp	r5, #16
    1562:	bf18      	it	ne
    1564:	4644      	movne	r4, r8
					v = (word) (val / d);
    1566:	fbb1 f5f4 	udiv	r5, r1, r4
    156a:	b2ad      	uxth	r5, r5
					if (v || d == 1) break;
    156c:	b935      	cbnz	r5, 157c <diag+0xec>
    156e:	2c01      	cmp	r4, #1
    1570:	d004      	beq.n	157c <diag+0xec>
					d /= 10;
    1572:	fbb4 f4f7 	udiv	r4, r4, r7
					v = (word) (val / d);
    1576:	e7f6      	b.n	1566 <diag+0xd6>
				d = (bc == 16) ? 10000 : 1000000000;
    1578:	4c12      	ldr	r4, [pc, #72]	; (15c4 <diag+0x134>)
    157a:	e7f4      	b.n	1566 <diag+0xd6>
					dgout (v + '0');
    157c:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1580:	b280      	uxth	r0, r0
    1582:	f7ff fd05 	bl	f90 <dgout>
					if (d == 0) break;
    1586:	2c09      	cmp	r4, #9
					d /= 10;
    1588:	fbb4 f3f7 	udiv	r3, r4, r7
					val = val - (v * d);
    158c:	fb04 1115 	mls	r1, r4, r5, r1
					if (d == 0) break;
    1590:	d9d2      	bls.n	1538 <diag+0xa8>
					v = (word) (val / d);
    1592:	fbb1 f5f3 	udiv	r5, r1, r3
					d /= 10;
    1596:	461c      	mov	r4, r3
					v = (word) (val / d);
    1598:	b2ad      	uxth	r5, r5
					dgout (v + '0');
    159a:	e7ef      	b.n	157c <diag+0xec>
				if (bc == 16)
    159c:	2d10      	cmp	r5, #16
    159e:	d1eb      	bne.n	1578 <diag+0xe8>
				d = (bc == 16) ? 10000 : 1000000000;
    15a0:	f242 7410 	movw	r4, #10000	; 0x2710
					val &= 0xffff;
    15a4:	b289      	uxth	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    15a6:	e7de      	b.n	1566 <diag+0xd6>
					dgout (*s);
    15a8:	f7ff fcf2 	bl	f90 <dgout>
					s++;
    15ac:	3101      	adds	r1, #1
				while (*s != '\0') {
    15ae:	7808      	ldrb	r0, [r1, #0]
    15b0:	2800      	cmp	r0, #0
    15b2:	d1f9      	bne.n	15a8 <diag+0x118>
    15b4:	e7c0      	b.n	1538 <diag+0xa8>
			dgout (*mess++);
    15b6:	f7ff fceb 	bl	f90 <dgout>
    15ba:	e7be      	b.n	153a <diag+0xaa>
    15bc:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    15c0:	40001018 	andmi	r1, r0, r8, lsl r0
    15c4:	3b9aca00 	blcc	fe6b3dcc <_estack+0xde6aedcc>
    15c8:	000042a5 	andeq	r4, r0, r5, lsr #5

000015cc <lrnd>:
// ============================================================================
// High-quality RNG (oh, well, as high as we can afford) ======================
// ============================================================================
#if RANDOM_NUMBER_GENERATOR > 1
lword lrnd () {
	__pi_seed = __pi_seed * 1103515245 + 12345;
    15cc:	f243 0039 	movw	r0, #12345	; 0x3039
    15d0:	4a04      	ldr	r2, [pc, #16]	; (15e4 <lrnd+0x18>)
    15d2:	4905      	ldr	r1, [pc, #20]	; (15e8 <lrnd+0x1c>)
    15d4:	6813      	ldr	r3, [r2, #0]
    15d6:	fb01 0303 	mla	r3, r1, r3, r0
    15da:	6013      	str	r3, [r2, #0]
	return __pi_seed
#if ENTROPY_COLLECTION
	^ entropy
    15dc:	4a03      	ldr	r2, [pc, #12]	; (15ec <lrnd+0x20>)
    15de:	6810      	ldr	r0, [r2, #0]
#endif
	;
}
    15e0:	4058      	eors	r0, r3
    15e2:	4770      	bx	lr
    15e4:	20000004 	andcs	r0, r0, r4
    15e8:	41c64e6d 	bicmi	r4, r6, sp, ror #28
    15ec:	2000020c 	andcs	r0, r0, ip, lsl #4

000015f0 <apb>:
/*
 * Forced implicit packet dropping removed. Plugins will have to drop
 * packets explicitly (if they really want to).
 */

__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    15f0:	b510      	push	{r4, lr}
    15f2:	4604      	mov	r4, r0
/* ========================================= */
/* Allocates a packet buffer size bytes long */
/* ========================================= */

	hblock_t *p;
	word cs = size + hblenb;
    15f4:	300c      	adds	r0, #12

	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    15f6:	b280      	uxth	r0, r0
    15f8:	f7ff fed0 	bl	139c <__pi_malloc>
    15fc:	b110      	cbz	r0, 1604 <apb+0x14>

#if	TCV_HOOKS
	p -> hptr = NULL;
#endif
	p -> length = size;
	p -> attributes . value = 0;
    15fe:	2300      	movs	r3, #0
	p -> length = size;
    1600:	8104      	strh	r4, [r0, #8]
	p -> attributes . value = 0;
    1602:	8143      	strh	r3, [r0, #10]
#endif
	return p;
	/*
	 * Note that this doesn't initialize the plugin/phys/session stuff.
	 */
}
    1604:	bd10      	pop	{r4, pc}

00001606 <deq>:
	if (p->attributes.b.queued) {
    1606:	7a83      	ldrb	r3, [r0, #10]
    1608:	07db      	lsls	r3, r3, #31
    160a:	d508      	bpl.n	161e <deq+0x18>
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    160c:	e9d0 2300 	ldrd	r2, r3, [r0]
    1610:	6053      	str	r3, [r2, #4]
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1612:	6802      	ldr	r2, [r0, #0]
    1614:	601a      	str	r2, [r3, #0]
		p->attributes.b.queued = 0;
    1616:	7a83      	ldrb	r3, [r0, #10]
    1618:	f36f 0300 	bfc	r3, #0, #1
    161c:	7283      	strb	r3, [r0, #10]
}
    161e:	4770      	bx	lr

00001620 <rlp>:
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1620:	b508      	push	{r3, lr}
	deq (p);	// Remove from queue
    1622:	f7ff fff0 	bl	1606 <deq>
}
    1626:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tfree ((address)p);
    162a:	f7ff be6b 	b.w	1304 <__pi_free>
	...

00001630 <enq>:
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1630:	b538      	push	{r3, r4, r5, lr}
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1632:	7a8b      	ldrb	r3, [r1, #10]
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1634:	4605      	mov	r5, r0
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1636:	07da      	lsls	r2, r3, #31
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1638:	460c      	mov	r4, r1
	sysassert (p->attributes.b.queued == 0, "tcv01");
    163a:	d503      	bpl.n	1644 <enq+0x14>
    163c:	200a      	movs	r0, #10
    163e:	490e      	ldr	r1, [pc, #56]	; (1678 <enq+0x48>)
    1640:	f7fe ff16 	bl	470 <__pi_syserror>
	if (q_empty (q))
    1644:	6803      	ldr	r3, [r0, #0]
    1646:	4283      	cmp	r3, r0
    1648:	d101      	bne.n	164e <enq+0x1e>
		trigger (q);
    164a:	f7ff fd59 	bl	1100 <__pi_trigger>
	if (p->attributes.b.urgent) {
    164e:	7aa3      	ldrb	r3, [r4, #10]
    1650:	075b      	lsls	r3, r3, #29
    1652:	d50a      	bpl.n	166a <enq+0x3a>
		p->u.bqueue.next = q->next;
    1654:	682b      	ldr	r3, [r5, #0]
		p->u.bqueue.prev = q;
    1656:	e9c4 3500 	strd	r3, r5, [r4]
		q->next->prev = (qitem_t*) p;
    165a:	682b      	ldr	r3, [r5, #0]
    165c:	605c      	str	r4, [r3, #4]
		q->next = (qitem_t*) p;
    165e:	602c      	str	r4, [r5, #0]
	p->attributes.b.queued = 1;
    1660:	7aa3      	ldrb	r3, [r4, #10]
    1662:	f043 0301 	orr.w	r3, r3, #1
    1666:	72a3      	strb	r3, [r4, #10]
}
    1668:	bd38      	pop	{r3, r4, r5, pc}
		p->u.bqueue.next = q;
    166a:	6025      	str	r5, [r4, #0]
		p->u.bqueue.prev = q->prev;
    166c:	686b      	ldr	r3, [r5, #4]
    166e:	6063      	str	r3, [r4, #4]
		q->prev->next = (qitem_t*) p;
    1670:	601c      	str	r4, [r3, #0]
		q->prev = (qitem_t*) p;
    1672:	606c      	str	r4, [r5, #4]
    1674:	e7f4      	b.n	1660 <enq+0x30>
    1676:	bf00      	nop
    1678:	000042b5 			; <UNDEFINED> instruction: 0x000042b5

0000167c <dispose>:
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    167c:	b510      	push	{r4, lr}
    167e:	4604      	mov	r4, r0
	deq (p);	// Soft dequeue, timer and hook left intact
    1680:	f7ff ffc1 	bl	1606 <deq>
	switch (dv) {
    1684:	3901      	subs	r1, #1
    1686:	2904      	cmp	r1, #4
    1688:	d832      	bhi.n	16f0 <dispose+0x74>
    168a:	e8df f001 	tbb	[pc, r1]
    168e:	1d03072d 	stcne	7, cr0, [r3, #-180]	; 0xffffff4c
    1692:	7a830019 	bvc	fe0c16fe <_estack+0xde0bc6fe>
			p->attributes.b.urgent = 1;
    1696:	f043 0304 	orr.w	r3, r3, #4
    169a:	7283      	strb	r3, [r0, #10]
			verify_ses (p, "dispose ses");
    169c:	8963      	ldrh	r3, [r4, #10]
    169e:	f3c3 03c6 	ubfx	r3, r3, #3, #7
    16a2:	2b07      	cmp	r3, #7
    16a4:	d803      	bhi.n	16ae <dispose+0x32>
    16a6:	4a13      	ldr	r2, [pc, #76]	; (16f4 <dispose+0x78>)
    16a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    16ac:	b918      	cbnz	r0, 16b6 <dispose+0x3a>
    16ae:	4912      	ldr	r1, [pc, #72]	; (16f8 <dispose+0x7c>)
			verify_phy (p, "dispose phy");
    16b0:	200a      	movs	r0, #10
    16b2:	f7fe fedd 	bl	470 <__pi_syserror>
			enq (&(descriptors [p->attributes.b.session]->rqueue),
    16b6:	4621      	mov	r1, r4
}
    16b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			enq (oqueues [p->attributes.b.phys], p);
    16bc:	f7ff bfb8 	b.w	1630 <enq>
			p->attributes.b.urgent = 1;
    16c0:	7a83      	ldrb	r3, [r0, #10]
    16c2:	f043 0304 	orr.w	r3, r3, #4
    16c6:	7283      	strb	r3, [r0, #10]
			verify_phy (p, "dispose phy");
    16c8:	7ae2      	ldrb	r2, [r4, #11]
    16ca:	2a5f      	cmp	r2, #95	; 0x5f
    16cc:	ea4f 1352 	mov.w	r3, r2, lsr #5
    16d0:	d803      	bhi.n	16da <dispose+0x5e>
    16d2:	4a0a      	ldr	r2, [pc, #40]	; (16fc <dispose+0x80>)
    16d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    16d8:	b90a      	cbnz	r2, 16de <dispose+0x62>
    16da:	4909      	ldr	r1, [pc, #36]	; (1700 <dispose+0x84>)
    16dc:	e7e8      	b.n	16b0 <dispose+0x34>
			enq (oqueues [p->attributes.b.phys], p);
    16de:	4a09      	ldr	r2, [pc, #36]	; (1704 <dispose+0x88>)
    16e0:	4621      	mov	r1, r4
    16e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    16e6:	e7e7      	b.n	16b8 <dispose+0x3c>
}
    16e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			rlp (p);
    16ec:	f7ff bf98 	b.w	1620 <rlp>
}
    16f0:	bd10      	pop	{r4, pc}
    16f2:	bf00      	nop
    16f4:	20000138 	andcs	r0, r0, r8, lsr r1
    16f8:	000042bb 			; <UNDEFINED> instruction: 0x000042bb
    16fc:	20000164 	andcs	r0, r0, r4, ror #2
    1700:	000042c7 	andeq	r4, r0, r7, asr #5
    1704:	20000158 	andcs	r0, r0, r8, asr r1

00001708 <tcv_endp>:
		/* ===================================== */
		/* Functions callable by the application */
		/* ===================================== */
/* ---------------------------------------------------------------------- */

__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1708:	b510      	push	{r4, lr}
 * somewhere or deallocated.
 */
	hblock_t *b;

	b = header (p);
	if (b->attributes.b.outgoing) {
    170a:	f810 2c02 	ldrb.w	r2, [r0, #-2]
	b = header (p);
    170e:	f1a0 040c 	sub.w	r4, r0, #12
	if (b->attributes.b.outgoing) {
    1712:	0792      	lsls	r2, r2, #30
    1714:	d522      	bpl.n	175c <tcv_endp+0x54>
		verify_ses (b, "tcv02");
    1716:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    171a:	f3c2 02c6 	ubfx	r2, r2, #3, #7
    171e:	2a07      	cmp	r2, #7
    1720:	d803      	bhi.n	172a <tcv_endp+0x22>
    1722:	4911      	ldr	r1, [pc, #68]	; (1768 <tcv_endp+0x60>)
    1724:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1728:	b91a      	cbnz	r2, 1732 <tcv_endp+0x2a>
    172a:	4910      	ldr	r1, [pc, #64]	; (176c <tcv_endp+0x64>)
		verify_plg (b, tcv_out, "tcv03");
    172c:	200a      	movs	r0, #10
    172e:	f7fe fe9f 	bl	470 <__pi_syserror>
    1732:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    1736:	f3c3 0382 	ubfx	r3, r3, #2, #3
    173a:	2b02      	cmp	r3, #2
    173c:	d805      	bhi.n	174a <tcv_endp+0x42>
    173e:	4a0c      	ldr	r2, [pc, #48]	; (1770 <tcv_endp+0x68>)
    1740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1744:	b10b      	cbz	r3, 174a <tcv_endp+0x42>
    1746:	691b      	ldr	r3, [r3, #16]
    1748:	b90b      	cbnz	r3, 174e <tcv_endp+0x46>
    174a:	490a      	ldr	r1, [pc, #40]	; (1774 <tcv_endp+0x6c>)
    174c:	e7ee      	b.n	172c <tcv_endp+0x24>
		dispose (b, plugins [b->attributes.b.plugin] ->
    174e:	4798      	blx	r3
    1750:	4601      	mov	r1, r0
    1752:	4620      	mov	r0, r4
		 * This is a received packet - just drop it, no need to verify
		 * session, can be legitimately invoked after the session has
		 * been closed,
		 */
		rlp (b);
}
    1754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dispose (b, plugins [b->attributes.b.plugin] ->
    1758:	f7ff bf90 	b.w	167c <dispose>
		rlp (b);
    175c:	4620      	mov	r0, r4
}
    175e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rlp (b);
    1762:	f7ff bf5d 	b.w	1620 <rlp>
    1766:	bf00      	nop
    1768:	20000138 	andcs	r0, r0, r8, lsr r1
    176c:	000042d3 	ldrdeq	r4, [r0], -r3
    1770:	2000017c 	andcs	r0, r0, ip, ror r1
    1774:	000042d9 	ldrdeq	r4, [r0], -r9

00001778 <tcv_open>:
#else
// ============================================================================

// Non-blocking open and close

__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1778:	b40c      	push	{r2, r3}
    177a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    177e:	ab0a      	add	r3, sp, #40	; 0x28
    1780:	f853 8b04 	ldr.w	r8, [r3], #4
	va_list		ap;
	va_start (ap, plid);

#if DIAG_MESSAGES > 1
	/* Check if we have the plugin and the phy */
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1784:	2902      	cmp	r1, #2
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1786:	460f      	mov	r7, r1
	va_start (ap, plid);
    1788:	9301      	str	r3, [sp, #4]
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    178a:	d80b      	bhi.n	17a4 <tcv_open+0x2c>
    178c:	4b24      	ldr	r3, [pc, #144]	; (1820 <tcv_open+0xa8>)
    178e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    1792:	b13b      	cbz	r3, 17a4 <tcv_open+0x2c>
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1794:	f1b8 0f02 	cmp.w	r8, #2
    1798:	d804      	bhi.n	17a4 <tcv_open+0x2c>
    179a:	4b22      	ldr	r3, [pc, #136]	; (1824 <tcv_open+0xac>)
    179c:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    17a0:	4699      	mov	r9, r3
    17a2:	b91a      	cbnz	r2, 17ac <tcv_open+0x34>
			syserror (ENODEVICE, "tcv04");
    17a4:	2001      	movs	r0, #1
    17a6:	4920      	ldr	r1, [pc, #128]	; (1828 <tcv_open+0xb0>)
	if (fd == TCV_MAX_DESC)
		return ERROR;

	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
	if (s == NULL)
		syserror (EMALLOC, "tcv05");
    17a8:	f7fe fe62 	bl	470 <__pi_syserror>
	attp.b.outgoing = 1;
    17ac:	f008 0307 	and.w	r3, r8, #7
    17b0:	029b      	lsls	r3, r3, #10
    17b2:	f043 0302 	orr.w	r3, r3, #2
    17b6:	ea43 3541 	orr.w	r5, r3, r1, lsl #13
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    17ba:	4b1c      	ldr	r3, [pc, #112]	; (182c <tcv_open+0xb4>)
    17bc:	2600      	movs	r6, #0
    17be:	469a      	mov	sl, r3
		if (descriptors [fd] == NULL)
    17c0:	f853 2b04 	ldr.w	r2, [r3], #4
    17c4:	b312      	cbz	r2, 180c <tcv_open+0x94>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    17c6:	3601      	adds	r6, #1
    17c8:	2e08      	cmp	r6, #8
    17ca:	d1f9      	bne.n	17c0 <tcv_open+0x48>
		return ERROR;
    17cc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		return ERROR;
	}

	descriptors [fd] = s;
	return fd;
}
    17d0:	4630      	mov	r0, r6
    17d2:	b002      	add	sp, #8
    17d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    17d8:	b002      	add	sp, #8
    17da:	4770      	bx	lr
	s->attpattern.b.session = fd;
    17dc:	462b      	mov	r3, r5
    17de:	f366 03c9 	bfi	r3, r6, #3, #7
	descriptors [fd] = s;
    17e2:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
	s->attpattern.b.session = fd;
    17e6:	8123      	strh	r3, [r4, #8]
	q_init (&(s->rqueue));
    17e8:	e9c4 4400 	strd	r4, r4, [r4]
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    17ec:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
    17f0:	681b      	ldr	r3, [r3, #0]
    17f2:	b913      	cbnz	r3, 17fa <tcv_open+0x82>
    17f4:	200a      	movs	r0, #10
    17f6:	490e      	ldr	r1, [pc, #56]	; (1830 <tcv_open+0xb8>)
    17f8:	e7d6      	b.n	17a8 <tcv_open+0x30>
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    17fa:	4631      	mov	r1, r6
    17fc:	4638      	mov	r0, r7
    17fe:	9a01      	ldr	r2, [sp, #4]
    1800:	4798      	blx	r3
    1802:	2800      	cmp	r0, #0
    1804:	d1e2      	bne.n	17cc <tcv_open+0x54>
	descriptors [fd] = s;
    1806:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
	return fd;
    180a:	e7e1      	b.n	17d0 <tcv_open+0x58>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    180c:	200c      	movs	r0, #12
    180e:	f7ff fdc5 	bl	139c <__pi_malloc>
	if (s == NULL)
    1812:	4604      	mov	r4, r0
    1814:	2800      	cmp	r0, #0
    1816:	d1e1      	bne.n	17dc <tcv_open+0x64>
		syserror (EMALLOC, "tcv05");
    1818:	2006      	movs	r0, #6
    181a:	4906      	ldr	r1, [pc, #24]	; (1834 <tcv_open+0xbc>)
    181c:	e7c4      	b.n	17a8 <tcv_open+0x30>
    181e:	bf00      	nop
    1820:	20000158 	andcs	r0, r0, r8, asr r1
    1824:	2000017c 	andcs	r0, r0, ip, ror r1
    1828:	000042df 	ldrdeq	r4, [r0], -pc	; <UNPREDICTABLE>
    182c:	20000138 	andcs	r0, r0, r8, lsr r1
    1830:	000042eb 	andeq	r4, r0, fp, ror #5
    1834:	000042e5 	andeq	r4, r0, r5, ror #5

00001838 <tcv_plug>:

__PUBLF (PicOSNode, int, tcv_plug) (int ord, const tcvplug_t *pl) {
/*
 * This is one way now. Later we may implement switching plugs on the fly.
 */
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1838:	2802      	cmp	r0, #2
    183a:	d809      	bhi.n	1850 <tcv_plug+0x18>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    183c:	4b06      	ldr	r3, [pc, #24]	; (1858 <tcv_plug+0x20>)
    183e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1842:	b10a      	cbz	r2, 1848 <tcv_plug+0x10>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    1844:	428a      	cmp	r2, r1
    1846:	d103      	bne.n	1850 <tcv_plug+0x18>
		return ERROR;

	plugins [ord] = pl;
    1848:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return 0;
    184c:	2000      	movs	r0, #0
    184e:	4770      	bx	lr
		return ERROR;
    1850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1854:	4770      	bx	lr
    1856:	bf00      	nop
    1858:	2000017c 	andcs	r0, r0, ip, ror r1

0000185c <tcv_rnp>:
 */
	address p;
	hblock_t *b;
	qhead_t *rq;

	verify_fds (fd, "tcv10");
    185c:	2908      	cmp	r1, #8
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    185e:	b538      	push	{r3, r4, r5, lr}
    1860:	4603      	mov	r3, r0
	verify_fds (fd, "tcv10");
    1862:	d803      	bhi.n	186c <tcv_rnp+0x10>
    1864:	4a19      	ldr	r2, [pc, #100]	; (18cc <tcv_rnp+0x70>)
    1866:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    186a:	b918      	cbnz	r0, 1874 <tcv_rnp+0x18>
    186c:	4918      	ldr	r1, [pc, #96]	; (18d0 <tcv_rnp+0x74>)
	deqtm (b);	// ... and clear its timer

	/* Packet pointer */
	p = ((address)(b + 1));
	/* Set the pointers to application data */
	verify_plg (b, tcv_frm, "tcv11");
    186e:	200a      	movs	r0, #10
    1870:	f7fe fdfe 	bl	470 <__pi_syserror>
	b = q_first (rq);
    1874:	6804      	ldr	r4, [r0, #0]
	if (q_end (b, rq)) {
    1876:	42a0      	cmp	r0, r4
    1878:	d108      	bne.n	188c <tcv_rnp+0x30>
		if (state != WNONE) {
    187a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    187e:	4293      	cmp	r3, r2
    1880:	d021      	beq.n	18c6 <tcv_rnp+0x6a>
			when (rq, state);
    1882:	4619      	mov	r1, r3
    1884:	f7ff fc22 	bl	10cc <__pi_wait>
			release;
    1888:	f7ff f9b0 	bl	bec <__pi_release>
	deq (b);	// Dequeue the packet ...
    188c:	4620      	mov	r0, r4
    188e:	f7ff feba 	bl	1606 <deq>
	verify_plg (b, tcv_frm, "tcv11");
    1892:	7ae3      	ldrb	r3, [r4, #11]
	p = ((address)(b + 1));
    1894:	f104 050c 	add.w	r5, r4, #12
	verify_plg (b, tcv_frm, "tcv11");
    1898:	f3c3 0382 	ubfx	r3, r3, #2, #3
    189c:	2b02      	cmp	r3, #2
    189e:	d805      	bhi.n	18ac <tcv_rnp+0x50>
    18a0:	4a0c      	ldr	r2, [pc, #48]	; (18d4 <tcv_rnp+0x78>)
    18a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    18a6:	b10b      	cbz	r3, 18ac <tcv_rnp+0x50>
    18a8:	68db      	ldr	r3, [r3, #12]
    18aa:	b90b      	cbnz	r3, 18b0 <tcv_rnp+0x54>
    18ac:	490a      	ldr	r1, [pc, #40]	; (18d8 <tcv_rnp+0x7c>)
    18ae:	e7de      	b.n	186e <tcv_rnp+0x12>
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    18b0:	4621      	mov	r1, r4
    18b2:	4628      	mov	r0, r5
    18b4:	4798      	blx	r3
	/* Adjust the second pointer to look like the length */
	b->u.pointers.tail =
		b->length - b->u.pointers.head - b->u.pointers.tail;
    18b6:	8823      	ldrh	r3, [r4, #0]
    18b8:	8862      	ldrh	r2, [r4, #2]
    18ba:	441a      	add	r2, r3
    18bc:	8923      	ldrh	r3, [r4, #8]
    18be:	1a9b      	subs	r3, r3, r2
	b->u.pointers.tail =
    18c0:	8063      	strh	r3, [r4, #2]
	/* OK, it seems that we are set */
	return p;
}
    18c2:	4628      	mov	r0, r5
    18c4:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    18c6:	2500      	movs	r5, #0
    18c8:	e7fb      	b.n	18c2 <tcv_rnp+0x66>
    18ca:	bf00      	nop
    18cc:	20000138 	andcs	r0, r0, r8, lsr r1
    18d0:	000042f1 	strdeq	r4, [r0], -r1
    18d4:	2000017c 	andcs	r0, r0, ip, ror r1
    18d8:	000042f7 	strdeq	r4, [r0], -r7

000018dc <tcv_wnps>:
	hblock_t *b;
	tcvadp_t ptrs;
	sesdesc_t *s;
	int eid;

	verify_fds (fd, "tcv16");
    18dc:	2908      	cmp	r1, #8
								Boolean urg) {
    18de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    18e0:	4605      	mov	r5, r0
    18e2:	4614      	mov	r4, r2
    18e4:	461e      	mov	r6, r3
	verify_fds (fd, "tcv16");
    18e6:	d803      	bhi.n	18f0 <tcv_wnps+0x14>
    18e8:	4b26      	ldr	r3, [pc, #152]	; (1984 <tcv_wnps+0xa8>)
    18ea:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    18ee:	b91f      	cbnz	r7, 18f8 <tcv_wnps+0x1c>
    18f0:	4925      	ldr	r1, [pc, #148]	; (1988 <tcv_wnps+0xac>)

	s = descriptors [fd];

	verify_pld (s, tcv_frm, "tcv17");
    18f2:	200a      	movs	r0, #10
    18f4:	f7fe fdbc 	bl	470 <__pi_syserror>
    18f8:	7a7b      	ldrb	r3, [r7, #9]
    18fa:	f3c3 0382 	ubfx	r3, r3, #2, #3
    18fe:	2b02      	cmp	r3, #2
    1900:	d805      	bhi.n	190e <tcv_wnps+0x32>
    1902:	4a22      	ldr	r2, [pc, #136]	; (198c <tcv_wnps+0xb0>)
    1904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1908:	b10b      	cbz	r3, 190e <tcv_wnps+0x32>
    190a:	68db      	ldr	r3, [r3, #12]
    190c:	b90b      	cbnz	r3, 1912 <tcv_wnps+0x36>
    190e:	4920      	ldr	r1, [pc, #128]	; (1990 <tcv_wnps+0xb4>)
    1910:	e7ef      	b.n	18f2 <tcv_wnps+0x16>

	// tcv_frm invoked with packet == NULL, pass in the frame parameters
	// the session and urgent flag
	ptrs.head = (word) fd;
    1912:	f8ad 1004 	strh.w	r1, [sp, #4]
	ptrs.tail = (word) urg;

	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1916:	2000      	movs	r0, #0
	ptrs.tail = (word) urg;
    1918:	f8ad 6006 	strh.w	r6, [sp, #6]
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    191c:	a901      	add	r1, sp, #4
    191e:	4798      	blx	r3
    1920:	b158      	cbz	r0, 193a <tcv_wnps+0x5e>
		// Blocked by the plugin
		if (state != WNONE) {
    1922:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1926:	429d      	cmp	r5, r3
    1928:	d102      	bne.n	1930 <tcv_wnps+0x54>
			when (eid, state);
			release;
		}
		return NULL;
    192a:	2000      	movs	r0, #0
		b->attributes.b.urgent = 1;
	b->u.pointers.head = ptrs.head;
	b->u.pointers.tail = length;

	return (address) (b + 1);
}
    192c:	b003      	add	sp, #12
    192e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			when (eid, state);
    1930:	4629      	mov	r1, r5
    1932:	f7ff fbcb 	bl	10cc <__pi_wait>
			release;
    1936:	f7ff f959 	bl	bec <__pi_release>
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    193a:	7a3b      	ldrb	r3, [r7, #8]
    193c:	07db      	lsls	r3, r3, #31
    193e:	d501      	bpl.n	1944 <tcv_wnps+0x68>
    1940:	4914      	ldr	r1, [pc, #80]	; (1994 <tcv_wnps+0xb8>)
    1942:	e7d6      	b.n	18f2 <tcv_wnps+0x16>
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    1944:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    1948:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    194c:	b2a4      	uxth	r4, r4
    194e:	4418      	add	r0, r3
    1950:	4420      	add	r0, r4
    1952:	b280      	uxth	r0, r0
    1954:	f7ff fe4c 	bl	15f0 <apb>
    1958:	b938      	cbnz	r0, 196a <tcv_wnps+0x8e>
		if (state != WNONE) {
    195a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    195e:	429d      	cmp	r5, r3
    1960:	d0e3      	beq.n	192a <tcv_wnps+0x4e>
			tmwait (state);
    1962:	4628      	mov	r0, r5
    1964:	f7ff fd88 	bl	1478 <__pi_waitmem>
    1968:	e7e5      	b.n	1936 <tcv_wnps+0x5a>
	b->attributes = s->attpattern;
    196a:	893b      	ldrh	r3, [r7, #8]
    196c:	8143      	strh	r3, [r0, #10]
	if (urg)
    196e:	b11e      	cbz	r6, 1978 <tcv_wnps+0x9c>
		b->attributes.b.urgent = 1;
    1970:	7a83      	ldrb	r3, [r0, #10]
    1972:	f043 0304 	orr.w	r3, r3, #4
    1976:	7283      	strb	r3, [r0, #10]
	b->u.pointers.head = ptrs.head;
    1978:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	b->u.pointers.tail = length;
    197c:	8044      	strh	r4, [r0, #2]
	b->u.pointers.head = ptrs.head;
    197e:	8003      	strh	r3, [r0, #0]
	return (address) (b + 1);
    1980:	300c      	adds	r0, #12
    1982:	e7d3      	b.n	192c <tcv_wnps+0x50>
    1984:	20000138 	andcs	r0, r0, r8, lsr r1
    1988:	000042fd 	strdeq	r4, [r0], -sp
    198c:	2000017c 	andcs	r0, r0, ip, ror r1
    1990:	00004303 	andeq	r4, r0, r3, lsl #6
    1994:	00004309 	andeq	r4, r0, r9, lsl #6

00001998 <tcvp_control>:
	           /* ================================ */
	           /* Functions callable by the plugin */
	           /* ================================ */
/* ---------------------------------------------------------------------- */

__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1998:	4603      	mov	r3, r0
/*
 * Plugin version of interface control
 */
	verify_fph (phy, "tcv23");
    199a:	2b03      	cmp	r3, #3
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    199c:	4608      	mov	r0, r1
    199e:	b510      	push	{r4, lr}
    19a0:	4611      	mov	r1, r2
	verify_fph (phy, "tcv23");
    19a2:	d803      	bhi.n	19ac <tcvp_control+0x14>
    19a4:	4a05      	ldr	r2, [pc, #20]	; (19bc <tcvp_control+0x24>)
    19a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    19aa:	b91b      	cbnz	r3, 19b4 <tcvp_control+0x1c>
    19ac:	200a      	movs	r0, #10
    19ae:	4904      	ldr	r1, [pc, #16]	; (19c0 <tcvp_control+0x28>)
    19b0:	f7fe fd5e 	bl	470 <__pi_syserror>
	return (physical [phy]) (opt, arg);
}
    19b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return (physical [phy]) (opt, arg);
    19b8:	4718      	bx	r3
    19ba:	bf00      	nop
    19bc:	20000164 	andcs	r0, r0, r4, ror #2
    19c0:	0000430f 	andeq	r4, r0, pc, lsl #6

000019c4 <tcv_control>:
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    19c4:	b508      	push	{r3, lr}
	if (opt < 0) {
    19c6:	1e0b      	subs	r3, r1, #0
    19c8:	da11      	bge.n	19ee <tcv_control+0x2a>
		if (fd < 0)
    19ca:	2800      	cmp	r0, #0
    19cc:	db1f      	blt.n	1a0e <tcv_control+0x4a>
		if (opt == PHYSOPT_PLUGINFO) {
    19ce:	3301      	adds	r3, #1
    19d0:	d107      	bne.n	19e2 <tcv_control+0x1e>
			if (fd >= TCV_MAX_PLUGS)
    19d2:	2802      	cmp	r0, #2
    19d4:	dc1b      	bgt.n	1a0e <tcv_control+0x4a>
			if ((p = plugins [fd]) == NULL)
    19d6:	4b0f      	ldr	r3, [pc, #60]	; (1a14 <tcv_control+0x50>)
    19d8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    19dc:	b100      	cbz	r0, 19e0 <tcv_control+0x1c>
			return p->tcv_info;
    19de:	69c0      	ldr	r0, [r0, #28]
}
    19e0:	bd08      	pop	{r3, pc}
		if (fd >= TCV_MAX_PHYS)
    19e2:	2802      	cmp	r0, #2
    19e4:	dc13      	bgt.n	1a0e <tcv_control+0x4a>
		return physinfo [fd];
    19e6:	4b0c      	ldr	r3, [pc, #48]	; (1a18 <tcv_control+0x54>)
    19e8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    19ec:	e7f8      	b.n	19e0 <tcv_control+0x1c>
	verify_fds (fd, "tcv22");
    19ee:	2808      	cmp	r0, #8
    19f0:	d803      	bhi.n	19fa <tcv_control+0x36>
    19f2:	4b0a      	ldr	r3, [pc, #40]	; (1a1c <tcv_control+0x58>)
    19f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    19f8:	b91b      	cbnz	r3, 1a02 <tcv_control+0x3e>
    19fa:	200a      	movs	r0, #10
    19fc:	4908      	ldr	r1, [pc, #32]	; (1a20 <tcv_control+0x5c>)
    19fe:	f7fe fd37 	bl	470 <__pi_syserror>
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    1a02:	7a58      	ldrb	r0, [r3, #9]
}
    1a04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    1a08:	0940      	lsrs	r0, r0, #5
    1a0a:	f7ff bfc5 	b.w	1998 <tcvp_control>
			return 0;
    1a0e:	2000      	movs	r0, #0
    1a10:	e7e6      	b.n	19e0 <tcv_control+0x1c>
    1a12:	bf00      	nop
    1a14:	2000017c 	andcs	r0, r0, ip, ror r1
    1a18:	20000170 	andcs	r0, r0, r0, ror r1
    1a1c:	20000138 	andcs	r0, r0, r8, lsr r1
    1a20:	00004315 	andeq	r4, r0, r5, lsl r3

00001a24 <tcvp_new>:
 * Plugin-visible dispose
 */
	dispose (header (p), dsp);
}

__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    1a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a26:	b280      	uxth	r0, r0
    1a28:	4615      	mov	r5, r2
/*
 * Create a new packet with attributes inherited from the session
 */
	hblock_t *p;

	if (dsp != TCV_DSP_PASS) {
    1a2a:	460e      	mov	r6, r1
    1a2c:	b309      	cbz	r1, 1a72 <tcvp_new+0x4e>

		/* Session must be defined for that */
		if (ses == NONE)
    1a2e:	1c53      	adds	r3, r2, #1
    1a30:	d103      	bne.n	1a3a <tcvp_new+0x16>
			syserror (EREQPAR, "tcv26");
    1a32:	2003      	movs	r0, #3
    1a34:	4912      	ldr	r1, [pc, #72]	; (1a80 <tcvp_new+0x5c>)
		verify_fds (ses, "tcv27");
    1a36:	f7fe fd1b 	bl	470 <__pi_syserror>
    1a3a:	2a08      	cmp	r2, #8
    1a3c:	d803      	bhi.n	1a46 <tcvp_new+0x22>
    1a3e:	4f11      	ldr	r7, [pc, #68]	; (1a84 <tcvp_new+0x60>)
    1a40:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    1a44:	b913      	cbnz	r3, 1a4c <tcvp_new+0x28>
    1a46:	200a      	movs	r0, #10
    1a48:	490f      	ldr	r1, [pc, #60]	; (1a88 <tcvp_new+0x64>)
    1a4a:	e7f4      	b.n	1a36 <tcvp_new+0x12>
			TCV_LIMIT_XMT)) {
		       		// Drop
		    	   	return NULL;
		}
#endif
		if ((p = apb (size)) != NULL) {
    1a4c:	f7ff fdd0 	bl	15f0 <apb>
    1a50:	4604      	mov	r4, r0
    1a52:	b908      	cbnz	r0, 1a58 <tcvp_new+0x34>
			/* If you accidentally call tcv_endp on it */
			p->attributes.b.outgoing = 0;
			dispose (p, dsp);
			return (address)(p + 1);
		}
		return NULL;
    1a54:	2000      	movs	r0, #0

	if ((p = apb (size)) != NULL)
		return (address)(p + 1);
	else
		return NULL;
}
    1a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p->attributes = descriptors [ses] -> attpattern;
    1a58:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
			dispose (p, dsp);
    1a5c:	4631      	mov	r1, r6
			p->attributes = descriptors [ses] -> attpattern;
    1a5e:	891b      	ldrh	r3, [r3, #8]
    1a60:	8143      	strh	r3, [r0, #10]
			p->attributes.b.outgoing = 0;
    1a62:	f36f 0341 	bfc	r3, #1, #1
    1a66:	7283      	strb	r3, [r0, #10]
			dispose (p, dsp);
    1a68:	f7ff fe08 	bl	167c <dispose>
			return (address)(p + 1);
    1a6c:	f104 000c 	add.w	r0, r4, #12
    1a70:	e7f1      	b.n	1a56 <tcvp_new+0x32>
	if ((p = apb (size)) != NULL)
    1a72:	f7ff fdbd 	bl	15f0 <apb>
    1a76:	2800      	cmp	r0, #0
    1a78:	d0ec      	beq.n	1a54 <tcvp_new+0x30>
		return (address)(p + 1);
    1a7a:	300c      	adds	r0, #12
    1a7c:	e7eb      	b.n	1a56 <tcvp_new+0x32>
    1a7e:	bf00      	nop
    1a80:	0000431b 	andeq	r4, r0, fp, lsl r3
    1a84:	20000138 	andcs	r0, r0, r8, lsr r1
    1a88:	00004321 	andeq	r4, r0, r1, lsr #6

00001a8c <tcvphy_reg>:
 * points to a function that controls (i.e., changes the options of) the
 * interface.
 */
	qhead_t *q;

	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a8c:	2802      	cmp	r0, #2
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1a8e:	b510      	push	{r4, lr}
    1a90:	4604      	mov	r4, r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a92:	d803      	bhi.n	1a9c <tcvphy_reg+0x10>
    1a94:	4b0c      	ldr	r3, [pc, #48]	; (1ac8 <tcvphy_reg+0x3c>)
    1a96:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1a9a:	b118      	cbz	r0, 1aa4 <tcvphy_reg+0x18>
		syserror (EREQPAR, "tcv28");
    1a9c:	2003      	movs	r0, #3
    1a9e:	490b      	ldr	r1, [pc, #44]	; (1acc <tcvphy_reg+0x40>)
	physical [phy] = ps;
	physinfo [phy] = info;

	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
	if (q == NULL)
		syserror (EMALLOC, "tcv29");
    1aa0:	f7fe fce6 	bl	470 <__pi_syserror>
	physical [phy] = ps;
    1aa4:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	physinfo [phy] = info;
    1aa8:	4b09      	ldr	r3, [pc, #36]	; (1ad0 <tcvphy_reg+0x44>)
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1aaa:	2008      	movs	r0, #8
	physinfo [phy] = info;
    1aac:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1ab0:	f7ff fc74 	bl	139c <__pi_malloc>
    1ab4:	4a07      	ldr	r2, [pc, #28]	; (1ad4 <tcvphy_reg+0x48>)
    1ab6:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
	if (q == NULL)
    1aba:	b910      	cbnz	r0, 1ac2 <tcvphy_reg+0x36>
		syserror (EMALLOC, "tcv29");
    1abc:	2006      	movs	r0, #6
    1abe:	4906      	ldr	r1, [pc, #24]	; (1ad8 <tcvphy_reg+0x4c>)
    1ac0:	e7ee      	b.n	1aa0 <tcvphy_reg+0x14>
	q_init (q);
    1ac2:	e9c0 0000 	strd	r0, r0, [r0]
	/*
	 * Queue event identifier (which happens to be the queue pointer
	 * in disguise).
	 */
	return ptrtoint (q);
}
    1ac6:	bd10      	pop	{r4, pc}
    1ac8:	20000164 	andcs	r0, r0, r4, ror #2
    1acc:	00004327 	andeq	r4, r0, r7, lsr #6
    1ad0:	20000170 	andcs	r0, r0, r0, ror r1
    1ad4:	20000158 	andcs	r0, r0, r8, asr r1
    1ad8:	0000432d 	andeq	r4, r0, sp, lsr #6

00001adc <tcvphy_rcv>:

__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
	int plg, dsp, ses;
	tcvadp_t ap;
	address c;

	verify_fph (phy, "tcv30");
    1ae0:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ae2:	4605      	mov	r5, r0
    1ae4:	460f      	mov	r7, r1
    1ae6:	4614      	mov	r4, r2
    1ae8:	b085      	sub	sp, #20
	verify_fph (phy, "tcv30");
    1aea:	d803      	bhi.n	1af4 <tcvphy_rcv+0x18>
    1aec:	4b1e      	ldr	r3, [pc, #120]	; (1b68 <tcvphy_rcv+0x8c>)
    1aee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1af2:	b91b      	cbnz	r3, 1afc <tcvphy_rcv+0x20>
    1af4:	491d      	ldr	r1, [pc, #116]	; (1b6c <tcvphy_rcv+0x90>)
		 * (or fall back) plugins to be used when none of the
		 * "specific" plugins claims the packet.
		 */
		if (plugins [plg] == NULL)
			continue;
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1af6:	200a      	movs	r0, #10
    1af8:	f7fe fcba 	bl	470 <__pi_syserror>
    1afc:	4e1c      	ldr	r6, [pc, #112]	; (1b70 <tcvphy_rcv+0x94>)
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1afe:	f10d 080c 	add.w	r8, sp, #12
    1b02:	f1a6 0a08 	sub.w	sl, r6, #8
		if (plugins [plg] == NULL)
    1b06:	6833      	ldr	r3, [r6, #0]
    1b08:	46b1      	mov	r9, r6
    1b0a:	3e04      	subs	r6, #4
    1b0c:	b92b      	cbnz	r3, 1b1a <tcvphy_rcv+0x3e>
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1b0e:	45ca      	cmp	sl, r9
    1b10:	d1f9      	bne.n	1b06 <tcvphy_rcv+0x2a>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
		/*
		 * Either no one is claiming the packet or the claimant says
		 * we should drop it.
		 */
		return 0;
    1b12:	2000      	movs	r0, #0
		return 0;

	memcpy ((char*)c, ((char*)p) + ap.head, len);

	return 1;
}
    1b14:	b005      	add	sp, #20
    1b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1b1a:	f8d3 b008 	ldr.w	fp, [r3, #8]
    1b1e:	f1bb 0f00 	cmp.w	fp, #0
    1b22:	d101      	bne.n	1b28 <tcvphy_rcv+0x4c>
    1b24:	4913      	ldr	r1, [pc, #76]	; (1b74 <tcvphy_rcv+0x98>)
    1b26:	e7e6      	b.n	1af6 <tcvphy_rcv+0x1a>
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1b28:	4639      	mov	r1, r7
    1b2a:	4622      	mov	r2, r4
    1b2c:	4628      	mov	r0, r5
    1b2e:	f8cd 8000 	str.w	r8, [sp]
    1b32:	ab02      	add	r3, sp, #8
    1b34:	47d8      	blx	fp
    1b36:	4601      	mov	r1, r0
    1b38:	2800      	cmp	r0, #0
    1b3a:	d0e8      	beq.n	1b0e <tcvphy_rcv+0x32>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1b3c:	2801      	cmp	r0, #1
    1b3e:	d0e8      	beq.n	1b12 <tcvphy_rcv+0x36>
	len -= (ap.head + ap.tail);
    1b40:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    1b44:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1b48:	441a      	add	r2, r3
    1b4a:	1aa4      	subs	r4, r4, r2
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1b4c:	4620      	mov	r0, r4
    1b4e:	9a02      	ldr	r2, [sp, #8]
    1b50:	f7ff ff68 	bl	1a24 <tcvp_new>
    1b54:	2800      	cmp	r0, #0
    1b56:	d0dc      	beq.n	1b12 <tcvphy_rcv+0x36>
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1b58:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    1b5c:	4622      	mov	r2, r4
    1b5e:	4439      	add	r1, r7
    1b60:	f7ff fb37 	bl	11d2 <__pi_memcpy>
	return 1;
    1b64:	2001      	movs	r0, #1
    1b66:	e7d5      	b.n	1b14 <tcvphy_rcv+0x38>
    1b68:	20000164 	andcs	r0, r0, r4, ror #2
    1b6c:	00004333 	andeq	r4, r0, r3, lsr r3
    1b70:	20000184 	andcs	r0, r0, r4, lsl #3
    1b74:	00004339 	andeq	r4, r0, r9, lsr r3

00001b78 <tcvphy_get>:
 * Returns the packet pointer and its length.
 */
	qhead_t	*oq;
	hblock_t *b;

	verify_fph (phy, "tcv32");
    1b78:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, address, tcvphy_get) (int phy, int *len) {
    1b7a:	b508      	push	{r3, lr}
	verify_fph (phy, "tcv32");
    1b7c:	d803      	bhi.n	1b86 <tcvphy_get+0xe>
    1b7e:	4b0b      	ldr	r3, [pc, #44]	; (1bac <tcvphy_get+0x34>)
    1b80:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1b84:	b91b      	cbnz	r3, 1b8e <tcvphy_get+0x16>
    1b86:	200a      	movs	r0, #10
    1b88:	4909      	ldr	r1, [pc, #36]	; (1bb0 <tcvphy_get+0x38>)
    1b8a:	f7fe fc71 	bl	470 <__pi_syserror>

	oq = oqueues [phy];
    1b8e:	4b09      	ldr	r3, [pc, #36]	; (1bb4 <tcvphy_get+0x3c>)
    1b90:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	b = q_first (oq);
    1b94:	6818      	ldr	r0, [r3, #0]
	if (q_end (b, oq)) {
    1b96:	4283      	cmp	r3, r0
    1b98:	d005      	beq.n	1ba6 <tcvphy_get+0x2e>
		/* The queue is empty */
		return NULL;
	}

	*len = b->length;
    1b9a:	8903      	ldrh	r3, [r0, #8]
    1b9c:	600b      	str	r3, [r1, #0]
	deq (b);	// Dequeue the packet ...
    1b9e:	f7ff fd32 	bl	1606 <deq>
	deqtm (b);	// ... and clear its timer
	return (address) (b + 1);
    1ba2:	300c      	adds	r0, #12
}
    1ba4:	bd08      	pop	{r3, pc}
		return NULL;
    1ba6:	2000      	movs	r0, #0
    1ba8:	e7fc      	b.n	1ba4 <tcvphy_get+0x2c>
    1baa:	bf00      	nop
    1bac:	20000164 	andcs	r0, r0, r4, ror #2
    1bb0:	0000433f 	andeq	r4, r0, pc, lsr r3
    1bb4:	20000158 	andcs	r0, r0, r8, asr r1

00001bb8 <tcvphy_top>:
 * Returns the pointer to the first outgoing packet.
 */
	qhead_t *oq;
	hblock_t *b;

	verify_fph (phy, "tcv33");
    1bb8:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, address, tcvphy_top) (int phy) {
    1bba:	b508      	push	{r3, lr}
	verify_fph (phy, "tcv33");
    1bbc:	d803      	bhi.n	1bc6 <tcvphy_top+0xe>
    1bbe:	4b08      	ldr	r3, [pc, #32]	; (1be0 <tcvphy_top+0x28>)
    1bc0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1bc4:	b91b      	cbnz	r3, 1bce <tcvphy_top+0x16>
    1bc6:	200a      	movs	r0, #10
    1bc8:	4906      	ldr	r1, [pc, #24]	; (1be4 <tcvphy_top+0x2c>)
    1bca:	f7fe fc51 	bl	470 <__pi_syserror>

	oq = oqueues [phy];
    1bce:	4b06      	ldr	r3, [pc, #24]	; (1be8 <tcvphy_top+0x30>)
    1bd0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	b = q_first (oq);
    1bd4:	6818      	ldr	r0, [r3, #0]
	if (q_end (b, oq))
    1bd6:	4283      	cmp	r3, r0
		return NULL;
    1bd8:	bf0c      	ite	eq
    1bda:	2000      	moveq	r0, #0

	return (address)(b + 1);
    1bdc:	300c      	addne	r0, #12
}
    1bde:	bd08      	pop	{r3, pc}
    1be0:	20000164 	andcs	r0, r0, r4, ror #2
    1be4:	00004345 	andeq	r4, r0, r5, asr #6
    1be8:	20000158 	andcs	r0, r0, r8, asr r1

00001bec <tcvphy_end>:

__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1bec:	b510      	push	{r4, lr}
/*
 * Marks the end of packet transmission
 */
	hblock_t *b = header (pkt);

	verify_plg (b, tcv_xmt, "tcv34");
    1bee:	f810 3c01 	ldrb.w	r3, [r0, #-1]
	hblock_t *b = header (pkt);
    1bf2:	f1a0 040c 	sub.w	r4, r0, #12
	verify_plg (b, tcv_xmt, "tcv34");
    1bf6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    1bfa:	2b02      	cmp	r3, #2
    1bfc:	d805      	bhi.n	1c0a <tcvphy_end+0x1e>
    1bfe:	4a08      	ldr	r2, [pc, #32]	; (1c20 <tcvphy_end+0x34>)
    1c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1c04:	b10b      	cbz	r3, 1c0a <tcvphy_end+0x1e>
    1c06:	695b      	ldr	r3, [r3, #20]
    1c08:	b91b      	cbnz	r3, 1c12 <tcvphy_end+0x26>
    1c0a:	200a      	movs	r0, #10
    1c0c:	4905      	ldr	r1, [pc, #20]	; (1c24 <tcvphy_end+0x38>)
    1c0e:	f7fe fc2f 	bl	470 <__pi_syserror>
	dispose (b, plugins [b->attributes.b.plugin] ->
    1c12:	4798      	blx	r3
    1c14:	4601      	mov	r1, r0
    1c16:	4620      	mov	r0, r4
		tcv_xmt (pkt));
}
    1c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dispose (b, plugins [b->attributes.b.plugin] ->
    1c1c:	f7ff bd2e 	b.w	167c <dispose>
    1c20:	2000017c 	andcs	r0, r0, ip, ror r1
    1c24:	0000434b 	andeq	r4, r0, fp, asr #6

00001c28 <tcv_init>:
	tcv_tservice = create TCVTimerService;
	tcv_tservice -> _pp_apid_ ();
#endif	/* __SMURPH__ */

#endif	/* TCV_TIMERS */
}
    1c28:	4770      	bx	lr

00001c2a <NmiSR>:
NmiSRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    1c2a:	e7fe      	b.n	1c2a <NmiSR>

00001c2c <FaultISR>:
FaultISRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    1c2c:	e7fe      	b.n	1c2c <FaultISR>

00001c2e <AONIntHandler>:
IntDefaultHandler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    1c2e:	e7fe      	b.n	1c2e <AONIntHandler>

00001c30 <ResetISR>:
{
    1c30:	b508      	push	{r3, lr}
    SetupTrimDevice();
    1c32:	f001 fcdf 	bl	35f4 <NOROM_SetupTrimDevice>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1c36:	4b0c      	ldr	r3, [pc, #48]	; (1c68 <zero_loop+0x20>)
    pui32Src = &_etext;
    1c38:	4a0c      	ldr	r2, [pc, #48]	; (1c6c <zero_loop+0x24>)
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1c3a:	490d      	ldr	r1, [pc, #52]	; (1c70 <zero_loop+0x28>)
    1c3c:	428b      	cmp	r3, r1
    1c3e:	d30d      	bcc.n	1c5c <zero_loop+0x14>
    __asm("    ldr     r0, =_bss\n"
    1c40:	480c      	ldr	r0, [pc, #48]	; (1c74 <zero_loop+0x2c>)
    1c42:	490d      	ldr	r1, [pc, #52]	; (1c78 <zero_loop+0x30>)
    1c44:	f04f 0200 	mov.w	r2, #0

00001c48 <zero_loop>:
    1c48:	4288      	cmp	r0, r1
    1c4a:	bfb8      	it	lt
    1c4c:	f840 2b04 	strlt.w	r2, [r0], #4
    1c50:	dbfa      	blt.n	1c48 <zero_loop>
   main();
    1c52:	f7ff f90f 	bl	e74 <main>
    FaultISR();
    1c56:	f7ff ffe9 	bl	1c2c <FaultISR>
}
    1c5a:	bd08      	pop	{r3, pc}
        *pui32Dest++ = *pui32Src++;
    1c5c:	f852 0b04 	ldr.w	r0, [r2], #4
    1c60:	f843 0b04 	str.w	r0, [r3], #4
    1c64:	e7ea      	b.n	1c3c <ResetISR+0xc>
    1c66:	bf00      	nop
    1c68:	20000000 	andcs	r0, r0, r0
    1c6c:	00004d54 	andeq	r4, r0, r4, asr sp
    1c70:	2000010c 	andcs	r0, r0, ip, lsl #2
    1c74:	2000010c 	andcs	r0, r0, ip, lsl #2
    1c78:	20000234 	andcs	r0, r0, r4, lsr r2

00001c7c <get_byte>:

static word	left;

// ============================================================================

static byte get_byte () {
    1c7c:	2308      	movs	r3, #8

	int i;
	byte b;

	for (b = 0, i = 0; i < 8; i++) {
    1c7e:	2000      	movs	r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c80:	f44f 6280 	mov.w	r2, #1024	; 0x400
static byte get_byte () {
    1c84:	b570      	push	{r4, r5, r6, lr}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1c86:	4907      	ldr	r1, [pc, #28]	; (1ca4 <get_byte+0x28>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c88:	4d07      	ldr	r5, [pc, #28]	; (1ca8 <get_byte+0x2c>)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c8a:	4c08      	ldr	r4, [pc, #32]	; (1cac <get_byte+0x30>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c8c:	682e      	ldr	r6, [r5, #0]
		b <<= 1;
    1c8e:	0040      	lsls	r0, r0, #1
		if (ee_inp)
    1c90:	05f6      	lsls	r6, r6, #23
		b <<= 1;
    1c92:	b2c0      	uxtb	r0, r0
			b |= 1;
    1c94:	bf48      	it	mi
    1c96:	f040 0001 	orrmi.w	r0, r0, #1
	for (b = 0, i = 0; i < 8; i++) {
    1c9a:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c9c:	6022      	str	r2, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1c9e:	600a      	str	r2, [r1, #0]
    1ca0:	d1f4      	bne.n	1c8c <get_byte+0x10>
		ee_clkh;
		ee_clkl;
	}

	return b;
}
    1ca2:	bd70      	pop	{r4, r5, r6, pc}
    1ca4:	400220a0 	andmi	r2, r2, r0, lsr #1
    1ca8:	400220c0 	andmi	r2, r2, r0, asr #1
    1cac:	40022090 	mulmi	r2, r0, r0

00001cb0 <put_byte>:

static void put_byte (byte b) {
    1cb0:	b530      	push	{r4, r5, lr}
    1cb2:	2308      	movs	r3, #8
    1cb4:	f44f 7500 	mov.w	r5, #512	; 0x200
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1cb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1cbc:	4c06      	ldr	r4, [pc, #24]	; (1cd8 <put_byte+0x28>)
    1cbe:	4a07      	ldr	r2, [pc, #28]	; (1cdc <put_byte+0x2c>)

	int i;

	for (i = 0; i < 8; i++) {
		if (b & 0x80)
    1cc0:	f010 0f80 	tst.w	r0, #128	; 0x80
    1cc4:	bf14      	ite	ne
    1cc6:	6025      	strne	r5, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cc8:	6015      	streq	r5, [r2, #0]
			ee_outh;
		else
			ee_outl;
		ee_clkh;
		ee_clkl;
		b <<= 1;
    1cca:	0040      	lsls	r0, r0, #1
	for (i = 0; i < 8; i++) {
    1ccc:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1cce:	6021      	str	r1, [r4, #0]
		b <<= 1;
    1cd0:	b2c0      	uxtb	r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cd2:	6011      	str	r1, [r2, #0]
	for (i = 0; i < 8; i++) {
    1cd4:	d1f4      	bne.n	1cc0 <put_byte+0x10>
	}
}
    1cd6:	bd30      	pop	{r4, r5, pc}
    1cd8:	40022090 	mulmi	r2, r0, r0
    1cdc:	400220a0 	andmi	r2, r2, r0, lsr #1

00001ce0 <cmd_0>:
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1ce0:	2301      	movs	r3, #1

// ============================================================================

static void cmd_0 (byte cmd) {
    1ce2:	b510      	push	{r4, lr}
    1ce4:	4c03      	ldr	r4, [pc, #12]	; (1cf4 <cmd_0+0x14>)
    1ce6:	6023      	str	r3, [r4, #0]

	ee_start;
	put_byte (cmd);
    1ce8:	f7ff ffe2 	bl	1cb0 <put_byte>
    1cec:	2300      	movs	r3, #0
    1cee:	6023      	str	r3, [r4, #0]
	ee_stop;
}
    1cf0:	bd10      	pop	{r4, pc}
    1cf2:	bf00      	nop
    1cf4:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

00001cf8 <wwait>:
	r = get_byte ();
	ee_stop;
	return r;
}

static void wwait (word st, word del) {
    1cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1cfc:	4604      	mov	r4, r0
    1cfe:	460d      	mov	r5, r1
    1d00:	2701      	movs	r7, #1
//
// Wait for write to complete
//
	while (dopen && (rdsr () & 1)) {
    1d02:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1d48 <wwait+0x50>
    1d06:	4e0f      	ldr	r6, [pc, #60]	; (1d44 <wwait+0x4c>)
    1d08:	f898 3000 	ldrb.w	r3, [r8]
    1d0c:	b14b      	cbz	r3, 1d22 <wwait+0x2a>
	put_byte (CMD_RDSR);
    1d0e:	2005      	movs	r0, #5
    1d10:	6037      	str	r7, [r6, #0]
    1d12:	f7ff ffcd 	bl	1cb0 <put_byte>
	r = get_byte ();
    1d16:	f7ff ffb1 	bl	1c7c <get_byte>
    1d1a:	2300      	movs	r3, #0
    1d1c:	6033      	str	r3, [r6, #0]
	while (dopen && (rdsr () & 1)) {
    1d1e:	07c3      	lsls	r3, r0, #31
    1d20:	d401      	bmi.n	1d26 <wwait+0x2e>
		else {
			delay (del, st);
			release;
		}
	}
}
    1d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (st == WNONE)
    1d26:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1d2a:	429c      	cmp	r4, r3
    1d2c:	d103      	bne.n	1d36 <wwait+0x3e>
			mdelay (1);
    1d2e:	2001      	movs	r0, #1
    1d30:	f7fe fb4a 	bl	3c8 <mdelay>
    1d34:	e7e8      	b.n	1d08 <wwait+0x10>
			delay (del, st);
    1d36:	4621      	mov	r1, r4
    1d38:	4628      	mov	r0, r5
    1d3a:	f7ff fa0d 	bl	1158 <delay>
			release;
    1d3e:	f7fe ff55 	bl	bec <__pi_release>
    1d42:	bf00      	nop
    1d44:	42441a50 	submi	r1, r4, #80, 20	; 0x50000
    1d48:	20000188 	andcs	r0, r0, r8, lsl #3

00001d4c <ready>:
		dopen = 0;
		ee_bring_down;
	}
}

static void ready () {
    1d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//
// Called before a new operation to make sure the chip is ready
//
	if (dopen) {
    1d4e:	4d0c      	ldr	r5, [pc, #48]	; (1d80 <ready+0x34>)
    1d50:	782f      	ldrb	r7, [r5, #0]
    1d52:	b147      	cbz	r7, 1d66 <ready+0x1a>
		// The device is open
		wwait (WNONE, 1);
    1d54:	2101      	movs	r1, #1
    1d56:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1d5a:	f7ff ffcd 	bl	1cf8 <wwait>
	} else {
		copen ();
		dopen = DOPEN_TEMP;
	}

	dstat = 0;
    1d5e:	2200      	movs	r2, #0
    1d60:	4b08      	ldr	r3, [pc, #32]	; (1d84 <ready+0x38>)
    1d62:	701a      	strb	r2, [r3, #0]
}
    1d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d66:	2401      	movs	r4, #1
    1d68:	4e07      	ldr	r6, [pc, #28]	; (1d88 <ready+0x3c>)
	udelay (1);
    1d6a:	4620      	mov	r0, r4
    1d6c:	6034      	str	r4, [r6, #0]
    1d6e:	f7fe fb15 	bl	39c <udelay>
	udelay (1);
    1d72:	4620      	mov	r0, r4
    1d74:	6037      	str	r7, [r6, #0]
    1d76:	f7fe fb11 	bl	39c <udelay>
		dopen = DOPEN_TEMP;
    1d7a:	2302      	movs	r3, #2
    1d7c:	702b      	strb	r3, [r5, #0]
    1d7e:	e7ee      	b.n	1d5e <ready+0x12>
    1d80:	20000188 	andcs	r0, r0, r8, lsl #3
    1d84:	20000189 	andcs	r0, r0, r9, lsl #3
    1d88:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

00001d8c <cclose>:
static void cclose () {
    1d8c:	b510      	push	{r4, lr}
	if (dopen == DOPEN_TEMP) {
    1d8e:	4c07      	ldr	r4, [pc, #28]	; (1dac <cclose+0x20>)
    1d90:	7823      	ldrb	r3, [r4, #0]
    1d92:	2b02      	cmp	r3, #2
    1d94:	d109      	bne.n	1daa <cclose+0x1e>
		wwait (WNONE, 1);
    1d96:	2101      	movs	r1, #1
    1d98:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1d9c:	f7ff ffac 	bl	1cf8 <wwait>
	cmd_0 (CMD_DP);
    1da0:	20b9      	movs	r0, #185	; 0xb9
    1da2:	f7ff ff9d 	bl	1ce0 <cmd_0>
		dopen = 0;
    1da6:	2300      	movs	r3, #0
    1da8:	7023      	strb	r3, [r4, #0]
}
    1daa:	bd10      	pop	{r4, pc}
    1dac:	20000188 	andcs	r0, r0, r8, lsl #3

00001db0 <ee_open>:

// ============================================================================

word ee_open () {
    1db0:	b508      	push	{r3, lr}
//
// Open (for more than one operation)
//
	ready ();
    1db2:	f7ff ffcb 	bl	1d4c <ready>
	dopen = DOPEN_PERM;
    1db6:	2201      	movs	r2, #1
    1db8:	4b01      	ldr	r3, [pc, #4]	; (1dc0 <ee_open+0x10>)
		ee_stop;
		diag ("ID: %x %x %x", r [0], r [1], r [2]);
	}
#endif
	return 0;
}
    1dba:	2000      	movs	r0, #0
	dopen = DOPEN_PERM;
    1dbc:	701a      	strb	r2, [r3, #0]
}
    1dbe:	bd08      	pop	{r3, pc}
    1dc0:	20000188 	andcs	r0, r0, r8, lsl #3

00001dc4 <ee_close>:

void ee_close () {

	if (dopen) {
    1dc4:	4b03      	ldr	r3, [pc, #12]	; (1dd4 <ee_close+0x10>)
    1dc6:	781a      	ldrb	r2, [r3, #0]
    1dc8:	b11a      	cbz	r2, 1dd2 <ee_close+0xe>
		dopen = DOPEN_TEMP;
    1dca:	2202      	movs	r2, #2
    1dcc:	701a      	strb	r2, [r3, #0]
		cclose ();
    1dce:	f7ff bfdd 	b.w	1d8c <cclose>
	}
}
    1dd2:	4770      	bx	lr
    1dd4:	20000188 	andcs	r0, r0, r8, lsl #3

00001dd8 <ser_in>:

extern char *__inpline;

procname (__inserial);

int ser_in (word st, char *buf, int len) {
    1dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1dda:	4604      	mov	r4, r0
    1ddc:	460f      	mov	r7, r1
/* ======= */
/* Direct */
/* ====== */
	int prcs;

	if (len == 0)
    1dde:	4615      	mov	r5, r2
    1de0:	b37a      	cbz	r2, 1e42 <ser_in+0x6a>
		// Just in case
		return 0;

	if (__inpline == NULL) {
    1de2:	4e19      	ldr	r6, [pc, #100]	; (1e48 <ser_in+0x70>)
    1de4:	6830      	ldr	r0, [r6, #0]
    1de6:	b988      	cbnz	r0, 1e0c <ser_in+0x34>
		if ((prcs = running (__inserial)) == 0) {
    1de8:	4818      	ldr	r0, [pc, #96]	; (1e4c <ser_in+0x74>)
    1dea:	f7ff f9d1 	bl	1190 <running>
    1dee:	b948      	cbnz	r0, 1e04 <ser_in+0x2c>
			prcs = runthread (__inserial);
    1df0:	4601      	mov	r1, r0
    1df2:	4816      	ldr	r0, [pc, #88]	; (1e4c <ser_in+0x74>)
    1df4:	f7ff fb26 	bl	1444 <__pi_fork>
			if (prcs == 0) {
    1df8:	b920      	cbnz	r0, 1e04 <ser_in+0x2c>
				npwait (st);
    1dfa:	4620      	mov	r0, r4
    1dfc:	f7ff fb3c 	bl	1478 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    1e00:	f7fe fef4 	bl	bec <__pi_release>
		join (prcs, st);
    1e04:	4621      	mov	r1, r4
    1e06:	f7ff f995 	bl	1134 <__pi_join>
    1e0a:	e7f9      	b.n	1e00 <ser_in+0x28>
	}

	/* Input available */
	if (*__inpline == NULL) // bin cmd
    1e0c:	7803      	ldrb	r3, [r0, #0]
    1e0e:	b9a3      	cbnz	r3, 1e3a <ser_in+0x62>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1e10:	7844      	ldrb	r4, [r0, #1]
    1e12:	3403      	adds	r4, #3
	else
		prcs = strlen (__inpline);

	if (prcs >= len)
    1e14:	42ac      	cmp	r4, r5
		prcs = len-1;
    1e16:	bfa8      	it	ge
    1e18:	f105 34ff 	addge.w	r4, r5, #4294967295	; 0xffffffff

	memcpy (buf, __inpline, prcs);
    1e1c:	4622      	mov	r2, r4
    1e1e:	4638      	mov	r0, r7
    1e20:	6831      	ldr	r1, [r6, #0]
    1e22:	f7ff f9d6 	bl	11d2 <__pi_memcpy>
	ufree (__inpline);
    1e26:	6830      	ldr	r0, [r6, #0]
    1e28:	f7ff fa6c 	bl	1304 <__pi_free>
	__inpline = NULL;
    1e2c:	2300      	movs	r3, #0
    1e2e:	6033      	str	r3, [r6, #0]
	if (*buf) // if it's NULL, it's a bin cmd
    1e30:	783a      	ldrb	r2, [r7, #0]
    1e32:	b102      	cbz	r2, 1e36 <ser_in+0x5e>
		buf [prcs] = '\0';
    1e34:	553b      	strb	r3, [r7, r4]
	return prcs;
}
    1e36:	4620      	mov	r0, r4
    1e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prcs = strlen (__inpline);
    1e3a:	f7ff f9bb 	bl	11b4 <__pi_strlen>
    1e3e:	4604      	mov	r4, r0
    1e40:	e7e8      	b.n	1e14 <ser_in+0x3c>
		return 0;
    1e42:	4614      	mov	r4, r2
    1e44:	e7f7      	b.n	1e36 <ser_in+0x5e>
    1e46:	bf00      	nop
    1e48:	200001d4 	ldrdcs	r0, [r0], -r4
    1e4c:	000028e9 	andeq	r2, r0, r9, ror #17

00001e50 <ser_outf>:

//+++ "__outserial.c"

procname (__outserial);

int ser_outf (word st, const char *m, ...) {
    1e50:	b40e      	push	{r1, r2, r3}
    1e52:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
    1e54:	4604      	mov	r4, r0

	int prcs;
	char *buf;
	va_list ap;

	if ((prcs = running (__outserial)) != 0) {
    1e56:	4812      	ldr	r0, [pc, #72]	; (1ea0 <ser_outf+0x50>)
    1e58:	f7ff f99a 	bl	1190 <running>
    1e5c:	4606      	mov	r6, r0
    1e5e:	b120      	cbz	r0, 1e6a <ser_outf+0x1a>
		/* We have to wait */
		join (prcs, st);
    1e60:	4621      	mov	r1, r4
    1e62:	f7ff f967 	bl	1134 <__pi_join>
	if ((buf = vform (NULL, m, ap)) == NULL) {
		/*
		 * This means that we are out of memory
		 */
		umwait (st);
		release;
    1e66:	f7fe fec1 	bl	bec <__pi_release>
	va_start (ap, m);
    1e6a:	aa08      	add	r2, sp, #32
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1e6c:	9907      	ldr	r1, [sp, #28]
	va_start (ap, m);
    1e6e:	9201      	str	r2, [sp, #4]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1e70:	f000 fef0 	bl	2c54 <vform>
    1e74:	4605      	mov	r5, r0
    1e76:	b918      	cbnz	r0, 1e80 <ser_outf+0x30>
		umwait (st);
    1e78:	4620      	mov	r0, r4
    1e7a:	f7ff fafd 	bl	1478 <__pi_waitmem>
    1e7e:	e7f2      	b.n	1e66 <ser_outf+0x16>
	}

	if (runstrand (__outserial, buf) == 0) {
    1e80:	4601      	mov	r1, r0
    1e82:	4807      	ldr	r0, [pc, #28]	; (1ea0 <ser_outf+0x50>)
    1e84:	f7ff fade 	bl	1444 <__pi_fork>
    1e88:	b918      	cbnz	r0, 1e92 <ser_outf+0x42>
		ufree (buf);
    1e8a:	4628      	mov	r0, r5
    1e8c:	f7ff fa3a 	bl	1304 <__pi_free>
		npwait (st);
    1e90:	e7f2      	b.n	1e78 <ser_outf+0x28>
		release;
	}

	return 0;
}
    1e92:	4630      	mov	r0, r6
    1e94:	b003      	add	sp, #12
    1e96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1e9a:	b003      	add	sp, #12
    1e9c:	4770      	bx	lr
    1e9e:	bf00      	nop
    1ea0:	00002879 	andeq	r2, r0, r9, ror r8

00001ea4 <ser_inf>:

extern char *__inpline;

procname (__inserial);

int ser_inf (word st, const char *fmt, ...) {
    1ea4:	b40e      	push	{r1, r2, r3}
    1ea6:	b533      	push	{r0, r1, r4, r5, lr}
    1ea8:	9905      	ldr	r1, [sp, #20]
    1eaa:	4604      	mov	r4, r0
/* ========= */

	int prcs;
	va_list	ap;

	if (fmt == NULL)
    1eac:	b321      	cbz	r1, 1ef8 <ser_inf+0x54>
		return 0;

	if (__inpline == NULL) {
    1eae:	4d13      	ldr	r5, [pc, #76]	; (1efc <ser_inf+0x58>)
    1eb0:	6828      	ldr	r0, [r5, #0]
    1eb2:	b988      	cbnz	r0, 1ed8 <ser_inf+0x34>
		if ((prcs = running (__inserial)) == 0) {
    1eb4:	4812      	ldr	r0, [pc, #72]	; (1f00 <ser_inf+0x5c>)
    1eb6:	f7ff f96b 	bl	1190 <running>
    1eba:	b948      	cbnz	r0, 1ed0 <ser_inf+0x2c>
			prcs = runthread (__inserial);
    1ebc:	4601      	mov	r1, r0
    1ebe:	4810      	ldr	r0, [pc, #64]	; (1f00 <ser_inf+0x5c>)
    1ec0:	f7ff fac0 	bl	1444 <__pi_fork>
			if (prcs == 0) {
    1ec4:	b920      	cbnz	r0, 1ed0 <ser_inf+0x2c>
				npwait (st);
    1ec6:	4620      	mov	r0, r4
    1ec8:	f7ff fad6 	bl	1478 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    1ecc:	f7fe fe8e 	bl	bec <__pi_release>
		join (prcs, st);
    1ed0:	4621      	mov	r1, r4
    1ed2:	f7ff f92f 	bl	1134 <__pi_join>
    1ed6:	e7f9      	b.n	1ecc <ser_inf+0x28>
	}

	/* Input available */
	va_start (ap, fmt);
    1ed8:	aa06      	add	r2, sp, #24
    1eda:	9201      	str	r2, [sp, #4]

	prcs = vscan (__inpline, fmt, ap);
    1edc:	f000 fee2 	bl	2ca4 <vscan>
    1ee0:	4604      	mov	r4, r0

	ufree (__inpline);
    1ee2:	6828      	ldr	r0, [r5, #0]
    1ee4:	f7ff fa0e 	bl	1304 <__pi_free>
	__inpline = NULL;
    1ee8:	2300      	movs	r3, #0
    1eea:	602b      	str	r3, [r5, #0]

	return prcs;
}
    1eec:	4620      	mov	r0, r4
    1eee:	b002      	add	sp, #8
    1ef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1ef4:	b003      	add	sp, #12
    1ef6:	4770      	bx	lr
		return 0;
    1ef8:	460c      	mov	r4, r1
    1efa:	e7f7      	b.n	1eec <ser_inf+0x48>
    1efc:	200001d4 	ldrdcs	r0, [r0], -r4
    1f00:	000028e9 	andeq	r2, r0, r9, ror #17

00001f04 <plugch>:
//
// Insert the channel number as the right frequency in the proper place
//
	RF_cmdFs.frequency = 
		// Channel number is just the megahertz increment
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    1f04:	4b04      	ldr	r3, [pc, #16]	; (1f18 <plugch+0x14>)
    1f06:	4a05      	ldr	r2, [pc, #20]	; (1f1c <plugch+0x18>)
    1f08:	781b      	ldrb	r3, [r3, #0]
    1f0a:	f503 7359 	add.w	r3, r3, #868	; 0x364
    1f0e:	8413      	strh	r3, [r2, #32]
	RF_cmdFs.frequency = 
    1f10:	4a03      	ldr	r2, [pc, #12]	; (1f20 <plugch+0x1c>)
    1f12:	81d3      	strh	r3, [r2, #14]
}
    1f14:	4770      	bx	lr
    1f16:	bf00      	nop
    1f18:	2000018c 	andcs	r0, r0, ip, lsl #3
    1f1c:	20000054 	andcs	r0, r0, r4, asr r0
    1f20:	2000003c 	andcs	r0, r0, ip, lsr r0

00001f24 <option>:

	// Make rbuffl exactly equal to max payload length
	rbuffl -= 2;
}

static int option (int opt, address val) {
    1f24:	b570      	push	{r4, r5, r6, lr}
    1f26:	460c      	mov	r4, r1
    1f28:	281a      	cmp	r0, #26
    1f2a:	f200 80a4 	bhi.w	2076 <option+0x152>
    1f2e:	e8df f000 	tbb	[pc, r0]
    1f32:	3939390e 	ldmdbcc	r9!, {r1, r2, r3, r8, fp, ip, sp}
    1f36:	674f3014 	smlaldvs	r3, pc, r4, r0	; <UNPREDICTABLE>
    1f3a:	3b35445b 	blcc	d530ae <__ccfg+0xd33106>
    1f3e:	a2a2a2a2 	adcge	sl, r2, #536870922	; 0x2000000a
    1f42:	777aa2a2 	ldrbvc	sl, [sl, -r2, lsr #5]!
    1f46:	898ba2a2 	stmibhi	fp, {r1, r5, r7, r9, sp, pc}
    1f4a:	009aa241 	addseq	sl, sl, r1, asr #4

	switch (opt) {

		case PHYSOPT_STATUS:

			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    1f4e:	4b4c      	ldr	r3, [pc, #304]	; (2080 <option+0x15c>)
    1f50:	7818      	ldrb	r0, [r3, #0]
    1f52:	f000 0001 	and.w	r0, r0, #1
			ret = (int) statid;
			goto RVal;

		case PHYSOPT_GETMAXPL:

			ret = rbuffl + 2;
    1f56:	3002      	adds	r0, #2
			goto RVal;
    1f58:	e028      	b.n	1fac <option+0x88>
			_BIS (dstate, DSTATE_RXON);
    1f5a:	4a49      	ldr	r2, [pc, #292]	; (2080 <option+0x15c>)
    1f5c:	7813      	ldrb	r3, [r2, #0]
    1f5e:	f043 0301 	orr.w	r3, r3, #1
    1f62:	7013      	strb	r3, [r2, #0]
	int ret = 0;
    1f64:	2000      	movs	r0, #0
			p_trigger (drvprcs, qevent);
    1f66:	4b47      	ldr	r3, [pc, #284]	; (2084 <option+0x160>)
    1f68:	6819      	ldr	r1, [r3, #0]
    1f6a:	4b47      	ldr	r3, [pc, #284]	; (2088 <option+0x164>)
    1f6c:	460c      	mov	r4, r1
    1f6e:	681d      	ldr	r5, [r3, #0]
    1f70:	2300      	movs	r3, #0
    1f72:	f834 2b10 	ldrh.w	r2, [r4], #16
    1f76:	f002 0207 	and.w	r2, r2, #7
    1f7a:	429a      	cmp	r2, r3
    1f7c:	dd08      	ble.n	1f90 <option+0x6c>
    1f7e:	f854 6033 	ldr.w	r6, [r4, r3, lsl #3]
    1f82:	3301      	adds	r3, #1
    1f84:	42ae      	cmp	r6, r5
    1f86:	d1f8      	bne.n	1f7a <option+0x56>
    1f88:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1f8c:	889b      	ldrh	r3, [r3, #4]
    1f8e:	800b      	strh	r3, [r1, #0]
	return ret;
RVal:
	if (val != NULL)
		*val = ret;
	goto RRet;
}
    1f90:	bd70      	pop	{r4, r5, r6, pc}
			_BIC (dstate, DSTATE_RXON);
    1f92:	4a3b      	ldr	r2, [pc, #236]	; (2080 <option+0x15c>)
    1f94:	7813      	ldrb	r3, [r2, #0]
    1f96:	f023 0301 	bic.w	r3, r3, #1
    1f9a:	e7e2      	b.n	1f62 <option+0x3e>
			statid = (val == NULL) ? 0 : *val;
    1f9c:	b101      	cbz	r1, 1fa0 <option+0x7c>
    1f9e:	880c      	ldrh	r4, [r1, #0]
    1fa0:	4b3a      	ldr	r3, [pc, #232]	; (208c <option+0x168>)
    1fa2:	801c      	strh	r4, [r3, #0]
	int ret = 0;
    1fa4:	2000      	movs	r0, #0
    1fa6:	e7f3      	b.n	1f90 <option+0x6c>
			ret = (int) statid;
    1fa8:	4b38      	ldr	r3, [pc, #224]	; (208c <option+0x168>)
    1faa:	8818      	ldrh	r0, [r3, #0]
	if (val != NULL)
    1fac:	2c00      	cmp	r4, #0
    1fae:	d0ef      	beq.n	1f90 <option+0x6c>
		*val = ret;
    1fb0:	8020      	strh	r0, [r4, #0]
	return ret;
    1fb2:	e7ed      	b.n	1f90 <option+0x6c>
			ret = rbuffl + 2;
    1fb4:	4b36      	ldr	r3, [pc, #216]	; (2090 <option+0x16c>)
    1fb6:	7818      	ldrb	r0, [r3, #0]
    1fb8:	e7cd      	b.n	1f56 <option+0x32>
				memcpy (val, &rxstat,
    1fba:	220c      	movs	r2, #12
			if (val != NULL) {
    1fbc:	b121      	cbz	r1, 1fc8 <option+0xa4>
				memcpy (val, &rxstat,
    1fbe:	4620      	mov	r0, r4
    1fc0:	4934      	ldr	r1, [pc, #208]	; (2094 <option+0x170>)
    1fc2:	f7ff f906 	bl	11d2 <__pi_memcpy>
    1fc6:	e7ed      	b.n	1fa4 <option+0x80>
				memset (&rxstat, 0, 
    1fc8:	4832      	ldr	r0, [pc, #200]	; (2094 <option+0x170>)
    1fca:	f7ff f90c 	bl	11e6 <__pi_memset>
    1fce:	e7e9      	b.n	1fa4 <option+0x80>
			if (val == NULL)
    1fd0:	b941      	cbnz	r1, 1fe4 <option+0xc0>
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    1fd2:	f7ff fafb 	bl	15cc <lrnd>
    1fd6:	f3c0 4105 	ubfx	r1, r0, #16, #6
    1fda:	3102      	adds	r1, #2
				utimer_set (bckf_timer, *val);
    1fdc:	482e      	ldr	r0, [pc, #184]	; (2098 <option+0x174>)
    1fde:	f7ff f801 	bl	fe4 <__pi_utimer_set>
    1fe2:	e7bf      	b.n	1f64 <option+0x40>
    1fe4:	8809      	ldrh	r1, [r1, #0]
    1fe6:	e7f9      	b.n	1fdc <option+0xb8>
			for (ret = 0; ret < 8; ret++)
    1fe8:	2000      	movs	r0, #0
				if (RF_cmdPropRadioDivSetup.txPower
    1fea:	4b2c      	ldr	r3, [pc, #176]	; (209c <option+0x178>)
    1fec:	8b5a      	ldrh	r2, [r3, #26]
    1fee:	4b2c      	ldr	r3, [pc, #176]	; (20a0 <option+0x17c>)
					== patable [ret])
    1ff0:	f833 1b02 	ldrh.w	r1, [r3], #2
				if (RF_cmdPropRadioDivSetup.txPower
    1ff4:	428a      	cmp	r2, r1
    1ff6:	d0d9      	beq.n	1fac <option+0x88>
			for (ret = 0; ret < 8; ret++)
    1ff8:	3001      	adds	r0, #1
    1ffa:	2808      	cmp	r0, #8
    1ffc:	d1f8      	bne.n	1ff0 <option+0xcc>
    1ffe:	e7d5      	b.n	1fac <option+0x88>
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2000:	b119      	cbz	r1, 200a <option+0xe6>
				(*val > 7) ? 7 : *val;
    2002:	8808      	ldrh	r0, [r1, #0]
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2004:	2807      	cmp	r0, #7
    2006:	bf28      	it	cs
    2008:	2007      	movcs	r0, #7
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    200a:	4b25      	ldr	r3, [pc, #148]	; (20a0 <option+0x17c>)
    200c:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    2010:	4b22      	ldr	r3, [pc, #136]	; (209c <option+0x178>)
    2012:	835a      	strh	r2, [r3, #26]
			_BIS (dstate, DSTATE_IRST);
    2014:	4a1a      	ldr	r2, [pc, #104]	; (2080 <option+0x15c>)
    2016:	7813      	ldrb	r3, [r2, #0]
    2018:	f063 037f 	orn	r3, r3, #127	; 0x7f
    201c:	7013      	strb	r3, [r2, #0]
			goto OREvnt;
    201e:	e7a2      	b.n	1f66 <option+0x42>
			ret = (int) channel;
    2020:	4b20      	ldr	r3, [pc, #128]	; (20a4 <option+0x180>)
			ret = (int) vrate;
    2022:	7818      	ldrb	r0, [r3, #0]
			goto RVal;
    2024:	e7c2      	b.n	1fac <option+0x88>
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2026:	b121      	cbz	r1, 2032 <option+0x10e>
				(*val > 7) ? 7 : *val;
    2028:	880c      	ldrh	r4, [r1, #0]
    202a:	2c07      	cmp	r4, #7
    202c:	bf28      	it	cs
    202e:	2407      	movcs	r4, #7
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2030:	b2e4      	uxtb	r4, r4
    2032:	4b1c      	ldr	r3, [pc, #112]	; (20a4 <option+0x180>)
    2034:	701c      	strb	r4, [r3, #0]
			plugch ();
    2036:	f7ff ff65 	bl	1f04 <plugch>
			_BIS (dstate, DSTATE_IRST);
    203a:	4a11      	ldr	r2, [pc, #68]	; (2080 <option+0x15c>)
    203c:	7813      	ldrb	r3, [r2, #0]
    203e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2042:	e78e      	b.n	1f62 <option+0x3e>
			ret = (int) vrate;
    2044:	4b18      	ldr	r3, [pc, #96]	; (20a8 <option+0x184>)
    2046:	e7ec      	b.n	2022 <option+0xfe>
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2048:	b139      	cbz	r1, 205a <option+0x136>
				(*val > 3) ? 3 : (*val < 1) ? 1 : *val;
    204a:	880b      	ldrh	r3, [r1, #0]
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    204c:	2b03      	cmp	r3, #3
    204e:	d806      	bhi.n	205e <option+0x13a>
    2050:	b13b      	cbz	r3, 2062 <option+0x13e>
    2052:	b2db      	uxtb	r3, r3
    2054:	4a14      	ldr	r2, [pc, #80]	; (20a8 <option+0x184>)
    2056:	7013      	strb	r3, [r2, #0]
    2058:	e7ed      	b.n	2036 <option+0x112>
    205a:	2302      	movs	r3, #2
    205c:	e7fa      	b.n	2054 <option+0x130>
    205e:	2303      	movs	r3, #3
    2060:	e7f8      	b.n	2054 <option+0x130>
    2062:	2301      	movs	r3, #1
    2064:	e7f6      	b.n	2054 <option+0x130>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2066:	b119      	cbz	r1, 2070 <option+0x14c>
    2068:	880b      	ldrh	r3, [r1, #0]
    206a:	4a10      	ldr	r2, [pc, #64]	; (20ac <option+0x188>)
    206c:	8013      	strh	r3, [r2, #0]
			goto RRet;
    206e:	e799      	b.n	1fa4 <option+0x80>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2070:	f44f 7380 	mov.w	r3, #256	; 0x100
    2074:	e7f9      	b.n	206a <option+0x146>
			syserror (EREQPAR, "cc13 op");
    2076:	2003      	movs	r0, #3
    2078:	490d      	ldr	r1, [pc, #52]	; (20b0 <option+0x18c>)
    207a:	f7fe f9f9 	bl	470 <__pi_syserror>
    207e:	bf00      	nop
    2080:	20000194 	mulcs	r0, r4, r1
    2084:	20000190 	mulcs	r0, r0, r1
    2088:	200001a0 	andcs	r0, r0, r0, lsr #3
    208c:	200001c4 	andcs	r0, r0, r4, asr #3
    2090:	200001a4 	andcs	r0, r0, r4, lsr #3
    2094:	200001b8 			; <UNDEFINED> instruction: 0x200001b8
    2098:	2000018a 	andcs	r0, r0, sl, lsl #3
    209c:	20000054 	andcs	r0, r0, r4, asr r0
    20a0:	000043be 			; <UNDEFINED> instruction: 0x000043be
    20a4:	2000018c 	andcs	r0, r0, ip, lsl #3
    20a8:	2000003a 	andcs	r0, r0, sl, lsr r0
    20ac:	20000038 	andcs	r0, r0, r8, lsr r0
    20b0:	0000435a 	andeq	r4, r0, sl, asr r3

000020b4 <issue_cmd>:
static void issue_cmd (lword cmd) {
    20b4:	b538      	push	{r3, r4, r5, lr}
    20b6:	4604      	mov	r4, r0
    20b8:	4d0c      	ldr	r5, [pc, #48]	; (20ec <issue_cmd+0x38>)
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20ba:	4620      	mov	r0, r4
    20bc:	f001 f8a4 	bl	3208 <NOROM_RFCDoorbellSendTo>
    20c0:	b2c2      	uxtb	r2, r0
    20c2:	2a01      	cmp	r2, #1
    20c4:	d011      	beq.n	20ea <issue_cmd+0x36>
		if (res != 0x86)
    20c6:	2a86      	cmp	r2, #134	; 0x86
    20c8:	d003      	beq.n	20d2 <issue_cmd+0x1e>
			syserror (EHARDWARE, "rt1");
    20ca:	4909      	ldr	r1, [pc, #36]	; (20f0 <issue_cmd+0x3c>)
			syserror (EHARDWARE, "hang ic0");
    20cc:	2008      	movs	r0, #8
    20ce:	f7fe f9cf 	bl	470 <__pi_syserror>
		if (cnt-- == 0) {
    20d2:	3d01      	subs	r5, #1
    20d4:	d105      	bne.n	20e2 <issue_cmd+0x2e>
			diag ("HUP %lx %lx", cmd, res);
    20d6:	4621      	mov	r1, r4
    20d8:	4806      	ldr	r0, [pc, #24]	; (20f4 <issue_cmd+0x40>)
    20da:	f7ff f9d9 	bl	1490 <diag>
			syserror (EHARDWARE, "hang ic0");
    20de:	4906      	ldr	r1, [pc, #24]	; (20f8 <issue_cmd+0x44>)
    20e0:	e7f4      	b.n	20cc <issue_cmd+0x18>
		udelay (1);
    20e2:	2001      	movs	r0, #1
    20e4:	f7fe f95a 	bl	39c <udelay>
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20e8:	e7e7      	b.n	20ba <issue_cmd+0x6>
}
    20ea:	bd38      	pop	{r3, r4, r5, pc}
    20ec:	00015f91 	muleq	r1, r1, pc	; <UNPREDICTABLE>
    20f0:	00004362 	andeq	r4, r0, r2, ror #6
    20f4:	00004366 	andeq	r4, r0, r6, ror #6
    20f8:	00004372 	andeq	r4, r0, r2, ror r3

000020fc <rx_de>:
static void rx_de () {
    20fc:	b510      	push	{r4, lr}
	if ((dstate & DSTATE_RXAC) == 0)
    20fe:	4c06      	ldr	r4, [pc, #24]	; (2118 <rx_de+0x1c>)
    2100:	7823      	ldrb	r3, [r4, #0]
    2102:	079b      	lsls	r3, r3, #30
    2104:	d506      	bpl.n	2114 <rx_de+0x18>
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2106:	4805      	ldr	r0, [pc, #20]	; (211c <rx_de+0x20>)
    2108:	f7ff ffd4 	bl	20b4 <issue_cmd>
	_BIC (dstate, DSTATE_RXAC);
    210c:	7823      	ldrb	r3, [r4, #0]
    210e:	f023 0302 	bic.w	r3, r3, #2
    2112:	7023      	strb	r3, [r4, #0]
}
    2114:	bd10      	pop	{r4, pc}
    2116:	bf00      	nop
    2118:	20000194 	mulcs	r0, r4, r1
    211c:	04010001 	streq	r0, [r1], #-1

00002120 <rf_off>:
static void rf_off () {
    2120:	b538      	push	{r3, r4, r5, lr}
	if ((dstate & DSTATE_RFON) == 0)
    2122:	4c11      	ldr	r4, [pc, #68]	; (2168 <rf_off+0x48>)
    2124:	7823      	ldrb	r3, [r4, #0]
    2126:	06db      	lsls	r3, r3, #27
    2128:	d51d      	bpl.n	2166 <rf_off+0x46>
RFCClockDisable(void)
{
    //
    // Disable all clocks
    //
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    212a:	2500      	movs	r5, #0
	IntDisable (INT_RFC_CPE_0);
    212c:	4b0f      	ldr	r3, [pc, #60]	; (216c <rf_off+0x4c>)
    212e:	2019      	movs	r0, #25
    2130:	681b      	ldr	r3, [r3, #0]
    2132:	695b      	ldr	r3, [r3, #20]
    2134:	4798      	blx	r3
	RFCAdi3VcoLdoVoltageMode (false);
    2136:	2000      	movs	r0, #0
    2138:	f001 f9e4 	bl	3504 <NOROM_RFCAdi3VcoLdoVoltageMode>
	RFCSynthPowerDown ();
    213c:	f001 f878 	bl	3230 <NOROM_RFCSynthPowerDown>
    2140:	4b0b      	ldr	r3, [pc, #44]	; (2170 <rf_off+0x50>)
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2142:	2001      	movs	r0, #1
    2144:	601d      	str	r5, [r3, #0]
    2146:	f7fe f973 	bl	430 <__pi_offdomain>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    214a:	4b0a      	ldr	r3, [pc, #40]	; (2174 <rf_off+0x54>)
    214c:	601d      	str	r5, [r3, #0]
	OSCHF_SwitchToRcOscTurnOffXosc ();
    214e:	f001 f841 	bl	31d4 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2152:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2156:	4b08      	ldr	r3, [pc, #32]	; (2178 <rf_off+0x58>)
    2158:	601a      	str	r2, [r3, #0]
    215a:	2202      	movs	r2, #2
    215c:	601a      	str	r2, [r3, #0]
	_BIC (dstate, DSTATE_RFON);
    215e:	7823      	ldrb	r3, [r4, #0]
    2160:	f023 0310 	bic.w	r3, r3, #16
    2164:	7023      	strb	r3, [r4, #0]
}
    2166:	bd38      	pop	{r3, r4, r5, pc}
    2168:	20000194 	mulcs	r0, r4, r1
    216c:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    2170:	60040000 	andvs	r0, r4, r0
    2174:	43240004 			; <UNDEFINED> instruction: 0x43240004
    2178:	400220a0 	andmi	r2, r2, r0, lsr #1

0000217c <wait_cmd.constprop.0>:
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    217c:	b570      	push	{r4, r5, r6, lr}
    217e:	4604      	mov	r4, r0
    2180:	460d      	mov	r5, r1
    2182:	f242 7611 	movw	r6, #10001	; 0x2711
		if (cmd->status == tstat)
    2186:	8862      	ldrh	r2, [r4, #2]
    2188:	42aa      	cmp	r2, r5
    218a:	d00e      	beq.n	21aa <wait_cmd.constprop.0+0x2e>
		if (timeout-- == 0) {
    218c:	3e01      	subs	r6, #1
    218e:	d108      	bne.n	21a2 <wait_cmd.constprop.0+0x26>
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2190:	8821      	ldrh	r1, [r4, #0]
    2192:	4806      	ldr	r0, [pc, #24]	; (21ac <wait_cmd.constprop.0+0x30>)
    2194:	462b      	mov	r3, r5
    2196:	f7ff f97b 	bl	1490 <diag>
			syserror (EHARDWARE, "rt2");
    219a:	2008      	movs	r0, #8
    219c:	4904      	ldr	r1, [pc, #16]	; (21b0 <wait_cmd.constprop.0+0x34>)
    219e:	f7fe f967 	bl	470 <__pi_syserror>
		udelay (1);
    21a2:	2001      	movs	r0, #1
    21a4:	f7fe f8fa 	bl	39c <udelay>
		if (cmd->status == tstat)
    21a8:	e7ed      	b.n	2186 <wait_cmd.constprop.0+0xa>
}
    21aa:	bd70      	pop	{r4, r5, r6, pc}
    21ac:	0000437b 	andeq	r4, r0, fp, ror r3
    21b0:	0000438b 	andeq	r4, r0, fp, lsl #7

000021b4 <rf_on.part.0>:
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    21b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    21b8:	4b46      	ldr	r3, [pc, #280]	; (22d4 <rf_on.part.0+0x120>)
static void rf_on () {
    21ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    21be:	601a      	str	r2, [r3, #0]
    21c0:	2202      	movs	r2, #2
    21c2:	601a      	str	r2, [r3, #0]
	OSCHF_TurnOnXosc();
    21c4:	f000 ffca 	bl	315c <NOROM_OSCHF_TurnOnXosc>
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    21c8:	200a      	movs	r0, #10
    21ca:	f7fe f8e7 	bl	39c <udelay>
    21ce:	f000 ffd1 	bl	3174 <NOROM_OSCHF_AttemptToSwitchToXosc>
    21d2:	2800      	cmp	r0, #0
    21d4:	d0f8      	beq.n	21c8 <rf_on.part.0+0x14>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21d6:	2401      	movs	r4, #1
    21d8:	4b3f      	ldr	r3, [pc, #252]	; (22d8 <rf_on.part.0+0x124>)
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21da:	4620      	mov	r0, r4
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21dc:	601c      	str	r4, [r3, #0]
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21de:	f7fe f909 	bl	3f4 <__pi_ondomain>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    21e2:	f240 72ff 	movw	r2, #2047	; 0x7ff
    21e6:	4b3d      	ldr	r3, [pc, #244]	; (22dc <rf_on.part.0+0x128>)
	issue_cmd (
    21e8:	483d      	ldr	r0, [pc, #244]	; (22e0 <rf_on.part.0+0x12c>)
    21ea:	601a      	str	r2, [r3, #0]
    21ec:	f7ff ff62 	bl	20b4 <issue_cmd>
PATCH_FUN_SPEC void enterGenfskCpePatch(void)
{
   uint32_t *pPatchVec = (uint32_t *) (_GENFSK_CPERAM_START + _GENFSK_PATCH_VEC_OFFSET);

#if (_NWORD_PATCHIMAGE_GENFSK > 0)
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    21f0:	f44f 7223 	mov.w	r2, #652	; 0x28c
    21f4:	493b      	ldr	r1, [pc, #236]	; (22e4 <rf_on.part.0+0x130>)
    21f6:	483c      	ldr	r0, [pc, #240]	; (22e8 <rf_on.part.0+0x134>)
    21f8:	f001 ff06 	bl	4008 <memcpy>
{
   uint8_t *pPatchTab = (uint8_t *) (_GENFSK_CPERAM_START + _GENFSK_PATCH_TAB_OFFSET);
   uint32_t *pIrqPatch = (uint32_t *) (_GENFSK_CPERAM_START + _GENFSK_IRQPATCH_OFFSET);


   pPatchTab[80] = 0;
    21fc:	2200      	movs	r2, #0
    21fe:	4b3b      	ldr	r3, [pc, #236]	; (22ec <rf_on.part.0+0x138>)
      *pD++ = t4;
      *pD++ = t5;
      *pD++ = t6;
      *pD++ = t7;
      *pD++ = t8;
   } while (--nIterations);
    2200:	493b      	ldr	r1, [pc, #236]	; (22f0 <rf_on.part.0+0x13c>)
    2202:	701a      	strb	r2, [r3, #0]
   pPatchTab[57] = 1;
   pPatchTab[53] = 2;
    2204:	2202      	movs	r2, #2
    2206:	f803 2c1b 	strb.w	r2, [r3, #-27]
   pPatchTab[55] = 3;
    220a:	2203      	movs	r2, #3
    220c:	f803 2c19 	strb.w	r2, [r3, #-25]
   pPatchTab[110] = 4;
    2210:	2204      	movs	r2, #4
    2212:	779a      	strb	r2, [r3, #30]
   pPatchTab[107] = 5;
    2214:	2205      	movs	r2, #5
    2216:	76da      	strb	r2, [r3, #27]
   pPatchTab[65] = 6;
    2218:	2206      	movs	r2, #6
    221a:	f803 2c0f 	strb.w	r2, [r3, #-15]

   pIrqPatch[1] = _IRQ_PATCH_0;
    221e:	4a35      	ldr	r2, [pc, #212]	; (22f4 <rf_on.part.0+0x140>)
   pPatchTab[57] = 1;
    2220:	f803 4c17 	strb.w	r4, [r3, #-23]
   pIrqPatch[1] = _IRQ_PATCH_0;
    2224:	631a      	str	r2, [r3, #48]	; 0x30
   volatile unsigned long *pD = &HWREG(RFC_RFERAM_BASE);
    2226:	4b34      	ldr	r3, [pc, #208]	; (22f8 <rf_on.part.0+0x144>)
   const uint32_t *pS = patchGenfskRfe;
    2228:	4a34      	ldr	r2, [pc, #208]	; (22fc <rf_on.part.0+0x148>)
      t7 = *pS++;
    222a:	6990      	ldr	r0, [r2, #24]
      t2 = *pS++;
    222c:	e9d2 8e00 	ldrd	r8, lr, [r2]
      t4 = *pS++;
    2230:	e9d2 c702 	ldrd	ip, r7, [r2, #8]
      t6 = *pS++;
    2234:	e9d2 6504 	ldrd	r6, r5, [r2, #16]
      t8 = *pS++;
    2238:	69d4      	ldr	r4, [r2, #28]
      *pD++ = t1;
    223a:	f8c3 8000 	str.w	r8, [r3]
      *pD++ = t2;
    223e:	f8c3 e004 	str.w	lr, [r3, #4]
      *pD++ = t3;
    2242:	f8c3 c008 	str.w	ip, [r3, #8]
      *pD++ = t4;
    2246:	60df      	str	r7, [r3, #12]
      *pD++ = t5;
    2248:	611e      	str	r6, [r3, #16]
      *pD++ = t6;
    224a:	615d      	str	r5, [r3, #20]
      *pD++ = t7;
    224c:	6198      	str	r0, [r3, #24]
    224e:	4618      	mov	r0, r3
   } while (--nIterations);
    2250:	4288      	cmp	r0, r1
    2252:	f102 0220 	add.w	r2, r2, #32
      *pD++ = t8;
    2256:	f103 0320 	add.w	r3, r3, #32
    225a:	61c4      	str	r4, [r0, #28]
   } while (--nIterations);
    225c:	d1e5      	bne.n	222a <rf_on.part.0+0x76>
   t1 = *pS++;
   t2 = *pS++;
   t3 = *pS++;
   t4 = *pS++;
   t5 = *pS++;
   *pD++ = t1;
    225e:	4b28      	ldr	r3, [pc, #160]	; (2300 <rf_on.part.0+0x14c>)
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2260:	4828      	ldr	r0, [pc, #160]	; (2304 <rf_on.part.0+0x150>)
    2262:	620b      	str	r3, [r1, #32]
   *pD++ = t2;
    2264:	4b28      	ldr	r3, [pc, #160]	; (2308 <rf_on.part.0+0x154>)
    2266:	624b      	str	r3, [r1, #36]	; 0x24
   *pD++ = t3;
    2268:	4b28      	ldr	r3, [pc, #160]	; (230c <rf_on.part.0+0x158>)
    226a:	628b      	str	r3, [r1, #40]	; 0x28
   *pD++ = t4;
    226c:	4b28      	ldr	r3, [pc, #160]	; (2310 <rf_on.part.0+0x15c>)
    226e:	62cb      	str	r3, [r1, #44]	; 0x2c
   *pD++ = t5;
    2270:	4b28      	ldr	r3, [pc, #160]	; (2314 <rf_on.part.0+0x160>)
    2272:	630b      	str	r3, [r1, #48]	; 0x30
    2274:	f7ff ff1e 	bl	20b4 <issue_cmd>
	RFCAdi3VcoLdoVoltageMode (true);
    2278:	2001      	movs	r0, #1
    227a:	f001 f943 	bl	3504 <NOROM_RFCAdi3VcoLdoVoltageMode>
       	RFCRfTrimSet (&rfTrim);
    227e:	4826      	ldr	r0, [pc, #152]	; (2318 <rf_on.part.0+0x164>)
    2280:	f001 f930 	bl	34e4 <NOROM_RFCRfTrimSet>
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2284:	4825      	ldr	r0, [pc, #148]	; (231c <rf_on.part.0+0x168>)
    2286:	f7ff ff15 	bl	20b4 <issue_cmd>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    228a:	f44f 5150 	mov.w	r1, #13312	; 0x3400
    228e:	4823      	ldr	r0, [pc, #140]	; (231c <rf_on.part.0+0x168>)
    2290:	f7ff ff74 	bl	217c <wait_cmd.constprop.0>
	issue_cmd ((lword)&cmd_srt);
    2294:	4822      	ldr	r0, [pc, #136]	; (2320 <rf_on.part.0+0x16c>)
    2296:	f7ff ff0d 	bl	20b4 <issue_cmd>
	issue_cmd ((lword)&RF_cmdFs);
    229a:	4822      	ldr	r0, [pc, #136]	; (2324 <rf_on.part.0+0x170>)
    229c:	f7ff ff0a 	bl	20b4 <issue_cmd>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    22a0:	4820      	ldr	r0, [pc, #128]	; (2324 <rf_on.part.0+0x170>)
    22a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
    22a6:	f7ff ff69 	bl	217c <wait_cmd.constprop.0>
	_BIC (dstate, DSTATE_IRST);
    22aa:	4a1f      	ldr	r2, [pc, #124]	; (2328 <rf_on.part.0+0x174>)
	IntEnable (INT_RFC_CPE_0);
    22ac:	2019      	movs	r0, #25
	_BIC (dstate, DSTATE_IRST);
    22ae:	7813      	ldrb	r3, [r2, #0]
    22b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    22b4:	f043 0310 	orr.w	r3, r3, #16
    22b8:	7013      	strb	r3, [r2, #0]
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22ba:	2300      	movs	r3, #0
    22bc:	4a1b      	ldr	r2, [pc, #108]	; (232c <rf_on.part.0+0x178>)
    22be:	6013      	str	r3, [r2, #0]
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22c0:	f842 3c04 	str.w	r3, [r2, #-4]
	IntEnable (INT_RFC_CPE_0);
    22c4:	4b1a      	ldr	r3, [pc, #104]	; (2330 <rf_on.part.0+0x17c>)
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22c6:	3a04      	subs	r2, #4
	IntEnable (INT_RFC_CPE_0);
    22c8:	681b      	ldr	r3, [r3, #0]
}
    22ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	IntEnable (INT_RFC_CPE_0);
    22ce:	691b      	ldr	r3, [r3, #16]
    22d0:	4718      	bx	r3
    22d2:	bf00      	nop
    22d4:	40022090 	mulmi	r2, r0, r0
    22d8:	43240004 			; <UNDEFINED> instruction: 0x43240004
    22dc:	60040000 	andvs	r0, r4, r0
    22e0:	06070051 			; <UNDEFINED> instruction: 0x06070051
    22e4:	00004a84 	andeq	r4, r0, r4, lsl #21
    22e8:	2100041c 	tstcs	r0, ip, lsl r4
    22ec:	21000390 			; <UNDEFINED> instruction: 0x21000390
    22f0:	2100c680 	smlabbcs	r0, r0, r6, ip
    22f4:	210005bd 			; <UNDEFINED> instruction: 0x210005bd
    22f8:	2100c000 	mrscs	ip, (UNDEF: 0)
    22fc:	000043d0 	ldrdeq	r4, [r0], -r0
    2300:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    2304:	06070001 	streq	r0, [r7], -r1
    2308:	1a101020 	bne	406390 <__ccfg+0x3e63e8>
    230c:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    2310:	16121611 			; <UNDEFINED> instruction: 0x16121611
    2314:	70006b54 	andvc	r6, r0, r4, asr fp
    2318:	200001a8 	andcs	r0, r0, r8, lsr #3
    231c:	20000054 	andcs	r0, r0, r4, asr r0
    2320:	20000024 	andcs	r0, r0, r4, lsr #32
    2324:	2000003c 	andcs	r0, r0, ip, lsr r0
    2328:	20000194 	mulcs	r0, r4, r1
    232c:	40041014 	andmi	r1, r4, r4, lsl r0
    2330:	100001b0 			; <UNDEFINED> instruction: 0x100001b0

00002334 <rx_int_enable>:
static void rx_int_enable () {
    2334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
RFCCpe0IntEnable(uint32_t ui32Mask)
{
  //
  // Multiplex RF Core interrupts to CPE0 IRQ.
  //
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2338:	4a2a      	ldr	r2, [pc, #168]	; (23e4 <rx_int_enable+0xb0>)
    233a:	6813      	ldr	r3, [r2, #0]
    233c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    2340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    2344:	6013      	str	r3, [r2, #0]
  do
  {
    //
    // Clear any pending interrupts.
    //
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2346:	2200      	movs	r2, #0
    2348:	4b27      	ldr	r3, [pc, #156]	; (23e8 <rx_int_enable+0xb4>)
    234a:	601a      	str	r2, [r3, #0]
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    234c:	681d      	ldr	r5, [r3, #0]
    234e:	2d00      	cmp	r5, #0
    2350:	d1fb      	bne.n	234a <rx_int_enable+0x16>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2352:	2602      	movs	r6, #2

  //
  //  Enable the masked interrupts
  //
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2354:	4a25      	ldr	r2, [pc, #148]	; (23ec <rx_int_enable+0xb8>)
				diag ("BAD RX");
    2356:	4f26      	ldr	r7, [pc, #152]	; (23f0 <rx_int_enable+0xbc>)
    2358:	6813      	ldr	r3, [r2, #0]
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    235a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 23fc <rx_int_enable+0xc8>
    235e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2366:	6013      	str	r3, [r2, #0]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2368:	4b22      	ldr	r3, [pc, #136]	; (23f4 <rx_int_enable+0xc0>)
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    236a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 2400 <rx_int_enable+0xcc>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    236e:	69db      	ldr	r3, [r3, #28]
    2370:	681c      	ldr	r4, [r3, #0]
		if (db->status == DATA_ENTRY_FINISHED) {
    2372:	7923      	ldrb	r3, [r4, #4]
    2374:	2b03      	cmp	r3, #3
    2376:	d11e      	bne.n	23b6 <rx_int_enable+0x82>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2378:	7a63      	ldrb	r3, [r4, #9]
    237a:	7a21      	ldrb	r1, [r4, #8]
    237c:	1cda      	adds	r2, r3, #3
    237e:	4291      	cmp	r1, r2
			nr++;
    2380:	f105 0501 	add.w	r5, r5, #1
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2384:	d11c      	bne.n	23c0 <rx_int_enable+0x8c>
    2386:	f898 2000 	ldrb.w	r2, [r8]
    238a:	429a      	cmp	r2, r3
    238c:	d318      	bcc.n	23c0 <rx_int_enable+0x8c>
    238e:	f013 0c01 	ands.w	ip, r3, #1
    2392:	d115      	bne.n	23c0 <rx_int_enable+0x8c>
				__dp [pl + 1] = __dp [pl] - 128;
    2394:	f104 0108 	add.w	r1, r4, #8
				pl = __dp [1] + 2;
    2398:	1c9a      	adds	r2, r3, #2
				__dp [pl + 1] = __dp [pl] - 128;
    239a:	5c88      	ldrb	r0, [r1, r2]
    239c:	440b      	add	r3, r1
    239e:	3880      	subs	r0, #128	; 0x80
    23a0:	70d8      	strb	r0, [r3, #3]
				__dp [pl] = 0;
    23a2:	f801 c002 	strb.w	ip, [r1, r2]
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    23a6:	f8b9 0000 	ldrh.w	r0, [r9]
    23aa:	f104 010a 	add.w	r1, r4, #10
    23ae:	f7ff fb95 	bl	1adc <tcvphy_rcv>
			db->status = DATA_ENTRY_PENDING;
    23b2:	2300      	movs	r3, #0
    23b4:	7123      	strb	r3, [r4, #4]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    23b6:	2e01      	cmp	r6, #1
    23b8:	d006      	beq.n	23c8 <rx_int_enable+0x94>
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    23ba:	2601      	movs	r6, #1
    23bc:	6824      	ldr	r4, [r4, #0]
    23be:	e7d8      	b.n	2372 <rx_int_enable+0x3e>
				diag ("BAD RX");
    23c0:	4638      	mov	r0, r7
    23c2:	f7ff f865 	bl	1490 <diag>
    23c6:	e7f4      	b.n	23b2 <rx_int_enable+0x7e>
	if (nr) {
    23c8:	b14d      	cbz	r5, 23de <rx_int_enable+0xaa>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23ca:	f7ff f8ff 	bl	15cc <lrnd>
}
    23ce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23d2:	f3c0 4102 	ubfx	r1, r0, #16, #3
    23d6:	3102      	adds	r1, #2
    23d8:	4807      	ldr	r0, [pc, #28]	; (23f8 <rx_int_enable+0xc4>)
    23da:	f7fe be03 	b.w	fe4 <__pi_utimer_set>
}
    23de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    23e2:	bf00      	nop
    23e4:	40041018 	andmi	r1, r4, r8, lsl r0
    23e8:	40041010 	andmi	r1, r4, r0, lsl r0
    23ec:	40041014 	andmi	r1, r4, r4, lsl r0
    23f0:	0000438f 	andeq	r4, r0, pc, lsl #7
    23f4:	2000007c 	andcs	r0, r0, ip, ror r0
    23f8:	2000018a 	andcs	r0, r0, sl, lsl #3
    23fc:	200001a4 	andcs	r0, r0, r4, lsr #3
    2400:	2000019c 	mulcs	r0, ip, r1

00002404 <cc1350_driver>:
thread (cc1350_driver)
    2404:	2801      	cmp	r0, #1
    2406:	b570      	push	{r4, r5, r6, lr}
    2408:	f000 808b 	beq.w	2522 <cc1350_driver+0x11e>
    240c:	2802      	cmp	r0, #2
    240e:	f000 80bd 	beq.w	258c <cc1350_driver+0x188>
    2412:	2800      	cmp	r0, #0
    2414:	f040 80ce 	bne.w	25b4 <cc1350_driver+0x1b0>
		if (dstate & DSTATE_IRST) {
    2418:	4c68      	ldr	r4, [pc, #416]	; (25bc <cc1350_driver+0x1b8>)
    241a:	f994 3000 	ldrsb.w	r3, [r4]
    241e:	2b00      	cmp	r3, #0
    2420:	da05      	bge.n	242e <cc1350_driver+0x2a>
			rf_off ();
    2422:	f7ff fe7d 	bl	2120 <rf_off>
			_BIC (dstate,
    2426:	7823      	ldrb	r3, [r4, #0]
    2428:	f003 0369 	and.w	r3, r3, #105	; 0x69
    242c:	7023      	strb	r3, [r4, #0]
		if (dstate & DSTATE_RXAC) {
    242e:	7823      	ldrb	r3, [r4, #0]
    2430:	0798      	lsls	r0, r3, #30
    2432:	f003 0201 	and.w	r2, r3, #1
    2436:	d51e      	bpl.n	2476 <cc1350_driver+0x72>
			if ((dstate & DSTATE_RXON) == 0)
    2438:	b90a      	cbnz	r2, 243e <cc1350_driver+0x3a>
				rx_de ();
    243a:	f7ff fe5f 	bl	20fc <rx_de>
		if (paylen == 0) {
    243e:	4d60      	ldr	r5, [pc, #384]	; (25c0 <cc1350_driver+0x1bc>)
    2440:	4e60      	ldr	r6, [pc, #384]	; (25c4 <cc1350_driver+0x1c0>)
    2442:	682b      	ldr	r3, [r5, #0]
    2444:	2b00      	cmp	r3, #0
    2446:	d14c      	bne.n	24e2 <cc1350_driver+0xde>
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2448:	4b5f      	ldr	r3, [pc, #380]	; (25c8 <cc1350_driver+0x1c4>)
    244a:	4629      	mov	r1, r5
    244c:	8818      	ldrh	r0, [r3, #0]
    244e:	f7ff fb93 	bl	1b78 <tcvphy_get>
    2452:	6170      	str	r0, [r6, #20]
    2454:	2800      	cmp	r0, #0
    2456:	d02f      	beq.n	24b8 <cc1350_driver+0xb4>
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2458:	4a5c      	ldr	r2, [pc, #368]	; (25cc <cc1350_driver+0x1c8>)
				paylen -= 2;
    245a:	682b      	ldr	r3, [r5, #0]
				sysassert (paylen <= rbuffl && paylen > 0 &&
    245c:	7812      	ldrb	r2, [r2, #0]
				paylen -= 2;
    245e:	3b02      	subs	r3, #2
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2460:	4293      	cmp	r3, r2
				paylen -= 2;
    2462:	602b      	str	r3, [r5, #0]
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2464:	dc03      	bgt.n	246e <cc1350_driver+0x6a>
    2466:	2b00      	cmp	r3, #0
    2468:	dd01      	ble.n	246e <cc1350_driver+0x6a>
    246a:	07db      	lsls	r3, r3, #31
    246c:	d51b      	bpl.n	24a6 <cc1350_driver+0xa2>
    246e:	200a      	movs	r0, #10
    2470:	4957      	ldr	r1, [pc, #348]	; (25d0 <cc1350_driver+0x1cc>)
    2472:	f7fd fffd 	bl	470 <__pi_syserror>
		} else if (dstate & DSTATE_RXON) {
    2476:	2a00      	cmp	r2, #0
    2478:	d0e1      	beq.n	243e <cc1350_driver+0x3a>
	if (dstate & DSTATE_RFON)
    247a:	06d9      	lsls	r1, r3, #27
    247c:	d50d      	bpl.n	249a <cc1350_driver+0x96>
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    247e:	4855      	ldr	r0, [pc, #340]	; (25d4 <cc1350_driver+0x1d0>)
    2480:	69c3      	ldr	r3, [r0, #28]
    2482:	681a      	ldr	r2, [r3, #0]
		re->status = DATA_ENTRY_PENDING;
    2484:	2300      	movs	r3, #0
    2486:	7113      	strb	r3, [r2, #4]
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2488:	6812      	ldr	r2, [r2, #0]
		re->status = DATA_ENTRY_PENDING;
    248a:	7113      	strb	r3, [r2, #4]
	issue_cmd ((lword)&RF_cmdPropRx);
    248c:	f7ff fe12 	bl	20b4 <issue_cmd>
	_BIS (dstate, DSTATE_RXAC);
    2490:	7823      	ldrb	r3, [r4, #0]
    2492:	f043 0302 	orr.w	r3, r3, #2
    2496:	7023      	strb	r3, [r4, #0]
    2498:	e7d1      	b.n	243e <cc1350_driver+0x3a>
    249a:	f7ff fe8b 	bl	21b4 <rf_on.part.0>
	if (dstate & DSTATE_RXAC)
    249e:	7823      	ldrb	r3, [r4, #0]
    24a0:	079a      	lsls	r2, r3, #30
    24a2:	d5ec      	bpl.n	247e <cc1350_driver+0x7a>
    24a4:	e7cb      	b.n	243e <cc1350_driver+0x3a>
				if (statid != 0xffff)
    24a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    24aa:	4b4b      	ldr	r3, [pc, #300]	; (25d8 <cc1350_driver+0x1d4>)
    24ac:	881b      	ldrh	r3, [r3, #0]
    24ae:	4293      	cmp	r3, r2
					((address)(RF_cmdPropTx.pPkt)) [0] =
    24b0:	bf18      	it	ne
    24b2:	8003      	strhne	r3, [r0, #0]
				RF_cmdPropTx.pktLen = (byte) paylen;
    24b4:	682b      	ldr	r3, [r5, #0]
    24b6:	73f3      	strb	r3, [r6, #15]
		if (paylen == 0) {
    24b8:	6829      	ldr	r1, [r5, #0]
    24ba:	b991      	cbnz	r1, 24e2 <cc1350_driver+0xde>
			wait (qevent, DR_LOOP);
    24bc:	4b47      	ldr	r3, [pc, #284]	; (25dc <cc1350_driver+0x1d8>)
    24be:	6818      	ldr	r0, [r3, #0]
    24c0:	f7fe fe04 	bl	10cc <__pi_wait>
			if (dstate & DSTATE_RXAC) {
    24c4:	7823      	ldrb	r3, [r4, #0]
    24c6:	079d      	lsls	r5, r3, #30
    24c8:	d503      	bpl.n	24d2 <cc1350_driver+0xce>
				rx_int_enable ();
    24ca:	f7ff ff33 	bl	2334 <rx_int_enable>
			release;
    24ce:	f7fe fb8d 	bl	bec <__pi_release>
			} else if (dstate & DSTATE_RFON) {
    24d2:	06dc      	lsls	r4, r3, #27
    24d4:	d5fb      	bpl.n	24ce <cc1350_driver+0xca>
				delay (offdelay, DR_GOOF);
    24d6:	2102      	movs	r1, #2
    24d8:	4b41      	ldr	r3, [pc, #260]	; (25e0 <cc1350_driver+0x1dc>)
    24da:	8818      	ldrh	r0, [r3, #0]
    24dc:	f7fe fe3c 	bl	1158 <delay>
    24e0:	e7f5      	b.n	24ce <cc1350_driver+0xca>
		if (bckf_timer) {
    24e2:	4d40      	ldr	r5, [pc, #256]	; (25e4 <cc1350_driver+0x1e0>)
    24e4:	882b      	ldrh	r3, [r5, #0]
    24e6:	b163      	cbz	r3, 2502 <cc1350_driver+0xfe>
			wait (qevent, DR_LOOP);
    24e8:	4b3c      	ldr	r3, [pc, #240]	; (25dc <cc1350_driver+0x1d8>)
    24ea:	2100      	movs	r1, #0
    24ec:	6818      	ldr	r0, [r3, #0]
    24ee:	f7fe fded 	bl	10cc <__pi_wait>
			delay (bckf_timer, DR_LOOP);
    24f2:	8828      	ldrh	r0, [r5, #0]
    24f4:	2100      	movs	r1, #0
    24f6:	f7fe fe2f 	bl	1158 <delay>
			if (dstate & DSTATE_RXAC)
    24fa:	7823      	ldrb	r3, [r4, #0]
    24fc:	0798      	lsls	r0, r3, #30
    24fe:	d5e6      	bpl.n	24ce <cc1350_driver+0xca>
    2500:	e7e3      	b.n	24ca <cc1350_driver+0xc6>
	if (dstate & DSTATE_RFON)
    2502:	7823      	ldrb	r3, [r4, #0]
    2504:	06d9      	lsls	r1, r3, #27
    2506:	d401      	bmi.n	250c <cc1350_driver+0x108>
    2508:	f7ff fe54 	bl	21b4 <rf_on.part.0>
		rx_de ();
    250c:	f7ff fdf6 	bl	20fc <rx_de>
		RF_cmdPropTx . status = 0;
    2510:	2300      	movs	r3, #0
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2512:	f06f 0202 	mvn.w	r2, #2
		RF_cmdPropTx . status = 0;
    2516:	8073      	strh	r3, [r6, #2]
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2518:	4b33      	ldr	r3, [pc, #204]	; (25e8 <cc1350_driver+0x1e4>)
		issue_cmd ((lword)&cmd_cs);
    251a:	4834      	ldr	r0, [pc, #208]	; (25ec <cc1350_driver+0x1e8>)
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    251c:	601a      	str	r2, [r3, #0]
		issue_cmd ((lword)&cmd_cs);
    251e:	f7ff fdc9 	bl	20b4 <issue_cmd>
		if (dstate & DSTATE_IRST)
    2522:	4b26      	ldr	r3, [pc, #152]	; (25bc <cc1350_driver+0x1b8>)
    2524:	f993 3000 	ldrsb.w	r3, [r3]
    2528:	2b00      	cmp	r3, #0
    252a:	f6ff af75 	blt.w	2418 <cc1350_driver+0x14>
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    252e:	4b2e      	ldr	r3, [pc, #184]	; (25e8 <cc1350_driver+0x1e4>)
    2530:	681a      	ldr	r2, [r3, #0]
    2532:	0792      	lsls	r2, r2, #30
    2534:	d402      	bmi.n	253c <cc1350_driver+0x138>
			delay (1, DR_XMIT);
    2536:	2101      	movs	r1, #1
    2538:	4608      	mov	r0, r1
    253a:	e7cf      	b.n	24dc <cc1350_driver+0xd8>
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    253c:	4821      	ldr	r0, [pc, #132]	; (25c4 <cc1350_driver+0x1c0>)
    253e:	4c2c      	ldr	r4, [pc, #176]	; (25f0 <cc1350_driver+0x1ec>)
    2540:	8842      	ldrh	r2, [r0, #2]
    2542:	f5b2 5f50 	cmp.w	r2, #13312	; 0x3400
    2546:	d018      	beq.n	257a <cc1350_driver+0x176>
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2548:	7822      	ldrb	r2, [r4, #0]
    254a:	2a0f      	cmp	r2, #15
    254c:	d909      	bls.n	2562 <cc1350_driver+0x15e>
				RF_cmdPropTx . status = 0;
    254e:	2200      	movs	r2, #0
    2550:	8042      	strh	r2, [r0, #2]
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2552:	f06f 0202 	mvn.w	r2, #2
    2556:	601a      	str	r2, [r3, #0]
				issue_cmd ((lword)&RF_cmdPropTx);
    2558:	f7ff fdac 	bl	20b4 <issue_cmd>
				proceed (DR_XMIT);
    255c:	2001      	movs	r0, #1
    255e:	f7fe fdab 	bl	10b8 <proceed>
			txtries++;
    2562:	7823      	ldrb	r3, [r4, #0]
    2564:	3301      	adds	r3, #1
    2566:	7023      	strb	r3, [r4, #0]
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2568:	f7ff f830 	bl	15cc <lrnd>
    256c:	f3c0 4105 	ubfx	r1, r0, #16, #6
    2570:	3102      	adds	r1, #2
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2572:	481c      	ldr	r0, [pc, #112]	; (25e4 <cc1350_driver+0x1e0>)
    2574:	f7fe fd36 	bl	fe4 <__pi_utimer_set>
		goto DR_LOOP__;
    2578:	e74e      	b.n	2418 <cc1350_driver+0x14>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    257a:	6940      	ldr	r0, [r0, #20]
    257c:	f7ff fb36 	bl	1bec <tcvphy_end>
		paylen = 0;
    2580:	2300      	movs	r3, #0
    2582:	4a0f      	ldr	r2, [pc, #60]	; (25c0 <cc1350_driver+0x1bc>)
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2584:	2102      	movs	r1, #2
		paylen = 0;
    2586:	6013      	str	r3, [r2, #0]
		txtries = 0;
    2588:	7023      	strb	r3, [r4, #0]
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    258a:	e7f2      	b.n	2572 <cc1350_driver+0x16e>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    258c:	4b0b      	ldr	r3, [pc, #44]	; (25bc <cc1350_driver+0x1b8>)
    258e:	781a      	ldrb	r2, [r3, #0]
    2590:	f993 3000 	ldrsb.w	r3, [r3]
    2594:	2b00      	cmp	r3, #0
    2596:	f6ff af3f 	blt.w	2418 <cc1350_driver+0x14>
    259a:	07d3      	lsls	r3, r2, #31
    259c:	f53f af3c 	bmi.w	2418 <cc1350_driver+0x14>
		    tcvphy_top (physid) == NULL)
    25a0:	4b09      	ldr	r3, [pc, #36]	; (25c8 <cc1350_driver+0x1c4>)
    25a2:	8818      	ldrh	r0, [r3, #0]
    25a4:	f7ff fb08 	bl	1bb8 <tcvphy_top>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    25a8:	2800      	cmp	r0, #0
    25aa:	f47f af35 	bne.w	2418 <cc1350_driver+0x14>
			rf_off ();
    25ae:	f7ff fdb7 	bl	2120 <rf_off>
    25b2:	e731      	b.n	2418 <cc1350_driver+0x14>
endthread
    25b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    25b8:	f7fe bcf6 	b.w	fa8 <__pi_badstate>
    25bc:	20000194 	mulcs	r0, r4, r1
    25c0:	20000198 	mulcs	r0, r8, r1
    25c4:	200000a0 	andcs	r0, r0, r0, lsr #1
    25c8:	2000019c 	mulcs	r0, ip, r1
    25cc:	200001a4 	andcs	r0, r0, r4, lsr #3
    25d0:	00004396 	muleq	r0, r6, r3
    25d4:	2000007c 	andcs	r0, r0, ip, ror r0
    25d8:	200001c4 	andcs	r0, r0, r4, asr #3
    25dc:	200001a0 	andcs	r0, r0, r0, lsr #3
    25e0:	20000038 	andcs	r0, r0, r8, lsr r0
    25e4:	2000018a 	andcs	r0, r0, sl, lsl #3
    25e8:	40041010 	andmi	r1, r4, r0, lsl r0
    25ec:	20000008 	andcs	r0, r0, r8
    25f0:	200001c6 	andcs	r0, r0, r6, asr #3

000025f4 <RFCCPE0IntHandler>:
void RFCCPE0IntHandler (void) {
    25f4:	b530      	push	{r4, r5, lr}
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    25f6:	4a15      	ldr	r2, [pc, #84]	; (264c <RFCCPE0IntHandler+0x58>)
    25f8:	6813      	ldr	r3, [r2, #0]
    25fa:	2b00      	cmp	r3, #0
		_BIS (dstate, DSTATE_IRST);
    25fc:	bfbf      	itttt	lt
    25fe:	4914      	ldrlt	r1, [pc, #80]	; (2650 <RFCCPE0IntHandler+0x5c>)
    2600:	780b      	ldrblt	r3, [r1, #0]
    2602:	f063 037f 	ornlt	r3, r3, #127	; 0x7f
    2606:	700b      	strblt	r3, [r1, #0]
  do
  {
    //
    // Clear interrupts that may now be pending
    //
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2608:	2100      	movs	r1, #0
    260a:	6011      	str	r1, [r2, #0]
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    260c:	6813      	ldr	r3, [r2, #0]
    260e:	2b00      	cmp	r3, #0
    2610:	d1fb      	bne.n	260a <RFCCPE0IntHandler+0x16>
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2612:	4a10      	ldr	r2, [pc, #64]	; (2654 <RFCCPE0IntHandler+0x60>)
	p_trigger (drvprcs, qevent);
    2614:	4c10      	ldr	r4, [pc, #64]	; (2658 <RFCCPE0IntHandler+0x64>)
    2616:	6811      	ldr	r1, [r2, #0]
    2618:	6013      	str	r3, [r2, #0]
    261a:	4a10      	ldr	r2, [pc, #64]	; (265c <RFCCPE0IntHandler+0x68>)
    261c:	6824      	ldr	r4, [r4, #0]
    261e:	6811      	ldr	r1, [r2, #0]
    2620:	4608      	mov	r0, r1
    2622:	f830 2b10 	ldrh.w	r2, [r0], #16
    2626:	f002 0207 	and.w	r2, r2, #7
    262a:	429a      	cmp	r2, r3
    262c:	dd08      	ble.n	2640 <RFCCPE0IntHandler+0x4c>
    262e:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
    2632:	3301      	adds	r3, #1
    2634:	42a5      	cmp	r5, r4
    2636:	d1f8      	bne.n	262a <RFCCPE0IntHandler+0x36>
    2638:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    263c:	889b      	ldrh	r3, [r3, #4]
    263e:	800b      	strh	r3, [r1, #0]
	RISE_N_SHINE;
    2640:	4a07      	ldr	r2, [pc, #28]	; (2660 <RFCCPE0IntHandler+0x6c>)
    2642:	7813      	ldrb	r3, [r2, #0]
    2644:	f043 0302 	orr.w	r3, r3, #2
    2648:	7013      	strb	r3, [r2, #0]
}
    264a:	bd30      	pop	{r4, r5, pc}
    264c:	40041010 	andmi	r1, r4, r0, lsl r0
    2650:	20000194 	mulcs	r0, r4, r1
    2654:	40041014 	andmi	r1, r4, r4, lsl r0
    2658:	200001a0 	andcs	r0, r0, r0, lsr #3
    265c:	20000190 	mulcs	r0, r0, r1
    2660:	20000214 	andcs	r0, r0, r4, lsl r2

00002664 <phys_cc1350>:

// ============================================================================

void phys_cc1350 (int phy, int mbs) {
    2664:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
// packet length is (and I have reasons not to trust the manual), so let me
// assume it is 255 - 4 - 1 = 250. We shall be careful.
//

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (rbuffl != 0)
    2668:	4c49      	ldr	r4, [pc, #292]	; (2790 <phys_cc1350+0x12c>)
void phys_cc1350 (int phy, int mbs) {
    266a:	4606      	mov	r6, r0
	if (rbuffl != 0)
    266c:	7822      	ldrb	r2, [r4, #0]
    266e:	b11a      	cbz	r2, 2678 <phys_cc1350+0x14>
		/* We are allowed to do it only once */
		syserror (ETOOMANY, "cc13");
    2670:	2009      	movs	r0, #9
    2672:	4948      	ldr	r1, [pc, #288]	; (2794 <phys_cc1350+0x130>)
		mbs = CC1350_MAXPLEN;

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
		/* We are allowed to do it only once */
		syserror (EREQPAR, "cc13 mb");
    2674:	f7fd fefc 	bl	470 <__pi_syserror>
	if (mbs == 0)
    2678:	b129      	cbz	r1, 2686 <phys_cc1350+0x22>
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    267a:	1f8a      	subs	r2, r1, #6
    267c:	2af4      	cmp	r2, #244	; 0xf4
    267e:	d903      	bls.n	2688 <phys_cc1350+0x24>
		syserror (EREQPAR, "cc13 mb");
    2680:	2003      	movs	r0, #3
    2682:	4945      	ldr	r1, [pc, #276]	; (2798 <phys_cc1350+0x134>)
    2684:	e7f6      	b.n	2674 <phys_cc1350+0x10>
		mbs = CC1350_MAXPLEN;
    2686:	21fa      	movs	r1, #250	; 0xfa
	i = 0;
    2688:	2700      	movs	r7, #0
#endif

	rbuffl = (byte) mbs;
    268a:	f04f 0802 	mov.w	r8, #2
		db->status = DATA_ENTRY_PENDING;
    268e:	46ba      	mov	sl, r7
		db->config.type = 0;	// General (data in structure)
    2690:	f04f 0904 	mov.w	r9, #4
	rbuffl = (byte) mbs;
    2694:	7021      	strb	r1, [r4, #0]
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2696:	7820      	ldrb	r0, [r4, #0]
    2698:	469b      	mov	fp, r3
    269a:	300d      	adds	r0, #13
    269c:	f7fe fe7e 	bl	139c <__pi_malloc>
		if (db == NULL)
    26a0:	4603      	mov	r3, r0
    26a2:	b920      	cbnz	r0, 26ae <phys_cc1350+0x4a>
			syserror (EMALLOC, "cc13");
    26a4:	2006      	movs	r0, #6
    26a6:	493b      	ldr	r1, [pc, #236]	; (2794 <phys_cc1350+0x130>)
    26a8:	e7e4      	b.n	2674 <phys_cc1350+0x10>
    26aa:	46b8      	mov	r8, r7
    26ac:	e7f3      	b.n	2696 <phys_cc1350+0x32>
		db->status = DATA_ENTRY_PENDING;
    26ae:	f880 a004 	strb.w	sl, [r0, #4]
		if (i)
    26b2:	2f00      	cmp	r7, #0
    26b4:	d03e      	beq.n	2734 <phys_cc1350+0xd0>
			da->pNextEntry = (byte*) db;
    26b6:	f8cb 0000 	str.w	r0, [fp]
		if (++i == NRBUFFS)
    26ba:	2701      	movs	r7, #1
		db->length = rbuffl + 2;
    26bc:	7822      	ldrb	r2, [r4, #0]
		if (++i == NRBUFFS)
    26be:	45b8      	cmp	r8, r7
		db->length = rbuffl + 2;
    26c0:	f102 0202 	add.w	r2, r2, #2
		db->config.type = 0;	// General (data in structure)
    26c4:	f883 9005 	strb.w	r9, [r3, #5]
		db->length = rbuffl + 2;
    26c8:	80da      	strh	r2, [r3, #6]
		if (++i == NRBUFFS)
    26ca:	d1ee      	bne.n	26aa <phys_cc1350+0x46>
	db->pNextEntry = (byte*) re;
    26cc:	601d      	str	r5, [r3, #0]
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    26ce:	2008      	movs	r0, #8
    26d0:	f7fe fe64 	bl	139c <__pi_malloc>
    26d4:	4b31      	ldr	r3, [pc, #196]	; (279c <phys_cc1350+0x138>)
    26d6:	61d8      	str	r0, [r3, #28]
	if (rbuffs == NULL)
    26d8:	2800      	cmp	r0, #0
    26da:	d0e3      	beq.n	26a4 <phys_cc1350+0x40>
	rbuffs->pCurrEntry = (byte*) re;
    26dc:	6005      	str	r5, [r0, #0]
	rbuffs->pLastEntry = NULL;
    26de:	2500      	movs	r5, #0
    26e0:	69da      	ldr	r2, [r3, #28]
	init_rbuffs ();

	physid = phy;

	// Register the phy
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26e2:	492f      	ldr	r1, [pc, #188]	; (27a0 <phys_cc1350+0x13c>)
	rbuffs->pLastEntry = NULL;
    26e4:	6055      	str	r5, [r2, #4]
	RF_cmdPropRx . pOutput = (byte*) &rxstat;
    26e6:	4a2f      	ldr	r2, [pc, #188]	; (27a4 <phys_cc1350+0x140>)
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26e8:	4630      	mov	r0, r6
	RF_cmdPropRx . pOutput = (byte*) &rxstat;
    26ea:	621a      	str	r2, [r3, #32]
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    26ec:	89da      	ldrh	r2, [r3, #14]
    26ee:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
    26f2:	f042 0206 	orr.w	r2, r2, #6
    26f6:	81da      	strh	r2, [r3, #14]
	rbuffl -= 2;
    26f8:	7823      	ldrb	r3, [r4, #0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26fa:	f44f 6210 	mov.w	r2, #2304	; 0x900
	rbuffl -= 2;
    26fe:	3b02      	subs	r3, #2
    2700:	7023      	strb	r3, [r4, #0]
	physid = phy;
    2702:	4b29      	ldr	r3, [pc, #164]	; (27a8 <phys_cc1350+0x144>)
    2704:	801e      	strh	r6, [r3, #0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2706:	f7ff f9c1 	bl	1a8c <tcvphy_reg>
    270a:	4b28      	ldr	r3, [pc, #160]	; (27ac <phys_cc1350+0x148>)
	LEDI (0, 0);
	LEDI (1, 0);
	LEDI (2, 0);

#if DIAG_MESSAGES
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    270c:	2207      	movs	r2, #7
    270e:	2102      	movs	r1, #2
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2710:	6018      	str	r0, [r3, #0]
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2712:	462b      	mov	r3, r5
    2714:	4826      	ldr	r0, [pc, #152]	; (27b0 <phys_cc1350+0x14c>)
    2716:	f7fe febb 	bl	1490 <diag>
		RADIO_DEFAULT_CHANNEL);
#endif

	// Install the backoff timer
	utimer_add (&bckf_timer);
    271a:	4826      	ldr	r0, [pc, #152]	; (27b4 <phys_cc1350+0x150>)
    271c:	f7fe fc4c 	bl	fb8 <utimer_add>

	// Start the driver process
	drvprcs = runthread (cc1350_driver);
    2720:	4629      	mov	r1, r5
    2722:	4825      	ldr	r0, [pc, #148]	; (27b8 <phys_cc1350+0x154>)
    2724:	f7fe fe8e 	bl	1444 <__pi_fork>
    2728:	4b24      	ldr	r3, [pc, #144]	; (27bc <phys_cc1350+0x158>)
    272a:	6018      	str	r0, [r3, #0]

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (drvprcs == 0)
    272c:	b920      	cbnz	r0, 2738 <phys_cc1350+0xd4>
		syserror (ERESOURCE, "cc13");
    272e:	2004      	movs	r0, #4
    2730:	4918      	ldr	r1, [pc, #96]	; (2794 <phys_cc1350+0x130>)
    2732:	e79f      	b.n	2674 <phys_cc1350+0x10>
    2734:	4605      	mov	r5, r0
    2736:	e7c0      	b.n	26ba <phys_cc1350+0x56>

#if RADIO_DEFAULT_POWER <= 7
#if (RADIO_OPTIONS & RADIO_OPTION_PXOPTIONS)
	cmd_sp.txPower =
#endif
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2738:	f64b 432b 	movw	r3, #48171	; 0xbc2b
    273c:	4c20      	ldr	r4, [pc, #128]	; (27c0 <phys_cc1350+0x15c>)
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    273e:	4921      	ldr	r1, [pc, #132]	; (27c4 <phys_cc1350+0x160>)
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2740:	8363      	strh	r3, [r4, #26]
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2742:	4b21      	ldr	r3, [pc, #132]	; (27c8 <phys_cc1350+0x164>)
    2744:	781a      	ldrb	r2, [r3, #0]
    2746:	3a01      	subs	r2, #1
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2748:	eb01 0382 	add.w	r3, r1, r2, lsl #2
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    274c:	8858      	ldrh	r0, [r3, #2]
    274e:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
    2752:	6922      	ldr	r2, [r4, #16]
    2754:	f003 030f 	and.w	r3, r3, #15
    2758:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
    275c:	f422 12ff 	bic.w	r2, r2, #2088960	; 0x1fe000
    2760:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    2764:	f022 020f 	bic.w	r2, r2, #15
    2768:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    276c:	4313      	orrs	r3, r2
    276e:	6123      	str	r3, [r4, #16]
#endif

#if RADIO_BITRATE_INDEX > 0
	plugrt ();
#endif
	plugch ();
    2770:	f7ff fbc8 	bl	1f04 <plugch>

	// Make sure, prop mode is selected in PRCM (this is supposed to be
	// the default)
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2774:	4b15      	ldr	r3, [pc, #84]	; (27cc <phys_cc1350+0x168>)

	// Precompute the Trim
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2776:	4620      	mov	r0, r4
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2778:	601d      	str	r5, [r3, #0]
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    277a:	f000 fe27 	bl	33cc <NOROM_RFCRTrim>
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    277e:	4620      	mov	r0, r4
    2780:	4913      	ldr	r1, [pc, #76]	; (27d0 <phys_cc1350+0x16c>)
    2782:	f000 fd7b 	bl	327c <NOROM_RFCRfTrimRead>
			(rfTrim_t*)&rfTrim);

	// Direct all doorbell interrupts permanently to CPE0
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2786:	4b13      	ldr	r3, [pc, #76]	; (27d4 <phys_cc1350+0x170>)
    2788:	601d      	str	r5, [r3, #0]
}
    278a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    278e:	bf00      	nop
    2790:	200001a4 	andcs	r0, r0, r4, lsr #3
    2794:	0000439e 	muleq	r0, lr, r3
    2798:	000043a3 	andeq	r4, r0, r3, lsr #7
    279c:	2000007c 	andcs	r0, r0, ip, ror r0
    27a0:	00001f25 	andeq	r1, r0, r5, lsr #30
    27a4:	200001b8 			; <UNDEFINED> instruction: 0x200001b8
    27a8:	2000019c 	mulcs	r0, ip, r1
    27ac:	200001a0 	andcs	r0, r0, r0, lsr #3
    27b0:	000043ab 	andeq	r4, r0, fp, lsr #7
    27b4:	2000018a 	andcs	r0, r0, sl, lsl #3
    27b8:	00002405 	andeq	r2, r0, r5, lsl #8
    27bc:	20000190 	mulcs	r0, r0, r1
    27c0:	20000054 	andcs	r0, r0, r4, asr r0
    27c4:	00004d10 	andeq	r4, r0, r0, lsl sp
    27c8:	2000003a 	andcs	r0, r0, sl, lsr r0
    27cc:	400821d0 	ldrdmi	r2, [r8], -r0
    27d0:	200001a8 	andcs	r0, r0, r8, lsr #3
    27d4:	40041018 	andmi	r1, r4, r8, lsl r0

000027d8 <tcv_clo_null>:
    27d8:	b510      	push	{r4, lr}
    27da:	4a07      	ldr	r2, [pc, #28]	; (27f8 <tcv_clo_null+0x20>)
    27dc:	4603      	mov	r3, r0
    27de:	6812      	ldr	r2, [r2, #0]
    27e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    27e4:	b132      	cbz	r2, 27f4 <tcv_clo_null+0x1c>
    27e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    27ea:	428c      	cmp	r4, r1
    27ec:	bf04      	itt	eq
    27ee:	f842 0023 	streq.w	r0, [r2, r3, lsl #2]
    27f2:	2000      	moveq	r0, #0
    27f4:	bd10      	pop	{r4, pc}
    27f6:	bf00      	nop
    27f8:	200001c8 	andcs	r0, r0, r8, asr #3

000027fc <tcv_rcv_null>:
    27fc:	4907      	ldr	r1, [pc, #28]	; (281c <tcv_rcv_null+0x20>)
    27fe:	9a00      	ldr	r2, [sp, #0]
    2800:	6809      	ldr	r1, [r1, #0]
    2802:	b909      	cbnz	r1, 2808 <tcv_rcv_null+0xc>
    2804:	2000      	movs	r0, #0
    2806:	4770      	bx	lr
    2808:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    280c:	6019      	str	r1, [r3, #0]
    280e:	3101      	adds	r1, #1
    2810:	d0f8      	beq.n	2804 <tcv_rcv_null+0x8>
    2812:	2300      	movs	r3, #0
    2814:	2002      	movs	r0, #2
    2816:	8053      	strh	r3, [r2, #2]
    2818:	8013      	strh	r3, [r2, #0]
    281a:	4770      	bx	lr
    281c:	200001c8 	andcs	r0, r0, r8, asr #3

00002820 <tcv_frm_null>:
    2820:	2000      	movs	r0, #0
    2822:	8048      	strh	r0, [r1, #2]
    2824:	8008      	strh	r0, [r1, #0]
    2826:	4770      	bx	lr

00002828 <tcv_out_null>:
    2828:	2004      	movs	r0, #4
    282a:	4770      	bx	lr

0000282c <tcv_xmt_null>:
    282c:	2001      	movs	r0, #1
    282e:	4770      	bx	lr

00002830 <tcv_ope_null>:
    2830:	b570      	push	{r4, r5, r6, lr}
    2832:	4c0f      	ldr	r4, [pc, #60]	; (2870 <tcv_ope_null+0x40>)
    2834:	4605      	mov	r5, r0
    2836:	6823      	ldr	r3, [r4, #0]
    2838:	460e      	mov	r6, r1
    283a:	b94b      	cbnz	r3, 2850 <tcv_ope_null+0x20>
    283c:	200c      	movs	r0, #12
    283e:	f7fe fdad 	bl	139c <__pi_malloc>
    2842:	6020      	str	r0, [r4, #0]
    2844:	b178      	cbz	r0, 2866 <tcv_ope_null+0x36>
    2846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    284a:	e9c0 3300 	strd	r3, r3, [r0]
    284e:	6083      	str	r3, [r0, #8]
    2850:	6823      	ldr	r3, [r4, #0]
    2852:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    2856:	3201      	adds	r2, #1
    2858:	bf06      	itte	eq
    285a:	f843 6025 	streq.w	r6, [r3, r5, lsl #2]
    285e:	2000      	moveq	r0, #0
    2860:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    2864:	bd70      	pop	{r4, r5, r6, pc}
    2866:	2006      	movs	r0, #6
    2868:	4902      	ldr	r1, [pc, #8]	; (2874 <tcv_ope_null+0x44>)
    286a:	f7fd fe01 	bl	470 <__pi_syserror>
    286e:	bf00      	nop
    2870:	200001c8 	andcs	r0, r0, r8, asr #3
    2874:	00004d1c 	andeq	r4, r0, ip, lsl sp

00002878 <__outserial>:
#define	__cport		UART_A
#define	set_cport	CNOP

#endif	/* UART_DRIVER > 1 */

strand (__outserial, const char*)
    2878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    287a:	4b18      	ldr	r3, [pc, #96]	; (28dc <__outserial+0x64>)
    287c:	681b      	ldr	r3, [r3, #0]
    287e:	689d      	ldr	r5, [r3, #8]
    2880:	b130      	cbz	r0, 2890 <__outserial+0x18>
    2882:	280a      	cmp	r0, #10
    2884:	d00d      	beq.n	28a2 <__outserial+0x2a>
	// prone
	goto __OM_WRITE;

	// proceed (OM_WRITE);

endstrand
    2886:	b003      	add	sp, #12
    2888:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    288c:	f7fe bb8c 	b.w	fa8 <__pi_badstate>
	ptr = data;
    2890:	4b13      	ldr	r3, [pc, #76]	; (28e0 <__outserial+0x68>)
    2892:	4c14      	ldr	r4, [pc, #80]	; (28e4 <__outserial+0x6c>)
    2894:	601d      	str	r5, [r3, #0]
	if (*ptr)
    2896:	782b      	ldrb	r3, [r5, #0]
    2898:	b1e3      	cbz	r3, 28d4 <__outserial+0x5c>
		len = strlen (ptr);
    289a:	4628      	mov	r0, r5
    289c:	f7fe fc8a 	bl	11b4 <__pi_strlen>
    28a0:	6020      	str	r0, [r4, #0]
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    28a2:	4e0f      	ldr	r6, [pc, #60]	; (28e0 <__outserial+0x68>)
    28a4:	4f0f      	ldr	r7, [pc, #60]	; (28e4 <__outserial+0x6c>)
    28a6:	883b      	ldrh	r3, [r7, #0]
    28a8:	2201      	movs	r2, #1
    28aa:	9300      	str	r3, [sp, #0]
    28ac:	2100      	movs	r1, #0
    28ae:	6833      	ldr	r3, [r6, #0]
    28b0:	200a      	movs	r0, #10
    28b2:	f7fe fcb1 	bl	1218 <io>
	ptr += quant;
    28b6:	6833      	ldr	r3, [r6, #0]
	len -= quant;
    28b8:	683c      	ldr	r4, [r7, #0]
	ptr += quant;
    28ba:	4403      	add	r3, r0
	len -= quant;
    28bc:	1a24      	subs	r4, r4, r0
	ptr += quant;
    28be:	6033      	str	r3, [r6, #0]
	len -= quant;
    28c0:	603c      	str	r4, [r7, #0]
	if (len == 0) {
    28c2:	2c00      	cmp	r4, #0
    28c4:	d1ef      	bne.n	28a6 <__outserial+0x2e>
		ufree (data);
    28c6:	4628      	mov	r0, r5
    28c8:	f7fe fd1c 	bl	1304 <__pi_free>
		finish;
    28cc:	4620      	mov	r0, r4
    28ce:	f7fe fd3d 	bl	134c <kill>
    28d2:	e7e8      	b.n	28a6 <__outserial+0x2e>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    28d4:	786b      	ldrb	r3, [r5, #1]
    28d6:	3303      	adds	r3, #3
    28d8:	6023      	str	r3, [r4, #0]
    28da:	e7e2      	b.n	28a2 <__outserial+0x2a>
    28dc:	20000230 	andcs	r0, r0, r0, lsr r2
    28e0:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    28e4:	200001cc 	andcs	r0, r0, ip, asr #3

000028e8 <__inserial>:
#define	IM_INIT		0
#define	IM_READ		1
#define IM_BIN		2
#define IM_BINL		3

strand (__inserial, address)
    28e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    28ea:	4d42      	ldr	r5, [pc, #264]	; (29f4 <__inserial+0x10c>)
    28ec:	682a      	ldr	r2, [r5, #0]
    28ee:	6894      	ldr	r4, [r2, #8]
    28f0:	2803      	cmp	r0, #3
    28f2:	d87a      	bhi.n	29ea <__inserial+0x102>
    28f4:	e8df f000 	tbb	[pc, r0]
    28f8:	5d481802 	stclpl	8, cr1, [r8, #-8]
	static int len;
	int quant;

  entry (IM_INIT)

	if (__inpline != NULL)
    28fc:	4b3e      	ldr	r3, [pc, #248]	; (29f8 <__inserial+0x110>)
    28fe:	681b      	ldr	r3, [r3, #0]
    2900:	b113      	cbz	r3, 2908 <__inserial+0x20>
		/* Never overwrite previous unclaimed stuff */
		finish;
    2902:	2000      	movs	r0, #0
    2904:	f7fe fd22 	bl	134c <kill>

	// On eCOG char* is non-trivially upgraded from 'address'
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    2908:	2040      	movs	r0, #64	; 0x40
    290a:	f7fe fd47 	bl	139c <__pi_malloc>
    290e:	4b3b      	ldr	r3, [pc, #236]	; (29fc <__inserial+0x114>)
    2910:	4604      	mov	r4, r0
    2912:	6018      	str	r0, [r3, #0]
    2914:	b918      	cbnz	r0, 291e <__inserial+0x36>
		/*
		 * We have to wait for memory
		 */
		umwait (IM_INIT);
    2916:	f7fe fdaf 	bl	1478 <__pi_waitmem>
		release;
    291a:	f7fe f967 	bl	bec <__pi_release>
	}
	savedata (data);
	len = MAX_LINE_LENGTH;
    291e:	223f      	movs	r2, #63	; 0x3f
	savedata (data);
    2920:	682b      	ldr	r3, [r5, #0]
    2922:	6098      	str	r0, [r3, #8]
	len = MAX_LINE_LENGTH;
    2924:	4b36      	ldr	r3, [pc, #216]	; (2a00 <__inserial+0x118>)
    2926:	601a      	str	r2, [r3, #0]
	/* Make sure this doesn't change while we are reading */
	set_cport;

  entry (IM_READ)

	io (IM_READ, __cport, READ, ptr, 1);
    2928:	2001      	movs	r0, #1
    292a:	2200      	movs	r2, #0
    292c:	4d33      	ldr	r5, [pc, #204]	; (29fc <__inserial+0x114>)
    292e:	9000      	str	r0, [sp, #0]
    2930:	682b      	ldr	r3, [r5, #0]
    2932:	4611      	mov	r1, r2
    2934:	f7fe fc70 	bl	1218 <io>
	if (ptr == (char*) data) { // new line
    2938:	682b      	ldr	r3, [r5, #0]
    293a:	42a3      	cmp	r3, r4
    293c:	d10d      	bne.n	295a <__inserial+0x72>
		if (*ptr == '\0') { // bin cmd
    293e:	7823      	ldrb	r3, [r4, #0]
    2940:	b923      	cbnz	r3, 294c <__inserial+0x64>
			ptr++;
    2942:	1c63      	adds	r3, r4, #1
			proceed (IM_BIN);
    2944:	2002      	movs	r0, #2
			ptr++;
    2946:	602b      	str	r3, [r5, #0]
			proceed (IM_BIN);
    2948:	f7fe fbb6 	bl	10b8 <proceed>
		}

		if (*ptr < 0x20)
    294c:	682b      	ldr	r3, [r5, #0]
    294e:	781b      	ldrb	r3, [r3, #0]
    2950:	2b1f      	cmp	r3, #31
    2952:	d802      	bhi.n	295a <__inserial+0x72>
			/* Ignore codes below space at the beginning of line */
			proceed (IM_READ);
    2954:	2001      	movs	r0, #1
    2956:	f7fe fbaf 	bl	10b8 <proceed>
	}
	if (*ptr == '\n' || *ptr == '\r') {
    295a:	682b      	ldr	r3, [r5, #0]
    295c:	781a      	ldrb	r2, [r3, #0]
    295e:	2a0a      	cmp	r2, #10
    2960:	d001      	beq.n	2966 <__inserial+0x7e>
    2962:	2a0d      	cmp	r2, #13
    2964:	d105      	bne.n	2972 <__inserial+0x8a>
		*ptr = '\0';
    2966:	2000      	movs	r0, #0
    2968:	7018      	strb	r0, [r3, #0]
		__inpline = (char*)data;
    296a:	4b23      	ldr	r3, [pc, #140]	; (29f8 <__inserial+0x110>)
    296c:	601c      	str	r4, [r3, #0]
		finish;
    296e:	f7fe fced 	bl	134c <kill>
	}

	if (len) {
    2972:	4923      	ldr	r1, [pc, #140]	; (2a00 <__inserial+0x118>)
    2974:	680b      	ldr	r3, [r1, #0]
    2976:	b123      	cbz	r3, 2982 <__inserial+0x9a>
		ptr++;
    2978:	682a      	ldr	r2, [r5, #0]
		len--;
    297a:	3b01      	subs	r3, #1
		ptr++;
    297c:	3201      	adds	r2, #1
    297e:	602a      	str	r2, [r5, #0]
		len--;
    2980:	600b      	str	r3, [r1, #0]
	}

	proceed (IM_READ);
    2982:	2001      	movs	r0, #1
    2984:	f7fe fb98 	bl	10b8 <proceed>

  entry (IM_BIN)

	io (IM_BIN, __cport, READ, ptr, 1);
    2988:	2301      	movs	r3, #1
    298a:	2200      	movs	r2, #0
    298c:	4d1b      	ldr	r5, [pc, #108]	; (29fc <__inserial+0x114>)
    298e:	9300      	str	r3, [sp, #0]
    2990:	4611      	mov	r1, r2
    2992:	682b      	ldr	r3, [r5, #0]
    2994:	2002      	movs	r0, #2
    2996:	f7fe fc3f 	bl	1218 <io>
	len -= 2;
    299a:	4819      	ldr	r0, [pc, #100]	; (2a00 <__inserial+0x118>)
    299c:	6803      	ldr	r3, [r0, #0]
    299e:	1e9a      	subs	r2, r3, #2
	if (len > *ptr + 1) // 1 for 0x04
    29a0:	682b      	ldr	r3, [r5, #0]
    29a2:	f813 1b01 	ldrb.w	r1, [r3], #1
    29a6:	3101      	adds	r1, #1
		len = *ptr + 1;
    29a8:	4291      	cmp	r1, r2
    29aa:	bfd4      	ite	le
    29ac:	6001      	strle	r1, [r0, #0]
    29ae:	6002      	strgt	r2, [r0, #0]
	ptr++;
    29b0:	602b      	str	r3, [r5, #0]

  entry (IM_BINL)

	quant = io (IM_BINL, __cport, READ, ptr, len);
    29b2:	2200      	movs	r2, #0
    29b4:	4f12      	ldr	r7, [pc, #72]	; (2a00 <__inserial+0x118>)
    29b6:	4d11      	ldr	r5, [pc, #68]	; (29fc <__inserial+0x114>)
    29b8:	883b      	ldrh	r3, [r7, #0]
    29ba:	4611      	mov	r1, r2
    29bc:	9300      	str	r3, [sp, #0]
    29be:	682b      	ldr	r3, [r5, #0]
    29c0:	2003      	movs	r0, #3
    29c2:	f7fe fc29 	bl	1218 <io>
	len -= quant;
    29c6:	683b      	ldr	r3, [r7, #0]
	quant = io (IM_BINL, __cport, READ, ptr, len);
    29c8:	4606      	mov	r6, r0
	len -= quant;
    29ca:	1a18      	subs	r0, r3, r0
    29cc:	6038      	str	r0, [r7, #0]
	if (len == 0) {
    29ce:	b918      	cbnz	r0, 29d8 <__inserial+0xf0>
		__inpline = (char*)data;
    29d0:	4b09      	ldr	r3, [pc, #36]	; (29f8 <__inserial+0x110>)
    29d2:	601c      	str	r4, [r3, #0]
		finish;
    29d4:	f7fe fcba 	bl	134c <kill>
	}
	ptr += quant;
    29d8:	6828      	ldr	r0, [r5, #0]
    29da:	4430      	add	r0, r6
    29dc:	6028      	str	r0, [r5, #0]
	proceed (IM_BINL);
    29de:	2003      	movs	r0, #3

endstrand
    29e0:	b003      	add	sp, #12
    29e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	proceed (IM_BINL);
    29e6:	f7fe bb67 	b.w	10b8 <proceed>
endstrand
    29ea:	b003      	add	sp, #12
    29ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    29f0:	f7fe bada 	b.w	fa8 <__pi_badstate>
    29f4:	20000230 	andcs	r0, r0, r0, lsr r2
    29f8:	200001d4 	ldrdcs	r0, [r0], -r4
    29fc:	200001dc 	ldrdcs	r0, [r0], -ip
    2a00:	200001d8 	ldrdcs	r0, [r0], -r8

00002a04 <outc.5724>:

	char c;
	word d;

	void outc (word c) {
		if (res && (d < n))
    2a04:	f8dc 2000 	ldr.w	r2, [ip]
    2a08:	b132      	cbz	r2, 2a18 <outc.5724+0x14>
    2a0a:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    2a0e:	f8bc 1004 	ldrh.w	r1, [ip, #4]
    2a12:	4299      	cmp	r1, r3
			// Store if there is a buffer ...
			res [d] = (char) c;
    2a14:	bf88      	it	hi
    2a16:	54d0      	strbhi	r0, [r2, r3]
		// ... otherwise just count
		d++;
    2a18:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    2a1c:	3301      	adds	r3, #1
    2a1e:	f8ac 3006 	strh.w	r3, [ip, #6]
	};
    2a22:	4770      	bx	lr

00002a24 <__pi_vfparse>:
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    2a28:	461c      	mov	r4, r3
    2a2a:	ab0c      	add	r3, sp, #48	; 0x30
    2a2c:	9303      	str	r3, [sp, #12]
			if (i == 0) \
				break; \
			c = (char) (val / i); \
		}

	d = 0;
    2a2e:	2300      	movs	r3, #0
				if (c == 'd' && (val & 0x8000) != 0) {
					/* Minus */
					outc ('-');
					val = (~val) + 1;
				}
				enci (10000);
    2a30:	260a      	movs	r6, #10
						[ (val >> i) & 0xf ]);
    2a32:	4f86      	ldr	r7, [pc, #536]	; (2c4c <__pi_vfparse+0x228>)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a34:	9001      	str	r0, [sp, #4]
    2a36:	f8ad 1008 	strh.w	r1, [sp, #8]
	d = 0;
    2a3a:	f8ad 300a 	strh.w	r3, [sp, #10]
		c = *fm++;
    2a3e:	f892 9000 	ldrb.w	r9, [r2]
		if (c == '\\') {
    2a42:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    2a46:	d118      	bne.n	2a7a <__pi_vfparse+0x56>
			if ((c = *fm++) == '\0') {
    2a48:	f892 9001 	ldrb.w	r9, [r2, #1]
    2a4c:	1c95      	adds	r5, r2, #2
				outc ('\\');
    2a4e:	f10d 0c04 	add.w	ip, sp, #4
			if ((c = *fm++) == '\0') {
    2a52:	f1b9 0f00 	cmp.w	r9, #0
    2a56:	d10b      	bne.n	2a70 <__pi_vfparse+0x4c>
				outc ('\\');
    2a58:	205c      	movs	r0, #92	; 0x5c
    2a5a:	f7ff ffd3 	bl	2a04 <outc.5724>
					goto Ret;
			}
		} else {
			// Regular character
Eol:
			outc (c);
    2a5e:	4648      	mov	r0, r9
    2a60:	f10d 0c04 	add.w	ip, sp, #4
    2a64:	f7ff ffce 	bl	2a04 <outc.5724>
			if (c == '\0')
    2a68:	f1b9 0f00 	cmp.w	r9, #0
    2a6c:	d103      	bne.n	2a76 <__pi_vfparse+0x52>
    2a6e:	e027      	b.n	2ac0 <__pi_vfparse+0x9c>
			outc (c);
    2a70:	4648      	mov	r0, r9
				outc (val);
    2a72:	f7ff ffc7 	bl	2a04 <outc.5724>
				val = (word) va_arg (ap, aword);
    2a76:	462a      	mov	r2, r5
    2a78:	e7e1      	b.n	2a3e <__pi_vfparse+0x1a>
		if (c == '%') {
    2a7a:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    2a7e:	f040 80e2 	bne.w	2c46 <__pi_vfparse+0x222>
			c = *fm++;
    2a82:	f892 8001 	ldrb.w	r8, [r2, #1]
    2a86:	1c95      	adds	r5, r2, #2
			switch (c) {
    2a88:	f1b8 0f73 	cmp.w	r8, #115	; 0x73
    2a8c:	f000 80cd 	beq.w	2c2a <__pi_vfparse+0x206>
    2a90:	d81b      	bhi.n	2aca <__pi_vfparse+0xa6>
    2a92:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
    2a96:	d033      	beq.n	2b00 <__pi_vfparse+0xdc>
    2a98:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    2a9c:	d067      	beq.n	2b6e <__pi_vfparse+0x14a>
    2a9e:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
    2aa2:	f000 80bc 	beq.w	2c1e <__pi_vfparse+0x1fa>
				outc ('%');
    2aa6:	2025      	movs	r0, #37	; 0x25
    2aa8:	f10d 0c04 	add.w	ip, sp, #4
    2aac:	f7ff ffaa 	bl	2a04 <outc.5724>
				outc (c);
    2ab0:	4640      	mov	r0, r8
    2ab2:	f10d 0c04 	add.w	ip, sp, #4
    2ab6:	f7ff ffa5 	bl	2a04 <outc.5724>
				if (c == '\0')
    2aba:	f1b8 0f00 	cmp.w	r8, #0
    2abe:	d1da      	bne.n	2a76 <__pi_vfparse+0x52>
Ret:
				return d;
    2ac0:	f8bd 000a 	ldrh.w	r0, [sp, #10]
		}
	}
}
    2ac4:	b004      	add	sp, #16
    2ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch (c) {
    2aca:	f1b8 0f75 	cmp.w	r8, #117	; 0x75
    2ace:	d017      	beq.n	2b00 <__pi_vfparse+0xdc>
    2ad0:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
    2ad4:	d1e7      	bne.n	2aa6 <__pi_vfparse+0x82>
				for (i = 12; ; i -= 4) {
    2ad6:	f04f 080c 	mov.w	r8, #12
				val = (word) va_arg (ap, aword);
    2ada:	f854 3b04 	ldr.w	r3, [r4], #4
						[ (val >> i) & 0xf ]);
    2ade:	fa1f f983 	uxth.w	r9, r3
    2ae2:	fa49 f308 	asr.w	r3, r9, r8
    2ae6:	f003 030f 	and.w	r3, r3, #15
					outc (__pi_hex_enc_table
    2aea:	5cf8      	ldrb	r0, [r7, r3]
    2aec:	f10d 0c04 	add.w	ip, sp, #4
    2af0:	f7ff ff88 	bl	2a04 <outc.5724>
					if (i == 0)
    2af4:	f1b8 0f00 	cmp.w	r8, #0
    2af8:	d0bd      	beq.n	2a76 <__pi_vfparse+0x52>
				for (i = 12; ; i -= 4) {
    2afa:	f1a8 0804 	sub.w	r8, r8, #4
					outc (__pi_hex_enc_table
    2afe:	e7f0      	b.n	2ae2 <__pi_vfparse+0xbe>
				val = (word) va_arg (ap, aword);
    2b00:	f854 3b04 	ldr.w	r3, [r4], #4
				if (c == 'd' && (val & 0x8000) != 0) {
    2b04:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
				val = (word) va_arg (ap, aword);
    2b08:	fa1f f983 	uxth.w	r9, r3
				if (c == 'd' && (val & 0x8000) != 0) {
    2b0c:	d10a      	bne.n	2b24 <__pi_vfparse+0x100>
    2b0e:	041b      	lsls	r3, r3, #16
    2b10:	d508      	bpl.n	2b24 <__pi_vfparse+0x100>
					outc ('-');
    2b12:	202d      	movs	r0, #45	; 0x2d
    2b14:	f10d 0c04 	add.w	ip, sp, #4
    2b18:	f7ff ff74 	bl	2a04 <outc.5724>
					val = (~val) + 1;
    2b1c:	f1c9 0900 	rsb	r9, r9, #0
    2b20:	fa1f f989 	uxth.w	r9, r9
				for (i = 12; ; i -= 4) {
    2b24:	2305      	movs	r3, #5
				enci (10000);
    2b26:	f242 7810 	movw	r8, #10000	; 0x2710
    2b2a:	fbb9 f0f8 	udiv	r0, r9, r8
    2b2e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    2b32:	d103      	bne.n	2b3c <__pi_vfparse+0x118>
    2b34:	3b01      	subs	r3, #1
    2b36:	d117      	bne.n	2b68 <__pi_vfparse+0x144>
    2b38:	f04f 0801 	mov.w	r8, #1
    2b3c:	fa1f fa80 	uxth.w	sl, r0
    2b40:	f10d 0c04 	add.w	ip, sp, #4
    2b44:	3030      	adds	r0, #48	; 0x30
    2b46:	f7ff ff5d 	bl	2a04 <outc.5724>
    2b4a:	fbb8 f3f6 	udiv	r3, r8, r6
    2b4e:	fb08 991a 	mls	r9, r8, sl, r9
    2b52:	f1b8 0f09 	cmp.w	r8, #9
    2b56:	fa1f f989 	uxth.w	r9, r9
    2b5a:	b29b      	uxth	r3, r3
    2b5c:	d98b      	bls.n	2a76 <__pi_vfparse+0x52>
    2b5e:	fbb9 f0f3 	udiv	r0, r9, r3
    2b62:	4698      	mov	r8, r3
    2b64:	b2c0      	uxtb	r0, r0
    2b66:	e7e9      	b.n	2b3c <__pi_vfparse+0x118>
    2b68:	fbb8 f8f6 	udiv	r8, r8, r6
    2b6c:	e7dd      	b.n	2b2a <__pi_vfparse+0x106>
				c = *fm;
    2b6e:	7893      	ldrb	r3, [r2, #2]
				if (c == 'd' || c == 'u') {
    2b70:	2b64      	cmp	r3, #100	; 0x64
    2b72:	d001      	beq.n	2b78 <__pi_vfparse+0x154>
    2b74:	2b75      	cmp	r3, #117	; 0x75
    2b76:	d132      	bne.n	2bde <__pi_vfparse+0x1ba>
					if (c == 'd' &&
    2b78:	2b64      	cmp	r3, #100	; 0x64
					val = va_arg (ap, lword);
    2b7a:	f854 ab04 	ldr.w	sl, [r4], #4
					fm++;
    2b7e:	f102 0503 	add.w	r5, r2, #3
					if (c == 'd' &&
    2b82:	d109      	bne.n	2b98 <__pi_vfparse+0x174>
    2b84:	f1ba 0f00 	cmp.w	sl, #0
    2b88:	da06      	bge.n	2b98 <__pi_vfparse+0x174>
						outc ('-');
    2b8a:	202d      	movs	r0, #45	; 0x2d
    2b8c:	f10d 0c04 	add.w	ip, sp, #4
    2b90:	f7ff ff38 	bl	2a04 <outc.5724>
						val = (~val) + 1;
    2b94:	f1ca 0a00 	rsb	sl, sl, #0
				enci (10000);
    2b98:	230a      	movs	r3, #10
					enci (1000000000UL);
    2b9a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 2c50 <__pi_vfparse+0x22c>
    2b9e:	fbba f9f8 	udiv	r9, sl, r8
    2ba2:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    2ba6:	d103      	bne.n	2bb0 <__pi_vfparse+0x18c>
    2ba8:	3b01      	subs	r3, #1
    2baa:	d115      	bne.n	2bd8 <__pi_vfparse+0x1b4>
    2bac:	f04f 0801 	mov.w	r8, #1
    2bb0:	f10d 0c04 	add.w	ip, sp, #4
    2bb4:	f109 0030 	add.w	r0, r9, #48	; 0x30
    2bb8:	f7ff ff24 	bl	2a04 <outc.5724>
    2bbc:	f1b8 0f09 	cmp.w	r8, #9
    2bc0:	fbb8 f3f6 	udiv	r3, r8, r6
    2bc4:	fb08 aa19 	mls	sl, r8, r9, sl
    2bc8:	f67f af55 	bls.w	2a76 <__pi_vfparse+0x52>
    2bcc:	fbba f9f3 	udiv	r9, sl, r3
    2bd0:	4698      	mov	r8, r3
    2bd2:	fa5f f989 	uxtb.w	r9, r9
    2bd6:	e7eb      	b.n	2bb0 <__pi_vfparse+0x18c>
    2bd8:	fbb8 f8f6 	udiv	r8, r8, r6
    2bdc:	e7df      	b.n	2b9e <__pi_vfparse+0x17a>
				} else if (c == 'x') {
    2bde:	2b78      	cmp	r3, #120	; 0x78
    2be0:	d114      	bne.n	2c0c <__pi_vfparse+0x1e8>
					for (i = 28; ; i -= 4) {
    2be2:	f04f 081c 	mov.w	r8, #28
					val = va_arg (ap, lword);
    2be6:	f854 9b04 	ldr.w	r9, [r4], #4
					fm++;
    2bea:	1cd5      	adds	r5, r2, #3
							[ (val >> i) & 0xf ]);
    2bec:	fa29 f308 	lsr.w	r3, r9, r8
    2bf0:	f003 030f 	and.w	r3, r3, #15
						outc (__pi_hex_enc_table
    2bf4:	5cf8      	ldrb	r0, [r7, r3]
    2bf6:	f10d 0c04 	add.w	ip, sp, #4
    2bfa:	f7ff ff03 	bl	2a04 <outc.5724>
						if (i == 0)
    2bfe:	f1b8 0f00 	cmp.w	r8, #0
    2c02:	f43f af38 	beq.w	2a76 <__pi_vfparse+0x52>
					for (i = 28; ; i -= 4) {
    2c06:	f1a8 0804 	sub.w	r8, r8, #4
						outc (__pi_hex_enc_table
    2c0a:	e7ef      	b.n	2bec <__pi_vfparse+0x1c8>
					outc ('%');
    2c0c:	4648      	mov	r0, r9
    2c0e:	f10d 0c04 	add.w	ip, sp, #4
    2c12:	f7ff fef7 	bl	2a04 <outc.5724>
					outc ('l');
    2c16:	4640      	mov	r0, r8
    2c18:	f10d 0c04 	add.w	ip, sp, #4
    2c1c:	e729      	b.n	2a72 <__pi_vfparse+0x4e>
				val = (word) va_arg (ap, aword);
    2c1e:	f854 0b04 	ldr.w	r0, [r4], #4
				outc (val);
    2c22:	f10d 0c04 	add.w	ip, sp, #4
    2c26:	b280      	uxth	r0, r0
    2c28:	e723      	b.n	2a72 <__pi_vfparse+0x4e>
				while (*st != '\0') {
    2c2a:	f854 3b04 	ldr.w	r3, [r4], #4
    2c2e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    2c32:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    2c36:	2800      	cmp	r0, #0
    2c38:	f43f af1d 	beq.w	2a76 <__pi_vfparse+0x52>
					outc (*st);
    2c3c:	f10d 0c04 	add.w	ip, sp, #4
    2c40:	f7ff fee0 	bl	2a04 <outc.5724>
					st++;
    2c44:	e7f5      	b.n	2c32 <__pi_vfparse+0x20e>
		c = *fm++;
    2c46:	1c55      	adds	r5, r2, #1
    2c48:	e709      	b.n	2a5e <__pi_vfparse+0x3a>
    2c4a:	bf00      	nop
    2c4c:	000042a5 	andeq	r4, r0, r5, lsr #5
    2c50:	3b9aca00 	blcc	fe6b5458 <_estack+0xde6b0458>

00002c54 <vform>:

char *vform (char *res, const char *fm, va_list aq) {
    2c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c58:	460e      	mov	r6, r1
    2c5a:	4617      	mov	r7, r2

	word fml, d;

	if (res != NULL) {
    2c5c:	4604      	mov	r4, r0
    2c5e:	b140      	cbz	r0, 2c72 <vform+0x1e>
		// We trust the caller
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2c60:	4613      	mov	r3, r2
    2c62:	460a      	mov	r2, r1
    2c64:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2c68:	f7ff fedc 	bl	2a24 <__pi_vfparse>
		ufree (res);
		fml = d;
		goto Again;
	}
	return res;
}
    2c6c:	4620      	mov	r0, r4
    2c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fml = strlen (fm) + 17;
    2c72:	4608      	mov	r0, r1
    2c74:	f7fe fa9e 	bl	11b4 <__pi_strlen>
    2c78:	f100 0511 	add.w	r5, r0, #17
    2c7c:	b2ad      	uxth	r5, r5
	if ((res = (char*) umalloc (fml)) == NULL)
    2c7e:	4628      	mov	r0, r5
    2c80:	f7fe fb8c 	bl	139c <__pi_malloc>
    2c84:	4604      	mov	r4, r0
    2c86:	2800      	cmp	r0, #0
    2c88:	d0f0      	beq.n	2c6c <vform+0x18>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2c8a:	463b      	mov	r3, r7
    2c8c:	4632      	mov	r2, r6
    2c8e:	4629      	mov	r1, r5
    2c90:	f7ff fec8 	bl	2a24 <__pi_vfparse>
    2c94:	4285      	cmp	r5, r0
    2c96:	4680      	mov	r8, r0
    2c98:	d2e8      	bcs.n	2c6c <vform+0x18>
		ufree (res);
    2c9a:	4620      	mov	r0, r4
    2c9c:	f7fe fb32 	bl	1304 <__pi_free>
		goto Again;
    2ca0:	4645      	mov	r5, r8
    2ca2:	e7ec      	b.n	2c7e <vform+0x2a>

00002ca4 <vscan>:
					c -= (char) ('A' - 10); \
				*vap = ((*vap) << 4) | (at) c; \
			} \
			}

	if (buf == NULL || fmt == NULL)
    2ca4:	4603      	mov	r3, r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    2ca6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf == NULL || fmt == NULL)
    2caa:	2800      	cmp	r0, #0
    2cac:	f000 81b5 	beq.w	301a <vscan+0x376>
    2cb0:	2900      	cmp	r1, #0
    2cb2:	f000 81b4 	beq.w	301e <vscan+0x37a>
		// A safety hatch
		return 0;

	nc = 0;
    2cb6:	2400      	movs	r4, #0
#if	CODE_LONG_INTS
		    case 'l':
			switch (*fmt++) {
			    case '\0':	return nc;
		    	    case 'd': scani (lword); break;
		    	    case 'u': scanu (lword); break;
    2cb8:	270a      	movs	r7, #10
    2cba:	4625      	mov	r5, r4
			*sap = c;
			break;
		    }
		    case 's': {
			char *sap;
			while (isspace (*buf)) buf++;
    2cbc:	f8df c370 	ldr.w	ip, [pc, #880]	; 3030 <vscan+0x38c>
    2cc0:	460e      	mov	r6, r1
	while (*fmt != '\0') {
    2cc2:	f811 0b01 	ldrb.w	r0, [r1], #1
    2cc6:	b170      	cbz	r0, 2ce6 <vscan+0x42>
		if (*fmt++ != '%')
    2cc8:	2825      	cmp	r0, #37	; 0x25
    2cca:	d1f9      	bne.n	2cc0 <vscan+0x1c>
		switch (*fmt++) {
    2ccc:	7870      	ldrb	r0, [r6, #1]
    2cce:	1cb1      	adds	r1, r6, #2
    2cd0:	286c      	cmp	r0, #108	; 0x6c
    2cd2:	f000 80e1 	beq.w	2e98 <vscan+0x1f4>
    2cd6:	d809      	bhi.n	2cec <vscan+0x48>
    2cd8:	2863      	cmp	r0, #99	; 0x63
    2cda:	f000 8184 	beq.w	2fe6 <vscan+0x342>
    2cde:	2864      	cmp	r0, #100	; 0x64
    2ce0:	d043      	beq.n	2d6a <vscan+0xc6>
    2ce2:	2800      	cmp	r0, #0
    2ce4:	d1ec      	bne.n	2cc0 <vscan+0x1c>
			break;
		    }
		}
	}
	return nc;
}
    2ce6:	4620      	mov	r0, r4
    2ce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		switch (*fmt++) {
    2cec:	2875      	cmp	r0, #117	; 0x75
    2cee:	d074      	beq.n	2dda <vscan+0x136>
    2cf0:	2878      	cmp	r0, #120	; 0x78
    2cf2:	f000 8098 	beq.w	2e26 <vscan+0x182>
    2cf6:	2873      	cmp	r0, #115	; 0x73
    2cf8:	d1e2      	bne.n	2cc0 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    2cfa:	7818      	ldrb	r0, [r3, #0]
    2cfc:	461e      	mov	r6, r3
    2cfe:	f1a0 0e09 	sub.w	lr, r0, #9
    2d02:	fa5f fe8e 	uxtb.w	lr, lr
    2d06:	f1be 0f17 	cmp.w	lr, #23
    2d0a:	4698      	mov	r8, r3
    2d0c:	f103 0301 	add.w	r3, r3, #1
    2d10:	f240 8173 	bls.w	2ffa <vscan+0x356>
			if (*buf == '\0')
    2d14:	2800      	cmp	r0, #0
    2d16:	d0e6      	beq.n	2ce6 <vscan+0x42>
			if (*buf != ',') {
    2d18:	282c      	cmp	r0, #44	; 0x2c
			sap = va_arg (ap, char*);
    2d1a:	f852 eb04 	ldr.w	lr, [r2], #4
			nc++;
    2d1e:	f104 0401 	add.w	r4, r4, #1
			if (*buf != ',') {
    2d22:	d00e      	beq.n	2d42 <vscan+0x9e>
    2d24:	4646      	mov	r6, r8
				while (!isspace (*buf) && *buf != ',' &&
    2d26:	f818 3b01 	ldrb.w	r3, [r8], #1
    2d2a:	f1a3 0009 	sub.w	r0, r3, #9
    2d2e:	2801      	cmp	r0, #1
    2d30:	d907      	bls.n	2d42 <vscan+0x9e>
    2d32:	2b0d      	cmp	r3, #13
    2d34:	d005      	beq.n	2d42 <vscan+0x9e>
    2d36:	2b2c      	cmp	r3, #44	; 0x2c
    2d38:	d003      	beq.n	2d42 <vscan+0x9e>
    2d3a:	f013 0fdf 	tst.w	r3, #223	; 0xdf
    2d3e:	f040 8163 	bne.w	3008 <vscan+0x364>
			while (isspace (*buf)) buf++;
    2d42:	f896 8000 	ldrb.w	r8, [r6]
    2d46:	4633      	mov	r3, r6
    2d48:	f1a8 0009 	sub.w	r0, r8, #9
    2d4c:	b2c0      	uxtb	r0, r0
    2d4e:	2817      	cmp	r0, #23
    2d50:	f106 0601 	add.w	r6, r6, #1
    2d54:	f240 815b 	bls.w	300e <vscan+0x36a>
			if (*buf == ',') buf++;
    2d58:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
    2d5c:	bf08      	it	eq
    2d5e:	4633      	moveq	r3, r6
			*sap = '\0';
    2d60:	f88e 5000 	strb.w	r5, [lr]
			break;
    2d64:	e7ac      	b.n	2cc0 <vscan+0x1c>
		    case 'd': scani (word); break;
    2d66:	2e00      	cmp	r6, #0
    2d68:	d0bd      	beq.n	2ce6 <vscan+0x42>
    2d6a:	469e      	mov	lr, r3
    2d6c:	f813 6b01 	ldrb.w	r6, [r3], #1
    2d70:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    2d74:	2809      	cmp	r0, #9
    2d76:	d923      	bls.n	2dc0 <vscan+0x11c>
    2d78:	2e2d      	cmp	r6, #45	; 0x2d
    2d7a:	d001      	beq.n	2d80 <vscan+0xdc>
    2d7c:	2e2b      	cmp	r6, #43	; 0x2b
    2d7e:	d1f2      	bne.n	2d66 <vscan+0xc2>
    2d80:	7818      	ldrb	r0, [r3, #0]
    2d82:	469e      	mov	lr, r3
    2d84:	3830      	subs	r0, #48	; 0x30
    2d86:	2809      	cmp	r0, #9
    2d88:	d8ef      	bhi.n	2d6a <vscan+0xc6>
    2d8a:	f1a6 092d 	sub.w	r9, r6, #45	; 0x2d
    2d8e:	f1d9 0800 	rsbs	r8, r9, #0
    2d92:	eb48 0809 	adc.w	r8, r8, r9
    2d96:	f852 6b04 	ldr.w	r6, [r2], #4
    2d9a:	3401      	adds	r4, #1
    2d9c:	8035      	strh	r5, [r6, #0]
    2d9e:	f89e 0000 	ldrb.w	r0, [lr]
    2da2:	4673      	mov	r3, lr
    2da4:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
    2da8:	f1b9 0f09 	cmp.w	r9, #9
    2dac:	f10e 0e01 	add.w	lr, lr, #1
    2db0:	d909      	bls.n	2dc6 <vscan+0x122>
    2db2:	f1b8 0f00 	cmp.w	r8, #0
    2db6:	d183      	bne.n	2cc0 <vscan+0x1c>
    2db8:	8830      	ldrh	r0, [r6, #0]
    2dba:	4240      	negs	r0, r0
    2dbc:	8030      	strh	r0, [r6, #0]
    2dbe:	e77f      	b.n	2cc0 <vscan+0x1c>
    2dc0:	f04f 0800 	mov.w	r8, #0
    2dc4:	e7e7      	b.n	2d96 <vscan+0xf2>
    2dc6:	8833      	ldrh	r3, [r6, #0]
    2dc8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2dcc:	ebc0 0043 	rsb	r0, r0, r3, lsl #1
    2dd0:	3030      	adds	r0, #48	; 0x30
    2dd2:	8030      	strh	r0, [r6, #0]
    2dd4:	e7e3      	b.n	2d9e <vscan+0xfa>
		    case 'u': scanu (word); break;
    2dd6:	2800      	cmp	r0, #0
    2dd8:	d085      	beq.n	2ce6 <vscan+0x42>
    2dda:	7818      	ldrb	r0, [r3, #0]
    2ddc:	461e      	mov	r6, r3
    2dde:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    2de2:	f1be 0f09 	cmp.w	lr, #9
    2de6:	f103 0301 	add.w	r3, r3, #1
    2dea:	d8f4      	bhi.n	2dd6 <vscan+0x132>
    2dec:	f852 eb04 	ldr.w	lr, [r2], #4
    2df0:	3401      	adds	r4, #1
    2df2:	f8ae 5000 	strh.w	r5, [lr]
    2df6:	7830      	ldrb	r0, [r6, #0]
    2df8:	4633      	mov	r3, r6
    2dfa:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
    2dfe:	f1b8 0f09 	cmp.w	r8, #9
    2e02:	f106 0601 	add.w	r6, r6, #1
    2e06:	f63f af5b 	bhi.w	2cc0 <vscan+0x1c>
    2e0a:	f8be 3000 	ldrh.w	r3, [lr]
    2e0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2e12:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    2e16:	3830      	subs	r0, #48	; 0x30
    2e18:	f8ae 0000 	strh.w	r0, [lr]
    2e1c:	e7eb      	b.n	2df6 <vscan+0x152>
		    case 'x': scanx (word); break;
    2e1e:	f1be 0f00 	cmp.w	lr, #0
    2e22:	f43f af60 	beq.w	2ce6 <vscan+0x42>
    2e26:	f893 e000 	ldrb.w	lr, [r3]
    2e2a:	461e      	mov	r6, r3
    2e2c:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    2e30:	2809      	cmp	r0, #9
    2e32:	f103 0301 	add.w	r3, r3, #1
    2e36:	d904      	bls.n	2e42 <vscan+0x19e>
    2e38:	f02e 0020 	bic.w	r0, lr, #32
    2e3c:	3841      	subs	r0, #65	; 0x41
    2e3e:	2805      	cmp	r0, #5
    2e40:	d8ed      	bhi.n	2e1e <vscan+0x17a>
    2e42:	f852 eb04 	ldr.w	lr, [r2], #4
    2e46:	3401      	adds	r4, #1
    2e48:	f8ae 5000 	strh.w	r5, [lr]
    2e4c:	f106 0805 	add.w	r8, r6, #5
    2e50:	f896 9000 	ldrb.w	r9, [r6]
    2e54:	4633      	mov	r3, r6
    2e56:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    2e5a:	b2c0      	uxtb	r0, r0
    2e5c:	2809      	cmp	r0, #9
    2e5e:	f106 0601 	add.w	r6, r6, #1
    2e62:	f240 80de 	bls.w	3022 <vscan+0x37e>
    2e66:	f029 0020 	bic.w	r0, r9, #32
    2e6a:	3841      	subs	r0, #65	; 0x41
    2e6c:	2805      	cmp	r0, #5
    2e6e:	f63f af27 	bhi.w	2cc0 <vscan+0x1c>
    2e72:	4546      	cmp	r6, r8
    2e74:	f43f af24 	beq.w	2cc0 <vscan+0x1c>
    2e78:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    2e7c:	2b05      	cmp	r3, #5
    2e7e:	bf94      	ite	ls
    2e80:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    2e84:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    2e88:	b2c0      	uxtb	r0, r0
    2e8a:	f8be 3000 	ldrh.w	r3, [lr]
    2e8e:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    2e92:	f8ae 0000 	strh.w	r0, [lr]
    2e96:	e7db      	b.n	2e50 <vscan+0x1ac>
			switch (*fmt++) {
    2e98:	78b0      	ldrb	r0, [r6, #2]
    2e9a:	1cf1      	adds	r1, r6, #3
    2e9c:	2875      	cmp	r0, #117	; 0x75
    2e9e:	d07d      	beq.n	2f9c <vscan+0x2f8>
    2ea0:	d831      	bhi.n	2f06 <vscan+0x262>
    2ea2:	2800      	cmp	r0, #0
    2ea4:	f43f af1f 	beq.w	2ce6 <vscan+0x42>
    2ea8:	2864      	cmp	r0, #100	; 0x64
    2eaa:	f47f af09 	bne.w	2cc0 <vscan+0x1c>
    2eae:	4698      	mov	r8, r3
		    	    case 'd': scani (lword); break;
    2eb0:	f813 6b01 	ldrb.w	r6, [r3], #1
    2eb4:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    2eb8:	2809      	cmp	r0, #9
    2eba:	d962      	bls.n	2f82 <vscan+0x2de>
    2ebc:	2e2d      	cmp	r6, #45	; 0x2d
    2ebe:	d001      	beq.n	2ec4 <vscan+0x220>
    2ec0:	2e2b      	cmp	r6, #43	; 0x2b
    2ec2:	d15b      	bne.n	2f7c <vscan+0x2d8>
    2ec4:	7818      	ldrb	r0, [r3, #0]
    2ec6:	4698      	mov	r8, r3
    2ec8:	3830      	subs	r0, #48	; 0x30
    2eca:	2809      	cmp	r0, #9
    2ecc:	d8ef      	bhi.n	2eae <vscan+0x20a>
    2ece:	3e2d      	subs	r6, #45	; 0x2d
    2ed0:	4270      	negs	r0, r6
    2ed2:	4170      	adcs	r0, r6
    2ed4:	f852 eb04 	ldr.w	lr, [r2], #4
    2ed8:	3401      	adds	r4, #1
    2eda:	f8ce 5000 	str.w	r5, [lr]
    2ede:	f898 6000 	ldrb.w	r6, [r8]
    2ee2:	4643      	mov	r3, r8
    2ee4:	3e30      	subs	r6, #48	; 0x30
    2ee6:	fa5f f986 	uxtb.w	r9, r6
    2eea:	f1b9 0f09 	cmp.w	r9, #9
    2eee:	f108 0801 	add.w	r8, r8, #1
    2ef2:	d948      	bls.n	2f86 <vscan+0x2e2>
    2ef4:	2800      	cmp	r0, #0
    2ef6:	f47f aee3 	bne.w	2cc0 <vscan+0x1c>
    2efa:	f8de 0000 	ldr.w	r0, [lr]
    2efe:	4240      	negs	r0, r0
    2f00:	f8ce 0000 	str.w	r0, [lr]
    2f04:	e6dc      	b.n	2cc0 <vscan+0x1c>
    2f06:	2878      	cmp	r0, #120	; 0x78
    2f08:	f47f aeda 	bne.w	2cc0 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    2f0c:	f893 e000 	ldrb.w	lr, [r3]
    2f10:	461e      	mov	r6, r3
    2f12:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    2f16:	2809      	cmp	r0, #9
    2f18:	f103 0301 	add.w	r3, r3, #1
    2f1c:	d904      	bls.n	2f28 <vscan+0x284>
    2f1e:	f02e 0020 	bic.w	r0, lr, #32
    2f22:	3841      	subs	r0, #65	; 0x41
    2f24:	2805      	cmp	r0, #5
    2f26:	d85a      	bhi.n	2fde <vscan+0x33a>
    2f28:	f852 eb04 	ldr.w	lr, [r2], #4
    2f2c:	3401      	adds	r4, #1
    2f2e:	f8ce 5000 	str.w	r5, [lr]
    2f32:	f106 0809 	add.w	r8, r6, #9
    2f36:	f896 9000 	ldrb.w	r9, [r6]
    2f3a:	4633      	mov	r3, r6
    2f3c:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    2f40:	b2c0      	uxtb	r0, r0
    2f42:	2809      	cmp	r0, #9
    2f44:	f106 0601 	add.w	r6, r6, #1
    2f48:	d96f      	bls.n	302a <vscan+0x386>
    2f4a:	f029 0020 	bic.w	r0, r9, #32
    2f4e:	3841      	subs	r0, #65	; 0x41
    2f50:	2805      	cmp	r0, #5
    2f52:	f63f aeb5 	bhi.w	2cc0 <vscan+0x1c>
    2f56:	4546      	cmp	r6, r8
    2f58:	f43f aeb2 	beq.w	2cc0 <vscan+0x1c>
    2f5c:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    2f60:	2b05      	cmp	r3, #5
    2f62:	bf94      	ite	ls
    2f64:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    2f68:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    2f6c:	b2c0      	uxtb	r0, r0
    2f6e:	f8de 3000 	ldr.w	r3, [lr]
    2f72:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    2f76:	f8ce 0000 	str.w	r0, [lr]
    2f7a:	e7dc      	b.n	2f36 <vscan+0x292>
		    	    case 'd': scani (lword); break;
    2f7c:	2e00      	cmp	r6, #0
    2f7e:	d196      	bne.n	2eae <vscan+0x20a>
    2f80:	e6b1      	b.n	2ce6 <vscan+0x42>
    2f82:	2000      	movs	r0, #0
    2f84:	e7a6      	b.n	2ed4 <vscan+0x230>
    2f86:	f8de 3000 	ldr.w	r3, [lr]
    2f8a:	b2b6      	uxth	r6, r6
    2f8c:	437b      	muls	r3, r7
    2f8e:	1b9e      	subs	r6, r3, r6
    2f90:	f8ce 6000 	str.w	r6, [lr]
    2f94:	e7a3      	b.n	2ede <vscan+0x23a>
		    	    case 'u': scanu (lword); break;
    2f96:	2800      	cmp	r0, #0
    2f98:	f43f aea5 	beq.w	2ce6 <vscan+0x42>
    2f9c:	7818      	ldrb	r0, [r3, #0]
    2f9e:	461e      	mov	r6, r3
    2fa0:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    2fa4:	f1be 0f09 	cmp.w	lr, #9
    2fa8:	f103 0301 	add.w	r3, r3, #1
    2fac:	d8f3      	bhi.n	2f96 <vscan+0x2f2>
    2fae:	f852 eb04 	ldr.w	lr, [r2], #4
    2fb2:	3401      	adds	r4, #1
    2fb4:	f8ce 5000 	str.w	r5, [lr]
    2fb8:	7830      	ldrb	r0, [r6, #0]
    2fba:	4633      	mov	r3, r6
    2fbc:	3830      	subs	r0, #48	; 0x30
    2fbe:	fa5f f880 	uxtb.w	r8, r0
    2fc2:	f1b8 0f09 	cmp.w	r8, #9
    2fc6:	f106 0601 	add.w	r6, r6, #1
    2fca:	f63f ae79 	bhi.w	2cc0 <vscan+0x1c>
    2fce:	f8de 3000 	ldr.w	r3, [lr]
    2fd2:	b280      	uxth	r0, r0
    2fd4:	fb07 0003 	mla	r0, r7, r3, r0
    2fd8:	f8ce 0000 	str.w	r0, [lr]
    2fdc:	e7ec      	b.n	2fb8 <vscan+0x314>
		    	    case 'x': scanx (lword); break;
    2fde:	f1be 0f00 	cmp.w	lr, #0
    2fe2:	d193      	bne.n	2f0c <vscan+0x268>
    2fe4:	e67f      	b.n	2ce6 <vscan+0x42>
			if ((c = *buf++) == '\0')
    2fe6:	f813 0b01 	ldrb.w	r0, [r3], #1
    2fea:	2800      	cmp	r0, #0
    2fec:	f43f ae7b 	beq.w	2ce6 <vscan+0x42>
			sap = va_arg (ap, char*);
    2ff0:	f852 6b04 	ldr.w	r6, [r2], #4
			nc++;
    2ff4:	3401      	adds	r4, #1
			*sap = c;
    2ff6:	7030      	strb	r0, [r6, #0]
			break;
    2ff8:	e662      	b.n	2cc0 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    2ffa:	fa2c fe0e 	lsr.w	lr, ip, lr
    2ffe:	f01e 0f01 	tst.w	lr, #1
    3002:	f47f ae7a 	bne.w	2cfa <vscan+0x56>
    3006:	e687      	b.n	2d18 <vscan+0x74>
						*sap++ = *buf++;
    3008:	f80e 3b01 	strb.w	r3, [lr], #1
    300c:	e68a      	b.n	2d24 <vscan+0x80>
			while (isspace (*buf)) buf++;
    300e:	fa2c f000 	lsr.w	r0, ip, r0
    3012:	07c0      	lsls	r0, r0, #31
    3014:	f53f ae95 	bmi.w	2d42 <vscan+0x9e>
    3018:	e6a2      	b.n	2d60 <vscan+0xbc>
		return 0;
    301a:	4604      	mov	r4, r0
    301c:	e663      	b.n	2ce6 <vscan+0x42>
    301e:	460c      	mov	r4, r1
    3020:	e661      	b.n	2ce6 <vscan+0x42>
		    case 'x': scanx (word); break;
    3022:	4546      	cmp	r6, r8
    3024:	f47f af31 	bne.w	2e8a <vscan+0x1e6>
    3028:	e64a      	b.n	2cc0 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    302a:	4546      	cmp	r6, r8
    302c:	d19f      	bne.n	2f6e <vscan+0x2ca>
    302e:	e647      	b.n	2cc0 <vscan+0x1c>
    3030:	00800013 	addeq	r0, r0, r3, lsl r0

00003034 <SafeHapiVoid>:
    3034:	b570      	push	{r4, r5, r6, lr}
    3036:	4606      	mov	r6, r0
    3038:	f000 f844 	bl	30c4 <NOROM_CPUcpsid>
    303c:	4605      	mov	r5, r0
    303e:	4c06      	ldr	r4, [pc, #24]	; (3058 <SafeHapiVoid+0x24>)
    3040:	6823      	ldr	r3, [r4, #0]
    3042:	2b00      	cmp	r3, #0
    3044:	d0fb      	beq.n	303e <SafeHapiVoid+0xa>
    3046:	47b0      	blx	r6
    3048:	2301      	movs	r3, #1
    304a:	6023      	str	r3, [r4, #0]
    304c:	b91d      	cbnz	r5, 3056 <SafeHapiVoid+0x22>
    304e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3052:	f000 b83b 	b.w	30cc <NOROM_CPUcpsie>
    3056:	bd70      	pop	{r4, r5, r6, pc}
    3058:	400c8000 	andmi	r8, ip, r0

0000305c <NOROM_AONBatMonTemperatureGetDegC>:
    305c:	4b08      	ldr	r3, [pc, #32]	; (3080 <NOROM_AONBatMonTemperatureGetDegC+0x24>)
    305e:	6818      	ldr	r0, [r3, #0]
    3060:	4b08      	ldr	r3, [pc, #32]	; (3084 <NOROM_AONBatMonTemperatureGetDegC+0x28>)
    3062:	7819      	ldrb	r1, [r3, #0]
    3064:	4b08      	ldr	r3, [pc, #32]	; (3088 <NOROM_AONBatMonTemperatureGetDegC+0x2c>)
    3066:	681a      	ldr	r2, [r3, #0]
    3068:	f340 0310 	sbfx	r3, r0, #0, #17
    306c:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
    3070:	b248      	sxtb	r0, r1
    3072:	4350      	muls	r0, r2
    3074:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    3078:	3080      	adds	r0, #128	; 0x80
    307a:	1200      	asrs	r0, r0, #8
    307c:	4770      	bx	lr
    307e:	bf00      	nop
    3080:	40095030 	andmi	r5, r9, r0, lsr r0
    3084:	5000130c 	andpl	r1, r0, ip, lsl #6
    3088:	40095028 	andmi	r5, r9, r8, lsr #32

0000308c <NOROM_AONRTCCurrentCompareValueGet>:
    308c:	4a05      	ldr	r2, [pc, #20]	; (30a4 <NOROM_AONRTCCurrentCompareValueGet+0x18>)
    308e:	4906      	ldr	r1, [pc, #24]	; (30a8 <NOROM_AONRTCCurrentCompareValueGet+0x1c>)
    3090:	6813      	ldr	r3, [r2, #0]
    3092:	6808      	ldr	r0, [r1, #0]
    3094:	6812      	ldr	r2, [r2, #0]
    3096:	4293      	cmp	r3, r2
    3098:	d1f8      	bne.n	308c <NOROM_AONRTCCurrentCompareValueGet>
    309a:	041b      	lsls	r3, r3, #16
    309c:	ea43 4010 	orr.w	r0, r3, r0, lsr #16
    30a0:	4770      	bx	lr
    30a2:	bf00      	nop
    30a4:	40092008 	andmi	r2, r9, r8
    30a8:	4009200c 	andmi	r2, r9, ip

000030ac <NOROM_AONRTCCurrent64BitValueGet>:
    30ac:	4b03      	ldr	r3, [pc, #12]	; (30bc <NOROM_AONRTCCurrent64BitValueGet+0x10>)
    30ae:	4904      	ldr	r1, [pc, #16]	; (30c0 <NOROM_AONRTCCurrent64BitValueGet+0x14>)
    30b0:	681a      	ldr	r2, [r3, #0]
    30b2:	6808      	ldr	r0, [r1, #0]
    30b4:	6819      	ldr	r1, [r3, #0]
    30b6:	4291      	cmp	r1, r2
    30b8:	d1f8      	bne.n	30ac <NOROM_AONRTCCurrent64BitValueGet>
    30ba:	4770      	bx	lr
    30bc:	40092008 	andmi	r2, r9, r8
    30c0:	4009200c 	andmi	r2, r9, ip

000030c4 <NOROM_CPUcpsid>:
    30c4:	f3ef 8010 	mrs	r0, PRIMASK
    30c8:	b672      	cpsid	i
    30ca:	4770      	bx	lr

000030cc <NOROM_CPUcpsie>:
    30cc:	f3ef 8010 	mrs	r0, PRIMASK
    30d0:	b662      	cpsie	i
    30d2:	4770      	bx	lr

000030d4 <NOROM_OSCClockSourceSet>:
    30d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    30d6:	460c      	mov	r4, r1
    30d8:	07c1      	lsls	r1, r0, #31
    30da:	4605      	mov	r5, r0
    30dc:	d509      	bpl.n	30f2 <NOROM_OSCClockSourceSet+0x1e>
    30de:	4b12      	ldr	r3, [pc, #72]	; (3128 <NOROM_OSCClockSourceSet+0x54>)
    30e0:	b2a2      	uxth	r2, r4
    30e2:	681b      	ldr	r3, [r3, #0]
    30e4:	2100      	movs	r1, #0
    30e6:	9200      	str	r2, [sp, #0]
    30e8:	685e      	ldr	r6, [r3, #4]
    30ea:	4810      	ldr	r0, [pc, #64]	; (312c <NOROM_OSCClockSourceSet+0x58>)
    30ec:	2201      	movs	r2, #1
    30ee:	460b      	mov	r3, r1
    30f0:	47b0      	blx	r6
    30f2:	07aa      	lsls	r2, r5, #30
    30f4:	d509      	bpl.n	310a <NOROM_OSCClockSourceSet+0x36>
    30f6:	4b0c      	ldr	r3, [pc, #48]	; (3128 <NOROM_OSCClockSourceSet+0x54>)
    30f8:	b2a2      	uxth	r2, r4
    30fa:	681b      	ldr	r3, [r3, #0]
    30fc:	9200      	str	r2, [sp, #0]
    30fe:	685e      	ldr	r6, [r3, #4]
    3100:	480a      	ldr	r0, [pc, #40]	; (312c <NOROM_OSCClockSourceSet+0x58>)
    3102:	2100      	movs	r1, #0
    3104:	2202      	movs	r2, #2
    3106:	2301      	movs	r3, #1
    3108:	47b0      	blx	r6
    310a:	076b      	lsls	r3, r5, #29
    310c:	d509      	bpl.n	3122 <NOROM_OSCClockSourceSet+0x4e>
    310e:	4b06      	ldr	r3, [pc, #24]	; (3128 <NOROM_OSCClockSourceSet+0x54>)
    3110:	b2a4      	uxth	r4, r4
    3112:	681b      	ldr	r3, [r3, #0]
    3114:	9400      	str	r4, [sp, #0]
    3116:	685c      	ldr	r4, [r3, #4]
    3118:	4804      	ldr	r0, [pc, #16]	; (312c <NOROM_OSCClockSourceSet+0x58>)
    311a:	2100      	movs	r1, #0
    311c:	220c      	movs	r2, #12
    311e:	2302      	movs	r3, #2
    3120:	47a0      	blx	r4
    3122:	b002      	add	sp, #8
    3124:	bd70      	pop	{r4, r5, r6, pc}
    3126:	bf00      	nop
    3128:	100001a4 	andne	r0, r0, r4, lsr #3
    312c:	400ca000 	andmi	sl, ip, r0

00003130 <NOROM_OSCClockSourceGet>:
    3130:	b510      	push	{r4, lr}
    3132:	4b08      	ldr	r3, [pc, #32]	; (3154 <NOROM_OSCClockSourceGet+0x24>)
    3134:	2804      	cmp	r0, #4
    3136:	681b      	ldr	r3, [r3, #0]
    3138:	f04f 0134 	mov.w	r1, #52	; 0x34
    313c:	68dc      	ldr	r4, [r3, #12]
    313e:	bf07      	ittee	eq
    3140:	f04f 42c0 	moveq.w	r2, #1610612736	; 0x60000000
    3144:	231d      	moveq	r3, #29
    3146:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
    314a:	231c      	movne	r3, #28
    314c:	4802      	ldr	r0, [pc, #8]	; (3158 <NOROM_OSCClockSourceGet+0x28>)
    314e:	47a0      	blx	r4
    3150:	bd10      	pop	{r4, pc}
    3152:	bf00      	nop
    3154:	100001a4 	andne	r0, r0, r4, lsr #3
    3158:	400ca000 	andmi	sl, ip, r0

0000315c <NOROM_OSCHF_TurnOnXosc>:
    315c:	b508      	push	{r3, lr}
    315e:	2003      	movs	r0, #3
    3160:	2101      	movs	r1, #1
    3162:	f7ff ffb7 	bl	30d4 <NOROM_OSCClockSourceSet>
    3166:	f7ff ff91 	bl	308c <NOROM_AONRTCCurrentCompareValueGet>
    316a:	4b01      	ldr	r3, [pc, #4]	; (3170 <NOROM_OSCHF_TurnOnXosc+0x14>)
    316c:	6098      	str	r0, [r3, #8]
    316e:	bd08      	pop	{r3, pc}
    3170:	200001e0 	andcs	r0, r0, r0, ror #3

00003174 <NOROM_OSCHF_AttemptToSwitchToXosc>:
    3174:	b510      	push	{r4, lr}
    3176:	2001      	movs	r0, #1
    3178:	f7ff ffda 	bl	3130 <NOROM_OSCClockSourceGet>
    317c:	2801      	cmp	r0, #1
    317e:	d01c      	beq.n	31ba <NOROM_OSCHF_AttemptToSwitchToXosc+0x46>
    3180:	4b0f      	ldr	r3, [pc, #60]	; (31c0 <NOROM_OSCHF_AttemptToSwitchToXosc+0x4c>)
    3182:	4810      	ldr	r0, [pc, #64]	; (31c4 <NOROM_OSCHF_AttemptToSwitchToXosc+0x50>)
    3184:	681b      	ldr	r3, [r3, #0]
    3186:	2134      	movs	r1, #52	; 0x34
    3188:	68dc      	ldr	r4, [r3, #12]
    318a:	2201      	movs	r2, #1
    318c:	2300      	movs	r3, #0
    318e:	47a0      	blx	r4
    3190:	b1a0      	cbz	r0, 31bc <NOROM_OSCHF_AttemptToSwitchToXosc+0x48>
    3192:	4b0d      	ldr	r3, [pc, #52]	; (31c8 <NOROM_OSCHF_AttemptToSwitchToXosc+0x54>)
    3194:	6b98      	ldr	r0, [r3, #56]	; 0x38
    3196:	f7ff ff4d 	bl	3034 <SafeHapiVoid>
    319a:	f7ff ff77 	bl	308c <NOROM_AONRTCCurrentCompareValueGet>
    319e:	4a0b      	ldr	r2, [pc, #44]	; (31cc <NOROM_OSCHF_AttemptToSwitchToXosc+0x58>)
    31a0:	6893      	ldr	r3, [r2, #8]
    31a2:	60d0      	str	r0, [r2, #12]
    31a4:	1ac0      	subs	r0, r0, r3
    31a6:	4b0a      	ldr	r3, [pc, #40]	; (31d0 <NOROM_OSCHF_AttemptToSwitchToXosc+0x5c>)
    31a8:	4358      	muls	r0, r3
    31aa:	6813      	ldr	r3, [r2, #0]
    31ac:	0c00      	lsrs	r0, r0, #16
    31ae:	eba3 0393 	sub.w	r3, r3, r3, lsr #2
    31b2:	4283      	cmp	r3, r0
    31b4:	bf94      	ite	ls
    31b6:	6010      	strls	r0, [r2, #0]
    31b8:	6013      	strhi	r3, [r2, #0]
    31ba:	2001      	movs	r0, #1
    31bc:	bd10      	pop	{r4, pc}
    31be:	bf00      	nop
    31c0:	100001a4 	andne	r0, r0, r4, lsr #3
    31c4:	400ca000 	andmi	sl, ip, r0
    31c8:	10000048 	andne	r0, r0, r8, asr #32
    31cc:	200001e0 	andcs	r0, r0, r0, ror #3
    31d0:	000f4240 	andeq	r4, pc, r0, asr #4

000031d4 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc>:
    31d4:	b510      	push	{r4, lr}
    31d6:	2003      	movs	r0, #3
    31d8:	2100      	movs	r1, #0
    31da:	f7ff ff7b 	bl	30d4 <NOROM_OSCClockSourceSet>
    31de:	2001      	movs	r0, #1
    31e0:	f7ff ffa6 	bl	3130 <NOROM_OSCClockSourceGet>
    31e4:	b118      	cbz	r0, 31ee <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x1a>
    31e6:	4b06      	ldr	r3, [pc, #24]	; (3200 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x2c>)
    31e8:	6b98      	ldr	r0, [r3, #56]	; 0x38
    31ea:	f7ff ff23 	bl	3034 <SafeHapiVoid>
    31ee:	f7ff ff4d 	bl	308c <NOROM_AONRTCCurrentCompareValueGet>
    31f2:	4c04      	ldr	r4, [pc, #16]	; (3204 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x30>)
    31f4:	6060      	str	r0, [r4, #4]
    31f6:	f7ff ff31 	bl	305c <NOROM_AONBatMonTemperatureGetDegC>
    31fa:	6120      	str	r0, [r4, #16]
    31fc:	bd10      	pop	{r4, pc}
    31fe:	bf00      	nop
    3200:	10000048 	andne	r0, r0, r8, asr #32
    3204:	200001e0 	andcs	r0, r0, r0, ror #3

00003208 <NOROM_RFCDoorbellSendTo>:
    3208:	4a07      	ldr	r2, [pc, #28]	; (3228 <NOROM_RFCDoorbellSendTo+0x20>)
    320a:	6811      	ldr	r1, [r2, #0]
    320c:	2900      	cmp	r1, #0
    320e:	d1fb      	bne.n	3208 <NOROM_RFCDoorbellSendTo>
    3210:	4b06      	ldr	r3, [pc, #24]	; (322c <NOROM_RFCDoorbellSendTo+0x24>)
    3212:	6019      	str	r1, [r3, #0]
    3214:	6010      	str	r0, [r2, #0]
    3216:	681a      	ldr	r2, [r3, #0]
    3218:	2a00      	cmp	r2, #0
    321a:	d0fc      	beq.n	3216 <NOROM_RFCDoorbellSendTo+0xe>
    321c:	4b03      	ldr	r3, [pc, #12]	; (322c <NOROM_RFCDoorbellSendTo+0x24>)
    321e:	2200      	movs	r2, #0
    3220:	601a      	str	r2, [r3, #0]
    3222:	f853 0c18 	ldr.w	r0, [r3, #-24]
    3226:	4770      	bx	lr
    3228:	40041000 	andmi	r1, r4, r0
    322c:	4004101c 	andmi	r1, r4, ip, lsl r0

00003230 <NOROM_RFCSynthPowerDown>:
    3230:	4a0e      	ldr	r2, [pc, #56]	; (326c <NOROM_RFCSynthPowerDown+0x3c>)
    3232:	490f      	ldr	r1, [pc, #60]	; (3270 <NOROM_RFCSynthPowerDown+0x40>)
    3234:	6813      	ldr	r3, [r2, #0]
    3236:	2050      	movs	r0, #80	; 0x50
    3238:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    323c:	f023 0302 	bic.w	r3, r3, #2
    3240:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3244:	6013      	str	r3, [r2, #0]
    3246:	4b0b      	ldr	r3, [pc, #44]	; (3274 <NOROM_RFCSynthPowerDown+0x44>)
    3248:	2203      	movs	r2, #3
    324a:	601a      	str	r2, [r3, #0]
    324c:	f241 0330 	movw	r3, #4144	; 0x1030
    3250:	4a09      	ldr	r2, [pc, #36]	; (3278 <NOROM_RFCSynthPowerDown+0x48>)
    3252:	600b      	str	r3, [r1, #0]
    3254:	2301      	movs	r3, #1
    3256:	6013      	str	r3, [r2, #0]
    3258:	6008      	str	r0, [r1, #0]
    325a:	f44f 60ca 	mov.w	r0, #1616	; 0x650
    325e:	6013      	str	r3, [r2, #0]
    3260:	6008      	str	r0, [r1, #0]
    3262:	6013      	str	r3, [r2, #0]
    3264:	f842 3c0c 	str.w	r3, [r2, #-12]
    3268:	4770      	bx	lr
    326a:	bf00      	nop
    326c:	60040000 	andvs	r0, r4, r0
    3270:	40044114 	andmi	r4, r4, r4, lsl r1
    3274:	40044108 	andmi	r4, r4, r8, lsl #2
    3278:	4004410c 	andmi	r4, r4, ip, lsl #2

0000327c <NOROM_RFCRfTrimRead>:
    327c:	f640 0202 	movw	r2, #2050	; 0x802
    3280:	8803      	ldrh	r3, [r0, #0]
    3282:	4293      	cmp	r3, r2
    3284:	d006      	beq.n	3294 <NOROM_RFCRfTrimRead+0x18>
    3286:	f643 0207 	movw	r2, #14343	; 0x3807
    328a:	4293      	cmp	r3, r2
    328c:	d104      	bne.n	3298 <NOROM_RFCRfTrimRead+0x1c>
    328e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    3292:	e002      	b.n	329a <NOROM_RFCRfTrimRead+0x1e>
    3294:	7bc3      	ldrb	r3, [r0, #15]
    3296:	e000      	b.n	329a <NOROM_RFCRfTrimRead+0x1e>
    3298:	2300      	movs	r3, #0
    329a:	4a36      	ldr	r2, [pc, #216]	; (3374 <NOROM_RFCRfTrimRead+0xf8>)
    329c:	2b0a      	cmp	r3, #10
    329e:	6812      	ldr	r2, [r2, #0]
    32a0:	600a      	str	r2, [r1, #0]
    32a2:	d031      	beq.n	3308 <NOROM_RFCRfTrimRead+0x8c>
    32a4:	dc10      	bgt.n	32c8 <NOROM_RFCRfTrimRead+0x4c>
    32a6:	2b05      	cmp	r3, #5
    32a8:	d021      	beq.n	32ee <NOROM_RFCRfTrimRead+0x72>
    32aa:	2b06      	cmp	r3, #6
    32ac:	d153      	bne.n	3356 <NOROM_RFCRfTrimRead+0xda>
    32ae:	4b32      	ldr	r3, [pc, #200]	; (3378 <NOROM_RFCRfTrimRead+0xfc>)
    32b0:	681b      	ldr	r3, [r3, #0]
    32b2:	604b      	str	r3, [r1, #4]
    32b4:	4b31      	ldr	r3, [pc, #196]	; (337c <NOROM_RFCRfTrimRead+0x100>)
    32b6:	681b      	ldr	r3, [r3, #0]
    32b8:	608b      	str	r3, [r1, #8]
    32ba:	4b31      	ldr	r3, [pc, #196]	; (3380 <NOROM_RFCRfTrimRead+0x104>)
    32bc:	681b      	ldr	r3, [r3, #0]
    32be:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    32c2:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    32c6:	e052      	b.n	336e <NOROM_RFCRfTrimRead+0xf2>
    32c8:	2b0f      	cmp	r3, #15
    32ca:	d02a      	beq.n	3322 <NOROM_RFCRfTrimRead+0xa6>
    32cc:	2b1e      	cmp	r3, #30
    32ce:	d035      	beq.n	333c <NOROM_RFCRfTrimRead+0xc0>
    32d0:	2b0c      	cmp	r3, #12
    32d2:	d140      	bne.n	3356 <NOROM_RFCRfTrimRead+0xda>
    32d4:	4b2b      	ldr	r3, [pc, #172]	; (3384 <NOROM_RFCRfTrimRead+0x108>)
    32d6:	681b      	ldr	r3, [r3, #0]
    32d8:	604b      	str	r3, [r1, #4]
    32da:	4b2b      	ldr	r3, [pc, #172]	; (3388 <NOROM_RFCRfTrimRead+0x10c>)
    32dc:	681b      	ldr	r3, [r3, #0]
    32de:	608b      	str	r3, [r1, #8]
    32e0:	4b2a      	ldr	r3, [pc, #168]	; (338c <NOROM_RFCRfTrimRead+0x110>)
    32e2:	681b      	ldr	r3, [r3, #0]
    32e4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    32e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
    32ec:	e03f      	b.n	336e <NOROM_RFCRfTrimRead+0xf2>
    32ee:	4b28      	ldr	r3, [pc, #160]	; (3390 <NOROM_RFCRfTrimRead+0x114>)
    32f0:	681b      	ldr	r3, [r3, #0]
    32f2:	604b      	str	r3, [r1, #4]
    32f4:	4b27      	ldr	r3, [pc, #156]	; (3394 <NOROM_RFCRfTrimRead+0x118>)
    32f6:	681b      	ldr	r3, [r3, #0]
    32f8:	608b      	str	r3, [r1, #8]
    32fa:	4b27      	ldr	r3, [pc, #156]	; (3398 <NOROM_RFCRfTrimRead+0x11c>)
    32fc:	681b      	ldr	r3, [r3, #0]
    32fe:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3302:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
    3306:	e032      	b.n	336e <NOROM_RFCRfTrimRead+0xf2>
    3308:	4b24      	ldr	r3, [pc, #144]	; (339c <NOROM_RFCRfTrimRead+0x120>)
    330a:	681b      	ldr	r3, [r3, #0]
    330c:	604b      	str	r3, [r1, #4]
    330e:	4b24      	ldr	r3, [pc, #144]	; (33a0 <NOROM_RFCRfTrimRead+0x124>)
    3310:	681b      	ldr	r3, [r3, #0]
    3312:	608b      	str	r3, [r1, #8]
    3314:	4b23      	ldr	r3, [pc, #140]	; (33a4 <NOROM_RFCRfTrimRead+0x128>)
    3316:	681b      	ldr	r3, [r3, #0]
    3318:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    331c:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
    3320:	e025      	b.n	336e <NOROM_RFCRfTrimRead+0xf2>
    3322:	4b21      	ldr	r3, [pc, #132]	; (33a8 <NOROM_RFCRfTrimRead+0x12c>)
    3324:	681b      	ldr	r3, [r3, #0]
    3326:	604b      	str	r3, [r1, #4]
    3328:	4b20      	ldr	r3, [pc, #128]	; (33ac <NOROM_RFCRfTrimRead+0x130>)
    332a:	681b      	ldr	r3, [r3, #0]
    332c:	608b      	str	r3, [r1, #8]
    332e:	4b20      	ldr	r3, [pc, #128]	; (33b0 <NOROM_RFCRfTrimRead+0x134>)
    3330:	681b      	ldr	r3, [r3, #0]
    3332:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3336:	f043 43f0 	orr.w	r3, r3, #2013265920	; 0x78000000
    333a:	e018      	b.n	336e <NOROM_RFCRfTrimRead+0xf2>
    333c:	4b1d      	ldr	r3, [pc, #116]	; (33b4 <NOROM_RFCRfTrimRead+0x138>)
    333e:	681b      	ldr	r3, [r3, #0]
    3340:	604b      	str	r3, [r1, #4]
    3342:	4b1d      	ldr	r3, [pc, #116]	; (33b8 <NOROM_RFCRfTrimRead+0x13c>)
    3344:	681b      	ldr	r3, [r3, #0]
    3346:	608b      	str	r3, [r1, #8]
    3348:	4b1c      	ldr	r3, [pc, #112]	; (33bc <NOROM_RFCRfTrimRead+0x140>)
    334a:	681b      	ldr	r3, [r3, #0]
    334c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3350:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
    3354:	e00b      	b.n	336e <NOROM_RFCRfTrimRead+0xf2>
    3356:	4b1a      	ldr	r3, [pc, #104]	; (33c0 <NOROM_RFCRfTrimRead+0x144>)
    3358:	681b      	ldr	r3, [r3, #0]
    335a:	604b      	str	r3, [r1, #4]
    335c:	4b19      	ldr	r3, [pc, #100]	; (33c4 <NOROM_RFCRfTrimRead+0x148>)
    335e:	681b      	ldr	r3, [r3, #0]
    3360:	608b      	str	r3, [r1, #8]
    3362:	4b19      	ldr	r3, [pc, #100]	; (33c8 <NOROM_RFCRfTrimRead+0x14c>)
    3364:	681b      	ldr	r3, [r3, #0]
    3366:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    336a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    336e:	60cb      	str	r3, [r1, #12]
    3370:	4770      	bx	lr
    3372:	bf00      	nop
    3374:	5000134c 	andpl	r1, r0, ip, asr #6
    3378:	500010c8 	andpl	r1, r0, r8, asr #1
    337c:	500010e0 	andpl	r1, r0, r0, ror #1
    3380:	500010f8 	strdpl	r1, [r0], -r8
    3384:	500010d0 	ldrdpl	r1, [r0], -r0
    3388:	500010e8 	andpl	r1, r0, r8, ror #1
    338c:	50001100 	andpl	r1, r0, r0, lsl #2
    3390:	500010c4 	andpl	r1, r0, r4, asr #1
    3394:	500010dc 	ldrdpl	r1, [r0], -ip
    3398:	500010f4 	strdpl	r1, [r0], -r4
    339c:	500010cc 	andpl	r1, r0, ip, asr #1
    33a0:	500010e4 	andpl	r1, r0, r4, ror #1
    33a4:	500010fc 	strdpl	r1, [r0], -ip
    33a8:	500010d4 	ldrdpl	r1, [r0], -r4
    33ac:	500010ec 	andpl	r1, r0, ip, ror #1
    33b0:	50001104 	andpl	r1, r0, r4, lsl #2
    33b4:	500010d8 	ldrdpl	r1, [r0], -r8
    33b8:	500010f0 	strdpl	r1, [r0], -r0
    33bc:	50001108 	andpl	r1, r0, r8, lsl #2
    33c0:	50001354 	andpl	r1, r0, r4, asr r3
    33c4:	50001358 	andpl	r1, r0, r8, asr r3
    33c8:	50001380 	andpl	r1, r0, r0, lsl #7

000033cc <NOROM_RFCRTrim>:
    33cc:	f643 0206 	movw	r2, #14342	; 0x3806
    33d0:	b570      	push	{r4, r5, r6, lr}
    33d2:	8803      	ldrh	r3, [r0, #0]
    33d4:	4293      	cmp	r3, r2
    33d6:	d00a      	beq.n	33ee <NOROM_RFCRTrim+0x22>
    33d8:	f643 0207 	movw	r2, #14343	; 0x3807
    33dc:	4293      	cmp	r3, r2
    33de:	d009      	beq.n	33f4 <NOROM_RFCRTrim+0x28>
    33e0:	f640 0202 	movw	r2, #2050	; 0x802
    33e4:	4293      	cmp	r3, r2
    33e6:	d16b      	bne.n	34c0 <NOROM_RFCRTrim+0xf4>
    33e8:	7bc1      	ldrb	r1, [r0, #15]
    33ea:	6943      	ldr	r3, [r0, #20]
    33ec:	e005      	b.n	33fa <NOROM_RFCRTrim+0x2e>
    33ee:	69c3      	ldr	r3, [r0, #28]
    33f0:	2102      	movs	r1, #2
    33f2:	e002      	b.n	33fa <NOROM_RFCRTrim+0x2e>
    33f4:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    33f8:	69c3      	ldr	r3, [r0, #28]
    33fa:	2b00      	cmp	r3, #0
    33fc:	d060      	beq.n	34c0 <NOROM_RFCRTrim+0xf4>
    33fe:	f103 0414 	add.w	r4, r3, #20
    3402:	f244 0538 	movw	r5, #16440	; 0x4038
    3406:	681a      	ldr	r2, [r3, #0]
    3408:	4618      	mov	r0, r3
    340a:	b296      	uxth	r6, r2
    340c:	42ae      	cmp	r6, r5
    340e:	f103 0304 	add.w	r3, r3, #4
    3412:	d103      	bne.n	341c <NOROM_RFCRTrim+0x50>
    3414:	f3c2 4403 	ubfx	r4, r2, #16, #4
    3418:	b91c      	cbnz	r4, 3422 <NOROM_RFCRTrim+0x56>
    341a:	bd70      	pop	{r4, r5, r6, pc}
    341c:	42a3      	cmp	r3, r4
    341e:	d1f0      	bne.n	3402 <NOROM_RFCRTrim+0x36>
    3420:	bd70      	pop	{r4, r5, r6, pc}
    3422:	290a      	cmp	r1, #10
    3424:	d01d      	beq.n	3462 <NOROM_RFCRTrim+0x96>
    3426:	dc06      	bgt.n	3436 <NOROM_RFCRTrim+0x6a>
    3428:	2905      	cmp	r1, #5
    342a:	d013      	beq.n	3454 <NOROM_RFCRTrim+0x88>
    342c:	2906      	cmp	r1, #6
    342e:	d016      	beq.n	345e <NOROM_RFCRTrim+0x92>
    3430:	2902      	cmp	r1, #2
    3432:	d11f      	bne.n	3474 <NOROM_RFCRTrim+0xa8>
    3434:	e007      	b.n	3446 <NOROM_RFCRTrim+0x7a>
    3436:	290f      	cmp	r1, #15
    3438:	d015      	beq.n	3466 <NOROM_RFCRTrim+0x9a>
    343a:	291e      	cmp	r1, #30
    343c:	d015      	beq.n	346a <NOROM_RFCRTrim+0x9e>
    343e:	290c      	cmp	r1, #12
    3440:	d118      	bne.n	3474 <NOROM_RFCRTrim+0xa8>
    3442:	4b20      	ldr	r3, [pc, #128]	; (34c4 <NOROM_RFCRTrim+0xf8>)
    3444:	e012      	b.n	346c <NOROM_RFCRTrim+0xa0>
    3446:	4b20      	ldr	r3, [pc, #128]	; (34c8 <NOROM_RFCRTrim+0xfc>)
    3448:	681b      	ldr	r3, [r3, #0]
    344a:	f3c3 4383 	ubfx	r3, r3, #18, #4
    344e:	2b0f      	cmp	r3, #15
    3450:	d12a      	bne.n	34a8 <NOROM_RFCRTrim+0xdc>
    3452:	e023      	b.n	349c <NOROM_RFCRTrim+0xd0>
    3454:	4b1d      	ldr	r3, [pc, #116]	; (34cc <NOROM_RFCRTrim+0x100>)
    3456:	681b      	ldr	r3, [r3, #0]
    3458:	f3c3 2303 	ubfx	r3, r3, #8, #4
    345c:	e02c      	b.n	34b8 <NOROM_RFCRTrim+0xec>
    345e:	4b1c      	ldr	r3, [pc, #112]	; (34d0 <NOROM_RFCRTrim+0x104>)
    3460:	e004      	b.n	346c <NOROM_RFCRTrim+0xa0>
    3462:	4b1c      	ldr	r3, [pc, #112]	; (34d4 <NOROM_RFCRTrim+0x108>)
    3464:	e002      	b.n	346c <NOROM_RFCRTrim+0xa0>
    3466:	4b1c      	ldr	r3, [pc, #112]	; (34d8 <NOROM_RFCRTrim+0x10c>)
    3468:	e000      	b.n	346c <NOROM_RFCRTrim+0xa0>
    346a:	4b1c      	ldr	r3, [pc, #112]	; (34dc <NOROM_RFCRTrim+0x110>)
    346c:	681b      	ldr	r3, [r3, #0]
    346e:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3472:	e021      	b.n	34b8 <NOROM_RFCRTrim+0xec>
    3474:	4b14      	ldr	r3, [pc, #80]	; (34c8 <NOROM_RFCRTrim+0xfc>)
    3476:	681b      	ldr	r3, [r3, #0]
    3478:	f3c3 4383 	ubfx	r3, r3, #18, #4
    347c:	2b0f      	cmp	r3, #15
    347e:	d113      	bne.n	34a8 <NOROM_RFCRTrim+0xdc>
    3480:	3905      	subs	r1, #5
    3482:	2919      	cmp	r1, #25
    3484:	d80a      	bhi.n	349c <NOROM_RFCRTrim+0xd0>
    3486:	2301      	movs	r3, #1
    3488:	fa03 f101 	lsl.w	r1, r3, r1
    348c:	4b14      	ldr	r3, [pc, #80]	; (34e0 <NOROM_RFCRTrim+0x114>)
    348e:	400b      	ands	r3, r1
    3490:	b123      	cbz	r3, 349c <NOROM_RFCRTrim+0xd0>
    3492:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3496:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    349a:	e003      	b.n	34a4 <NOROM_RFCRTrim+0xd8>
    349c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    34a0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    34a4:	6002      	str	r2, [r0, #0]
    34a6:	bd70      	pop	{r4, r5, r6, pc}
    34a8:	429c      	cmp	r4, r3
    34aa:	d209      	bcs.n	34c0 <NOROM_RFCRTrim+0xf4>
    34ac:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    34b0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    34b4:	6003      	str	r3, [r0, #0]
    34b6:	bd70      	pop	{r4, r5, r6, pc}
    34b8:	2b0f      	cmp	r3, #15
    34ba:	d1f5      	bne.n	34a8 <NOROM_RFCRTrim+0xdc>
    34bc:	3905      	subs	r1, #5
    34be:	e7e2      	b.n	3486 <NOROM_RFCRTrim+0xba>
    34c0:	bd70      	pop	{r4, r5, r6, pc}
    34c2:	bf00      	nop
    34c4:	50001100 	andpl	r1, r0, r0, lsl #2
    34c8:	50001380 	andpl	r1, r0, r0, lsl #7
    34cc:	50001320 	andpl	r1, r0, r0, lsr #6
    34d0:	500010f8 	strdpl	r1, [r0], -r8
    34d4:	500010fc 	strdpl	r1, [r0], -ip
    34d8:	50001104 	andpl	r1, r0, r4, lsl #2
    34dc:	50001108 	andpl	r1, r0, r8, lsl #2
    34e0:	02000421 	andeq	r0, r0, #553648128	; 0x21000000

000034e4 <NOROM_RFCRfTrimSet>:
    34e4:	4603      	mov	r3, r0
    34e6:	b530      	push	{r4, r5, lr}
    34e8:	4c05      	ldr	r4, [pc, #20]	; (3500 <NOROM_RFCRfTrimSet+0x1c>)
    34ea:	f100 0510 	add.w	r5, r0, #16
    34ee:	4622      	mov	r2, r4
    34f0:	6818      	ldr	r0, [r3, #0]
    34f2:	6859      	ldr	r1, [r3, #4]
    34f4:	3308      	adds	r3, #8
    34f6:	c203      	stmia	r2!, {r0, r1}
    34f8:	42ab      	cmp	r3, r5
    34fa:	4614      	mov	r4, r2
    34fc:	d1f7      	bne.n	34ee <NOROM_RFCRfTrimSet+0xa>
    34fe:	bd30      	pop	{r4, r5, pc}
    3500:	21000018 	tstcs	r0, r8, lsl r0

00003504 <NOROM_RFCAdi3VcoLdoVoltageMode>:
    3504:	4b04      	ldr	r3, [pc, #16]	; (3518 <NOROM_RFCAdi3VcoLdoVoltageMode+0x14>)
    3506:	b128      	cbz	r0, 3514 <NOROM_RFCAdi3VcoLdoVoltageMode+0x10>
    3508:	4a04      	ldr	r2, [pc, #16]	; (351c <NOROM_RFCAdi3VcoLdoVoltageMode+0x18>)
    350a:	2100      	movs	r1, #0
    350c:	7011      	strb	r1, [r2, #0]
    350e:	2220      	movs	r2, #32
    3510:	701a      	strb	r2, [r3, #0]
    3512:	4770      	bx	lr
    3514:	7018      	strb	r0, [r3, #0]
    3516:	4770      	bx	lr
    3518:	40086202 	andmi	r6, r8, r2, lsl #4
    351c:	40086200 	andmi	r6, r8, r0, lsl #4

00003520 <TrimAfterColdResetWakeupFromShutDown>:
    3520:	b538      	push	{r3, r4, r5, lr}
    3522:	4605      	mov	r5, r0
    3524:	4b26      	ldr	r3, [pc, #152]	; (35c0 <TrimAfterColdResetWakeupFromShutDown+0xa0>)
    3526:	2201      	movs	r2, #1
    3528:	601a      	str	r2, [r3, #0]
    352a:	4b26      	ldr	r3, [pc, #152]	; (35c4 <TrimAfterColdResetWakeupFromShutDown+0xa4>)
    352c:	681b      	ldr	r3, [r3, #0]
    352e:	2b00      	cmp	r3, #0
    3530:	d0fb      	beq.n	352a <TrimAfterColdResetWakeupFromShutDown+0xa>
    3532:	4b25      	ldr	r3, [pc, #148]	; (35c8 <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    3534:	22c0      	movs	r2, #192	; 0xc0
    3536:	601a      	str	r2, [r3, #0]
    3538:	4b24      	ldr	r3, [pc, #144]	; (35cc <TrimAfterColdResetWakeupFromShutDown+0xac>)
    353a:	681b      	ldr	r3, [r3, #0]
    353c:	079b      	lsls	r3, r3, #30
    353e:	bf5f      	itttt	pl
    3540:	4b23      	ldrpl	r3, [pc, #140]	; (35d0 <TrimAfterColdResetWakeupFromShutDown+0xb0>)
    3542:	4a24      	ldrpl	r2, [pc, #144]	; (35d4 <TrimAfterColdResetWakeupFromShutDown+0xb4>)
    3544:	681b      	ldrpl	r3, [r3, #0]
    3546:	f3c3 4303 	ubfxpl	r3, r3, #16, #4
    354a:	bf5c      	itt	pl
    354c:	f043 03f0 	orrpl.w	r3, r3, #240	; 0xf0
    3550:	7013      	strbpl	r3, [r2, #0]
    3552:	4b21      	ldr	r3, [pc, #132]	; (35d8 <TrimAfterColdResetWakeupFromShutDown+0xb8>)
    3554:	2200      	movs	r2, #0
    3556:	601a      	str	r2, [r3, #0]
    3558:	4b20      	ldr	r3, [pc, #128]	; (35dc <TrimAfterColdResetWakeupFromShutDown+0xbc>)
    355a:	681c      	ldr	r4, [r3, #0]
    355c:	4620      	mov	r0, r4
    355e:	f000 f8d9 	bl	3714 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>
    3562:	4628      	mov	r0, r5
    3564:	4621      	mov	r1, r4
    3566:	f000 fa0d 	bl	3984 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>
    356a:	f240 221d 	movw	r2, #541	; 0x21d
    356e:	4b1c      	ldr	r3, [pc, #112]	; (35e0 <TrimAfterColdResetWakeupFromShutDown+0xc0>)
    3570:	681b      	ldr	r3, [r3, #0]
    3572:	b29b      	uxth	r3, r3
    3574:	4293      	cmp	r3, r2
    3576:	d814      	bhi.n	35a2 <TrimAfterColdResetWakeupFromShutDown+0x82>
    3578:	4a1a      	ldr	r2, [pc, #104]	; (35e4 <TrimAfterColdResetWakeupFromShutDown+0xc4>)
    357a:	6813      	ldr	r3, [r2, #0]
    357c:	6812      	ldr	r2, [r2, #0]
    357e:	f3c3 6303 	ubfx	r3, r3, #24, #4
    3582:	f3c2 4203 	ubfx	r2, r2, #16, #4
    3586:	b103      	cbz	r3, 358a <TrimAfterColdResetWakeupFromShutDown+0x6a>
    3588:	3b01      	subs	r3, #1
    358a:	1f91      	subs	r1, r2, #6
    358c:	2901      	cmp	r1, #1
    358e:	bf86      	itte	hi
    3590:	3202      	addhi	r2, #2
    3592:	f002 020f 	andhi.w	r2, r2, #15
    3596:	2207      	movls	r2, #7
    3598:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    359c:	4a12      	ldr	r2, [pc, #72]	; (35e8 <TrimAfterColdResetWakeupFromShutDown+0xc8>)
    359e:	b2db      	uxtb	r3, r3
    35a0:	7013      	strb	r3, [r2, #0]
    35a2:	4620      	mov	r0, r4
    35a4:	f000 fabc 	bl	3b20 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>
    35a8:	4b10      	ldr	r3, [pc, #64]	; (35ec <TrimAfterColdResetWakeupFromShutDown+0xcc>)
    35aa:	2002      	movs	r0, #2
    35ac:	681b      	ldr	r3, [r3, #0]
    35ae:	68db      	ldr	r3, [r3, #12]
    35b0:	4798      	blx	r3
    35b2:	4b05      	ldr	r3, [pc, #20]	; (35c8 <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    35b4:	2240      	movs	r2, #64	; 0x40
    35b6:	601a      	str	r2, [r3, #0]
    35b8:	4b0d      	ldr	r3, [pc, #52]	; (35f0 <TrimAfterColdResetWakeupFromShutDown+0xd0>)
    35ba:	2201      	movs	r2, #1
    35bc:	601a      	str	r2, [r3, #0]
    35be:	bd38      	pop	{r3, r4, r5, pc}
    35c0:	40091010 	andmi	r1, r9, r0, lsl r0
    35c4:	43220294 			; <UNDEFINED> instruction: 0x43220294
    35c8:	400c6000 	andmi	r6, ip, r0
    35cc:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    35d0:	50003fac 	andpl	r3, r0, ip, lsr #31
    35d4:	40086256 	andmi	r6, r8, r6, asr r2
    35d8:	40091040 	andmi	r1, r9, r0, asr #32
    35dc:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    35e0:	50001314 	andpl	r1, r0, r4, lsl r3
    35e4:	500012bc 			; <UNDEFINED> instruction: 0x500012bc
    35e8:	40086002 	andmi	r6, r8, r2
    35ec:	100001a0 	andne	r0, r0, r0, lsr #3
    35f0:	42600494 	rsbmi	r0, r0, #148, 8	; 0x94000000

000035f4 <NOROM_SetupTrimDevice>:
    35f4:	b510      	push	{r4, lr}
    35f6:	4b1f      	ldr	r3, [pc, #124]	; (3674 <NOROM_SetupTrimDevice+0x80>)
    35f8:	681c      	ldr	r4, [r3, #0]
    35fa:	1c63      	adds	r3, r4, #1
    35fc:	bf08      	it	eq
    35fe:	2400      	moveq	r4, #0
    3600:	f000 fcde 	bl	3fc0 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    3604:	4b1c      	ldr	r3, [pc, #112]	; (3678 <NOROM_SetupTrimDevice+0x84>)
    3606:	2200      	movs	r2, #0
    3608:	601a      	str	r2, [r3, #0]
    360a:	4a1c      	ldr	r2, [pc, #112]	; (367c <NOROM_SetupTrimDevice+0x88>)
    360c:	2301      	movs	r3, #1
    360e:	6013      	str	r3, [r2, #0]
    3610:	4a1b      	ldr	r2, [pc, #108]	; (3680 <NOROM_SetupTrimDevice+0x8c>)
    3612:	6013      	str	r3, [r2, #0]
    3614:	f000 fa3e 	bl	3a94 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>
    3618:	4b1a      	ldr	r3, [pc, #104]	; (3684 <NOROM_SetupTrimDevice+0x90>)
    361a:	681b      	ldr	r3, [r3, #0]
    361c:	b123      	cbz	r3, 3628 <NOROM_SetupTrimDevice+0x34>
    361e:	4b1a      	ldr	r3, [pc, #104]	; (3688 <NOROM_SetupTrimDevice+0x94>)
    3620:	4620      	mov	r0, r4
    3622:	681b      	ldr	r3, [r3, #0]
    3624:	f7ff ff7c 	bl	3520 <TrimAfterColdResetWakeupFromShutDown>
    3628:	4b18      	ldr	r3, [pc, #96]	; (368c <NOROM_SetupTrimDevice+0x98>)
    362a:	2200      	movs	r2, #0
    362c:	601a      	str	r2, [r3, #0]
    362e:	4a18      	ldr	r2, [pc, #96]	; (3690 <NOROM_SetupTrimDevice+0x9c>)
    3630:	6813      	ldr	r3, [r2, #0]
    3632:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
    3636:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    363a:	f043 739c 	orr.w	r3, r3, #20447232	; 0x1380000
    363e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3642:	6013      	str	r3, [r2, #0]
    3644:	f502 22bb 	add.w	r2, r2, #382976	; 0x5d800
    3648:	f202 72bc 	addw	r2, r2, #1980	; 0x7bc
    364c:	6813      	ldr	r3, [r2, #0]
    364e:	f3c3 3301 	ubfx	r3, r3, #12, #2
    3652:	2b01      	cmp	r3, #1
    3654:	bf01      	itttt	eq
    3656:	6813      	ldreq	r3, [r2, #0]
    3658:	f023 7340 	biceq.w	r3, r3, #50331648	; 0x3000000
    365c:	f423 3340 	biceq.w	r3, r3, #196608	; 0x30000
    3660:	f443 3100 	orreq.w	r1, r3, #131072	; 0x20000
    3664:	bf04      	itt	eq
    3666:	6011      	streq	r1, [r2, #0]
    3668:	6013      	streq	r3, [r2, #0]
    366a:	4b0a      	ldr	r3, [pc, #40]	; (3694 <NOROM_SetupTrimDevice+0xa0>)
    366c:	681b      	ldr	r3, [r3, #0]
    366e:	2b00      	cmp	r3, #0
    3670:	d1fb      	bne.n	366a <NOROM_SetupTrimDevice+0x76>
    3672:	bd10      	pop	{r4, pc}
    3674:	5000131c 	andpl	r1, r0, ip, lsl r3
    3678:	42600484 	rsbmi	r0, r0, #132, 8	; 0x84000000
    367c:	400c605c 	andmi	r6, ip, ip, asr r0
    3680:	43042208 	movwmi	r2, #16904	; 0x4208
    3684:	43280180 			; <UNDEFINED> instruction: 0x43280180
    3688:	43200100 	nopmi	{0}	; <UNPREDICTABLE>
    368c:	4008218c 	andmi	r2, r8, ip, lsl #3
    3690:	40032048 	andmi	r2, r3, r8, asr #32
    3694:	4268000c 	rsbmi	r0, r8, #12

00003698 <NOROM_SetupSetVddrLevel>:
    3698:	b530      	push	{r4, r5, lr}
    369a:	4b19      	ldr	r3, [pc, #100]	; (3700 <NOROM_SetupSetVddrLevel+0x68>)
    369c:	681a      	ldr	r2, [r3, #0]
    369e:	4b19      	ldr	r3, [pc, #100]	; (3704 <NOROM_SetupSetVddrLevel+0x6c>)
    36a0:	f3c2 6204 	ubfx	r2, r2, #24, #5
    36a4:	781b      	ldrb	r3, [r3, #0]
    36a6:	2a15      	cmp	r2, #21
    36a8:	f003 031f 	and.w	r3, r3, #31
    36ac:	bf88      	it	hi
    36ae:	3a20      	subhi	r2, #32
    36b0:	2b15      	cmp	r3, #21
    36b2:	bf88      	it	hi
    36b4:	3b20      	subhi	r3, #32
    36b6:	4293      	cmp	r3, r2
    36b8:	d020      	beq.n	36fc <NOROM_SetupSetVddrLevel+0x64>
    36ba:	4913      	ldr	r1, [pc, #76]	; (3708 <NOROM_SetupSetVddrLevel+0x70>)
    36bc:	2000      	movs	r0, #0
    36be:	6008      	str	r0, [r1, #0]
    36c0:	4608      	mov	r0, r1
    36c2:	1ad1      	subs	r1, r2, r3
    36c4:	2902      	cmp	r1, #2
    36c6:	dc05      	bgt.n	36d4 <NOROM_SetupSetVddrLevel+0x3c>
    36c8:	f06f 0401 	mvn.w	r4, #1
    36cc:	42a1      	cmp	r1, r4
    36ce:	bfb8      	it	lt
    36d0:	4621      	movlt	r1, r4
    36d2:	e000      	b.n	36d6 <NOROM_SetupSetVddrLevel+0x3e>
    36d4:	2102      	movs	r1, #2
    36d6:	440b      	add	r3, r1
    36d8:	490c      	ldr	r1, [pc, #48]	; (370c <NOROM_SetupSetVddrLevel+0x74>)
    36da:	4d0d      	ldr	r5, [pc, #52]	; (3710 <NOROM_SetupSetVddrLevel+0x78>)
    36dc:	680c      	ldr	r4, [r1, #0]
    36de:	f003 041f 	and.w	r4, r3, #31
    36e2:	f444 54f8 	orr.w	r4, r4, #7936	; 0x1f00
    36e6:	802c      	strh	r4, [r5, #0]
    36e8:	4293      	cmp	r3, r2
    36ea:	f04f 0401 	mov.w	r4, #1
    36ee:	600c      	str	r4, [r1, #0]
    36f0:	d1e7      	bne.n	36c2 <NOROM_SetupSetVddrLevel+0x2a>
    36f2:	680b      	ldr	r3, [r1, #0]
    36f4:	600c      	str	r4, [r1, #0]
    36f6:	680b      	ldr	r3, [r1, #0]
    36f8:	6004      	str	r4, [r0, #0]
    36fa:	680b      	ldr	r3, [r1, #0]
    36fc:	bd30      	pop	{r4, r5, pc}
    36fe:	bf00      	nop
    3700:	50001388 	andpl	r1, r0, r8, lsl #7
    3704:	40086206 	andmi	r6, r8, r6, lsl #4
    3708:	43200098 			; <UNDEFINED> instruction: 0x43200098
    370c:	4009202c 	andmi	r2, r9, ip, lsr #32
    3710:	4008626c 	andmi	r6, r8, ip, ror #4

00003714 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>:
    3714:	f000 7340 	and.w	r3, r0, #50331648	; 0x3000000
    3718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    371c:	b510      	push	{r4, lr}
    371e:	4604      	mov	r4, r0
    3720:	d10f      	bne.n	3742 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x2e>
    3722:	f64f 01d8 	movw	r1, #63704	; 0xf8d8
    3726:	4a1e      	ldr	r2, [pc, #120]	; (37a0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8c>)
    3728:	2380      	movs	r3, #128	; 0x80
    372a:	7013      	strb	r3, [r2, #0]
    372c:	f8a2 1041 	strh.w	r1, [r2, #65]	; 0x41
    3730:	f802 3c10 	strb.w	r3, [r2, #-16]
    3734:	f7ff ffb0 	bl	3698 <NOROM_SetupSetVddrLevel>
    3738:	4b1a      	ldr	r3, [pc, #104]	; (37a4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x90>)
    373a:	681b      	ldr	r3, [r3, #0]
    373c:	f3c3 2304 	ubfx	r3, r3, #8, #5
    3740:	e003      	b.n	374a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x36>
    3742:	4b19      	ldr	r3, [pc, #100]	; (37a8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x94>)
    3744:	681b      	ldr	r3, [r3, #0]
    3746:	f3c3 6304 	ubfx	r3, r3, #24, #5
    374a:	2b15      	cmp	r3, #21
    374c:	bf88      	it	hi
    374e:	3b20      	subhi	r3, #32
    3750:	eb03 7324 	add.w	r3, r3, r4, asr #28
    3754:	3301      	adds	r3, #1
    3756:	2b15      	cmp	r3, #21
    3758:	dc05      	bgt.n	3766 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x52>
    375a:	f06f 0209 	mvn.w	r2, #9
    375e:	4293      	cmp	r3, r2
    3760:	bfb8      	it	lt
    3762:	4613      	movlt	r3, r2
    3764:	e000      	b.n	3768 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x54>
    3766:	2315      	movs	r3, #21
    3768:	4a10      	ldr	r2, [pc, #64]	; (37ac <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x98>)
    376a:	f003 031f 	and.w	r3, r3, #31
    376e:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
    3772:	8013      	strh	r3, [r2, #0]
    3774:	4b0e      	ldr	r3, [pc, #56]	; (37b0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x9c>)
    3776:	681b      	ldr	r3, [r3, #0]
    3778:	f013 0302 	ands.w	r3, r3, #2
    377c:	bf0a      	itet	eq
    377e:	4a0d      	ldreq	r2, [pc, #52]	; (37b4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa0>)
    3780:	f044 6440 	orrne.w	r4, r4, #201326592	; 0xc000000
    3784:	6013      	streq	r3, [r2, #0]
    3786:	f3c4 63c0 	ubfx	r3, r4, #27, #1
    378a:	4a0b      	ldr	r2, [pc, #44]	; (37b8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa4>)
    378c:	f083 0301 	eor.w	r3, r3, #1
    3790:	6013      	str	r3, [r2, #0]
    3792:	f3c4 6480 	ubfx	r4, r4, #26, #1
    3796:	4b09      	ldr	r3, [pc, #36]	; (37bc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>)
    3798:	f084 0401 	eor.w	r4, r4, #1
    379c:	601c      	str	r4, [r3, #0]
    379e:	bd10      	pop	{r4, pc}
    37a0:	40086225 	andmi	r6, r8, r5, lsr #4
    37a4:	50001388 	andpl	r1, r0, r8, lsl #7
    37a8:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    37ac:	4008626e 	andmi	r6, r8, lr, ror #4
    37b0:	40090000 	andmi	r0, r9, r0
    37b4:	432a0494 			; <UNDEFINED> instruction: 0x432a0494
    37b8:	43200000 	nopmi	{0}	; <UNPREDICTABLE>
    37bc:	43200008 			; <UNDEFINED> instruction: 0x43200008

000037c0 <NOROM_SetupGetTrimForAnabypassValue1>:
    37c0:	4b15      	ldr	r3, [pc, #84]	; (3818 <NOROM_SetupGetTrimForAnabypassValue1+0x58>)
    37c2:	0381      	lsls	r1, r0, #14
    37c4:	681b      	ldr	r3, [r3, #0]
    37c6:	f3c3 6283 	ubfx	r2, r3, #26, #4
    37ca:	f3c3 238f 	ubfx	r3, r3, #10, #16
    37ce:	d41f      	bmi.n	3810 <NOROM_SetupGetTrimForAnabypassValue1+0x50>
    37d0:	f340 2007 	sbfx	r0, r0, #8, #8
    37d4:	2800      	cmp	r0, #0
    37d6:	da19      	bge.n	380c <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    37d8:	085b      	lsrs	r3, r3, #1
    37da:	d105      	bne.n	37e8 <NOROM_SetupGetTrimForAnabypassValue1+0x28>
    37dc:	0852      	lsrs	r2, r2, #1
    37de:	bf06      	itte	eq
    37e0:	2301      	moveq	r3, #1
    37e2:	461a      	moveq	r2, r3
    37e4:	f64f 73ff 	movwne	r3, #65535	; 0xffff
    37e8:	3001      	adds	r0, #1
    37ea:	e7f3      	b.n	37d4 <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    37ec:	005b      	lsls	r3, r3, #1
    37ee:	f043 0301 	orr.w	r3, r3, #1
    37f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    37f6:	d308      	bcc.n	380a <NOROM_SetupGetTrimForAnabypassValue1+0x4a>
    37f8:	0052      	lsls	r2, r2, #1
    37fa:	f042 0201 	orr.w	r2, r2, #1
    37fe:	2a0f      	cmp	r2, #15
    3800:	bf86      	itte	hi
    3802:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
    3806:	220f      	movhi	r2, #15
    3808:	2301      	movls	r3, #1
    380a:	3801      	subs	r0, #1
    380c:	2800      	cmp	r0, #0
    380e:	d1ed      	bne.n	37ec <NOROM_SetupGetTrimForAnabypassValue1+0x2c>
    3810:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
    3814:	4770      	bx	lr
    3816:	bf00      	nop
    3818:	50001350 	andpl	r1, r0, r0, asr r3

0000381c <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>:
    381c:	4a04      	ldr	r2, [pc, #16]	; (3830 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>)
    381e:	6813      	ldr	r3, [r2, #0]
    3820:	6810      	ldr	r0, [r2, #0]
    3822:	f3c3 0387 	ubfx	r3, r3, #2, #8
    3826:	f000 0003 	and.w	r0, r0, #3
    382a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    382e:	4770      	bx	lr
    3830:	50001350 	andpl	r1, r0, r0, asr r3

00003834 <NOROM_SetupGetTrimForAmpcompTh2>:
    3834:	4b02      	ldr	r3, [pc, #8]	; (3840 <NOROM_SetupGetTrimForAmpcompTh2+0xc>)
    3836:	6818      	ldr	r0, [r3, #0]
    3838:	f000 30fc 	and.w	r0, r0, #4244438268	; 0xfcfcfcfc
    383c:	4770      	bx	lr
    383e:	bf00      	nop
    3840:	50001374 	andpl	r1, r0, r4, ror r3

00003844 <NOROM_SetupGetTrimForAmpcompTh1>:
    3844:	4b03      	ldr	r3, [pc, #12]	; (3854 <NOROM_SetupGetTrimForAmpcompTh1+0x10>)
    3846:	6818      	ldr	r0, [r3, #0]
    3848:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    384c:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    3850:	4770      	bx	lr
    3852:	bf00      	nop
    3854:	50001370 	andpl	r1, r0, r0, ror r3

00003858 <NOROM_SetupGetTrimForAmpcompCtrl>:
    3858:	b570      	push	{r4, r5, r6, lr}
    385a:	4b15      	ldr	r3, [pc, #84]	; (38b0 <NOROM_SetupGetTrimForAmpcompCtrl+0x58>)
    385c:	4915      	ldr	r1, [pc, #84]	; (38b4 <NOROM_SetupGetTrimForAmpcompCtrl+0x5c>)
    385e:	681c      	ldr	r4, [r3, #0]
    3860:	6809      	ldr	r1, [r1, #0]
    3862:	f3c4 5203 	ubfx	r2, r4, #20, #4
    3866:	f011 0501 	ands.w	r5, r1, #1
    386a:	f3c4 4303 	ubfx	r3, r4, #16, #4
    386e:	d113      	bne.n	3898 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    3870:	4911      	ldr	r1, [pc, #68]	; (38b8 <NOROM_SetupGetTrimForAmpcompCtrl+0x60>)
    3872:	6809      	ldr	r1, [r1, #0]
    3874:	f341 2603 	sbfx	r6, r1, #8, #4
    3878:	18b2      	adds	r2, r6, r2
    387a:	d403      	bmi.n	3884 <NOROM_SetupGetTrimForAmpcompCtrl+0x2c>
    387c:	2a0f      	cmp	r2, #15
    387e:	bfa8      	it	ge
    3880:	220f      	movge	r2, #15
    3882:	e000      	b.n	3886 <NOROM_SetupGetTrimForAmpcompCtrl+0x2e>
    3884:	462a      	mov	r2, r5
    3886:	f341 3103 	sbfx	r1, r1, #12, #4
    388a:	18cb      	adds	r3, r1, r3
    388c:	d403      	bmi.n	3896 <NOROM_SetupGetTrimForAmpcompCtrl+0x3e>
    388e:	2b0f      	cmp	r3, #15
    3890:	bfa8      	it	ge
    3892:	230f      	movge	r3, #15
    3894:	e000      	b.n	3898 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    3896:	2300      	movs	r3, #0
    3898:	b2a1      	uxth	r1, r4
    389a:	2821      	cmp	r0, #33	; 0x21
    389c:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    38a0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    38a4:	bf84      	itt	hi
    38a6:	f004 4480 	andhi.w	r4, r4, #1073741824	; 0x40000000
    38aa:	4323      	orrhi	r3, r4
    38ac:	4618      	mov	r0, r3
    38ae:	bd70      	pop	{r4, r5, r6, pc}
    38b0:	50001378 	andpl	r1, r0, r8, ror r3
    38b4:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    38b8:	50003fac 	andpl	r3, r0, ip, lsr #31

000038bc <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>:
    38bc:	281f      	cmp	r0, #31
    38be:	bf83      	ittte	hi
    38c0:	4b02      	ldrhi	r3, [pc, #8]	; (38cc <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x10>)
    38c2:	6818      	ldrhi	r0, [r3, #0]
    38c4:	f3c0 5001 	ubfxhi	r0, r0, #20, #2
    38c8:	2000      	movls	r0, #0
    38ca:	4770      	bx	lr
    38cc:	50001398 	mulpl	r0, r8, r3

000038d0 <NOROM_SetupGetTrimForAdcShModeEn>:
    38d0:	2821      	cmp	r0, #33	; 0x21
    38d2:	bf83      	ittte	hi
    38d4:	4b02      	ldrhi	r3, [pc, #8]	; (38e0 <NOROM_SetupGetTrimForAdcShModeEn+0x10>)
    38d6:	6818      	ldrhi	r0, [r3, #0]
    38d8:	f3c0 7000 	ubfxhi	r0, r0, #28, #1
    38dc:	2001      	movls	r0, #1
    38de:	4770      	bx	lr
    38e0:	5000138c 	andpl	r1, r0, ip, lsl #7

000038e4 <NOROM_SetupGetTrimForAdcShVbufEn>:
    38e4:	2821      	cmp	r0, #33	; 0x21
    38e6:	bf83      	ittte	hi
    38e8:	4b02      	ldrhi	r3, [pc, #8]	; (38f4 <NOROM_SetupGetTrimForAdcShVbufEn+0x10>)
    38ea:	6818      	ldrhi	r0, [r3, #0]
    38ec:	f3c0 7040 	ubfxhi	r0, r0, #29, #1
    38f0:	2001      	movls	r0, #1
    38f2:	4770      	bx	lr
    38f4:	5000138c 	andpl	r1, r0, ip, lsl #7

000038f8 <NOROM_SetupGetTrimForXoscHfCtl>:
    38f8:	281f      	cmp	r0, #31
    38fa:	bf81      	itttt	hi
    38fc:	4b07      	ldrhi	r3, [pc, #28]	; (391c <NOROM_SetupGetTrimForXoscHfCtl+0x24>)
    38fe:	681b      	ldrhi	r3, [r3, #0]
    3900:	f3c3 6002 	ubfxhi	r0, r3, #24, #3
    3904:	0080      	lslhi	r0, r0, #2
    3906:	bf81      	itttt	hi
    3908:	f3c3 62c1 	ubfxhi	r2, r3, #27, #2
    390c:	ea40 2002 	orrhi.w	r0, r0, r2, lsl #8
    3910:	f3c3 5381 	ubfxhi	r3, r3, #22, #2
    3914:	4318      	orrhi	r0, r3
    3916:	bf98      	it	ls
    3918:	2000      	movls	r0, #0
    391a:	4770      	bx	lr
    391c:	50001398 	mulpl	r0, r8, r3

00003920 <NOROM_SetupGetTrimForXoscHfFastStart>:
    3920:	4b02      	ldr	r3, [pc, #8]	; (392c <NOROM_SetupGetTrimForXoscHfFastStart+0xc>)
    3922:	6818      	ldr	r0, [r3, #0]
    3924:	f3c0 40c1 	ubfx	r0, r0, #19, #2
    3928:	4770      	bx	lr
    392a:	bf00      	nop
    392c:	5000138c 	andpl	r1, r0, ip, lsl #7

00003930 <NOROM_SetupGetTrimForRadcExtCfg>:
    3930:	281f      	cmp	r0, #31
    3932:	bf81      	itttt	hi
    3934:	4b07      	ldrhi	r3, [pc, #28]	; (3954 <NOROM_SetupGetTrimForRadcExtCfg+0x24>)
    3936:	681b      	ldrhi	r3, [r3, #0]
    3938:	f3c3 1005 	ubfxhi	r0, r3, #4, #6
    393c:	f3c3 2289 	ubfxhi	r2, r3, #10, #10
    3940:	bf81      	itttt	hi
    3942:	0400      	lslhi	r0, r0, #16
    3944:	031b      	lslhi	r3, r3, #12
    3946:	ea40 5082 	orrhi.w	r0, r0, r2, lsl #22
    394a:	b29b      	uxthhi	r3, r3
    394c:	bf8c      	ite	hi
    394e:	4318      	orrhi	r0, r3
    3950:	4801      	ldrls	r0, [pc, #4]	; (3958 <NOROM_SetupGetTrimForRadcExtCfg+0x28>)
    3952:	4770      	bx	lr
    3954:	50001398 	mulpl	r0, r8, r3
    3958:	403f8000 	eorsmi	r8, pc, r0

0000395c <NOROM_SetupGetTrimForRcOscLfIBiasTrim>:
    395c:	2821      	cmp	r0, #33	; 0x21
    395e:	bf83      	ittte	hi
    3960:	4b02      	ldrhi	r3, [pc, #8]	; (396c <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x10>)
    3962:	6818      	ldrhi	r0, [r3, #0]
    3964:	f3c0 60c0 	ubfxhi	r0, r0, #27, #1
    3968:	2000      	movls	r0, #0
    396a:	4770      	bx	lr
    396c:	5000138c 	andpl	r1, r0, ip, lsl #7

00003970 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>:
    3970:	2821      	cmp	r0, #33	; 0x21
    3972:	bf83      	ittte	hi
    3974:	4b02      	ldrhi	r3, [pc, #8]	; (3980 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>)
    3976:	6818      	ldrhi	r0, [r3, #0]
    3978:	f3c0 5045 	ubfxhi	r0, r0, #21, #6
    397c:	2000      	movls	r0, #0
    397e:	4770      	bx	lr
    3980:	5000138c 	andpl	r1, r0, ip, lsl #7

00003984 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>:
    3984:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3986:	4605      	mov	r5, r0
    3988:	4608      	mov	r0, r1
    398a:	f7ff ff19 	bl	37c0 <NOROM_SetupGetTrimForAnabypassValue1>
    398e:	4c39      	ldr	r4, [pc, #228]	; (3a74 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf0>)
    3990:	4602      	mov	r2, r0
    3992:	2118      	movs	r1, #24
    3994:	4620      	mov	r0, r4
    3996:	f000 fb33 	bl	4000 <NOROM_DDI32RegWrite>
    399a:	f7ff ff3f 	bl	381c <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>
    399e:	4b36      	ldr	r3, [pc, #216]	; (3a78 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf4>)
    39a0:	b280      	uxth	r0, r0
    39a2:	681b      	ldr	r3, [r3, #0]
    39a4:	9000      	str	r0, [sp, #0]
    39a6:	685e      	ldr	r6, [r3, #4]
    39a8:	4620      	mov	r0, r4
    39aa:	212c      	movs	r1, #44	; 0x2c
    39ac:	f240 32ff 	movw	r2, #1023	; 0x3ff
    39b0:	2300      	movs	r3, #0
    39b2:	47b0      	blx	r6
    39b4:	4b31      	ldr	r3, [pc, #196]	; (3a7c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf8>)
    39b6:	4620      	mov	r0, r4
    39b8:	681a      	ldr	r2, [r3, #0]
    39ba:	211c      	movs	r1, #28
    39bc:	f3c2 020d 	ubfx	r2, r2, #0, #14
    39c0:	f000 fb1e 	bl	4000 <NOROM_DDI32RegWrite>
    39c4:	f7ff ff36 	bl	3834 <NOROM_SetupGetTrimForAmpcompTh2>
    39c8:	2114      	movs	r1, #20
    39ca:	4602      	mov	r2, r0
    39cc:	4620      	mov	r0, r4
    39ce:	f000 fb17 	bl	4000 <NOROM_DDI32RegWrite>
    39d2:	f7ff ff37 	bl	3844 <NOROM_SetupGetTrimForAmpcompTh1>
    39d6:	2110      	movs	r1, #16
    39d8:	4602      	mov	r2, r0
    39da:	4620      	mov	r0, r4
    39dc:	f000 fb10 	bl	4000 <NOROM_DDI32RegWrite>
    39e0:	4628      	mov	r0, r5
    39e2:	f7ff ff39 	bl	3858 <NOROM_SetupGetTrimForAmpcompCtrl>
    39e6:	210c      	movs	r1, #12
    39e8:	4602      	mov	r2, r0
    39ea:	4620      	mov	r0, r4
    39ec:	f000 fb08 	bl	4000 <NOROM_DDI32RegWrite>
    39f0:	4628      	mov	r0, r5
    39f2:	f7ff ff6d 	bl	38d0 <NOROM_SetupGetTrimForAdcShModeEn>
    39f6:	0040      	lsls	r0, r0, #1
    39f8:	4e21      	ldr	r6, [pc, #132]	; (3a80 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>)
    39fa:	f040 0020 	orr.w	r0, r0, #32
    39fe:	b2c0      	uxtb	r0, r0
    3a00:	7030      	strb	r0, [r6, #0]
    3a02:	4628      	mov	r0, r5
    3a04:	f7ff ff6e 	bl	38e4 <NOROM_SetupGetTrimForAdcShVbufEn>
    3a08:	f040 0010 	orr.w	r0, r0, #16
    3a0c:	b2c0      	uxtb	r0, r0
    3a0e:	7030      	strb	r0, [r6, #0]
    3a10:	4628      	mov	r0, r5
    3a12:	f7ff ff71 	bl	38f8 <NOROM_SetupGetTrimForXoscHfCtl>
    3a16:	2128      	movs	r1, #40	; 0x28
    3a18:	4602      	mov	r2, r0
    3a1a:	4620      	mov	r0, r4
    3a1c:	f000 faf0 	bl	4000 <NOROM_DDI32RegWrite>
    3a20:	4628      	mov	r0, r5
    3a22:	f7ff ff4b 	bl	38bc <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>
    3a26:	0040      	lsls	r0, r0, #1
    3a28:	4b16      	ldr	r3, [pc, #88]	; (3a84 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x100>)
    3a2a:	f040 0060 	orr.w	r0, r0, #96	; 0x60
    3a2e:	b2c0      	uxtb	r0, r0
    3a30:	7018      	strb	r0, [r3, #0]
    3a32:	4628      	mov	r0, r5
    3a34:	f7ff ff92 	bl	395c <NOROM_SetupGetTrimForRcOscLfIBiasTrim>
    3a38:	00c0      	lsls	r0, r0, #3
    3a3a:	4b13      	ldr	r3, [pc, #76]	; (3a88 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x104>)
    3a3c:	f060 007f 	orn	r0, r0, #127	; 0x7f
    3a40:	b2c0      	uxtb	r0, r0
    3a42:	7018      	strb	r0, [r3, #0]
    3a44:	4628      	mov	r0, r5
    3a46:	f7ff ff93 	bl	3970 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>
    3a4a:	ea6f 6000 	mvn.w	r0, r0, lsl #24
    3a4e:	ea6f 5090 	mvn.w	r0, r0, lsr #22
    3a52:	4b0e      	ldr	r3, [pc, #56]	; (3a8c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x108>)
    3a54:	b280      	uxth	r0, r0
    3a56:	8018      	strh	r0, [r3, #0]
    3a58:	4628      	mov	r0, r5
    3a5a:	f7ff ff69 	bl	3930 <NOROM_SetupGetTrimForRadcExtCfg>
    3a5e:	2108      	movs	r1, #8
    3a60:	4602      	mov	r2, r0
    3a62:	4620      	mov	r0, r4
    3a64:	f000 facc 	bl	4000 <NOROM_DDI32RegWrite>
    3a68:	4b09      	ldr	r3, [pc, #36]	; (3a90 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x10c>)
    3a6a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    3a6e:	601a      	str	r2, [r3, #0]
    3a70:	b002      	add	sp, #8
    3a72:	bd70      	pop	{r4, r5, r6, pc}
    3a74:	400ca000 	andmi	sl, ip, r0
    3a78:	100001a4 	andne	r0, r0, r4, lsr #3
    3a7c:	5000137c 	andpl	r1, r0, ip, ror r3
    3a80:	400ca149 	andmi	sl, ip, r9, asr #2
    3a84:	400ca14c 	andmi	sl, ip, ip, asr #2
    3a88:	400ca141 	andmi	sl, ip, r1, asr #2
    3a8c:	400ca1dc 	ldrdmi	sl, [ip], -ip
    3a90:	400ca040 	andmi	sl, ip, r0, asr #32

00003a94 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>:
    3a94:	b530      	push	{r4, r5, lr}
    3a96:	4b14      	ldr	r3, [pc, #80]	; (3ae8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>)
    3a98:	681b      	ldr	r3, [r3, #0]
    3a9a:	2b00      	cmp	r3, #0
    3a9c:	d1fb      	bne.n	3a96 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2>
    3a9e:	4a13      	ldr	r2, [pc, #76]	; (3aec <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x58>)
    3aa0:	4913      	ldr	r1, [pc, #76]	; (3af0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x5c>)
    3aa2:	6813      	ldr	r3, [r2, #0]
    3aa4:	6809      	ldr	r1, [r1, #0]
    3aa6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    3aaa:	f023 0307 	bic.w	r3, r3, #7
    3aae:	f011 0f04 	tst.w	r1, #4
    3ab2:	4614      	mov	r4, r2
    3ab4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    3ab8:	d003      	beq.n	3ac2 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2e>
    3aba:	f043 0305 	orr.w	r3, r3, #5
    3abe:	6013      	str	r3, [r2, #0]
    3ac0:	bd30      	pop	{r4, r5, pc}
    3ac2:	490c      	ldr	r1, [pc, #48]	; (3af4 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x60>)
    3ac4:	f043 0004 	orr.w	r0, r3, #4
    3ac8:	680d      	ldr	r5, [r1, #0]
    3aca:	07ad      	lsls	r5, r5, #30
    3acc:	d009      	beq.n	3ae2 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x4e>
    3ace:	f043 0307 	orr.w	r3, r3, #7
    3ad2:	6013      	str	r3, [r2, #0]
    3ad4:	680b      	ldr	r3, [r1, #0]
    3ad6:	f003 0303 	and.w	r3, r3, #3
    3ada:	2b03      	cmp	r3, #3
    3adc:	d1fa      	bne.n	3ad4 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x40>
    3ade:	6020      	str	r0, [r4, #0]
    3ae0:	bd30      	pop	{r4, r5, pc}
    3ae2:	6010      	str	r0, [r2, #0]
    3ae4:	bd30      	pop	{r4, r5, pc}
    3ae6:	bf00      	nop
    3ae8:	4268000c 	rsbmi	r0, r8, #12
    3aec:	40034004 	andmi	r4, r3, r4
    3af0:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    3af4:	40034000 	andmi	r4, r3, r0

00003af8 <NOROM_SetupSetAonRtcSubSecInc>:
    3af8:	4b07      	ldr	r3, [pc, #28]	; (3b18 <NOROM_SetupSetAonRtcSubSecInc+0x20>)
    3afa:	b282      	uxth	r2, r0
    3afc:	f3c0 4007 	ubfx	r0, r0, #16, #8
    3b00:	601a      	str	r2, [r3, #0]
    3b02:	6058      	str	r0, [r3, #4]
    3b04:	2201      	movs	r2, #1
    3b06:	3308      	adds	r3, #8
    3b08:	601a      	str	r2, [r3, #0]
    3b0a:	4a04      	ldr	r2, [pc, #16]	; (3b1c <NOROM_SetupSetAonRtcSubSecInc+0x24>)
    3b0c:	6812      	ldr	r2, [r2, #0]
    3b0e:	2a00      	cmp	r2, #0
    3b10:	d0fb      	beq.n	3b0a <NOROM_SetupSetAonRtcSubSecInc+0x12>
    3b12:	2200      	movs	r2, #0
    3b14:	601a      	str	r2, [r3, #0]
    3b16:	4770      	bx	lr
    3b18:	400c603c 	andmi	r6, ip, ip, lsr r0
    3b1c:	438c0884 	orrmi	r0, ip, #132, 16	; 0x840000

00003b20 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>:
    3b20:	f3c0 4381 	ubfx	r3, r0, #18, #2
    3b24:	2b01      	cmp	r3, #1
    3b26:	b510      	push	{r4, lr}
    3b28:	4604      	mov	r4, r0
    3b2a:	d002      	beq.n	3b32 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12>
    3b2c:	2b02      	cmp	r3, #2
    3b2e:	d02f      	beq.n	3b90 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    3b30:	e02a      	b.n	3b88 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    3b32:	4b42      	ldr	r3, [pc, #264]	; (3c3c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x11c>)
    3b34:	681b      	ldr	r3, [r3, #0]
    3b36:	039a      	lsls	r2, r3, #14
    3b38:	d426      	bmi.n	3b88 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    3b3a:	4a41      	ldr	r2, [pc, #260]	; (3c40 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    3b3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    3b40:	6011      	str	r1, [r2, #0]
    3b42:	4940      	ldr	r1, [pc, #256]	; (3c44 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>)
    3b44:	f3c3 3003 	ubfx	r0, r3, #12, #4
    3b48:	680a      	ldr	r2, [r1, #0]
    3b4a:	f022 028f 	bic.w	r2, r2, #143	; 0x8f
    3b4e:	4302      	orrs	r2, r0
    3b50:	f3c3 4000 	ubfx	r0, r3, #16, #1
    3b54:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
    3b58:	600a      	str	r2, [r1, #0]
    3b5a:	f851 2c01 	ldr.w	r2, [r1, #-1]
    3b5e:	f3c3 2003 	ubfx	r0, r3, #8, #4
    3b62:	f022 020f 	bic.w	r2, r2, #15
    3b66:	4302      	orrs	r2, r0
    3b68:	f851 0c01 	ldr.w	r0, [r1, #-1]
    3b6c:	f841 2c01 	str.w	r2, [r1, #-1]
    3b70:	f851 2c02 	ldr.w	r2, [r1, #-2]
    3b74:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    3b78:	f022 02e7 	bic.w	r2, r2, #231	; 0xe7
    3b7c:	4313      	orrs	r3, r2
    3b7e:	f851 2c02 	ldr.w	r2, [r1, #-2]
    3b82:	f841 3c02 	str.w	r3, [r1, #-2]
    3b86:	e003      	b.n	3b90 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    3b88:	4b2d      	ldr	r3, [pc, #180]	; (3c40 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    3b8a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3b8e:	601a      	str	r2, [r3, #0]
    3b90:	4b2d      	ldr	r3, [pc, #180]	; (3c48 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x128>)
    3b92:	681b      	ldr	r3, [r3, #0]
    3b94:	071b      	lsls	r3, r3, #28
    3b96:	bf5e      	ittt	pl
    3b98:	4b2c      	ldrpl	r3, [pc, #176]	; (3c4c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12c>)
    3b9a:	2240      	movpl	r2, #64	; 0x40
    3b9c:	601a      	strpl	r2, [r3, #0]
    3b9e:	4b2c      	ldr	r3, [pc, #176]	; (3c50 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>)
    3ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
    3ba4:	601a      	str	r2, [r3, #0]
    3ba6:	f7ff febb 	bl	3920 <NOROM_SetupGetTrimForXoscHfFastStart>
    3baa:	4b2a      	ldr	r3, [pc, #168]	; (3c54 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x134>)
    3bac:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    3bb0:	b2c0      	uxtb	r0, r0
    3bb2:	7018      	strb	r0, [r3, #0]
    3bb4:	f3c4 5081 	ubfx	r0, r4, #22, #2
    3bb8:	2801      	cmp	r0, #1
    3bba:	d00b      	beq.n	3bd4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb4>
    3bbc:	d302      	bcc.n	3bc4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa4>
    3bbe:	2802      	cmp	r0, #2
    3bc0:	d026      	beq.n	3c10 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    3bc2:	e028      	b.n	3c16 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf6>
    3bc4:	2004      	movs	r0, #4
    3bc6:	2101      	movs	r1, #1
    3bc8:	f7ff fa84 	bl	30d4 <NOROM_OSCClockSourceSet>
    3bcc:	4822      	ldr	r0, [pc, #136]	; (3c58 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x138>)
    3bce:	f7ff ff93 	bl	3af8 <NOROM_SetupSetAonRtcSubSecInc>
    3bd2:	e024      	b.n	3c1e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfe>
    3bd4:	f7ff faac 	bl	3130 <NOROM_OSCClockSourceGet>
    3bd8:	4604      	mov	r4, r0
    3bda:	2004      	movs	r0, #4
    3bdc:	4621      	mov	r1, r4
    3bde:	f7ff fa79 	bl	30d4 <NOROM_OSCClockSourceSet>
    3be2:	2004      	movs	r0, #4
    3be4:	f7ff faa4 	bl	3130 <NOROM_OSCClockSourceGet>
    3be8:	42a0      	cmp	r0, r4
    3bea:	d1fa      	bne.n	3be2 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc2>
    3bec:	4b1b      	ldr	r3, [pc, #108]	; (3c5c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x13c>)
    3bee:	681c      	ldr	r4, [r3, #0]
    3bf0:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    3bf4:	f7ff ff80 	bl	3af8 <NOROM_SetupSetAonRtcSubSecInc>
    3bf8:	4b19      	ldr	r3, [pc, #100]	; (3c60 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x140>)
    3bfa:	f04f 2260 	mov.w	r2, #1610637312	; 0x60006000
    3bfe:	681b      	ldr	r3, [r3, #0]
    3c00:	0e20      	lsrs	r0, r4, #24
    3c02:	681b      	ldr	r3, [r3, #0]
    3c04:	2107      	movs	r1, #7
    3c06:	4798      	blx	r3
    3c08:	4b0d      	ldr	r3, [pc, #52]	; (3c40 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    3c0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3c0e:	601a      	str	r2, [r3, #0]
    3c10:	2004      	movs	r0, #4
    3c12:	2103      	movs	r1, #3
    3c14:	e001      	b.n	3c1a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfa>
    3c16:	2004      	movs	r0, #4
    3c18:	2102      	movs	r1, #2
    3c1a:	f7ff fa5b 	bl	30d4 <NOROM_OSCClockSourceSet>
    3c1e:	4b11      	ldr	r3, [pc, #68]	; (3c64 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x144>)
    3c20:	4a11      	ldr	r2, [pc, #68]	; (3c68 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x148>)
    3c22:	681b      	ldr	r3, [r3, #0]
    3c24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3c28:	7013      	strb	r3, [r2, #0]
    3c2a:	f647 0218 	movw	r2, #30744	; 0x7818
    3c2e:	4b0f      	ldr	r3, [pc, #60]	; (3c6c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x14c>)
    3c30:	801a      	strh	r2, [r3, #0]
    3c32:	f5a3 3364 	sub.w	r3, r3, #233472	; 0x39000
    3c36:	3b44      	subs	r3, #68	; 0x44
    3c38:	681b      	ldr	r3, [r3, #0]
    3c3a:	bd10      	pop	{r4, pc}
    3c3c:	5000138c 	andpl	r1, r0, ip, lsl #7
    3c40:	400ca040 	andmi	sl, ip, r0, asr #32
    3c44:	4008600c 	andmi	r6, r8, ip
    3c48:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    3c4c:	400ca068 	andmi	sl, ip, r8, rrx
    3c50:	400ca080 	andmi	sl, ip, r0, lsl #1
    3c54:	400ca108 	andmi	sl, ip, r8, lsl #2
    3c58:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    3c5c:	50003fa8 	andpl	r3, r0, r8, lsr #31
    3c60:	100001b4 			; <UNDEFINED> instruction: 0x100001b4
    3c64:	5000136c 	andpl	r1, r0, ip, ror #6
    3c68:	400cb00b 	andmi	fp, ip, fp
    3c6c:	400cb070 	andmi	fp, ip, r0, ror r0

00003c70 <NOROM_SysCtrlSetRechargeBeforePowerDown>:
    3c70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c74:	4b77      	ldr	r3, [pc, #476]	; (3e54 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e4>)
    3c76:	4607      	mov	r7, r0
    3c78:	681b      	ldr	r3, [r3, #0]
    3c7a:	4e77      	ldr	r6, [pc, #476]	; (3e58 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    3c7c:	f013 0f02 	tst.w	r3, #2
    3c80:	d004      	beq.n	3c8c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c>
    3c82:	2308      	movs	r3, #8
    3c84:	71b3      	strb	r3, [r6, #6]
    3c86:	4a75      	ldr	r2, [pc, #468]	; (3e5c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1ec>)
    3c88:	4b75      	ldr	r3, [pc, #468]	; (3e60 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    3c8a:	e0df      	b.n	3e4c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1dc>
    3c8c:	f7ff f9e6 	bl	305c <NOROM_AONBatMonTemperatureGetDegC>
    3c90:	4b74      	ldr	r3, [pc, #464]	; (3e64 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f4>)
    3c92:	681d      	ldr	r5, [r3, #0]
    3c94:	172a      	asrs	r2, r5, #28
    3c96:	02ac      	lsls	r4, r5, #10
    3c98:	f102 0101 	add.w	r1, r2, #1
    3c9c:	d408      	bmi.n	3cb0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x40>
    3c9e:	f1c0 033e 	rsb	r3, r0, #62	; 0x3e
    3ca2:	10db      	asrs	r3, r3, #3
    3ca4:	2b08      	cmp	r3, #8
    3ca6:	bfa8      	it	ge
    3ca8:	2308      	movge	r3, #8
    3caa:	4299      	cmp	r1, r3
    3cac:	bfb8      	it	lt
    3cae:	4619      	movlt	r1, r3
    3cb0:	f005 7340 	and.w	r3, r5, #50331648	; 0x3000000
    3cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    3cb8:	d10a      	bne.n	3cd0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x60>
    3cba:	4b6b      	ldr	r3, [pc, #428]	; (3e68 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f8>)
    3cbc:	681a      	ldr	r2, [r3, #0]
    3cbe:	681b      	ldr	r3, [r3, #0]
    3cc0:	f3c2 2204 	ubfx	r2, r2, #8, #5
    3cc4:	2a15      	cmp	r2, #21
    3cc6:	bf88      	it	hi
    3cc8:	3a20      	subhi	r2, #32
    3cca:	f3c3 6304 	ubfx	r3, r3, #24, #5
    3cce:	e00a      	b.n	3ce6 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x76>
    3cd0:	4b66      	ldr	r3, [pc, #408]	; (3e6c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1fc>)
    3cd2:	681a      	ldr	r2, [r3, #0]
    3cd4:	4b66      	ldr	r3, [pc, #408]	; (3e70 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x200>)
    3cd6:	f3c2 6204 	ubfx	r2, r2, #24, #5
    3cda:	681b      	ldr	r3, [r3, #0]
    3cdc:	2a15      	cmp	r2, #21
    3cde:	bf88      	it	hi
    3ce0:	3a20      	subhi	r2, #32
    3ce2:	f3c3 4304 	ubfx	r3, r3, #16, #5
    3ce6:	2b15      	cmp	r3, #21
    3ce8:	440a      	add	r2, r1
    3cea:	bf88      	it	hi
    3cec:	3b20      	subhi	r3, #32
    3cee:	2a15      	cmp	r2, #21
    3cf0:	dc05      	bgt.n	3cfe <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8e>
    3cf2:	f06f 0109 	mvn.w	r1, #9
    3cf6:	428a      	cmp	r2, r1
    3cf8:	bfb8      	it	lt
    3cfa:	460a      	movlt	r2, r1
    3cfc:	e000      	b.n	3d00 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x90>
    3cfe:	2215      	movs	r2, #21
    3d00:	4c5c      	ldr	r4, [pc, #368]	; (3e74 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x204>)
    3d02:	f002 011f 	and.w	r1, r2, #31
    3d06:	f441 51f8 	orr.w	r1, r1, #7936	; 0x1f00
    3d0a:	8021      	strh	r1, [r4, #0]
    3d0c:	495a      	ldr	r1, [pc, #360]	; (3e78 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x208>)
    3d0e:	6809      	ldr	r1, [r1, #0]
    3d10:	f011 0403 	ands.w	r4, r1, #3
    3d14:	bf18      	it	ne
    3d16:	2401      	movne	r4, #1
    3d18:	0749      	lsls	r1, r1, #29
    3d1a:	bf48      	it	mi
    3d1c:	f044 0402 	orrmi.w	r4, r4, #2
    3d20:	b10f      	cbz	r7, 3d26 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb6>
    3d22:	f044 0404 	orr.w	r4, r4, #4
    3d26:	f996 1007 	ldrsb.w	r1, [r6, #7]
    3d2a:	1a41      	subs	r1, r0, r1
    3d2c:	2904      	cmp	r1, #4
    3d2e:	dc03      	bgt.n	3d38 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc8>
    3d30:	4949      	ldr	r1, [pc, #292]	; (3e58 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    3d32:	7989      	ldrb	r1, [r1, #6]
    3d34:	428c      	cmp	r4, r1
    3d36:	d06f      	beq.n	3e18 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a8>
    3d38:	f1b0 010f 	subs.w	r1, r0, #15
    3d3c:	9101      	str	r1, [sp, #4]
    3d3e:	f004 0101 	and.w	r1, r4, #1
    3d42:	f8df a144 	ldr.w	sl, [pc, #324]	; 3e88 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x218>
    3d46:	f004 0904 	and.w	r9, r4, #4
    3d4a:	f004 0802 	and.w	r8, r4, #2
    3d4e:	460f      	mov	r7, r1
    3d50:	d42a      	bmi.n	3da8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    3d52:	9901      	ldr	r1, [sp, #4]
    3d54:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    3d58:	ea4f 2e21 	mov.w	lr, r1, asr #8
    3d5c:	f1be 0f07 	cmp.w	lr, #7
    3d60:	9101      	str	r1, [sp, #4]
    3d62:	d801      	bhi.n	3d68 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf8>
    3d64:	d104      	bne.n	3d70 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x100>
    3d66:	e001      	b.n	3d6c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xfc>
    3d68:	f04f 0e07 	mov.w	lr, #7
    3d6c:	2106      	movs	r1, #6
    3d6e:	e000      	b.n	3d72 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x102>
    3d70:	4671      	mov	r1, lr
    3d72:	f8df b118 	ldr.w	fp, [pc, #280]	; 3e8c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x21c>
    3d76:	3101      	adds	r1, #1
    3d78:	f85a c021 	ldr.w	ip, [sl, r1, lsl #2]
    3d7c:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
    3d80:	ebc1 0c0c 	rsb	ip, r1, ip
    3d84:	fa5f f18c 	uxtb.w	r1, ip
    3d88:	f1b9 0f00 	cmp.w	r9, #0
    3d8c:	d002      	beq.n	3d94 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    3d8e:	f3cc 2b07 	ubfx	fp, ip, #8, #8
    3d92:	4459      	add	r1, fp
    3d94:	f1b8 0f00 	cmp.w	r8, #0
    3d98:	d002      	beq.n	3da0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x130>
    3d9a:	f3cc 4b07 	ubfx	fp, ip, #16, #8
    3d9e:	4459      	add	r1, fp
    3da0:	b12f      	cbz	r7, 3dae <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    3da2:	eb01 611c 	add.w	r1, r1, ip, lsr #24
    3da6:	e002      	b.n	3dae <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    3da8:	f04f 0e00 	mov.w	lr, #0
    3dac:	4671      	mov	r1, lr
    3dae:	f85a a02e 	ldr.w	sl, [sl, lr, lsl #2]
    3db2:	fa5f fc8a 	uxtb.w	ip, sl
    3db6:	f1b9 0f00 	cmp.w	r9, #0
    3dba:	d002      	beq.n	3dc2 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x152>
    3dbc:	f3ca 2907 	ubfx	r9, sl, #8, #8
    3dc0:	44cc      	add	ip, r9
    3dc2:	f1b8 0f00 	cmp.w	r8, #0
    3dc6:	d002      	beq.n	3dce <NOROM_SysCtrlSetRechargeBeforePowerDown+0x15e>
    3dc8:	f3ca 4807 	ubfx	r8, sl, #16, #8
    3dcc:	44c4      	add	ip, r8
    3dce:	b10f      	cbz	r7, 3dd4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x164>
    3dd0:	eb0c 6c1a 	add.w	ip, ip, sl, lsr #24
    3dd4:	1a9b      	subs	r3, r3, r2
    3dd6:	2b01      	cmp	r3, #1
    3dd8:	bfb8      	it	lt
    3dda:	2301      	movlt	r3, #1
    3ddc:	9f01      	ldr	r7, [sp, #4]
    3dde:	2234      	movs	r2, #52	; 0x34
    3de0:	4353      	muls	r3, r2
    3de2:	eba7 270e 	sub.w	r7, r7, lr, lsl #8
    3de6:	4379      	muls	r1, r7
    3de8:	b2ed      	uxtb	r5, r5
    3dea:	436b      	muls	r3, r5
    3dec:	3180      	adds	r1, #128	; 0x80
    3dee:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
    3df2:	fbb3 f1f1 	udiv	r1, r3, r1
    3df6:	f64f 7cff 	movw	ip, #65535	; 0xffff
    3dfa:	4561      	cmp	r1, ip
    3dfc:	bf28      	it	cs
    3dfe:	4661      	movcs	r1, ip
    3e00:	287f      	cmp	r0, #127	; 0x7f
    3e02:	80b1      	strh	r1, [r6, #4]
    3e04:	dc05      	bgt.n	3e12 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a2>
    3e06:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    3e0a:	4298      	cmp	r0, r3
    3e0c:	bfb8      	it	lt
    3e0e:	4618      	movlt	r0, r3
    3e10:	e000      	b.n	3e14 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a4>
    3e12:	207f      	movs	r0, #127	; 0x7f
    3e14:	71f0      	strb	r0, [r6, #7]
    3e16:	71b4      	strb	r4, [r6, #6]
    3e18:	4b18      	ldr	r3, [pc, #96]	; (3e7c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20c>)
    3e1a:	2100      	movs	r1, #0
    3e1c:	681b      	ldr	r3, [r3, #0]
    3e1e:	6033      	str	r3, [r6, #0]
    3e20:	88b3      	ldrh	r3, [r6, #4]
    3e22:	2b1e      	cmp	r3, #30
    3e24:	bf9e      	ittt	ls
    3e26:	4a0c      	ldrls	r2, [pc, #48]	; (3e58 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    3e28:	231f      	movls	r3, #31
    3e2a:	8093      	strhls	r3, [r2, #4]
    3e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3e30:	d302      	bcc.n	3e38 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    3e32:	085b      	lsrs	r3, r3, #1
    3e34:	3101      	adds	r1, #1
    3e36:	e7f9      	b.n	3e2c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1bc>
    3e38:	4a11      	ldr	r2, [pc, #68]	; (3e80 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x210>)
    3e3a:	3b0f      	subs	r3, #15
    3e3c:	430a      	orrs	r2, r1
    3e3e:	091b      	lsrs	r3, r3, #4
    3e40:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
    3e44:	4a06      	ldr	r2, [pc, #24]	; (3e60 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    3e46:	6013      	str	r3, [r2, #0]
    3e48:	4b0e      	ldr	r3, [pc, #56]	; (3e84 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x214>)
    3e4a:	2200      	movs	r2, #0
    3e4c:	601a      	str	r2, [r3, #0]
    3e4e:	b003      	add	sp, #12
    3e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e54:	40090000 	andmi	r0, r9, r0
    3e58:	200001f4 	strdcs	r0, [r0], -r4
    3e5c:	00a4fdfd 	strdeq	pc, [r4], sp	; <UNPREDICTABLE>
    3e60:	40091030 	andmi	r1, r9, r0, lsr r0
    3e64:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    3e68:	50001388 	andpl	r1, r0, r8, lsl #7
    3e6c:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    3e70:	5000113c 	andpl	r1, r0, ip, lsr r1
    3e74:	4008626e 	andmi	r6, r8, lr, ror #4
    3e78:	40082224 	andmi	r2, r8, r4, lsr #4
    3e7c:	40092008 	andmi	r2, r9, r8
    3e80:	80a4e700 	adchi	lr, r4, r0, lsl #14
    3e84:	40091034 	andmi	r1, r9, r4, lsr r0
    3e88:	5000139c 	mulpl	r0, ip, r3
    3e8c:	50001398 	mulpl	r0, r8, r3

00003e90 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>:
    3e90:	b510      	push	{r4, lr}
    3e92:	4b14      	ldr	r3, [pc, #80]	; (3ee4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x54>)
    3e94:	681c      	ldr	r4, [r3, #0]
    3e96:	b2a4      	uxth	r4, r4
    3e98:	b314      	cbz	r4, 3ee0 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    3e9a:	f7ff f8df 	bl	305c <NOROM_AONBatMonTemperatureGetDegC>
    3e9e:	4b12      	ldr	r3, [pc, #72]	; (3ee8 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    3ea0:	f993 2007 	ldrsb.w	r2, [r3, #7]
    3ea4:	4290      	cmp	r0, r2
    3ea6:	da05      	bge.n	3eb4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x24>
    3ea8:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    3eac:	4290      	cmp	r0, r2
    3eae:	bfb8      	it	lt
    3eb0:	4610      	movlt	r0, r2
    3eb2:	71d8      	strb	r0, [r3, #7]
    3eb4:	889a      	ldrh	r2, [r3, #4]
    3eb6:	490c      	ldr	r1, [pc, #48]	; (3ee8 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    3eb8:	4294      	cmp	r4, r2
    3eba:	d310      	bcc.n	3ede <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4e>
    3ebc:	4b0b      	ldr	r3, [pc, #44]	; (3eec <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x5c>)
    3ebe:	6808      	ldr	r0, [r1, #0]
    3ec0:	681b      	ldr	r3, [r3, #0]
    3ec2:	1aa4      	subs	r4, r4, r2
    3ec4:	3302      	adds	r3, #2
    3ec6:	1a1b      	subs	r3, r3, r0
    3ec8:	2b1f      	cmp	r3, #31
    3eca:	bf28      	it	cs
    3ecc:	231f      	movcs	r3, #31
    3ece:	085b      	lsrs	r3, r3, #1
    3ed0:	40dc      	lsrs	r4, r3
    3ed2:	4414      	add	r4, r2
    3ed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3ed8:	4294      	cmp	r4, r2
    3eda:	bf28      	it	cs
    3edc:	4614      	movcs	r4, r2
    3ede:	808c      	strh	r4, [r1, #4]
    3ee0:	bd10      	pop	{r4, pc}
    3ee2:	bf00      	nop
    3ee4:	40091034 	andmi	r1, r9, r4, lsr r0
    3ee8:	200001f4 	strdcs	r0, [r0], -r4
    3eec:	40092008 	andmi	r2, r9, r8

00003ef0 <NOROM_SysCtrlResetSourceGet>:
    3ef0:	4b04      	ldr	r3, [pc, #16]	; (3f04 <NOROM_SysCtrlResetSourceGet+0x14>)
    3ef2:	681a      	ldr	r2, [r3, #0]
    3ef4:	0412      	lsls	r2, r2, #16
    3ef6:	bf5a      	itte	pl
    3ef8:	6818      	ldrpl	r0, [r3, #0]
    3efa:	f3c0 0042 	ubfxpl	r0, r0, #1, #3
    3efe:	2008      	movmi	r0, #8
    3f00:	4770      	bx	lr
    3f02:	bf00      	nop
    3f04:	40090004 	andmi	r0, r9, r4

00003f08 <NOROM_ChipInfo_GetChipFamily>:
    3f08:	f64b 129a 	movw	r2, #47514	; 0xb99a
    3f0c:	4b10      	ldr	r3, [pc, #64]	; (3f50 <NOROM_ChipInfo_GetChipFamily+0x48>)
    3f0e:	6818      	ldr	r0, [r3, #0]
    3f10:	f3c0 300f 	ubfx	r0, r0, #12, #16
    3f14:	4290      	cmp	r0, r2
    3f16:	d106      	bne.n	3f26 <NOROM_ChipInfo_GetChipFamily+0x1e>
    3f18:	681b      	ldr	r3, [r3, #0]
    3f1a:	0f1b      	lsrs	r3, r3, #28
    3f1c:	2b0b      	cmp	r3, #11
    3f1e:	bf0c      	ite	eq
    3f20:	2004      	moveq	r0, #4
    3f22:	2000      	movne	r0, #0
    3f24:	e011      	b.n	3f4a <NOROM_ChipInfo_GetChipFamily+0x42>
    3f26:	f64b 13be 	movw	r3, #47550	; 0xb9be
    3f2a:	4298      	cmp	r0, r3
    3f2c:	d00a      	beq.n	3f44 <NOROM_ChipInfo_GetChipFamily+0x3c>
    3f2e:	f64b 3341 	movw	r3, #47937	; 0xbb41
    3f32:	4298      	cmp	r0, r3
    3f34:	d008      	beq.n	3f48 <NOROM_ChipInfo_GetChipFamily+0x40>
    3f36:	f64b 3320 	movw	r3, #47904	; 0xbb20
    3f3a:	4298      	cmp	r0, r3
    3f3c:	bf14      	ite	ne
    3f3e:	20ff      	movne	r0, #255	; 0xff
    3f40:	2002      	moveq	r0, #2
    3f42:	e002      	b.n	3f4a <NOROM_ChipInfo_GetChipFamily+0x42>
    3f44:	2001      	movs	r0, #1
    3f46:	e000      	b.n	3f4a <NOROM_ChipInfo_GetChipFamily+0x42>
    3f48:	2003      	movs	r0, #3
    3f4a:	b240      	sxtb	r0, r0
    3f4c:	4770      	bx	lr
    3f4e:	bf00      	nop
    3f50:	50001318 	andpl	r1, r0, r8, lsl r3

00003f54 <NOROM_ChipInfo_GetHwRevision>:
    3f54:	b538      	push	{r3, r4, r5, lr}
    3f56:	4b19      	ldr	r3, [pc, #100]	; (3fbc <NOROM_ChipInfo_GetHwRevision+0x68>)
    3f58:	681d      	ldr	r5, [r3, #0]
    3f5a:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
    3f5e:	6818      	ldr	r0, [r3, #0]
    3f60:	0f2d      	lsrs	r5, r5, #28
    3f62:	b2c4      	uxtb	r4, r0
    3f64:	2c80      	cmp	r4, #128	; 0x80
    3f66:	bf28      	it	cs
    3f68:	2400      	movcs	r4, #0
    3f6a:	f7ff ffcd 	bl	3f08 <NOROM_ChipInfo_GetChipFamily>
    3f6e:	2804      	cmp	r0, #4
    3f70:	d821      	bhi.n	3fb6 <NOROM_ChipInfo_GetHwRevision+0x62>
    3f72:	e8df f000 	tbb	[pc, r0]
    3f76:	1b1b1303 	blne	6c8b8a <__ccfg+0x6a8be2>
    3f7a:	3d01001c 	stccc	0, cr0, [r1, #-112]	; 0xffffff90
    3f7e:	2d07      	cmp	r5, #7
    3f80:	d819      	bhi.n	3fb6 <NOROM_ChipInfo_GetHwRevision+0x62>
    3f82:	e8df f005 	tbb	[pc, r5]
    3f86:	18041811 	stmdane	r4, {r0, r4, fp, ip}
    3f8a:	08061818 	stmdaeq	r6, {r3, r4, fp, ip}
    3f8e:	2014      	movs	r0, #20
    3f90:	e012      	b.n	3fb8 <NOROM_ChipInfo_GetHwRevision+0x64>
    3f92:	2015      	movs	r0, #21
    3f94:	e010      	b.n	3fb8 <NOROM_ChipInfo_GetHwRevision+0x64>
    3f96:	f104 0016 	add.w	r0, r4, #22
    3f9a:	e00a      	b.n	3fb2 <NOROM_ChipInfo_GetHwRevision+0x5e>
    3f9c:	b125      	cbz	r5, 3fa8 <NOROM_ChipInfo_GetHwRevision+0x54>
    3f9e:	2d02      	cmp	r5, #2
    3fa0:	d109      	bne.n	3fb6 <NOROM_ChipInfo_GetHwRevision+0x62>
    3fa2:	f104 0014 	add.w	r0, r4, #20
    3fa6:	e004      	b.n	3fb2 <NOROM_ChipInfo_GetHwRevision+0x5e>
    3fa8:	200a      	movs	r0, #10
    3faa:	e005      	b.n	3fb8 <NOROM_ChipInfo_GetHwRevision+0x64>
    3fac:	b91d      	cbnz	r5, 3fb6 <NOROM_ChipInfo_GetHwRevision+0x62>
    3fae:	f104 000a 	add.w	r0, r4, #10
    3fb2:	b2c0      	uxtb	r0, r0
    3fb4:	e000      	b.n	3fb8 <NOROM_ChipInfo_GetHwRevision+0x64>
    3fb6:	20ff      	movs	r0, #255	; 0xff
    3fb8:	b240      	sxtb	r0, r0
    3fba:	bd38      	pop	{r3, r4, r5, pc}
    3fbc:	50001318 	andpl	r1, r0, r8, lsl r3

00003fc0 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>:
    3fc0:	b508      	push	{r3, lr}
    3fc2:	f7ff ffa1 	bl	3f08 <NOROM_ChipInfo_GetChipFamily>
    3fc6:	2801      	cmp	r0, #1
    3fc8:	d103      	bne.n	3fd2 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    3fca:	f7ff ffc3 	bl	3f54 <NOROM_ChipInfo_GetHwRevision>
    3fce:	2813      	cmp	r0, #19
    3fd0:	dc00      	bgt.n	3fd4 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x14>
    3fd2:	e7fe      	b.n	3fd2 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    3fd4:	bd08      	pop	{r3, pc}
	...

00003fd8 <AuxAdiDdiSafeWrite.constprop.1>:
    3fd8:	b538      	push	{r3, r4, r5, lr}
    3fda:	4604      	mov	r4, r0
    3fdc:	460d      	mov	r5, r1
    3fde:	f7ff f871 	bl	30c4 <NOROM_CPUcpsid>
    3fe2:	4b06      	ldr	r3, [pc, #24]	; (3ffc <AuxAdiDdiSafeWrite.constprop.1+0x24>)
    3fe4:	681a      	ldr	r2, [r3, #0]
    3fe6:	2a00      	cmp	r2, #0
    3fe8:	d0fb      	beq.n	3fe2 <AuxAdiDdiSafeWrite.constprop.1+0xa>
    3fea:	2201      	movs	r2, #1
    3fec:	6025      	str	r5, [r4, #0]
    3fee:	601a      	str	r2, [r3, #0]
    3ff0:	b918      	cbnz	r0, 3ffa <AuxAdiDdiSafeWrite.constprop.1+0x22>
    3ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3ff6:	f7ff b869 	b.w	30cc <NOROM_CPUcpsie>
    3ffa:	bd38      	pop	{r3, r4, r5, pc}
    3ffc:	400c8000 	andmi	r8, ip, r0

00004000 <NOROM_DDI32RegWrite>:
    4000:	4408      	add	r0, r1
    4002:	4611      	mov	r1, r2
    4004:	f7ff bfe8 	b.w	3fd8 <AuxAdiDdiSafeWrite.constprop.1>

00004008 <memcpy>:
    4008:	b5f0      	push	{r4, r5, r6, r7, lr}
    400a:	46c6      	mov	lr, r8
    400c:	b500      	push	{lr}
    400e:	2a0f      	cmp	r2, #15
    4010:	d945      	bls.n	409e <memcpy+0x96>
    4012:	000b      	movs	r3, r1
    4014:	2603      	movs	r6, #3
    4016:	4303      	orrs	r3, r0
    4018:	401e      	ands	r6, r3
    401a:	000c      	movs	r4, r1
    401c:	0003      	movs	r3, r0
    401e:	2e00      	cmp	r6, #0
    4020:	d142      	bne.n	40a8 <memcpy+0xa0>
    4022:	0015      	movs	r5, r2
    4024:	3d10      	subs	r5, #16
    4026:	092d      	lsrs	r5, r5, #4
    4028:	46ac      	mov	ip, r5
    402a:	012d      	lsls	r5, r5, #4
    402c:	46a8      	mov	r8, r5
    402e:	4480      	add	r8, r0
    4030:	e000      	b.n	4034 <memcpy+0x2c>
    4032:	003b      	movs	r3, r7
    4034:	6867      	ldr	r7, [r4, #4]
    4036:	605f      	str	r7, [r3, #4]
    4038:	68e7      	ldr	r7, [r4, #12]
    403a:	60df      	str	r7, [r3, #12]
    403c:	001f      	movs	r7, r3
    403e:	6825      	ldr	r5, [r4, #0]
    4040:	601d      	str	r5, [r3, #0]
    4042:	68a5      	ldr	r5, [r4, #8]
    4044:	3710      	adds	r7, #16
    4046:	609d      	str	r5, [r3, #8]
    4048:	3410      	adds	r4, #16
    404a:	4543      	cmp	r3, r8
    404c:	d1f1      	bne.n	4032 <memcpy+0x2a>
    404e:	4665      	mov	r5, ip
    4050:	230f      	movs	r3, #15
    4052:	240c      	movs	r4, #12
    4054:	3501      	adds	r5, #1
    4056:	012d      	lsls	r5, r5, #4
    4058:	1949      	adds	r1, r1, r5
    405a:	4013      	ands	r3, r2
    405c:	1945      	adds	r5, r0, r5
    405e:	4214      	tst	r4, r2
    4060:	d025      	beq.n	40ae <memcpy+0xa6>
    4062:	598c      	ldr	r4, [r1, r6]
    4064:	51ac      	str	r4, [r5, r6]
    4066:	3604      	adds	r6, #4
    4068:	1b9c      	subs	r4, r3, r6
    406a:	2c03      	cmp	r4, #3
    406c:	d8f9      	bhi.n	4062 <memcpy+0x5a>
    406e:	2403      	movs	r4, #3
    4070:	3b04      	subs	r3, #4
    4072:	089b      	lsrs	r3, r3, #2
    4074:	3301      	adds	r3, #1
    4076:	009b      	lsls	r3, r3, #2
    4078:	4022      	ands	r2, r4
    407a:	18ed      	adds	r5, r5, r3
    407c:	18c9      	adds	r1, r1, r3
    407e:	1e56      	subs	r6, r2, #1
    4080:	2a00      	cmp	r2, #0
    4082:	d007      	beq.n	4094 <memcpy+0x8c>
    4084:	2300      	movs	r3, #0
    4086:	e000      	b.n	408a <memcpy+0x82>
    4088:	0023      	movs	r3, r4
    408a:	5cca      	ldrb	r2, [r1, r3]
    408c:	1c5c      	adds	r4, r3, #1
    408e:	54ea      	strb	r2, [r5, r3]
    4090:	429e      	cmp	r6, r3
    4092:	d1f9      	bne.n	4088 <memcpy+0x80>
    4094:	bc04      	pop	{r2}
    4096:	4690      	mov	r8, r2
    4098:	bcf0      	pop	{r4, r5, r6, r7}
    409a:	bc02      	pop	{r1}
    409c:	4708      	bx	r1
    409e:	0005      	movs	r5, r0
    40a0:	1e56      	subs	r6, r2, #1
    40a2:	2a00      	cmp	r2, #0
    40a4:	d1ee      	bne.n	4084 <memcpy+0x7c>
    40a6:	e7f5      	b.n	4094 <memcpy+0x8c>
    40a8:	1e56      	subs	r6, r2, #1
    40aa:	0005      	movs	r5, r0
    40ac:	e7ea      	b.n	4084 <memcpy+0x7c>
    40ae:	001a      	movs	r2, r3
    40b0:	e7f6      	b.n	40a0 <memcpy+0x98>
    40b2:	46c0      	nop			; (mov r8, r8)
    40b4:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
    40b8:	20656761 	rsbcs	r6, r5, r1, ror #14
    40bc:	6f724200 	svcvs	0x00724200
    40c0:	61636461 	cmnvs	r3, r1, ror #8
    40c4:	00207473 	eoreq	r7, r0, r3, ror r4
    40c8:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 3f38 <NOROM_ChipInfo_GetChipFamily+0x30>
    40cc:	646f6e20 	strbtvs	r6, [pc], #-3616	; 40d4 <memcpy+0xcc>
    40d0:	64252065 	strtvs	r2, [r5], #-101	; 0xffffff9b
    40d4:	65532820 	ldrbvs	r2, [r3, #-2080]	; 0xfffff7e0
    40d8:	64252071 	strtvs	r2, [r5], #-113	; 0xffffff8f
    40dc:	25203a29 	strcs	r3, [r0, #-2601]!	; 0xfffff5d7
    40e0:	000d0a73 	andeq	r0, sp, r3, ror sl
    40e4:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
    40e8:	20656761 	rsbcs	r6, r5, r1, ror #14
    40ec:	746e6553 	strbtvc	r6, [lr], #-1363	; 0xfffffaad
    40f0:	43000d0a 	movwmi	r0, #3338	; 0xd0a
    40f4:	6f6e6e61 	svcvs	0x006e6e61
    40f8:	706f2074 	rsbvc	r2, pc, r4, ror r0	; <UNPREDICTABLE>
    40fc:	74206e65 	strtvc	r6, [r0], #-3685	; 0xfffff19b
    4100:	69207663 	stmdbvs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}
    4104:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    4108:	65636166 	strbvs	r6, [r3, #-358]!	; 0xfffffe9a
    410c:	50325000 	eorspl	r5, r2, r0
    4110:	61684320 	cmnvs	r8, r0, lsr #6
    4114:	4e282074 	mcrmi	0, 1, r2, cr8, cr4, {3}
    4118:	2065646f 	rsbcs	r6, r5, pc, ror #8
    411c:	29642523 	stmdbcs	r4!, {r0, r1, r5, r8, sl, sp}^
    4120:	28000d0a 	stmdacs	r0, {r1, r3, r8, sl, fp}
    4124:	61682943 	cmnvs	r8, r3, asr #18
    4128:	2065676e 	rsbcs	r6, r5, lr, ror #14
    412c:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    4130:	0a444920 	beq	11165b8 <__ccfg+0x10f6610>
    4134:	2944280d 	stmdbcs	r4, {r0, r2, r3, fp, sp}^
    4138:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
    413c:	72742074 	rsbsvc	r2, r4, #116	; 0x74
    4140:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
    4144:	69737369 	ldmdbvs	r3!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
    4148:	0d0a6e6f 	stceq	14, cr6, [sl, #-444]	; 0xfffffe44
    414c:	72294228 	eorvc	r4, r9, #40, 4	; 0x80000002
    4150:	6364616f 	cmnvs	r4, #-1073741797	; 0xc000001b
    4154:	20747361 	rsbscs	r7, r4, r1, ror #6
    4158:	6e617274 	mcrvs	2, 3, r7, cr1, cr4, {3}
    415c:	73696d73 	cmnvc	r9, #7360	; 0x1cc0
    4160:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    4164:	65530d0a 	ldrbvs	r0, [r3, #-3338]	; 0xfffff2f6
    4168:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    416c:	3a6e6f69 	bcc	1b9ff18 <__ccfg+0x1b7ff70>
    4170:	63250020 			; <UNDEFINED> instruction: 0x63250020
    4174:	77654e00 	strbvc	r4, [r5, -r0, lsl #28]!
    4178:	646f6e20 	strbtvs	r6, [pc], #-3616	; 4180 <memcpy+0x178>
    417c:	44492065 	strbmi	r2, [r9], #-101	; 0xffffff9b
    4180:	2d312820 	ldccs	8, cr2, [r1, #-128]!	; 0xffffff80
    4184:	3a293532 	bcc	a51654 <__ccfg+0xa316ac>
    4188:	63655200 	cmnvs	r5, #0, 4
    418c:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
    4190:	6f6e2072 	svcvs	0x006e2072
    4194:	49206564 	stmdbmi	r0!, {r2, r5, r6, r8, sl, sp, lr}
    4198:	31282044 			; <UNDEFINED> instruction: 0x31282044
    419c:	2935322d 	ldmdbcs	r5!, {r0, r2, r3, r5, r9, ip, sp}
    41a0:	654d003a 	strbvs	r0, [sp, #-58]	; 0xffffffc6
    41a4:	67617373 			; <UNDEFINED> instruction: 0x67617373
    41a8:	00203a65 	eoreq	r3, r0, r5, ror #20
    41ac:	45535953 	ldrbmi	r5, [r3, #-2387]	; 0xfffff6ad
    41b0:	203a5252 	eorscs	r5, sl, r2, asr r2
    41b4:	202c7825 	eorcs	r7, ip, r5, lsr #16
    41b8:	75007325 	strvc	r7, [r0, #-805]	; 0xfffffcdb
    41bc:	75007261 	strvc	r7, [r0, #-609]	; 0xfffffd9f
    41c0:	50006961 	andpl	r6, r0, r1, ror #18
    41c4:	534f6369 	movtpl	r6, #62313	; 0xf369
    41c8:	2e357620 	cfmsuba32cs	mvax1, mvax7, mvfx5, mvfx0
    41cc:	47502f34 	smmlarmi	r0, r4, pc, r2	; <UNPREDICTABLE>
    41d0:	32303831 	eorscc	r3, r0, #3211264	; 0x310000
    41d4:	2d413232 	sfmcs	f3, 2, [r1, #-200]	; 0xffffff38
    41d8:	33314343 	teqcc	r1, #201326593	; 0xc000001
    41dc:	4c5f3035 	mrrcmi	0, 3, r3, pc, cr5	; <UNPREDICTABLE>
    41e0:	434e5541 	movtmi	r5, #58689	; 0xe541
    41e4:	2c4c5848 	mcrrcs	8, 4, r5, ip, cr8
    41e8:	29432820 	stmdbcs	r3, {r5, fp, sp}^
    41ec:	736c4f20 	cmnvc	ip, #32, 30	; 0x80
    41f0:	74656e6f 	strbtvc	r6, [r5], #-3695	; 0xfffff191
    41f4:	6d6f4320 	stclvs	3, cr4, [pc, #-128]!	; 417c <memcpy+0x174>
    41f8:	696e756d 	stmdbvs	lr!, {r0, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    41fc:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    4200:	2c736e6f 	ldclcs	14, cr6, [r3], #-444	; 0xfffffe44
    4204:	30303220 	eorscc	r3, r0, r0, lsr #4
    4208:	30322d32 	eorscc	r2, r2, r2, lsr sp
    420c:	4c003831 	stcmi	8, cr3, [r0], {49}	; 0x31
    4210:	6f746665 	svcvs	0x00746665
    4214:	20726576 	rsbscs	r6, r2, r6, ror r5
    4218:	3a4d4152 	bcc	1354768 <__ccfg+0x13347c0>
    421c:	20642520 	rsbcs	r2, r4, r0, lsr #10
    4220:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    4224:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
    4228:	63695000 	cmnvs	r9, #0
    422c:	6820534f 	stmdavs	r0!, {r0, r1, r2, r3, r6, r8, r9, ip, lr}
    4230:	65746c61 	ldrbvs	r6, [r4, #-3169]!	; 0xfffff39f
    4234:	00000064 	andeq	r0, r0, r4, rrx

00004238 <port_confs>:
    4238:	00306080 	eorseq	r6, r0, r0, lsl #1
    423c:	00386080 	eorseq	r6, r8, r0, lsl #1
    4240:	00186010 	andseq	r6, r8, r0, lsl r0
    4244:	2010400f 	andscs	r4, r0, pc
    4248:	30694000 	rsbcc	r4, r9, r0
    424c:	30714000 	rsbscc	r4, r1, r0
    4250:	00b86008 	adcseq	r6, r8, r8
    4254:	60c94000 	sbcvs	r4, r9, r0
    4258:	60d14000 	sbcsvs	r4, r1, r0
    425c:	60d94000 	sbcsvs	r4, r9, r0
    4260:	60e14000 	rscvs	r4, r1, r0
    4264:	00096380 	andeq	r6, r9, r0, lsl #7
    4268:	00f16b80 	rscseq	r6, r1, r0, lsl #23
    426c:	20402000 	subcs	r2, r0, r0
    4270:	00486080 	subeq	r6, r8, r0, lsl #1
    4274:	00506080 	subseq	r6, r0, r0, lsl #1
    4278:	00a06000 	adceq	r6, r0, r0
    427c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    4280:	74750065 	ldrbtvc	r0, [r5], #-101	; 0xffffff9b
    4284:	73006120 	movwvc	r6, #288	; 0x120
    4288:	64610077 	strbtvs	r0, [r1], #-119	; 0xffffff89
    428c:	69007664 	stmdbvs	r0, {r2, r5, r6, r9, sl, ip, sp, lr}
    4290:	616d006f 	cmnvs	sp, pc, rrx
    4294:	6d00316c 	stfvss	f3, [r0, #-432]	; 0xfffffe50
    4298:	00676c61 	rsbeq	r6, r7, r1, ror #24
    429c:	0069706b 	rsbeq	r7, r9, fp, rrx
    42a0:	636c616d 	cmnvs	ip, #1073741851	; 0x4000001b
	...

000042a5 <__pi_hex_enc_table>:
    42a5:	33323130 	teqcc	r2, #48, 2
    42a9:	37363534 			; <UNDEFINED> instruction: 0x37363534
    42ad:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
    42b1:	46454443 	strbmi	r4, [r5], -r3, asr #8
    42b5:	30766374 	rsbscc	r6, r6, r4, ror r3
    42b9:	69640031 	stmdbvs	r4!, {r0, r4, r5}^
    42bd:	736f7073 	cmnvc	pc, #115	; 0x73
    42c1:	65732065 	ldrbvs	r2, [r3, #-101]!	; 0xffffff9b
    42c5:	69640073 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^
    42c9:	736f7073 	cmnvc	pc, #115	; 0x73
    42cd:	68702065 	ldmdavs	r0!, {r0, r2, r5, r6, sp}^
    42d1:	63740079 	cmnvs	r4, #121	; 0x79
    42d5:	00323076 	eorseq	r3, r2, r6, ror r0
    42d9:	30766374 	rsbscc	r6, r6, r4, ror r3
    42dd:	63740033 	cmnvs	r4, #51	; 0x33
    42e1:	00343076 	eorseq	r3, r4, r6, ror r0
    42e5:	30766374 	rsbscc	r6, r6, r4, ror r3
    42e9:	63740035 	cmnvs	r4, #53	; 0x35
    42ed:	00363076 	eorseq	r3, r6, r6, ror r0
    42f1:	31766374 	cmncc	r6, r4, ror r3
    42f5:	63740030 	cmnvs	r4, #48	; 0x30
    42f9:	00313176 	eorseq	r3, r1, r6, ror r1
    42fd:	31766374 	cmncc	r6, r4, ror r3
    4301:	63740036 	cmnvs	r4, #54	; 0x36
    4305:	00373176 	eorseq	r3, r7, r6, ror r1
    4309:	31766374 	cmncc	r6, r4, ror r3
    430d:	63740038 	cmnvs	r4, #56	; 0x38
    4311:	00333276 	eorseq	r3, r3, r6, ror r2
    4315:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    4319:	63740032 	cmnvs	r4, #50	; 0x32
    431d:	00363276 	eorseq	r3, r6, r6, ror r2
    4321:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    4325:	63740037 	cmnvs	r4, #55	; 0x37
    4329:	00383276 	eorseq	r3, r8, r6, ror r2
    432d:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    4331:	63740039 	cmnvs	r4, #57	; 0x39
    4335:	00303376 	eorseq	r3, r0, r6, ror r3
    4339:	33766374 	cmncc	r6, #116, 6	; 0xd0000001
    433d:	63740031 	cmnvs	r4, #49	; 0x31
    4341:	00323376 	eorseq	r3, r2, r6, ror r3
    4345:	33766374 	cmncc	r6, #116, 6	; 0xd0000001
    4349:	63740033 	cmnvs	r4, #51	; 0x33
    434d:	00343376 	eorseq	r3, r4, r6, ror r3

00004351 <__input_pins>:
    4351:	9c9b9a99 	vldmials	fp, {s18-s170}
	...

00004356 <__button_list>:
    4356:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
    435a:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    435e:	00706f20 	rsbseq	r6, r0, r0, lsr #30
    4362:	00317472 	eorseq	r7, r1, r2, ror r4
    4366:	20505548 	subscs	r5, r0, r8, asr #10
    436a:	20786c25 	rsbscs	r6, r8, r5, lsr #24
    436e:	00786c25 	rsbseq	r6, r8, r5, lsr #24
    4372:	676e6168 	strbvs	r6, [lr, -r8, ror #2]!
    4376:	30636920 	rsbcc	r6, r3, r0, lsr #18
    437a:	50554800 	subspl	r4, r5, r0, lsl #16
    437e:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    4382:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    4386:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    438a:	32747200 	rsbscc	r7, r4, #0, 4
    438e:	44414200 	strbmi	r4, [r1], #-512	; 0xfffffe00
    4392:	00585220 	subseq	r5, r8, r0, lsr #4
    4396:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    439a:	00797020 	rsbseq	r7, r9, r0, lsr #32
    439e:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    43a2:	31636300 	cmncc	r3, r0, lsl #6
    43a6:	626d2033 	rsbvs	r2, sp, #51	; 0x33
    43aa:	31434300 	mrscc	r4, (UNDEF: 115)
    43ae:	3a303533 	bcc	c11882 <__ccfg+0xbf18da>
    43b2:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    43b6:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    43ba:	00642520 	rsbeq	r2, r4, r0, lsr #10

000043be <patable>:
    43be:	12c304c0 	sbcne	r0, r3, #192, 8	; 0xc0000000
    43c2:	184418c5 	stmdane	r4, {r0, r2, r6, r7, fp, ip}^
    43c6:	32ce24c9 	sbccc	r2, lr, #-922746880	; 0xc9000000
    43ca:	bc2b58d8 	stclt	8, cr5, [fp], #-864	; 0xfffffca0
	...

000043d0 <patchGenfskRfe>:
    43d0:	000061a3 	andeq	r6, r0, r3, lsr #3
    43d4:	1307147f 	movwne	r1, #29823	; 0x747f
    43d8:	24f1004d 	ldrbtcs	r0, [r1], #77	; 0x4d
    43dc:	3f131f2e 	svccc	0x00131f2e
    43e0:	003f0ab0 	ldrhteq	r0, [pc], -r0
    43e4:	0000ff07 	andeq	pc, r0, r7, lsl #30
    43e8:	40004030 	andmi	r4, r0, r0, lsr r0
    43ec:	40034001 	andmi	r4, r3, r1
    43f0:	400f4007 	andmi	r4, pc, r7
    43f4:	40cf404f 	sbcmi	r4, pc, pc, asr #32
    43f8:	43cf41cf 	bicmi	r4, pc, #-1073741773	; 0xc0000033
    43fc:	4fcf47cf 	svcmi	0x00cf47cf
    4400:	2fcf3fcf 	svccs	0x00cf3fcf
    4404:	0fcf1fcf 	svceq	0x00cf1fcf
    4408:	00000000 	andeq	r0, r0, r0
    440c:	0008000f 	andeq	r0, r8, pc
    4410:	003f0000 	eorseq	r0, pc, r0
    4414:	00400000 	subeq	r0, r0, r0
    4418:	0000003f 	andeq	r0, r0, pc, lsr r0
    441c:	00680004 	rsbeq	r0, r8, r4
    4420:	00dc000e 	sbcseq	r0, ip, lr
    4424:	00430006 	subeq	r0, r3, r6
    4428:	0005001a 	andeq	r0, r5, sl, lsl r0
    442c:	00000000 	andeq	r0, r0, r0
    4430:	00000002 	andeq	r0, r0, r2
    4434:	0000003f 	andeq	r0, r0, pc, lsr r0
    4438:	00040000 	andeq	r0, r4, r0
    443c:	000000c0 	andeq	r0, r0, r0, asr #1
    4440:	00c00004 	sbceq	r0, r0, r4
    4444:	00070000 	andeq	r0, r7, r0
    4448:	9100c050 	qaddls	ip, r0, r0
    444c:	c0707000 	rsbsgt	r7, r0, r0
    4450:	70009100 	andvc	r9, r0, r0, lsl #2
    4454:	00213182 	eoreq	r3, r1, r2, lsl #3
    4458:	b1109131 	tstlt	r0, r1, lsr r1
    445c:	81017000 	mrshi	r7, (UNDEF: 1)
    4460:	a100b101 	tstge	r0, r1, lsl #2
    4464:	91323182 	teqls	r2, r2, lsl #3
    4468:	9101b110 	tstls	r1, r0, lsl r1
    446c:	81411011 	cmphi	r1, r1, lsl r0
    4470:	404f2241 	submi	r2, pc, r1, asr #4
    4474:	700006f1 	strdvc	r0, [r0], -r1
    4478:	9101c051 	qaddls	ip, r1, r1
    447c:	39101830 	ldmdbcc	r0, {r4, r5, fp, ip}
    4480:	d0083183 	andle	r3, r8, r3, lsl #3
    4484:	6f413118 	svcvs	0x00413118
    4488:	91310031 	teqls	r1, r1, lsr r0
    448c:	1483b110 	strne	fp, [r3], #272	; 0x110
    4490:	685b1614 	ldmdavs	fp, {r2, r4, r9, sl, ip}^
    4494:	10257000 	eorne	r7, r5, r0
    4498:	9100c050 	qaddls	ip, r0, r0
    449c:	c0c0c3f4 	strdgt	ip, [r0], #52	; 0x34
    44a0:	6f031420 	svcvs	0x00031420
    44a4:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    44a8:	3182c022 	orrcc	ip, r2, r2, lsr #32
    44ac:	91310021 	teqls	r1, r1, lsr #32
    44b0:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    44b4:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    44b8:	3182c082 	orrcc	ip, r2, r2, lsl #1
    44bc:	91310021 	teqls	r1, r1, lsr #32
    44c0:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    44c4:	c0a21031 	adcgt	r1, r2, r1, lsr r0
    44c8:	00213182 	eoreq	r3, r1, r2, lsl #3
    44cc:	b1109131 	tstlt	r0, r1, lsr r1
    44d0:	31151050 	tstcc	r5, r0, asr r0
    44d4:	92051405 	andls	r1, r5, #83886080	; 0x5000000
    44d8:	643f7000 	ldrtvs	r7, [pc], #-0	; 44e0 <patchGenfskRfe+0x110>
    44dc:	1031c052 	eorsne	ip, r1, r2, asr r0
    44e0:	31610631 	cmncc	r1, r1, lsr r6
    44e4:	644202c1 	strbvs	r0, [r2], #-705	; 0xfffffd3f
    44e8:	1031c112 	eorsne	ip, r1, r2, lsl r1
    44ec:	06713921 	ldrbteq	r3, [r1], -r1, lsr #18
    44f0:	02e13151 	rsceq	r3, r1, #1073741844	; 0x40000014
    44f4:	70006442 	andvc	r6, r0, r2, asr #8
    44f8:	6599658a 	ldrvs	r6, [r9, #1418]	; 0x58a
    44fc:	8220c088 	eorhi	ip, r0, #136	; 0x88
    4500:	39803950 	stmibcc	r0, {r4, r6, r8, fp, ip, sp}
    4504:	409f1e00 	addsmi	r1, pc, r0, lsl #28
    4508:	3001c041 	andcc	ip, r1, r1, asr #32
    450c:	1a181418 	bne	609574 <__ccfg+0x5e95cc>
    4510:	8230c089 	eorshi	ip, r0, #137	; 0x89
    4514:	39803960 	stmibcc	r0, {r5, r6, r8, fp, ip, sp}
    4518:	40a91e00 	adcmi	r1, r9, r0, lsl #28
    451c:	3001c041 	andcc	ip, r1, r1, asr #32
    4520:	1a191419 	bne	64958c <__ccfg+0x6295e4>
    4524:	9136643c 	teqls	r6, ip, lsr r4
    4528:	9134b110 	teqls	r4, r0, lsl r1
    452c:	b054b110 	subslt	fp, r4, r0, lsl r1
    4530:	a0547100 	subsge	r7, r4, r0, lsl #2
    4534:	80f0b064 	rscshi	fp, r0, r4, rrx
    4538:	40af2200 	adcmi	r2, pc, r0, lsl #4
    453c:	90b01240 	adcsls	r1, r0, r0, asr #4
    4540:	8253b032 	subshi	fp, r3, #50	; 0x32
    4544:	39533953 	ldmdbcc	r3, {r0, r1, r4, r6, r8, fp, ip, sp}^
    4548:	643f6485 	ldrtvs	r6, [pc], #-1157	; 4550 <patchGenfskRfe+0x180>
    454c:	c122c111 			; <UNDEFINED> instruction: 0xc122c111
    4550:	c1706442 	cmngt	r0, r2, asr #8
    4554:	c11168c2 	tstgt	r1, r2, asr #17
    4558:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    455c:	68c7c170 	stmiavs	r7, {r4, r5, r6, r8, lr, pc}^
    4560:	9100c050 	qaddls	ip, r0, r0
    4564:	92987227 	addsls	r7, r8, #1879048194	; 0x70000002
    4568:	16141615 			; <UNDEFINED> instruction: 0x16141615
    456c:	10531042 	subsne	r1, r3, r2, asr #32
    4570:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    4574:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    4578:	31313981 	teqcc	r1, r1, lsl #19
    457c:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    4580:	72276572 	eorvc	r6, r7, #478150656	; 0x1c800000
    4584:	b2709299 	rsbslt	r9, r0, #-1879048183	; 0x90000009
    4588:	10731062 	rsbsne	r1, r3, r2, rrx
    458c:	8231c3f0 	eorshi	ip, r1, #240, 6	; 0xc0000003
    4590:	39213121 	stmdbcc	r1!, {r0, r5, r8, ip, sp}
    4594:	101b3981 	andsne	r3, fp, r1, lsl #19
    4598:	c0e26572 	rscgt	r6, r2, r2, ror r5
    459c:	82603182 	rsbhi	r3, r0, #-2147483616	; 0x80000020
    45a0:	39803180 	stmibcc	r0, {r7, r8, ip, sp}
    45a4:	b0610002 	rsblt	r0, r1, r2
    45a8:	91327100 	teqls	r2, r0, lsl #2
    45ac:	a051b110 	subsge	fp, r1, r0, lsl r1
    45b0:	7227b061 	eorvc	fp, r7, #97	; 0x61
    45b4:	68f3c230 	ldmvs	r3!, {r4, r5, r9, lr, pc}^
    45b8:	12800000 	addne	r0, r0, #0
    45bc:	b03290b0 	ldrhtlt	r9, [r2], -r0
    45c0:	c0507000 	subsgt	r7, r0, r0
    45c4:	72279100 	eorvc	r9, r7, #0, 2
    45c8:	10629299 	mlsne	r2, r9, r2, r9
    45cc:	c3f01073 	mvnsgt	r1, #115	; 0x73
    45d0:	31218231 			; <UNDEFINED> instruction: 0x31218231
    45d4:	39813921 	stmibcc	r1, {r0, r5, r8, fp, ip, sp}
    45d8:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    45dc:	7227657e 	eorvc	r6, r7, #528482304	; 0x1f800000
    45e0:	b2709298 	rsbslt	r9, r0, #152, 4	; 0x80000009
    45e4:	10531042 	subsne	r1, r3, r2, asr #32
    45e8:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    45ec:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    45f0:	31313981 	teqcc	r1, r1, lsl #19
    45f4:	657e101a 	ldrbvs	r1, [lr, #-26]!	; 0xffffffe6
    45f8:	b061a051 	rsblt	sl, r1, r1, asr r0
    45fc:	c0b07227 	adcsgt	r7, r0, r7, lsr #4
    4600:	643f6918 	ldrtvs	r6, [pc], #-2328	; 4608 <patchGenfskRfe+0x238>
    4604:	c122c101 			; <UNDEFINED> instruction: 0xc122c101
    4608:	c1016442 	tstgt	r1, r2, asr #8
    460c:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    4610:	643c1a15 	ldrtvs	r1, [ip], #-2581	; 0xfffff5eb
    4614:	b1109135 	tstlt	r0, r5, lsr r1
    4618:	64858253 	strvs	r8, [r5], #595	; 0x253
    461c:	90b012c0 	adcsls	r1, r0, r0, asr #5
    4620:	7000b032 	andvc	fp, r0, r2, lsr r0
    4624:	c272643f 	rsbsgt	r6, r2, #1056964608	; 0x3f000000
    4628:	6442c081 	strbvs	ip, [r2], #-129	; 0xffffff7f
    462c:	c111c122 	tstgt	r1, r2, lsr #2
    4630:	c0026442 	andgt	r6, r2, r2, asr #8
    4634:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    4638:	c331c062 	teqgt	r1, #98	; 0x62
    463c:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    4640:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    4644:	c111c302 	tstgt	r1, r2, lsl #6
    4648:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    464c:	64853953 	strvs	r3, [r5], #2387	; 0x953
    4650:	6447c3e2 	strbvs	ip, [r7], #-994	; 0xfffffc1e
    4654:	41402211 	cmpmi	r0, r1, lsl r2
    4658:	c881c242 	stmgt	r1, {r1, r6, r9, lr, pc}
    465c:	c2526442 	subsgt	r6, r2, #1107296256	; 0x42000000
    4660:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    4664:	cee1c272 	mcrgt	2, 7, ip, cr1, cr2, {3}
    4668:	c2026442 	andgt	r6, r2, #1107296256	; 0x42000000
    466c:	6442c881 	strbvs	ip, [r2], #-2177	; 0xfffff77f
    4670:	c801c202 	stmdagt	r1, {r1, r9, lr, pc}
    4674:	c0b06442 	adcsgt	r6, r0, r2, asr #8
    4678:	70006954 	andvc	r6, r0, r4, asr r9
    467c:	c242643f 	subgt	r6, r2, #1056964608	; 0x3f000000
    4680:	6442c801 	strbvs	ip, [r2], #-2049	; 0xfffff7ff
    4684:	c011c252 	andsgt	ip, r1, r2, asr r2
    4688:	c2726442 	rsbsgt	r6, r2, #1107296256	; 0x42000000
    468c:	6442c0e1 	strbvs	ip, [r2], #-225	; 0xffffff1f
    4690:	c101c002 	tstgt	r1, r2
    4694:	c0626442 	rsbgt	r6, r2, r2, asr #8
    4698:	6442c301 	strbvs	ip, [r2], #-769	; 0xfffffcff
    469c:	c101c122 	tstgt	r1, r2, lsr #2
    46a0:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    46a4:	6442c101 	strbvs	ip, [r2], #-257	; 0xfffffeff
    46a8:	c101c302 	tstgt	r1, r2, lsl #6
    46ac:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    46b0:	70006485 	andvc	r6, r0, r5, lsl #9
    46b4:	7100b061 	tstvc	r0, r1, rrx
    46b8:	1c231412 	cfstrsne	mvf1, [r3], #-72	; 0xffffffb8
    46bc:	91334d7a 	teqls	r3, sl, ror sp
    46c0:	7000b110 	andvc	fp, r0, r0, lsl r1
    46c4:	b1109132 	tstlt	r0, r2, lsr r1
    46c8:	70006972 	andvc	r6, r0, r2, ror r9
    46cc:	7100b061 	tstvc	r0, r1, rrx
    46d0:	1c321813 	ldcne	8, cr1, [r2], #-76	; 0xffffffb4
    46d4:	91324986 	teqls	r2, r6, lsl #19
    46d8:	7000b110 	andvc	fp, r0, r0, lsl r1
    46dc:	b1109133 	tstlt	r0, r3, lsr r1
    46e0:	7000697e 	andvc	r6, r0, lr, ror r9
    46e4:	6447c0c2 	strbvs	ip, [r7], #-194	; 0xffffff3e
    46e8:	c0c21015 	sbcgt	r1, r2, r5, lsl r0
    46ec:	64471612 	strbvs	r1, [r7], #-1554	; 0xfffff9ee
    46f0:	14153141 	ldrne	r3, [r5], #-321	; 0xfffffebf
    46f4:	3180c0c0 	orrcc	ip, r0, r0, asr #1
    46f8:	10541405 	subsne	r1, r4, r5, lsl #8
    46fc:	040478a0 	streq	r7, [r4], #-2208	; 0xfffff760
    4700:	c0e67000 	rscgt	r7, r6, r0
    4704:	cc013186 	stfgts	f3, [r1], {134}	; 0x86
    4708:	10671416 	rsbne	r1, r7, r6, lsl r4
    470c:	c3f08261 	mvnsgt	r8, #268435462	; 0x10000006
    4710:	14170401 	ldrne	r0, [r7], #-1025	; 0xfffffbff
    4714:	73067000 	movwvc	r7, #24576	; 0x6000
    4718:	720b7205 	andvc	r7, fp, #1342177280	; 0x50000000
    471c:	b050720e 	subslt	r7, r0, lr, lsl #4
    4720:	80817100 	addhi	r7, r1, r0, lsl #2
    4724:	a050b060 	subsge	fp, r0, r0, rrx
    4728:	22418092 	subcs	r8, r1, #146	; 0x92
    472c:	808045c3 	addhi	r4, r0, r3, asr #11
    4730:	0410c1f1 	ldreq	ip, [r0], #-497	; 0xfffffe0f
    4734:	11011630 	tstne	r1, r0, lsr r6
    4738:	6c011401 	cfstrsvs	mvf1, [r1], {1}
    473c:	61d761d6 	ldrsbvs	r6, [r7, #22]
    4740:	61d961d8 	ldrsbvs	r6, [r9, #24]
    4744:	61db61da 	ldrsbvs	r6, [fp, #26]
    4748:	61de61dc 	ldrsbvs	r6, [lr, #28]
    474c:	61e261e0 	mvnvs	r6, r0, ror #3
    4750:	633661e4 	teqvs	r6, #228, 2	; 0x39
    4754:	80916339 	addshi	r6, r1, r9, lsr r3
    4758:	0421c0f2 	strteq	ip, [r1], #-242	; 0xffffff0e
    475c:	80823121 	addhi	r3, r2, r1, lsr #2
    4760:	14122a42 	ldrne	r2, [r2], #-2626	; 0xfffff5be
    4764:	11011632 	tstne	r1, r2, lsr r6
    4768:	6c011421 	cfstrsvs	mvf1, [r1], {33}	; 0x21
    476c:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    4770:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    4774:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    4778:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    477c:	61e661e6 	mvnvs	r6, r6, ror #3
    4780:	61e661e6 	mvnvs	r6, r6, ror #3
    4784:	61e661e6 	mvnvs	r6, r6, ror #3
    4788:	61e66494 			; <UNDEFINED> instruction: 0x61e66494
    478c:	61e664f9 	strdvs	r6, [r6, #73]!	; 0x49
    4790:	61e6652a 	mvnvs	r6, sl, lsr #10
    4794:	61e66556 	mvnvs	r6, r6, asr r5
    4798:	61e66746 	mvnvs	r6, r6, asr #14
    479c:	90b01210 	adcsls	r1, r0, r0, lsl r2
    47a0:	7306720e 	movwvc	r7, #25102	; 0x620e
    47a4:	12107205 	andsne	r7, r0, #1342177280	; 0x50000000
    47a8:	61a79030 			; <UNDEFINED> instruction: 0x61a79030
    47ac:	673ccff0 			; <UNDEFINED> instruction: 0x673ccff0
    47b0:	c003c1d4 	ldrdgt	ip, [r3], -r4
    47b4:	6454c3c0 	ldrbvs	ip, [r4], #-960	; 0xfffffc40
    47b8:	91507840 	cmpls	r0, r0, asr #16
    47bc:	92107850 	andsls	r7, r0, #80, 16	; 0x500000
    47c0:	92207860 	eorls	r7, r0, #96, 16	; 0x600000
    47c4:	92307870 	eorsls	r7, r0, #112, 16	; 0x700000
    47c8:	92407880 	subls	r7, r0, #128, 16	; 0x800000
    47cc:	92607890 	rsbls	r7, r0, #144, 16	; 0x900000
    47d0:	91907830 	orrsls	r7, r0, r0, lsr r8
    47d4:	39408210 	stmdbcc	r0, {r4, r9, pc}^
    47d8:	100106f0 	strdne	r0, [r1], -r0	; <UNPREDICTABLE>
    47dc:	14103110 	ldrne	r3, [r0], #-272	; 0xfffffef0
    47e0:	67429200 	strbvs	r9, [r2, -r0, lsl #4]
    47e4:	a0bc61e6 	adcsge	r6, ip, r6, ror #3
    47e8:	a054a0e2 	subsge	sl, r4, r2, ror #1
    47ec:	225080f0 	subscs	r8, r0, #240	; 0xf0
    47f0:	80404615 	subhi	r4, r0, r5, lsl r6
    47f4:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    47f8:	a040620d 	subge	r6, r0, sp, lsl #4
    47fc:	318d822d 	orrcc	r8, sp, sp, lsr #4
    4800:	8210398d 	andshi	r3, r0, #2310144	; 0x234000
    4804:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    4808:	821a1009 	andshi	r1, sl, #9
    480c:	041a394a 	ldreq	r3, [sl], #-2378	; 0xfffff6b6
    4810:	39808210 	stmibcc	r0, {r4, r9, pc}
    4814:	100e0410 	andne	r0, lr, r0, lsl r4
    4818:	10bc10ab 	adcsne	r1, ip, fp, lsr #1
    481c:	646310c2 	strbtvs	r1, [r3], #-194	; 0xffffff3e
    4820:	cfe07229 	svcgt	0x00e07229
    4824:	b013673c 	andslt	r6, r3, ip, lsr r7
    4828:	66c8b003 	strbvs	fp, [r8], r3
    482c:	b050b053 	subslt	fp, r0, r3, asr r0
    4830:	b064b054 	rsblt	fp, r4, r4, asr r0
    4834:	66a5b013 	ssatvs	fp, #6, r3
    4838:	22e08210 	rsccs	r8, r0, #16, 4
    483c:	66ae4638 			; <UNDEFINED> instruction: 0x66ae4638
    4840:	80417100 	subhi	r7, r1, r0, lsl #2
    4844:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    4848:	221080f0 	andscs	r8, r0, #240	; 0xf0
    484c:	22f0464b 	rscscs	r4, r0, #78643200	; 0x4b00000
    4850:	b0644718 	rsblt	r4, r4, r8, lsl r7
    4854:	42382231 	eorsmi	r2, r8, #268435459	; 0x10000003
    4858:	66ceb063 	strbvs	fp, [lr], r3, rrx
    485c:	22e08210 	rsccs	r8, r0, #16, 4
    4860:	66704638 			; <UNDEFINED> instruction: 0x66704638
    4864:	b0646238 	rsblt	r6, r4, r8, lsr r2
    4868:	318f816f 	orrcc	r8, pc, pc, ror #2
    486c:	dfd03d8f 	svcle	0x00d03d8f
    4870:	673c92ff 			; <UNDEFINED> instruction: 0x673c92ff
    4874:	80417100 	subhi	r7, r1, r0, lsl #2
    4878:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    487c:	80f0b064 	rscshi	fp, r0, r4, rrx
    4880:	42652250 	rsbmi	r2, r5, #80, 4
    4884:	8211b063 	andshi	fp, r1, #99	; 0x63
    4888:	466022c1 	strbtmi	r2, [r0], -r1, asr #5
    488c:	670566ce 	strvs	r6, [r5, -lr, asr #13]
    4890:	22d18211 	sbcscs	r8, r1, #268435457	; 0x10000001
    4894:	66704652 			; <UNDEFINED> instruction: 0x66704652
    4898:	81616252 	cmnhi	r1, r2, asr r2
    489c:	31818172 	orrcc	r8, r1, r2, ror r1
    48a0:	31823d81 	orrcc	r3, r2, r1, lsl #27
    48a4:	efc03d82 	svc	0x00c03d82
    48a8:	930292f1 	movwls	r9, #8945	; 0x22f1
    48ac:	620b673c 	andvs	r6, fp, #60, 14	; 0xf00000
    48b0:	91c081b0 	strhls	r8, [r0, #16]
    48b4:	829781d3 	addshi	r8, r7, #-1073741772	; 0xc0000034
    48b8:	18d3a290 	ldmne	r3, {r4, r7, r9, sp, pc}^
    48bc:	0bf34e7f 	bleq	ffcd82c0 <_estack+0xdfcd32c0>
    48c0:	1ce31613 	stclne	6, cr1, [r3], #76	; 0x4c
    48c4:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    48c8:	143b81e3 	ldrtne	r8, [fp], #-483	; 0xfffffe1d
    48cc:	1cba6290 	lfmne	f6, 4, [sl], #576	; 0x240
    48d0:	1e23468b 	cfmadda32ne	mvax4, mvax4, mvfx3, mvfx11
    48d4:	1ce34a8b 	vstmiane	r3!, {s9-s147}
    48d8:	b2904e8b 	addslt	r4, r0, #2224	; 0x8b0
    48dc:	428b2207 	addmi	r2, fp, #1879048192	; 0x70000000
    48e0:	1a1ba290 	bne	6ed328 <__ccfg+0x6cd380>
    48e4:	1ce36296 	sfmne	f6, 2, [r3], #600	; 0x258
    48e8:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    48ec:	183b81e3 	ldmdane	fp!, {r0, r1, r5, r6, r7, r8, pc}
    48f0:	4ea01cab 	cdpmi	12, 10, cr1, cr0, cr11, {5}
    48f4:	4aa21c9b 	bmi	fe88bb68 <_estack+0xde886b68>
    48f8:	42a41cbc 	adcmi	r1, r4, #188, 24	; 0xbc00
    48fc:	821010b2 	andshi	r1, r0, #178	; 0xb2
    4900:	429d22d0 	addsmi	r2, sp, #208, 4
    4904:	221080f0 	andscs	r8, r0, #240	; 0xf0
    4908:	646346a4 	strbtvs	r4, [r3], #-1700	; 0xfffff95c
    490c:	62a466a5 	adcvs	r6, r4, #173015040	; 0xa500000
    4910:	629410ab 	addsvs	r1, r4, #171	; 0xab
    4914:	6294109b 	addsvs	r1, r4, #155	; 0x9b
    4918:	82307000 	eorshi	r7, r0, #0
    491c:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    4920:	7100b063 	tstvc	r0, r3, rrx
    4924:	10bc6aa8 	adcsne	r6, ip, r8, lsr #21
    4928:	7000b0e0 	andvc	fp, r0, r0, ror #1
    492c:	91c281b2 	strhls	r8, [r2, #18]
    4930:	820181d2 	andhi	r8, r1, #-2147483596	; 0x80000034
    4934:	81511812 	cmphi	r1, r2, lsl r8
    4938:	82411812 	subhi	r1, r1, #1179648	; 0x120000
    493c:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    4940:	4abf1c12 	bmi	fefcb990 <_estack+0xdefc6990>
    4944:	b032b0e2 	eorslt	fp, r2, r2, ror #1
    4948:	92f2dfb0 	rscsls	sp, r2, #176, 30	; 0x2c0
    494c:	c7f1673c 			; <UNDEFINED> instruction: 0xc7f1673c
    4950:	4ec31421 	cdpmi	4, 12, cr1, cr3, cr1, {1}
    4954:	9162c812 	cmnls	r2, r2, lsl r8
    4958:	b0319172 	eorslt	r9, r1, r2, ror r1
    495c:	7000b0e1 	andvc	fp, r0, r1, ror #1
    4960:	c006c008 	andgt	ip, r6, r8
    4964:	9160c800 	cmnls	r0, r0, lsl #16
    4968:	70009170 	andvc	r9, r0, r0, ror r1
    496c:	81b08201 	lslshi	r8, r1, #4
    4970:	81d091c0 	bicshi	r9, r0, r0, asr #3
    4974:	81511810 	cmphi	r1, r0, lsl r8
    4978:	14061810 	strne	r1, [r6], #-2064	; 0xfffff7f0
    497c:	824280e1 	subhi	r8, r2, #225	; 0xe1
    4980:	3d823182 	stfccs	f3, [r2, #520]	; 0x208
    4984:	4ae41c20 	bmi	ff90ba0c <_estack+0xdf906a0c>
    4988:	2221b0e2 	eorcs	fp, r1, #226	; 0xe2
    498c:	b03246e8 	eorslt	r4, r2, r8, ror #13
    4990:	dfa01005 	svcle	0x00a01005
    4994:	673c92f5 			; <UNDEFINED> instruction: 0x673c92f5
    4998:	42e82221 	rscmi	r2, r8, #268435458	; 0x10000002
    499c:	b032a0e2 	eorslt	sl, r2, r2, ror #1
    49a0:	39418231 	stmdbcc	r1, {r0, r4, r5, r9, pc}^
    49a4:	0401c0f0 	streq	ip, [r1], #-240	; 0xffffff10
    49a8:	42f61e01 	rscsmi	r1, r6, #1, 28
    49ac:	c0101618 	andsgt	r1, r0, r8, lsl r6
    49b0:	1c083010 	stcne	0, cr3, [r8], {16}
    49b4:	10604704 	rsbne	r4, r0, r4, lsl #14
    49b8:	10063c10 	andne	r3, r6, r0, lsl ip
    49bc:	1461c7f1 	strbtne	ip, [r1], #-2033	; 0xfffff80f
    49c0:	c8164efa 	ldmdagt	r6, {r1, r3, r4, r5, r6, r7, r9, sl, fp, lr}
    49c4:	81719166 	cmnhi	r1, r6, ror #2
    49c8:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    49cc:	4b011c16 	blmi	4ba2c <__ccfg+0x2ba84>
    49d0:	b0319176 	eorslt	r9, r1, r6, ror r1
    49d4:	c008c006 	andgt	ip, r8, r6
    49d8:	81617000 	cmnhi	r1, r0
    49dc:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    49e0:	39808240 	stmibcc	r0, {r6, r9, pc}
    49e4:	1cf11801 	ldclne	8, cr1, [r1], #4
    49e8:	14014b17 	strne	r4, [r1], #-2839	; 0xfffff4e9
    49ec:	22c080b0 	sbccs	r8, r0, #176	; 0xb0
    49f0:	b0bc4717 	adcslt	r4, ip, r7, lsl r7
    49f4:	ef90b033 	svc	0x0090b033
    49f8:	930f92f1 	movwls	r9, #62193	; 0xf2f1
    49fc:	7000673c 	andvc	r6, r0, ip, lsr r7
    4a00:	b063a003 	rsblt	sl, r3, r3
    4a04:	b0efb064 	rsclt	fp, pc, r4, rrx
    4a08:	71006556 	tstvc	r0, r6, asr r5
    4a0c:	22008040 	andcs	r8, r0, #64	; 0x40
    4a10:	b064472b 	rsblt	r4, r4, fp, lsr #14
    4a14:	a0ef652a 	rscge	r6, pc, sl, lsr #10
    4a18:	80407100 	subhi	r7, r0, r0, lsl #2
    4a1c:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    4a20:	b003b064 	andlt	fp, r3, r4, rrx
    4a24:	82016238 	andhi	r6, r1, #56, 4	; 0x80000003
    4a28:	31828162 	orrcc	r8, r2, r2, ror #2
    4a2c:	ef803d82 	svc	0x00803d82
    4a30:	930292f1 	movwls	r9, #8945	; 0x22f1
    4a34:	a003673c 	andge	r6, r3, ip, lsr r7
    4a38:	61e66556 	mvnvs	r6, r6, asr r5
    4a3c:	646380a2 	strbtvs	r8, [r3], #-162	; 0xffffff5e
    4a40:	b05061e6 	subslt	r6, r0, r6, ror #3
    4a44:	61e67100 	mvnvs	r7, r0, lsl #2
    4a48:	82d092e0 	sbcshi	r9, r0, #224, 4
    4a4c:	473d2200 	ldrmi	r2, [sp, -r0, lsl #4]!
    4a50:	7000b2c0 	andvc	fp, r0, r0, asr #5
    4a54:	22f080a0 	rscscs	r8, r0, #160	; 0xa0
    4a58:	b0304359 	eorslt	r4, r0, r9, asr r3
    4a5c:	3162c102 	cmncc	r2, r2, lsl #2
    4a60:	80a0c001 	adchi	ip, r0, r1
    4a64:	43521e00 	cmpmi	r2, #0, 28
    4a68:	435322f0 	cmpmi	r3, #240, 4
    4a6c:	3160f5a0 	msrcc	SPSR_, r0, lsr #11
    4a70:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    4a74:	1a101020 	bne	408afc <__ccfg+0x3e8b54>
    4a78:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    4a7c:	16121611 			; <UNDEFINED> instruction: 0x16121611
    4a80:	70006b54 	andvc	r6, r0, r4, asr fp

00004a84 <patchImageGenfsk>:
    4a84:	210004ad 	smlatbcs	r0, sp, r4, r0
    4a88:	21000449 	tstcs	r0, r9, asr #8
    4a8c:	2100047d 	tstcs	r0, sp, ror r4
    4a90:	21000481 	smlabbcs	r0, r1, r4, r0
    4a94:	21000511 	tstcs	r0, r1, lsl r5
    4a98:	21000591 			; <UNDEFINED> instruction: 0x21000591
    4a9c:	21000641 	tstcs	r0, r1, asr #12
    4aa0:	4710b5f8 			; <UNDEFINED> instruction: 0x4710b5f8
    4aa4:	460eb5f8 			; <UNDEFINED> instruction: 0x460eb5f8
    4aa8:	25012100 	strcs	r2, [r1, #-256]	; 0xffffff00
    4aac:	473004ad 	ldrmi	r0, [r0, -sp, lsr #9]!
    4ab0:	7803480a 	stmdavc	r3, {r1, r3, fp, lr}
    4ab4:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
    4ab8:	d00b079b 	mulle	fp, fp, r7
    4abc:	78204c12 	stmdavc	r0!, {r1, r4, sl, fp, lr}
    4ac0:	d00728ff 	strdle	r2, [r7], -pc	; <UNPREDICTABLE>
    4ac4:	702121ff 	strdvc	r2, [r1], -pc	; <UNPREDICTABLE>
    4ac8:	240f490e 	strcs	r4, [pc], #-2318	; 4ad0 <patchImageGenfsk+0x4c>
    4acc:	43200224 			; <UNDEFINED> instruction: 0x43200224
    4ad0:	82c83160 	sbchi	r3, r8, #96, 2
    4ad4:	b5f8bdf8 	ldrblt	fp, [r8, #3576]!	; 0xdf8
    4ad8:	47004801 	strmi	r4, [r0, -r1, lsl #16]
    4adc:	2100026b 	tstcs	r0, fp, ror #4
    4ae0:	00004ce5 	andeq	r4, r0, r5, ror #25
    4ae4:	e0014809 	and	r4, r1, r9, lsl #16
    4ae8:	0c004808 	stceq	8, cr4, [r0], {8}
    4aec:	49054c06 	stmdbmi	r5, {r1, r2, sl, fp, lr}
    4af0:	2aff7822 	bcs	fffe2b80 <_estack+0xdffddb80>
    4af4:	7acad101 	bvc	ff2b8f00 <_estack+0xdf2b3f00>
    4af8:	31607022 	cmncc	r0, r2, lsr #32
    4afc:	467082c8 	ldrbtmi	r8, [r0], -r8, asr #5
    4b00:	47001c80 	strmi	r1, [r0, -r0, lsl #25]
    4b04:	40086200 	andmi	r6, r8, r0, lsl #4
    4b08:	210006a4 	smlatbcs	r0, r4, r6, r0
    4b0c:	08080f07 	stmdaeq	r8, {r0, r1, r2, r8, r9, sl, fp}
    4b10:	4708b4f0 			; <UNDEFINED> instruction: 0x4708b4f0
    4b14:	4603b570 			; <UNDEFINED> instruction: 0x4603b570
    4b18:	29014615 	stmdbcs	r1, {r0, r2, r4, r9, sl, lr}
    4b1c:	2900d006 	stmdbcs	r0, {r1, r2, ip, lr, pc}
    4b20:	4a11d006 	bmi	478b40 <__ccfg+0x458b98>
    4b24:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    4b28:	bd70ffbb 	ldcllt	15, cr15, [r0, #-748]!	; 0xfffffd14
    4b2c:	e000480f 	and	r4, r0, pc, lsl #16
    4b30:	2405480f 	strcs	r4, [r5], #-2063	; 0xfffff7f1
    4b34:	d8034283 	stmdale	r3, {r0, r1, r7, r9, lr}
    4b38:	1e640840 	cdpne	8, 6, cr0, cr4, cr0, {2}
    4b3c:	dcf92c00 	ldclle	12, cr2, [r9]
    4b40:	200140e3 	andcs	r4, r1, r3, ror #1
    4b44:	18180340 	ldmdane	r8, {r6, r8, r9}
    4b48:	29010b82 	stmdbcs	r1, {r1, r7, r8, r9, fp}
    4b4c:	4906d007 	stmdbmi	r6, {r0, r1, r2, ip, lr, pc}
    4b50:	31802300 	orrcc	r2, r0, r0, lsl #6
    4b54:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    4b58:	b2e0ffa5 	rsclt	pc, r0, #660	; 0x294
    4b5c:	4902bd70 	stmdbmi	r2, {r4, r5, r6, r8, sl, fp, ip, sp, pc}
    4b60:	316c4b04 	cmncc	ip, r4, lsl #22
    4b64:	0000e7f6 	strdeq	lr, [r0], -r6
    4b68:	00005c83 	andeq	r5, r0, r3, lsl #25
    4b6c:	2386bca0 	orrcs	fp, r6, #160, 24	; 0xa000
    4b70:	230d8300 	movwcs	r8, #54016	; 0xd300
    4b74:	21000674 	tstcs	r0, r4, ror r6
    4b78:	4e1ab5f8 	mrcmi	5, 0, fp, cr10, cr8, {7}
    4b7c:	6b714605 	blvs	1c56398 <__ccfg+0x1c363f0>
    4b80:	09cc4819 	stmibeq	ip, {r0, r3, r4, fp, lr}^
    4b84:	2d0001e4 	stfcss	f0, [r0, #-912]	; 0xfffffc70
    4b88:	4918d011 	ldmdbmi	r8, {r0, r4, ip, lr, pc}
    4b8c:	29027809 	stmdbcs	r2, {r0, r3, fp, ip, sp, lr}
    4b90:	7b00d00f 	blvc	38bd4 <__ccfg+0x18c2c>
    4b94:	b6724304 	ldrbtlt	r4, [r2], -r4, lsl #6
    4b98:	4f152001 	svcmi	0x00152001
    4b9c:	47b80240 	ldrmi	r0, [r8, r0, asr #4]!
    4ba0:	38204811 	stmdacc	r0!, {r0, r4, fp, lr}
    4ba4:	09c18800 	stmibeq	r1, {fp, pc}^
    4ba8:	d00407c9 	andle	r0, r4, r9, asr #15
    4bac:	7ac0e016 	bvc	ff03cc0c <_estack+0xdf037c0c>
    4bb0:	7b40e7f0 	blvc	103eb78 <__ccfg+0x101ebd0>
    4bb4:	490fe7ee 	stmdbmi	pc, {r1, r2, r3, r5, r6, r7, r8, r9, sl, sp, lr, pc}	; <UNPREDICTABLE>
    4bb8:	61cc6374 	bicvs	r6, ip, r4, ror r3
    4bbc:	07c00a40 	strbeq	r0, [r0, r0, asr #20]
    4bc0:	2001d00c 	andcs	sp, r1, ip
    4bc4:	6b310380 	blvs	c459cc <__ccfg+0xc25a24>
    4bc8:	d0012d00 	andle	r2, r1, r0, lsl #26
    4bcc:	e0004301 	and	r4, r0, r1, lsl #6
    4bd0:	46084381 	strmi	r4, [r8], -r1, lsl #7
    4bd4:	49076331 	stmdbmi	r7, {r0, r4, r5, r8, r9, sp, lr}
    4bd8:	63483940 	movtvs	r3, #35136	; 0x8940
    4bdc:	47b82000 	ldrmi	r2, [r8, r0]!
    4be0:	bdf8b662 	ldcllt	6, cr11, [r8, #392]!	; 0x188
    4be4:	21000280 	smlabbcs	r0, r0, r2, r0
    4be8:	21000088 	smlabbcs	r0, r8, r0, r0
    4bec:	2100029b 			; <UNDEFINED> instruction: 0x2100029b
    4bf0:	00003f7b 	andeq	r3, r0, fp, ror pc
    4bf4:	40044040 	andmi	r4, r4, r0, asr #32
    4bf8:	4a22b510 	bmi	8b2040 <__ccfg+0x892098>
    4bfc:	61512100 	cmpvs	r1, r0, lsl #2
    4c00:	68894921 	stmvs	r9, {r0, r5, r8, fp, lr}
    4c04:	d40900c9 	strle	r0, [r9], #-201	; 0xffffff37
    4c08:	4b204921 	blmi	817094 <__ccfg+0x7f70ec>
    4c0c:	429805ca 	addsmi	r0, r8, #847249408	; 0x32800000
    4c10:	d8016b4b 	stmdale	r1, {r0, r1, r3, r6, r8, r9, fp, sp, lr}
    4c14:	e0004313 	and	r4, r0, r3, lsl r3
    4c18:	634b4393 	movtvs	r4, #45971	; 0xb393
    4c1c:	f7ff491d 			; <UNDEFINED> instruction: 0xf7ff491d
    4c20:	bd10ff77 	ldclt	15, cr15, [r0, #-476]	; 0xfffffe24
    4c24:	4d1ab538 	cfldr32mi	mvfx11, [sl, #-224]	; 0xffffff20
    4c28:	28007f28 	stmdacs	r0, {r3, r5, r8, r9, sl, fp, ip, sp, lr}
    4c2c:	481ad127 	ldmdami	sl, {r0, r1, r2, r5, r8, ip, lr, pc}
    4c30:	09c08800 	stmibeq	r0, {fp, pc}^
    4c34:	d12207c0 	smlawtle	r2, r0, r7, r0
    4c38:	69604c12 	stmdbvs	r0!, {r1, r4, sl, fp, lr}^
    4c3c:	d11e2800 	tstle	lr, r0, lsl #16
    4c40:	f0004668 			; <UNDEFINED> instruction: 0xf0004668
    4c44:	4668f845 	strbtmi	pc, [r8], -r5, asr #16	; <UNPREDICTABLE>
    4c48:	28017800 	stmdacs	r1, {fp, ip, sp, lr}
    4c4c:	4668d117 			; <UNDEFINED> instruction: 0x4668d117
    4c50:	28107840 	ldmdacs	r0, {r6, fp, ip, sp, lr}
    4c54:	2008d213 	andcs	sp, r8, r3, lsl r2
    4c58:	6a686160 	bvs	1a1d1e0 <__ccfg+0x19fd238>
    4c5c:	01400940 	cmpeq	r0, r0, asr #18
    4c60:	4a0e6020 	bmi	39cce8 <__ccfg+0x37cd40>
    4c64:	62d12100 	sbcsvs	r2, r1, #0, 2
    4c68:	21024a0d 	tstcs	r2, sp, lsl #20
    4c6c:	21016011 	tstcs	r1, r1, lsl r0
    4c70:	60204308 	eorvs	r4, r0, r8, lsl #6
    4c74:	43082103 	movwmi	r2, #33027	; 0x8103
    4c78:	60206268 	eorvs	r6, r0, r8, ror #4
    4c7c:	4809bd38 	stmdami	r9, {r3, r4, r5, r8, sl, fp, ip, sp, pc}
    4c80:	bd384780 	ldclt	7, cr4, [r8, #-512]!	; 0xfffffe00
    4c84:	40044000 	andmi	r4, r4, r0
    4c88:	21000018 	tstcs	r0, r8, lsl r0
    4c8c:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    4c90:	21000280 	smlabbcs	r0, r0, r2, r0
    4c94:	000068cf 	andeq	r6, r0, pc, asr #17
    4c98:	21000068 	tstcs	r0, r8, rrx
    4c9c:	40041100 	andmi	r1, r4, r0, lsl #2
    4ca0:	e000e280 	and	lr, r0, r0, lsl #5
    4ca4:	00003bc3 	andeq	r3, r0, r3, asr #23
    4ca8:	28004907 	stmdacs	r0, {r0, r1, r2, r8, fp, lr}
    4cac:	2004d000 	andcs	sp, r4, r0
    4cb0:	b6724a06 	ldrbtlt	r4, [r2], -r6, lsl #20
    4cb4:	07c97809 	strbeq	r7, [r9, r9, lsl #16]
    4cb8:	5810d001 	ldmdapl	r0, {r0, ip, lr, pc}
    4cbc:	2080e000 	addcs	lr, r0, r0
    4cc0:	b240b662 	sublt	fp, r0, #102760448	; 0x6200000
    4cc4:	00004770 	andeq	r4, r0, r0, ror r7
    4cc8:	2100026b 	tstcs	r0, fp, ror #4
    4ccc:	40046058 	andmi	r6, r4, r8, asr r0
    4cd0:	4801b403 	stmdami	r1, {r0, r1, sl, ip, sp, pc}
    4cd4:	bd019001 	stclt	0, cr9, [r1, #-4]
    4cd8:	00006fa5 	andeq	r6, r0, r5, lsr #31
    4cdc:	00000000 	andeq	r0, r0, r0
    4ce0:	00030001 	andeq	r0, r3, r1
    4ce4:	001f000a 	andseq	r0, pc, sl
    4ce8:	00eb0059 	rsceq	r0, fp, r9, asr r0
    4cec:	04ea0239 	strbteq	r0, [sl], #569	; 0x239
    4cf0:	129709f9 	addsne	r0, r7, #4079616	; 0x3e4000
    4cf4:	32a11feb 	adccc	r1, r1, #940	; 0x3ac
    4cf8:	660a4a78 			; <UNDEFINED> instruction: 0x660a4a78
    4cfc:	9e8c82fa 	mcrls	2, 4, r8, cr12, cr10, {7}
    4d00:	c917b663 	ldmdbgt	r7, {r0, r1, r5, r6, r9, sl, ip, sp, pc}
    4d04:	deedd664 	cdple	6, 14, cr13, cr13, cr4, {3}
    4d08:	e5e0e3c1 	strb	lr, [r0, #961]!	; 0x3c1
    4d0c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

00004d10 <ratable>:
    4d10:	12c5000b 	sbcne	r0, r5, #11
    4d14:	2de00007 	stclcs	0, cr0, [r0, #28]!
    4d18:	8000000f 	andhi	r0, r0, pc
    4d1c:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    4d20:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    4d24:	6374206c 	cmnvs	r4, #108	; 0x6c
    4d28:	706f5f76 	rsbvc	r5, pc, r6, ror pc	; <UNPREDICTABLE>
    4d2c:	756e5f65 	strbvc	r5, [lr, #-3941]!	; 0xfffff09b
    4d30:	00006c6c 	andeq	r6, r0, ip, ror #24

00004d34 <plug_null>:
    4d34:	00002831 	andeq	r2, r0, r1, lsr r8
    4d38:	000027d9 	ldrdeq	r2, [r0], -r9
    4d3c:	000027fd 	strdeq	r2, [r0], -sp
    4d40:	00002821 	andeq	r2, r0, r1, lsr #16
    4d44:	00002829 	andeq	r2, r0, r9, lsr #16
    4d48:	0000282d 	andeq	r2, r0, sp, lsr #16
    4d4c:	00000000 	andeq	r0, r0, r0
    4d50:	00000001 	andeq	r0, r0, r1

Disassembly of section .data:

20000000 <sfd>:
int sfd = -1;
20000000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000004 <__pi_seed>:
lword	__pi_seed = 327672838L;
20000004:	1387e406 	orrne	lr, r7, #100663296	; 0x6000000

20000008 <cmd_cs>:
static rfc_CMD_PROP_CS_t cmd_cs = {
20000008:	00003805 	andeq	r3, r0, r5, lsl #16
2000000c:	200000a0 	andcs	r0, r0, r0, lsr #1
20000010:	00000000 	andeq	r0, r0, r0
20000014:	00000300 	andeq	r0, r0, r0, lsl #6
20000018:	0404c60b 	streq	ip, [r4], #-1547	; 0xfffff9f5
2000001c:	04330080 	ldrteq	r0, [r3], #-128	; 0xffffff80
20000020:	00002000 	andeq	r2, r0, r0

20000024 <cmd_srt>:
static rfc_CMD_SYNC_START_RAT_t	cmd_srt = { .commandNo = CMD_SYNC_START_RAT };
20000024:	0000080a 	andeq	r0, r0, sl, lsl #16
	...

20000038 <offdelay>:
		offdelay = RADIO_DEFAULT_OFFDELAY;
20000038:	 	andeq	r0, r2, r0, lsl #2

2000003a <vrate>:
2000003a:	 	stmdaeq	r3, {r1}

2000003c <RF_cmdFs>:
2000003c:	00000803 	andeq	r0, r0, r3, lsl #16
	...
20000048:	03640100 	cmneq	r4, #0, 2
	...

20000054 <RF_cmdPropRadioDivSetup>:
20000054:	00003807 	andeq	r3, r0, r7, lsl #16
	...
20000060:	03210100 			; <UNDEFINED> instruction: 0x03210100
20000064:	0080000f 	addeq	r0, r0, pc
20000068:	00a00424 	adceq	r0, r0, r4, lsr #8
2000006c:	bc2b0008 	stclt	0, cr0, [fp], #-32	; 0xffffffe0
20000070:	200000b8 	strhcs	r0, [r0], -r8
20000074:	80000364 	andhi	r0, r0, r4, ror #6
20000078:	00000005 	andeq	r0, r0, r5

2000007c <RF_cmdPropRx>:
2000007c:	00003802 	andeq	r3, r0, r2, lsl #16
	...
20000088:	88180100 	ldmdahi	r8, {r8}
2000008c:	930b51de 	movwls	r5, #45534	; 0xb1de
20000090:	01bbaa7d 			; <UNDEFINED> instruction: 0x01bbaa7d
	...

200000a0 <RF_cmdPropTx>:
200000a0:	00003801 	andeq	r3, r0, r1, lsl #16
	...
200000ac:	1e180100 	mufnee	f0, f0, f0
200000b0:	930b51de 	movwls	r5, #45534	; 0xb1de
200000b4:	00000000 	andeq	r0, r0, r0

200000b8 <pOverrides>:
200000b8:	00001807 	andeq	r1, r0, r7, lsl #16
200000bc:	00374038 	eorseq	r4, r7, r8, lsr r0
200000c0:	000684a3 	andeq	r8, r6, r3, lsr #9
200000c4:	7f004020 	svcvc	0x00004020
200000c8:	00404064 	subeq	r4, r0, r4, rrx
200000cc:	b1070503 	tstlt	r7, r3, lsl #10
200000d0:	05330523 	ldreq	r0, [r3, #-1315]!	; 0xfffffadd
200000d4:	0a480583 	beq	212016e8 <_estack+0x11fc6e8>
200000d8:	7ab80603 	bvc	1ee018ec <__ccfg+0x1ede1944>
200000dc:	849f0002 	ldrhi	r0, [pc], #2	; 200000e4 <pOverrides+0x2c>
200000e0:	c7440002 	strbgt	r0, [r4, -r2]
200000e4:	02010403 	andeq	r0, r1, #50331648	; 0x3000000
200000e8:	00108463 	andseq	r8, r0, r3, ror #8
200000ec:	04b00243 	ldrteq	r0, [r0], #579	; 0x243
200000f0:	7ddf0002 	ldclvc	0, cr0, [pc, #8]	; 20000100 <pOverrides+0x48>
200000f4:	00038883 	andeq	r8, r3, r3, lsl #17
200000f8:	35f16084 	ldrbcc	r6, [r1, #132]!	; 0x84
200000fc:	411a6088 	tstmi	sl, r8, lsl #1
20000100:	8213608c 	andshi	r6, r3, #140	; 0x8c
20000104:	00fb88a3 	rscseq	r8, fp, r3, lsr #17
20000108:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

Disassembly of section .bss:

2000010c <messagePtr.5806>:
2000010c:	00000000 	andeq	r0, r0, r0

20000110 <packet.5773>:
20000110:	00000000 	andeq	r0, r0, r0

20000114 <receivedMessage.5774>:
20000114:	00000000 	andeq	r0, r0, r0

20000118 <receiverId.5805>:
	...

2000011a <setdel>:
	...

2000011c <urates>:
static word urates [N_UARTS];
2000011c:	00000000 	andeq	r0, r0, r0

20000120 <__PCB>:
20000120:	00000000 	andeq	r0, r0, r0

20000124 <ioreq>:
static devreqfun_t ioreq [MAX_DEVICES];
20000124:	00000000 	andeq	r0, r0, r0

20000128 <mcfree>:
static	aword	mnfree [MALLOC_NPOOLS], mcfree [MALLOC_NPOOLS];
20000128:	00000000 	andeq	r0, r0, r0

2000012c <mevent>:
2000012c:	00000000 	andeq	r0, r0, r0

20000130 <mnfree>:
20000130:	00000000 	andeq	r0, r0, r0

20000134 <mpools>:
static	aword	*mpools [MALLOC_NPOOLS];
20000134:	00000000 	andeq	r0, r0, r0

20000138 <descriptors>:
	...

20000158 <oqueues>:
	...

20000164 <physical>:
	...

20000170 <physinfo>:
	...

2000017c <plugins>:
	...

20000188 <dopen>:
	...

20000189 <dstat>:
	...

2000018a <bckf_timer>:
	...

2000018c <channel>:
2000018c:	00000000 	andeq	r0, r0, r0

20000190 <drvprcs>:
static aword drvprcs, qevent;
20000190:	00000000 	andeq	r0, r0, r0

20000194 <dstate>:
20000194:	00000000 	andeq	r0, r0, r0

20000198 <paylen>:
static	int paylen = 0;			// Current TX payload length
20000198:	00000000 	andeq	r0, r0, r0

2000019c <physid>:
static word	physid,
2000019c:	00000000 	andeq	r0, r0, r0

200001a0 <qevent>:
static aword drvprcs, qevent;
200001a0:	00000000 	andeq	r0, r0, r0

200001a4 <rbuffl>:
200001a4:	00000000 	andeq	r0, r0, r0

200001a8 <rfTrim>:
	...

200001b8 <rxstat>:
	...

200001c4 <statid>:
	...

200001c6 <txtries>:
	...

200001c8 <ndsc_null>:
200001c8:	00000000 	andeq	r0, r0, r0

200001cc <len.5699>:
200001cc:	00000000 	andeq	r0, r0, r0

200001d0 <ptr.5698>:
200001d0:	00000000 	andeq	r0, r0, r0

200001d4 <__inpline>:
char *__inpline = NULL;
200001d4:	00000000 	andeq	r0, r0, r0

200001d8 <len.5700>:
200001d8:	00000000 	andeq	r0, r0, r0

200001dc <ptr.5699>:
200001dc:	00000000 	andeq	r0, r0, r0

200001e0 <oscHfGlobals>:
	...

200001f4 <powerQualGlobals>:
	...

200001fc <nodeId>:
	...

200001fd <sequence>:
byte sequence;
200001fd:	 	andeq	r0, r0, r0

20000200 <__pi_uart>:
	...

20000208 <system_event_count>:
20000208:	00000000 	andeq	r0, r0, r0

2000020c <entropy>:
2000020c:	00000000 	andeq	r0, r0, r0

20000210 <__pi_mintk>:
	...

20000212 <__pi_old>:
	...

20000214 <__pi_systat>:
	...

2000021c <__pi_new>:
2000021c:	00000000 	andeq	r0, r0, r0

20000220 <__pi_utims>:
	...

20000230 <__pi_curr>:
20000230:	00000000 	andeq	r0, r0, r0

Disassembly of section .ccfg:

0001ffa8 <__ccfg>:
   1ffa8:	01800000 	orreq	r0, r0, r0
   1ffac:	ff880010 			; <UNDEFINED> instruction: 0xff880010
   1ffb0:	0058fffd 	ldrsheq	pc, [r8], #-253	; 0xffffff03	; <UNPREDICTABLE>
   1ffb4:	f3bfff3a 	vcvt.u32.f32	d15, d26, #1
   1ffb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
   1ffdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffe0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
   1ffe4:	ffc500c5 			; <UNDEFINED> instruction: 0xffc500c5
   1ffe8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   1ffec:	00000000 	andeq	r0, r0, r0
   1fff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fffc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

Disassembly of section ._user_heap_stack:

20000234 <._user_heap_stack>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000908 	andeq	r0, r0, r8, lsl #18
       4:	00000003 	andeq	r0, r0, r3
}
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000181 	andeq	r0, r0, r1, lsl #3
      10:	00034c0c 	andeq	r4, r3, ip, lsl #24
      14:	00040600 	andeq	r0, r4, r0, lsl #12
      18:	00007000 	andeq	r7, r0, r0
	...
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	000003e5 	andeq	r0, r0, r5, ror #7
      2c:	46050202 	strmi	r0, [r5], -r2, lsl #4
      30:	02000004 	andeq	r0, r0, #4
      34:	00b40504 	adcseq	r0, r4, r4, lsl #10
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	0000af05 	andeq	sl, r0, r5, lsl #30
			i = k;
      40:	239b0300 	orrscs	r0, fp, #0, 6
				j->Next = k;
      44:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
      48:	00004d17 	andeq	r4, r0, r7, lsl sp
}
      4c:	08010200 	stmdaeq	r1, {r9}
      50:	000003e3 	andeq	r0, r0, r3, ror #7
      54:	00279103 	eoreq	r9, r7, r3, lsl #2
		release;
      58:	1c310200 	lfmne	f0, 4, [r1], #-0
      5c:	00000060 	andeq	r0, r0, r0, rrx
			nq++;
      60:	8a070202 	bhi	1c0870 <__ccfg+0x1a08c8>
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	03000002 	movweq	r0, #2
      68:	00002333 	andeq	r2, r0, r3, lsr r3
      6c:	731b3402 	tstvc	fp, #33554432	; 0x2000000
      70:	02000000 	andeq	r0, r0, #0
      74:	007e0704 	rsbseq	r0, lr, r4, lsl #14
      78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      7c:	00007907 	andeq	r7, r0, r7, lsl #18
      80:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      84:	00746e69 	rsbseq	r6, r4, r9, ror #28
      88:	83070402 	movwhi	r0, #29698	; 0x7402
      8c:	03000000 	movweq	r0, #0
	if (!button_still_pressed (__button_list [pbutton]))
      90:	0000036c 	andeq	r0, r0, ip, ror #6
      94:	9b1b2803 	blls	6ca0a8 <__ccfg+0x6aa100>
      98:	05000000 	streq	r0, [r0, #-0]
	if (baction == NULL)
      9c:	000000e2 	andeq	r0, r0, r2, ror #1
      a0:	b3000c04 	movwlt	r0, #3076	; 0xc04
	(*baction) (pbutton);
      a4:	06000000 	streq	r0, [r0], -r0
endthread
      a8:	000004f7 	strdeq	r0, [r0], -r7
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	000000b3 	strheq	r0, [r0], -r3
      b0:	07000100 	streq	r0, [r0, -r0, lsl #2]
endthread
      b4:	00e40304 	rsceq	r0, r4, r4, lsl #6
      b8:	63030000 	movwvs	r0, #12288	; 0x3000
      bc:	00008f18 	andeq	r8, r0, r8, lsl pc
      c0:	047d0300 	ldrbteq	r0, [sp], #-768	; 0xfffffd00
      c4:	26040000 	strcs	r0, [r4], -r0
fsm receiver {
      c8:	00004111 	andeq	r4, r0, r1, lsl r1
      cc:	227c0300 	rsbscs	r0, ip, #0, 6
      d0:	27040000 	strcs	r0, [r4, -r0]
      d4:	00005412 	andeq	r5, r0, r2, lsl r4
        packet = tcv_rnp(Receiving, sfd);
      d8:	00cd0800 	sbceq	r0, sp, r0, lsl #16
      dc:	cd090000 	stcgt	0, cr0, [r9, #-0]
      e0:	03000000 	movweq	r0, #0
      e4:	000013fc 	strdeq	r1, [r0], -ip
        receivedMessage = (message *)(packet + 1);
      e8:	41112b04 	tstmi	r1, r4, lsl #22
      ec:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
        if(receivedMessage->receiverId == nodeId) {
      f0:	000000e3 	andeq	r0, r0, r3, ror #1
      f4:	0022cd03 	eoreq	ip, r2, r3, lsl #26
      f8:	122c0400 	eorne	r0, ip, #0, 8
            proceed From_Broadcast;
      fc:	00000067 	andeq	r0, r0, r7, rrx
        proceed Receiving;
     100:	0000f408 	andeq	pc, r0, r8, lsl #8
     104:	02ef0300 	rsceq	r0, pc, #0, 6
        ser_outf(Get_Message, "Message ");
     108:	2d040000 	stccs	0, cr0, [r4, #-0]
     10c:	00006712 	andeq	r6, r0, r2, lsl r7
        proceed Show_Message;
     110:	03640300 	cmneq	r4, #0, 6
        ser_outf(From_Broadcast, "Broadcast ");
     114:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
     118:	00011d0f 	andeq	r1, r1, pc, lsl #26
        ser_outf(Show_Message, "from node %d (Seq %d): %s\n\r", receivedMessage->senderId, receivedMessage->sequenceNumber, receivedMessage->payload);
     11c:	cd040a00 	vstrgt	s0, [r4, #-0]
     120:	0b000000 	bleq	128 <_Min_Stack_Size+0x28>
     124:	09320408 	ldmdbeq	r2!, {r3, sl}
     128:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
     12c:	0003180c 	andeq	r1, r3, ip, lsl #16
        tcv_endp(packet);
     130:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
     134:	000000e3 	andeq	r0, r0, r3, ror #1
        proceed Receiving;
     138:	00070101 	andeq	r0, r7, r1, lsl #2
}
     13c:	00009e0c 	andeq	r9, r0, ip, lsl #28
        proceed Receiving;
     140:	03350400 	teqeq	r5, #0, 8
        } else if (receivedMessage->receiverId == '0' || receivedMessage->receiverId == 0) {
     144:	000000e3 	andeq	r0, r0, r3, ror #1
     148:	00060101 	andeq	r0, r6, r1, lsl #2
            proceed From_Broadcast;
     14c:	0002bf0c 	andeq	fp, r2, ip, lsl #30
}
     150:	03360400 	teqeq	r6, #0, 8
     154:	000000e3 	andeq	r0, r0, r3, ror #1
     158:	00050101 	andeq	r0, r5, r1, lsl #2
     15c:	00048c0c 	andeq	r8, r4, ip, lsl #24
     160:	03370400 	teqeq	r7, #0, 8
     164:	000000e3 	andeq	r0, r0, r3, ror #1
     168:	00040101 	andeq	r0, r4, r1, lsl #2
     16c:	0004850c 	andeq	r8, r4, ip, lsl #10
     170:	03380400 	teqeq	r8, #0, 8
     174:	000000e3 	andeq	r0, r0, r3, ror #1
fsm transmitter (message * messagePtr) {
     178:	00000401 	andeq	r0, r0, r1, lsl #8
     17c:	0004760d 	andeq	r7, r4, sp, lsl #12
     180:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
}
     184:	000000e3 	andeq	r0, r0, r3, ror #1
     188:	002b0d01 	eoreq	r0, fp, r1, lsl #26
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
     18c:	3c040000 	stccc	0, cr0, [r4], {-0}
     190:	0000e303 	andeq	lr, r0, r3, lsl #6
     194:	720d0200 	andvc	r0, sp, #0, 4
     198:	04000000 	streq	r0, [r0], #-0
     19c:	00e3033d 	rsceq	r0, r3, sp, lsr r3
        *p = messagePtr->senderId; p++;
     1a0:	0d030000 	stceq	0, cr0, [r3, #-0]
     1a4:	0000014f 	andeq	r0, r0, pc, asr #2
        strcpy(p, messagePtr->payload);
     1a8:	f4083f04 			; <UNDEFINED> instruction: 0xf4083f04
        *p = messagePtr->receiverId; p++;
     1ac:	04000000 	streq	r0, [r0], #-0
        *p = messagePtr->sequenceNumber; p++;
     1b0:	04d40300 	ldrbeq	r0, [r4], #768	; 0x300
        strcpy(p, messagePtr->payload);
     1b4:	41040000 	mrsmi	r0, (UNDEF: 4)
        tcv_endp (spkt);
     1b8:	00012303 	andeq	r2, r1, r3, lsl #6
     1bc:	01b10900 			; <UNDEFINED> instruction: 0x01b10900
        sequence++;
     1c0:	0c0e0000 	stceq	0, cr0, [lr], {-0}
     1c4:	04000003 	streq	r0, [r0], #-3
        ser_outf(Transmit_Message, "Message Sent\n\r");
     1c8:	01bd1a43 			; <UNDEFINED> instruction: 0x01bd1a43
     1cc:	01010000 	mrseq	r0, (UNDEF: 1)
}
     1d0:	00038e0e 	andeq	r8, r3, lr, lsl #28
        finish;
     1d4:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
     1d8:	000001de 	ldrdeq	r0, [r0], -lr
     1dc:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
     1e0:	000001e4 	andeq	r0, r0, r4, ror #3
     1e4:	ec080102 	stfs	f0, [r8], {2}
fsm root {
     1e8:	08000003 	stmdaeq	r0, {r0, r1}
     1ec:	000001e4 	andeq	r0, r0, r4, ror #3
     1f0:	0003a40e 	andeq	sl, r3, lr, lsl #8
     1f4:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
     1f8:	000001de 	ldrdeq	r0, [r0], -lr
     1fc:	080b0101 	stmdaeq	fp, {r0, r8}
        nodeId = 1;
     200:	2f098f05 	svccs	0x00098f05
     204:	0d000002 	stceq	0, cr0, [r0, #-8]
     208:	000019fd 	strdeq	r1, [r0], -sp
        sfd = tcv_open(WNONE, 0, 0);
     20c:	670b9005 	strvs	r9, [fp, -r5]
        messagePtr = (message *) umalloc(sizeof(message));
     210:	00000000 	andeq	r0, r0, r0
     214:	0006b30d 	andeq	fp, r6, sp, lsl #6
     218:	07910500 	ldreq	r0, [r1, r0, lsl #10]
        phys_cc1350(0, MAX_PACKET_LENGTH);
     21c:	000000cd 	andeq	r0, r0, sp, asr #1
        tcv_plug(0, &plug_null);
     220:	15be0d04 	ldrne	r0, [lr, #3332]!	; 0xd04
     224:	92050000 	andls	r0, r5, #0
        sfd = tcv_open(WNONE, 0, 0);
     228:	0000ef10 	andeq	lr, r0, r0, lsl pc
     22c:	03000600 	movweq	r0, #1536	; 0x600
     230:	00000493 	muleq	r0, r3, r4
		tcv_control(sfd, PHYSOPT_ON, NULL);
     234:	fe039305 	cdp2	3, 0, cr9, cr3, cr5, {0}
        sfd = tcv_open(WNONE, 0, 0);
     238:	0f000001 	svceq	0x00000001
		tcv_control(sfd, PHYSOPT_ON, NULL);
     23c:	0000022f 	andeq	r0, r0, pc, lsr #4
		if (sfd < 0) {
     240:	00000246 	andeq	r0, r0, r6, asr #4
			diag("Cannot open tcv interface");
     244:	210e0010 	tstcs	lr, r0, lsl r0
     248:	05000000 	streq	r0, [r0, #-0]
			halt();
     24c:	023b0f99 	eorseq	r0, fp, #612	; 0x264
        runfsm receiver;
     250:	01010000 	mrseq	r0, (UNDEF: 1)
     254:	9106010b 	tstls	r6, fp, lsl #2
        receiverId = 0;
     258:	00027e09 	andeq	r7, r2, r9, lsl #28
     25c:	050c0c00 	streq	r0, [ip, #-3072]	; 0xfffff400
        ser_outf(Menu_Start, "P2P Chat (Node #%d)\n\r", nodeId);
     260:	93060000 	movwls	r0, #24576	; 0x6000
     264:	0000e307 	andeq	lr, r0, r7, lsl #6
        ser_outf(Menu_Choices, menuText);
     268:	01070100 	mrseq	r0, (UNDEF: 23)
     26c:	001c0c00 	andseq	r0, ip, r0, lsl #24
        ser_inf(Choice, "%c", &choice);
     270:	94060000 	strls	r0, [r6], #-0
     274:	0000e303 	andeq	lr, r0, r3, lsl #6
     278:	00010100 	andeq	r0, r1, r0, lsl #2
        switch (choice)
     27c:	9d030000 	stcls	0, cr0, [r3, #-0]
     280:	06000002 	streq	r0, [r0], -r2
     284:	02540396 	subseq	r0, r4, #1476395010	; 0x58000002
     288:	7e080000 	cdpvc	0, 0, cr0, cr8, cr0, {0}
     28c:	0f000002 	svceq	0x00000002
     290:	0000028a 	andeq	r0, r0, sl, lsl #5
                proceed Menu_Start;
     294:	0000029a 	muleq	r0, sl, r2
     298:	8f080010 	svchi	0x00080010
     29c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
                proceed Direct_Transmission;
     2a0:	00000357 	andeq	r0, r0, r7, asr r3
                proceed Menu_Start;
     2a4:	9a179c06 	bls	5e72c4 <__ccfg+0x5c731c>
        ser_outf(Change_ID, "New node ID (1-25):");
     2a8:	01000002 	tsteq	r0, r2
     2ac:	00d90f01 	sbcseq	r0, r9, r1, lsl #30
        ser_inf(Get_New_ID, "%d", &nodeId);
     2b0:	02b80000 	adcseq	r0, r8, #0
     2b4:	00100000 	andseq	r0, r0, r0
     2b8:	0002ad08 	andeq	sl, r2, r8, lsl #26
    if (node < 1 || node > 25) {
     2bc:	03d50e00 	bicseq	r0, r5, #0, 28
     2c0:	06070000 	streq	r0, [r7], -r0
            proceed Change_ID;
     2c4:	0002b813 	andeq	fp, r2, r3, lsl r8
     2c8:	0e010100 	adfeqs	f0, f1, f0
        proceed Menu_Start;
     2cc:	00000134 	andeq	r0, r0, r4, lsr r1
        ser_outf(Direct_Transmission, "Receiver node ID (1-25):");
     2d0:	f40ec305 	vst2.8	{d12-d15}, [lr], r5
     2d4:	01000000 	mrseq	r0, (UNDEF: 0)
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     2d8:	05481101 	strbeq	r1, [r8, #-257]	; 0xfffffeff
     2dc:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
     2e0:	02e61001 	rsceq	r1, r6, #1
    if (node < 1 || node > 25) {
     2e4:	040a0000 	streq	r0, [sl], #-0
     2e8:	000002ec 	andeq	r0, r0, ip, ror #5
            proceed Direct_Transmission;
     2ec:	02f80112 	rscseq	r0, r8, #-2147483644	; 0x80000004
     2f0:	cd130000 	ldcgt	0, cr0, [r3, #-0]
        ser_outf(Broadcast_Transmission, "Message: ");
     2f4:	00000000 	andeq	r0, r0, r0
     2f8:	0001eb0f 	andeq	lr, r1, pc, lsl #22
        ser_in(Get_Message, messagePtr->payload, PAYLOAD_LENGTH);
     2fc:	00030300 	andeq	r0, r3, r0, lsl #6
     300:	08001000 	stmdaeq	r0, {ip}
     304:	000002f8 	strdeq	r0, [r0], -r8
        if(strlen(messagePtr->payload) > PAYLOAD_LENGTH) {
     308:	0004e414 	andeq	lr, r4, r4, lsl r4
     30c:	017f0800 	cmneq	pc, r0, lsl #16
     310:	00030313 	andeq	r0, r3, r3, lsl r3
            messagePtr->payload[PAYLOAD_LENGTH - 1] = '/0';
     314:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
     318:	000003c1 	andeq	r0, r0, r1, asr #7
        call transmitter(messagePtr, Menu_Start);
     31c:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
        messagePtr->senderId = nodeId;
     320:	00000100 	andeq	r0, r0, r0, lsl #2
     324:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
        messagePtr->receiverId = receiverId;
     328:	4a090809 	bmi	242354 <__ccfg+0x2223ac>
        messagePtr->sequenceNumber = sequence;
     32c:	0d000003 	stceq	0, cr0, [r0, #-12]
     330:	0000049a 	muleq	r0, sl, r4
        call transmitter(messagePtr, Menu_Start);
     334:	cd070f09 	stcgt	15, cr0, [r7, #-36]	; 0xffffffdc
     338:	00000000 	andeq	r0, r0, r0
     33c:	0003470d 	andeq	r4, r3, sp, lsl #14
     340:	03100900 	tsteq	r0, #0, 18
                proceed Broadcast_Transmission;
     344:	000000cd 	andeq	r0, r0, sp, asr #1
     348:	50030002 	andpl	r0, r3, r2
     34c:	09000004 	stmdbeq	r0, {r2}
     350:	03260311 			; <UNDEFINED> instruction: 0x03260311
     354:	200b0000 	andcs	r0, fp, r0
     358:	c8091609 	stmdagt	r9, {r0, r3, r9, sl, ip}
     35c:	0d000003 	stceq	0, cr0, [r0, #-12]
     360:	00000436 	andeq	r0, r0, r6, lsr r4
     364:	e2081709 	and	r1, r8, #2359296	; 0x240000
     368:	00000003 	andeq	r0, r0, r3
     36c:	0001470d 	andeq	r4, r1, sp, lsl #14
     370:	08180900 	ldmdaeq	r8, {r8, fp}
     374:	000003fd 	strdeq	r0, [r0], -sp
     378:	02e70d04 	rsceq	r0, r7, #4, 26	; 0x100
     37c:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
     380:	00043308 	andeq	r3, r4, r8, lsl #6
     384:	9c0d0800 	stcls	8, cr0, [sp], {-0}
     388:	09000003 	stmdbeq	r0, {r0, r1}
     38c:	044e081a 	strbeq	r0, [lr], #-2074	; 0xfffff7e6
static void devinit_uart (int devnum) {
     390:	0d0c0000 	stceq	0, cr0, [ip, #-0]
	adddevfunc (ioreq_uart_a, devnum);
     394:	00000179 	andeq	r0, r0, r9, ror r1
     398:	64081b09 	strvs	r1, [r8], #-2825	; 0xfffff4f7
void udelay (volatile word n) {
     39c:	10000004 	andne	r0, r0, r4
     3a0:	00043e0d 	andeq	r3, r4, sp, lsl #28
	while (n) {
     3a4:	081c0900 	ldmdaeq	ip, {r8, fp}
     3a8:	00000464 	andeq	r0, r0, r4, ror #8
}
     3ac:	02820d14 	addeq	r0, r2, #20, 26	; 0x500
	while (n--);
     3b0:	1d090000 	stcne	0, cr0, [r9, #-0]
     3b4:	00046408 	andeq	r6, r4, r8, lsl #8
     3b8:	bd0d1800 	stclt	8, cr1, [sp, #-0]
		n--;
     3bc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     3c0:	0081061e 	addeq	r0, r1, lr, lsl r6
     3c4:	001c0000 	andseq	r0, ip, r0
void mdelay (volatile word n) {
     3c8:	00810115 	addeq	r0, r1, r5, lsl r1
     3cc:	03e20000 	mvneq	r0, #0
	while (n) {
     3d0:	81130000 	tsthi	r3, r0
     3d4:	13000000 	movwne	r0, #0
}
     3d8:	00000081 	andeq	r0, r0, r1, lsl #1
		udelay (999);
     3dc:	0000b513 	andeq	fp, r0, r3, lsl r5
     3e0:	040a0000 	streq	r0, [sl], #-0
		n--;
     3e4:	000003c8 	andeq	r0, r0, r8, asr #7
     3e8:	00810115 	addeq	r0, r1, r5, lsl r1
     3ec:	03fd0000 	mvnseq	r0, #0
     3f0:	81130000 	tsthi	r3, r0
void __pi_ondomain (lword d) {
     3f4:	13000000 	movwne	r0, #0
     3f8:	00000081 	andeq	r0, r0, r1, lsl #1
		if (__pi_systat.effpdm > 1)
     3fc:	e8040a00 	stmda	r4, {r9, fp}
     400:	15000003 	strne	r0, [r0, #-3]
			__pi_systat.effpdm = 1;
     404:	00008101 	andeq	r8, r0, r1, lsl #2
	PRCMPowerDomainOn (d);
     408:	00042700 	andeq	r2, r4, r0, lsl #14
     40c:	00811300 	addeq	r1, r1, r0, lsl #6
     410:	11130000 	tstne	r3, r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     414:	13000001 	movwne	r0, #1
     418:	00000081 	andeq	r0, r0, r1, lsl #1
     41c:	00042713 	andeq	r2, r4, r3, lsl r7
	__pi_systat.ondmns |= d;
     420:	042d1300 	strteq	r1, [sp], #-768	; 0xfffffd00
     424:	0a000000 	beq	42c <__pi_ondomain+0x38>
}
     428:	00008104 	andeq	r8, r0, r4, lsl #2
     42c:	4a040a00 	bmi	102c34 <__ccfg+0xe2c8c>
void __pi_offdomain (lword d) {
     430:	0a000003 	beq	444 <__pi_offdomain+0x14>
     434:	00040304 	andeq	r0, r4, r4, lsl #6
	PRCMPowerDomainOff (d);
     438:	81011500 	tsthi	r1, r0, lsl #10
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     43c:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
     440:	13000004 	movwne	r0, #4
     444:	00000111 	andeq	r0, r0, r1, lsl r1
	if (d & PRCM_DOMAIN_RFCORE) {
     448:	00042d13 	andeq	r2, r4, r3, lsl sp
     44c:	040a0000 	streq	r0, [sl], #-0
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     450:	00000439 	andeq	r0, r0, r9, lsr r4
     454:	00810115 	addeq	r0, r1, r5, lsl r1
			__pi_systat.effpdm = __pi_systat.reqpdm;
     458:	04640000 	strbteq	r0, [r4], #-0
     45c:	11130000 	tstne	r3, r0
	__pi_systat.ondmns &= ~d;
     460:	00000001 	andeq	r0, r0, r1
     464:	0454040a 	ldrbeq	r0, [r4], #-1034	; 0xfffffbf6
}
     468:	a5030000 	strge	r0, [r3, #-0]
     46c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
void __pi_syserror (word ec, const char *m) {
     470:	0356031f 	cmpeq	r6, #2080374784	; 0x7c000000
	diag ("SYSERR: %x, %s", ec, m);
     474:	6a080000 	bvs	20047c <__ccfg+0x1e04d4>
     478:	14000004 	strne	r0, [r0], #-4
  __ASM volatile ("cpsid i" : : : "memory");
     47c:	00000511 	andeq	r0, r0, r1, lsl r5
     480:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
     484:	000000f4 	strdeq	r0, [r0], -r4
     488:	08160101 	ldmdaeq	r6, {r0, r8}
		all_leds_blink;
     48c:	09030308 	stmdbeq	r3, {r3, r8, r9}
     490:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
     494:	00361b17 	eorseq	r1, r6, r7, lsl fp
     498:	03070800 	movweq	r0, #30720	; 0x7800
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     49c:	0000cd07 	andeq	ip, r0, r7, lsl #26
     4a0:	0b170000 	bleq	5c04a8 <__ccfg+0x5a0500>
     4a4:	08000006 	stmdaeq	r0, {r1, r2}
     4a8:	05080308 	streq	r0, [r8, #-776]	; 0xfffffcf8
     4ac:	04000001 	streq	r0, [r0], #-1
     4b0:	02751100 	rsbseq	r1, r5, #0, 2
	while (1) {
     4b4:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
     4b8:	048a0303 	streq	r0, [sl], #771	; 0x303
     4bc:	58180000 	ldmdapl	r8, {}	; <UNPREDICTABLE>
     4c0:	30000005 	andcc	r0, r0, r5
void tci_run_delay_timer () {
     4c4:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
	setdel = __pi_mintk - __pi_old;
     4c8:	00000521 	andeq	r0, r0, r1, lsr #10
     4cc:	00151217 	andseq	r1, r5, r7, lsl r2
     4d0:	03140800 	tsteq	r4, #0, 16
     4d4:	0000cd07 	andeq	ip, r0, r7, lsl #26
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4d8:	2d170000 	ldccs	0, cr0, [r7, #-0]
     4dc:	08000003 	stmdaeq	r0, {r0, r1}
     4e0:	cd070315 	stcgt	3, cr0, [r7, #-84]	; 0xffffffac
     4e4:	02000000 	andeq	r0, r0, #0
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     4e8:	00054b17 	andeq	r4, r5, r7, lsl fp
	sti_tim;
     4ec:	03160800 	tsteq	r6, #0, 16
}
     4f0:	0002d90a 	andeq	sp, r2, sl, lsl #18
     4f4:	88170400 	ldmdahi	r7, {sl}
     4f8:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
     4fc:	05080317 	streq	r0, [r8, #-791]	; 0xfffffce9
     500:	08000001 	stmdaeq	r0, {r0}
	cli_aux;
     504:	0004dd17 	andeq	sp, r4, r7, lsl sp
     508:	03180800 	tsteq	r8, #0, 16
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     50c:	0005210f 	andeq	r2, r5, pc, lsl #2
     510:	28170c00 	ldmdacs	r7, {sl, fp}
     514:	08000003 	stmdaeq	r0, {r0, r1}
     518:	31150319 	tstcc	r5, r9, lsl r3
	sti_aux;
     51c:	2c000005 	stccs	0, cr0, [r0], {5}
}
     520:	04b10f00 	ldrteq	r0, [r1], #3840	; 0xf00
     524:	05310000 	ldreq	r0, [r1, #-0]!
     528:	88190000 	ldmdahi	r9, {}	; <UNPREDICTABLE>
void AONRTCIntHandler () {
     52c:	03000000 	movweq	r0, #0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     530:	be040a00 	vmlalt.f32	s0, s8, s0
     534:	11000004 	tstne	r0, r4
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     538:	00000563 	andeq	r0, r0, r3, ror #10
		if (__pi_utims [0] == 0)
     53c:	1b031c08 	blne	c7564 <__ccfg+0xa75bc>
     540:	000004be 			; <UNDEFINED> instruction: 0x000004be
		if (*(__pi_utims [0])) {
     544:	0003b714 	andeq	fp, r3, r4, lsl r7
     548:	031e0800 	tsteq	lr, #0, 16
			(*(__pi_utims [0]))--;
     54c:	00055314 	andeq	r5, r5, r4, lsl r3
		if (__pi_utims [1] == 0)
     550:	0a010100 	beq	40958 <__ccfg+0x209b0>
		if (*(__pi_utims [1])) {
     554:	00053704 	andeq	r3, r5, r4, lsl #14
			aux_timer_inactive = 0;
     558:	00110e00 	andseq	r0, r1, r0, lsl #28
			(*(__pi_utims [1]))--;
     55c:	1d0a0000 	stcne	0, cr0, [sl, #-0]
		if (__pi_utims [2] == 0)
     560:	0000cd0d 	andeq	ip, r0, sp, lsl #26
		if (*(__pi_utims [2])) {
     564:	0e010100 	adfeqs	f0, f1, f0
			(*(__pi_utims [2]))--;
     568:	0000031f 	andeq	r0, r0, pc, lsl r3
		if (__pi_utims [3] != 0) {
     56c:	de161e0a 	cdple	14, 1, cr1, cr6, cr10, {0}
			if (*(__pi_utims [3])) {
     570:	01000000 	mrseq	r0, (UNDEF: 0)
				aux_timer_inactive = 0;
     574:	04c00e01 	strbeq	r0, [r0], #3585	; 0xe01
				(*(__pi_utims [3]))--;
     578:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
	if (__pi_systat.ledsts) {
     57c:	0000de20 	andeq	sp, r0, r0, lsr #28
     580:	0e010100 	adfeqs	f0, f1, f0
		if (__pi_systat.ledblc++ == 0) {
     584:	000000d4 	ldrdeq	r0, [r0], -r4
     588:	5314220a 	tstpl	r4, #-1610612736	; 0xa0000000
			if (__pi_systat.ledblk) {
     58c:	01000005 	tsteq	r0, r5
     590:	05190e01 	ldreq	r0, [r9, #-3585]	; 0xfffff1ff
     594:	0c0b0000 	stceq	0, cr0, [fp], {-0}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     598:	00047618 	andeq	r7, r4, r8, lsl r6
     59c:	1a010100 	bne	409a4 <__ccfg+0x209fc>
				if (__pi_systat.ledsts & 0x2)
     5a0:	0000012d 	andeq	r0, r0, sp, lsr #2
     5a4:	e3061501 	movw	r1, #25857	; 0x6501
     5a8:	01000000 	mrseq	r0, (UNDEF: 0)
				if (__pi_systat.ledsts & 0x4)
     5ac:	01fc0305 	mvnseq	r0, r5, lsl #6
				__pi_systat.ledblk = 0;
     5b0:	d91a2000 	ldmdble	sl, {sp}
     5b4:	01000002 	tsteq	r0, r2
			if (__pi_systat.fstblk)
     5b8:	00e30616 	rsceq	r0, r3, r6, lsl r6
     5bc:	05010000 	streq	r0, [r1, #-0]
				__pi_systat.ledblc = 200;
     5c0:	0001fd03 	andeq	pc, r1, r3, lsl #26
	if (events & AON_RTC_EVFLAGS_CH0) {
     5c4:	66731b20 	ldrbtvs	r1, [r3], -r0, lsr #22
		cli_tim;
     5c8:	18010064 	stmdane	r1, {r2, r5, r6}
		__pi_new += setdel;
     5cc:	00008105 	andeq	r8, r0, r5, lsl #2
     5d0:	03050100 	movweq	r0, #20736	; 0x5100
		setdel = 0;
     5d4:	20000000 	andcs	r0, r0, r0
		RISE_N_SHINE;
     5d8:	1a011e0b 	bne	47e0c <__ccfg+0x27e64>
		__pi_new += setdel;
     5dc:	00061609 	andeq	r1, r6, r9, lsl #12
		RISE_N_SHINE;
     5e0:	053f0d00 	ldreq	r0, [pc, #-3328]!	; fffff8e8 <_estack+0xdfffa8e8>
     5e4:	1b010000 	blne	405ec <__ccfg+0x20644>
		aux_timer_inactive = 1;
     5e8:	0000e30a 	andeq	lr, r0, sl, lsl #6
     5ec:	c90d0000 	stmdbgt	sp, {}	; <UNPREDICTABLE>
				if (__pi_systat.ledsts & 0x1)
     5f0:	01000004 	tsteq	r0, r4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     5f4:	00e30a1c 	rsceq	r0, r3, ip, lsl sl
     5f8:	0d010000 	stceq	0, cr0, [r1, #-0]
				if (__pi_systat.ledsts & 0x2)
     5fc:	00000051 	andeq	r0, r0, r1, asr r0
     600:	e30a1d01 	movw	r1, #44289	; 0xad01
     604:	02000000 	andeq	r0, r0, #0
				if (__pi_systat.ledsts & 0x8)
     608:	00037b0d 	andeq	r7, r3, sp, lsl #22
				__pi_systat.ledblk = 1;
     60c:	0a1e0100 	beq	780a14 <__ccfg+0x760a6c>
     610:	00000616 	andeq	r0, r0, r6, lsl r6
		if (aux_timer_inactive) {
     614:	e30f0003 	movw	r0, #61443	; 0xf003
			cli_aux;
     618:	26000000 	strcs	r0, [r0], -r0
     61c:	19000006 	stmdbne	r0, {r1, r2}
     620:	00000088 	andeq	r0, r0, r8, lsl #1
     624:	5003001a 	andpl	r0, r3, sl, lsl r0
     628:	01000005 	tsteq	r0, r5
     62c:	05d8031f 	ldrbeq	r0, [r8, #799]	; 0x31f
     630:	011c0000 	tsteq	ip, r0
     634:	00000583 	andeq	r0, r0, r3, lsl #11
     638:	01066101 	tsteq	r6, r1, lsl #2
     63c:	000001e8 	andeq	r0, r0, r8, ror #3
word tci_update_delay_ticks (Boolean force) {
     640:	00000390 	muleq	r0, r0, r3
	cli_tim;
     644:	076a9c01 	strbeq	r9, [sl, -r1, lsl #24]!
     648:	da1d0000 	ble	740650 <__ccfg+0x7206a8>
	if (setdel) {
     64c:	01000000 	mrseq	r0, (UNDEF: 0)
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     650:	00cd1161 	sbceq	r1, sp, r1, ror #2
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     654:	00000000 	andeq	r0, r0, r0
     658:	c61e0000 	ldrgt	r0, [lr], -r0
     65c:	01000002 	tsteq	r0, r2
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     660:	0200176c 	andeq	r1, r0, #108, 14	; 0x1b00000
				AON_RTC_O_CH0CMP)) - gettav ());
     664:	1a1e0000 	bne	78066c <__ccfg+0x7606c4>
	return NO;
     668:	01000001 	tsteq	r0, r1
			setdel = 0;
     66c:	0256197f 	subseq	r1, r6, #2080768	; 0x1fc000
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     670:	f11e0000 			; <UNDEFINED> instruction: 0xf11e0000
     674:	01000003 	tsteq	r0, r3
}
     678:	02681b83 	rsbeq	r1, r8, #134144	; 0x20c00
		sti_tim;
     67c:	9f1e0000 	svcls	0x001e0000
		return YES;
     680:	01000004 	tsteq	r0, r4
     684:	02701586 	rsbseq	r1, r0, #562036736	; 0x21800000
     688:	601e0000 	andsvs	r0, lr, r0
     68c:	01000000 	mrseq	r0, (UNDEF: 0)
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     690:	02a818a1 	adceq	r1, r8, #10551296	; 0xa10000
	UARTDisable (UART0_BASE);
     694:	661e0000 	ldrvs	r0, [lr], -r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     698:	01000001 	tsteq	r0, r1
	UARTDisable (UART0_BASE);
     69c:	02b019a4 	adcseq	r1, r0, #164, 18	; 0x290000
	UARTConfigSetExpClk (UART0_BASE,
     6a0:	231e0000 	tstcs	lr, #0
     6a4:	01000005 	tsteq	r0, r5
     6a8:	02d022ad 	sbcseq	r2, r0, #-805306358	; 0xd000000a
     6ac:	001e0000 	andseq	r0, lr, r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6b0:	01000001 	tsteq	r0, r1
     6b4:	02d820b0 	sbcseq	r2, r8, #176	; 0xb0
     6b8:	321e0000 	andscc	r0, lr, #0
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     6bc:	01000000 	mrseq	r0, (UNDEF: 0)
     6c0:	02f225b7 	rscseq	r2, r2, #767557632	; 0x2dc00000
     6c4:	331e0000 	tstcc	lr, #0
	urates [0] = rate;
     6c8:	01000003 	tsteq	r0, r3
}
     6cc:	02fa1aba 	rscseq	r1, sl, #761856	; 0xba000
     6d0:	001e0000 	andseq	r0, lr, r0
     6d4:	01000000 	mrseq	r0, (UNDEF: 0)
     6d8:	031a17c3 	tsteq	sl, #51118080	; 0x30c0000
     6dc:	001f0000 	andseq	r0, pc, r0
     6e0:	4a000002 	bmi	6f0 <reinit_uart+0xc>
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6e4:	20000003 	andcs	r0, r0, r3
     6e8:	000004c9 	andeq	r0, r0, r9, asr #9
     6ec:	e3116301 	tst	r1, #67108864	; 0x4000000
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     6f0:	05000000 	streq	r0, [r0, #-0]
     6f4:	00011803 	andeq	r1, r1, r3, lsl #16
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     6f8:	03832020 	orreq	r2, r3, #32
     6fc:	65010000 	strvs	r0, [r1, #-0]
	__pi_uart_setrate (urates [0], __pi_uart);
     700:	00076a15 	andeq	r6, r7, r5, lsl sl
     704:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
     708:	21200001 			; <UNDEFINED> instruction: 0x21200001
     70c:	000000c6 	andeq	r0, r0, r6, asr #1
     710:	de126701 	cdple	7, 1, cr6, cr2, cr1, {0}
     714:	22000001 	andcs	r0, r0, #1
     718:	00000058 	andeq	r0, r0, r8, asr r0
	switch (operation) {
     71c:	00000730 	andeq	r0, r0, r0, lsr r7
static int ioreq_uart_a (int operation, char *buf, int len) {
     720:	0004fc20 	andeq	pc, r4, r0, lsr #24
     724:	0e870100 	rmfeqs	f0, f7, f0
     728:	000001e4 	andeq	r0, r0, r4, ror #3
     72c:	006f9102 	rsbeq	r9, pc, r2, lsl #2
     730:	00077023 	andeq	r7, r7, r3, lsr #32
				*buf++ = uart_a_read;
     734:	0002bc00 	andeq	fp, r2, r0, lsl #24
     738:	0002c400 	andeq	ip, r2, r0, lsl #8
			while (len && uart_a_char_available) {
     73c:	0ea70100 	fdveqs	f0, f7, f0
     740:	0000074e 	andeq	r0, r0, lr, asr #14
     744:	00078324 	andeq	r8, r7, r4, lsr #6
			if (len != operation) {
     748:	00001e00 	andeq	r1, r0, r0, lsl #28
}
     74c:	70250000 	eorvc	r0, r5, r0
     750:	e4000007 	str	r0, [r0], #-7
			uart_a_disable_int;
     754:	ec000002 	stc	0, cr0, [r0], {2}
			if (uart_a_char_available) {
     758:	01000002 	tsteq	r0, r2
				*buf++ = uart_a_read;
     75c:	83240db3 			; <UNDEFINED> instruction: 0x83240db3
			uart_a_disable_int;
     760:	35000007 	strcc	r0, [r0, #-7]
     764:	00000000 	andeq	r0, r0, r0
			if (uart_a_char_available) {
     768:	040a0000 	streq	r0, [sl], #-0
     76c:	00000626 	andeq	r0, r0, r6, lsr #12
				uart_a_enable_int;
     770:	00900126 	addseq	r0, r0, r6, lsr #2
     774:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
				goto Redo_rx;
     778:	00c10109 	sbceq	r0, r1, r9, lsl #2
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     77c:	90010000 	andls	r0, r1, r0
     780:	27000007 	strcs	r0, [r0, -r7]
			return -2;
     784:	000002e2 	andeq	r0, r0, r2, ror #5
     788:	e31c5901 	tst	ip, #16384	; 0x4000
				uart_a_write (*buf);
     78c:	00000000 	andeq	r0, r0, r0
     790:	03c90128 	biceq	r0, r9, #40, 2
			while (len && uart_a_room_in_tx) {
     794:	42010000 	andmi	r0, r1, #0
     798:	e8010106 	stmda	r1, {r1, r2, r8}
     79c:	27000007 	strcs	r0, [r0, -r7]
			if (len != operation) {
     7a0:	000000da 	ldrdeq	r0, [r0], -sl
			uart_a_disable_int;
     7a4:	cd184201 	lfmgt	f4, 4, [r8, #-4]
     7a8:	21000000 	mrscs	r0, (UNDEF: 0)
			if (uart_a_room_in_tx) {
     7ac:	00000383 	andeq	r0, r0, r3, lsl #7
     7b0:	6a2d4201 	bvs	b50fbc <__ccfg+0xb31014>
				uart_a_enable_int;
     7b4:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
     7b8:	000002a6 	andeq	r0, r0, r6, lsr #5
				*buf++ = uart_a_read;
     7bc:	8a1d4301 	bhi	7513c8 <__ccfg+0x731420>
			if (uart_a_room_in_tx) {
     7c0:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
				uart_a_write (*buf);
     7c4:	00000459 	andeq	r0, r0, r9, asr r4
     7c8:	c6235401 	strtgt	r5, [r3], -r1, lsl #8
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7cc:	29000001 	stmdbcs	r0, {r0}
     7d0:	0000cf21 	andeq	ip, r0, r1, lsr #30
			uart_a_enable_int;
     7d4:	11450100 	mrsne	r0, (UNDEF: 85)
     7d8:	00000111 	andeq	r0, r0, r1, lsl r1
     7dc:	0100702a 	tsteq	r0, sl, lsr #32
			return 0;
     7e0:	07e81049 	strbeq	r1, [r8, r9, asr #32]!
			if (len == UART_CNTRL_SETRATE) {
     7e4:	00000000 	andeq	r0, r0, r0
				if (__pi_uart_setrate (*((word*)buf),
     7e8:	00e3040a 	rsceq	r0, r3, sl, lsl #8
     7ec:	011c0000 	tsteq	ip, r0
     7f0:	00000503 	andeq	r0, r0, r3, lsl #10
				syserror (EREQPAR, "uar");
     7f4:	01062101 	tsteq	r6, r1, lsl #2
			syserror (ENOOPER, "uai");
     7f8:	000000c8 	andeq	r0, r0, r8, asr #1
			if (len == UART_CNTRL_GETRATE) {
     7fc:	00000178 	andeq	r0, r0, r8, ror r1
				return 1;
     800:	087d9c01 	ldmdaeq	sp!, {r0, sl, fp, ip, pc}^
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     804:	da1d0000 	ble	74080c <__ccfg+0x720864>
			syserror (ENOOPER, "uai");
     808:	01000000 	mrseq	r0, (UNDEF: 0)
     80c:	00cd1521 	sbceq	r1, sp, r1, lsr #10
     810:	004c0000 	subeq	r0, ip, r0
     814:	ae1e0000 	cdpge	0, 1, cr0, cr14, cr0, {0}
     818:	01000004 	tsteq	r0, r4
     81c:	00d81625 	sbcseq	r1, r8, r5, lsr #12
     820:	331e0000 	tstcc	lr, #0
     824:	01000003 	tsteq	r0, r3
     828:	00e61a28 	rsceq	r1, r6, r8, lsr #20
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     82c:	ec1e0000 	ldc	0, cr0, [lr], {-0}
void UART0IntHandler () {
     830:	01000000 	mrseq	r0, (UNDEF: 0)
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     834:	01061a33 	tsteq	r6, r3, lsr sl
     838:	f51e0000 			; <UNDEFINED> instruction: 0xf51e0000
     83c:	01000002 	tsteq	r0, r2
     840:	01141d37 	tsteq	r4, r7, lsr sp
     844:	6e1e0000 	cdpvs	0, 1, cr0, cr14, cr0, {0}
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     848:	01000005 	tsteq	r0, r5
     84c:	011c1b3a 	tsteq	ip, sl, lsr fp
		RISE_N_SHINE;
     850:	002b0000 	eoreq	r0, fp, r0
     854:	20000000 	andcs	r0, r0, r0
		i_trigger (devevent (UART_A, READ));
     858:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
     85c:	11142201 	tstne	r4, r1, lsl #4
     860:	05000001 	streq	r0, [r0, #-1]
     864:	00011003 	andeq	r1, r1, r3
     868:	01562020 	cmpeq	r6, r0, lsr #32
     86c:	23010000 	movwcs	r0, #4096	; 0x1000
     870:	00076a15 	andeq	r6, r7, r5, lsl sl
     874:	14030500 	strne	r0, [r3], #-1280	; 0xfffffb00
     878:	00200001 	eoreq	r0, r0, r1
     87c:	07902c00 	ldreq	r2, [r0, r0, lsl #24]
     880:	01780000 	cmneq	r8, r0
     884:	01e80000 	mvneq	r0, r0
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     888:	9c010000 	stcls	0, cr0, [r1], {-0}
     88c:	000008f2 	strdeq	r0, [r0], -r2
     890:	00079f24 	andeq	r9, r7, r4, lsr #30
		i_trigger (devevent (UART_A, WRITE));
     894:	00006a00 	andeq	r6, r0, r0, lsl #20
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     898:	07ab2d00 	streq	r2, [fp, r0, lsl #26]!
     89c:	00880000 	addeq	r0, r8, r0
		RISE_N_SHINE;
     8a0:	cf2e0000 	svcgt	0x002e0000
     8a4:	20000007 	andcs	r0, r0, r7
     8a8:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
		i_trigger (devevent (UART_A, WRITE));
     8ac:	2d000008 	stccs	0, cr0, [r0, #-32]	; 0xffffffe0
     8b0:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     8b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     8b8:	0007dc2f 	andeq	sp, r7, pc, lsr #24
     8bc:	90300000 	eorsls	r0, r0, r0
     8c0:	c6000007 	strgt	r0, [r0], -r7
     8c4:	40000001 	andmi	r0, r0, r1
     8c8:	01000000 	mrseq	r0, (UNDEF: 0)
     8cc:	9f240642 	svcls	0x00240642
     8d0:	bd000007 	stclt	0, cr0, [r0, #-28]	; 0xffffffe4
     8d4:	2b000000 	blcs	8dc <UART0IntHandler+0xb0>
}
     8d8:	00000040 	andeq	r0, r0, r0, asr #32
     8dc:	0007ab2f 	andeq	sl, r7, pc, lsr #22
     8e0:	07b73100 	ldreq	r3, [r7, r0, lsl #2]!
     8e4:	c3320000 	teqgt	r2, #0
     8e8:	c6000007 	strgt	r0, [r0], -r7
void __buttons_setirq (int val) {
     8ec:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     8f0:	70330000 	eorsvc	r0, r3, r0
     8f4:	00000007 	andeq	r0, r0, r7
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8f8:	00000000 	andeq	r0, r0, r0
     8fc:	01000000 	mrseq	r0, (UNDEF: 0)
     900:	0783249c 			; <UNDEFINED> instruction: 0x0783249c
		bn = BUTTON_GPIO (__button_list [i]);
     904:	00d00000 	sbcseq	r0, r0, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     908:	00000000 	andeq	r0, r0, r0
     90c:	0000148c 	andeq	r1, r0, ip, lsl #9
     910:	02ae0003 	adceq	r0, lr, #3
     914:	01040000 	mrseq	r0, (UNDEF: 4)
     918:	00000181 	andeq	r0, r0, r1, lsl #3
     91c:	0009f80c 	andeq	pc, r9, ip, lsl #16
}
     920:	00040600 	andeq	r0, r4, r0, lsl #12
     924:	00050000 	andeq	r0, r5, r0
     928:	00000000 	andeq	r0, r0, r0
     92c:	00044000 	andeq	r4, r4, r0
void __pinlist_setirq (int val) {
     930:	06010200 	streq	r0, [r1], -r0, lsl #4
	for (i = 0; i < N_PINLIST; i++) {
     934:	000003e5 	andeq	r0, r0, r5, ror #7
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     938:	46050202 	strmi	r0, [r5], -r2, lsl #4
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     93c:	03000004 	movweq	r0, #4
	for (i = 0; i < N_PINLIST; i++) {
     940:	00002520 	andeq	r2, r0, r0, lsr #10
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     944:	3f182810 	svccc	0x00182810
     948:	02000000 	andeq	r0, r0, #0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     94c:	00b40504 	adcseq	r0, r4, r4, lsl #10
     950:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     954:	0000af05 	andeq	sl, r0, r5, lsl #30
	for (i = 0; i < N_PINLIST; i++) {
     958:	239b0300 	orrscs	r0, fp, #0, 6
}
     95c:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
     960:	00005918 	andeq	r5, r0, r8, lsl r9
     964:	08010200 	stmdaeq	r1, {r9}
     968:	000003e3 	andeq	r0, r0, r3, ror #7
void GPIOIntHandler () {
     96c:	00279103 	eoreq	r9, r7, r3, lsl #2
if (buttons_int) {
     970:	19311000 	ldmdbne	r1!, {ip}
     974:	0000006c 	andeq	r0, r0, ip, rrx
	buttons_disable ();
     978:	8a070202 	bhi	1c1188 <__ccfg+0x1a11e0>
     97c:	03000002 	movweq	r0, #2
	i_trigger ((aword)&__button_list);
     980:	00002333 	andeq	r2, r0, r3, lsr r3
     984:	7f193410 	svcvc	0x00193410
     988:	02000000 	andeq	r0, r0, #0
     98c:	007e0704 	rsbseq	r0, lr, r4, lsl #14
     990:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     994:	00007907 	andeq	r7, r0, r7, lsl #18
     998:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
     99c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     9a0:	83070402 	movwhi	r0, #29698	; 0x7402
     9a4:	03000000 	movweq	r0, #0
     9a8:	0000047d 	andeq	r0, r0, sp, ror r4
	RISE_N_SHINE;
     9ac:	4d122611 	ldcmi	6, cr2, [r2, #-68]	; 0xffffffbc
     9b0:	03000000 	movweq	r0, #0
     9b4:	0000227c 	andeq	r2, r0, ip, ror r2
if (pin_sensor_int) {
     9b8:	60122711 	andsvs	r2, r2, r1, lsl r7
     9bc:	05000000 	streq	r0, [r0, #-0]
	i_trigger ((aword)(&__input_pins));
     9c0:	000000a7 	andeq	r0, r0, r7, lsr #1
     9c4:	0000a706 	andeq	sl, r0, r6, lsl #14
     9c8:	09ca0300 	stmibeq	sl, {r8, r9}^
     9cc:	28110000 	ldmdacs	r1, {}	; <UNPREDICTABLE>
     9d0:	00003312 	andeq	r3, r0, r2, lsl r3
     9d4:	13fc0300 	mvnsne	r0, #0, 6
     9d8:	2b110000 	blcs	4409e0 <__ccfg+0x420a38>
     9dc:	00004d12 	andeq	r4, r0, r2, lsl sp
     9e0:	00c90600 	sbceq	r0, r9, r0, lsl #12
     9e4:	c9050000 	stmdbgt	r5, {}	; <UNPREDICTABLE>
     9e8:	03000000 	movweq	r0, #0
	__pinsen_disable_and_clear;
     9ec:	000022cd 	andeq	r2, r0, sp, asr #5
	RISE_N_SHINE;
     9f0:	73122c11 	tstvc	r2, #4352	; 0x1100
     9f4:	05000000 	streq	r0, [r0, #-0]
     9f8:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
}
     9fc:	0002ef03 	andeq	lr, r2, r3, lsl #30
     a00:	122d1100 	eorne	r1, sp, #0, 2
     a04:	00000073 	andeq	r0, r0, r3, ror r0
     a08:	00036403 	andeq	r6, r3, r3, lsl #8
     a0c:	102e1100 	eorne	r1, lr, r0, lsl #2
void system_init () {
     a10:	00000108 	andeq	r0, r0, r8, lsl #2
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a14:	00a70407 	adceq	r0, r7, r7, lsl #8
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a18:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a1c:	9c093211 	sfmls	f3, 4, [r9], {17}
     a20:	09000001 	stmdbeq	r0, {r0}
     a24:	00000318 	andeq	r0, r0, r8, lsl r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a28:	c9073411 	stmdbgt	r7, {r0, r4, sl, ip, sp}
     a2c:	01000000 	mrseq	r0, (UNDEF: 0)
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a30:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
     a34:	0000009e 	muleq	r0, lr, r0
     a38:	c9033511 	stmdbgt	r3, {r0, r4, r8, sl, ip, sp}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a3c:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a40:	09000601 	stmdbeq	r0, {r0, r9, sl}
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a44:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a48:	c9033611 	stmdbgt	r3, {r0, r4, r9, sl, ip, sp}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a4c:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a50:	09000501 	stmdbeq	r0, {r0, r8, sl}
		pin = (port_confs [i] >> 19) & 0x1f;
     a54:	0000048c 	andeq	r0, r0, ip, lsl #9
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a58:	c9033711 	stmdbgt	r3, {r0, r4, r8, r9, sl, ip, sp}
		pin = (port_confs [i] >> 19) & 0x1f;
     a5c:	01000000 	mrseq	r0, (UNDEF: 0)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a60:	09000401 	stmdbeq	r0, {r0, sl}
     a64:	00000485 	andeq	r0, r0, r5, lsl #9
     a68:	c9033811 	stmdbgt	r3, {r0, r4, fp, ip, sp}
     a6c:	01000000 	mrseq	r0, (UNDEF: 0)
		if (port_confs [i] & 0x80)
     a70:	0a000004 	beq	a88 <system_init+0x78>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a74:	00000476 	andeq	r0, r0, r6, ror r4
     a78:	c9073a11 	stmdbgt	r7, {r0, r4, r9, fp, ip, sp}
		if (port_confs [i] & 0x40)
     a7c:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a80:	00002b0a 	andeq	r2, r0, sl, lsl #22
     a84:	033c1100 	teqeq	ip, #0, 2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a88:	000000c9 	andeq	r0, r0, r9, asr #1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a8c:	00720a02 	rsbseq	r0, r2, r2, lsl #20
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a90:	3d110000 	ldccc	0, cr0, [r1, #-0]
	all_leds_blink;
     a94:	0000c903 	andeq	ip, r0, r3, lsl #18
     a98:	4f0a0300 	svcmi	0x000a0300
     a9c:	11000001 	tstne	r0, r1
     aa0:	00df083f 	sbcseq	r0, pc, pc, lsr r8	; <UNPREDICTABLE>
     aa4:	00040000 	andeq	r0, r4, r0
     aa8:	0004d403 	andeq	sp, r4, r3, lsl #8
     aac:	03411100 	movteq	r1, #4352	; 0x1100
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ab0:	0000010e 	andeq	r0, r0, lr, lsl #2
     ab4:	00019c06 	andeq	r9, r1, r6, lsl #24
     ab8:	030c0b00 	movweq	r0, #51968	; 0xcb00
     abc:	43110000 	tstmi	r1, #0
     ac0:	0001a81a 	andeq	sl, r1, sl, lsl r8
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     ac4:	0b010100 	bleq	40ecc <__ccfg+0x20f24>
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ac8:	0000038e 	andeq	r0, r0, lr, lsl #7
     acc:	c90e4511 	stmdbgt	lr, {r0, r4, r8, sl, lr}
	IntEnable (INT_AON_RTC_COMB);
     ad0:	01000001 	tsteq	r0, r1
     ad4:	cf040701 	svcgt	0x00040701
     ad8:	02000001 	andeq	r0, r0, #1
	__pi_malloc_init ();
     adc:	03ec0801 	mvneq	r0, #65536	; 0x10000
	IntEnable (INT_AON_GPIO_EDGE);
     ae0:	cf050000 	svcgt	0x00050000
     ae4:	0b000001 	bleq	af0 <system_init+0xe0>
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     ae8:	000003a4 	andeq	r0, r0, r4, lsr #7
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     aec:	c91e4511 	ldmdbgt	lr, {r0, r4, r8, sl, lr}
     af0:	01000001 	tsteq	r0, r1
     af4:	12080801 	andne	r0, r8, #65536	; 0x10000
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     af8:	021a098f 	andseq	r0, sl, #2342912	; 0x23c000
     afc:	fd0a0000 	stc2	0, cr0, [sl, #-0]
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b00:	12000019 	andne	r0, r0, #25
     b04:	00730b90 			; <UNDEFINED> instruction: 0x00730b90
     b08:	0a000000 	beq	b10 <system_init+0x100>
	urates [0] = UART_RATE / 100;
     b0c:	000006b3 			; <UNDEFINED> instruction: 0x000006b3
     b10:	a7089112 	smladge	r8, r2, r1, r9
	reinit_uart ();
     b14:	04000000 	streq	r0, [r0], #-0
	EXTRA_INITIALIZERS;
     b18:	0015be0a 	andseq	fp, r5, sl, lsl #28
     b1c:	10921200 	addsne	r1, r2, r0, lsl #4
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b20:	000000d5 	ldrdeq	r0, [r0], -r5
     b24:	93030006 	movwls	r0, #12294	; 0x3006
     b28:	12000004 	andne	r0, r0, #4
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b2c:	01e90393 			; <UNDEFINED> instruction: 0x01e90393
     b30:	1a050000 	bne	140b38 <__ccfg+0x120b90>
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b34:	0c000002 	stceq	0, cr0, [r0], {2}
     b38:	0000021a 	andeq	r0, r0, sl, lsl r2
			devinit [i] . init (devinit [i] . param);
     b3c:	00000236 	andeq	r0, r0, r6, lsr r2
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b40:	210b000d 	tstcs	fp, sp
     b44:	12000000 	andne	r0, r0, #0
     b48:	022b0f99 	eoreq	r0, fp, #612	; 0x264
	IntEnable (INT_UART0_COMB);
     b4c:	01010000 	mrseq	r0, (UNDEF: 1)
     b50:	00da0407 	sbcseq	r0, sl, r7, lsl #8
}
     b54:	01080000 	mrseq	r0, (UNDEF: 8)
	tci_run_auxiliary_timer ();
     b58:	74099113 	strvc	r9, [r9], #-275	; 0xfffffeed
		diag ("");
     b5c:	09000002 	stmdbeq	r0, {r1}
     b60:	0000050c 	andeq	r0, r0, ip, lsl #10
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     b64:	c9079313 	stmdbgt	r7, {r0, r1, r4, r8, r9, ip, pc}
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     b68:	01000000 	mrseq	r0, (UNDEF: 0)
		diag ("Leftover RAM: %d bytes",
     b6c:	09000107 	stmdbeq	r0, {r0, r1, r2, r8}
     b70:	0000001c 	andeq	r0, r0, ip, lsl r0
     b74:	c9039413 	stmdbgt	r3, {r0, r1, r4, sl, ip, pc}
     b78:	01000000 	mrseq	r0, (UNDEF: 0)
     b7c:	00000001 	andeq	r0, r0, r1
     b80:	00029d03 	andeq	r9, r2, r3, lsl #26
     b84:	03961300 	orrseq	r1, r6, #0, 6
     b88:	0000024a 	andeq	r0, r0, sl, asr #4
     b8c:	00027405 	andeq	r7, r2, r5, lsl #8
     b90:	02800c00 	addeq	r0, r0, #0, 24
     b94:	02900000 	addseq	r0, r0, #0
     b98:	000d0000 	andeq	r0, sp, r0
     b9c:	00028505 	andeq	r8, r2, r5, lsl #10
     ba0:	03570b00 	cmpeq	r7, #0, 22
     ba4:	9c130000 	ldcls	0, cr0, [r3], {-0}
     ba8:	00029017 	andeq	r9, r2, r7, lsl r0
     bac:	0c010100 	stfeqs	f0, [r1], {-0}
     bb0:	000000b3 	strheq	r0, [r0], -r3
     bb4:	000002ae 	andeq	r0, r0, lr, lsr #5
     bb8:	a305000d 	movwge	r0, #20493	; 0x500d
     bbc:	0b000002 	bleq	bcc <setpowermode+0x4>
     bc0:	000003d5 	ldrdeq	r0, [r0], -r5
     bc4:	ae130614 	mrcge	6, 0, r0, cr3, cr4, {0}
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     bc8:	01000002 	tsteq	r0, r2
     bcc:	01340b01 	teqeq	r4, r1, lsl #22
     bd0:	c3120000 	tstgt	r2, #0
     bd4:	0000df0e 	andeq	sp, r0, lr, lsl #30
     bd8:	0e010100 	adfeqs	f0, f1, f0
     bdc:	00000548 	andeq	r0, r0, r8, asr #10
     be0:	10016e15 	andne	r6, r1, r5, lsl lr
     be4:	000002dc 	ldrdeq	r0, [r0], -ip
}
     be8:	02e20407 	rsceq	r0, r2, #117440512	; 0x7000000
__attribute__ ((noreturn)) void __pi_release () {
     bec:	010f0000 	mrseq	r0, CPSR
     bf0:	000002ee 	andeq	r0, r0, lr, ror #5
     bf4:	0000a710 	andeq	sl, r0, r0, lsl r7
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     bf8:	d60c0000 	strle	r0, [ip], -r0
	check_stack_overflow;
     bfc:	f9000001 			; <UNDEFINED> instruction: 0xf9000001
     c00:	0d000002 	stceq	0, cr0, [r0, #-8]
     c04:	02ee0500 	rsceq	r0, lr, #0, 10
	update_n_wake (MAX_WORD, NO);
     c08:	e4110000 	ldr	r0, [r1], #-0
     c0c:	15000004 	strne	r0, [r0, #-4]
     c10:	f916017f 			; <UNDEFINED> instruction: 0xf916017f
	for_all_tasks (__pi_curr) {
     c14:	01000002 	tsteq	r0, r2
     c18:	03c11101 	biceq	r1, r1, #1073741824	; 0x40000000
     c1c:	82150000 	andshi	r0, r5, #0
  __ASM volatile ("cpsid i" : : : "memory");
     c20:	00eb1401 	rsceq	r1, fp, r1, lsl #8
	__SLEEP;
     c24:	01010000 	mrseq	r0, (UNDEF: 1)
     c28:	00051111 	andeq	r1, r5, r1, lsl r1
     c2c:	02d81500 	sbcseq	r1, r8, #0, 10
     c30:	0000df0e 	andeq	sp, r0, lr, lsl #30
	system_event_count ++;
     c34:	12010100 	andne	r0, r1, #0, 2
     c38:	03031508 	movweq	r1, #13576	; 0x3508
	switch (__pi_systat.effpdm) {
     c3c:	00035209 	andeq	r5, r3, r9, lsl #4
     c40:	361b1300 	ldrcc	r1, [fp], -r0, lsl #6
     c44:	07150000 	ldreq	r0, [r5, -r0]
     c48:	00a70703 	adceq	r0, r7, r3, lsl #14
			__WFI ();
     c4c:	13000000 	movwne	r0, #0
     c50:	0000060b 	andeq	r0, r0, fp, lsl #12
     c54:	08030815 	stmdaeq	r3, {r0, r2, r4, fp}
	check_stack_overflow;
     c58:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     c5c:	750e0004 	strvc	r0, [lr, #-4]
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c60:	15000002 	strne	r0, [r0, #-2]
     c64:	2b030309 	blcs	c1890 <__ccfg+0xa18e8>
			(__pi_curr->code) (tstate (__pi_curr));
     c68:	14000003 	strne	r0, [r0], #-3
			goto Redo;
     c6c:	00000558 	andeq	r0, r0, r8, asr r5
	for_all_tasks (__pi_curr) {
     c70:	030b1530 	movweq	r1, #46384	; 0xb530
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c74:	0003c208 	andeq	ip, r3, r8, lsl #4
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c78:	15121300 	ldrne	r1, [r2, #-768]	; 0xfffffd00
     c7c:	14150000 	ldrne	r0, [r5], #-0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c80:	00a70803 	adceq	r0, r7, r3, lsl #16
     c84:	13000000 	movwne	r0, #0
     c88:	0000032d 	andeq	r0, r0, sp, lsr #6
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c8c:	08031515 	stmdaeq	r3, {r0, r2, r4, r8, sl, ip}
     c90:	000000a7 	andeq	r0, r0, r7, lsr #1
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c94:	054b1302 	strbeq	r1, [fp, #-770]	; 0xfffffcfe
     c98:	16150000 	ldrne	r0, [r5], -r0
			__WFI ();
     c9c:	02cf0b03 	sbceq	r0, pc, #3072	; 0xc00
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ca0:	13040000 	movwne	r0, #16384	; 0x4000
     ca4:	00000f88 	andeq	r0, r0, r8, lsl #31
}
     ca8:	09031715 	stmdbeq	r3, {r0, r2, r4, r8, r9, sl, ip}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cac:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cb0:	04dd1308 	ldrbeq	r1, [sp], #776	; 0x308
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cb4:	18150000 	ldmdane	r5, {}	; <UNPREDICTABLE>
     cb8:	03c20f03 	biceq	r0, r2, #3, 30
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cbc:	130c0000 	movwne	r0, #49152	; 0xc000
     cc0:	00000328 	andeq	r0, r0, r8, lsr #6
     cc4:	15031915 	strne	r1, [r3, #-2325]	; 0xfffff6eb
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cc8:	000003d2 	ldrdeq	r0, [r0], -r2
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ccc:	520c002c 	andpl	r0, ip, #44	; 0x2c
     cd0:	d2000003 	andle	r0, r0, #3
     cd4:	15000003 	strne	r0, [r0, #-3]
     cd8:	00000094 	muleq	r0, r4, r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     cdc:	04070003 	streq	r0, [r7], #-3
     ce0:	0000035f 	andeq	r0, r0, pc, asr r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ce4:	0005630e 	andeq	r6, r5, lr, lsl #6
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     ce8:	031c1500 	tsteq	ip, #0, 10
     cec:	00035f1b 	andeq	r5, r3, fp, lsl pc
     cf0:	03b71100 			; <UNDEFINED> instruction: 0x03b71100
     cf4:	1e150000 	cdpne	0, 1, cr0, cr5, cr0, {0}
     cf8:	03f41403 	mvnseq	r1, #50331648	; 0x3000000
			SysCtrlSetRechargeBeforePowerDown
     cfc:	01010000 	mrseq	r0, (UNDEF: 1)
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d00:	03d80407 	bicseq	r0, r8, #117440512	; 0x7000000
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d04:	110b0000 	mrsne	r0, (UNDEF: 11)
     d08:	16000000 	strne	r0, [r0], -r0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d0c:	00a7131d 	adceq	r1, r7, sp, lsl r3
     d10:	01010000 	mrseq	r0, (UNDEF: 1)
     d14:	00031f0b 	andeq	r1, r3, fp, lsl #30
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d18:	1a1e1600 	bne	786520 <__ccfg+0x766578>
     d1c:	000000b8 	strheq	r0, [r0], -r8
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d20:	c00b0101 	andgt	r0, fp, r1, lsl #2
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d24:	16000004 	strne	r0, [r0], -r4
     d28:	00b8241e 	adcseq	r2, r8, lr, lsl r4
     d2c:	01010000 	mrseq	r0, (UNDEF: 1)
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d30:	0000d40b 	andeq	sp, r0, fp, lsl #8
			while (!(AONWUCPowerStatusGet () &
     d34:	14221600 	strtne	r1, [r2], #-1536	; 0xfffffa00
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d38:	000003f4 	strdeq	r0, [r0], -r4
     d3c:	ef030101 	svc	0x00030101
     d40:	16000005 	strne	r0, [r0], -r5
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d44:	043e1043 	ldrteq	r1, [lr], #-67	; 0xffffffbd
     d48:	04070000 	streq	r0, [r7], #-0
     d4c:	00000444 	andeq	r0, r0, r4, asr #8
     d50:	0450010f 	ldrbeq	r0, [r0], #-271	; 0xfffffef1
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d54:	8d100000 	ldchi	0, cr0, [r0, #-0]
     d58:	00000000 	andeq	r0, r0, r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d5c:	46160808 	ldrmi	r0, [r6], -r8, lsl #16
     d60:	00047409 	andeq	r7, r4, r9, lsl #8
			SysCtrlAdjustRechargeAfterPowerDown ();
     d64:	0b4c0a00 	bleq	130356c <__ccfg+0x12e35c4>
			reinit_uart ();
     d68:	4a160000 	bmi	580d70 <__ccfg+0x560dc8>
     d6c:	0004320f 	andeq	r3, r4, pc, lsl #4
     d70:	470a0000 	strmi	r0, [sl, -r0]
}
     d74:	16000008 	strne	r0, [r0], -r8
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d78:	008d074b 	addeq	r0, sp, fp, asr #14
     d7c:	00040000 	andeq	r0, r4, r0
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d80:	00067503 	andeq	r7, r6, r3, lsl #10
     d84:	034c1600 	movteq	r1, #50688	; 0xc600
     d88:	00000450 	andeq	r0, r0, r0, asr r4
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     d8c:	00047405 	andeq	r7, r4, r5, lsl #8
     d90:	00fc0c00 	rscseq	r0, ip, r0, lsl #24
     d94:	04950000 	ldreq	r0, [r5], #0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     d98:	94150000 	ldrls	r0, [r5], #-0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     d9c:	03000000 	movweq	r0, #0
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     da0:	09bf0b00 	ldmibeq	pc!, {r8, r9, fp}	; <UNPREDICTABLE>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     da4:	0d010000 	stceq	0, cr0, [r1, #-0]
     da8:	00048512 	andeq	r8, r4, r2, lsl r5
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     dac:	0c010100 	stfeqs	f0, [r1], {-0}
     db0:	00000480 	andeq	r0, r0, r0, lsl #9
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     db4:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     db8:	00009415 	andeq	r9, r0, r5, lsl r4
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     dbc:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
     dc0:	000004a3 	andeq	r0, r0, r3, lsr #9
			PRCMPowerDomainOff (
     dc4:	0009db16 	andeq	sp, r9, r6, lsl fp
     dc8:	18cf0100 	stmiane	pc, {r8}^	; <UNPREDICTABLE>
	__SLEEP;
     dcc:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
     dd0:	0000eb0c 	andeq	lr, r0, ip, lsl #22
  __ASM volatile ("cpsie i" : : : "memory");
     dd4:	0004d400 	andeq	sp, r4, r0, lsl #8
	goto Redo;
     dd8:	00941500 	addseq	r1, r4, r0, lsl #10
     ddc:	00100000 	andseq	r0, r0, r0
     de0:	0004c405 	andeq	ip, r4, r5, lsl #8
     de4:	07d81700 	ldrbeq	r1, [r8, r0, lsl #14]
     de8:	ec010000 	stc	0, cr0, [r1], {-0}
     dec:	0004d40d 	andeq	sp, r4, sp, lsl #8
     df0:	03050100 	movweq	r0, #20736	; 0x5100
     df4:	00004238 	andeq	r4, r0, r8, lsr r2
     df8:	00065418 	andeq	r5, r6, r8, lsl r4
     dfc:	010c0100 	mrseq	r0, (UNDEF: 28)
     e00:	0000a70d 	andeq	sl, r0, sp, lsl #14
     e04:	1a030500 	bne	c220c <__ccfg+0xa2264>
     e08:	19200001 	stmdbne	r0!, {r0}
     e0c:	00000236 	andeq	r0, r0, r6, lsr r2
     e10:	0802d001 	stmdaeq	r2, {r0, ip, lr, pc}
     e14:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
     e18:	a70c2000 	strge	r2, [ip, -r0]
     e1c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     e20:	15000005 	strne	r0, [r0, #-5]
     e24:	00000094 	muleq	r0, r4, r0
     e28:	d5180000 	ldrle	r0, [r8, #-0]
     e2c:	01000005 	tsteq	r0, r5
     e30:	0e0d02d2 	mcreq	2, 0, r0, cr13, cr2, {6}
     e34:	05000005 	streq	r0, [r0, #-5]
     e38:	00011c03 	andeq	r1, r1, r3, lsl #24
     e3c:	02c11920 	sbceq	r1, r1, #32, 18	; 0x80000
     e40:	8c010000 	stchi	0, cr0, [r1], {-0}
	cli_tim;
     e44:	03050704 	movweq	r0, #22276	; 0x5704
     e48:	20000208 	andcs	r0, r0, r8, lsl #4
     e4c:	05c9011a 	strbeq	r0, [r9, #282]	; 0x11a
	diag ("PicOS halted");
     e50:	72010000 	andvc	r0, r1, #0
	mdelay (500);
     e54:	8d010505 	cfstr32hi	mvfx0, [r1, #-20]	; 0xffffffec
     e58:	74000000 	strvc	r0, [r0], #-0
	setpowermode (2);
     e5c:	d400000e 	strle	r0, [r0], #-14
	__PCB = NULL;
     e60:	0100000e 	tsteq	r0, lr
	release;
     e64:	0005849c 	muleq	r5, ip, r4
     e68:	04e81b00 	strbteq	r1, [r8], #2816	; 0xb00
     e6c:	05720000 	ldrbeq	r0, [r2, #-0]!
     e70:	691c0000 	ldmdbvs	ip, {}	; <UNPREDICTABLE>
int main (void) {
     e74:	05760100 	ldrbeq	r0, [r6, #-256]!	; 0xffffff00
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e78:	0000bd11 	andeq	fp, r0, r1, lsl sp
     e7c:	f71d0000 			; <UNDEFINED> instruction: 0xf71d0000
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e80:	b6000011 			; <UNDEFINED> instruction: 0xb6000011
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e84:	b800000e 	stmdalt	r0, {r1, r2, r3}
	system_init ();
     e88:	0100000e 	tsteq	r0, lr
	tcv_init ();
     e8c:	0002058d 	andeq	r0, r2, sp, lsl #11
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e90:	0861011e 	stmdaeq	r1!, {r1, r2, r3, r4, r8}^
     e94:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e98:	0bec2105 	bleq	ffb092b4 <_estack+0xdfb042b4>
     e9c:	0e440000 	cdpeq	0, 4, cr0, cr4, cr0, {0}
     ea0:	9c010000 	stcls	0, cr0, [r1], {-0}
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     ea4:	000007e4 	andeq	r0, r0, r4, ror #15
     ea8:	00086e1f 	andeq	r6, r8, pc, lsl lr
	delay (16, 0);
     eac:	01080d00 	tsteq	r8, r0, lsl #26
     eb0:	0011d020 	andseq	sp, r1, r0, lsr #32
     eb4:	000bec00 	andeq	lr, fp, r0, lsl #24
	__pi_release ();
     eb8:	00034800 	andeq	r4, r3, r0, lsl #16
     ebc:	056a0100 	strbeq	r0, [sl, #-256]!	; 0xffffff00
     ec0:	0005bf02 	andeq	fp, r5, r2, lsl #30
     ec4:	11df2100 	bicsne	r2, pc, r0, lsl #2
     ec8:	22000000 	andcs	r0, r0, #0
     ecc:	00000812 	andeq	r0, r0, r2, lsl r8
     ed0:	00000c06 	andeq	r0, r0, r6, lsl #24
static void killev (__pi_pcb_t *pid) {
     ed4:	00000368 	andeq	r0, r0, r8, ror #6
	wfun = (aword)(pid->code);
     ed8:	b302270d 	movwlt	r2, #9997	; 0x270d
	for_all_tasks (i) {
     edc:	23000007 	movwcs	r0, #7
		for (j = 0; j < nevents (i); j++) {
     ee0:	00000368 	andeq	r0, r0, r8, ror #6
     ee4:	00082024 	andeq	r2, r8, r4, lsr #32
     ee8:	000c9400 	andeq	r9, ip, r0, lsl #8
			    || i->Events [j] . Event == wfun
     eec:	125c2500 	subsne	r2, ip, #0, 10
		for (j = 0; j < nevents (i); j++) {
     ef0:	0c060000 	stceq	0, cr0, [r6], {-0}
			if (i->Events [j] . Event == (aword)pid
     ef4:	03900000 	orrseq	r0, r0, #0
     ef8:	b3010000 	movwlt	r0, #4096	; 0x1000
     efc:	381d0404 	ldmdacc	sp, {r2, sl}
				wakeupev (i, j);
     f00:	7e000014 	mcrvc	0, 0, r0, cr0, cr4, {0}
     f04:	8a00000c 	bhi	f3c <qfree+0x2c>
	for_all_tasks (i) {
     f08:	0100000c 	tsteq	r0, ip
}
     f0c:	1d0404a4 	cfstrsne	mvf0, [r4, #-656]	; 0xfffffd70
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f10:	0000125c 	andeq	r1, r0, ip, asr r2
static void qfree (aword *ch) {
     f14:	00000c92 	muleq	r0, r2, ip
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f18:	00000c94 	muleq	r0, r4, ip
	cc = (aword*)(mpools + MA_NP);
     f1c:	0404aa01 	streq	sl, [r4], #-2561	; 0xfffff5ff
	m_setnextp (ch, chunk);
     f20:	0012c025 	andseq	ip, r2, r5, lsr #32
	m_setnextp (cc, ch);
     f24:	000caa00 	andeq	sl, ip, r0, lsl #20
}
     f28:	0003a800 	andeq	sl, r3, r0, lsl #16
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f2c:	04bb0100 	ldrteq	r0, [fp], #256	; 0x100
     f30:	14432504 	strbne	r2, [r3], #-1284	; 0xfffffafc
     f34:	0caa0000 	stceq	0, cr0, [sl]
			m_setnextp (cc, m_nextp (chunk));
     f38:	03c80000 	biceq	r0, r8, #0
			m_size (chunk) += m_hdrlen + m_size (ch);
     f3c:	c5010000 	strgt	r0, [r1, #-0]
     f40:	8e200404 	cdphi	4, 2, cr0, cr0, cr4, {0}
     f44:	b2000012 	andlt	r0, r0, #18
     f48:	e800000c 	stmda	r0, {r2, r3}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f4c:	01000003 	tsteq	r0, r3
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f50:	510404c0 	smlabtpl	r4, r0, r4, r0
     f54:	21000006 	tstcs	r0, r6
     f58:	0000129d 	muleq	r0, sp, r2
			m_setnextp (cc, m_nextp (chunk));
     f5c:	125c1d00 	subsne	r1, ip, #0, 26
			m_size (ch) += m_hdrlen + m_size (chunk);
     f60:	0cc20000 	stcleq	0, cr0, [r2], {0}
     f64:	0cc40000 	stcleq	0, cr0, [r4], {0}
     f68:	c3010000 	movwgt	r0, #4096	; 0x1000
     f6c:	2d250404 	cfstrscs	mvf0, [r5, #-16]!
     f70:	c6000014 			; <UNDEFINED> instruction: 0xc6000014
     f74:	0800000c 	stmdaeq	r0, {r2, r3}
			if (m_size (chunk) >= m_size (ch))
     f78:	01000004 	tsteq	r0, r4
     f7c:	200404d5 	ldrdcs	r0, [r4], -r5
     f80:	0000144e 	andeq	r1, r0, lr, asr #8
		chunk = m_nextp (chunk))
     f84:	00000cdc 	ldrdeq	r0, [r0], -ip
     f88:	00000428 	andeq	r0, r0, r8, lsr #8
     f8c:	0404cc01 	streq	ip, [r4], #-3073	; 0xfffff3ff
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f90:	0000068e 	andeq	r0, r0, lr, lsl #13
	diag_wait (a);
     f94:	00145d21 	andseq	r5, r4, r1, lsr #26
	diag_wchar (c, a);
     f98:	5c1d0000 	ldcpl	0, cr0, [sp], {-0}
     f9c:	00000012 	andeq	r0, r0, r2, lsl r0
}
     fa0:	0200000d 	andeq	r0, r0, #13
     fa4:	0100000d 	tsteq	r0, sp
	syserror (ESTATE, "state");
     fa8:	250404df 	strcs	r0, [r4, #-1247]	; 0xfffffb21
     fac:	00001438 	andeq	r1, r0, r8, lsr r4
     fb0:	00000d20 	andeq	r0, r0, r0, lsr #26
     fb4:	00000440 	andeq	r0, r0, r0, asr #8
	for (i = 0; i < MAX_UTIMERS; i++)
     fb8:	0404e801 	streq	lr, [r4], #-2049	; 0xfffff7ff
void utimer_add (address ut) {
     fbc:	00127f25 	andseq	r7, r2, r5, lsr #30
     fc0:	000d2400 	andeq	r2, sp, r0, lsl #8
		if (__pi_utims [i] == NULL)
     fc4:	00045800 	andeq	r5, r4, r0, lsl #16
	for (i = 0; i < MAX_UTIMERS; i++)
     fc8:	04ee0100 	strbteq	r0, [lr], #256	; 0x100
     fcc:	128e260d 	addne	r2, lr, #13631488	; 0xd00000
		syserror (ERESOURCE, "ut a");
     fd0:	0d2e0000 	stceq	0, cr0, [lr, #-0]
	__pi_utims [i] = ut;
     fd4:	0d320000 	ldceq	0, cr0, [r2, #-0]
}
     fd8:	ed010000 	stc	0, cr0, [r1, #-0]
     fdc:	06dc0404 	ldrbeq	r0, [ip], r4, lsl #8
     fe0:	9d210000 	stcls	0, cr0, [r1, #-0]
	*t = v;
     fe4:	00000012 	andeq	r0, r0, r2, lsl r0
	TCI_RUN_AUXILIARY_TIMER;
     fe8:	00144325 	andseq	r4, r4, r5, lsr #6
void update_n_wake (word min, Boolean force) {
     fec:	000d5200 	andeq	r5, sp, r0, lsl #4
	if (TCI_UPDATE_DELAY_TICKS (force))
     ff0:	00047000 	andeq	r7, r4, r0
     ff4:	04f70100 	ldrbteq	r0, [r7], #256	; 0x100
     ff8:	144e2004 	strbne	r2, [lr], #-4
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     ffc:	0d540000 	ldcleq	0, cr0, [r4, #-0]
    1000:	04880000 	streq	r0, [r8], #0
    1004:	fa010000 	blx	4100c <__ccfg+0x21064>
    1008:	07080404 	streq	r0, [r8, -r4, lsl #8]
    100c:	5d210000 	stcpl	0, cr0, [r1, #-0]
    1010:	00000014 	andeq	r0, r0, r4, lsl r0
    1014:	0012b61d 	andseq	fp, r2, sp, lsl r6
    1018:	000d5c00 	andeq	r5, sp, r0, lsl #24
    101c:	000d6000 	andeq	r6, sp, r0
    1020:	04fd0100 	ldrbteq	r0, [sp], #256	; 0x100
    1024:	125c1d04 	subsne	r1, ip, #4, 26	; 0x100
    1028:	0d600000 	stcleq	0, cr0, [r0, #-0]
    102c:	0d620000 	stcleq	0, cr0, [r2, #-0]
		for_all_tasks (i) {
    1030:	00010000 	andeq	r0, r1, r0
	__pi_mintk = znew + min;
    1034:	95260405 	strls	r0, [r6, #-1029]!	; 0xfffffbfb
    1038:	6a00000b 	bvs	106c <update_n_wake+0x80>
			if (!twaiting (i))
    103c:	7600000d 	strvc	r0, [r0], -sp
    1040:	0100000d 	tsteq	r0, sp
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1044:	5c04050d 	cfstr32pl	mvfx0, [r4], {13}
    1048:	27000007 	strcs	r0, [r0, -r7]
    104c:	00001311 	andeq	r1, r0, r1, lsl r3
    1050:	00000d6a 	andeq	r0, r0, sl, ror #26
    1054:	00000d74 	andeq	r0, r0, r4, ror sp
    1058:	0203bd01 	andeq	fp, r3, #1, 26	; 0x40
    105c:	00132d21 	andseq	r2, r3, r1, lsr #26
    1060:	13202100 	nopne	{0}	; <UNPREDICTABLE>
    1064:	00000000 	andeq	r0, r0, r0
    1068:	00125c1d 	andseq	r5, r2, sp, lsl ip
    106c:	000d9e00 	andeq	r9, sp, r0, lsl #28
    1070:	000da000 	andeq	sl, sp, r0
				wakeuptm (i);
    1074:	053e0100 	ldreq	r0, [lr, #-256]!	; 0xffffff00
    1078:	12741d04 	rsbsne	r1, r4, #4, 26	; 0x100
		for_all_tasks (i) {
    107c:	0da00000 	stceq	0, cr0, [r0]
				d = i->Timer - znew;
    1080:	0db00000 	ldceq	0, cr0, [r0]
    1084:	41010000 	mrsmi	r0, (UNDEF: 1)
    1088:	5c1d0405 	cfldrspl	mvf0, [sp], {5}
		if ((word)(__pi_mintk - znew) < min) 
    108c:	b0000012 	andlt	r0, r0, r2, lsl r0
    1090:	b200000d 	andlt	r0, r0, #13
    1094:	0100000d 	tsteq	r0, sp
	__pi_old = znew;
    1098:	25040544 	strcs	r0, [r4, #-1348]	; 0xfffffabc
}
    109c:	0000127f 	andeq	r1, r0, pc, ror r2
	TCI_RUN_DELAY_TIMER;
    10a0:	00000db2 			; <UNDEFINED> instruction: 0x00000db2
}
    10a4:	000004a0 	andeq	r0, r0, r0, lsr #9
    10a8:	0b054701 	bleq	152cb4 <__ccfg+0x132d0c>
    10ac:	00146b25 	andseq	r6, r4, r5, lsr #22
    10b0:	000dba00 	andeq	fp, sp, r0, lsl #20
    10b4:	0004b800 	andeq	fp, r4, r0, lsl #16
void proceed (word state) {
    10b8:	054b0100 	strbeq	r0, [fp, #-256]	; 0xffffff00
	prcdstate (__pi_curr, state);
    10bc:	28000004 	stmdacs	r0, {r2}
    10c0:	000011ed 	andeq	r1, r0, sp, ror #3
	release;
    10c4:	00000c20 	andeq	r0, r0, r0, lsr #24
    10c8:	00000c22 	andeq	r0, r0, r2, lsr #24
void __pi_wait (aword event, word state) {
    10cc:	2802270d 	stmdacs	r2, {r0, r2, r3, r8, r9, sl, sp}
	sint j = nevents (__pi_curr);
    10d0:	000011f7 	strdeq	r1, [r0], -r7
	if (j >= MAX_EVENTS_PER_TASK)
    10d4:	00000c4e 	andeq	r0, r0, lr, asr #24
    10d8:	00000c50 	andeq	r0, r0, r0, asr ip
    10dc:	2802270d 	stmdacs	r2, {r0, r2, r3, r8, r9, sl, sp}
		syserror (ENEVENTS, "sw");
    10e0:	000011f7 	strdeq	r1, [r0], -r7
    10e4:	00000dd4 	ldrdeq	r0, [r0], -r4
	setestate (__pi_curr->Events [j], state, event);
    10e8:	00000dd6 	ldrdeq	r0, [r0], -r6
	incwait (__pi_curr);
    10ec:	0002270d 	andeq	r2, r2, sp, lsl #14
	setestate (__pi_curr->Events [j], state, event);
    10f0:	08e7011a 	stmiaeq	r7!, {r1, r3, r4, r8}^
}
    10f4:	5c010000 	stcpl	0, cr0, [r1], {-0}
    10f8:	a7010605 	strge	r0, [r1, -r5, lsl #12]
	...
	for_all_tasks (i) {
    1104:	01000000 	mrseq	r0, (UNDEF: 0)
		for (j = 0; j < nevents (i); j++) {
    1108:	0008129c 	muleq	r8, ip, r2
    110c:	63732900 	cmnvs	r3, #0, 18
    1110:	055e0100 	ldrbeq	r0, [lr, #-256]	; 0xffffff00
    1114:	0000a707 	andeq	sl, r0, r7, lsl #14
			if (i->Events [j] . Event == event) {
    1118:	0000e300 	andeq	lr, r0, r0, lsl #6
    111c:	012a0000 			; <UNDEFINED> instruction: 0x012a0000
    1120:	01000008 	tsteq	r0, r8
				wakeupev (i, j);
    1124:	0314048e 	tsteq	r4, #-1912602624	; 0x8e000000
    1128:	0000082a 	andeq	r0, r0, sl, lsr #16
	for_all_tasks (i) {
    112c:	000aa32b 	andeq	sl, sl, fp, lsr #6
}
    1130:	04ad0100 	strteq	r0, [sp], #256	; 0x100
aword __pi_join (aword pid, word st) {
    1134:	012c0001 			; <UNDEFINED> instruction: 0x012c0001
	for_all_tasks (i) {
    1138:	000007ae 	andeq	r0, r0, lr, lsr #15
    113c:	06047e01 	streq	r7, [r4], -r1, lsl #28
	return 0;
    1140:	000bc801 	andeq	ip, fp, r1, lsl #16
		if ((aword)i == pid) {
    1144:	000bec00 	andeq	lr, fp, r0, lsl #24
			__pi_wait (pid, st);
    1148:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
}
    114c:	2d000008 	stccs	0, cr0, [r0, #-32]	; 0xffffffe0
	for_all_tasks (i) {
    1150:	0000031a 	andeq	r0, r0, sl, lsl r3
    1154:	19047e01 	stmdbne	r4, {r0, r9, sl, fp, ip, sp, lr}
void delay (word d, word state) {
    1158:	000000a7 	andeq	r0, r0, r7, lsr #1
	settstate (__pi_curr, state);
    115c:	000000f6 	strdeq	r0, [r0], -r6
    1160:	33011e00 	movwcc	r1, #7680	; 0x1e00
    1164:	01000006 	tsteq	r0, r6
    1168:	10060401 	andne	r0, r6, r1, lsl #8
	update_n_wake (d, YES);
    116c:	c800000a 	stmdagt	r0, {r1, r3}
    1170:	0100000b 	tsteq	r0, fp
	__pi_curr->Timer = __pi_old + d;
    1174:	000a1e9c 	muleq	sl, ip, lr
    1178:	0b3a2e00 	bleq	e8c980 <__ccfg+0xe6c9d8>
	inctimer (__pi_curr);
    117c:	0b400000 	bleq	1001184 <__ccfg+0xfe11dc>
    1180:	08860000 	stmeq	r6, {}	; <UNPREDICTABLE>
    1184:	691c0000 	ldmdbvs	ip, {}	; <UNPREDICTABLE>
}
    1188:	046b0100 	strbteq	r0, [fp], #-256	; 0xffffff00
    118c:	00008d0b 	andeq	r8, r0, fp, lsl #26
	if (fun == NULL)
    1190:	43250000 			; <UNDEFINED> instruction: 0x43250000
		return (int) __pi_curr;
    1194:	3a000014 	bcc	11ec <__pi_memset+0x6>
    1198:	2800000a 	stmdacs	r0, {r1, r3}
	for_all_tasks (i)
    119c:	01000002 	tsteq	r0, r2
}
    11a0:	20020408 	andcs	r0, r2, r8, lsl #8
		if (i->code == fun)
    11a4:	00000f54 	andeq	r0, r0, r4, asr pc
	for_all_tasks (i)
    11a8:	00000a3c 	andeq	r0, r0, ip, lsr sl
    11ac:	00000248 	andeq	r0, r0, r8, asr #4
    11b0:	02040b01 	andeq	r0, r4, #1024	; 0x400
int __pi_strlen (const char *s) {
    11b4:	0000091a 	andeq	r0, r0, sl, lsl r9
	for (i = 0; *(s+i) != '\0'; i++);
    11b8:	00024823 	andeq	r4, r2, r3, lsr #16
}
    11bc:	0f612f00 	svceq	0x00612f00
	for (i = 0; *(s+i) != '\0'; i++);
    11c0:	6d300000 	ldcvs	0, cr0, [r0, #-0]
	while ((Boolean)(*d++ = *s++));
    11c4:	4800000f 	stmdami	r0, {r0, r1, r2, r3}
    11c8:	31000002 	tstcc	r0, r2
    11cc:	00000f6e 	andeq	r0, r0, lr, ror #30
}
    11d0:	00000109 	andeq	r0, r0, r9, lsl #2
	while (n--)
    11d4:	0013c922 	andseq	ip, r3, r2, lsr #18
    11d8:	000a4600 	andeq	r4, sl, r0, lsl #12
		*dest++ = *src++;
    11dc:	00026800 	andeq	r6, r2, r0, lsl #16
    11e0:	04fa0100 	ldrbteq	r0, [sl], #256	; 0x100
    11e4:	000008e7 	andeq	r0, r0, r7, ror #17
	while (n--)
    11e8:	0013e521 	andseq	lr, r3, r1, lsr #10
}
    11ec:	13d82100 	bicsne	r2, r8, #0, 2
		*dest++ = c;
    11f0:	22000000 	andcs	r0, r0, #0
void adddevfunc (devreqfun_t rf, int loc) {
    11f4:	000013f3 	strdeq	r1, [r0], -r3
		syserror (EREQPAR, "addv");
    11f8:	00000a4a 	andeq	r0, r0, sl, asr #20
		syserror (ERESOURCE, "addv");
    11fc:	00000280 	andeq	r0, r0, r0, lsl #5
	if (ioreq [loc] != NULL)
    1200:	0104fe01 	tsteq	r4, r1, lsl #28	; <UNPREDICTABLE>
    1204:	21000009 	tstcs	r0, r9
		syserror (ERESOURCE, "addv");
    1208:	00001402 	andeq	r1, r0, r2, lsl #8
	ioreq [loc] = rf;
    120c:	14103200 	ldrne	r3, [r0], #-512	; 0xfffffe00
}
    1210:	0a4e0000 	beq	1381218 <__ccfg+0x1361270>
    1214:	02980000 	addseq	r0, r8, #0
sint io (word retry, word dev, word operation, char *buf, word len) {
    1218:	fc010000 	stc2	0, cr0, [r1], {-0}
    121c:	141f2104 	ldrne	r2, [pc], #-260	; 1224 <io+0xc>
    1220:	00000000 	andeq	r0, r0, r0
    1224:	10200000 	eorne	r0, r0, r0
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1228:	8e000014 	mcrhi	0, 0, r0, cr0, cr4, {0}
    122c:	b000000a 	andlt	r0, r0, sl
    1230:	01000002 	tsteq	r0, r2
		syserror (ENODEVICE, "io");
    1234:	3502040e 	strcc	r0, [r2, #-1038]	; 0xfffffbf2
    1238:	21000009 	tstcs	r0, r9
	if (len == 0)
    123c:	0000141f 	andeq	r1, r0, pc, lsl r4
	ret = (ioreq [dev]) (operation, buf, len);
    1240:	14102000 	ldrne	r2, [r0], #-0
    1244:	0a900000 	beq	fe40124c <_estack+0xde3fc24c>
	if (ret >= 0)
    1248:	02d00000 	sbcseq	r0, r0, #0
	if (ret == -1) {
    124c:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    1250:	09500204 	ldmdbeq	r0, {r2, r9}^
		if (retry == WNONE)
    1254:	1f210000 	svcne	0x00210000
		iowait (dev, operation, retry);
    1258:	00000014 	andeq	r0, r0, r4, lsl r0
    125c:	0013f320 	andseq	pc, r3, r0, lsr #6
    1260:	000aaa00 	andeq	sl, sl, r0, lsl #20
			release;
    1264:	0002e800 	andeq	lr, r2, r0, lsl #16
	if (ret == -2) {
    1268:	040e0100 	streq	r0, [lr], #-256	; 0xffffff00
		if (retry != WNONE) {
    126c:	00096b02 	andeq	r6, r9, r2, lsl #22
    1270:	14022100 	strne	r2, [r2], #-256	; 0xffffff00
			iowait (dev, operation, retry);
    1274:	26000000 	strcs	r0, [r0], -r0
    1278:	000013f3 	strdeq	r1, [r0], -r3
			(ioreq [dev]) (NONE, buf, len);
    127c:	00000ab0 			; <UNDEFINED> instruction: 0x00000ab0
    1280:	00000ab2 			; <UNDEFINED> instruction: 0x00000ab2
    1284:	02040e01 	andeq	r0, r4, #1, 28
		(ioreq [dev]) (NONE, buf, len);
    1288:	00000986 	andeq	r0, r0, r6, lsl #19
    128c:	00140221 	andseq	r0, r4, r1, lsr #4
    1290:	34200000 	strtcc	r0, [r0], #-0
}
    1294:	c2000012 	andgt	r0, r0, #18
	if (retry != WNONE) {
    1298:	0000000a 	andeq	r0, r0, sl
		delay (-ret - 2, retry);
    129c:	01000003 	tsteq	r0, r3
    12a0:	a102041b 	tstge	r2, fp, lsl r4
    12a4:	21000009 	tstcs	r0, r9
    12a8:	00001243 	andeq	r1, r0, r3, asr #4
		release;
    12ac:	0ccb2600 	stcleq	6, cr2, [fp], {0}
    12b0:	0aec0000 	beq	ffb012b8 <_estack+0xdfafc2b8>
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    12b4:	0b160000 	bleq	5812bc <__ccfg+0x561314>
    12b8:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    12bc:	09c80204 	stmibeq	r8, {r2, r9}^
    12c0:	43250000 			; <UNDEFINED> instruction: 0x43250000
    12c4:	0a000014 	beq	131c <__pi_free+0x18>
		syserror (ERESOURCE, "mal1");
    12c8:	1800000b 	stmdane	r0, {r0, r1, r3}
    12cc:	01000003 	tsteq	r0, r3
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    12d0:	00020301 	andeq	r0, r2, r1, lsl #6
    12d4:	0012ab26 	andseq	sl, r2, r6, lsr #22
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12d8:	000b2600 	andeq	r2, fp, r0, lsl #12
	m_size (mpools [0]) = mlen - m_hdrlen;
    12dc:	000b3a00 	andeq	r3, fp, r0, lsl #20
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12e0:	04510100 	ldrbeq	r0, [r1], #-256	; 0xffffff00
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12e4:	0009ef03 	andeq	lr, r9, r3, lsl #30
    12e8:	12b61d00 	adcsne	r1, r6, #0, 26
}
    12ec:	0b260000 	bleq	9812f4 <__ccfg+0x96134c>
    12f0:	0b2a0000 	bleq	a812f8 <__ccfg+0xa61350>
    12f4:	140b0000 	strne	r0, [fp], #-0
    12f8:	33000501 	movwcc	r0, #1281	; 0x501
    12fc:	00000b95 	muleq	r0, r5, fp
    1300:	00000b40 	andeq	r0, r0, r0, asr #22
void __pi_free (aword *ch) {
    1304:	00000330 	andeq	r0, r0, r0, lsr r3
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1308:	02047201 	andeq	r7, r4, #268435456	; 0x10000000
    130c:	00131133 	andseq	r1, r3, r3, lsr r1
		syserror (EMALLOC, "malg");
    1310:	000b4000 	andeq	r4, fp, r0
    1314:	00033000 	andeq	r3, r3, r0
	mcfree [MA_NP] += m_size (ch);
    1318:	03bd0100 			; <UNDEFINED> instruction: 0x03bd0100
		m_size (ch) ^= MALLOC_UMASK;
    131c:	132d2102 			; <UNDEFINED> instruction: 0x132d2102
    1320:	20210000 	eorcs	r0, r1, r0
	mcfree [MA_NP] += m_size (ch);
    1324:	00000013 	andeq	r0, r0, r3, lsl r0
	QFREE;
    1328:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
	if (mevent [MA_NP] . nwait) {
    132c:	0000090e 	andeq	r0, r0, lr, lsl #18
    1330:	0603ed01 	streq	lr, [r3], -r1, lsl #26
		trigger ((aword)(&(mevent [MA_NP])));
    1334:	00093001 	andeq	r3, r9, r1
		mevent [MA_NP] . nwait --;
    1338:	00096c00 	andeq	r6, r9, r0, lsl #24
}
    133c:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
    1340:	3400000a 	strcc	r0, [r0], #-10
    1344:	006c6176 	rsbeq	r6, ip, r6, ror r1
    1348:	1c03ed01 	stcne	13, cr14, [r3], {1}
void kill (aword pid) {
    134c:	0000008d 	andeq	r0, r0, sp, lsl #1
		pid = (aword) __pi_curr;
    1350:	69295001 	stmdbvs	r9!, {r0, ip, lr}
	j = NULL;
    1354:	03ef0100 	mvneq	r0, #0, 2
	for_all_tasks (i) {
    1358:	00008d06 	andeq	r8, r0, r6, lsl #26
	syserror (EREQPAR, "kpi");
    135c:	00012700 	andeq	r2, r1, r0, lsl #14
    1360:	6e622900 	vmulvs.f16	s5, s4, s0	; <UNPREDICTABLE>
		if ((aword)i == pid) {
    1364:	03f00100 	mvnseq	r0, #0, 2
    1368:	0000df08 	andeq	sp, r0, r8, lsl #30
				__PCB = i->Next;
    136c:	00014500 	andeq	r4, r1, r0, lsl #10
			killev (i);
    1370:	11ed2500 	mvnne	r2, r0, lsl #10
			ufree (i);
    1374:	09300000 	ldmdbeq	r0!, {}	; <UNPREDICTABLE>
			if (i == __pi_curr)
    1378:	01e80000 	mvneq	r0, r0
    137c:	f2010000 	vhadd.s8	d0, d1, d0
				release;
    1380:	ac200203 	sfmge	f0, 4, [r0], #-12
				j->Next = i->Next;
    1384:	36000013 			; <UNDEFINED> instruction: 0x36000013
    1388:	00000009 	andeq	r0, r0, r9
    138c:	01000002 	tsteq	r0, r2
}
    1390:	950303f5 	strls	r0, [r3, #-1013]	; 0xfffffc0b
    1394:	3500000a 	strcc	r0, [r0, #-10]
    1398:	000013bb 			; <UNDEFINED> instruction: 0x000013bb
	if (size < 8)
    139c:	00000145 	andeq	r0, r0, r5, asr #2
		_size = 2;
    13a0:	11f71d00 	mvnsne	r1, r0, lsl #26
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13a4:	095a0000 	ldmdbeq	sl, {}^	; <UNPREDICTABLE>
		_size = (((aword)size) + 3) >> 2;
    13a8:	095c0000 	ldmdbeq	ip, {}^	; <UNPREDICTABLE>
		if (m_magic (chunk) != MALLOC_MAGIC)
    13ac:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
		_size = (((aword)size) + 3) >> 2;
    13b0:	2c000203 	sfmcs	f0, 4, [r0], {3}
		if (mevent [MA_NP] . nfail != 255)
    13b4:	0008a401 	andeq	sl, r8, r1, lsl #8
    13b8:	03da0100 	bicseq	r0, sl, #0, 2
			mevent [MA_NP] . nfail ++;
    13bc:	08ec0106 	stmiaeq	ip!, {r1, r2, r8}^
		mnfree [MA_NP] = 0;
    13c0:	09300000 	ldmdbeq	r0!, {}	; <UNPREDICTABLE>
    13c4:	9c010000 	stcls	0, cr0, [r1], {-0}
		if (m_magic (chunk) != MALLOC_MAGIC)
    13c8:	00000b2c 	andeq	r0, r0, ip, lsr #22
    13cc:	6c617634 	stclvs	6, cr7, [r1], #-208	; 0xffffff30
			syserror (EMALLOC, "malc");
    13d0:	03da0100 	bicseq	r0, sl, #0, 2
    13d4:	00008d1c 	andeq	r8, r0, ip, lsl sp
		if (m_size (chunk) >= _size)
    13d8:	1c500100 	ldfnee	f0, [r0], {-0}
    13dc:	dc010069 	stcle	0, cr0, [r1], {105}	; 0x69
		chunk = m_nextp (chunk)) {
    13e0:	008d0603 	addeq	r0, sp, r3, lsl #12
		m_setnextp (cc, m_nextp (chunk));
    13e4:	62290000 	eorvs	r0, r9, #0
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    13e8:	dd01006e 	stcle	0, cr0, [r1, #-440]	; 0xfffffe48
    13ec:	00df0803 	sbcseq	r0, pc, r3, lsl #16
			m_size (chunk) = _size;
    13f0:	01580000 	cmpeq	r8, r0
			cc = chunk + _size + m_hdrlen;
    13f4:	ed250000 	stc	0, cr0, [r5, #-0]
    13f8:	ec000011 	stc	0, cr0, [r0], {17}
			m_size (cc) = waste - m_hdrlen;
    13fc:	a0000008 	andge	r0, r0, r8
			QFREE;
    1400:	01000001 	tsteq	r0, r1
		mevent [MA_NP] . nfail = 0;
    1404:	200203df 	ldrdcs	r0, [r2], -pc	; <UNPREDICTABLE>
		mcfree [MA_NP] -= m_size (chunk);
    1408:	000013ac 	andeq	r1, r0, ip, lsr #7
    140c:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1410:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    1414:	0303e201 	movweq	lr, #12801	; 0x3201
		m_size (chunk) |= MALLOC_UMASK;
    1418:	00000b1a 	andeq	r0, r0, sl, lsl fp
		if (mnfree [MA_NP] > mcfree [MA_NP])
    141c:	0013bb35 	andseq	fp, r3, r5, lsr fp
		m_size (chunk) |= MALLOC_UMASK;
    1420:	00016b00 	andeq	r6, r1, r0, lsl #22
			mnfree [MA_NP] = mcfree [MA_NP];
    1424:	f71d0000 			; <UNDEFINED> instruction: 0xf71d0000
}
    1428:	1e000011 	mcrne	0, 0, r0, cr0, cr1, {0}
    142c:	20000009 	andcs	r0, r0, r9
    1430:	01000009 	tsteq	r0, r9
    1434:	000203e6 	andeq	r0, r2, r6, ror #7
    1438:	091f011e 	ldmdbeq	pc, {r1, r2, r3, r4, r8}	; <UNPREDICTABLE>
    143c:	c6010000 	strgt	r0, [r1], -r0
    1440:	096c0603 	stmdbeq	ip!, {r0, r1, r9, sl}^
aword __pi_fork (fsmcode func, aword data) {
    1444:	0a100000 	beq	40144c <__ccfg+0x3e14a4>
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1448:	9c010000 	stcls	0, cr0, [r1], {-0}
    144c:	00000b95 	muleq	r0, r5, fp
    1450:	00097e2e 	andeq	r7, r9, lr, lsr #28
		if ((j = __PCB) == NULL)
    1454:	0009ac00 	andeq	sl, r9, r0, lsl #24
	i->Next = NULL;
    1458:	000b6e00 	andeq	r6, fp, r0, lsl #28
	i->data = data;
    145c:	006a3600 	rsbeq	r3, sl, r0, lsl #12
		if ((j = __PCB) == NULL)
    1460:	8d020307 	stchi	3, cr0, [r2, #-28]	; 0xffffffe4
}
    1464:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
			for (; j->Next != NULL; j = j->Next);
    1468:	36000001 	strcc	r0, [r0], -r1
    146c:	03070069 	movweq	r0, #28777	; 0x7069
	return (aword) i;
    1470:	0003f402 	andeq	pc, r3, r2, lsl #8
    1474:	00019100 	andeq	r9, r1, r0, lsl #2
	if (mevent [MA_NP] . nwait != 255)
    1478:	be370000 	cdplt	0, 3, cr0, cr7, cr0, {0}
    147c:	ec000009 	stc	0, cr0, [r0], {9}
    1480:	36000009 	strcc	r0, [r0], -r9
		mevent [MA_NP] . nwait ++;
    1484:	0208006a 	andeq	r0, r8, #106	; 0x6a
	wait ((aword)(&(mevent [MA_NP])), state);
    1488:	00008d02 	andeq	r8, r0, r2, lsl #26
    148c:	0001a400 	andeq	sl, r1, r0, lsl #8
void diag (const char *mess, ...) {
    1490:	00693600 	rsbeq	r3, r9, r0, lsl #12
    1494:	f4020208 	vst1.8	{d0-d3}, [r2], r8
    1498:	b7000003 	strlt	r0, [r0, -r3]
	diag_disable_int (a, is);
    149c:	00000001 	andeq	r0, r0, r1
    14a0:	072c3800 	streq	r3, [ip, -r0, lsl #16]!
    14a4:	bb010000 	bllt	414ac <__ccfg+0x21504>
				d = (bc == 16) ? 10000 : 1000000000;
    14a8:	1e031403 	cdpne	4, 0, cr1, cr3, cr3, {0}
	diag_disable_int (a, is);
    14ac:	000a9301 	andeq	r9, sl, r1, lsl #6
	while (*mess != '\0') {
    14b0:	03820100 	orreq	r0, r2, #0, 2
	dgout ('\r');
    14b4:	00082c06 	andeq	r2, r8, r6, lsl #24
	dgout ('\n');
    14b8:	0008ec00 	andeq	lr, r8, r0, lsl #24
    14bc:	289c0100 	ldmcs	ip, {r8}
    14c0:	2e00000c 	cdpcs	0, 0, cr0, cr0, cr12, {0}
	diag_wait (a);
    14c4:	00000858 	andeq	r0, r0, r8, asr r8
	diag_enable_int (a, is);
    14c8:	00000886 	andeq	r0, r0, r6, lsl #17
    14cc:	00000be3 	andeq	r0, r0, r3, ror #23
}
    14d0:	01006a29 	tsteq	r0, r9, lsr #20
    14d4:	8d030389 	stchi	3, cr0, [r3, #-548]	; 0xfffffddc
    14d8:	ca000000 	bgt	14e0 <diag+0x50>
		if (*mess == '%') {
    14dc:	29000001 	stmdbcs	r0, {r0}
    14e0:	89010069 	stmdbhi	r1, {r0, r3, r5, r6}
			if (*mess == 'l') {
    14e4:	03f40303 	mvnseq	r0, #201326592	; 0xc000000
    14e8:	01dd0000 	bicseq	r0, sp, r0
				mess++;
    14ec:	1b000000 	blne	14f4 <diag+0x64>
				val = va_arg (ap, lword);
    14f0:	00000188 	andeq	r0, r0, r8, lsl #3
				bc = 32;
    14f4:	00000c0b 	andeq	r0, r0, fp, lsl #24
				bc = 16;
    14f8:	01006a29 	tsteq	r0, r9, lsr #20
			switch (*mess) {
    14fc:	8d03038f 	stchi	3, cr0, [r3, #-572]	; 0xfffffdc4
    1500:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    1504:	29000001 	stmdbcs	r0, {r0}
				dgout ('%');
    1508:	8f010069 	svchi	0x00010069
    150c:	03f40303 	mvnseq	r0, #201326592	; 0xc000000
				dgout (*mess);
    1510:	02030000 	andeq	r0, r3, #0
    1514:	33000000 	movwcc	r0, #0
			switch (*mess) {
    1518:	000012e7 	andeq	r1, r0, r7, ror #5
					v = __pi_hex_enc_table [
    151c:	0000082c 	andeq	r0, r0, ip, lsr #16
					i += 4;
    1520:	00000168 	andeq	r0, r0, r8, ror #2
					(val >> (bc - i)) & 0xf];
    1524:	02038401 	andeq	r8, r3, #16777216	; 0x1000000
    1528:	00130321 	andseq	r0, r3, r1, lsr #6
					dgout (v);
    152c:	12f62100 	rscsne	r2, r6, #0, 2
    1530:	00000000 	andeq	r0, r0, r0
				while (i < bc) {
    1534:	00082939 	andeq	r2, r8, r9, lsr r9
			mess++;
    1538:	037d0100 	cmneq	sp, #0, 2
					d /= 10;
    153c:	0390010d 	orrseq	r0, r0, #1073741827	; 0x40000003
				if ((val >> (bc - 1)) & 1) {
    1540:	039c0000 	orrseq	r0, ip, #0
    1544:	9c010000 	stcls	0, cr0, [r1], {-0}
					dgout ('-');
    1548:	00000c52 	andeq	r0, r0, r2, asr ip
    154c:	0009f12d 	andeq	pc, r9, sp, lsr #2
						val |= 0xffff0000;
    1550:	037d0100 	cmneq	sp, #0, 2
    1554:	00008d1f 	andeq	r8, r0, pc, lsl sp
    1558:	00021600 	andeq	r1, r2, r0, lsl #12
				d = (bc == 16) ? 10000 : 1000000000;
    155c:	b23a0000 	eorslt	r0, sl, #0
    1560:	01000009 	tsteq	r0, r9
    1564:	010c0310 	tsteq	ip, r0, lsl r3
					v = (word) (val / d);
    1568:	0000008d 	andeq	r0, r0, sp, lsl #1
					if (v || d == 1) break;
    156c:	0000071c 	andeq	r0, r0, ip, lsl r7
    1570:	0000082c 	andeq	r0, r0, ip, lsr #16
					d /= 10;
    1574:	0ccb9c01 	stcleq	12, cr9, [fp], {1}
				d = (bc == 16) ? 10000 : 1000000000;
    1578:	bb2d0000 	bllt	b41580 <__ccfg+0xb215d8>
					dgout (v + '0');
    157c:	01000007 	tsteq	r0, r7
    1580:	8d1e0310 	ldchi	3, cr0, [lr, #-64]	; 0xffffffc0
    1584:	34000000 	strcc	r0, [r0], #-0
					d /= 10;
    1588:	3b000002 	blcc	1598 <diag+0x108>
					val = val - (v * d);
    158c:	00667562 	rsbeq	r7, r6, r2, ror #10
					if (d == 0) break;
    1590:	2f031001 	svccs	0x00031001
					v = (word) (val / d);
    1594:	000001c9 	andeq	r0, r0, r9, asr #3
    1598:	00000247 	andeq	r0, r0, r7, asr #4
				if (bc == 16)
    159c:	6e656c3b 	mcrvs	12, 3, r6, cr5, cr11, {1}
				d = (bc == 16) ? 10000 : 1000000000;
    15a0:	03100100 	tsteq	r0, #0, 2
					val &= 0xffff;
    15a4:	00008d38 	andeq	r8, r0, r8, lsr sp
					dgout (*s);
    15a8:	0002e900 	andeq	lr, r2, r0, lsl #18
					s++;
    15ac:	06d82b00 	ldrbeq	r2, [r8], r0, lsl #22
				while (*s != '\0') {
    15b0:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    15b4:	e32b0103 			; <UNDEFINED> instruction: 0xe32b0103
			dgout (*mess++);
    15b8:	01000007 	tsteq	r0, r7
    15bc:	2701033d 	smladxcs	r1, sp, r3, r0
    15c0:	00000d44 	andeq	r0, r0, r4, asr #26
    15c4:	000007fe 	strdeq	r0, [r0], -lr
    15c8:	00000800 	andeq	r0, r0, r0, lsl #16
	__pi_seed = __pi_seed * 1103515245 + 12345;
    15cc:	15036501 	strne	r6, [r3, #-1281]	; 0xfffffaff
    15d0:	000d5821 	andeq	r5, sp, r1, lsr #16
    15d4:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    15d8:	00000873 	andeq	r0, r0, r3, ror r8
	^ entropy
    15dc:	0d02fc01 	stceq	12, cr15, [r2, #-4]
}
    15e0:	08743c01 	ldmdaeq	r4!, {r0, sl, fp, ip, sp}^
    15e4:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    15e8:	06e40d02 	strbteq	r0, [r4], r2, lsl #26
    15ec:	071c0000 	ldreq	r0, [ip, -r0]
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    15f0:	9c010000 	stcls	0, cr0, [r1], {-0}
	word cs = size + hblenb;
    15f4:	00000d44 	andeq	r0, r0, r4, asr #26
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    15f8:	00133b20 	andseq	r3, r3, r0, lsr #22
    15fc:	0006e400 	andeq	lr, r6, r0, lsl #8
	p -> length = size;
    1600:	00015000 	andeq	r5, r1, r0
}
    1604:	02f50100 	rscseq	r0, r5, #0, 2
	if (p->attributes.b.queued) {
    1608:	000d0702 	andeq	r0, sp, r2, lsl #14
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    160c:	134a2100 	movtne	r2, #41216	; 0xa100
    1610:	26000000 	strcs	r0, [r0], -r0
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1614:	00001375 	andeq	r1, r0, r5, ror r3
		p->attributes.b.queued = 0;
    1618:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    161c:	000006f6 	strdeq	r0, [r0], -r6
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1620:	0202f601 	andeq	pc, r2, #1048576	; 0x100000
	deq (p);	// Remove from queue
    1624:	00000d2c 	andeq	r0, r0, ip, lsr #26
}
    1628:	00139e21 	andseq	r9, r3, r1, lsr #28
	tfree ((address)p);
    162c:	13912100 	orrsne	r2, r1, #0, 2
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1630:	84210000 	strthi	r0, [r1], #-0
    1634:	00000013 	andeq	r0, r0, r3, lsl r0
    1638:	0012ca27 	andseq	ip, r2, r7, lsr #20
	sysassert (p->attributes.b.queued == 0, "tcv01");
    163c:	0006f600 	andeq	pc, r6, r0, lsl #12
    1640:	00070000 	andeq	r0, r7, r0
	if (q_empty (q))
    1644:	02f70100 	rscseq	r0, r7, #0, 2
    1648:	12d92102 	sbcsne	r2, r9, #-2147483648	; 0x80000000
		trigger (q);
    164c:	00000000 	andeq	r0, r0, r0
	if (p->attributes.b.urgent) {
    1650:	06a6013d 			; <UNDEFINED> instruction: 0x06a6013d
		p->u.bqueue.next = q->next;
    1654:	eb010000 	bl	4165c <__ccfg+0x216b4>
		p->u.bqueue.prev = q;
    1658:	a7010602 	strge	r0, [r1, -r2, lsl #12]
		q->next->prev = (qitem_t*) p;
    165c:	01000000 	mrseq	r0, (UNDEF: 0)
	p->attributes.b.queued = 1;
    1660:	00000d65 	andeq	r0, r0, r5, ror #26
    1664:	0061753e 	rsbeq	r7, r1, lr, lsr r5
}
    1668:	2702eb01 	strcs	lr, [r2, -r1, lsl #22]
		p->u.bqueue.prev = q->prev;
    166c:	00000d65 	andeq	r0, r0, r5, ror #26
		q->prev->next = (qitem_t*) p;
    1670:	26040700 	strcs	r0, [r4], -r0, lsl #14
		q->prev = (qitem_t*) p;
    1674:	1a000002 	bne	1684 <dispose+0x8>
    1678:	00076901 	andeq	r6, r7, r1, lsl #18
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    167c:	02d40100 	sbcseq	r0, r4, #0, 2
	deq (p);	// Soft dequeue, timer and hook left intact
    1680:	009b0109 	addseq	r0, fp, r9, lsl #2
	switch (dv) {
    1684:	06900000 	ldreq	r0, [r0], r0
    1688:	06e40000 	strbteq	r0, [r4], r0
    168c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1690:	00000dc1 	andeq	r0, r0, r1, asr #27
			p->attributes.b.urgent = 1;
    1694:	0006b32d 	andeq	fp, r6, sp, lsr #6
    1698:	02d40100 	sbcseq	r0, r4, #0, 2
			verify_ses (p, "dispose ses");
    169c:	0000a721 	andeq	sl, r0, r1, lsr #14
    16a0:	00037500 	andeq	r7, r3, r0, lsl #10
    16a4:	61753b00 	cmnvs	r5, r0, lsl #22
    16a8:	02d40100 	sbcseq	r0, r4, #0, 2
    16ac:	000dc12f 	andeq	ip, sp, pc, lsr #2
			verify_phy (p, "dispose phy");
    16b0:	00038800 	andeq	r8, r3, r0, lsl #16
    16b4:	13583300 	cmpne	r8, #0, 6
}
    16b8:	06b00000 	ldrteq	r0, [r0], r0
			enq (oqueues [p->attributes.b.phys], p);
    16bc:	01380000 	teqeq	r8, r0
			p->attributes.b.urgent = 1;
    16c0:	e6010000 	str	r0, [r1], -r0
    16c4:	67210202 	strvs	r0, [r1, -r2, lsl #4]!
			verify_phy (p, "dispose phy");
    16c8:	00000013 	andeq	r0, r0, r3, lsl r0
    16cc:	1a040700 	bne	1032d4 <__ccfg+0xe332c>
    16d0:	1a000002 	bne	16e0 <dispose+0x64>
    16d4:	000ab901 	andeq	fp, sl, r1, lsl #18
    16d8:	018a0100 	orreq	r0, sl, r0, lsl #2
    16dc:	00a70106 	adceq	r0, r7, r6, lsl #2
			enq (oqueues [p->attributes.b.phys], p);
    16e0:	06400000 	strbeq	r0, [r0], -r0
    16e4:	06900000 	ldreq	r0, [r0], r0
}
    16e8:	9c010000 	stcls	0, cr0, [r1], {-0}
			rlp (p);
    16ec:	00000e0f 	andeq	r0, r0, pc, lsl #28
}
    16f0:	0008802d 	andeq	r8, r8, sp, lsr #32
    16f4:	018a0100 	orreq	r0, sl, r0, lsl #2
    16f8:	00009b26 	andeq	r9, r0, r6, lsr #22
    16fc:	00039b00 	andeq	r9, r3, r0, lsl #22
    1700:	58453f00 	stmdapl	r5, {r8, r9, sl, fp, ip, sp}^
    1704:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1708:	0f461d01 	svceq	0x00461d01
	if (b->attributes.b.outgoing) {
    170c:	06540000 	ldrbeq	r0, [r4], -r0
	b = header (p);
    1710:	065e0000 	ldrbeq	r0, [lr], -r0
	if (b->attributes.b.outgoing) {
    1714:	9c010000 	stcls	0, cr0, [r1], {-0}
		verify_ses (b, "tcv02");
    1718:	1e001a01 	vmlane.f32	s2, s0, s2
    171c:	00083601 	andeq	r3, r8, r1, lsl #12
    1720:	01380100 	teqeq	r8, r0, lsl #2
    1724:	00052c06 	andeq	r2, r5, r6, lsl #24
    1728:	00064000 	andeq	r4, r6, r0
		verify_plg (b, tcv_out, "tcv03");
    172c:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    1730:	4000000e 	andmi	r0, r0, lr
    1734:	00000959 	andeq	r0, r0, r9, asr r9
    1738:	08013a01 	stmdaeq	r1, {r0, r9, fp, ip, sp}
    173c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1740:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    1744:	54554541 	ldrbpl	r4, [r5], #-1345	; 0xfffffabf
    1748:	01680100 	cmneq	r8, r0, lsl #2
    174c:	00057a01 	andeq	r7, r5, r1, lsl #20
		dispose (b, plugins [b->attributes.b.plugin] ->
    1750:	01202300 			; <UNDEFINED> instruction: 0x01202300
}
    1754:	c5400000 	strbgt	r0, [r0, #-0]
		dispose (b, plugins [b->attributes.b.plugin] ->
    1758:	01000007 	tsteq	r0, r7
		rlp (b);
    175c:	9b0b0147 	blls	2c1c80 <__ccfg+0x2a1cd8>
}
    1760:	04000000 	streq	r0, [r0], #-0
		rlp (b);
    1764:	42000004 	andmi	r0, r0, #4
    1768:	00001410 	andeq	r1, r0, r0, lsl r4
    176c:	00000598 	muleq	r0, r8, r5
    1770:	000005a0 	andeq	r0, r0, r0, lsr #11
    1774:	75060d05 	strvc	r0, [r6, #-3333]	; 0xfffff2fb
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1778:	2100000e 	tstcs	r0, lr
    177c:	0000141f 	andeq	r1, r0, pc, lsl r4
    1780:	14104200 	ldrne	r4, [r0], #-512	; 0xfffffe00
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1784:	05a40000 	streq	r0, [r4, #0]!
	va_start (ap, plid);
    1788:	05ac0000 	streq	r0, [ip, #0]!
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    178c:	0f050000 	svceq	0x00050000
    1790:	000e8f06 	andeq	r8, lr, r6, lsl #30
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1794:	141f2100 	ldrne	r2, [pc], #-256	; 179c <tcv_open+0x24>
    1798:	42000000 	andmi	r0, r0, #0
    179c:	000013f3 	strdeq	r1, [r0], -r3
    17a0:	000005f2 	strdeq	r0, [r0], -r2
			syserror (ENODEVICE, "tcv04");
    17a4:	000005fa 	strdeq	r0, [r0], -sl
		syserror (EMALLOC, "tcv05");
    17a8:	a9061705 	stmdbge	r6, {r0, r2, r8, r9, sl, ip}
	attp.b.outgoing = 1;
    17ac:	2100000e 	tstcs	r0, lr
    17b0:	00001402 	andeq	r1, r0, r2, lsl #8
    17b4:	13f34300 	mvnsne	r4, #0, 6
    17b8:	05fe0000 	ldrbeq	r0, [lr, #0]!
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    17bc:	06060000 	streq	r0, [r6], -r0
		if (descriptors [fd] == NULL)
    17c0:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
    17c4:	14022106 	strne	r2, [r2], #-262	; 0xfffffefa
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    17c8:	00000000 	andeq	r0, r0, r0
		return ERROR;
    17cc:	f6011e00 			; <UNDEFINED> instruction: 0xf6011e00
}
    17d0:	01000008 	tsteq	r0, r8
    17d4:	0406012b 	streq	r0, [r6], #-299	; 0xfffffed5
    17d8:	2c000005 	stccs	0, cr0, [r0], {5}
	s->attpattern.b.session = fd;
    17dc:	01000005 	tsteq	r0, r5
    17e0:	000ef19c 	muleq	lr, ip, r1
	descriptors [fd] = s;
    17e4:	0f253300 	svceq	0x00253300
	q_init (&(s->rqueue));
    17e8:	050c0000 	streq	r0, [ip, #-0]
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    17ec:	01080000 	mrseq	r0, (UNDEF: 8)
    17f0:	32010000 	andcc	r0, r1, #0
    17f4:	38212c01 	stmdacc	r1!, {r0, sl, fp, sp}
    17f8:	0000000f 	andeq	r0, r0, pc
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    17fc:	4d011e00 	stcmi	14, cr1, [r1, #-0]
    1800:	01000008 	tsteq	r0, r8
    1804:	c406011e 	strgt	r0, [r6], #-286	; 0xfffffee2
	descriptors [fd] = s;
    1808:	04000004 	streq	r0, [r0], #-4
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    180c:	01000005 	tsteq	r0, r5
    1810:	000f259c 	muleq	pc, ip, r5	; <UNPREDICTABLE>
	if (s == NULL)
    1814:	0f253300 	svceq	0x00253300
		syserror (EMALLOC, "tcv05");
    1818:	04d60000 	ldrbeq	r0, [r6], #0
    181c:	00e80000 	rsceq	r0, r8, r0
    1820:	25010000 	strcs	r0, [r1, #-0]
    1824:	38352c01 	ldmdacc	r5!, {r0, sl, fp, sp}
    1828:	4300000f 	movwmi	r0, #15
    182c:	00000004 	andeq	r0, r0, r4
    1830:	09524400 	ldmdbeq	r2, {sl, lr}^
    1834:	17010000 	strne	r0, [r1, -r0]
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1838:	df011501 	svcle	0x00011501
	    (plugins [ord] != NULL && plugins [ord] != pl))
    183c:	03000000 	movweq	r0, #0
    1840:	00000f46 	andeq	r0, r0, r6, asr #30
    1844:	6c65643e 	cfstrdvs	mvd6, [r5], #-248	; 0xffffff08
	plugins [ord] = pl;
    1848:	01170100 	tsteq	r7, r0, lsl #2
	return 0;
    184c:	0000a722 	andeq	sl, r0, r2, lsr #14
		return ERROR;
    1850:	ce450000 	cdpgt	0, 4, cr0, cr5, cr0, {0}
}
    1854:	01000005 	tsteq	r0, r5
    1858:	a714010e 	ldrge	r0, [r4, -lr, lsl #2]
	verify_fds (fd, "tcv10");
    185c:	03000000 	movweq	r0, #0
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    1860:	000aad46 	andeq	sl, sl, r6, asr #26
	verify_fds (fd, "tcv10");
    1864:	14ee0100 	strbtne	r0, [lr], #256	; 0x100
    1868:	000f7a03 	andeq	r7, pc, r3, lsl #20
    186c:	69704700 	ldmdbvs	r0!, {r8, r9, sl, lr}^
	verify_plg (b, tcv_frm, "tcv11");
    1870:	f201006e 	vhadd.s8	q0, <illegal reg q0.5>, q15
	b = q_first (rq);
    1874:	00008d06 	andeq	r8, r0, r6, lsl #26
	if (q_end (b, rq)) {
    1878:	69474800 	stmdbvs	r7, {fp, lr}^
		if (state != WNONE) {
    187c:	0bf40100 	bleq	ffd01c84 <_estack+0xdfcfcc84>
    1880:	0000008d 	andeq	r0, r0, sp, lsl #1
			when (rq, state);
    1884:	01490000 	mrseq	r0, (UNDEF: 73)
			release;
    1888:	000009e3 	andeq	r0, r0, r3, ror #19
	deq (b);	// Dequeue the packet ...
    188c:	01069801 	tsteq	r6, r1, lsl #16
    1890:	00000470 	andeq	r0, r0, r0, ror r4
	p = ((address)(b + 1));
    1894:	000004c4 	andeq	r0, r0, r4, asr #9
	verify_plg (b, tcv_frm, "tcv11");
    1898:	10249c01 	eorne	r9, r4, r1, lsl #24
    189c:	654a0000 	strbvs	r0, [sl, #-0]
    18a0:	98010063 	stmdals	r1, {r0, r1, r5, r6}
    18a4:	0000a71a 	andeq	sl, r0, sl, lsl r7
    18a8:	00045600 	andeq	r5, r4, r0, lsl #12
    18ac:	006d4a00 	rsbeq	r4, sp, r0, lsl #20
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    18b0:	242a9801 	strtcs	r9, [sl], #-2049	; 0xfffff7ff
    18b4:	69000010 	stmdbvs	r0, {r4}
		b->length - b->u.pointers.head - b->u.pointers.tail;
    18b8:	28000004 	stmdacs	r0, {r2}
    18bc:	000011ed 	andeq	r1, r0, sp, ror #3
	b->u.pointers.tail =
    18c0:	0000047c 	andeq	r0, r0, ip, ror r4
}
    18c4:	0000047e 	andeq	r0, r0, lr, ror r4
		return NULL;
    18c8:	2202a801 	andcs	sl, r2, #65536	; 0x10000
    18cc:	00001410 	andeq	r1, r0, r0, lsl r4
    18d0:	0000047e 	andeq	r0, r0, lr, ror r4
    18d4:	00000098 	muleq	r0, r8, r0
    18d8:	d903b801 	stmdble	r3, {r0, fp, ip, sp, pc}
	verify_fds (fd, "tcv16");
    18dc:	2100000f 	tstcs	r0, pc
								Boolean urg) {
    18e0:	0000141f 	andeq	r1, r0, pc, lsl r4
    18e4:	14102200 	ldrne	r2, [r0], #-512	; 0xfffffe00
	verify_fds (fd, "tcv16");
    18e8:	04840000 	streq	r0, [r4], #0
    18ec:	00b80000 	adcseq	r0, r8, r0
    18f0:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
	verify_pld (s, tcv_frm, "tcv17");
    18f4:	000ff303 	andeq	pc, pc, r3, lsl #6
    18f8:	141f2100 	ldrne	r2, [pc], #-256	; 1900 <tcv_wnps+0x24>
    18fc:	22000000 	andcs	r0, r0, #0
    1900:	000013f3 	strdeq	r1, [r0], -r3
    1904:	0000049c 	muleq	r0, ip, r4
    1908:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    190c:	0d03b801 	stceq	8, cr11, [r3, #-4]
    1910:	21000010 	tstcs	r0, r0, lsl r0
	ptrs.head = (word) fd;
    1914:	00001402 	andeq	r1, r0, r2, lsl #8
	ptrs.tail = (word) urg;
    1918:	13f34300 	mvnsne	r4, #0, 6
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    191c:	04a20000 	strteq	r0, [r2], #0
    1920:	04a40000 	strteq	r0, [r4], #0
		if (state != WNONE) {
    1924:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    1928:	14022103 	strne	r2, [r2], #-259	; 0xfffffefd
}
    192c:	00000000 	andeq	r0, r0, r0
			when (eid, state);
    1930:	01d60407 	bicseq	r0, r6, r7, lsl #8
    1934:	01490000 	mrseq	r0, (UNDEF: 73)
			release;
    1938:	00000978 	andeq	r0, r0, r8, ror r9
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    193c:	01067201 	tsteq	r6, r1, lsl #4
	...
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    1948:	10ca9c01 	sbcne	r9, sl, r1, lsl #24
    194c:	734a0000 	movtvc	r0, #40960	; 0xa000
    1950:	72010074 	andvc	r0, r1, #116	; 0x74
    1954:	0000a718 	andeq	sl, r0, r8, lsl r7
    1958:	00048700 	andeq	r8, r4, r0, lsl #14
		if (state != WNONE) {
    195c:	65734a00 	ldrbvs	r4, [r3, #-2560]!	; 0xfffff600
    1960:	7201006e 	andvc	r0, r1, #110	; 0x6e
			tmwait (state);
    1964:	00024428 	andeq	r4, r2, r8, lsr #8
    1968:	00049a00 	andeq	r9, r4, r0, lsl #20
	b->attributes = s->attpattern;
    196c:	61764a00 	cmnvs	r6, r0, lsl #20
		b->attributes.b.urgent = 1;
    1970:	7201006c 	andvc	r0, r1, #108	; 0x6c
    1974:	0000fc35 	andeq	pc, r0, r5, lsr ip	; <UNPREDICTABLE>
	b->u.pointers.head = ptrs.head;
    1978:	0004b800 	andeq	fp, r4, r0, lsl #16
	b->u.pointers.tail = length;
    197c:	05e94b00 	strbeq	r4, [r9, #2816]!	; 0xb00
	return (address) (b + 1);
    1980:	74010000 	strvc	r0, [r1], #-0
    1984:	0000c90e 	andeq	ip, r0, lr, lsl #18
    1988:	00030500 	andeq	r0, r3, r0, lsl #10
    198c:	4c000000 	stcmi	0, cr0, [r0], {-0}
    1990:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1994:	00017801 	andeq	r7, r1, r1, lsl #16
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1998:	4d000000 	stcmi	0, cr0, [r0, #-0]
    199c:	00001220 	andeq	r1, r0, r0, lsr #4
    19a0:	00000000 	andeq	r0, r0, r0
	verify_fph (phy, "tcv23");
    19a4:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    19a8:	42038101 	andmi	r8, r3, #1073741824	; 0x40000000
    19ac:	00001201 	andeq	r1, r0, r1, lsl #4
	...
	return (physical [phy]) (opt, arg);
    19b8:	b9127e01 	ldmdblt	r2, {r0, r9, sl, fp, ip, sp, lr}
    19bc:	2f000010 	svccs	0x00000010
    19c0:	00001213 	andeq	r1, r0, r3, lsl r2
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    19c4:	122a2800 	eorne	r2, sl, #0, 16
	...
		if (opt == PHYSOPT_PLUGINFO) {
    19d0:	84010000 	strhi	r0, [r1], #-0
			if (fd >= TCV_MAX_PLUGS)
    19d4:	014e0003 	cmpeq	lr, r3
			if ((p = plugins [fd]) == NULL)
    19d8:	00000a77 	andeq	r0, r0, r7, ror sl
    19dc:	01066201 	tsteq	r6, r1, lsl #4
}
    19e0:	00000e44 	andeq	r0, r0, r4, asr #28
		if (fd >= TCV_MAX_PHYS)
    19e4:	00000e74 	andeq	r0, r0, r4, ror lr
		return physinfo [fd];
    19e8:	01499c01 	cmpeq	r9, r1, lsl #24
    19ec:	00000588 	andeq	r0, r0, r8, lsl #11
	verify_fds (fd, "tcv22");
    19f0:	01064f01 	tsteq	r6, r1, lsl #30
	...
    19fc:	11079c01 	tstne	r7, r1, lsl #24
    1a00:	51280000 			; <UNDEFINED> instruction: 0x51280000
}
    1a04:	00000012 	andeq	r0, r0, r2, lsl r0
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    1a08:	00000000 	andeq	r0, r0, r0
    1a0c:	01000000 	mrseq	r0, (UNDEF: 0)
			return 0;
    1a10:	4900035f 	stmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9}
    1a14:	0005bf01 	andeq	fp, r5, r1, lsl #30
    1a18:	063b0100 	ldrteq	r0, [fp], -r0, lsl #2
    1a1c:	00043001 	andeq	r3, r4, r1
    1a20:	00047000 	andeq	r7, r4, r0
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    1a24:	2e9c0100 	fmlcse	f0, f4, f0
    1a28:	4a000011 	bmi	1a74 <tcvp_new+0x50>
	if (dsp != TCV_DSP_PASS) {
    1a2c:	3b010064 	blcc	41bc4 <__ccfg+0x21c1c>
		if (ses == NONE)
    1a30:	0000df1c 	andeq	sp, r0, ip, lsl pc
			syserror (EREQPAR, "tcv26");
    1a34:	0004d600 	andeq	sp, r4, r0, lsl #12
		verify_fds (ses, "tcv27");
    1a38:	01490000 	mrseq	r0, (UNDEF: 73)
    1a3c:	0000067f 	andeq	r0, r0, pc, ror r6
    1a40:	01062b01 	tsteq	r6, r1, lsl #22
    1a44:	000003f4 	strdeq	r0, [r0], -r4
    1a48:	00000430 	andeq	r0, r0, r0, lsr r4
		if ((p = apb (size)) != NULL) {
    1a4c:	11559c01 	cmpne	r5, r1, lsl #24
    1a50:	644a0000 	strbvs	r0, [sl], #-0
		return NULL;
    1a54:	1b2b0100 	blne	ac1e5c <__ccfg+0xaa1eb4>
			p->attributes = descriptors [ses] -> attpattern;
    1a58:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
			dispose (p, dsp);
    1a5c:	000004f4 	strdeq	r0, [r0], -r4
			p->attributes = descriptors [ses] -> attpattern;
    1a60:	b5014900 	strlt	r4, [r1, #-2304]	; 0xfffff700
			p->attributes.b.outgoing = 0;
    1a64:	01000008 	tsteq	r0, r8
			dispose (p, dsp);
    1a68:	c8010620 	stmdagt	r1, {r5, r9, sl}
			return (address)(p + 1);
    1a6c:	f2000003 	vhadd.s8	d0, d0, d3
    1a70:	01000003 	tsteq	r0, r3
	if ((p = apb (size)) != NULL)
    1a74:	00117c9c 	mulseq	r1, ip, ip
    1a78:	006e4a00 	rsbeq	r4, lr, r0, lsl #20
		return (address)(p + 1);
    1a7c:	b81c2001 	ldmdalt	ip, {r0, sp}
    1a80:	12000000 	andne	r0, r0, #0
    1a84:	00000005 	andeq	r0, r0, r5
    1a88:	09600149 	stmdbeq	r0!, {r0, r3, r6, r8}^
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a8c:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1a90:	039c0106 	orrseq	r0, ip, #-2147483647	; 0x80000001
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a94:	03c80000 	biceq	r0, r8, #0
    1a98:	9c010000 	stcls	0, cr0, [r1], {-0}
		syserror (EREQPAR, "tcv28");
    1a9c:	000011b7 			; <UNDEFINED> instruction: 0x000011b7
		syserror (EMALLOC, "tcv29");
    1aa0:	01006e4f 	tsteq	r0, pc, asr #28
	physical [phy] = ps;
    1aa4:	00b81c19 	adcseq	r1, r8, r9, lsl ip
	physinfo [phy] = info;
    1aa8:	50010000 	andpl	r0, r1, r0
    1aac:	0011b743 	andseq	fp, r1, r3, asr #14
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1ab0:	0003b000 	andeq	fp, r3, r0
    1ab4:	0003ba00 	andeq	fp, r3, r0, lsl #20
    1ab8:	031b0100 	tsteq	fp, #0, 2
		syserror (EMALLOC, "tcv29");
    1abc:	0011c521 	andseq	ip, r1, r1, lsr #10
    1ac0:	50000000 	andpl	r0, r0, r0
	q_init (q);
    1ac4:	00000a8b 	andeq	r0, r0, fp, lsl #21
}
    1ac8:	01141501 	tsteq	r4, r1, lsl #10
    1acc:	0011d003 	andseq	sp, r1, r3
    1ad0:	006e5100 	rsbeq	r5, lr, r0, lsl #2
    1ad4:	b82b1501 	stmdalt	fp!, {r0, r8, sl, ip}
    1ad8:	00000000 	andeq	r0, r0, r0
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1adc:	00066b52 	andeq	r6, r6, r2, asr fp
	verify_fph (phy, "tcv30");
    1ae0:	011a0300 	tsteq	sl, r0, lsl #6
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ae4:	ed030135 	stfs	f0, [r3, #-212]	; 0xffffff2c
    1ae8:	53000011 	movwpl	r0, #17
	verify_fph (phy, "tcv30");
    1aec:	00000a7c 	andeq	r0, r0, ip, ror sl
    1af0:	48011a03 	stmdami	r1, {r0, r1, r9, fp, ip}
    1af4:	00000073 	andeq	r0, r0, r3, ror r0
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1af8:	08bc5400 	ldmeq	ip!, {sl, ip, lr}
    1afc:	5b030000 	blpl	c1b04 <__ccfg+0xa1b5c>
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1b00:	54030135 	strpl	r0, [r3], #-309	; 0xfffffecb
    1b04:	000005dc 	ldrdeq	r0, [r0], -ip
		if (plugins [plg] == NULL)
    1b08:	01355003 	teqeq	r5, r3
    1b0c:	09975503 	ldmibeq	r7, {r0, r1, r8, sl, ip, lr}
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1b10:	bf0f0000 	svclt	0x000f0000
}
    1b14:	00730101 	rsbseq	r0, r3, r1, lsl #2
    1b18:	20030000 	andcs	r0, r3, r0
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1b1c:	16000012 			; <UNDEFINED> instruction: 0x16000012
    1b20:	00000a2f 	andeq	r0, r0, pc, lsr #20
    1b24:	730ec10f 	movwvc	ip, #57615	; 0xe10f
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1b28:	00000000 	andeq	r0, r0, r0
    1b2c:	00096754 	andeq	r6, r9, r4, asr r7
    1b30:	01900f00 	orrseq	r0, r0, r0, lsl #30
    1b34:	a6540301 	ldrbge	r0, [r4], -r1, lsl #6
    1b38:	0f000005 	svceq	0x00000005
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1b3c:	0301017b 	movweq	r0, #4475	; 0x117b
	len -= (ap.head + ap.tail);
    1b40:	00081452 	andeq	r1, r8, r2, asr r4
    1b44:	03660a00 	cmneq	r6, #0, 20
    1b48:	51030101 	tstpl	r3, r1, lsl #2
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1b4c:	53000012 	movwpl	r0, #18
    1b50:	000007eb 	andeq	r0, r0, fp, ror #15
    1b54:	1f03660a 	svcne	0x0003660a
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1b58:	00000073 	andeq	r0, r0, r3, ror r0
    1b5c:	093f5600 	ldmdbeq	pc!, {r9, sl, ip, lr}	; <UNPREDICTABLE>
    1b60:	4c020000 	stcmi	0, cr0, [r2], {-0}
	return 1;
    1b64:	03010101 	movweq	r0, #4353	; 0x1101
    1b68:	0008d854 	andeq	sp, r8, r4, asr r8
    1b6c:	01c40200 	biceq	r0, r4, r0, lsl #4
    1b70:	ec570301 	mrrc	3, 0, r0, r7, cr1
    1b74:	02000006 	andeq	r0, r0, #6
	verify_fph (phy, "tcv32");
    1b78:	730101ad 	movwvc	r0, #4525	; 0x11ad
    1b7c:	03000000 	movweq	r0, #0
    1b80:	00063f56 	andeq	r3, r6, r6, asr pc
    1b84:	02450e00 	subeq	r0, r5, #0, 28
    1b88:	58030101 	stmdapl	r3, {r0, r8}
    1b8c:	00000611 	andeq	r0, r0, r1, lsl r6
	oq = oqueues [phy];
    1b90:	01022c0e 	tsteq	r2, lr, lsl #24
	b = q_first (oq);
    1b94:	00007301 	andeq	r7, r0, r1, lsl #6
	if (q_end (b, oq)) {
    1b98:	fc520300 	mrrc2	3, 0, r0, r2, cr0
	*len = b->length;
    1b9c:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
	deq (b);	// Dequeue the packet ...
    1ba0:	010101dc 	ldrdeq	r0, [r1, -ip]
}
    1ba4:	0012ab03 	andseq	sl, r2, r3, lsl #22
		return NULL;
    1ba8:	05b65300 	ldreq	r5, [r6, #768]!	; 0x300
    1bac:	dc0e0000 	stcle	0, cr0, [lr], {-0}
    1bb0:	00731f01 	rsbseq	r1, r3, r1, lsl #30
    1bb4:	56000000 	strpl	r0, [r0], -r0
	verify_fph (phy, "tcv33");
    1bb8:	0000077b 	andeq	r0, r0, fp, ror r7
    1bbc:	01010f0b 	tsteq	r1, fp, lsl #30
    1bc0:	b8540301 	ldmdalt	r4, {r0, r8, r9}^
    1bc4:	0c000006 	stceq	0, cr0, [r0], {6}
    1bc8:	030101ed 	movweq	r0, #4589	; 0x11ed
    1bcc:	00098454 	andeq	r8, r9, r4, asr r4
	oq = oqueues [phy];
    1bd0:	01d60c00 	bicseq	r0, r6, r0, lsl #24
	b = q_first (oq);
    1bd4:	8d520301 	ldclhi	3, cr0, [r2, #-4]
		return NULL;
    1bd8:	06000006 	streq	r0, [r0], -r6
	return (address)(b + 1);
    1bdc:	01010440 	tsteq	r1, r0, asr #8
}
    1be0:	0012e703 	andseq	lr, r2, r3, lsl #14
    1be4:	07f85300 	ldrbeq	r5, [r8, r0, lsl #6]!
    1be8:	40060000 	andmi	r0, r6, r0
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1bec:	00732404 	rsbseq	r2, r3, r4, lsl #8
	verify_plg (b, tcv_xmt, "tcv34");
    1bf0:	52000000 	andpl	r0, r0, #0
	hblock_t *b = header (pkt);
    1bf4:	00000626 	andeq	r0, r0, r6, lsr #12
	verify_plg (b, tcv_xmt, "tcv34");
    1bf8:	01039106 	tsteq	r3, r6, lsl #2
    1bfc:	13110301 	tstne	r1, #67108864	; 0x4000000
    1c00:	f8530000 			; <UNDEFINED> instruction: 0xf8530000
    1c04:	06000007 	streq	r0, [r0], -r7
    1c08:	73170391 	tstvc	r7, #1140850690	; 0x44000002
    1c0c:	53000000 	movwpl	r0, #0
    1c10:	00000752 	andeq	r0, r0, r2, asr r7
	dispose (b, plugins [b->attributes.b.plugin] ->
    1c14:	2a039106 	bcs	e6034 <__ccfg+0xc608c>
}
    1c18:	00000073 	andeq	r0, r0, r3, ror r0
	dispose (b, plugins [b->attributes.b.plugin] ->
    1c1c:	0a425200 	beq	1096424 <__ccfg+0x107647c>
    1c20:	0c060000 	stceq	0, cr0, [r6], {-0}
    1c24:	03010103 	movweq	r0, #4355	; 0x1103
}
    1c28:	0000133b 	andeq	r1, r0, fp, lsr r3
    while(1)
    1c2c:	0007f853 	andeq	pc, r7, r3, asr r8	; <UNPREDICTABLE>
{
    1c30:	030c0600 	movweq	r0, #50688	; 0xc600
    SetupTrimDevice();
    1c34:	00007318 	andeq	r7, r0, r8, lsl r3
    pui32Src = &_etext;
    1c38:	07525300 	ldrbeq	r5, [r2, -r0, lsl #6]
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1c3c:	0c060000 	stceq	0, cr0, [r6], {-0}
    __asm("    ldr     r0, =_bss\n"
    1c40:	00732b03 	rsbseq	r2, r3, r3, lsl #22
    1c44:	52000000 	andpl	r0, r0, #0
    1c48:	00000743 	andeq	r0, r0, r3, asr #14
    1c4c:	0101e706 	tsteq	r1, r6, lsl #14
    1c50:	13580301 	cmpne	r8, #67108864	; 0x4000000
   main();
    1c54:	f8530000 			; <UNDEFINED> instruction: 0xf8530000
    FaultISR();
    1c58:	06000007 	streq	r0, [r0], -r7
        *pui32Dest++ = *pui32Src++;
    1c5c:	731901e7 	tstvc	r9, #-1073741767	; 0xc0000039
    1c60:	00000000 	andeq	r0, r0, r0
    1c64:	00088652 	andeq	r8, r8, r2, asr r6
    1c68:	01ba0600 			; <UNDEFINED> instruction: 0x01ba0600
    1c6c:	75030101 	strvc	r0, [r3, #-257]	; 0xfffffeff
    1c70:	53000013 	movwpl	r0, #19
    1c74:	000007f8 	strdeq	r0, [r0], -r8
    1c78:	1501ba06 	strne	fp, [r1, #-2566]	; 0xfffff5fa
static byte get_byte () {
    1c7c:	00000073 	andeq	r0, r0, r3, ror r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c80:	092e5200 	stmdbeq	lr!, {r9, ip, lr}
    1c84:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c88:	03010101 	movweq	r0, #4353	; 0x1101
    1c8c:	000013ac 	andeq	r1, r0, ip, lsr #7
		if (ee_inp)
    1c90:	0007f853 	andeq	pc, r7, r3, asr r8	; <UNPREDICTABLE>
			b |= 1;
    1c94:	01390600 	teqeq	r9, r0, lsl #12
    1c98:	0000731b 	andeq	r7, r0, fp, lsl r3
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c9c:	06e05300 	strbteq	r5, [r0], r0, lsl #6
	for (b = 0, i = 0; i < 8; i++) {
    1ca0:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
}
    1ca4:	00732e01 	rsbseq	r2, r3, r1, lsl #28
    1ca8:	cc530000 	mragt	r0, r3, acc0
    1cac:	06000006 	streq	r0, [r0], -r6
static void put_byte (byte b) {
    1cb0:	731b013a 	tstvc	fp, #-2147483634	; 0x8000000e
    1cb4:	00000000 	andeq	r0, r0, r0
    1cb8:	00089152 	andeq	r9, r8, r2, asr r1
    1cbc:	02840400 	addeq	r0, r4, #0, 8
		if (b & 0x80)
    1cc0:	c9030101 	stmdbgt	r3, {r0, r8}
    1cc4:	53000013 	movwpl	r0, #19
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cc8:	0000075f 	andeq	r0, r0, pc, asr r7
	for (i = 0; i < 8; i++) {
    1ccc:	1e028404 	cdpne	4, 0, cr8, cr2, cr4, {0}
		b <<= 1;
    1cd0:	00000073 	andeq	r0, r0, r3, ror r0
	for (i = 0; i < 8; i++) {
    1cd4:	058e5200 	streq	r5, [lr, #512]	; 0x200
}
    1cd8:	06040000 	streq	r0, [r4], -r0
    1cdc:	03010102 	movweq	r0, #4354	; 0x1102
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1ce0:	000013f3 	strdeq	r1, [r0], -r3
    1ce4:	00075f53 	andeq	r5, r7, r3, asr pc
	put_byte (cmd);
    1ce8:	02060400 	andeq	r0, r6, #0, 8
    1cec:	00007323 	andeq	r7, r0, r3, lsr #6
}
    1cf0:	0a655300 	beq	19568f8 <__ccfg+0x1936950>
    1cf4:	06040000 	streq	r0, [r4], -r0
static void wwait (word st, word del) {
    1cf8:	00733702 	rsbseq	r3, r3, r2, lsl #14
    1cfc:	52000000 	andpl	r0, r0, #0
    1d00:	000008ca 	andeq	r0, r0, sl, asr #17
	while (dopen && (rdsr () & 1)) {
    1d04:	01015404 	tsteq	r1, r4, lsl #8
    1d08:	14100301 	ldrne	r0, [r0], #-769	; 0xfffffcff
    1d0c:	5f530000 	svcpl	0x00530000
    1d10:	04000007 	streq	r0, [r0], #-7
	put_byte (CMD_RDSR);
    1d14:	73190154 	tstvc	r9, #84, 2
	r = get_byte ();
    1d18:	00000000 	andeq	r0, r0, r0
    1d1c:	0009cf52 	andeq	ip, r9, r2, asr pc
	while (dopen && (rdsr () & 1)) {
    1d20:	011e0400 	tsteq	lr, r0, lsl #8
}
    1d24:	2d030101 	stfcss	f0, [r3, #-4]
		if (st == WNONE)
    1d28:	53000014 	movwpl	r0, #20
    1d2c:	0000075f 	andeq	r0, r0, pc, asr r7
			mdelay (1);
    1d30:	17011e04 	strne	r1, [r1, -r4, lsl #28]
    1d34:	00000073 	andeq	r0, r0, r3, ror r0
			delay (del, st);
    1d38:	07945600 	ldreq	r5, [r4, r0, lsl #12]
    1d3c:	63090000 	movwvs	r0, #36864	; 0x9000
			release;
    1d40:	03010104 	movweq	r0, #4356	; 0x1104
    1d44:	0006fc56 	andeq	pc, r6, r6, asr ip	; <UNPREDICTABLE>
    1d48:	04540900 	ldrbeq	r0, [r4], #-2304	; 0xfffff700
static void ready () {
    1d4c:	56030101 	strpl	r0, [r3], -r1, lsl #2
	if (dopen) {
    1d50:	00000715 	andeq	r0, r0, r5, lsl r7
		wwait (WNONE, 1);
    1d54:	01022a09 	tsteq	r2, r9, lsl #20
    1d58:	50520301 	subspl	r0, r2, r1, lsl #6
    1d5c:	0900000a 	stmdbeq	r0, {r1, r3}
	dstat = 0;
    1d60:	01010168 	tsteq	r1, r8, ror #2
}
    1d64:	00146b03 	andseq	r6, r4, r3, lsl #22
    1d68:	07215300 	streq	r5, [r1, -r0, lsl #6]!
    1d6c:	68090000 	stmdavs	r9, {}	; <UNPREDICTABLE>
	udelay (1);
    1d70:	00731f01 	rsbseq	r1, r3, r1, lsl #30
    1d74:	56000000 	strpl	r0, [r0], -r0
	udelay (1);
    1d78:	0000065b 	andeq	r0, r0, fp, asr r6
		dopen = DOPEN_TEMP;
    1d7c:	01013209 	tsteq	r1, r9, lsl #4
    1d80:	44590301 	ldrbmi	r0, [r9], #-769	; 0xfffffcff
    1d84:	0000000d 	andeq	r0, r0, sp
    1d88:	00000000 	andeq	r0, r0, r0
static void cclose () {
    1d8c:	01000000 	mrseq	r0, (UNDEF: 0)
	if (dopen == DOPEN_TEMP) {
    1d90:	0d58359c 	cfldr64eq	mvdx3, [r8, #-624]	; 0xfffffd90
    1d94:	05250000 	streq	r0, [r5, #-0]!
		wwait (WNONE, 1);
    1d98:	00000000 	andeq	r0, r0, r0
    1d9c:	0000121f 	andeq	r1, r0, pc, lsl r2
	cmd_0 (CMD_DP);
    1da0:	081a0003 	ldmdaeq	sl, {r0, r1}
    1da4:	01040000 	mrseq	r0, (UNDEF: 4)
		dopen = 0;
    1da8:	00000181 	andeq	r0, r0, r1, lsl #3
}
    1dac:	000b510c 	andeq	r5, fp, ip, lsl #2
word ee_open () {
    1db0:	00040600 	andeq	r0, r4, r0, lsl #12
	ready ();
    1db4:	00067800 	andeq	r7, r6, r0, lsl #16
	dopen = DOPEN_PERM;
    1db8:	00000000 	andeq	r0, r0, r0
    1dbc:	0019a000 	andseq	sl, r9, r0
}
    1dc0:	06010200 	streq	r0, [r1], -r0, lsl #4
	if (dopen) {
    1dc4:	000003e5 	andeq	r0, r0, r5, ror #7
    1dc8:	46050202 	strmi	r0, [r5], -r2, lsl #4
		dopen = DOPEN_TEMP;
    1dcc:	03000004 	movweq	r0, #4
		cclose ();
    1dd0:	00002520 	andeq	r2, r0, r0, lsr #10
}
    1dd4:	3f182803 	svccc	0x00182803
int ser_in (word st, char *buf, int len) {
    1dd8:	02000000 	andeq	r0, r0, #0
    1ddc:	00b40504 	adcseq	r0, r4, r4, lsl #10
	if (len == 0)
    1de0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
	if (__inpline == NULL) {
    1de4:	0000af05 	andeq	sl, r0, r5, lsl #30
		if ((prcs = running (__inserial)) == 0) {
    1de8:	239b0300 	orrscs	r0, fp, #0, 6
    1dec:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
			prcs = runthread (__inserial);
    1df0:	00005918 	andeq	r5, r0, r8, lsl r9
    1df4:	08010200 	stmdaeq	r1, {r9}
			if (prcs == 0) {
    1df8:	000003e3 	andeq	r0, r0, r3, ror #7
				npwait (st);
    1dfc:	00279103 	eoreq	r9, r7, r3, lsl #2
		release;
    1e00:	19310300 	ldmdbne	r1!, {r8, r9}
		join (prcs, st);
    1e04:	0000006c 	andeq	r0, r0, ip, rrx
    1e08:	8a070202 	bhi	1c2618 <__ccfg+0x1a2670>
	if (*__inpline == NULL) // bin cmd
    1e0c:	03000002 	movweq	r0, #2
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1e10:	00002333 	andeq	r2, r0, r3, lsr r3
	if (prcs >= len)
    1e14:	7f193403 	svcvc	0x00193403
		prcs = len-1;
    1e18:	02000000 	andeq	r0, r0, #0
	memcpy (buf, __inpline, prcs);
    1e1c:	007e0704 	rsbseq	r0, lr, r4, lsl #14
    1e20:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1e24:	00007907 	andeq	r7, r0, r7, lsl #18
	ufree (__inpline);
    1e28:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
	__inpline = NULL;
    1e2c:	00746e69 	rsbseq	r6, r4, r9, ror #28
	if (*buf) // if it's NULL, it's a bin cmd
    1e30:	83070402 	movwhi	r0, #29698	; 0x7402
		buf [prcs] = '\0';
    1e34:	03000000 	movweq	r0, #0
}
    1e38:	0000036c 	andeq	r0, r0, ip, ror #6
		prcs = strlen (__inpline);
    1e3c:	a71b2804 	ldrge	r2, [fp, -r4, lsl #16]
    1e40:	05000000 	streq	r0, [r0, #-0]
		return 0;
    1e44:	000000e2 	andeq	r0, r0, r2, ror #1
    1e48:	bf000b04 	svclt	0x00000b04
    1e4c:	06000000 	streq	r0, [r0], -r0
int ser_outf (word st, const char *m, ...) {
    1e50:	000004f7 	strdeq	r0, [r0], -r7
    1e54:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
	if ((prcs = running (__outserial)) != 0) {
    1e58:	07000100 	streq	r0, [r0, -r0, lsl #2]
    1e5c:	00e40304 	rsceq	r0, r4, r4, lsl #6
		join (prcs, st);
    1e60:	63040000 	movwvs	r0, #16384	; 0x4000
    1e64:	00009b18 	andeq	r9, r0, r8, lsl fp
		release;
    1e68:	047d0300 	ldrbteq	r0, [sp], #-768	; 0xfffffd00
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1e6c:	26050000 	strcs	r0, [r5], -r0
    1e70:	00004d12 	andeq	r4, r0, r2, lsl sp
    1e74:	227c0300 	rsbscs	r0, ip, #0, 6
		umwait (st);
    1e78:	27050000 	strcs	r0, [r5, -r0]
    1e7c:	00006012 	andeq	r6, r0, r2, lsl r0
	if (runstrand (__outserial, buf) == 0) {
    1e80:	00d90800 	sbcseq	r0, r9, r0, lsl #16
    1e84:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
    1e88:	03000000 	movweq	r0, #0
		ufree (buf);
    1e8c:	000009ca 	andeq	r0, r0, sl, asr #19
		npwait (st);
    1e90:	33122805 	tstcc	r2, #327680	; 0x50000
}
    1e94:	03000000 	movweq	r0, #0
    1e98:	000013fc 	strdeq	r1, [r0], -ip
    1e9c:	4d122b05 	vldrmi	d2, [r2, #-20]	; 0xffffffec
    1ea0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
int ser_inf (word st, const char *fmt, ...) {
    1ea4:	000000fb 	strdeq	r0, [r0], -fp
    1ea8:	0022cd03 	eoreq	ip, r2, r3, lsl #26
	if (fmt == NULL)
    1eac:	122c0500 	eorne	r0, ip, #0, 10
	if (__inpline == NULL) {
    1eb0:	00000073 	andeq	r0, r0, r3, ror r0
		if ((prcs = running (__inserial)) == 0) {
    1eb4:	00010c08 	andeq	r0, r1, r8, lsl #24
    1eb8:	02ef0300 	rsceq	r0, pc, #0, 6
			prcs = runthread (__inserial);
    1ebc:	2d050000 	stccs	0, cr0, [r5, #-0]
    1ec0:	00007312 	andeq	r7, r0, r2, lsl r3
			if (prcs == 0) {
    1ec4:	03640300 	cmneq	r4, #0, 6
				npwait (st);
    1ec8:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
		release;
    1ecc:	00013510 	andeq	r3, r1, r0, lsl r5
		join (prcs, st);
    1ed0:	d9040a00 	stmdble	r4, {r9, fp}
    1ed4:	0b000000 	bleq	1edc <ser_inf+0x38>
	va_start (ap, fmt);
    1ed8:	09320508 	ldmdbeq	r2!, {r3, r8, sl}
	prcs = vscan (__inpline, fmt, ap);
    1edc:	000001c9 	andeq	r0, r0, r9, asr #3
    1ee0:	0003180c 	andeq	r1, r3, ip, lsl #16
	ufree (__inpline);
    1ee4:	07340500 	ldreq	r0, [r4, -r0, lsl #10]!
	__inpline = NULL;
    1ee8:	000000fb 	strdeq	r0, [r0], -fp
}
    1eec:	00070101 	andeq	r0, r7, r1, lsl #2
    1ef0:	00009e0c 	andeq	r9, r0, ip, lsl #28
    1ef4:	03350500 	teqeq	r5, #0, 10
		return 0;
    1ef8:	000000fb 	strdeq	r0, [r0], -fp
    1efc:	00060101 	andeq	r0, r6, r1, lsl #2
    1f00:	0002bf0c 	andeq	fp, r2, ip, lsl #30
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    1f04:	03360500 	teqeq	r6, #0, 10
    1f08:	000000fb 	strdeq	r0, [r0], -fp
    1f0c:	00050101 	andeq	r0, r5, r1, lsl #2
	RF_cmdFs.frequency = 
    1f10:	00048c0c 	andeq	r8, r4, ip, lsl #24
}
    1f14:	03370500 	teqeq	r7, #0, 10
    1f18:	000000fb 	strdeq	r0, [r0], -fp
    1f1c:	00040101 	andeq	r0, r4, r1, lsl #2
    1f20:	0004850c 	andeq	r8, r4, ip, lsl #10
static int option (int opt, address val) {
    1f24:	03380500 	teqeq	r8, #0, 10
    1f28:	000000fb 	strdeq	r0, [r0], -fp
    1f2c:	00000401 	andeq	r0, r0, r1, lsl #8
    1f30:	0004760d 	andeq	r7, r4, sp, lsl #12
    1f34:	073a0500 	ldreq	r0, [sl, -r0, lsl #10]!
    1f38:	000000fb 	strdeq	r0, [r0], -fp
    1f3c:	002b0d01 	eoreq	r0, fp, r1, lsl #26
    1f40:	3c050000 	stccc	0, cr0, [r5], {-0}
    1f44:	0000fb03 	andeq	pc, r0, r3, lsl #22
    1f48:	720d0200 	andvc	r0, sp, #0, 4
    1f4c:	05000000 	streq	r0, [r0, #-0]
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    1f50:	00fb033d 	rscseq	r0, fp, sp, lsr r3
    1f54:	0d030000 	stceq	0, cr0, [r3, #-0]
			goto RVal;
    1f58:	0000014f 	andeq	r0, r0, pc, asr #2
			_BIS (dstate, DSTATE_RXON);
    1f5c:	0c083f05 	stceq	15, cr3, [r8], {5}
    1f60:	04000001 	streq	r0, [r0], #-1
	int ret = 0;
    1f64:	04d40300 	ldrbeq	r0, [r4], #768	; 0x300
			p_trigger (drvprcs, qevent);
    1f68:	41050000 	mrsmi	r0, (UNDEF: 5)
    1f6c:	00013b03 	andeq	r3, r1, r3, lsl #22
    1f70:	01c90900 	biceq	r0, r9, r0, lsl #18
    1f74:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    1f78:	05000003 	streq	r0, [r0, #-3]
    1f7c:	01d51a43 	bicseq	r1, r5, r3, asr #20
    1f80:	01010000 	mrseq	r0, (UNDEF: 1)
    1f84:	00038e0e 	andeq	r8, r3, lr, lsl #28
    1f88:	0e450500 	cdpeq	5, 4, cr0, cr5, cr0, {0}
    1f8c:	000001f6 	strdeq	r0, [r0], -r6
}
    1f90:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
			_BIC (dstate, DSTATE_RXON);
    1f94:	000001fc 	strdeq	r0, [r0], -ip
    1f98:	ec080102 	stfs	f0, [r8], {2}
			statid = (val == NULL) ? 0 : *val;
    1f9c:	08000003 	stmdaeq	r0, {r0, r1}
    1fa0:	000001fc 	strdeq	r0, [r0], -ip
	int ret = 0;
    1fa4:	0003a40e 	andeq	sl, r3, lr, lsl #8
			ret = (int) statid;
    1fa8:	1e450500 	cdpne	5, 4, cr0, cr5, cr0, {0}
	if (val != NULL)
    1fac:	000001f6 	strdeq	r0, [r0], -r6
		*val = ret;
    1fb0:	080b0101 	stmdaeq	fp, {r0, r8}
			ret = rbuffl + 2;
    1fb4:	47098f06 	strmi	r8, [r9, -r6, lsl #30]
    1fb8:	0d000002 	stceq	0, cr0, [r0, #-8]
			if (val != NULL) {
    1fbc:	000019fd 	strdeq	r1, [r0], -sp
				memcpy (val, &rxstat,
    1fc0:	730b9006 	movwvc	r9, #45062	; 0xb006
    1fc4:	00000000 	andeq	r0, r0, r0
				memset (&rxstat, 0, 
    1fc8:	0006b30d 	andeq	fp, r6, sp, lsl #6
    1fcc:	08910600 	ldmeq	r1, {r9, sl}
			if (val == NULL)
    1fd0:	000000d9 	ldrdeq	r0, [r0], -r9
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    1fd4:	15be0d04 	ldrne	r0, [lr, #3332]!	; 0xd04
    1fd8:	92060000 	andls	r0, r6, #0
				utimer_set (bckf_timer, *val);
    1fdc:	00010710 	andeq	r0, r1, r0, lsl r7
    1fe0:	03000600 	movweq	r0, #1536	; 0x600
    1fe4:	00000493 	muleq	r0, r3, r4
			for (ret = 0; ret < 8; ret++)
    1fe8:	16039306 	strne	r9, [r3], -r6, lsl #6
				if (RF_cmdPropRadioDivSetup.txPower
    1fec:	0f000002 	svceq	0x00000002
					== patable [ret])
    1ff0:	00000247 	andeq	r0, r0, r7, asr #4
				if (RF_cmdPropRadioDivSetup.txPower
    1ff4:	0000025e 	andeq	r0, r0, lr, asr r2
			for (ret = 0; ret < 8; ret++)
    1ff8:	210e0010 	tstcs	lr, r0, lsl r0
    1ffc:	06000000 	streq	r0, [r0], -r0
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2000:	02530f99 	subseq	r0, r3, #612	; 0x264
    2004:	01010000 	mrseq	r0, (UNDEF: 1)
    2008:	9107010b 	tstls	r7, fp, lsl #2
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    200c:	00029609 	andeq	r9, r2, r9, lsl #12
    2010:	050c0c00 	streq	r0, [ip, #-3072]	; 0xfffff400
			_BIS (dstate, DSTATE_IRST);
    2014:	93070000 	movwls	r0, #28672	; 0x7000
    2018:	0000fb07 	andeq	pc, r0, r7, lsl #22
    201c:	01070100 	mrseq	r0, (UNDEF: 23)
			ret = (int) channel;
    2020:	001c0c00 	andseq	r0, ip, r0, lsl #24
			goto RVal;
    2024:	94070000 	strls	r0, [r7], #-0
				(*val > 7) ? 7 : *val;
    2028:	0000fb03 	andeq	pc, r0, r3, lsl #22
    202c:	00010100 	andeq	r0, r1, r0, lsl #2
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2030:	9d030000 	stcls	0, cr0, [r3, #-0]
    2034:	07000002 	streq	r0, [r0, -r2]
			plugch ();
    2038:	026c0396 	rsbeq	r0, ip, #1476395010	; 0x58000002
			_BIS (dstate, DSTATE_IRST);
    203c:	96080000 	strls	r0, [r8], -r0
    2040:	0f000002 	svceq	0x00000002
			ret = (int) vrate;
    2044:	000002a2 	andeq	r0, r0, r2, lsr #5
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2048:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    204c:	a7080010 	smladge	r8, r0, r0, r0
    2050:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    2054:	00000357 	andeq	r0, r0, r7, asr r3
    2058:	b2179c07 	andslt	r9, r7, #1792	; 0x700
    205c:	01000002 	tsteq	r0, r2
    2060:	00e50f01 	rsceq	r0, r5, r1, lsl #30
    2064:	02d00000 	sbcseq	r0, r0, #0
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2068:	00100000 	andseq	r0, r0, r0
    206c:	0002c508 	andeq	ip, r2, r8, lsl #10
    2070:	03d50e00 	bicseq	r0, r5, #0, 28
    2074:	06080000 	streq	r0, [r8], -r0
			syserror (EREQPAR, "cc13 op");
    2078:	0002d013 	andeq	sp, r2, r3, lsl r0
    207c:	0e010100 	adfeqs	f0, f1, f0
    2080:	00000134 	andeq	r0, r0, r4, lsr r1
    2084:	0c0ec306 	stceq	3, cr12, [lr], {6}
    2088:	01000001 	tsteq	r0, r1
    208c:	05481101 	strbeq	r1, [r8, #-257]	; 0xfffffeff
    2090:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
    2094:	02fe1001 	rscseq	r1, lr, #1
    2098:	040a0000 	streq	r0, [sl], #-0
    209c:	00000304 	andeq	r0, r0, r4, lsl #6
    20a0:	03100112 	tsteq	r0, #-2147483644	; 0x80000004
    20a4:	d9130000 	ldmdble	r3, {}	; <UNPREDICTABLE>
    20a8:	00000000 	andeq	r0, r0, r0
    20ac:	0002030f 	andeq	r0, r2, pc, lsl #6
    20b0:	00031b00 	andeq	r1, r3, r0, lsl #22
static void issue_cmd (lword cmd) {
    20b4:	08001000 	stmdaeq	r0, {ip}
    20b8:	00000310 	andeq	r0, r0, r0, lsl r3
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20bc:	0004e414 	andeq	lr, r4, r4, lsl r4
    20c0:	017f0900 	cmneq	pc, r0, lsl #18
    20c4:	00031b16 	andeq	r1, r3, r6, lsl fp
		if (res != 0x86)
    20c8:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
			syserror (EHARDWARE, "hang ic0");
    20cc:	000003c1 	andeq	r0, r0, r1, asr #7
    20d0:	14018209 	strne	r8, [r1], #-521	; 0xfffffdf7
		if (cnt-- == 0) {
    20d4:	00000118 	andeq	r0, r0, r8, lsl r1
			diag ("HUP %lx %lx", cmd, res);
    20d8:	11140101 	tstne	r4, r1, lsl #2
    20dc:	09000005 	stmdbeq	r0, {r0, r2}
			syserror (EHARDWARE, "hang ic0");
    20e0:	0c0e02d8 	sfmeq	f0, 4, [lr], {216}	; 0xd8
		udelay (1);
    20e4:	01000001 	tsteq	r0, r1
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20e8:	09081501 	stmdbeq	r8, {r0, r8, sl, ip}
}
    20ec:	74090303 	strvc	r0, [r9], #-771	; 0xfffffcfd
    20f0:	16000003 	strne	r0, [r0], -r3
    20f4:	0000361b 	andeq	r3, r0, fp, lsl r6
    20f8:	07030709 	streq	r0, [r3, -r9, lsl #14]
static void rx_de () {
    20fc:	000000d9 	ldrdeq	r0, [r0], -r9
	if ((dstate & DSTATE_RXAC) == 0)
    2100:	060b1600 	streq	r1, [fp], -r0, lsl #12
    2104:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2108:	011d0803 	tsteq	sp, r3, lsl #16
	_BIC (dstate, DSTATE_RXAC);
    210c:	00040000 	andeq	r0, r4, r0
    2110:	00027511 	andeq	r7, r2, r1, lsl r5
}
    2114:	03090900 	movweq	r0, #39168	; 0x9900
    2118:	00034d03 	andeq	r4, r3, r3, lsl #26
    211c:	05581700 	ldrbeq	r1, [r8, #-1792]	; 0xfffff900
static void rf_off () {
    2120:	09300000 	ldmdbeq	r0!, {}	; <UNPREDICTABLE>
	if ((dstate & DSTATE_RFON) == 0)
    2124:	e408030b 	str	r0, [r8], #-779	; 0xfffffcf5
    2128:	16000003 	strne	r0, [r0], -r3
	IntDisable (INT_RFC_CPE_0);
    212c:	00001512 	andeq	r1, r0, r2, lsl r5
    2130:	08031409 	stmdaeq	r3, {r0, r3, sl, ip}
    2134:	000000d9 	ldrdeq	r0, [r0], -r9
	RFCAdi3VcoLdoVoltageMode (false);
    2138:	032d1600 			; <UNDEFINED> instruction: 0x032d1600
	RFCSynthPowerDown ();
    213c:	15090000 	strne	r0, [r9, #-0]
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2140:	00d90803 	sbcseq	r0, r9, r3, lsl #16
    2144:	16020000 	strne	r0, [r2], -r0
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2148:	0000054b 	andeq	r0, r0, fp, asr #10
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    214c:	0b031609 	bleq	c7978 <__ccfg+0xa79d0>
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2150:	000002f1 	strdeq	r0, [r0], -r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2154:	0f881604 	svceq	0x00881604
    2158:	17090000 	strne	r0, [r9, -r0]
    215c:	011d0903 	tsteq	sp, r3, lsl #18
	_BIC (dstate, DSTATE_RFON);
    2160:	16080000 	strne	r0, [r8], -r0
    2164:	000004dd 	ldrdeq	r0, [r0], -sp
}
    2168:	0f031809 	svceq	0x00031809
    216c:	000003e4 	andeq	r0, r0, r4, ror #7
    2170:	0328160c 			; <UNDEFINED> instruction: 0x0328160c
    2174:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    2178:	03f41503 	mvnseq	r1, #12582912	; 0xc00000
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    217c:	002c0000 	eoreq	r0, ip, r0
    2180:	0003740f 	andeq	r7, r3, pc, lsl #8
    2184:	0003f400 	andeq	pc, r3, r0, lsl #8
		if (cmd->status == tstat)
    2188:	00941800 	addseq	r1, r4, r0, lsl #16
		if (timeout-- == 0) {
    218c:	00030000 	andeq	r0, r3, r0
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2190:	0381040a 	orreq	r0, r1, #167772160	; 0xa000000
    2194:	63110000 	tstvs	r1, #0
    2198:	09000005 	stmdbeq	r0, {r0, r2}
			syserror (EHARDWARE, "rt2");
    219c:	811b031c 	tsthi	fp, ip, lsl r3
    21a0:	14000003 	strne	r0, [r0], #-3
		udelay (1);
    21a4:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
		if (cmd->status == tstat)
    21a8:	14031e09 	strne	r1, [r3], #-3593	; 0xfffff1f7
}
    21ac:	00000416 	andeq	r0, r0, r6, lsl r4
    21b0:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    21b4:	000003fa 	strdeq	r0, [r0], -sl
    21b8:	0000110e 	andeq	r1, r0, lr, lsl #2
static void rf_on () {
    21bc:	131d0a00 	tstne	sp, #0, 20
    21c0:	000000d9 	ldrdeq	r0, [r0], -r9
	OSCHF_TurnOnXosc();
    21c4:	1f0e0101 	svcne	0x000e0101
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    21c8:	0a000003 	beq	21dc <rf_on.part.0+0x28>
    21cc:	00ea1a1e 	rsceq	r1, sl, lr, lsl sl
    21d0:	01010000 	mrseq	r0, (UNDEF: 1)
    21d4:	0004c00e 	andeq	ip, r4, lr
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21d8:	241e0a00 	ldrcs	r0, [lr], #-2560	; 0xfffff600
    21dc:	000000ea 	andeq	r0, r0, sl, ror #1
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21e0:	d40e0101 	strle	r0, [lr], #-257	; 0xfffffeff
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    21e4:	0a000000 	beq	21ec <rf_on.part.0+0x38>
	issue_cmd (
    21e8:	04161422 	ldreq	r1, [r6], #-1058	; 0xfffffbde
    21ec:	01010000 	mrseq	r0, (UNDEF: 1)
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    21f0:	000ad803 	andeq	sp, sl, r3, lsl #16
    21f4:	0f440a00 	svceq	0x00440a00
    21f8:	00000460 	andeq	r0, r0, r0, ror #8
   pPatchTab[80] = 0;
    21fc:	0466040a 	strbteq	r0, [r6], #-1034	; 0xfffffbf6
   } while (--nIterations);
    2200:	01190000 	tsteq	r9, r0
   pPatchTab[53] = 2;
    2204:	0000008d 	andeq	r0, r0, sp, lsl #1
    2208:	00000480 	andeq	r0, r0, r0, lsl #9
   pPatchTab[55] = 3;
    220c:	00008d13 	andeq	r8, r0, r3, lsl sp
   pPatchTab[110] = 4;
    2210:	01f61300 	mvnseq	r1, r0, lsl #6
   pPatchTab[107] = 5;
    2214:	8d130000 	ldchi	0, cr0, [r3, #-0]
   pPatchTab[65] = 6;
    2218:	00000000 	andeq	r0, r0, r0
    221c:	00033e1a 	andeq	r3, r3, sl, lsl lr
   pPatchTab[57] = 1;
    2220:	070c0100 	streq	r0, [ip, -r0, lsl #2]
   pIrqPatch[1] = _IRQ_PATCH_0;
    2224:	020c0305 	andeq	r0, ip, #335544320	; 0x14000000
   const uint32_t *pS = patchGenfskRfe;
    2228:	891b2000 	ldmdbhi	fp, {sp}
      t2 = *pS++;
    222c:	0100000c 	tsteq	r0, ip
      t4 = *pS++;
    2230:	010c0710 	tsteq	ip, r0, lsl r7
      t6 = *pS++;
    2234:	05010000 	streq	r0, [r1, #-0]
      t8 = *pS++;
    2238:	00000403 	andeq	r0, r0, r3, lsl #8
      *pD++ = t1;
    223c:	04461a20 	strbeq	r1, [r6], #-2592	; 0xfffff5e0
      *pD++ = t2;
    2240:	1a010000 	bne	42248 <__ccfg+0x222a0>
      *pD++ = t3;
    2244:	2003050d 	andcs	r0, r3, sp, lsl #10
      *pD++ = t5;
    2248:	0f200001 	svceq	0x00200001
      *pD++ = t7;
    224c:	00000454 	andeq	r0, r0, r4, asr r4
   } while (--nIterations);
    2250:	000004bf 			; <UNDEFINED> instruction: 0x000004bf
    2254:	00009418 	andeq	r9, r0, r8, lsl r4
      *pD++ = t8;
    2258:	1c000000 	stcne	0, cr0, [r0], {-0}
   } while (--nIterations);
    225c:	00000b10 	andeq	r0, r0, r0, lsl fp
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2260:	af141e01 	svcge	0x00141e01
   *pD++ = t2;
    2264:	05000004 	streq	r0, [r0, #-4]
   *pD++ = t3;
    2268:	00012403 	andeq	r2, r1, r3, lsl #8
   *pD++ = t4;
    226c:	01da1a20 	bicseq	r1, sl, r0, lsr #20
   *pD++ = t5;
    2270:	22010000 	andcs	r0, r1, #0
    2274:	14030513 	strne	r0, [r3], #-1299	; 0xfffffaed
	RFCAdi3VcoLdoVoltageMode (true);
    2278:	1a200002 	bne	802288 <__ccfg+0x7e22e0>
    227c:	00000407 	andeq	r0, r0, r7, lsl #8
       	RFCRfTrimSet (&rfTrim);
    2280:	050d2701 	streq	r2, [sp, #-1793]	; 0xfffff8ff
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2284:	00023003 	andeq	r3, r2, r3
    2288:	041c1a20 	ldreq	r1, [ip], #-2592	; 0xfffff5e0
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    228c:	30010000 	andcc	r0, r1, r0
    2290:	10030507 	andne	r0, r3, r7, lsl #10
	issue_cmd ((lword)&cmd_srt);
    2294:	1a200002 	bne	8022a4 <__ccfg+0x7e22fc>
    2298:	0000042a 	andeq	r0, r0, sl, lsr #8
	issue_cmd ((lword)&RF_cmdFs);
    229c:	050f3101 	streq	r3, [pc, #-257]	; 21a3 <wait_cmd.constprop.0+0x27>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    22a0:	00021203 	andeq	r1, r2, r3, lsl #4
    22a4:	04381a20 	ldrteq	r1, [r8], #-2592	; 0xfffff5e0
    22a8:	31010000 	mrscc	r0, (UNDEF: 1)
	IntEnable (INT_RFC_CPE_0);
    22ac:	1c030519 	cfstr32ne	mvfx0, [r3], {25}
	_BIC (dstate, DSTATE_IRST);
    22b0:	0f200002 	svceq	0x00200002
    22b4:	00000129 	andeq	r0, r0, r9, lsr #2
    22b8:	00000527 	andeq	r0, r0, r7, lsr #10
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22bc:	00009418 	andeq	r9, r0, r8, lsl r4
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22c0:	1b000300 	blne	2ec8 <vscan+0x224>
	IntEnable (INT_RFC_CPE_0);
    22c4:	000009bf 			; <UNDEFINED> instruction: 0x000009bf
    22c8:	170a3601 	strne	r3, [sl, -r1, lsl #12]
}
    22cc:	01000005 	tsteq	r0, r5
	IntEnable (INT_RFC_CPE_0);
    22d0:	02200305 	eoreq	r0, r0, #335544320	; 0x14000000
    22d4:	201a2000 	andscs	r2, sl, r0
    22d8:	01000003 	tsteq	r0, r3
    22dc:	03050c3f 	movweq	r0, #23615	; 0x5c3f
    22e0:	000042a5 	andeq	r4, r0, r5, lsr #5
    22e4:	00032f1a 	andeq	r2, r3, sl, lsl pc
    22e8:	0d450100 	stfeqe	f0, [r5, #-0]
    22ec:	00000305 	andeq	r0, r0, r5, lsl #6
    22f0:	020b0000 	andeq	r0, fp, #0
    22f4:	7a094901 	bvc	254700 <__ccfg+0x234758>
    22f8:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    22fc:	00000b04 	andeq	r0, r0, r4, lsl #22
    2300:	fb074a01 	blx	1d4b0e <__ccfg+0x1b4b66>
    2304:	00000000 	andeq	r0, r0, r0
    2308:	000cc80d 	andeq	ip, ip, sp, lsl #16
    230c:	074b0100 	strbeq	r0, [fp, -r0, lsl #2]
    2310:	000000fb 	strdeq	r0, [r0], -fp
    2314:	03030001 	movweq	r0, #12289	; 0x3001
    2318:	0100000c 	tsteq	r0, ip
    231c:	0556034c 	ldrbeq	r0, [r6, #-844]	; 0xfffffcb4
    2320:	7a0f0000 	bvc	3c2328 <__ccfg+0x3a2380>
    2324:	96000005 	strls	r0, [r0], -r5
    2328:	18000005 	stmdane	r0, {r0, r2}
    232c:	00000094 	muleq	r0, r4, r0
    2330:	291c0000 	ldmdbcs	ip, {}	; <UNPREDICTABLE>
static void rx_int_enable () {
    2334:	0100000c 	tsteq	r0, ip
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2338:	0586114e 	streq	r1, [r6, #334]	; 0x14e
    233c:	03050000 	movweq	r0, #20480	; 0x5000
    2340:	2000012c 	andcs	r0, r0, ip, lsr #2
    2344:	0005b80f 	andeq	fp, r5, pc, lsl #16
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2348:	0005b800 	andeq	fp, r5, r0, lsl #16
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    234c:	00941800 	addseq	r1, r4, r0, lsl #16
    2350:	00000000 	andeq	r0, r0, r0
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2354:	011d040a 	tsteq	sp, sl, lsl #8
    2358:	251d0000 	ldrcs	r0, [sp, #-0]
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    235c:	0100000b 	tsteq	r0, fp
    2360:	a80f02bd 	stmdage	pc, {r0, r2, r3, r4, r5, r7, r9}	; <UNPREDICTABLE>
    2364:	05000005 	streq	r0, [r0, #-5]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2368:	00013403 	andeq	r3, r1, r3, lsl #8
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    236c:	011d0f20 	tsteq	sp, r0, lsr #30
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2370:	05e10000 	strbeq	r0, [r1, #0]!
		if (db->status == DATA_ENTRY_FINISHED) {
    2374:	94180000 	ldrls	r0, [r8], #-0
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2378:	00000000 	andeq	r0, r0, r0
    237c:	0bbe1d00 	bleq	fef89784 <_estack+0xdef84784>
			nr++;
    2380:	c2010000 	andgt	r0, r1, #0
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2384:	05d10e02 	ldrbeq	r0, [r1, #3586]	; 0xe02
    2388:	03050000 	movweq	r0, #20480	; 0x5000
    238c:	20000130 	andcs	r0, r0, r0, lsr r1
    2390:	000c0c1d 	andeq	r0, ip, sp, lsl ip
				__dp [pl + 1] = __dp [pl] - 128;
    2394:	02c20100 	sbceq	r0, r2, #0, 2
				pl = __dp [1] + 2;
    2398:	0005d126 	andeq	sp, r5, r6, lsr #2
				__dp [pl + 1] = __dp [pl] - 128;
    239c:	28030500 	stmdacs	r3, {r8, sl}
    23a0:	1e200001 	cdpne	0, 2, cr0, cr0, cr1, {0}
				__dp [pl] = 0;
    23a4:	000c5501 	andeq	r5, ip, r1, lsl #10
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    23a8:	052f0100 	streq	r0, [pc, #-256]!	; 22b0 <rf_on.part.0+0xfc>
    23ac:	010c0107 	tsteq	ip, r7, lsl #2
    23b0:	15cc0000 	strbne	r0, [ip]
			db->status = DATA_ENTRY_PENDING;
    23b4:	15f00000 	ldrbne	r0, [r0, #0]!
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    23b8:	9c010000 	stcls	0, cr0, [r1], {-0}
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    23bc:	0bf2011f 	bleq	ffc82840 <_estack+0xdfc7d840>
				diag ("BAD RX");
    23c0:	82010000 	andhi	r0, r1, #0
    23c4:	90010604 	andls	r0, r1, r4, lsl #12
	if (nr) {
    23c8:	cc000014 	stcgt	0, cr0, [r0], {20}
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23cc:	01000015 	tsteq	r0, r5, lsl r0
}
    23d0:	00070e9c 	muleq	r7, ip, lr
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23d4:	0c242000 	stceq	0, cr2, [r4], #-0
    23d8:	82010000 	andhi	r0, r1, #0
    23dc:	070e1804 	streq	r1, [lr, -r4, lsl #16]
}
    23e0:	05380000 	ldreq	r0, [r8, #-0]!
    23e4:	22210000 	eorcs	r0, r1, #0
    23e8:	006c6176 	rsbeq	r6, ip, r6, ror r1
    23ec:	08048701 	stmdaeq	r4, {r0, r8, r9, sl, pc}
    23f0:	0000010c 	andeq	r0, r0, ip, lsl #2
    23f4:	00000578 	andeq	r0, r0, r8, ror r5
    23f8:	00706123 	rsbseq	r6, r0, r3, lsr #2
    23fc:	0a048801 	beq	124408 <__ccfg+0x104460>
    2400:	000000c1 	andeq	r0, r0, r1, asr #1
thread (cc1350_driver)
    2404:	224c9102 	subcs	r9, ip, #-2147483648	; 0x80000000
    2408:	01006362 	tsteq	r0, r2, ror #6
    240c:	ef070489 	svc	0x00070489
    2410:	b7000000 	strlt	r0, [r0, -r0]
    2414:	22000005 	andcs	r0, r0, #5
		if (dstate & DSTATE_IRST) {
    2418:	8a010076 	bhi	425f8 <__ccfg+0x22650>
    241c:	00d90704 	sbcseq	r0, r9, r4, lsl #14
    2420:	05eb0000 	strbeq	r0, [fp, #0]!
			rf_off ();
    2424:	69240000 	stmdbvs	r4!, {}	; <UNPREDICTABLE>
			_BIC (dstate,
    2428:	8b010073 	blhi	425fc <__ccfg+0x22654>
    242c:	00fb0704 	rscseq	r0, fp, r4, lsl #14
		if (dstate & DSTATE_RXAC) {
    2430:	d8250000 	stmdale	r5!, {}	; <UNPREDICTABLE>
    2434:	0100000c 	tsteq	r0, ip
			if ((dstate & DSTATE_RXON) == 0)
    2438:	5c0104b0 	cfstrspl	mvf0, [r1], {176}	; 0xb0
				rx_de ();
    243c:	26000015 			; <UNDEFINED> instruction: 0x26000015
		if (paylen == 0) {
    2440:	0000151c 	andeq	r1, r0, ip, lsl r5
    2444:	00001538 	andeq	r1, r0, r8, lsr r5
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2448:	000006c0 	andeq	r0, r0, r0, asr #13
    244c:	01006922 	tsteq	r0, r2, lsr #18
    2450:	ef0a049f 	svc	0x000a049f
    2454:	14000000 	strne	r0, [r0], #-0
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2458:	00000006 	andeq	r0, r0, r6
    245c:	00063027 	andeq	r3, r6, r7, lsr #32
    2460:	0006d900 	andeq	sp, r6, r0, lsl #18
    2464:	00642200 	rsbeq	r2, r4, r0, lsl #4
    2468:	0b04a901 	bleq	12c874 <__ccfg+0x10c8cc>
    246c:	0000010c 	andeq	r0, r0, ip, lsl #2
    2470:	00000627 	andeq	r0, r0, r7, lsr #12
    2474:	15a82600 	strne	r2, [r8, #1536]!	; 0x600
		} else if (dstate & DSTATE_RXON) {
    2478:	15b60000 	ldrne	r0, [r6, #0]!
	if (dstate & DSTATE_RFON)
    247c:	06f60000 	ldrbteq	r0, [r6], r0
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2480:	73220000 			; <UNDEFINED> instruction: 0x73220000
		re->status = DATA_ENTRY_PENDING;
    2484:	04c60100 	strbeq	r0, [r6], #256	; 0x100
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2488:	0001f60b 	andeq	pc, r1, fp, lsl #12
	issue_cmd ((lword)&RF_cmdPropRx);
    248c:	00065000 	andeq	r5, r6, r0
	_BIS (dstate, DSTATE_RXAC);
    2490:	c1280000 			; <UNDEFINED> instruction: 0xc1280000
    2494:	be000010 	mcrlt	0, 0, r0, cr0, cr0, {0}
    2498:	60000014 	andvs	r0, r0, r4, lsl r0
    249c:	01000006 	tsteq	r0, r6
	if (dstate & DSTATE_RXAC)
    24a0:	290204d9 	stmdbcs	r2, {r0, r3, r4, r6, r7, sl}
    24a4:	000010d4 	ldrdeq	r1, [r0], -r4
				if (statid != 0xffff)
    24a8:	040a0000 	streq	r0, [sl], #-0
    24ac:	00000203 	andeq	r0, r0, r3, lsl #4
					((address)(RF_cmdPropTx.pPkt)) [0] =
    24b0:	000cad2a 	andeq	sl, ip, sl, lsr #26
				RF_cmdPropTx.pktLen = (byte) paylen;
    24b4:	04470100 	strbeq	r0, [r7], #-256	; 0xffffff00
		if (paylen == 0) {
    24b8:	0f90010d 	svceq	0x0090010d
			wait (qevent, DR_LOOP);
    24bc:	0fa80000 	svceq	0x00a80000
    24c0:	9c010000 	stcls	0, cr0, [r1], {-0}
			if (dstate & DSTATE_RXAC) {
    24c4:	00000753 	andeq	r0, r0, r3, asr r7
    24c8:	0100632b 	tsteq	r0, fp, lsr #6
				rx_int_enable ();
    24cc:	d9190447 	ldmdble	r9, {r0, r1, r2, r6, sl}
			release;
    24d0:	63000000 	movwvs	r0, #0
			} else if (dstate & DSTATE_RFON) {
    24d4:	28000006 	stmdacs	r0, {r1, r2}
				delay (offdelay, DR_GOOF);
    24d8:	000010c1 	andeq	r1, r0, r1, asr #1
    24dc:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    24e0:	000005d8 	ldrdeq	r0, [r0], -r8
		if (bckf_timer) {
    24e4:	02044901 	andeq	r4, r4, #16384	; 0x4000
			wait (qevent, DR_LOOP);
    24e8:	0010d429 	andseq	sp, r0, r9, lsr #8
    24ec:	2c000000 	stccs	0, cr0, [r0], {-0}
    24f0:	000ba301 	andeq	sl, fp, r1, lsl #6
			delay (bckf_timer, DR_LOOP);
    24f4:	04280100 	strteq	r0, [r8], #-256	; 0xffffff00
    24f8:	00d90106 	sbcseq	r0, r9, r6, lsl #2
	...
	if (dstate & DSTATE_RFON)
    2504:	9c010000 	stcls	0, cr0, [r1], {-0}
    2508:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
		rx_de ();
    250c:	00636e2b 	rsbeq	r6, r3, fp, lsr #28
		RF_cmdPropTx . status = 0;
    2510:	1c042801 	stcne	8, cr2, [r4], {1}
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2514:	00000129 	andeq	r0, r0, r9, lsr #2
    2518:	00000676 	andeq	r0, r0, r6, ror r6
    251c:	000c752d 	andeq	r7, ip, sp, lsr #10
		issue_cmd ((lword)&cmd_cs);
    2520:	04310100 	ldrteq	r0, [r1], #-256	; 0xffffff00
		if (dstate & DSTATE_IRST)
    2524:	0005b809 	andeq	fp, r5, r9, lsl #16
    2528:	00069400 	andeq	r9, r6, r0, lsl #8
    252c:	616d2200 	cmnvs	sp, r0, lsl #4
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2530:	32010078 	andcc	r0, r1, #120	; 0x78
    2534:	011d0804 	tsteq	sp, r4, lsl #16
			delay (1, DR_XMIT);
    2538:	06b20000 	ldrteq	r0, [r2], r0
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    253c:	b92d0000 	pushlt	{}	; <UNPREDICTABLE>
    2540:	0100000b 	tsteq	r0, fp
    2544:	1d0d0432 	cfstrsne	mvf0, [sp, #-200]	; 0xffffff38
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2548:	d0000001 	andle	r0, r0, r1
    254c:	00000006 	andeq	r0, r0, r6
				RF_cmdPropTx . status = 0;
    2550:	0c62012c 	stfeqe	f0, [r2], #-176	; 0xffffff50
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2554:	15010000 	strne	r0, [r1, #-0]
				issue_cmd ((lword)&RF_cmdPropTx);
    2558:	d9010604 	stmdble	r1, {r2, r9, sl}
	...
			txtries++;
    2564:	01000000 	mrseq	r0, (UNDEF: 0)
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2568:	0007e39c 	muleq	r7, ip, r3
    256c:	696d2b00 	stmdbvs	sp!, {r8, r9, fp, sp}^
    2570:	1501006e 	strne	r0, [r1, #-110]	; 0xffffff92
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2574:	01291c04 			; <UNDEFINED> instruction: 0x01291c04
		goto DR_LOOP__;
    2578:	06f90000 	ldrbteq	r0, [r9], r0
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    257c:	1f000000 	svcne	0x00000000
		paylen = 0;
    2580:	000c4801 	andeq	r4, ip, r1, lsl #16
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2584:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
		txtries = 0;
    2588:	14780106 	ldrbtne	r0, [r8], #-262	; 0xfffffefa
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    258c:	14900000 	ldrne	r0, [r0], #0
    2590:	9c010000 	stcls	0, cr0, [r1], {-0}
    2594:	0000080e 	andeq	r0, r0, lr, lsl #16
    2598:	00154920 	andseq	r4, r5, r0, lsr #18
    259c:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
		    tcvphy_top (physid) == NULL)
    25a0:	0000d919 	andeq	sp, r0, r9, lsl r9
    25a4:	00070c00 	andeq	r0, r7, r0, lsl #24
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    25a8:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    25ac:	00000af7 	strdeq	r0, [r0], -r7
			rf_off ();
    25b0:	0803a301 	stmdaeq	r3, {r0, r8, r9, sp, pc}
endthread
    25b4:	0005b801 	andeq	fp, r5, r1, lsl #16
    25b8:	00139c00 	andseq	r9, r3, r0, lsl #24
    25bc:	00144400 	andseq	r4, r4, r0, lsl #8
    25c0:	809c0100 	addshi	r0, ip, r0, lsl #2
    25c4:	20000008 	andcs	r0, r0, r8
    25c8:	000013db 	ldrdeq	r1, [r0], -fp
    25cc:	1a03a301 	bne	eb1d8 <__ccfg+0xcb230>
    25d0:	000000d9 	ldrdeq	r0, [r0], -r9
    25d4:	0000071f 	andeq	r0, r0, pc, lsl r7
    25d8:	000c752d 	andeq	r7, ip, sp, lsr #10
    25dc:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    25e0:	0005b809 	andeq	fp, r5, r9, lsl #16
    25e4:	00073200 	andeq	r3, r7, r0, lsl #4
    25e8:	63632200 	cmnvs	r3, #0, 4
    25ec:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    25f0:	0005b811 	andeq	fp, r5, r1, lsl r8
void RFCCPE0IntHandler (void) {
    25f4:	00076600 	andeq	r6, r7, r0, lsl #12
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    25f8:	0c132d00 	ldceq	13, cr2, [r3], {-0}
		_BIS (dstate, DSTATE_IRST);
    25fc:	ab010000 	blge	42604 <__ccfg+0x2265c>
    2600:	011d1503 	tsteq	sp, r3, lsl #10
    2604:	078f0000 	streq	r0, [pc, r0]
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2608:	da2d0000 	ble	b42610 <__ccfg+0xb22668>
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    260c:	01000013 	tsteq	r0, r3, lsl r0
    2610:	1d0803af 	stcne	3, cr0, [r8, #-700]	; 0xfffffd44
	p_trigger (drvprcs, qevent);
    2614:	a2000001 	andge	r0, r0, #1
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2618:	00000007 	andeq	r0, r0, r7
    261c:	0cce012e 	stfeqe	f0, [lr], {46}	; 0x2e
    2620:	7c010000 	stcvc	0, cr0, [r1], {-0}
    2624:	01010603 	tsteq	r1, r3, lsl #12
    2628:	0000089d 	muleq	r0, sp, r8
    262c:	0068632f 	rsbeq	r6, r8, pc, lsr #6
    2630:	18037c01 	stmdane	r3, {r0, sl, fp, ip, sp, lr}
    2634:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2638:	0b0a2a00 	bleq	28ce40 <__ccfg+0x26ce98>
    263c:	4a010000 	bmi	42644 <__ccfg+0x2269c>
	RISE_N_SHINE;
    2640:	10010d03 	andne	r0, r1, r3, lsl #26
    2644:	9000000f 	andls	r0, r0, pc
    2648:	0100000f 	tsteq	r0, pc
}
    264c:	0008e79c 	muleq	r8, ip, r7
    2650:	68632b00 	stmdavs	r3!, {r8, r9, fp, sp}^
    2654:	034a0100 	movteq	r0, #41216	; 0xa100
    2658:	0005b81b 	andeq	fp, r5, fp, lsl r8
    265c:	0007cc00 	andeq	ip, r7, r0, lsl #24
    2660:	0c752d00 	ldcleq	13, cr2, [r5], #-0
void phys_cc1350 (int phy, int mbs) {
    2664:	57010000 	strpl	r0, [r1, -r0]
	if (rbuffl != 0)
    2668:	05b80903 	ldreq	r0, [r8, #2307]!	; 0x903
    266c:	07ea0000 	strbeq	r0, [sl, r0]!
		syserror (ETOOMANY, "cc13");
    2670:	63220000 			; <UNDEFINED> instruction: 0x63220000
		syserror (EREQPAR, "cc13 mb");
    2674:	57010063 	strpl	r0, [r1, -r3, rrx]
	if (mbs == 0)
    2678:	05b81103 	ldreq	r1, [r8, #259]!	; 0x103
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    267c:	082b0000 	stmdaeq	fp!, {}	; <UNPREDICTABLE>
		syserror (EREQPAR, "cc13 mb");
    2680:	30000000 	andcc	r0, r0, r0
    2684:	000b4001 	andeq	r4, fp, r1
	i = 0;
    2688:	02f00100 	rscseq	r0, r0, #0, 2
	rbuffl = (byte) mbs;
    268c:	0012b406 	andseq	fp, r2, r6, lsl #8
		db->config.type = 0;	// General (data in structure)
    2690:	00130400 	andseq	r0, r3, r0, lsl #8
	rbuffl = (byte) mbs;
    2694:	119c0100 	orrsne	r0, ip, r0, lsl #2
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2698:	2d000009 	stccs	0, cr0, [r0, #-36]	; 0xffffffdc
    269c:	00000bcd 	andeq	r0, r0, sp, asr #23
		if (db == NULL)
    26a0:	0802f501 	stmdaeq	r2, {r0, r8, sl, ip, sp, lr, pc}
			syserror (EMALLOC, "cc13");
    26a4:	0000011d 	andeq	r0, r0, sp, lsl r1
    26a8:	0000085f 	andeq	r0, r0, pc, asr r8
    26ac:	69013100 	stmdbvs	r1, {r8, ip, sp}
		db->status = DATA_ENTRY_PENDING;
    26b0:	7901006f 	stmdbvc	r1, {r0, r1, r2, r3, r5, r6}
		if (i)
    26b4:	ef010602 	svc	0x00010602
			da->pNextEntry = (byte*) db;
    26b8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
		db->length = rbuffl + 2;
    26bc:	b4000012 	strlt	r0, [r0], #-18	; 0xffffffee
    26c0:	01000012 	tsteq	r0, r2, lsl r0
		db->config.type = 0;	// General (data in structure)
    26c4:	0009949c 	muleq	r9, ip, r4
		db->length = rbuffl + 2;
    26c8:	0c192000 	ldceq	0, cr2, [r9], {-0}
	db->pNextEntry = (byte*) re;
    26cc:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    26d0:	00d90f02 	sbcseq	r0, r9, r2, lsl #30
    26d4:	087d0000 	ldmdaeq	sp!, {}^	; <UNPREDICTABLE>
	if (rbuffs == NULL)
    26d8:	642b0000 	strtvs	r0, [fp], #-0
	rbuffs->pCurrEntry = (byte*) re;
    26dc:	01007665 	tsteq	r0, r5, ror #12
	rbuffs->pLastEntry = NULL;
    26e0:	d91b0279 	ldmdble	fp, {r0, r3, r4, r5, r6, r9}
    26e4:	9b000000 	blls	26ec <phys_cc1350+0x88>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26e8:	20000008 	andcs	r0, r0, r8
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    26ec:	000007bb 			; <UNDEFINED> instruction: 0x000007bb
    26f0:	25027901 	strcs	r7, [r2, #-2305]	; 0xfffff6ff
    26f4:	000000d9 	ldrdeq	r0, [r0], -r9
	rbuffl -= 2;
    26f8:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26fc:	6675622b 	ldrbtvs	r6, [r5], -fp, lsr #4
	rbuffl -= 2;
    2700:	02790100 	rsbseq	r0, r9, #0, 2
	physid = phy;
    2704:	0001f636 	andeq	pc, r1, r6, lsr r6	; <UNPREDICTABLE>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2708:	0008d700 	andeq	sp, r8, r0, lsl #14
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    270c:	656c2b00 	strbvs	r2, [ip, #-2816]!	; 0xfffff500
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2710:	7901006e 	stmdbvc	r1, {r1, r2, r3, r5, r6}
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2714:	00d94002 	sbcseq	r4, r9, r2
    2718:	08f50000 	ldmeq	r5!, {}^	; <UNPREDICTABLE>
	utimer_add (&bckf_timer);
    271c:	72220000 	eorvc	r0, r2, #0
	drvprcs = runthread (cc1350_driver);
    2720:	01007465 	tsteq	r0, r5, ror #8
    2724:	ef07027b 	svc	0x0007027b
    2728:	15000000 	strne	r0, [r0, #-0]
	if (drvprcs == 0)
    272c:	00000009 	andeq	r0, r0, r9
		syserror (ERESOURCE, "cc13");
    2730:	0be0011f 	bleq	ff802bb4 <_estack+0xdf7fdbb4>
    2734:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2738:	f4010602 	vst1.8	{d0-d2}, [r1], r2
    273c:	18000011 	stmdane	r0, {r0, r4}
    2740:	01000012 	tsteq	r0, r2, lsl r0
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2744:	0009cf9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2748:	66722b00 	ldrbtvs	r2, [r2], -r0, lsl #22
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    274c:	02690100 	rsbeq	r0, r9, #0, 2
    2750:	0004541e 	andeq	r5, r4, lr, lsl r4
    2754:	00094900 	andeq	r4, r9, r0, lsl #18
    2758:	6f6c2b00 	svcvs	0x006c2b00
    275c:	69010063 	stmdbvs	r1, {r0, r1, r5, r6}
    2760:	008d2602 	addeq	r2, sp, r2, lsl #12
    2764:	09720000 	ldmdbeq	r2!, {}^	; <UNPREDICTABLE>
    2768:	1f000000 	svcne	0x00000000
    276c:	000cdf01 	andeq	sp, ip, r1, lsl #30
	plugch ();
    2770:	025f0100 	subseq	r0, pc, #0, 2
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2774:	11e60106 	mvnne	r0, r6, lsl #2
    2778:	11f40000 	mvnsne	r0, r0
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    277c:	9c010000 	stcls	0, cr0, [r1], {-0}
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2780:	00000a16 	andeq	r0, r0, r6, lsl sl
    2784:	000c1f20 	andeq	r1, ip, r0, lsr #30
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2788:	025f0100 	subseq	r0, pc, #0, 2
}
    278c:	0001f619 	andeq	pc, r1, r9, lsl r6	; <UNPREDICTABLE>
    2790:	00099b00 	andeq	r9, r9, r0, lsl #22
    2794:	00633200 	rsbeq	r3, r3, r0, lsl #4
    2798:	24025f01 	strcs	r5, [r2], #-3841	; 0xfffff0ff
    279c:	000001fc 	strdeq	r0, [r0], -ip
    27a0:	6e2b5101 	sufvse	f5, f3, f1
    27a4:	025f0100 	subseq	r0, pc, #0, 2
    27a8:	00008d2b 	andeq	r8, r0, fp, lsr #26
    27ac:	0009b900 	andeq	fp, r9, r0, lsl #18
    27b0:	011f0000 	tsteq	pc, r0
    27b4:	00000ca1 	andeq	r0, r0, r1, lsr #25
    27b8:	06025901 	streq	r5, [r2], -r1, lsl #18
    27bc:	0011d201 	andseq	sp, r1, r1, lsl #4
    27c0:	0011e600 	andseq	lr, r1, r0, lsl #12
    27c4:	619c0100 	orrsvs	r0, ip, r0, lsl #2
    27c8:	2000000a 	andcs	r0, r0, sl
    27cc:	00000c1f 	andeq	r0, r0, pc, lsl ip
    27d0:	19025901 	stmdbne	r2, {r0, r8, fp, ip, lr}
    27d4:	000001f6 	strdeq	r0, [r0], -r6
    27d8:	000009cc 	andeq	r0, r0, ip, asr #19
    27dc:	6372732b 	cmnvs	r2, #-1409286144	; 0xac000000
    27e0:	02590100 	subseq	r0, r9, #0, 2
    27e4:	00070e2b 	andeq	r0, r7, fp, lsr #28
    27e8:	0009df00 	andeq	sp, r9, r0, lsl #30
    27ec:	006e2b00 	rsbeq	r2, lr, r0, lsl #22
    27f0:	34025901 	strcc	r5, [r2], #-2305	; 0xfffff6ff
    27f4:	0000008d 	andeq	r0, r0, sp, lsl #1
    27f8:	000009fd 	strdeq	r0, [r0], -sp
    27fc:	10011f00 	andne	r1, r1, r0, lsl #30
    2800:	0100000d 	tsteq	r0, sp
    2804:	01060254 	tsteq	r6, r4, asr r2
	...
    2810:	0aa69c01 	beq	fe9a981c <_estack+0xde9a481c>
    2814:	642b0000 	strtvs	r0, [fp], #-0
    2818:	02540100 	subseq	r0, r4, #0, 2
    281c:	0001f61a 	andeq	pc, r1, sl, lsl r6	; <UNPREDICTABLE>
    2820:	000a1000 	andeq	r1, sl, r0
    2824:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    2828:	29025401 	stmdbcs	r2, {r0, sl, ip, lr}
    282c:	0000070e 	andeq	r0, r0, lr, lsl #14
    2830:	00000a23 	andeq	r0, r0, r3, lsr #20
    2834:	01006e32 	tsteq	r0, r2, lsr lr
    2838:	8d300254 	lfmhi	f0, 4, [r0, #-336]!	; 0xfffffeb0
    283c:	01000000 	mrseq	r0, (UNDEF: 0)
    2840:	011f0052 	tsteq	pc, r2, asr r0	; <UNPREDICTABLE>
    2844:	00000bf7 	strdeq	r0, [r0], -r7
    2848:	06024e01 	streq	r4, [r2], -r1, lsl #28
    284c:	00000001 	andeq	r0, r0, r1
    2850:	00000000 	andeq	r0, r0, r0
    2854:	de9c0100 	fmllee	f0, f4, f0
    2858:	2b00000a 	blcs	2888 <__outserial+0x10>
    285c:	4e010064 	cdpmi	0, 0, cr0, cr1, cr4, {3}
    2860:	01f61902 	mvnseq	r1, r2, lsl #18
    2864:	0a360000 	beq	d8286c <__ccfg+0xd628c4>
    2868:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    286c:	024e0100 	subeq	r0, lr, #0, 2
    2870:	00070e28 	andeq	r0, r7, r8, lsr #28
    2874:	000a5400 	andeq	r5, sl, r0, lsl #8
strand (__outserial, const char*)
    2878:	011f0000 	tsteq	pc, r0
    287c:	00000ceb 	andeq	r0, r0, fp, ror #25
    2880:	06024701 	streq	r4, [r2], -r1, lsl #14
    2884:	00000001 	andeq	r0, r0, r1
endstrand
    2888:	00000000 	andeq	r0, r0, r0
    288c:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
	ptr = data;
    2890:	2b00000b 	blcs	28c4 <__outserial+0x4c>
    2894:	47010064 	strmi	r0, [r1, -r4, rrx]
	if (*ptr)
    2898:	01f61a02 	mvnseq	r1, r2, lsl #20
		len = strlen (ptr);
    289c:	0a670000 	beq	19c28a4 <__ccfg+0x19a28fc>
    28a0:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    28a4:	02470100 	subeq	r0, r7, #0, 2
    28a8:	00070e29 	andeq	r0, r7, r9, lsr #28
    28ac:	000a8500 	andeq	r8, sl, r0, lsl #10
    28b0:	006e2b00 	rsbeq	r2, lr, r0, lsl #22
    28b4:	30024701 	andcc	r4, r2, r1, lsl #14
	len -= quant;
    28b8:	0000008d 	andeq	r0, r0, sp, lsl #1
    28bc:	00000a98 	muleq	r0, r8, sl
    28c0:	eb011f00 	bl	4a4c8 <__ccfg+0x2a520>
	if (len == 0) {
    28c4:	0100000a 	tsteq	r0, sl
		ufree (data);
    28c8:	01060242 	tsteq	r6, r2, asr #4
		finish;
    28cc:	000011c2 	andeq	r1, r0, r2, asr #3
    28d0:	000011d2 	ldrdeq	r1, [r0], -r2
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    28d4:	0b5d9c01 	bleq	17698e0 <__ccfg+0x1749938>
    28d8:	642b0000 	strtvs	r0, [fp], #-0
    28dc:	02420100 	subeq	r0, r2, #0, 2
    28e0:	0001f619 	andeq	pc, r1, r9, lsl r6	; <UNPREDICTABLE>
    28e4:	000aab00 	andeq	sl, sl, r0, lsl #22
strand (__inserial, address)
    28e8:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    28ec:	28024201 	stmdacs	r2, {r0, r9, lr}
    28f0:	0000070e 	andeq	r0, r0, lr, lsl #14
    28f4:	00000abe 			; <UNDEFINED> instruction: 0x00000abe
    28f8:	97012c00 	strls	r2, [r1, -r0, lsl #24]
	if (__inpline != NULL)
    28fc:	0100000b 	tsteq	r0, fp
    2900:	01050239 	tsteq	r5, r9, lsr r2
		finish;
    2904:	0000008d 	andeq	r0, r0, sp, lsl #1
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    2908:	000011b4 			; <UNDEFINED> instruction: 0x000011b4
    290c:	000011c2 	andeq	r1, r0, r2, asr #3
    2910:	0b999c01 	bleq	fe66991c <_estack+0xde66491c>
    2914:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
		umwait (IM_INIT);
    2918:	02390100 	eorseq	r0, r9, #0, 2
		release;
    291c:	00070e1e 	andeq	r0, r7, lr, lsl lr
	savedata (data);
    2920:	000adc00 	andeq	sp, sl, r0, lsl #24
	len = MAX_LINE_LENGTH;
    2924:	00692200 	rsbeq	r2, r9, r0, lsl #4
	io (IM_READ, __cport, READ, ptr, 1);
    2928:	06023b01 	streq	r3, [r2], -r1, lsl #22
    292c:	0000008d 	andeq	r0, r0, sp, lsl #1
    2930:	00000afa 	strdeq	r0, [r0], -sl
    2934:	b0012c00 	andlt	r2, r1, r0, lsl #24
	if (ptr == (char*) data) { // new line
    2938:	0100000b 	tsteq	r0, fp
    293c:	0106022d 	tsteq	r6, sp, lsr #4
		if (*ptr == '\0') { // bin cmd
    2940:	000000d9 	ldrdeq	r0, [r0], -r9
	...
		if (*ptr < 0x20)
    294c:	0be69c01 	bleq	ff9a9958 <_estack+0xdf9a4958>
    2950:	662b0000 	strtvs	r0, [fp], -r0
			proceed (IM_READ);
    2954:	01006e75 	tsteq	r0, r5, ror lr
    2958:	f118022d 			; <UNDEFINED> instruction: 0xf118022d
	if (*ptr == '\n' || *ptr == '\r') {
    295c:	0d000002 	stceq	0, cr0, [r0, #-8]
    2960:	2200000b 	andcs	r0, r0, #11
    2964:	2f010069 	svccs	0x00010069
		*ptr = '\0';
    2968:	04160e02 	ldreq	r0, [r6], #-3586	; 0xfffff1fe
		__inpline = (char*)data;
    296c:	0b2b0000 	bleq	ac2974 <__ccfg+0xaa29cc>
		finish;
    2970:	63220000 			; <UNDEFINED> instruction: 0x63220000
	if (len) {
    2974:	02300100 	eorseq	r0, r0, #0, 2
		ptr++;
    2978:	0000d907 	andeq	sp, r0, r7, lsl #18
    297c:	000b4900 	andeq	r4, fp, r0, lsl #18
		len--;
    2980:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
	proceed (IM_READ);
    2984:	00000bb1 			; <UNDEFINED> instruction: 0x00000bb1
	io (IM_BIN, __cport, READ, ptr, 1);
    2988:	07021f01 	streq	r1, [r2, -r1, lsl #30]
    298c:	00011d01 	andeq	r1, r1, r1, lsl #26
    2990:	00119000 	andseq	r9, r1, r0
    2994:	0011b400 	andseq	fp, r1, r0, lsl #8
    2998:	229c0100 	addscs	r0, ip, #0, 2
	len -= 2;
    299c:	2b00000c 	blcs	29d4 <__inserial+0xec>
	if (len > *ptr + 1) // 1 for 0x04
    29a0:	006e7566 	rsbeq	r7, lr, r6, ror #10
    29a4:	18021f01 	stmdane	r2, {r0, r8, r9, sl, fp, ip}
		len = *ptr + 1;
    29a8:	000002f1 	strdeq	r0, [r0], -r1
    29ac:	00000b5c 	andeq	r0, r0, ip, asr fp
	ptr++;
    29b0:	01006923 	tsteq	r0, r3, lsr #18
	quant = io (IM_BINL, __cport, READ, ptr, len);
    29b4:	160e0221 	strne	r0, [lr], -r1, lsr #4
    29b8:	01000004 	tsteq	r0, r4
    29bc:	012c0050 	qsubeq	r0, r0, ip
    29c0:	00000c93 	muleq	r0, r3, ip
    29c4:	09021301 	stmdbeq	r2, {r0, r8, r9, ip}
    29c8:	0002f101 	andeq	pc, r2, r1, lsl #2
	...
		finish;
    29d4:	609c0100 	addsvs	r0, ip, r0, lsl #2
	ptr += quant;
    29d8:	2b00000c 	blcs	2a10 <outc.5724+0xc>
    29dc:	00646970 	rsbeq	r6, r4, r0, ror r9
endstrand
    29e0:	18021301 	stmdane	r2, {r0, r8, r9, ip}
    29e4:	0000011d 	andeq	r0, r0, sp, lsl r1
	proceed (IM_BINL);
    29e8:	00000b85 	andeq	r0, r0, r5, lsl #23
endstrand
    29ec:	01006922 	tsteq	r0, r2, lsr #18
    29f0:	160e0215 			; <UNDEFINED> instruction: 0x160e0215
    29f4:	a3000004 	movwge	r0, #4
    29f8:	0000000b 	andeq	r0, r0, fp
    29fc:	0c5a011f 	ldfeqe	f0, [sl], {31}
    2a00:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
		if (res && (d < n))
    2a04:	00010601 	andeq	r0, r1, r1, lsl #12
    2a08:	00000000 	andeq	r0, r0, r0
    2a0c:	01000000 	mrseq	r0, (UNDEF: 0)
    2a10:	000cc99c 	muleq	ip, ip, r9
			res [d] = (char) c;
    2a14:	75662b00 	strbvc	r2, [r6, #-2816]!	; 0xfffff500
		d++;
    2a18:	f501006e 			; <UNDEFINED> instruction: 0xf501006e
    2a1c:	02f11701 	rscseq	r1, r1, #262144	; 0x40000
    2a20:	0bc10000 	bleq	ff042a28 <_estack+0xdf03da28>
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a24:	72220000 	eorvc	r0, r2, #0
    2a28:	01006c65 	tsteq	r0, r5, ror #24
    2a2c:	cd0a01f9 	stfgts	f0, [sl, #-996]	; 0xfffffc1c
				enci (10000);
    2a30:	df000000 	svcle	0x00000000
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a34:	2200000b 	andcs	r0, r0, #11
    2a38:	fa010069 	blx	42be4 <__ccfg+0x22c3c>
	d = 0;
    2a3c:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
		c = *fm++;
    2a40:	0bf20000 	bleq	ffc82a48 <_estack+0xdfc7da48>
		if (c == '\\') {
    2a44:	6a220000 	bvs	882a4c <__ccfg+0x862aa4>
			if ((c = *fm++) == '\0') {
    2a48:	01fa0100 	mvnseq	r0, r0, lsl #2
    2a4c:	00041612 	andeq	r1, r4, r2, lsl r6
				outc ('\\');
    2a50:	000c2600 	andeq	r2, ip, r0, lsl #12
			if ((c = *fm++) == '\0') {
    2a54:	006b2200 	rsbeq	r2, fp, r0, lsl #4
				outc ('\\');
    2a58:	1601fa01 	strne	pc, [r1], -r1, lsl #20
    2a5c:	00000416 	andeq	r0, r0, r6, lsl r4
			outc (c);
    2a60:	00000c44 	andeq	r0, r0, r4, asr #24
    2a64:	20011f00 	andcs	r1, r1, r0, lsl #30
			if (c == '\0')
    2a68:	0100000b 	tsteq	r0, fp
    2a6c:	010601d9 	ldrdeq	r0, [r6, -r9]
			outc (c);
    2a70:	0000134c 	andeq	r1, r0, ip, asr #6
				outc (val);
    2a74:	0000139c 	muleq	r0, ip, r3
				val = (word) va_arg (ap, aword);
    2a78:	0d0e9c01 	stceq	12, cr9, [lr, #-4]
		if (c == '%') {
    2a7c:	702b0000 	eorvc	r0, fp, r0
    2a80:	01006469 	tsteq	r0, r9, ror #8
			c = *fm++;
    2a84:	1d1201d9 	ldfnes	f0, [r2, #-868]	; 0xfffffc9c
			switch (c) {
    2a88:	62000001 	andvs	r0, r0, #1
    2a8c:	2200000c 	andcs	r0, r0, #12
    2a90:	dd010069 	stcle	0, cr0, [r1, #-420]	; 0xfffffe5c
    2a94:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    2a98:	0c960000 	ldceq	0, cr0, [r6], {0}
    2a9c:	6a240000 	bvs	902aa4 <__ccfg+0x8e2afc>
    2aa0:	01dd0100 	bicseq	r0, sp, r0, lsl #2
    2aa4:	00041612 	andeq	r1, r4, r2, lsl r6
				outc ('%');
    2aa8:	e42a0000 	strt	r0, [sl], #-0
    2aac:	0100000a 	tsteq	r0, sl
				outc (c);
    2ab0:	010d01c4 	smlabteq	sp, r4, r1, r0
    2ab4:	00000ed4 	ldrdeq	r0, [r0], -r4
    2ab8:	00000f10 	andeq	r0, r0, r0, lsl pc
				if (c == '\0')
    2abc:	0d639c01 	stcleq	12, cr9, [r3, #-4]!
				return d;
    2ac0:	70320000 	eorsvc	r0, r2, r0
}
    2ac4:	01006469 	tsteq	r0, r9, ror #8
    2ac8:	162101c4 	strtne	r0, [r1], -r4, asr #3
			switch (c) {
    2acc:	01000004 	tsteq	r0, r4
    2ad0:	0cc32d50 	stcleq	13, cr2, [r3], {80}	; 0x50
    2ad4:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
				for (i = 12; ; i -= 4) {
    2ad8:	011d0801 	tsteq	sp, r1, lsl #16
				val = (word) va_arg (ap, aword);
    2adc:	0cbf0000 	ldceq	0, cr0, [pc]	; 2ae4 <__pi_vfparse+0xc0>
						[ (val >> i) & 0xf ]);
    2ae0:	6a220000 	bvs	882ae8 <__ccfg+0x862b40>
    2ae4:	01c90100 	biceq	r0, r9, r0, lsl #2
    2ae8:	00008d06 	andeq	r8, r0, r6, lsl #26
					outc (__pi_hex_enc_table
    2aec:	000cd200 	andeq	sp, ip, r0, lsl #4
    2af0:	00692300 	rsbeq	r2, r9, r0, lsl #6
					if (i == 0)
    2af4:	0e01ca01 	vmlaeq.f32	s24, s2, s2
    2af8:	00000416 	andeq	r0, r0, r6, lsl r4
				for (i = 12; ; i -= 4) {
    2afc:	2c005201 	sfmcs	f5, 4, [r0], {1}
				val = (word) va_arg (ap, aword);
    2b00:	000c9b01 	andeq	r9, ip, r1, lsl #22
				if (c == 'd' && (val & 0x8000) != 0) {
    2b04:	01b30100 			; <UNDEFINED> instruction: 0x01b30100
				val = (word) va_arg (ap, aword);
    2b08:	00d90106 	sbcseq	r0, r9, r6, lsl #2
	...
					outc ('-');
    2b14:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b18:	00000da1 	andeq	r0, r0, r1, lsr #27
					val = (~val) + 1;
    2b1c:	6469702b 	strbtvs	r7, [r9], #-43	; 0xffffffd5
    2b20:	01b30100 			; <UNDEFINED> instruction: 0x01b30100
				for (i = 12; ; i -= 4) {
    2b24:	00011d13 	andeq	r1, r1, r3, lsl sp
				enci (10000);
    2b28:	000ce500 	andeq	lr, ip, r0, lsl #10
    2b2c:	00692200 	rsbeq	r2, r9, r0, lsl #4
    2b30:	0e01b501 	cfsh32eq	mvfx11, mvfx1, #1
    2b34:	00000416 	andeq	r0, r0, r6, lsl r4
    2b38:	00000d03 	andeq	r0, r0, r3, lsl #26
    2b3c:	03013300 	movweq	r3, #4864	; 0x1300
    2b40:	0100000b 	tsteq	r0, fp
    2b44:	010601a8 	smlatbeq	r6, r8, r1, r0
	...
    2b50:	011f9c01 	tsteq	pc, r1, lsl #24
    2b54:	00002658 	andeq	r2, r0, r8, asr r6
    2b58:	06019a01 	streq	r9, [r1], -r1, lsl #20
    2b5c:	00115801 	andseq	r5, r1, r1, lsl #16
    2b60:	00119000 	andseq	r9, r1, r0
    2b64:	f09c0100 			; <UNDEFINED> instruction: 0xf09c0100
    2b68:	2b00000d 	blcs	2ba4 <__pi_vfparse+0x180>
    2b6c:	9a010064 	bls	42d04 <__ccfg+0x22d5c>
				if (c == 'd' || c == 'u') {
    2b70:	00d91201 	sbcseq	r1, r9, r1, lsl #4
    2b74:	0d210000 	stceq	0, cr0, [r1, #-0]
					if (c == 'd' &&
    2b78:	49200000 	stmdbmi	r0!, {}	; <UNPREDICTABLE>
					val = va_arg (ap, lword);
    2b7c:	01000015 	tsteq	r0, r5, lsl r0
					fm++;
    2b80:	d91a019a 	ldmdble	sl, {r1, r3, r4, r7, r8}
					if (c == 'd' &&
    2b84:	34000000 	strcc	r0, [r0], #-0
    2b88:	0000000d 	andeq	r0, r0, sp
						outc ('-');
    2b8c:	0cf8012c 	ldfeqe	f0, [r8], #176	; 0xb0
    2b90:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
						val = (~val) + 1;
    2b94:	1d010701 	stcne	7, cr0, [r1, #-4]
				enci (10000);
    2b98:	34000001 	strcc	r0, [r0], #-1
					enci (1000000000UL);
    2b9c:	58000011 	stmdapl	r0, {r0, r4}
    2ba0:	01000011 	tsteq	r0, r1, lsl r0
    2ba4:	000e3e9c 	muleq	lr, ip, lr
    2ba8:	69702b00 	ldmdbvs	r0!, {r8, r9, fp, sp}^
    2bac:	88010064 	stmdahi	r1, {r2, r5, r6}
    2bb0:	011d1801 	tsteq	sp, r1, lsl #16
    2bb4:	0d470000 	stcleq	0, cr0, [r7, #-0]
    2bb8:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    2bbc:	88010074 	stmdahi	r1, {r2, r4, r5, r6}
    2bc0:	00d92201 	sbcseq	r2, r9, r1, lsl #4
    2bc4:	0d700000 	ldcleq	0, cr0, [r0, #-0]
    2bc8:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    2bcc:	018a0100 	orreq	r0, sl, r0, lsl #2
    2bd0:	0004160e 	andeq	r1, r4, lr, lsl #12
    2bd4:	000d8e00 	andeq	r8, sp, r0, lsl #28
    2bd8:	011f0000 	tsteq	pc, r0
    2bdc:	00000bd2 	ldrdeq	r0, [r0], -r2
				} else if (c == 'x') {
    2be0:	06017801 	streq	r7, [r1], -r1, lsl #16
					for (i = 28; ; i -= 4) {
    2be4:	00000001 	andeq	r0, r0, r1
					val = va_arg (ap, lword);
    2be8:	00000000 	andeq	r0, r0, r0
							[ (val >> i) & 0xf ]);
    2bec:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    2bf0:	2b00000e 	blcs	2c30 <__pi_vfparse+0x20c>
						outc (__pi_hex_enc_table
    2bf4:	00646970 	rsbeq	r6, r4, r0, ror r9
    2bf8:	1b017801 	blne	60c04 <__ccfg+0x40c5c>
    2bfc:	0000011d 	andeq	r0, r0, sp, lsl r1
						if (i == 0)
    2c00:	00000dac 	andeq	r0, r0, ip, lsr #27
    2c04:	000c2a20 	andeq	r2, ip, r0, lsr #20
					for (i = 28; ; i -= 4) {
    2c08:	01780100 	cmneq	r8, r0, lsl #2
					outc ('%');
    2c0c:	00011d26 	andeq	r1, r1, r6, lsr #26
    2c10:	000dbf00 	andeq	fp, sp, r0, lsl #30
    2c14:	00692300 	rsbeq	r2, r9, r0, lsl #6
					outc ('l');
    2c18:	0e017c01 	cdpeq	12, 0, cr7, cr1, cr1, {0}
    2c1c:	00000416 	andeq	r0, r0, r6, lsl r4
				val = (word) va_arg (ap, aword);
    2c20:	6a225001 	bvs	896c2c <__ccfg+0x876c84>
				outc (val);
    2c24:	017d0100 	cmneq	sp, r0, lsl #2
    2c28:	00008d07 	andeq	r8, r0, r7, lsl #26
				while (*st != '\0') {
    2c2c:	000ddd00 	andeq	sp, sp, r0, lsl #26
    2c30:	011f0000 	tsteq	pc, r0
    2c34:	00000b8a 	andeq	r0, r0, sl, lsl #23
    2c38:	06016601 	streq	r6, [r1], -r1, lsl #12
					outc (*st);
    2c3c:	00110001 	andseq	r0, r1, r1
    2c40:	00113400 	andseq	r3, r1, r0, lsl #8
					st++;
    2c44:	db9c0100 	blle	fe70304c <_estack+0xde6fe04c>
		c = *fm++;
    2c48:	3400000e 	strcc	r0, [r0], #-14
    2c4c:	00000c2a 	andeq	r0, r0, sl, lsr #24
    2c50:	1a016601 	bne	5c45c <__ccfg+0x3c4b4>
char *vform (char *res, const char *fm, va_list aq) {
    2c54:	0000011d 	andeq	r0, r0, sp, lsl r1
    2c58:	6a225001 	bvs	896c64 <__ccfg+0x876cbc>
	if (res != NULL) {
    2c5c:	016a0100 	cmneq	sl, r0, lsl #2
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2c60:	00008d06 	andeq	r8, r0, r6, lsl #26
    2c64:	000dfb00 	andeq	pc, sp, r0, lsl #22
    2c68:	00692300 	rsbeq	r2, r9, r0, lsl #6
}
    2c6c:	0e016b01 	vmlaeq.f64	d6, d1, d1
    2c70:	00000416 	andeq	r0, r0, r6, lsl r4
	fml = strlen (fm) + 17;
    2c74:	2e005201 	cdpcs	2, 0, cr5, cr0, cr1, {0}
    2c78:	000c3e01 	andeq	r3, ip, r1, lsl #28
    2c7c:	01590100 	cmpeq	r9, r0, lsl #2
	if ((res = (char*) umalloc (fml)) == NULL)
    2c80:	11010106 	tstne	r1, r6, lsl #2
    2c84:	3500000f 	strcc	r0, [r0, #-15]
    2c88:	00000c2a 	andeq	r0, r0, sl, lsr #24
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2c8c:	17015901 	strne	r5, [r1, -r1, lsl #18]
    2c90:	0000011d 	andeq	r0, r0, sp, lsl r1
    2c94:	00154935 	andseq	r4, r5, r5, lsr r9
    2c98:	01590100 	cmpeq	r9, r0, lsl #2
		ufree (res);
    2c9c:	0000d923 	andeq	sp, r0, r3, lsr #18
		goto Again;
    2ca0:	006a2400 	rsbeq	r2, sl, r0, lsl #8
	if (buf == NULL || fmt == NULL)
    2ca4:	07015d01 	streq	r5, [r1, -r1, lsl #26]
int vscan (const char *buf, const char *fmt, va_list ap) {
    2ca8:	000000ef 	andeq	r0, r0, pc, ror #1
	if (buf == NULL || fmt == NULL)
    2cac:	c5011f00 	strgt	r1, [r1, #-3840]	; 0xfffff100
    2cb0:	0100000b 	tsteq	r0, fp
    2cb4:	01060153 	tsteq	r6, r3, asr r1
		    	    case 'u': scanu (lword); break;
    2cb8:	000010b8 	strheq	r1, [r0], -r8
			while (isspace (*buf)) buf++;
    2cbc:	000010cc 	andeq	r1, r0, ip, asr #1
    2cc0:	0f3c9c01 	svceq	0x003c9c01
	while (*fmt != '\0') {
    2cc4:	49200000 	stmdbmi	r0!, {}	; <UNPREDICTABLE>
		if (*fmt++ != '%')
    2cc8:	01000015 	tsteq	r0, r5, lsl r0
		switch (*fmt++) {
    2ccc:	d9140153 	ldmdble	r4, {r0, r1, r4, r6, r8}
    2cd0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2cd4:	0000000e 	andeq	r0, r0, lr
    2cd8:	0b16012c 	bleq	583190 <__ccfg+0x5631e8>
    2cdc:	2c010000 	stccs	0, cr0, [r1], {-0}
    2ce0:	1d010701 	stcne	7, cr0, [r1, #-4]
    2ce4:	44000001 	strmi	r0, [r0], #-1
}
    2ce8:	78000014 	stmdavc	r0, {r2, r4}
		switch (*fmt++) {
    2cec:	01000014 	tsteq	r0, r4, lsl r0
    2cf0:	000f9e9c 	muleq	pc, ip, lr	; <UNPREDICTABLE>
    2cf4:	19102000 	ldmdbne	r0, {sp}
    2cf8:	2c010000 	stccs	0, cr0, [r1], {-0}
			while (isspace (*buf)) buf++;
    2cfc:	02f11a01 	rscseq	r1, r1, #4096	; 0x1000
    2d00:	0e210000 	cdpeq	0, 2, cr0, cr1, cr0, {0}
    2d04:	88200000 	stmdahi	r0!, {}	; <UNPREDICTABLE>
    2d08:	0100000f 	tsteq	r0, pc
    2d0c:	1d26012c 	stfnes	f0, [r6, #-176]!	; 0xffffff50
    2d10:	3f000001 	svccc	0x00000001
			if (*buf == '\0')
    2d14:	2300000e 	movwcs	r0, #14
			if (*buf != ',') {
    2d18:	2e010069 	cdpcs	0, 0, cr0, cr1, cr9, {3}
			sap = va_arg (ap, char*);
    2d1c:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
			nc++;
    2d20:	50010000 	andpl	r0, r1, r0
			if (*buf != ',') {
    2d24:	00060836 	andeq	r0, r6, r6, lsr r8
				while (!isspace (*buf) && *buf != ',' &&
    2d28:	006a2200 	rsbeq	r2, sl, r0, lsl #4
    2d2c:	0f013d01 	svceq	0x00013d01
    2d30:	00000416 	andeq	r0, r0, r6, lsl r4
    2d34:	00000e5d 	andeq	r0, r0, sp, asr lr
    2d38:	01370000 	teqeq	r7, r0
    2d3c:	00000c7b 	andeq	r0, r0, fp, ror ip
    2d40:	0106af01 	tsteq	r6, r1, lsl #30
			while (isspace (*buf)) buf++;
    2d44:	000fe301 	andeq	lr, pc, r1, lsl #6
    2d48:	696d3800 	stmdbvs	sp!, {fp, ip, sp}^
    2d4c:	af01006e 	svcge	0x0001006e
    2d50:	0000d91a 	andeq	sp, r0, sl, lsl r9
    2d54:	08803900 	stmeq	r0, {r8, fp, ip, sp}
			if (*buf == ',') buf++;
    2d58:	af010000 	svcge	0x00010000
    2d5c:	0000cd27 	andeq	ip, r0, r7, lsr #26
			*sap = '\0';
    2d60:	00693a00 	rsbeq	r3, r9, r0, lsl #20
			break;
    2d64:	160ebd01 	strne	fp, [lr], -r1, lsl #26
		    case 'd': scani (word); break;
    2d68:	3a000004 	bcc	2d80 <vscan+0xdc>
    2d6c:	be010064 	cdplt	0, 0, cr0, cr1, cr4, {3}
    2d70:	0000d907 	andeq	sp, r0, r7, lsl #18
    2d74:	4f4d3b00 	svcmi	0x004d3b00
    2d78:	0901004b 	stmdbeq	r1, {r0, r1, r3, r6}
    2d7c:	3c000101 	stfccs	f0, [r0], {1}
    2d80:	000cb301 	andeq	fp, ip, r1, lsl #6
    2d84:	06a70100 	strteq	r0, [r7], r0, lsl #2
    2d88:	000fe401 	andeq	lr, pc, r1, lsl #8
    2d8c:	000fea00 	andeq	lr, pc, r0, lsl #20
    2d90:	189c0100 	ldmne	ip, {r8}
    2d94:	3d000010 	stccc	0, cr0, [r0, #-64]	; 0xffffffc0
    2d98:	a7010074 	smlsdxge	r1, r4, r0, r0
    2d9c:	0001291f 	andeq	r2, r1, pc, lsl r9
    2da0:	000e8600 	andeq	r8, lr, r0, lsl #12
    2da4:	00763d00 	rsbseq	r3, r6, r0, lsl #26
    2da8:	d927a701 	stmdble	r7!, {r0, r8, r9, sl, sp, pc}
    2dac:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    2db0:	0000000e 	andeq	r0, r0, lr
    2db4:	0d02013c 	stfeqs	f0, [r2, #-240]	; 0xffffff10
    2db8:	8f010000 	svchi	0x00010000
    2dbc:	00000106 	andeq	r0, r0, r6, lsl #2
    2dc0:	00000000 	andeq	r0, r0, r0
    2dc4:	9c010000 	stcls	0, cr0, [r1], {-0}
    2dc8:	0000104e 	andeq	r1, r0, lr, asr #32
    2dcc:	0074753d 	rsbseq	r7, r4, sp, lsr r5
    2dd0:	291d8f01 	ldmdbcs	sp, {r0, r8, r9, sl, fp, pc}
    2dd4:	ac000001 	stcge	0, cr0, [r0], {1}
		    case 'u': scanu (word); break;
    2dd8:	3e00000e 	cdpcc	0, 0, cr0, cr0, cr14, {0}
    2ddc:	93010069 	movwls	r0, #4201	; 0x1069
    2de0:	00008d06 	andeq	r8, r0, r6, lsl #26
    2de4:	000eca00 	andeq	ip, lr, r0, lsl #20
    2de8:	013c0000 	teqeq	ip, r0
    2dec:	00000b2c 	andeq	r0, r0, ip, lsr #22
    2df0:	01067f01 	tsteq	r6, r1, lsl #30
    2df4:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    2df8:	00000fe4 	andeq	r0, r0, r4, ror #31
    2dfc:	10849c01 	addne	r9, r4, r1, lsl #24
    2e00:	753d0000 	ldrvc	r0, [sp, #-0]!
    2e04:	7f010074 	svcvc	0x00010074
    2e08:	0001291a 	andeq	r2, r1, sl, lsl r9
    2e0c:	000ee800 	andeq	lr, lr, r0, lsl #16
    2e10:	00693e00 	rsbeq	r3, r9, r0, lsl #28
    2e14:	8d068301 	stchi	3, cr8, [r6, #-4]
    2e18:	11000000 	mrsne	r0, (UNDEF: 0)
    2e1c:	0000000f 	andeq	r0, r0, pc
		    case 'x': scanx (word); break;
    2e20:	0c30013f 	ldfeqs	f0, [r0], #-252	; 0xffffff04
    2e24:	7b010000 	blvc	42e2c <__ccfg+0x22e84>
    2e28:	0fa80106 	svceq	0x00a80106
    2e2c:	0fb80000 	svceq	0x00b80000
    2e30:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e34:	000beb40 	andeq	lr, fp, r0, asr #22
    2e38:	145f0100 	ldrbne	r0, [pc], #-256	; 2e40 <vscan+0x19c>
    2e3c:	00041601 	andeq	r1, r4, r1, lsl #12
    2e40:	10c10100 	sbcne	r0, r1, r0, lsl #2
    2e44:	70380000 	eorsvc	r0, r8, r0
    2e48:	01006469 	tsteq	r0, r9, ror #8
    2e4c:	011d225f 	tsteq	sp, pc, asr r2
    2e50:	693a0000 	ldmdbvs	sl!, {}	; <UNPREDICTABLE>
    2e54:	17610100 	strbne	r0, [r1, -r0, lsl #2]!
    2e58:	00000416 	andeq	r0, r0, r6, lsl r4
    2e5c:	0b374100 	bleq	dd3264 <__ccfg+0xdb32bc>
    2e60:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
    2e64:	e2010102 	and	r0, r1, #-2147483648	; 0x80000000
    2e68:	03000010 	movweq	r0, #16
    2e6c:	000010e2 	andeq	r1, r0, r2, ror #1
    2e70:	0007f835 	andeq	pc, r7, r5, lsr r8	; <UNPREDICTABLE>
    2e74:	029e0200 	addseq	r0, lr, #0, 4
    2e78:	00007313 	andeq	r7, r0, r3, lsl r3
    2e7c:	01020000 	mrseq	r0, (UNDEF: 2)
    2e80:	000c6f02 	andeq	r6, ip, r2, lsl #30
    2e84:	10984200 	addsne	r4, r8, r0, lsl #4
	...
    2e90:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e94:	0000112e 	andeq	r1, r0, lr, lsr #2
			switch (*fmt++) {
    2e98:	0010aa43 	andseq	sl, r0, r3, asr #20
    2e9c:	000f2f00 	andeq	r2, pc, r0, lsl #30
    2ea0:	10b64400 	adcsne	r4, r6, r0, lsl #8
    2ea4:	0f580000 	svceq	0x00580000
    2ea8:	98450000 	stmdals	r5, {}^	; <UNPREDICTABLE>
    2eac:	00000010 	andeq	r0, r0, r0, lsl r0
		    	    case 'd': scani (lword); break;
    2eb0:	00000000 	andeq	r0, r0, r0
    2eb4:	01000000 	mrseq	r0, (UNDEF: 0)
    2eb8:	aa43145f 	bge	10c803c <__ccfg+0x10a8094>
    2ebc:	76000010 			; <UNDEFINED> instruction: 0x76000010
    2ec0:	4600000f 	strmi	r0, [r0], -pc
    2ec4:	000010b6 	strheq	r1, [r0], -r6
    2ec8:	9e420000 	cdpls	0, 4, cr0, cr2, cr0, {0}
    2ecc:	ec00000f 	stc	0, cr0, [r0], {15}
    2ed0:	b800000f 	stmdalt	r0, {r0, r1, r2, r3}
    2ed4:	01000010 	tsteq	r0, r0, lsl r0
    2ed8:	00119a9c 	mulseq	r1, ip, sl
    2edc:	0fad4300 	svceq	0x00ad4300
    2ee0:	0f890000 	svceq	0x00890000
    2ee4:	b9430000 	stmdblt	r3, {}^	; <UNPREDICTABLE>
    2ee8:	9c00000f 	stcls	0, cr0, [r0], {15}
    2eec:	4600000f 	strmi	r0, [r0], -pc
    2ef0:	00000fc5 	andeq	r0, r0, r5, asr #31
    2ef4:	000fcf46 	andeq	ip, pc, r6, asr #30
    2ef8:	0f9e4700 	svceq	0x009e4700
    2efc:	0ffa0000 	svceq	0x00fa0000
    2f00:	05f00000 	ldrbeq	r0, [r0, #0]!
    2f04:	af010000 	svcge	0x00010000
    2f08:	0fb92906 	svceq	0x00b92906
		    	    case 'x': scanx (lword); break;
    2f0c:	ad430000 	stclge	0, cr0, [r3, #-0]
    2f10:	af00000f 	svcge	0x0000000f
    2f14:	3600000f 	strcc	r0, [r0], -pc
    2f18:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2f1c:	000fc544 	andeq	ip, pc, r4, asr #10
    2f20:	000fd800 	andeq	sp, pc, r0, lsl #16
    2f24:	0fcf4600 	svceq	0x00cf4600
    2f28:	d9480000 	stmdble	r8, {}^	; <UNPREDICTABLE>
    2f2c:	9600000f 	strls	r0, [r0], -pc
    2f30:	00000010 	andeq	r0, r0, r0, lsl r0
    2f34:	db420000 	blle	1082f3c <__ccfg+0x1062f94>
    2f38:	cc00000e 	stcgt	0, cr0, [r0], {14}
    2f3c:	00000010 	andeq	r0, r0, r0, lsl r0
    2f40:	01000011 	tsteq	r0, r1, lsl r0
    2f44:	0011ee9c 	mulseq	r1, ip, lr
    2f48:	0eeb4300 	cdpeq	3, 14, cr4, cr11, cr0, {0}
    2f4c:	0ff60000 	svceq	0x00f60000
    2f50:	f8430000 			; <UNDEFINED> instruction: 0xf8430000
    2f54:	1400000e 	strne	r0, [r0], #-14
    2f58:	46000010 			; <UNDEFINED> instruction: 0x46000010
    2f5c:	00000f05 	andeq	r0, r0, r5, lsl #30
    2f60:	000edb49 	andeq	sp, lr, r9, asr #22
    2f64:	0010de00 	andseq	sp, r0, r0, lsl #28
    2f68:	0010e600 	andseq	lr, r0, r0, lsl #12
    2f6c:	01590100 	cmpeq	r9, r0, lsl #2
    2f70:	0eeb4306 	cdpeq	3, 14, cr4, cr11, cr6, {0}
    2f74:	10320000 	eorsne	r0, r2, r0
    2f78:	f8430000 			; <UNDEFINED> instruction: 0xf8430000
		    	    case 'd': scani (lword); break;
    2f7c:	4500000e 	strmi	r0, [r0, #-14]
    2f80:	46000010 			; <UNDEFINED> instruction: 0x46000010
    2f84:	00000f05 	andeq	r0, r0, r5, lsl #30
    2f88:	804a0000 	subhi	r0, sl, r0
    2f8c:	04000008 	streq	r0, [r0], #-8
    2f90:	4c000013 	stcmi	0, cr0, [r0], {19}
    2f94:	01000013 	tsteq	r0, r3, lsl r0
		    	    case 'u': scanu (lword); break;
    2f98:	0890439c 	ldmeq	r0, {r2, r3, r4, r7, r8, r9, lr}
    2f9c:	10580000 	subsne	r0, r8, r0
    2fa0:	80490000 	subhi	r0, r9, r0
    2fa4:	10000008 	andne	r0, r0, r8
    2fa8:	18000013 	stmdane	r0, {r0, r1, r4}
    2fac:	01000013 	tsteq	r0, r3, lsl r0
    2fb0:	4306037c 	movwmi	r0, #25468	; 0x637c
    2fb4:	00000890 	muleq	r0, r0, r8
    2fb8:	00001076 	andeq	r1, r0, r6, ror r0
    2fbc:	33000000 	movwcc	r0, #0
    2fc0:	03000013 	movweq	r0, #19
    2fc4:	000c8900 	andeq	r8, ip, r0, lsl #18
    2fc8:	81010400 	tsthi	r1, r0, lsl #8
    2fcc:	0c000001 	stceq	0, cr0, [r0], {1}
    2fd0:	00000d51 	andeq	r0, r0, r1, asr sp
    2fd4:	00000406 	andeq	r0, r0, r6, lsl #8
    2fd8:	000007f8 	strdeq	r0, [r0], -r8
    2fdc:	00000000 	andeq	r0, r0, r0
		    	    case 'x': scanx (lword); break;
    2fe0:	00002884 	andeq	r2, r0, r4, lsl #17
    2fe4:	e5060102 	str	r0, [r6, #-258]	; 0xfffffefe
			if ((c = *buf++) == '\0')
    2fe8:	02000003 	andeq	r0, r0, #3
    2fec:	04460502 	strbeq	r0, [r6], #-1282	; 0xfffffafe
			sap = va_arg (ap, char*);
    2ff0:	04020000 	streq	r0, [r2], #-0
			nc++;
    2ff4:	0000b405 	andeq	fp, r0, r5, lsl #8
			break;
    2ff8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
			while (isspace (*buf)) buf++;
    2ffc:	000000af 	andeq	r0, r0, pc, lsr #1
    3000:	00239b03 	eoreq	r9, r3, r3, lsl #22
    3004:	182e0200 	stmdane	lr!, {r9}
						*sap++ = *buf++;
    3008:	0000004d 	andeq	r0, r0, sp, asr #32
    300c:	e3080102 	movw	r0, #33026	; 0x8102
			while (isspace (*buf)) buf++;
    3010:	03000003 	movweq	r0, #3
    3014:	00002791 	muleq	r0, r1, r7
    3018:	60193102 	andsvs	r3, r9, r2, lsl #2
		return 0;
    301c:	02000000 	andeq	r0, r0, #0
    3020:	028a0702 	addeq	r0, sl, #524288	; 0x80000
		    case 'x': scanx (word); break;
    3024:	33030000 	movwcc	r0, #12288	; 0x3000
    3028:	02000023 	andeq	r0, r0, #35	; 0x23
		    	    case 'x': scanx (lword); break;
    302c:	00731934 	rsbseq	r1, r3, r4, lsr r9
    3030:	04020000 	streq	r0, [r2], #-0
    3034:	00007e07 	andeq	r7, r0, r7, lsl #28
    3038:	07080200 	streq	r0, [r8, -r0, lsl #4]
    303c:	00000079 	andeq	r0, r0, r9, ror r0
    3040:	69050404 	stmdbvs	r5, {r2, sl}
    3044:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    3048:	00830704 	addeq	r0, r3, r4, lsl #14
    304c:	6c030000 	stcvs	0, cr0, [r3], {-0}
    3050:	03000003 	movweq	r0, #3
    3054:	009b1b28 	addseq	r1, fp, r8, lsr #22
    3058:	e2050000 	and	r0, r5, #0
    305c:	04000000 	streq	r0, [r0], #-0
    3060:	00b3000d 	adcseq	r0, r3, sp
    3064:	f7060000 			; <UNDEFINED> instruction: 0xf7060000
    3068:	b3000004 	movwlt	r0, #4
    306c:	00000000 	andeq	r0, r0, r0
    3070:	04070001 	streq	r0, [r7], #-1
    3074:	0000e403 	andeq	lr, r0, r3, lsl #8
    3078:	18630300 	stmdane	r3!, {r8, r9}^
    307c:	0000008f 	andeq	r0, r0, pc, lsl #1
    3080:	00047d03 	andeq	r7, r4, r3, lsl #26
    3084:	12260400 	eorne	r0, r6, #0, 8
    3088:	00000041 	andeq	r0, r0, r1, asr #32
    308c:	00227c03 	eoreq	r7, r2, r3, lsl #24
    3090:	12270400 	eorne	r0, r7, #0, 8
    3094:	00000054 	andeq	r0, r0, r4, asr r0
    3098:	0000cd08 	andeq	ip, r0, r8, lsl #26
    309c:	00cd0900 	sbceq	r0, sp, r0, lsl #18
    30a0:	fc030000 	stc2	0, cr0, [r3], {-0}
    30a4:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    30a8:	0041122b 	subeq	r1, r1, fp, lsr #4
    30ac:	e3090000 	movw	r0, #36864	; 0x9000
    30b0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    30b4:	000000e3 	andeq	r0, r0, r3, ror #1
    30b8:	0022cd03 	eoreq	ip, r2, r3, lsl #26
    30bc:	122c0400 	eorne	r0, ip, #0, 8
    30c0:	00000067 	andeq	r0, r0, r7, rrx
    30c4:	0000f908 	andeq	pc, r0, r8, lsl #18
    30c8:	02ef0300 	rsceq	r0, pc, #0, 6
    30cc:	2d040000 	stccs	0, cr0, [r4, #-0]
    30d0:	00006712 	andeq	r6, r0, r2, lsl r7
    30d4:	03640300 	cmneq	r4, #0, 6
    30d8:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    30dc:	00012210 	andeq	r2, r1, r0, lsl r2
    30e0:	cd040a00 	vstrgt	s0, [r4, #-0]
    30e4:	0b000000 	bleq	30ec <NOROM_OSCClockSourceSet+0x18>
    30e8:	09320408 	ldmdbeq	r2!, {r3, sl}
    30ec:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    30f0:	0003180c 	andeq	r1, r3, ip, lsl #16
    30f4:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    30f8:	000000e3 	andeq	r0, r0, r3, ror #1
    30fc:	00070101 	andeq	r0, r7, r1, lsl #2
    3100:	00009e0c 	andeq	r9, r0, ip, lsl #28
    3104:	03350400 	teqeq	r5, #0, 8
    3108:	000000e3 	andeq	r0, r0, r3, ror #1
    310c:	00060101 	andeq	r0, r6, r1, lsl #2
    3110:	0002bf0c 	andeq	fp, r2, ip, lsl #30
    3114:	03360400 	teqeq	r6, #0, 8
    3118:	000000e3 	andeq	r0, r0, r3, ror #1
    311c:	00050101 	andeq	r0, r5, r1, lsl #2
    3120:	00048c0c 	andeq	r8, r4, ip, lsl #24
    3124:	03370400 	teqeq	r7, #0, 8
    3128:	000000e3 	andeq	r0, r0, r3, ror #1
    312c:	00040101 	andeq	r0, r4, r1, lsl #2
    3130:	0004850c 	andeq	r8, r4, ip, lsl #10
    3134:	03380400 	teqeq	r8, #0, 8
    3138:	000000e3 	andeq	r0, r0, r3, ror #1
    313c:	00000401 	andeq	r0, r0, r1, lsl #8
    3140:	0004760d 	andeq	r7, r4, sp, lsl #12
    3144:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    3148:	000000e3 	andeq	r0, r0, r3, ror #1
    314c:	002b0d01 	eoreq	r0, fp, r1, lsl #26
    3150:	3c040000 	stccc	0, cr0, [r4], {-0}
    3154:	0000e303 	andeq	lr, r0, r3, lsl #6
    3158:	720d0200 	andvc	r0, sp, #0, 4
    315c:	04000000 	streq	r0, [r0], #-0
    3160:	00e3033d 	rsceq	r0, r3, sp, lsr r3
    3164:	0d030000 	stceq	0, cr0, [r3, #-0]
    3168:	0000014f 	andeq	r0, r0, pc, asr #2
    316c:	f9083f04 			; <UNDEFINED> instruction: 0xf9083f04
    3170:	04000000 	streq	r0, [r0], #-0
    3174:	04d40300 	ldrbeq	r0, [r4], #768	; 0x300
    3178:	41040000 	mrsmi	r0, (UNDEF: 4)
    317c:	00012803 	andeq	r2, r1, r3, lsl #16
    3180:	01b60900 			; <UNDEFINED> instruction: 0x01b60900
    3184:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    3188:	04000003 	streq	r0, [r0], #-3
    318c:	01c21a43 	biceq	r1, r2, r3, asr #20
    3190:	01010000 	mrseq	r0, (UNDEF: 1)
    3194:	00038e0e 	andeq	r8, r3, lr, lsl #28
    3198:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    319c:	000001e3 	andeq	r0, r0, r3, ror #3
    31a0:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    31a4:	000001e9 	andeq	r0, r0, r9, ror #3
    31a8:	ec080102 	stfs	f0, [r8], {2}
    31ac:	08000003 	stmdaeq	r0, {r0, r1}
    31b0:	000001e9 	andeq	r0, r0, r9, ror #3
    31b4:	0003a40e 	andeq	sl, r3, lr, lsl #8
    31b8:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    31bc:	000001e3 	andeq	r0, r0, r3, ror #3
    31c0:	080b0101 	stmdaeq	fp, {r0, r8}
    31c4:	34098f05 	strcc	r8, [r9], #-3845	; 0xfffff0fb
    31c8:	0d000002 	stceq	0, cr0, [r0, #-8]
    31cc:	000019fd 	strdeq	r1, [r0], -sp
    31d0:	670b9005 	strvs	r9, [fp, -r5]
    31d4:	00000000 	andeq	r0, r0, r0
    31d8:	0006b30d 	andeq	fp, r6, sp, lsl #6
    31dc:	08910500 	ldmeq	r1, {r8, sl}
    31e0:	000000cd 	andeq	r0, r0, sp, asr #1
    31e4:	15be0d04 	ldrne	r0, [lr, #3332]!	; 0xd04
    31e8:	92050000 	andls	r0, r5, #0
    31ec:	0000ef10 	andeq	lr, r0, r0, lsl pc
    31f0:	03000600 	movweq	r0, #1536	; 0x600
    31f4:	00000493 	muleq	r0, r3, r4
    31f8:	03039305 	movweq	r9, #13061	; 0x3305
    31fc:	0f000002 	svceq	0x00000002
    3200:	00000234 	andeq	r0, r0, r4, lsr r2
    3204:	0000024b 	andeq	r0, r0, fp, asr #4
    3208:	210e0010 	tstcs	lr, r0, lsl r0
    320c:	05000000 	streq	r0, [r0, #-0]
    3210:	02400f99 	subeq	r0, r0, #612	; 0x264
    3214:	01010000 	mrseq	r0, (UNDEF: 1)
    3218:	00f4040a 	rscseq	r0, r4, sl, lsl #8
    321c:	010b0000 	mrseq	r0, (UNDEF: 11)
    3220:	89099106 	stmdbhi	r9, {r1, r2, r8, ip, pc}
    3224:	0c000002 	stceq	0, cr0, [r0], {2}
    3228:	0000050c 	andeq	r0, r0, ip, lsl #10
    322c:	e3079306 	movw	r9, #29446	; 0x7306
    3230:	01000000 	mrseq	r0, (UNDEF: 0)
    3234:	0c000107 	stfeqs	f0, [r0], {7}
    3238:	0000001c 	andeq	r0, r0, ip, lsl r0
    323c:	e3039406 	movw	r9, #13318	; 0x3406
    3240:	01000000 	mrseq	r0, (UNDEF: 0)
    3244:	00000001 	andeq	r0, r0, r1
    3248:	00029d03 	andeq	r9, r2, r3, lsl #26
    324c:	03960600 	orrseq	r0, r6, #0, 12
    3250:	0000025f 	andeq	r0, r0, pc, asr r2
    3254:	00028908 	andeq	r8, r2, r8, lsl #18
    3258:	02950f00 	addseq	r0, r5, #0, 30
    325c:	02a50000 	adceq	r0, r5, #0
    3260:	00100000 	andseq	r0, r0, r0
    3264:	00029a08 	andeq	r9, r2, r8, lsl #20
    3268:	03570e00 	cmpeq	r7, #0, 28
    326c:	9c060000 	stcls	0, cr0, [r6], {-0}
    3270:	0002a517 	andeq	sl, r2, r7, lsl r5
    3274:	0f010100 	svceq	0x00010100
    3278:	000000d9 	ldrdeq	r0, [r0], -r9
    327c:	000002c3 	andeq	r0, r0, r3, asr #5
    3280:	b8080010 	stmdalt	r8, {r4}
    3284:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    3288:	000003d5 	ldrdeq	r0, [r0], -r5
    328c:	c3130607 	tstgt	r3, #7340032	; 0x700000
    3290:	01000002 	tsteq	r0, r2
    3294:	01340e01 	teqeq	r4, r1, lsl #28
    3298:	c3050000 	movwgt	r0, #20480	; 0x5000
    329c:	0000f90e 	andeq	pc, r0, lr, lsl #18
    32a0:	11010100 	mrsne	r0, (UNDEF: 17)
    32a4:	00000548 	andeq	r0, r0, r8, asr #10
    32a8:	10016e08 	andne	r6, r1, r8, lsl #28
    32ac:	000002f1 	strdeq	r0, [r0], -r1
    32b0:	02f7040a 	rscseq	r0, r7, #167772160	; 0xa000000
    32b4:	01120000 	tsteq	r2, r0
    32b8:	00000303 	andeq	r0, r0, r3, lsl #6
    32bc:	0000cd13 	andeq	ip, r0, r3, lsl sp
    32c0:	f00f0000 			; <UNDEFINED> instruction: 0xf00f0000
    32c4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    32c8:	10000003 	andne	r0, r0, r3
    32cc:	03030800 	movweq	r0, #14336	; 0x3800
    32d0:	e4140000 	ldr	r0, [r4], #-0
    32d4:	08000004 	stmdaeq	r0, {r2}
    32d8:	0e16017f 	mrceq	1, 0, r0, cr6, cr15, {3}
    32dc:	01000003 	tsteq	r0, r3
    32e0:	03c11401 	biceq	r1, r1, #16777216	; 0x1000000
    32e4:	82080000 	andhi	r0, r8, #0
    32e8:	01051401 	tsteq	r5, r1, lsl #8
    32ec:	01010000 	mrseq	r0, (UNDEF: 1)
    32f0:	0809040b 	stmdaeq	r9, {r0, r1, r3, sl}
    32f4:	00035509 	andeq	r5, r3, r9, lsl #10
    32f8:	049a0d00 	ldreq	r0, [sl], #3328	; 0xd00
    32fc:	0f090000 	svceq	0x00090000
    3300:	0000cd07 	andeq	ip, r0, r7, lsl #26
    3304:	470d0000 	strmi	r0, [sp, -r0]
    3308:	09000003 	stmdbeq	r0, {r0, r1}
    330c:	00cd0310 	sbceq	r0, sp, r0, lsl r3
    3310:	00020000 	andeq	r0, r2, r0
    3314:	00045003 	andeq	r5, r4, r3
    3318:	03110900 	tsteq	r1, #0, 18
    331c:	00000331 	andeq	r0, r0, r1, lsr r3
    3320:	1609200b 	strne	r2, [r9], -fp
    3324:	0003d309 	andeq	sp, r3, r9, lsl #6
    3328:	04360d00 	ldrteq	r0, [r6], #-3328	; 0xfffff300
    332c:	17090000 	strne	r0, [r9, -r0]
    3330:	0003ed08 	andeq	lr, r3, r8, lsl #26
    3334:	470d0000 	strmi	r0, [sp, -r0]
    3338:	09000001 	stmdbeq	r0, {r0}
    333c:	04080818 	streq	r0, [r8], #-2072	; 0xfffff7e8
    3340:	0d040000 	stceq	0, cr0, [r4, #-0]
    3344:	000002e7 	andeq	r0, r0, r7, ror #5
    3348:	3e081909 	vmlacc.f16	s2, s16, s18	; <UNPREDICTABLE>
    334c:	08000004 	stmdaeq	r0, {r2}
    3350:	00039c0d 	andeq	r9, r3, sp, lsl #24
    3354:	081a0900 	ldmdaeq	sl, {r8, fp}
    3358:	00000459 	andeq	r0, r0, r9, asr r4
    335c:	01790d0c 	cmneq	r9, ip, lsl #26
    3360:	1b090000 	blne	243368 <__ccfg+0x2233c0>
    3364:	00046f08 	andeq	r6, r4, r8, lsl #30
    3368:	3e0d1000 	cdpcc	0, 0, cr1, cr13, cr0, {0}
    336c:	09000004 	stmdbeq	r0, {r2}
    3370:	046f081c 	strbteq	r0, [pc], #-2076	; 3378 <NOROM_RFCRfTrimRead+0xfc>
    3374:	0d140000 	ldceq	0, cr0, [r4, #-0]
    3378:	00000282 	andeq	r0, r0, r2, lsl #5
    337c:	6f081d09 	svcvs	0x00081d09
    3380:	18000004 	stmdane	r0, {r2}
    3384:	0000bd0d 	andeq	fp, r0, sp, lsl #26
    3388:	061e0900 	ldreq	r0, [lr], -r0, lsl #18
    338c:	00000081 	andeq	r0, r0, r1, lsl #1
    3390:	0115001c 	tsteq	r5, ip, lsl r0
    3394:	00000081 	andeq	r0, r0, r1, lsl #1
    3398:	000003ed 	andeq	r0, r0, sp, ror #7
    339c:	00008113 	andeq	r8, r0, r3, lsl r1
    33a0:	00811300 	addeq	r1, r1, r0, lsl #6
    33a4:	b5130000 	ldrlt	r0, [r3, #-0]
    33a8:	00000000 	andeq	r0, r0, r0
    33ac:	03d3040a 	bicseq	r0, r3, #167772160	; 0xa000000
    33b0:	01150000 	tsteq	r5, r0
    33b4:	00000081 	andeq	r0, r0, r1, lsl #1
    33b8:	00000408 	andeq	r0, r0, r8, lsl #8
    33bc:	00008113 	andeq	r8, r0, r3, lsl r1
    33c0:	00811300 	addeq	r1, r1, r0, lsl #6
    33c4:	0a000000 	beq	33cc <NOROM_RFCRTrim>
    33c8:	0003f304 	andeq	pc, r3, r4, lsl #6
    33cc:	81011500 	tsthi	r1, r0, lsl #10
    33d0:	32000000 	andcc	r0, r0, #0
    33d4:	13000004 	movwne	r0, #4
    33d8:	00000081 	andeq	r0, r0, r1, lsl #1
    33dc:	00011613 	andeq	r1, r1, r3, lsl r6
    33e0:	00811300 	addeq	r1, r1, r0, lsl #6
    33e4:	32130000 	andscc	r0, r3, #0
    33e8:	13000004 	movwne	r0, #4
    33ec:	00000438 	andeq	r0, r0, r8, lsr r4
    33f0:	81040a00 	tsthi	r4, r0, lsl #20
    33f4:	0a000000 	beq	33fc <NOROM_RFCRTrim+0x30>
    33f8:	00035504 	andeq	r5, r3, r4, lsl #10
    33fc:	0e040a00 	vmlaeq.f32	s0, s8, s0
    3400:	15000004 	strne	r0, [r0, #-4]
    3404:	00008101 	andeq	r8, r0, r1, lsl #2
    3408:	00045900 	andeq	r5, r4, r0, lsl #18
    340c:	01161300 	tsteq	r6, r0, lsl #6
    3410:	38130000 	ldmdacc	r3, {}	; <UNPREDICTABLE>
    3414:	00000004 	andeq	r0, r0, r4
    3418:	0444040a 	strbeq	r0, [r4], #-1034	; 0xfffffbf6
    341c:	01150000 	tsteq	r5, r0
    3420:	00000081 	andeq	r0, r0, r1, lsl #1
    3424:	0000046f 	andeq	r0, r0, pc, ror #8
    3428:	00011613 	andeq	r1, r1, r3, lsl r6
    342c:	040a0000 	streq	r0, [sl], #-0
    3430:	0000045f 	andeq	r0, r0, pc, asr r4
    3434:	0000a503 	andeq	sl, r0, r3, lsl #10
    3438:	031f0900 	tsteq	pc, #0, 18
    343c:	00000361 	andeq	r0, r0, r1, ror #6
    3440:	00047508 	andeq	r7, r4, r8, lsl #10
    3444:	0dfb1600 	ldcleq	6, cr1, [fp]
    3448:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    344c:	04ae0824 	strteq	r0, [lr], #2084	; 0x824
    3450:	c00d0000 	andgt	r0, sp, r0
    3454:	09000020 	stmdbeq	r0, {r5}
    3458:	04ae1825 	strteq	r1, [lr], #2085	; 0x825
    345c:	0d000000 	stceq	0, cr0, [r0, #-0]
    3460:	00000d27 	andeq	r0, r0, r7, lsr #26
    3464:	ae062609 	cfmadd32ge	mvax0, mvfx2, mvfx6, mvfx9
    3468:	04000004 	streq	r0, [r0], #-4
    346c:	86040a00 	strhi	r0, [r4], -r0, lsl #20
    3470:	03000004 	movweq	r0, #4
    3474:	00000e09 	andeq	r0, r0, r9, lsl #28
    3478:	861e2909 	ldrhi	r2, [lr], -r9, lsl #18
    347c:	03000004 	movweq	r0, #4
    3480:	00000f17 	andeq	r0, r0, r7, lsl pc
    3484:	861e2a09 	ldrhi	r2, [lr], -r9, lsl #20
    3488:	0b000004 	bleq	34a0 <NOROM_RFCRTrim+0xd4>
    348c:	023f0902 	eorseq	r0, pc, #32768	; 0x8000
    3490:	00000536 	andeq	r0, r0, r6, lsr r5
    3494:	000ebb0c 	andeq	fp, lr, ip, lsl #22
    3498:	09400900 	stmdbeq	r0, {r8, fp}^
    349c:	000000cd 	andeq	r0, r0, sp, asr #1
    34a0:	000f0102 	andeq	r0, pc, r2, lsl #2
    34a4:	000f690c 	andeq	r6, pc, ip, lsl #18
    34a8:	04410900 	strbeq	r0, [r1], #-2304	; 0xfffff700
    34ac:	000000cd 	andeq	r0, r0, sp, asr #1
    34b0:	000e0102 	andeq	r0, lr, r2, lsl #2
    34b4:	000e2b0c 	andeq	r2, lr, ip, lsl #22
    34b8:	04420900 	strbeq	r0, [r2], #-2304	; 0xfffff700
    34bc:	000000cd 	andeq	r0, r0, sp, asr #1
    34c0:	000d0102 	andeq	r0, sp, r2, lsl #2
    34c4:	000ed40c 	andeq	sp, lr, ip, lsl #8
    34c8:	04430900 	strbeq	r0, [r3], #-2304	; 0xfffff700
    34cc:	000000cd 	andeq	r0, r0, sp, asr #1
    34d0:	00060702 	andeq	r0, r6, r2, lsl #14
    34d4:	000f250c 	andeq	r2, pc, ip, lsl #10
    34d8:	04440900 	strbeq	r0, [r4], #-2304	; 0xfffff700
    34dc:	000000cd 	andeq	r0, r0, sp, asr #1
    34e0:	00030302 	andeq	r0, r3, r2, lsl #6
    34e4:	000ead0c 	andeq	sl, lr, ip, lsl #26
    34e8:	04450900 	strbeq	r0, [r5], #-2304	; 0xfffff700
    34ec:	000000cd 	andeq	r0, r0, sp, asr #1
    34f0:	00000302 	andeq	r0, r0, r2, lsl #6
    34f4:	09021700 	stmdbeq	r2, {r8, r9, sl, ip}
    34f8:	0556093d 	ldrbeq	r0, [r6, #-2365]	; 0xfffff6c3
    34fc:	90180000 	andsls	r0, r8, r0
    3500:	09000018 	stmdbeq	r0, {r3, r4}
    3504:	00cd073e 	sbceq	r0, sp, lr, lsr r7
    3508:	62190000 	andsvs	r0, r9, #0
    350c:	04460900 	strbeq	r0, [r6], #-2304	; 0xfffff700
    3510:	000004cc 	andeq	r0, r0, ip, asr #9
    3514:	0d2c0300 	stceq	3, cr0, [ip, #-0]
    3518:	47090000 	strmi	r0, [r9, -r0]
    351c:	00053603 	andeq	r3, r5, r3, lsl #12
    3520:	09081700 	stmdbeq	r8, {r8, r9, sl, ip}
    3524:	05840550 	streq	r0, [r4, #1360]	; 0x550
    3528:	4b180000 	blmi	603530 <__ccfg+0x5e3588>
    352c:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    3530:	04b41051 	ldrteq	r1, [r4], #81	; 0x51
    3534:	6c180000 	ldcvs	0, cr0, [r8], {-0}
    3538:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    353c:	03550b52 	cmpeq	r5, #83968	; 0x14800
    3540:	16000000 	strne	r0, [r0], -r0
    3544:	00000f5a 	andeq	r0, r0, sl, asr pc
    3548:	084c090c 	stmdaeq	ip, {r2, r3, r8, fp}^
    354c:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    3550:	0900751a 	stmdbeq	r0, {r1, r3, r4, r8, sl, ip, sp, lr}
    3554:	05620758 	strbeq	r0, [r2, #-1880]!	; 0xfffff8a8
    3558:	0d000000 	stceq	0, cr0, [r0, #-0]
    355c:	00000f2c 	andeq	r0, r0, ip, lsr #30
    3560:	cd076309 	stcgt	3, cr6, [r7, #-36]	; 0xffffffdc
    3564:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3568:	000f0c0d 	andeq	r0, pc, sp, lsl #24
    356c:	10680900 	rsbne	r0, r8, r0, lsl #18
    3570:	00000556 	andeq	r0, r0, r6, asr r5
    3574:	1703000a 	strne	r0, [r3, -sl]
    3578:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    357c:	05841f79 	streq	r1, [r4, #3961]	; 0xf79
    3580:	0c0b0000 	stceq	0, cr0, [fp], {-0}
    3584:	e7097b09 	str	r7, [r9, -r9, lsl #22]
    3588:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    358c:	00000e60 	andeq	r0, r0, r0, ror #28
    3590:	c0117f09 	andsgt	r7, r1, r9, lsl #30
    3594:	00000004 	andeq	r0, r0, r4
    3598:	000e880d 	andeq	r8, lr, sp, lsl #16
    359c:	11830900 	orrne	r0, r3, r0, lsl #18
    35a0:	00000556 	andeq	r0, r0, r6, asr r5
    35a4:	9d030008 	stcls	0, cr0, [r3, #-32]	; 0xffffffe0
    35a8:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    35ac:	05c30392 	strbeq	r0, [r3, #914]	; 0x392
    35b0:	11140000 	tstne	r4, r0
    35b4:	08000005 	stmdaeq	r0, {r0, r2}
    35b8:	f90e02d8 			; <UNDEFINED> instruction: 0xf90e02d8
    35bc:	01000000 	mrseq	r0, (UNDEF: 0)
    35c0:	08081b01 	stmdaeq	r8, {r0, r8, r9, fp, ip}
    35c4:	29090303 	stmdbcs	r9, {r0, r1, r8, r9}
    35c8:	1c000006 	stcne	0, cr0, [r0], {6}
    35cc:	0000361b 	andeq	r3, r0, fp, lsl r6
    35d0:	07030708 	streq	r0, [r3, -r8, lsl #14]
    35d4:	000000cd 	andeq	r0, r0, sp, asr #1
    35d8:	060b1c00 	streq	r1, [fp], -r0, lsl #24
    35dc:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    35e0:	010a0803 	tsteq	sl, r3, lsl #16
    35e4:	00040000 	andeq	r0, r4, r0
    35e8:	00027511 	andeq	r7, r2, r1, lsl r5
    35ec:	03090800 	movweq	r0, #38912	; 0x9800
    35f0:	00060203 	andeq	r0, r6, r3, lsl #4
    35f4:	05581d00 	ldrbeq	r1, [r8, #-3328]	; 0xfffff300
    35f8:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    35fc:	9908030b 	stmdbls	r8, {r0, r1, r3, r8, r9}
    3600:	1c000006 	stcne	0, cr0, [r0], {6}
    3604:	00001512 	andeq	r1, r0, r2, lsl r5
    3608:	08031408 	stmdaeq	r3, {r3, sl, ip}
    360c:	000000cd 	andeq	r0, r0, sp, asr #1
    3610:	032d1c00 			; <UNDEFINED> instruction: 0x032d1c00
    3614:	15080000 	strne	r0, [r8, #-0]
    3618:	00cd0803 	sbceq	r0, sp, r3, lsl #16
    361c:	1c020000 	stcne	0, cr0, [r2], {-0}
    3620:	0000054b 	andeq	r0, r0, fp, asr #10
    3624:	0b031608 	bleq	c8e4c <__ccfg+0xa8ea4>
    3628:	000002e4 	andeq	r0, r0, r4, ror #5
    362c:	0f881c04 	svceq	0x00881c04
    3630:	17080000 	strne	r0, [r8, -r0]
    3634:	010a0903 	tsteq	sl, r3, lsl #18
    3638:	1c080000 	stcne	0, cr0, [r8], {-0}
    363c:	000004dd 	ldrdeq	r0, [r0], -sp
    3640:	0f031808 	svceq	0x00031808
    3644:	00000699 	muleq	r0, r9, r6
    3648:	03281c0c 			; <UNDEFINED> instruction: 0x03281c0c
    364c:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    3650:	06a91503 	strteq	r1, [r9], r3, lsl #10
    3654:	002c0000 	eoreq	r0, ip, r0
    3658:	0006290f 	andeq	r2, r6, pc, lsl #18
    365c:	0006a900 	andeq	sl, r6, r0, lsl #18
    3660:	00881e00 	addeq	r1, r8, r0, lsl #28
    3664:	00030000 	andeq	r0, r3, r0
    3668:	0636040a 	ldrteq	r0, [r6], -sl, lsl #8
    366c:	63110000 	tstvs	r1, #0
    3670:	08000005 	stmdaeq	r0, {r0, r2}
    3674:	361b031c 			; <UNDEFINED> instruction: 0x361b031c
    3678:	14000006 	strne	r0, [r0], #-6
    367c:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    3680:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    3684:	000006cb 	andeq	r0, r0, fp, asr #13
    3688:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    368c:	000006af 	andeq	r0, r0, pc, lsr #13
    3690:	0000110e 	andeq	r1, r0, lr, lsl #2
    3694:	131d0a00 	tstne	sp, #0, 20
    3698:	000000cd 	andeq	r0, r0, sp, asr #1
    369c:	1f0e0101 	svcne	0x000e0101
    36a0:	0a000003 	beq	36b4 <NOROM_SetupSetVddrLevel+0x1c>
    36a4:	00de1a1e 	sbcseq	r1, lr, lr, lsl sl
    36a8:	01010000 	mrseq	r0, (UNDEF: 1)
    36ac:	0004c00e 	andeq	ip, r4, lr
    36b0:	241e0a00 	ldrcs	r0, [lr], #-2560	; 0xfffff600
    36b4:	000000de 	ldrdeq	r0, [r0], -lr
    36b8:	d40e0101 	strle	r0, [lr], #-257	; 0xfffffeff
    36bc:	0a000000 	beq	36c4 <NOROM_SetupSetVddrLevel+0x2c>
    36c0:	06cb1422 	strbeq	r1, [fp], r2, lsr #8
    36c4:	01010000 	mrseq	r0, (UNDEF: 1)
    36c8:	000da403 	andeq	sl, sp, r3, lsl #8
    36cc:	0f0e0b00 	svceq	0x000e0b00
    36d0:	00000715 	andeq	r0, r0, r5, lsl r7
    36d4:	071b040a 	ldreq	r0, [fp, -sl, lsl #8]
    36d8:	01150000 	tsteq	r5, r0
    36dc:	00000081 	andeq	r0, r0, r1, lsl #1
    36e0:	00000730 	andeq	r0, r0, r0, lsr r7
    36e4:	00008113 	andeq	r8, r0, r3, lsl r1
    36e8:	01161300 	tsteq	r6, r0, lsl #6
    36ec:	0f000000 	svceq	0x00000000
    36f0:	00000740 	andeq	r0, r0, r0, asr #14
    36f4:	00000740 	andeq	r0, r0, r0, asr #14
    36f8:	0000881e 	andeq	r8, r0, lr, lsl r8
    36fc:	0a000700 	beq	5304 <__exidx_end+0x5b0>
    3700:	0005e704 	andeq	lr, r5, r4, lsl #14
    3704:	0e381f00 	cdpeq	15, 3, cr1, cr8, cr0, {0}
    3708:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    370c:	00073015 	andeq	r3, r7, r5, lsl r0
    3710:	38030500 	stmdacc	r3, {r8, sl}
    3714:	0f200001 	svceq	0x00200001
    3718:	00000709 	andeq	r0, r0, r9, lsl #14
    371c:	00000768 	andeq	r0, r0, r8, ror #14
    3720:	0000881e 	andeq	r8, r0, lr, lsl r8
    3724:	1f000200 	svcne	0x00000200
    3728:	00000eb2 			; <UNDEFINED> instruction: 0x00000eb2
    372c:	5814130c 	ldmdapl	r4, {r2, r3, r8, r9, ip}
    3730:	05000007 	streq	r0, [r0, #-7]
    3734:	00016403 	andeq	r6, r1, r3, lsl #8
    3738:	078a0f20 	streq	r0, [sl, r0, lsr #30]
    373c:	078a0000 	streq	r0, [sl, r0]
    3740:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    3744:	02000000 	andeq	r0, r0, #0
    3748:	c0040a00 	andgt	r0, r4, r0, lsl #20
    374c:	1f000004 	svcne	0x00000004
    3750:	00000df3 	strdeq	r0, [r0], -r3
    3754:	7a13190c 	bvc	4c9b8c <__ccfg+0x4a9be4>
    3758:	05000007 	streq	r0, [r0, #-7]
    375c:	00015803 	andeq	r5, r1, r3, lsl #16
    3760:	00810f20 	addeq	r0, r1, r0, lsr #30
    3764:	07b20000 	ldreq	r0, [r2, r0]!
    3768:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    376c:	02000000 	andeq	r0, r0, #0
    3770:	0dcb1f00 	stcleq	15, cr1, [fp]
    3774:	1e0c0000 	cdpne	0, 0, cr0, cr12, cr0, {0}
    3778:	0007a20f 	andeq	sl, r7, pc, lsl #4
    377c:	70030500 	andvc	r0, r3, r0, lsl #10
    3780:	0f200001 	svceq	0x00200001
    3784:	000007d4 	ldrdeq	r0, [r0], -r4
    3788:	000007d4 	ldrdeq	r0, [r0], -r4
    378c:	0000881e 	andeq	r8, r0, lr, lsl r8
    3790:	0a000200 	beq	3f98 <NOROM_ChipInfo_GetHwRevision+0x44>
    3794:	00048104 	andeq	r8, r4, r4, lsl #2
    3798:	0f521f00 	svceq	0x00521f00
    379c:	230c0000 	movwcs	r0, #49152	; 0xc000
    37a0:	0007c41b 	andeq	ip, r7, fp, lsl r4
    37a4:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
    37a8:	20200001 	eorcs	r0, r0, r1
    37ac:	000ecb01 	andeq	ip, lr, r1, lsl #22
    37b0:	050d0100 	streq	r0, [sp, #-256]	; 0xffffff00
    37b4:	1c280101 	stfnes	f0, [r8], #-4
    37b8:	1c2a0000 	stcne	0, cr0, [sl], #-0
    37bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    37c0:	0dda0121 	ldfeqe	f0, [sl, #132]	; 0x84
    37c4:	05010000 	streq	r0, [r1, #-0]
    37c8:	81010105 	tsthi	r1, r5, lsl #2
	...
    37d4:	01000000 	mrseq	r0, (UNDEF: 0)
    37d8:	0008639c 	muleq	r8, ip, r3
    37dc:	68702200 	ldmdavs	r0!, {r9, sp}^
    37e0:	05010079 	streq	r0, [r1, #-121]	; 0xffffff87
    37e4:	00812d05 	addeq	r2, r1, r5, lsl #26
    37e8:	10890000 	addne	r0, r9, r0
    37ec:	4e230000 	cdpmi	0, 2, cr0, cr3, cr0, {0}
    37f0:	00000011 	andeq	r0, r0, r1, lsl r0
    37f4:	e0000000 	and	r0, r0, r0
    37f8:	01000007 	tsteq	r0, r7
    37fc:	2409050a 	strcs	r0, [r9], #-1290	; 0xfffffaf6
    3800:	00001160 	andeq	r1, r0, r0, ror #2
    3804:	000010a7 	andeq	r1, r0, r7, lsr #1
    3808:	0007e025 	andeq	lr, r7, r5, lsr #32
    380c:	116b2600 	cmnne	fp, r0, lsl #12
    3810:	10ba0000 	adcsne	r0, sl, r0
    3814:	76260000 	strtvc	r0, [r6], -r0
    3818:	d8000011 	stmdale	r0, {r0, r4}
    381c:	00000010 	andeq	r0, r0, r0, lsl r0
    3820:	01270000 			; <UNDEFINED> instruction: 0x01270000
    3824:	00000ef8 	strdeq	r0, [r0], -r8
    3828:	0104fa01 	tsteq	r4, r1, lsl #20	; <UNPREDICTABLE>
    382c:	001bec01 	andseq	lr, fp, r1, lsl #24
    3830:	001c2800 	andseq	r2, ip, r0, lsl #16
    3834:	9d9c0100 	ldflss	f0, [ip]
    3838:	22000008 	andcs	r0, r0, #8
    383c:	00746b70 	rsbseq	r6, r4, r0, ror fp
    3840:	3004fa01 	andcc	pc, r4, r1, lsl #20
    3844:	00000116 	andeq	r0, r0, r6, lsl r1
    3848:	00001102 	andeq	r1, r0, r2, lsl #2
    384c:	01006228 	tsteq	r0, r8, lsr #4
    3850:	9d0c04fe 	cfstrsls	mvf0, [ip, #-1016]	; 0xfffffc08
    3854:	20000008 	andcs	r0, r0, r8
    3858:	00000011 	andeq	r0, r0, r1, lsl r0
    385c:	05b7040a 	ldreq	r0, [r7, #1034]!	; 0x40a
    3860:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3864:	00000d3a 	andeq	r0, r0, sl, lsr sp
    3868:	0104e901 	tsteq	r4, r1, lsl #18
    386c:	00011601 	andeq	r1, r1, r1, lsl #12
    3870:	001bb800 	andseq	fp, fp, r0, lsl #16
    3874:	001bec00 	andseq	lr, fp, r0, lsl #24
    3878:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    387c:	22000008 	andcs	r0, r0, #8
    3880:	00796870 	rsbseq	r6, r9, r0, ror r8
    3884:	2f04e901 	svccs	0x0004e901
    3888:	00000081 	andeq	r0, r0, r1, lsl #1
    388c:	0000113e 	andeq	r1, r0, lr, lsr r1
    3890:	00716f28 	rsbseq	r6, r1, r8, lsr #30
    3894:	0b04ed01 	bleq	13eca0 <__ccfg+0x11ecf8>
    3898:	0000078a 	andeq	r0, r0, sl, lsl #15
    389c:	0000115c 	andeq	r1, r0, ip, asr r1
    38a0:	01006228 	tsteq	r0, r8, lsr #4
    38a4:	9d0c04ee 	cfstrsls	mvf0, [ip, #-952]	; 0xfffffc48
    38a8:	6f000008 	svcvs	0x00000008
    38ac:	00000011 	andeq	r0, r0, r1, lsl r0
    38b0:	0dae0121 	stfeqs	f0, [lr, #132]!	; 0x84
    38b4:	d2010000 	andle	r0, r1, #0
    38b8:	16010104 	strne	r0, [r1], -r4, lsl #2
    38bc:	78000001 	stmdavc	r0, {r0}
    38c0:	b800001b 	stmdalt	r0, {r0, r1, r3, r4}
    38c4:	0100001b 	tsteq	r0, fp, lsl r0
    38c8:	0009509c 	muleq	r9, ip, r0
    38cc:	68702200 	ldmdavs	r0!, {r9, sp}^
    38d0:	d2010079 	andle	r0, r1, #121	; 0x79
    38d4:	00812f04 	addeq	r2, r1, r4, lsl #30
    38d8:	118e0000 	orrne	r0, lr, r0
    38dc:	6c220000 	stcvs	0, cr0, [r2], #-0
    38e0:	01006e65 	tsteq	r0, r5, ror #28
    38e4:	323904d2 	eorscc	r0, r9, #-771751936	; 0xd2000000
    38e8:	ac000004 	stcge	0, cr0, [r0], {4}
    38ec:	28000011 	stmdacs	r0, {r0, r4}
    38f0:	0100716f 	tsteq	r0, pc, ror #2
    38f4:	8a0b04d7 	bhi	2c4c58 <__ccfg+0x2a4cb0>
    38f8:	ca000007 	bgt	391c <NOROM_SetupGetTrimForXoscHfCtl+0x24>
    38fc:	28000011 	stmdacs	r0, {r0, r4}
    3900:	d8010062 	stmdale	r1, {r1, r5, r6}
    3904:	089d0c04 	ldmeq	sp, {r2, sl, fp}
    3908:	11e80000 	mvnne	r0, r0
    390c:	21000000 	mrscs	r0, (UNDEF: 0)
    3910:	000f4001 	andeq	r4, pc, r1
    3914:	04a10100 	strteq	r0, [r1], #256	; 0x100
    3918:	00810101 	addeq	r0, r1, r1, lsl #2
    391c:	1adc0000 	bne	ff703924 <_estack+0xdf6fe924>
    3920:	1b780000 	blne	1e03928 <__ccfg+0x1de3980>
    3924:	9c010000 	stcls	0, cr0, [r1], {-0}
    3928:	000009eb 	andeq	r0, r0, fp, ror #19
    392c:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    3930:	04a10100 	strteq	r0, [r1], #256	; 0x100
    3934:	0000812b 	andeq	r8, r0, fp, lsr #2
    3938:	00121200 	andseq	r1, r2, r0, lsl #4
    393c:	00702200 	rsbseq	r2, r0, r0, lsl #4
    3940:	3804a101 	stmdacc	r4, {r0, r8, sp, pc}
    3944:	00000116 	andeq	r0, r0, r6, lsl r1
    3948:	00001246 	andeq	r1, r0, r6, asr #4
    394c:	6e656c22 	cdpvs	12, 6, cr6, cr5, cr2, {1}
    3950:	04a10100 	strteq	r0, [r1], #256	; 0x100
    3954:	0000813f 	andeq	r8, r0, pc, lsr r1
    3958:	00127a00 	andseq	r7, r2, r0, lsl #20
    395c:	6c702900 			; <UNDEFINED> instruction: 0x6c702900
    3960:	a6010067 	strge	r0, [r1], -r7, rrx
    3964:	00810604 	addeq	r0, r1, r4, lsl #12
    3968:	64280000 	strtvs	r0, [r8], #-0
    396c:	01007073 	tsteq	r0, r3, ror r0
    3970:	810b04a6 	smlatbhi	fp, r6, r4, r0
    3974:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    3978:	2a000012 	bcs	39c8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x44>
    397c:	00736573 	rsbseq	r6, r3, r3, ror r5
    3980:	1004a601 	andne	sl, r4, r1, lsl #12
    3984:	00000081 	andeq	r0, r0, r1, lsl #1
    3988:	2a509102 	bcs	1427d98 <__ccfg+0x1407df0>
    398c:	01007061 	tsteq	r0, r1, rrx
    3990:	550b04a7 	strpl	r0, [fp, #-1191]	; 0xfffffb59
    3994:	02000003 	andeq	r0, r0, #3
    3998:	63285491 			; <UNDEFINED> instruction: 0x63285491
    399c:	04a80100 	strteq	r0, [r8], #256	; 0x100
    39a0:	0001160a 	andeq	r1, r1, sl, lsl #12
    39a4:	0012cc00 	andseq	ip, r2, r0, lsl #24
    39a8:	01210000 			; <UNDEFINED> instruction: 0x01210000
    39ac:	00000d99 	muleq	r0, r9, sp
    39b0:	01048701 	tsteq	r4, r1, lsl #14
    39b4:	00008101 	andeq	r8, r0, r1, lsl #2
    39b8:	001a8c00 	andseq	r8, sl, r0, lsl #24
    39bc:	001adc00 	andseq	sp, sl, r0, lsl #24
    39c0:	4a9c0100 	bmi	fe703dc8 <_estack+0xde6fedc8>
    39c4:	2200000a 	andcs	r0, r0, #10
    39c8:	00796870 	rsbseq	r6, r9, r0, ror r8
    39cc:	2b048701 	blcs	1255d8 <__ccfg+0x105630>
    39d0:	00000081 	andeq	r0, r0, r1, lsl #1
    39d4:	000012df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    39d8:	00737022 	rsbseq	r7, r3, r2, lsr #32
    39dc:	3a048701 	bcc	1255e8 <__ccfg+0x105640>
    39e0:	00000709 	andeq	r0, r0, r9, lsl #14
    39e4:	000012fd 	strdeq	r1, [r0], -sp
    39e8:	00208e2b 	eoreq	r8, r0, fp, lsr #28
    39ec:	04870100 	streq	r0, [r7], #256	; 0x100
    39f0:	00008142 	andeq	r8, r0, r2, asr #2
    39f4:	00131b00 	andseq	r1, r3, r0, lsl #22
    39f8:	00712800 	rsbseq	r2, r1, r0, lsl #16
    39fc:	0b048d01 	bleq	126e08 <__ccfg+0x106e60>
    3a00:	0000078a 	andeq	r0, r0, sl, lsl #15
    3a04:	00001339 	andeq	r1, r0, r9, lsr r3
    3a08:	57012c00 	strpl	r2, [r1, -r0, lsl #24]
    3a0c:	0100000e 	tsteq	r0, lr
    3a10:	01010386 	smlabbeq	r1, r6, r3, r0
    3a14:	00000116 	andeq	r0, r0, r6, lsl r1
    3a18:	000a9101 	andeq	r9, sl, r1, lsl #2
    3a1c:	13db2d00 	bicsne	r2, fp, #0, 26
    3a20:	86010000 	strhi	r0, [r1], -r0
    3a24:	00812d03 	addeq	r2, r1, r3, lsl #26
    3a28:	642e0000 	strtvs	r0, [lr], #-0
    3a2c:	01007073 	tsteq	r0, r3, ror r0
    3a30:	81370386 	teqhi	r7, r6, lsl #7
    3a34:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    3a38:	00736573 	rsbseq	r6, r3, r3, ror r5
    3a3c:	40038601 	andmi	r8, r3, r1, lsl #12
    3a40:	00000081 	andeq	r0, r0, r1, lsl #1
    3a44:	01007029 	tsteq	r0, r9, lsr #32
    3a48:	9d0c038a 	stcls	3, cr0, [ip, #-552]	; 0xfffffdd8
    3a4c:	00000008 	andeq	r0, r0, r8
    3a50:	0d8c0127 	stfeqs	f0, [ip, #156]	; 0x9c
    3a54:	7f010000 	svcvc	0x00010000
    3a58:	00010103 	andeq	r0, r1, r3, lsl #2
    3a5c:	00000000 	andeq	r0, r0, r0
    3a60:	01000000 	mrseq	r0, (UNDEF: 0)
    3a64:	000acb9c 	muleq	sl, ip, fp
    3a68:	00702200 	rsbseq	r2, r0, r0, lsl #4
    3a6c:	32037f01 	andcc	r7, r3, #1, 30
    3a70:	00000116 	andeq	r0, r0, r6, lsl r1
    3a74:	00001368 	andeq	r1, r0, r8, ror #6
    3a78:	70736422 	rsbsvc	r6, r3, r2, lsr #8
    3a7c:	037f0100 	cmneq	pc, #0, 2
    3a80:	00008139 	andeq	r8, r0, r9, lsr r1
    3a84:	00137b00 	andseq	r7, r3, r0, lsl #22
    3a88:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3a8c:	00000edc 	ldrdeq	r0, [r0], -ip
    3a90:	01036b01 	tsteq	r3, r1, lsl #22
    3a94:	00011601 	andeq	r1, r1, r1, lsl #12
	...
    3aa0:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    3aa4:	2200000b 	andcs	r0, r0, #11
    3aa8:	6b010070 	blvs	43c70 <__ccfg+0x23cc8>
    3aac:	01163303 	tsteq	r6, r3, lsl #6
    3ab0:	138e0000 	orrne	r0, lr, #0
    3ab4:	332b0000 			; <UNDEFINED> instruction: 0x332b0000
    3ab8:	0100000f 	tsteq	r0, pc
    3abc:	813a036b 	teqhi	sl, fp, ror #6
    3ac0:	ac000000 	stcge	0, cr0, [r0], {-0}
    3ac4:	28000013 	stmdacs	r0, {r0, r1, r4}
    3ac8:	01006370 	tsteq	r0, r0, ror r3
    3acc:	9d0c036f 	stcls	3, cr0, [ip, #-444]	; 0xfffffe44
    3ad0:	ca000008 	bgt	3af8 <NOROM_SetupSetAonRtcSubSecInc>
    3ad4:	29000013 	stmdbcs	r0, {r0, r1, r4}
    3ad8:	01007070 	tsteq	r0, r0, ror r0
    3adc:	9d11036f 	ldcls	3, cr0, [r1, #-444]	; 0xfffffe44
    3ae0:	00000008 	andeq	r0, r0, r8
    3ae4:	0de70127 	stfeqe	f0, [r7, #156]!	; 0x9c
    3ae8:	63010000 	movwvs	r0, #4096	; 0x1000
    3aec:	00010103 	andeq	r0, r1, r3, lsl #2
    3af0:	00000000 	andeq	r0, r0, r0
    3af4:	01000000 	mrseq	r0, (UNDEF: 0)
    3af8:	000b5f9c 	muleq	fp, ip, pc	; <UNPREDICTABLE>
    3afc:	00702200 	rsbseq	r2, r0, r0, lsl #4
    3b00:	31036301 	tstcc	r3, r1, lsl #6
    3b04:	00000116 	andeq	r0, r0, r6, lsl r1
    3b08:	000013e8 	andeq	r1, r0, r8, ror #7
    3b0c:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    3b10:	03630100 	cmneq	r3, #0, 2
    3b14:	00008138 	andeq	r8, r0, r8, lsr r1
    3b18:	00140600 	andseq	r0, r4, r0, lsl #12
    3b1c:	01270000 			; <UNDEFINED> instruction: 0x01270000
    3b20:	00000ee7 	andeq	r0, r0, r7, ror #29
    3b24:	01035a01 	tsteq	r3, r1, lsl #20
    3b28:	00000001 	andeq	r0, r0, r1
    3b2c:	00000000 	andeq	r0, r0, r0
    3b30:	999c0100 	ldmibls	ip, {r8}
    3b34:	2200000b 	andcs	r0, r0, #11
    3b38:	5a010070 	bpl	43d00 <__ccfg+0x23d58>
    3b3c:	01163103 	tsteq	r6, r3, lsl #2
    3b40:	14240000 	strtne	r0, [r4], #-0
    3b44:	73220000 			; <UNDEFINED> instruction: 0x73220000
    3b48:	01007365 	tsteq	r0, r5, ror #6
    3b4c:	8138035a 	teqhi	r8, sl, asr r3
    3b50:	42000000 	andmi	r0, r0, #0
    3b54:	00000014 	andeq	r0, r0, r4, lsl r0
    3b58:	0f72012c 	svceq	0x0072012c
    3b5c:	52010000 	andpl	r0, r1, #0
    3b60:	81010103 	tsthi	r1, r3, lsl #2
    3b64:	01000000 	mrseq	r0, (UNDEF: 0)
    3b68:	00000bd5 	ldrdeq	r0, [r0], -r5
    3b6c:	7968702e 	stmdbvc	r8!, {r1, r2, r3, r5, ip, sp, lr}^
    3b70:	03520100 	cmpeq	r2, #0, 2
    3b74:	0000812d 	andeq	r8, r0, sp, lsr #2
    3b78:	706f2e00 	rsbvc	r2, pc, r0, lsl #28
    3b7c:	52010074 	andpl	r0, r1, #116	; 0x74
    3b80:	00813603 	addeq	r3, r1, r3, lsl #12
    3b84:	612e0000 			; <UNDEFINED> instruction: 0x612e0000
    3b88:	01006772 	tsteq	r0, r2, ror r7
    3b8c:	16430352 			; <UNDEFINED> instruction: 0x16430352
    3b90:	00000001 	andeq	r0, r0, r1
    3b94:	0d450121 	stfeqe	f0, [r5, #-132]	; 0xffffff7c
    3b98:	33010000 	movwcc	r0, #4096	; 0x1000
    3b9c:	81010103 	tsthi	r1, r3, lsl #2
    3ba0:	c4000000 	strgt	r0, [r0], #-0
    3ba4:	24000019 	strcs	r0, [r0], #-25	; 0xffffffe7
    3ba8:	0100001a 	tsteq	r0, sl, lsl r0
    3bac:	000c3e9c 	muleq	ip, ip, lr
    3bb0:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    3bb4:	03330100 	teqeq	r3, #0, 2
    3bb8:	0000812c 	andeq	r8, r0, ip, lsr #2
    3bbc:	00146000 	andseq	r6, r4, r0
    3bc0:	706f2200 	rsbvc	r2, pc, r0, lsl #4
    3bc4:	33010074 	movwcc	r0, #4212	; 0x1074
    3bc8:	00813403 	addeq	r3, r1, r3, lsl #8
    3bcc:	149f0000 	ldrne	r0, [pc], #0	; 3bd4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb4>
    3bd0:	61220000 			; <UNDEFINED> instruction: 0x61220000
    3bd4:	01006772 	tsteq	r0, r2, ror r7
    3bd8:	16410333 			; <UNDEFINED> instruction: 0x16410333
    3bdc:	c8000001 	stmdagt	r0, {r0}
    3be0:	2f000014 	svccs	0x00000014
    3be4:	000019d2 	ldrdeq	r1, [r0], -r2
    3be8:	000019e0 	andeq	r1, r0, r0, ror #19
    3bec:	01007028 	tsteq	r0, r8, lsr #32
    3bf0:	d415033c 	ldrle	r0, [r5], #-828	; 0xfffffcc4
    3bf4:	f1000007 	cps	#7
    3bf8:	00000014 	andeq	r0, r0, r4, lsl r0
    3bfc:	c2012700 	andgt	r2, r1, #0, 14
    3c00:	0100000d 	tsteq	r0, sp
    3c04:	0101032b 	tsteq	r1, fp, lsr #6
	...
    3c10:	0c679c01 	stcleq	12, cr9, [r7], #-4
    3c14:	70220000 	eorvc	r0, r2, r0
    3c18:	032b0100 			; <UNDEFINED> instruction: 0x032b0100
    3c1c:	0001162e 	andeq	r1, r1, lr, lsr #12
    3c20:	00150400 	andseq	r0, r5, r0, lsl #8
    3c24:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3c28:	00000e7e 	andeq	r0, r0, lr, ror lr
    3c2c:	01031a01 	tsteq	r3, r1, lsl #20
    3c30:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    3c3c:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    3c40:	2200000c 	andcs	r0, r0, #12
    3c44:	1a010070 	bne	43e0c <__ccfg+0x23e64>
    3c48:	01162e03 	tsteq	r6, r3, lsl #28
    3c4c:	15220000 	strne	r0, [r2, #-0]!
    3c50:	62220000 	eorvs	r0, r2, #0
    3c54:	01006675 	tsteq	r0, r5, ror r6
    3c58:	593d031a 	ldmdbpl	sp!, {r1, r3, r4, r8, r9}
    3c5c:	40000002 	andmi	r0, r0, r2
    3c60:	22000015 	andcs	r0, r0, #21
    3c64:	006e656c 	rsbeq	r6, lr, ip, ror #10
    3c68:	46031a01 	strmi	r1, [r3], -r1, lsl #20
    3c6c:	00000081 	andeq	r0, r0, r1, lsl #1
    3c70:	00001553 	andeq	r1, r0, r3, asr r5
    3c74:	01006229 	tsteq	r0, r9, lsr #4
    3c78:	9d0c031e 	stcls	3, cr0, [ip, #-120]	; 0xffffff88
    3c7c:	00000008 	andeq	r0, r0, r8
    3c80:	0ec20121 	poleqsp	f0, f2, f1
    3c84:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    3c88:	81010103 	tsthi	r1, r3, lsl #2
	...
    3c94:	01000000 	mrseq	r0, (UNDEF: 0)
    3c98:	000d1b9c 	muleq	sp, ip, fp
    3c9c:	00702200 	rsbseq	r2, r0, r0, lsl #4
    3ca0:	2d030801 	stccs	8, cr0, [r3, #-4]
    3ca4:	00000116 	andeq	r0, r0, r6, lsl r1
    3ca8:	00001571 	andeq	r1, r0, r1, ror r5
    3cac:	66756222 	ldrbtvs	r6, [r5], -r2, lsr #4
    3cb0:	03080100 	movweq	r0, #33024	; 0x8100
    3cb4:	000d1b36 	andeq	r1, sp, r6, lsr fp
    3cb8:	00158f00 	andseq	r8, r5, r0, lsl #30
    3cbc:	656c2200 	strbvs	r2, [ip, #-512]!	; 0xfffffe00
    3cc0:	0801006e 	stmdaeq	r1, {r1, r2, r3, r5, r6}
    3cc4:	00813f03 	addeq	r3, r1, r3, lsl #30
    3cc8:	15ad0000 	strne	r0, [sp, #0]!
    3ccc:	62290000 	eorvs	r0, r9, #0
    3cd0:	030c0100 	movweq	r0, #49408	; 0xc100
    3cd4:	00089d0c 	andeq	r9, r8, ip, lsl #26
    3cd8:	040a0000 	streq	r0, [sl], #-0
    3cdc:	000000e3 	andeq	r0, r0, r3, ror #1
    3ce0:	0e750121 	rpweqsp	f0, f5, f1
    3ce4:	cd010000 	stcgt	0, cr0, [r1, #-0]
    3ce8:	16010102 	strne	r0, [r1], -r2, lsl #2
    3cec:	dc000001 	stcle	0, cr0, [r0], {1}
    3cf0:	98000018 	stmdals	r0, {r3, r4}
    3cf4:	01000019 	tsteq	r0, r9, lsl r0
    3cf8:	000dbf9c 	muleq	sp, ip, pc	; <UNPREDICTABLE>
    3cfc:	15492b00 	strbne	r2, [r9, #-2816]	; 0xfffff500
    3d00:	cd010000 	stcgt	0, cr0, [r1, #-0]
    3d04:	00cd2e02 	sbceq	r2, sp, r2, lsl #28
    3d08:	15cb0000 	strbne	r0, [fp]
    3d0c:	66220000 	strtvs	r0, [r2], -r0
    3d10:	cd010064 	stcgt	0, cr0, [r1, #-400]	; 0xfffffe70
    3d14:	00813902 	addeq	r3, r1, r2, lsl #18
    3d18:	15e90000 	strbne	r0, [r9, #0]!
    3d1c:	2c2b0000 	stccs	0, cr0, [fp], #-0
    3d20:	0100000f 	tsteq	r0, pc
    3d24:	814102cd 	smlalbthi	r0, r1, sp, r2
    3d28:	12000000 	andne	r0, r0, #0
    3d2c:	22000016 	andcs	r0, r0, #22
    3d30:	00677275 	rsbeq	r7, r7, r5, ror r2
    3d34:	1102ce01 	tstne	r2, r1, lsl #28
    3d38:	000000c1 	andeq	r0, r0, r1, asr #1
    3d3c:	0000165c 	andeq	r1, r0, ip, asr r6
    3d40:	01006228 	tsteq	r0, r8, lsr #4
    3d44:	9d0c02cf 	sfmls	f0, 4, [ip, #-828]	; 0xfffffcc4
    3d48:	6f000008 	svcvs	0x00000008
    3d4c:	30000016 	andcc	r0, r0, r6, lsl r0
    3d50:	00000e67 	andeq	r0, r0, r7, ror #28
    3d54:	0b02d001 	bleq	b7d60 <__ccfg+0x97db8>
    3d58:	00000355 	andeq	r0, r0, r5, asr r3
    3d5c:	2a649102 	bcs	192816c <__ccfg+0x19081c4>
    3d60:	d1010073 	tstle	r1, r3, ror r0
    3d64:	07400d02 	strbeq	r0, [r0, -r2, lsl #26]
    3d68:	57010000 	strpl	r0, [r1, -r0]
    3d6c:	64696528 	strbtvs	r6, [r9], #-1320	; 0xfffffad8
    3d70:	02d20100 	sbcseq	r0, r2, #0, 2
    3d74:	00008106 	andeq	r8, r0, r6, lsl #2
    3d78:	00168d00 	andseq	r8, r6, r0, lsl #26
    3d7c:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3d80:	00000e44 	andeq	r0, r0, r4, asr #28
    3d84:	0102a401 	tsteq	r2, r1, lsl #8
    3d88:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    3d94:	729c0100 	addsvc	r0, ip, #0, 2
    3d98:	2200000e 	andcs	r0, r0, #14
    3d9c:	01006466 	tsteq	r0, r6, ror #8
    3da0:	812a02a4 	smulwbhi	sl, r4, r2
    3da4:	b6000000 	strlt	r0, [r0], -r0
    3da8:	2b000016 	blcs	3e08 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x198>
    3dac:	00000f33 	andeq	r0, r0, r3, lsr pc
    3db0:	3202a401 	andcc	sl, r2, #16777216	; 0x1000000
    3db4:	00000081 	andeq	r0, r0, r1, lsl #1
    3db8:	000016ea 	andeq	r1, r0, sl, ror #13
    3dbc:	01007328 	tsteq	r0, r8, lsr #6
    3dc0:	400d02a8 	andmi	r0, sp, r8, lsr #5
    3dc4:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    3dc8:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
    3dcc:	0100716e 	tsteq	r0, lr, ror #2
    3dd0:	810602a9 	smlatbhi	r6, r9, r2, r0
    3dd4:	83000000 	movwhi	r0, #0
    3dd8:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
    3ddc:	01007172 	tsteq	r0, r2, ror r1
    3de0:	8a0b02aa 	bhi	2c4890 <__ccfg+0x2a48e8>
    3de4:	a1000007 	tstge	r0, r7
    3de8:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
    3dec:	ab010062 	blge	43f7c <__ccfg+0x23fd4>
    3df0:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    3df4:	17bf0000 	ldrne	r0, [pc, r0]!
    3df8:	32310000 	eorscc	r0, r1, #0
    3dfc:	0100000e 	tsteq	r0, lr
    3e00:	000102c0 	andeq	r0, r1, r0, asr #5
    3e04:	32000000 	andcc	r0, r0, #0
    3e08:	0000114e 	andeq	r1, r0, lr, asr #2
	...
    3e14:	0a02bb01 	beq	b2a20 <__ccfg+0x92a78>
    3e18:	00116033 	andseq	r6, r1, r3, lsr r0
    3e1c:	116b2600 	cmnne	fp, r0, lsl #12
    3e20:	17e80000 	strbne	r0, [r8, r0]!
    3e24:	76260000 	strtvc	r0, [r6], -r0
    3e28:	fb000011 	blx	3e76 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x206>
    3e2c:	00000017 	andeq	r0, r0, r7, lsl r0
    3e30:	1d012100 	stfnes	f2, [r1, #-0]
    3e34:	0100000d 	tsteq	r0, sp
    3e38:	0101027d 	tsteq	r1, sp, ror r2
    3e3c:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    3e48:	0eef9c01 	cdpeq	12, 14, cr9, cr15, cr1, {0}
    3e4c:	66220000 	strtvs	r0, [r2], -r0
    3e50:	7d010064 	stcvc	0, cr0, [r1, #-400]	; 0xfffffe70
    3e54:	00812a02 	addeq	r2, r1, r2, lsl #20
    3e58:	180e0000 	stmdane	lr, {}	; <UNPREDICTABLE>
    3e5c:	332b0000 			; <UNDEFINED> instruction: 0x332b0000
    3e60:	0100000f 	tsteq	r0, pc
    3e64:	8132027d 	teqhi	r2, sp, ror r2
    3e68:	42000000 	andmi	r0, r0, #0
    3e6c:	28000018 	stmdacs	r0, {r3, r4}
    3e70:	81010073 	tsthi	r1, r3, ror r0
    3e74:	07400d02 	strbeq	r0, [r0, -r2, lsl #26]
    3e78:	186b0000 	stmdane	fp!, {}^	; <UNPREDICTABLE>
    3e7c:	6e280000 	cdpvs	0, 2, cr0, cr8, cr0, {0}
    3e80:	82010071 	andhi	r0, r1, #113	; 0x71
    3e84:	00810602 	addeq	r0, r1, r2, lsl #12
    3e88:	18d00000 	ldmne	r0, {}^	; <UNPREDICTABLE>
    3e8c:	72280000 	eorvc	r0, r8, #0
    3e90:	83010071 	movwhi	r0, #4209	; 0x1071
    3e94:	078a0b02 	streq	r0, [sl, r2, lsl #22]
    3e98:	18ee0000 	stmiane	lr!, {}^	; <UNPREDICTABLE>
    3e9c:	62280000 	eorvs	r0, r8, #0
    3ea0:	02840100 	addeq	r0, r4, #0, 2
    3ea4:	00089d0c 	andeq	r9, r8, ip, lsl #26
    3ea8:	00191700 	andseq	r1, r9, r0, lsl #14
    3eac:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3eb0:	00000f38 	andeq	r0, r0, r8, lsr pc
    3eb4:	01025601 	tsteq	r2, r1, lsl #12
    3eb8:	00011601 	andeq	r1, r1, r1, lsl #12
    3ebc:	00185c00 	andseq	r5, r8, r0, lsl #24
    3ec0:	0018dc00 	andseq	sp, r8, r0, lsl #24
    3ec4:	5c9c0100 	ldfpls	f0, [ip], {0}
    3ec8:	2b00000f 	blcs	3f0c <NOROM_ChipInfo_GetChipFamily+0x4>
    3ecc:	00001549 	andeq	r1, r0, r9, asr #10
    3ed0:	2d025601 	stccs	6, cr5, [r2, #-4]
    3ed4:	000000cd 	andeq	r0, r0, sp, asr #1
    3ed8:	0000194b 	andeq	r1, r0, fp, asr #18
    3edc:	00646622 	rsbeq	r6, r4, r2, lsr #12
    3ee0:	38025601 	stmdacc	r2, {r0, r9, sl, ip, lr}
    3ee4:	00000081 	andeq	r0, r0, r1, lsl #1
    3ee8:	0000195e 	andeq	r1, r0, lr, asr r9
    3eec:	01007028 	tsteq	r0, r8, lsr #32
    3ef0:	160a025d 			; <UNDEFINED> instruction: 0x160a025d
    3ef4:	9d000001 	stcls	0, cr0, [r0, #-4]
    3ef8:	28000019 	stmdacs	r0, {r0, r3, r4}
    3efc:	5e010062 	cdppl	0, 0, cr0, cr1, cr2, {3}
    3f00:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    3f04:	19b00000 	ldmibne	r0!, {}	; <UNPREDICTABLE>
    3f08:	72280000 	eorvc	r0, r8, #0
    3f0c:	5f010071 	svcpl	0x00010071
    3f10:	078a0b02 	streq	r0, [sl, r2, lsl #22]
    3f14:	19d90000 	ldmibne	r9, {}^	; <UNPREDICTABLE>
    3f18:	21000000 	mrscs	r0, (UNDEF: 0)
    3f1c:	000f0301 	andeq	r0, pc, r1, lsl #6
    3f20:	024a0100 	subeq	r0, sl, #0, 2
    3f24:	00810101 	addeq	r0, r1, r1, lsl #2
    3f28:	18380000 	ldmdane	r8!, {}	; <UNPREDICTABLE>
    3f2c:	185c0000 	ldmdane	ip, {}^	; <UNPREDICTABLE>
    3f30:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f34:	00000f99 	muleq	r0, r9, pc	; <UNPREDICTABLE>
    3f38:	64726f22 	ldrbtvs	r6, [r2], #-3874	; 0xfffff0de
    3f3c:	024a0100 	subeq	r0, sl, #0, 2
    3f40:	00008129 	andeq	r8, r0, r9, lsr #2
    3f44:	001a1300 	andseq	r1, sl, r0, lsl #6
    3f48:	6c703400 	cfldrdvs	mvd3, [r0], #-0
    3f4c:	024a0100 	subeq	r0, sl, #0, 2
    3f50:	0007d43f 	andeq	sp, r7, pc, lsr r4
    3f54:	00510100 	subseq	r0, r1, r0, lsl #2
    3f58:	0e930121 	fmleqsp	f0, f3, f1
    3f5c:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    3f60:	81010102 	tsthi	r1, r2, lsl #2
	...
    3f6c:	01000000 	mrseq	r0, (UNDEF: 0)
    3f70:	000ff69c 	muleq	pc, ip, r6	; <UNPREDICTABLE>
    3f74:	15492b00 	strbne	r2, [r9, #-2816]	; 0xfffff500
    3f78:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    3f7c:	00cd2b02 	sbceq	r2, sp, r2, lsl #22
    3f80:	1a310000 	bne	c43f88 <__ccfg+0xc23fe0>
    3f84:	66220000 	strtvs	r0, [r2], -r0
    3f88:	29010064 	stmdbcs	r1, {r2, r5, r6}
    3f8c:	00813602 	addeq	r3, r1, r2, lsl #12
    3f90:	1a4f0000 	bne	13c3f98 <__ccfg+0x13a3ff0>
    3f94:	73280000 			; <UNDEFINED> instruction: 0x73280000
    3f98:	022b0100 	eoreq	r0, fp, #0, 2
    3f9c:	0007400d 	andeq	r4, r7, sp
    3fa0:	001a9900 	andseq	r9, sl, r0, lsl #18
    3fa4:	00622800 	rsbeq	r2, r2, r0, lsl #16
    3fa8:	0c022c01 	stceq	12, cr2, [r2], {1}
    3fac:	0000089d 	muleq	r0, sp, r8
    3fb0:	00001aac 	andeq	r1, r0, ip, lsr #21
    3fb4:	b9012100 	stmdblt	r1, {r8, sp}
    3fb8:	0100000d 	tsteq	r0, sp
    3fbc:	010101f6 	strdeq	r0, [r1, -r6]
    3fc0:	00000081 	andeq	r0, r0, r1, lsl #1
    3fc4:	00001778 	andeq	r1, r0, r8, ror r7
    3fc8:	00001838 	andeq	r1, r0, r8, lsr r8
    3fcc:	10839c01 	addne	r9, r3, r1, lsl #24
    3fd0:	492b0000 	stmdbmi	fp!, {}	; <UNPREDICTABLE>
    3fd4:	01000015 	tsteq	r0, r5, lsl r0
    3fd8:	cd2a01f6 	stfgts	f0, [sl, #-984]!	; 0xfffffc28
    3fdc:	bf000000 	svclt	0x00000000
    3fe0:	2200001a 	andcs	r0, r0, #26
    3fe4:	00796870 	rsbseq	r6, r9, r0, ror r8
    3fe8:	3501f601 	strcc	pc, [r1, #-1537]	; 0xfffff9ff
    3fec:	00000081 	andeq	r0, r0, r1, lsl #1
    3ff0:	00001ae8 	andeq	r1, r0, r8, ror #21
    3ff4:	000ef32b 	andeq	pc, lr, fp, lsr #6
    3ff8:	01f60100 	mvnseq	r0, r0, lsl #2
    3ffc:	0000813e 	andeq	r8, r0, lr, lsr r1
    4000:	001b3d00 	andseq	r3, fp, r0, lsl #26
    4004:	66283500 	strtvs	r3, [r8], -r0, lsl #10
    4008:	f8010064 			; <UNDEFINED> instruction: 0xf8010064
    400c:	00810601 	addeq	r0, r1, r1, lsl #12
    4010:	1b750000 	blne	1d44018 <__ccfg+0x1d24070>
    4014:	26360000 	ldrtcs	r0, [r6], -r0
    4018:	0100000e 	tsteq	r0, lr
    401c:	560a01f9 			; <UNDEFINED> instruction: 0x560a01f9
    4020:	28000005 	stmdacs	r0, {r0, r2}
    4024:	fa010073 	blx	441f8 <__ccfg+0x24250>
    4028:	07400d01 	strbeq	r0, [r0, -r1, lsl #26]
    402c:	1b930000 	blne	fe4c4034 <_estack+0xde4bf034>
    4030:	612a0000 			; <UNDEFINED> instruction: 0x612a0000
    4034:	fc010070 	stc2	0, cr0, [r1], {112}	; 0x70
    4038:	00b50b01 	adcseq	r0, r5, r1, lsl #22
    403c:	91020000 	mrsls	r0, (UNDEF: 2)
    4040:	01270054 	qsubeq	r0, r4, r7
    4044:	00000e4e 	andeq	r0, r0, lr, asr #28
    4048:	01013b01 	tsteq	r1, r1, lsl #22
    404c:	00170801 	andseq	r0, r7, r1, lsl #16
    4050:	00177800 	andseq	r7, r7, r0, lsl #16
    4054:	bb9c0100 	bllt	fe70445c <_estack+0xde6ff45c>
    4058:	22000010 	andcs	r0, r0, #16
    405c:	3b010070 	blcc	44224 <__ccfg+0x2427c>
    4060:	01162e01 	tsteq	r6, r1, lsl #28
    4064:	1bdd0000 	blne	ff74406c <_estack+0xdf73f06c>
    4068:	62280000 	eorvs	r0, r8, #0
    406c:	01410100 	mrseq	r0, (UNDEF: 81)
    4070:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4074:	001c0600 	andseq	r0, ip, r0, lsl #12
    4078:	61370000 	teqvs	r7, r0
    407c:	01006270 	tsteq	r0, r0, ror r2
    4080:	01010114 	tsteq	r1, r4, lsl r1
    4084:	0000089d 	muleq	r0, sp, r8
    4088:	000015f0 	strdeq	r1, [r0], -r0
    408c:	00001606 	andeq	r1, r0, r6, lsl #12
    4090:	11029c01 	tstne	r2, r1, lsl #24
    4094:	db2b0000 	blle	ac409c <__ccfg+0xaa40f4>
    4098:	01000013 	tsteq	r0, r3, lsl r0
    409c:	cd2b0114 	stfgts	f0, [fp, #-80]!	; 0xffffffb0
    40a0:	3a000000 	bcc	40a8 <memcpy+0xa0>
    40a4:	2a00001c 	bcs	411c <memcpy+0x114>
    40a8:	19010070 	stmdbne	r1, {r4, r5, r6}
    40ac:	089d0c01 	ldmeq	sp, {r0, sl, fp}
    40b0:	50010000 	andpl	r0, r1, r0
    40b4:	00736329 	rsbseq	r6, r3, r9, lsr #6
    40b8:	07011a01 	streq	r1, [r1, -r1, lsl #20]
    40bc:	000000cd 	andeq	r0, r0, sp, asr #1
    40c0:	6c723800 	ldclvs	8, cr3, [r2], #-0
    40c4:	04010070 	streq	r0, [r1], #-112	; 0xffffff90
    40c8:	20010101 	andcs	r0, r1, r1, lsl #2
    40cc:	2e000016 	mcrcs	0, 0, r0, cr0, cr6, {0}
    40d0:	01000016 	tsteq	r0, r6, lsl r0
    40d4:	00112a9c 	mulseq	r1, ip, sl
    40d8:	00702200 	rsbseq	r2, r0, r0, lsl #4
    40dc:	2b010401 	blcs	450e8 <__ccfg+0x25140>
    40e0:	0000089d 	muleq	r0, sp, r8
    40e4:	00001c4d 	andeq	r1, r0, sp, asr #24
    40e8:	0d913900 	vldreq.16	s6, [r1]	; <UNPREDICTABLE>
    40ec:	e0010000 	and	r0, r1, r0
    40f0:	4e010101 	adfmis	f0, f1, f1
    40f4:	3a000011 	bcc	4140 <memcpy+0x138>
    40f8:	e0010070 	and	r0, r1, r0, ror r0
    40fc:	00089d2f 	andeq	r9, r8, pc, lsr #26
    4100:	76643a00 	strbtvc	r3, [r4], -r0, lsl #20
    4104:	36e00100 	strbtcc	r0, [r0], r0, lsl #2
    4108:	00000081 	andeq	r0, r0, r1, lsl #1
    410c:	0dd43b00 	vldreq	d19, [r4]
    4110:	cf010000 	svcgt	0x00010000
    4114:	00810101 	addeq	r0, r1, r1, lsl #2
    4118:	81010000 	mrshi	r0, (UNDEF: 1)
    411c:	3a000011 	bcc	4168 <memcpy+0x160>
    4120:	0100716f 	tsteq	r0, pc, ror #2
    4124:	078a2bcf 	streq	r2, [sl, pc, asr #23]
    4128:	6e3c0000 	cdpvs	0, 3, cr0, cr12, cr0, {0}
    412c:	d3010071 	movwle	r0, #4209	; 0x1071
    4130:	00008106 	andeq	r8, r0, r6, lsl #2
    4134:	00623c00 	rsbeq	r3, r2, r0, lsl #24
    4138:	9d0cd401 	cfstrsls	mvf13, [ip, #-4]
    413c:	00000008 	andeq	r0, r0, r8
    4140:	716e653d 	cmnvc	lr, sp, lsr r5
    4144:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    4148:	11a40101 			; <UNDEFINED> instruction: 0x11a40101
    414c:	713a0000 	teqvc	sl, r0
    4150:	2aa80100 	bcs	fea04558 <_estack+0xde9ff558>
    4154:	0000078a 	andeq	r0, r0, sl, lsl #15
    4158:	0100703a 	tsteq	r0, sl, lsr r0
    415c:	089d37a8 	ldmeq	sp, {r3, r5, r7, r8, r9, sl, ip, sp}
    4160:	3d000000 	stccc	0, cr0, [r0, #-0]
    4164:	00716564 	rsbseq	r6, r1, r4, ror #10
    4168:	01017f01 	tsteq	r1, r1, lsl #30
    416c:	0011bd01 	andseq	fp, r1, r1, lsl #26
    4170:	00703a00 	rsbseq	r3, r0, r0, lsl #20
    4174:	9d2b7f01 	stcls	15, cr7, [fp, #-4]!
    4178:	00000008 	andeq	r0, r0, r8
    417c:	0011a43e 	andseq	sl, r1, lr, lsr r4
    4180:	00160600 	andseq	r0, r6, r0, lsl #12
    4184:	00162000 	andseq	r2, r6, r0
    4188:	f29c0100 	vaddw.s16	q0, q6, d0
    418c:	3f000011 	svccc	0x00000011
    4190:	000011b2 			; <UNDEFINED> instruction: 0x000011b2
    4194:	a4405001 	strbge	r5, [r0], #-1
    4198:	0c000011 	stceq	0, cr0, [r0], {17}
    419c:	1e000016 	mcrne	0, 0, r0, cr0, cr6, {0}
    41a0:	01000016 	tsteq	r0, r6, lsl r0
    41a4:	b224017f 	eorlt	r0, r4, #-1073741793	; 0xc000001f
    41a8:	60000011 	andvs	r0, r0, r1, lsl r0
    41ac:	0000001c 	andeq	r0, r0, ip, lsl r0
    41b0:	11813e00 	orrne	r3, r1, r0, lsl #28
    41b4:	16300000 	ldrtne	r0, [r0], -r0
    41b8:	167c0000 	ldrbtne	r0, [ip], -r0
    41bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    41c0:	0000123b 	andeq	r1, r0, fp, lsr r2
    41c4:	00118f24 	andseq	r8, r1, r4, lsr #30
    41c8:	001c7300 	andseq	r7, ip, r0, lsl #6
    41cc:	11992400 	orrsne	r2, r9, r0, lsl #8
    41d0:	1ca70000 	stcne	0, cr0, [r7]
    41d4:	81400000 	mrshi	r0, (UNDEF: 64)
    41d8:	3c000011 	stccc	0, cr0, [r0], {17}
    41dc:	44000016 	strmi	r0, [r0], #-22	; 0xffffffea
    41e0:	01000016 	tsteq	r0, r6, lsl r0
    41e4:	8f2401a8 	svchi	0x002401a8
    41e8:	db000011 	blle	4234 <memcpy+0x22c>
    41ec:	2400001c 	strcs	r0, [r0], #-28	; 0xffffffe4
    41f0:	00001199 	muleq	r0, r9, r1
    41f4:	00001cf9 	strdeq	r1, [r0], -r9
    41f8:	2a3e0000 	bcs	f84200 <__ccfg+0xf64258>
    41fc:	7c000011 	stcvc	0, cr0, [r0], {17}
    4200:	08000016 	stmdaeq	r0, {r1, r2, r4}
    4204:	01000017 	tsteq	r0, r7, lsl r0
    4208:	0012809c 	mulseq	r2, ip, r0
    420c:	11382400 	teqne	r8, r0, lsl #8
    4210:	1d170000 	ldcne	0, cr0, [r7, #-0]
    4214:	42240000 	eormi	r0, r4, #0
    4218:	6c000011 	stcvs	0, cr0, [r0], {17}
    421c:	4100001d 	tstmi	r0, sp, lsl r0
    4220:	0000112a 	andeq	r1, r0, sl, lsr #2
    4224:	000016b0 			; <UNDEFINED> instruction: 0x000016b0
    4228:	000007c0 	andeq	r0, r0, r0, asr #15
    422c:	3301e001 	movwcc	lr, #4097	; 0x1001
    4230:	00001142 	andeq	r1, r0, r2, asr #2
    4234:	00113824 	andseq	r3, r1, r4, lsr #16
    4238:	001d7f00 	andseq	r7, sp, r0, lsl #30
    423c:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    4240:	00000b99 	muleq	r0, r9, fp
    4244:	00001998 	muleq	r0, r8, r9
    4248:	000019c4 	andeq	r1, r0, r4, asr #19
    424c:	12d89c01 	sbcsne	r9, r8, #256	; 0x100
    4250:	ad240000 	stcge	0, cr0, [r4, #-0]
    4254:	9d00000b 	stcls	0, cr0, [r0, #-44]	; 0xffffffd4
    4258:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
    425c:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
    4260:	00001dbb 			; <UNDEFINED> instruction: 0x00001dbb
    4264:	000bc724 	andeq	ip, fp, r4, lsr #14
    4268:	001de400 	andseq	lr, sp, r0, lsl #8
    426c:	0b993200 	bleq	fe650a74 <_estack+0xde64ba74>
    4270:	19ac0000 	stmibne	ip!, {}	; <UNPREDICTABLE>
    4274:	19b40000 	ldmibne	r4!, {}	; <UNPREDICTABLE>
    4278:	52010000 	andpl	r0, r1, #0
    427c:	ad330103 	ldfges	f0, [r3, #-12]!
    4280:	2400000b 	strcs	r0, [r0], #-11
    4284:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
    4288:	00001e0d 	andeq	r1, r0, sp, lsl #28
    428c:	000bc724 	andeq	ip, fp, r4, lsr #14
    4290:	001e2000 	andseq	r2, lr, r0
    4294:	42000000 	andmi	r0, r0, #0
    4298:	00000a4a 	andeq	r0, r0, sl, asr #20
    429c:	00001a24 	andeq	r1, r0, r4, lsr #20
    42a0:	00001a8c 	andeq	r1, r0, ip, lsl #21
    42a4:	5e249c01 	cdppl	12, 2, cr9, cr4, cr1, {0}
    42a8:	3300000a 	movwcc	r0, #10
    42ac:	2400001e 	strcs	r0, [r0], #-30	; 0xffffffe2
    42b0:	00000a6b 	andeq	r0, r0, fp, ror #20
    42b4:	00001e46 	andeq	r1, r0, r6, asr #28
    42b8:	000a7824 	andeq	r7, sl, r4, lsr #16
    42bc:	001ea600 	andseq	sl, lr, r0, lsl #12
    42c0:	0a852600 	beq	fe14dac8 <_estack+0xde148ac8>
    42c4:	1ef00000 	cdpne	0, 15, cr0, cr0, cr0, {0}
    42c8:	4a320000 	bmi	c842d0 <__ccfg+0xc64328>
    42cc:	3200000a 	andcc	r0, r0, #10
    42d0:	3600001a 			; <UNDEFINED> instruction: 0x3600001a
    42d4:	0100001a 	tsteq	r0, sl, lsl r0
    42d8:	33010386 	movwcc	r0, #4998	; 0x1386
    42dc:	00000a5e 	andeq	r0, r0, lr, asr sl
    42e0:	000a6b24 	andeq	r6, sl, r4, lsr #22
    42e4:	001f2400 	andseq	r2, pc, r0, lsl #8
    42e8:	0a783300 	beq	1e10ef0 <__ccfg+0x1df0f48>
    42ec:	85430000 	strbhi	r0, [r3, #-0]
    42f0:	0000000a 	andeq	r0, r0, sl
    42f4:	01740000 	cmneq	r4, r0
    42f8:	00030000 	andeq	r0, r3, r0
    42fc:	00001065 	andeq	r1, r0, r5, rrx
    4300:	01810104 	orreq	r0, r1, r4, lsl #2
    4304:	c00c0000 	andgt	r0, ip, r0
    4308:	0600000f 	streq	r0, [r0], -pc
    430c:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
    4310:	00000008 	andeq	r0, r0, r8
    4314:	3f000000 	svccc	0x00000000
    4318:	02000035 	andeq	r0, r0, #53	; 0x35
    431c:	03e50601 	mvneq	r0, #1048576	; 0x100000
    4320:	02020000 	andeq	r0, r2, #0
    4324:	00044605 	andeq	r4, r4, r5, lsl #12
    4328:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    432c:	000000b4 	strheq	r0, [r0], -r4
    4330:	af050802 	svcge	0x00050802
    4334:	02000000 	andeq	r0, r0, #0
    4338:	03e30801 	mvneq	r0, #65536	; 0x10000
    433c:	02020000 	andeq	r0, r2, #0
    4340:	00028a07 	andeq	r8, r2, r7, lsl #20
    4344:	23330300 	teqcs	r3, #0, 6
    4348:	34020000 	strcc	r0, [r2], #-0
    434c:	00005b19 	andeq	r5, r0, r9, lsl fp
    4350:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4354:	0000007e 	andeq	r0, r0, lr, ror r0
    4358:	79070802 	stmdbvc	r7, {r1, fp}
    435c:	04000000 	streq	r0, [r0], #-0
    4360:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4364:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    4368:	00008307 	andeq	r8, r0, r7, lsl #6
    436c:	82040500 	andhi	r0, r4, #0, 10
    4370:	06000000 	streq	r0, [r0], -r0
    4374:	00000077 	andeq	r0, r0, r7, ror r0
    4378:	04050107 	streq	r0, [r5], #-263	; 0xfffffef9
    437c:	0000004f 	andeq	r0, r0, pc, asr #32
    4380:	000fb308 	andeq	fp, pc, r8, lsl #6
    4384:	117f0100 	cmnne	pc, r0, lsl #2
    4388:	0000004f 	andeq	r0, r0, pc, asr #32
    438c:	87080101 	strhi	r0, [r8, -r1, lsl #2]
    4390:	0100000f 	tsteq	r0, pc
    4394:	004f1180 	subeq	r1, pc, r0, lsl #3
    4398:	01010000 	mrseq	r0, (UNDEF: 1)
    439c:	00100308 	andseq	r0, r0, r8, lsl #6
    43a0:	11810100 	orrne	r0, r1, r0, lsl #2
    43a4:	0000004f 	andeq	r0, r0, pc, asr #32
    43a8:	fe080101 	cdp2	1, 0, cr0, cr8, cr1, {0}
    43ac:	0100000f 	tsteq	r0, pc
    43b0:	004f1182 	subeq	r1, pc, r2, lsl #3
    43b4:	01010000 	mrseq	r0, (UNDEF: 1)
    43b8:	000fba08 	andeq	fp, pc, r8, lsl #20
    43bc:	11830100 	orrne	r0, r3, r0, lsl #2
    43c0:	0000004f 	andeq	r0, r0, pc, asr #32
    43c4:	7f080101 	svcvc	0x00080101
    43c8:	0100000f 	tsteq	r0, pc
    43cc:	004f1184 	subeq	r1, pc, r4, lsl #3
    43d0:	01010000 	mrseq	r0, (UNDEF: 1)
    43d4:	00007d09 	andeq	r7, r0, r9, lsl #26
    43d8:	0000ee00 	andeq	lr, r0, r0, lsl #28
    43dc:	00700a00 	rsbseq	r0, r0, r0, lsl #20
    43e0:	00310000 	eorseq	r0, r1, r0
    43e4:	0000de06 	andeq	sp, r0, r6, lsl #28
    43e8:	101c0b00 	andsne	r0, ip, r0, lsl #22
    43ec:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    43f0:	0000ee0f 	andeq	lr, r0, pc, lsl #28
    43f4:	03050100 	movweq	r0, #20736	; 0x5100
    43f8:	00000000 	andeq	r0, r0, r0
    43fc:	00100a0c 	andseq	r0, r0, ip, lsl #20
    4400:	01280100 			; <UNDEFINED> instruction: 0x01280100
    4404:	1c2e0101 	stfnes	f0, [lr], #-4
    4408:	1c300000 	ldcne	0, cr0, [r0], #-0
    440c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4410:	000f960c 	andeq	r9, pc, ip, lsl #12
    4414:	01160100 	tsteq	r6, r0, lsl #2
    4418:	1c2c0101 	stfnes	f0, [ip], #-4
    441c:	1c2e0000 	stcne	0, cr0, [lr], #-0
    4420:	9c010000 	stcls	0, cr0, [r1], {-0}
    4424:	000fa60c 	andeq	sl, pc, ip, lsl #12
    4428:	01040100 	mrseq	r0, (UNDEF: 20)
    442c:	1c2a0101 	stfnes	f0, [sl], #-4
    4430:	1c2c0000 	stcne	0, cr0, [ip], #-0
    4434:	9c010000 	stcls	0, cr0, [r1], {-0}
    4438:	1033010d 	eorsne	r0, r3, sp, lsl #2
    443c:	d2010000 	andle	r0, r1, #0
    4440:	1c300101 	ldfnes	f0, [r0], #-4
    4444:	1c740000 	ldclne	0, cr0, [r4], #-0
    4448:	9c010000 	stcls	0, cr0, [r1], {-0}
    444c:	000f8d0e 	andeq	r8, pc, lr, lsl #26
    4450:	0fd40100 	svceq	0x00d40100
    4454:	00000084 	andeq	r0, r0, r4, lsl #1
    4458:	00001f37 	andeq	r1, r0, r7, lsr pc
    445c:	0010290e 	andseq	r2, r0, lr, lsl #18
    4460:	1ad40100 	bne	ff504868 <_estack+0xdf4ff868>
    4464:	00000084 	andeq	r0, r0, r4, lsl #1
    4468:	00001f55 	andeq	r1, r0, r5, asr pc
    446c:	05370000 	ldreq	r0, [r7, #-0]!
    4470:	00030000 	andeq	r0, r3, r0
    4474:	0000112a 	andeq	r1, r0, sl, lsr #2
    4478:	01810104 	orreq	r0, r1, r4, lsl #2
    447c:	930c0000 	movwls	r0, #49152	; 0xc000
    4480:	06000010 			; <UNDEFINED> instruction: 0x06000010
    4484:	66000004 	strvs	r0, [r0], -r4
    4488:	02000036 	andeq	r0, r0, #54	; 0x36
    448c:	03e50601 	mvneq	r0, #1048576	; 0x100000
    4490:	02020000 	andeq	r0, r2, #0
    4494:	00044605 	andeq	r4, r4, r5, lsl #12
    4498:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    449c:	000000b4 	strheq	r0, [r0], -r4
    44a0:	af050802 	svcge	0x00050802
    44a4:	03000000 	movweq	r0, #0
    44a8:	0000239b 	muleq	r0, fp, r3
    44ac:	45182e01 	ldrmi	r2, [r8, #-3585]	; 0xfffff1ff
    44b0:	02000000 	andeq	r0, r0, #0
    44b4:	03e30801 	mvneq	r0, #65536	; 0x10000
    44b8:	91030000 	mrsls	r0, (UNDEF: 3)
    44bc:	01000027 	tsteq	r0, r7, lsr #32
    44c0:	00581931 	subseq	r1, r8, r1, lsr r9
    44c4:	02020000 	andeq	r0, r2, #0
    44c8:	00028a07 	andeq	r8, r2, r7, lsl #20
    44cc:	23330300 	teqcs	r3, #0, 6
    44d0:	34010000 	strcc	r0, [r1], #-0
    44d4:	00006b19 	andeq	r6, r0, r9, lsl fp
    44d8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    44dc:	0000007e 	andeq	r0, r0, lr, ror r0
    44e0:	79070802 	stmdbvc	r7, {r1, fp}
    44e4:	04000000 	streq	r0, [r0], #-0
    44e8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    44ec:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    44f0:	00008307 	andeq	r8, r0, r7, lsl #6
    44f4:	02580500 	subseq	r0, r8, #0, 10
    44f8:	01af092f 			; <UNDEFINED> instruction: 0x01af092f
    44fc:	ed060000 	stc	0, cr0, [r6, #-0]
    4500:	02000011 	andeq	r0, r0, #17
    4504:	005f1031 	subseq	r1, pc, r1, lsr r0	; <UNPREDICTABLE>
    4508:	06000000 	streq	r0, [r0], -r0
    450c:	00001102 	andeq	r1, r0, r2, lsl #2
    4510:	5f103202 	svcpl	0x00103202
    4514:	04000000 	streq	r0, [r0], #-0
    4518:	0010ca06 	andseq	ip, r0, r6, lsl #20
    451c:	10330200 	eorsne	r0, r3, r0, lsl #4
    4520:	0000005f 	andeq	r0, r0, pc, asr r0
    4524:	107d0608 	rsbsne	r0, sp, r8, lsl #12
    4528:	34020000 	strcc	r0, [r2], #-0
    452c:	00005f10 	andeq	r5, r0, r0, lsl pc
    4530:	3c060c00 	stccc	12, cr0, [r6], {-0}
    4534:	02000010 	andeq	r0, r0, #16
    4538:	005f1035 	subseq	r1, pc, r5, lsr r0	; <UNPREDICTABLE>
    453c:	06100000 	ldreq	r0, [r0], -r0
    4540:	0000104d 	andeq	r1, r0, sp, asr #32
    4544:	5f103602 	svcpl	0x00103602
    4548:	14000000 	strne	r0, [r0], #-0
    454c:	00106d06 	andseq	r6, r0, r6, lsl #26
    4550:	10370200 	eorsne	r0, r7, r0, lsl #4
    4554:	0000005f 	andeq	r0, r0, pc, asr r0
    4558:	11920618 	orrsne	r0, r2, r8, lsl r6
    455c:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    4560:	00005f10 	andeq	r5, r0, r0, lsl pc
    4564:	e2061c00 	and	r1, r6, #0, 24
    4568:	02000010 	andeq	r0, r0, #16
    456c:	005f1039 	subseq	r1, pc, r9, lsr r0	; <UNPREDICTABLE>
    4570:	06200000 	strteq	r0, [r0], -r0
    4574:	000010f2 	strdeq	r1, [r0], -r2
    4578:	5f103a02 	svcpl	0x00103a02
    457c:	24000000 	strcs	r0, [r0], #-0
    4580:	0011b806 	andseq	fp, r1, r6, lsl #16
    4584:	103b0200 	eorsne	r0, fp, r0, lsl #4
    4588:	0000005f 	andeq	r0, r0, pc, asr r0
    458c:	11c80628 	bicne	r0, r8, r8, lsr #12
    4590:	3c020000 	stccc	0, cr0, [r2], {-0}
    4594:	00005f10 	andeq	r5, r0, r0, lsl pc
    4598:	5e062c00 	cdppl	12, 0, cr2, cr6, cr0, {0}
    459c:	02000010 	andeq	r0, r0, #16
    45a0:	005f103d 	subseq	r1, pc, sp, lsr r0	; <UNPREDICTABLE>
    45a4:	06300000 	ldrteq	r0, [r0], -r0
    45a8:	00001158 	andeq	r1, r0, r8, asr r1
    45ac:	5f103e02 	svcpl	0x00103e02
    45b0:	34000000 	strcc	r0, [r0], #-0
    45b4:	0011fd06 	andseq	pc, r1, r6, lsl #26
    45b8:	103f0200 	eorsne	r0, pc, r0, lsl #4
    45bc:	0000005f 	andeq	r0, r0, pc, asr r0
    45c0:	11130638 	tstne	r3, r8, lsr r6
    45c4:	40020000 	andmi	r0, r2, r0
    45c8:	00005f10 	andeq	r5, r0, r0, lsl pc
    45cc:	27063c00 	strcs	r3, [r6, -r0, lsl #24]
    45d0:	02000011 	andeq	r0, r0, #17
    45d4:	005f1041 	subseq	r1, pc, r1, asr #32
    45d8:	06400000 	strbeq	r0, [r0], -r0
    45dc:	0000117c 	andeq	r1, r0, ip, ror r1
    45e0:	5f104202 	svcpl	0x00104202
    45e4:	44000000 	strmi	r0, [r0], #-0
    45e8:	00116806 	andseq	r6, r1, r6, lsl #16
    45ec:	10430200 	subne	r0, r3, r0, lsl #4
    45f0:	0000005f 	andeq	r0, r0, pc, asr r0
    45f4:	11a30648 			; <UNDEFINED> instruction: 0x11a30648
    45f8:	44020000 	strmi	r0, [r2], #-0
    45fc:	00005f10 	andeq	r5, r0, r0, lsl pc
    4600:	d8064c00 	stmdale	r6, {sl, fp, lr}
    4604:	02000011 	andeq	r0, r0, #17
    4608:	005f1045 	subseq	r1, pc, r5, asr #32
    460c:	06500000 	ldrbeq	r0, [r0], -r0
    4610:	00001142 	andeq	r1, r0, r2, asr #2
    4614:	5f104602 	svcpl	0x00104602
    4618:	54000000 	strpl	r0, [r0], #-0
    461c:	113b0300 	teqne	fp, r0, lsl #6
    4620:	47020000 	strmi	r0, [r2, -r0]
    4624:	00008703 	andeq	r8, r0, r3, lsl #14
    4628:	01af0700 			; <UNDEFINED> instruction: 0x01af0700
    462c:	8c080000 	stchi	0, cr0, [r8], {-0}
    4630:	02000010 	andeq	r0, r0, #16
    4634:	01bb154e 			; <UNDEFINED> instruction: 0x01bb154e
    4638:	01010000 	mrseq	r0, (UNDEF: 1)
    463c:	00227c03 	eoreq	r7, r2, r3, lsl #24
    4640:	12270300 	eorne	r0, r7, #0, 6
    4644:	0000004c 	andeq	r0, r0, ip, asr #32
    4648:	0001ce07 	andeq	ip, r1, r7, lsl #28
    464c:	01ce0900 	biceq	r0, lr, r0, lsl #18
    4650:	fc030000 	stc2	0, cr0, [r3], {-0}
    4654:	03000013 	movweq	r0, #19
    4658:	0039122b 	eorseq	r1, r9, fp, lsr #4
    465c:	e4090000 	str	r0, [r9], #-0
    4660:	03000001 	movweq	r0, #1
    4664:	000022cd 	andeq	r2, r0, sp, asr #5
    4668:	5f122c03 	svcpl	0x00122c03
    466c:	07000000 	streq	r0, [r0, -r0]
    4670:	000001f5 	strdeq	r0, [r0], -r5
    4674:	0002ef03 	andeq	lr, r2, r3, lsl #30
    4678:	122d0300 	eorne	r0, sp, #0, 6
    467c:	0000005f 	andeq	r0, r0, pc, asr r0
    4680:	32030805 	andcc	r0, r3, #327680	; 0x50000
    4684:	0002a009 	andeq	sl, r2, r9
    4688:	03180a00 	tsteq	r8, #0, 20
    468c:	34030000 	strcc	r0, [r3], #-0
    4690:	0001e407 	andeq	lr, r1, r7, lsl #8
    4694:	07010100 	streq	r0, [r1, -r0, lsl #2]
    4698:	009e0a00 	addseq	r0, lr, r0, lsl #20
    469c:	35030000 	strcc	r0, [r3, #-0]
    46a0:	0001e403 	andeq	lr, r1, r3, lsl #8
    46a4:	06010100 	streq	r0, [r1], -r0, lsl #2
    46a8:	02bf0a00 	adcseq	r0, pc, #0, 20
    46ac:	36030000 	strcc	r0, [r3], -r0
    46b0:	0001e403 	andeq	lr, r1, r3, lsl #8
    46b4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    46b8:	048c0a00 	streq	r0, [ip], #2560	; 0xa00
    46bc:	37030000 	strcc	r0, [r3, -r0]
    46c0:	0001e403 	andeq	lr, r1, r3, lsl #8
    46c4:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    46c8:	04850a00 	streq	r0, [r5], #2560	; 0xa00
    46cc:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    46d0:	0001e403 	andeq	lr, r1, r3, lsl #8
    46d4:	00040100 	andeq	r0, r4, r0, lsl #2
    46d8:	04760600 	ldrbteq	r0, [r6], #-1536	; 0xfffffa00
    46dc:	3a030000 	bcc	c46e4 <__ccfg+0xa473c>
    46e0:	0001e407 	andeq	lr, r1, r7, lsl #8
    46e4:	2b060100 	blcs	184aec <__ccfg+0x164b44>
    46e8:	03000000 	movweq	r0, #0
    46ec:	01e4033c 	mvneq	r0, ip, lsr r3
    46f0:	06020000 	streq	r0, [r2], -r0
    46f4:	00000072 	andeq	r0, r0, r2, ror r0
    46f8:	e4033d03 	str	r3, [r3], #-3331	; 0xfffff2fd
    46fc:	03000001 	movweq	r0, #1
    4700:	00014f06 	andeq	r4, r1, r6, lsl #30
    4704:	083f0300 	ldmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    4708:	000001f5 	strdeq	r0, [r0], -r5
    470c:	d4030004 	strle	r0, [r3], #-4
    4710:	03000004 	movweq	r0, #4
    4714:	02120341 	andseq	r0, r2, #67108865	; 0x4000001
    4718:	a0090000 	andge	r0, r9, r0
    471c:	08000002 	stmdaeq	r0, {r1}
    4720:	0000030c 	andeq	r0, r0, ip, lsl #6
    4724:	ac1a4303 	ldcge	3, cr4, [sl], {3}
    4728:	01000002 	tsteq	r0, r2
    472c:	038e0801 	orreq	r0, lr, #65536	; 0x10000
    4730:	45030000 	strmi	r0, [r3, #-0]
    4734:	0002cd0e 	andeq	ip, r2, lr, lsl #26
    4738:	0b010100 	bleq	44b40 <__ccfg+0x24b98>
    473c:	0002d304 	andeq	sp, r2, r4, lsl #6
    4740:	08010200 	stmdaeq	r1, {r9}
    4744:	000003ec 	andeq	r0, r0, ip, ror #7
    4748:	0002d307 	andeq	sp, r2, r7, lsl #6
    474c:	03a40800 			; <UNDEFINED> instruction: 0x03a40800
    4750:	45030000 	strmi	r0, [r3, #-0]
    4754:	0002cd1e 	andeq	ip, r2, lr, lsl sp
    4758:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    475c:	098f0408 	stmibeq	pc, {r3, sl}	; <UNPREDICTABLE>
    4760:	0000031e 	andeq	r0, r0, lr, lsl r3
    4764:	0019fd06 	andseq	pc, r9, r6, lsl #26
    4768:	0b900400 	bleq	fe405770 <_estack+0xde400770>
    476c:	0000005f 	andeq	r0, r0, pc, asr r0
    4770:	06b30600 	ldrteq	r0, [r3], r0, lsl #12
    4774:	91040000 	mrsls	r0, (UNDEF: 4)
    4778:	0001ce08 	andeq	ip, r1, r8, lsl #28
    477c:	be060400 	cfcpyslt	mvf0, mvf6
    4780:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    4784:	01f01092 			; <UNDEFINED> instruction: 0x01f01092
    4788:	00060000 	andeq	r0, r6, r0
    478c:	00049303 	andeq	r9, r4, r3, lsl #6
    4790:	03930400 	orrseq	r0, r3, #0, 8
    4794:	000002ed 	andeq	r0, r0, sp, ror #5
    4798:	00031e0c 	andeq	r1, r3, ip, lsl #28
    479c:	00033500 	andeq	r3, r3, r0, lsl #10
    47a0:	08000d00 	stmdaeq	r0, {r8, sl, fp}
    47a4:	00000021 	andeq	r0, r0, r1, lsr #32
    47a8:	2a0f9904 	bcs	3eabc0 <__ccfg+0x3cac18>
    47ac:	01000003 	tsteq	r0, r3
    47b0:	05010501 	streq	r0, [r1, #-1281]	; 0xfffffaff
    47b4:	036d0991 	cmneq	sp, #2375680	; 0x244000
    47b8:	0c0a0000 	stceq	0, cr0, [sl], {-0}
    47bc:	05000005 	streq	r0, [r0, #-5]
    47c0:	01e40793 			; <UNDEFINED> instruction: 0x01e40793
    47c4:	07010000 	streq	r0, [r1, -r0]
    47c8:	1c0a0001 	stcne	0, cr0, [sl], {1}
    47cc:	05000000 	streq	r0, [r0, #-0]
    47d0:	01e40394 			; <UNDEFINED> instruction: 0x01e40394
    47d4:	01010000 	mrseq	r0, (UNDEF: 1)
    47d8:	03000000 	movweq	r0, #0
    47dc:	0000029d 	muleq	r0, sp, r2
    47e0:	43039605 	movwmi	r9, #13829	; 0x3605
    47e4:	07000003 	streq	r0, [r0, -r3]
    47e8:	0000036d 	andeq	r0, r0, sp, ror #6
    47ec:	0003790c 	andeq	r7, r3, ip, lsl #18
    47f0:	00038900 	andeq	r8, r3, r0, lsl #18
    47f4:	07000d00 	streq	r0, [r0, -r0, lsl #26]
    47f8:	0000037e 	andeq	r0, r0, lr, ror r3
    47fc:	00035708 	andeq	r5, r3, r8, lsl #14
    4800:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    4804:	00000389 	andeq	r0, r0, r9, lsl #7
    4808:	da0c0101 	ble	304c14 <__ccfg+0x2e4c6c>
    480c:	a7000001 	strge	r0, [r0, -r1]
    4810:	0d000003 	stceq	0, cr0, [r0, #-12]
    4814:	039c0700 	orrseq	r0, ip, #0, 14
    4818:	d5080000 	strle	r0, [r8, #-0]
    481c:	06000003 	streq	r0, [r0], -r3
    4820:	03a71306 			; <UNDEFINED> instruction: 0x03a71306
    4824:	01010000 	mrseq	r0, (UNDEF: 1)
    4828:	00013408 	andeq	r3, r1, r8, lsl #8
    482c:	0ec30400 	cdpeq	4, 12, cr0, cr3, cr0, {0}
    4830:	000001f5 	strdeq	r0, [r0], -r5
    4834:	480e0101 	stmdami	lr, {r0, r8}
    4838:	07000005 	streq	r0, [r0, -r5]
    483c:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    4840:	0b000003 	bleq	4854 <patchGenfskRfe+0x484>
    4844:	0003db04 	andeq	sp, r3, r4, lsl #22
    4848:	e7010f00 	str	r0, [r1, -r0, lsl #30]
    484c:	10000003 	andne	r0, r0, r3
    4850:	000001ce 	andeq	r0, r0, lr, asr #3
    4854:	02da0c00 	sbcseq	r0, sl, #0, 24
    4858:	03f20000 	mvnseq	r0, #0
    485c:	000d0000 	andeq	r0, sp, r0
    4860:	0003e707 	andeq	lr, r3, r7, lsl #14
    4864:	04e41100 	strbteq	r1, [r4], #256	; 0x100
    4868:	7f070000 	svcvc	0x00070000
    486c:	03f21601 	mvnseq	r1, #1048576	; 0x100000
    4870:	01010000 	mrseq	r0, (UNDEF: 1)
    4874:	0003c111 	andeq	ip, r3, r1, lsl r1
    4878:	01820700 	orreq	r0, r2, r0, lsl #14
    487c:	00020114 	andeq	r0, r2, r4, lsl r1
    4880:	11010100 	mrsne	r0, (UNDEF: 17)
    4884:	00000511 	andeq	r0, r0, r1, lsl r5
    4888:	0e02d807 	cdpeq	8, 0, cr13, cr2, cr7, {0}
    488c:	000001f5 	strdeq	r0, [r0], -r5
    4890:	08120101 	ldmdaeq	r2, {r0, r8}
    4894:	09030307 	stmdbeq	r3, {r0, r1, r2, r8, r9}
    4898:	0000044b 	andeq	r0, r0, fp, asr #8
    489c:	00361b13 	eorseq	r1, r6, r3, lsl fp
    48a0:	03070700 	movweq	r0, #30464	; 0x7700
    48a4:	0001ce07 	andeq	ip, r1, r7, lsl #28
    48a8:	0b130000 	bleq	4c48b0 <__ccfg+0x4a4908>
    48ac:	07000006 	streq	r0, [r0, -r6]
    48b0:	06080308 	streq	r0, [r8], -r8, lsl #6
    48b4:	04000002 	streq	r0, [r0], #-2
    48b8:	02750e00 	rsbseq	r0, r5, #0, 28
    48bc:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    48c0:	04240303 	strteq	r0, [r4], #-771	; 0xfffffcfd
    48c4:	58140000 	ldmdapl	r4, {}	; <UNPREDICTABLE>
    48c8:	30000005 	andcc	r0, r0, r5
    48cc:	08030b07 	stmdaeq	r3, {r0, r1, r2, r8, r9, fp}
    48d0:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    48d4:	00151213 	andseq	r1, r5, r3, lsl r2
    48d8:	03140700 	tsteq	r4, #0, 14
    48dc:	0001ce08 	andeq	ip, r1, r8, lsl #28
    48e0:	2d130000 	ldccs	0, cr0, [r3, #-0]
    48e4:	07000003 	streq	r0, [r0, -r3]
    48e8:	ce080315 	mcrgt	3, 0, r0, cr8, cr5, {0}
    48ec:	02000001 	andeq	r0, r0, #1
    48f0:	00054b13 	andeq	r4, r5, r3, lsl fp
    48f4:	03160700 	tsteq	r6, #0, 14
    48f8:	0003c80b 	andeq	ip, r3, fp, lsl #16
    48fc:	88130400 	ldmdahi	r3, {sl}
    4900:	0700000f 	streq	r0, [r0, -pc]
    4904:	06090317 			; <UNDEFINED> instruction: 0x06090317
    4908:	08000002 	stmdaeq	r0, {r1}
    490c:	0004dd13 	andeq	sp, r4, r3, lsl sp
    4910:	03180700 	tsteq	r8, #0, 14
    4914:	0004bb0f 	andeq	fp, r4, pc, lsl #22
    4918:	28130c00 	ldmdacs	r3, {sl, fp}
    491c:	07000003 	streq	r0, [r0, -r3]
    4920:	cb150319 	blgt	54558c <__ccfg+0x5255e4>
    4924:	2c000004 	stccs	0, cr0, [r0], {4}
    4928:	044b0c00 	strbeq	r0, [fp], #-3072	; 0xfffff400
    492c:	04cb0000 	strbeq	r0, [fp], #0
    4930:	80150000 	andshi	r0, r5, r0
    4934:	03000000 	movweq	r0, #0
    4938:	58040b00 	stmdapl	r4, {r8, r9, fp}
    493c:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    4940:	00000563 	andeq	r0, r0, r3, ror #10
    4944:	1b031c07 	blne	cb968 <__ccfg+0xab9c0>
    4948:	00000458 	andeq	r0, r0, r8, asr r4
    494c:	0003b711 	andeq	fp, r3, r1, lsl r7
    4950:	031e0700 	tsteq	lr, #0, 14
    4954:	0004ed14 	andeq	lr, r4, r4, lsl sp
    4958:	0b010100 	bleq	44d60 <__ccfg+0x24db8>
    495c:	0004d104 	andeq	sp, r4, r4, lsl #2
    4960:	00110800 	andseq	r0, r1, r0, lsl #16
    4964:	1d080000 	stcne	0, cr0, [r8, #-0]
    4968:	0001ce13 	andeq	ip, r1, r3, lsl lr
    496c:	08010100 	stmdaeq	r1, {r8}
    4970:	0000031f 	andeq	r0, r0, pc, lsl r3
    4974:	df1a1e08 	svcle	0x001a1e08
    4978:	01000001 	tsteq	r0, r1
    497c:	04c00801 	strbeq	r0, [r0], #2049	; 0x801
    4980:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    4984:	0001df24 	andeq	sp, r1, r4, lsr #30
    4988:	08010100 	stmdaeq	r1, {r8}
    498c:	000000d4 	ldrdeq	r0, [r0], -r4
    4990:	ed142208 	lfm	f2, 4, [r4, #-32]	; 0xffffffe0
    4994:	01000004 	tsteq	r0, r4
    4998:	01c01601 	biceq	r1, r0, r1, lsl #12
    499c:	17090000 	strne	r0, [r9, -r0]
    49a0:	03050e02 	movweq	r0, #24066	; 0x5e02
    49a4:	0001ffa8 	andeq	pc, r1, r8, lsr #31
    49a8:	00050000 	andeq	r0, r5, r0
    49ac:	49000300 	stmdbmi	r0, {r8, r9}
    49b0:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
    49b4:	00018101 	andeq	r8, r1, r1, lsl #2
    49b8:	12440c00 	subne	r0, r4, #0, 24
    49bc:	04060000 	streq	r0, [r6], #-0
    49c0:	09400000 	stmdbeq	r0, {}^	; <UNPREDICTABLE>
    49c4:	00000000 	andeq	r0, r0, r0
    49c8:	37ef0000 	strbcc	r0, [pc, r0]!
    49cc:	01020000 	mrseq	r0, (UNDEF: 2)
    49d0:	0003e506 	andeq	lr, r3, r6, lsl #10
    49d4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    49d8:	00000446 	andeq	r0, r0, r6, asr #8
    49dc:	b4050402 	strlt	r0, [r5], #-1026	; 0xfffffbfe
    49e0:	02000000 	andeq	r0, r0, #0
    49e4:	00af0508 	adceq	r0, pc, r8, lsl #10
    49e8:	9b030000 	blls	c49f0 <__ccfg+0xa4a48>
    49ec:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    49f0:	004d182e 	subeq	r1, sp, lr, lsr #16
    49f4:	01020000 	mrseq	r0, (UNDEF: 2)
    49f8:	0003e308 	andeq	lr, r3, r8, lsl #6
    49fc:	27910300 	ldrcs	r0, [r1, r0, lsl #6]
    4a00:	31040000 	mrscc	r0, (UNDEF: 4)
    4a04:	00006019 	andeq	r6, r0, r9, lsl r0
    4a08:	07020200 	streq	r0, [r2, -r0, lsl #4]
    4a0c:	0000028a 	andeq	r0, r0, sl, lsl #5
    4a10:	00233303 	eoreq	r3, r3, r3, lsl #6
    4a14:	19340400 	ldmdbne	r4!, {sl}
    4a18:	00000073 	andeq	r0, r0, r3, ror r0
    4a1c:	7e070402 	cdpvc	4, 0, cr0, cr7, cr2, {0}
    4a20:	02000000 	andeq	r0, r0, #0
    4a24:	00790708 	rsbseq	r0, r9, r8, lsl #14
    4a28:	04040000 	streq	r0, [r4], #-0
    4a2c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    4a30:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4a34:	00000083 	andeq	r0, r0, r3, lsl #1
    4a38:	00227c03 	eoreq	r7, r2, r3, lsl #24
    4a3c:	12270500 	eorne	r0, r7, #0, 10
    4a40:	00000054 	andeq	r0, r0, r4, asr r0
    4a44:	00008f05 	andeq	r8, r0, r5, lsl #30
    4a48:	008f0600 	addeq	r0, pc, r0, lsl #12
    4a4c:	fc030000 	stc2	0, cr0, [r3], {-0}
    4a50:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    4a54:	0041122b 	subeq	r1, r1, fp, lsr #4
    4a58:	a5060000 	strge	r0, [r6, #-0]
    4a5c:	05000000 	streq	r0, [r0, #-0]
    4a60:	000000a5 	andeq	r0, r0, r5, lsr #1
    4a64:	0022cd03 	eoreq	ip, r2, r3, lsl #26
    4a68:	122c0500 	eorne	r0, ip, #0, 10
    4a6c:	00000067 	andeq	r0, r0, r7, rrx
    4a70:	0000bb05 	andeq	fp, r0, r5, lsl #22
    4a74:	02ef0300 	rsceq	r0, pc, #0, 6
    4a78:	2d050000 	stccs	0, cr0, [r5, #-0]
    4a7c:	00006712 	andeq	r6, r0, r2, lsl r7
    4a80:	03640300 	cmneq	r4, #0, 6
    4a84:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    4a88:	0000e410 	andeq	lr, r0, r0, lsl r4
    4a8c:	8f040700 	svchi	0x00040700
    4a90:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4a94:	09320508 	ldmdbeq	r2!, {r3, r8, sl}
    4a98:	00000178 	andeq	r0, r0, r8, ror r1
    4a9c:	00031809 	andeq	r1, r3, r9, lsl #16
    4aa0:	07340500 	ldreq	r0, [r4, -r0, lsl #10]!
    4aa4:	000000a5 	andeq	r0, r0, r5, lsr #1
    4aa8:	00070101 	andeq	r0, r7, r1, lsl #2
    4aac:	00009e09 	andeq	r9, r0, r9, lsl #28
    4ab0:	03350500 	teqeq	r5, #0, 10
    4ab4:	000000a5 	andeq	r0, r0, r5, lsr #1
    4ab8:	00060101 	andeq	r0, r6, r1, lsl #2
    4abc:	0002bf09 	andeq	fp, r2, r9, lsl #30
    4ac0:	03360500 	teqeq	r6, #0, 10
    4ac4:	000000a5 	andeq	r0, r0, r5, lsr #1
    4ac8:	00050101 	andeq	r0, r5, r1, lsl #2
    4acc:	00048c09 	andeq	r8, r4, r9, lsl #24
    4ad0:	03370500 	teqeq	r7, #0, 10
    4ad4:	000000a5 	andeq	r0, r0, r5, lsr #1
    4ad8:	00040101 	andeq	r0, r4, r1, lsl #2
    4adc:	00048509 	andeq	r8, r4, r9, lsl #10
    4ae0:	03380500 	teqeq	r8, #0, 10
    4ae4:	000000a5 	andeq	r0, r0, r5, lsr #1
    4ae8:	00000401 	andeq	r0, r0, r1, lsl #8
    4aec:	0004760a 	andeq	r7, r4, sl, lsl #12
    4af0:	073a0500 	ldreq	r0, [sl, -r0, lsl #10]!
    4af4:	000000a5 	andeq	r0, r0, r5, lsr #1
    4af8:	002b0a01 	eoreq	r0, fp, r1, lsl #20
    4afc:	3c050000 	stccc	0, cr0, [r5], {-0}
    4b00:	0000a503 	andeq	sl, r0, r3, lsl #10
    4b04:	720a0200 	andvc	r0, sl, #0, 4
    4b08:	05000000 	streq	r0, [r0, #-0]
    4b0c:	00a5033d 	adceq	r0, r5, sp, lsr r3
    4b10:	0a030000 	beq	c4b18 <__ccfg+0xa4b70>
    4b14:	0000014f 	andeq	r0, r0, pc, asr #2
    4b18:	bb083f05 	bllt	214734 <__ccfg+0x1f478c>
    4b1c:	04000000 	streq	r0, [r0], #-0
    4b20:	04d40300 	ldrbeq	r0, [r4], #768	; 0x300
    4b24:	41050000 	mrsmi	r0, (UNDEF: 5)
    4b28:	0000ea03 	andeq	lr, r0, r3, lsl #20
    4b2c:	01780600 	cmneq	r8, r0, lsl #12
    4b30:	0c0b0000 	stceq	0, cr0, [fp], {-0}
    4b34:	05000003 	streq	r0, [r0, #-3]
    4b38:	01841a43 	orreq	r1, r4, r3, asr #20
    4b3c:	01010000 	mrseq	r0, (UNDEF: 1)
    4b40:	00038e0b 	andeq	r8, r3, fp, lsl #28
    4b44:	0e450500 	cdpeq	5, 4, cr0, cr5, cr0, {0}
    4b48:	000001a5 	andeq	r0, r0, r5, lsr #3
    4b4c:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    4b50:	000001ab 	andeq	r0, r0, fp, lsr #3
    4b54:	ec080102 	stfs	f0, [r8], {2}
    4b58:	05000003 	streq	r0, [r0, #-3]
    4b5c:	000001ab 	andeq	r0, r0, fp, lsr #3
    4b60:	0003a40b 	andeq	sl, r3, fp, lsl #8
    4b64:	1e450500 	cdpne	5, 4, cr0, cr5, cr0, {0}
    4b68:	000001a5 	andeq	r0, r0, r5, lsr #3
    4b6c:	08080101 	stmdaeq	r8, {r0, r8}
    4b70:	f6098f06 			; <UNDEFINED> instruction: 0xf6098f06
    4b74:	0a000001 	beq	4b80 <patchImageGenfsk+0xfc>
    4b78:	000019fd 	strdeq	r1, [r0], -sp
    4b7c:	670b9006 	strvs	r9, [fp, -r6]
    4b80:	00000000 	andeq	r0, r0, r0
    4b84:	0006b30a 	andeq	fp, r6, sl, lsl #6
    4b88:	08910600 	ldmeq	r1, {r9, sl}
    4b8c:	0000008f 	andeq	r0, r0, pc, lsl #1
    4b90:	15be0a04 	ldrne	r0, [lr, #2564]!	; 0xa04
    4b94:	92060000 	andls	r0, r6, #0
    4b98:	0000b110 	andeq	fp, r0, r0, lsl r1
    4b9c:	03000600 	movweq	r0, #1536	; 0x600
    4ba0:	00000493 	muleq	r0, r3, r4
    4ba4:	c5039306 	strgt	r9, [r3, #-774]	; 0xfffffcfa
    4ba8:	0c000001 	stceq	0, cr0, [r0], {1}
    4bac:	000001f6 	strdeq	r0, [r0], -r6
    4bb0:	0000020d 	andeq	r0, r0, sp, lsl #4
    4bb4:	210b000d 	tstcs	fp, sp
    4bb8:	06000000 	streq	r0, [r0], -r0
    4bbc:	02020f99 	andeq	r0, r2, #612	; 0x264
    4bc0:	01010000 	mrseq	r0, (UNDEF: 1)
    4bc4:	00b60407 	adcseq	r0, r6, r7, lsl #8
    4bc8:	01080000 	mrseq	r0, (UNDEF: 8)
    4bcc:	4b099107 	blmi	268ff0 <__ccfg+0x249048>
    4bd0:	09000002 	stmdbeq	r0, {r1}
    4bd4:	0000050c 	andeq	r0, r0, ip, lsl #10
    4bd8:	a5079307 	strge	r9, [r7, #-775]	; 0xfffffcf9
    4bdc:	01000000 	mrseq	r0, (UNDEF: 0)
    4be0:	09000107 	stmdbeq	r0, {r0, r1, r2, r8}
    4be4:	0000001c 	andeq	r0, r0, ip, lsl r0
    4be8:	a5039407 	strge	r9, [r3, #-1031]	; 0xfffffbf9
    4bec:	01000000 	mrseq	r0, (UNDEF: 0)
    4bf0:	00000001 	andeq	r0, r0, r1
    4bf4:	00029d03 	andeq	r9, r2, r3, lsl #26
    4bf8:	03960700 	orrseq	r0, r6, #0, 14
    4bfc:	00000221 	andeq	r0, r0, r1, lsr #4
    4c00:	00024b05 	andeq	r4, r2, r5, lsl #22
    4c04:	02570c00 	subseq	r0, r7, #0, 24
    4c08:	02670000 	rsbeq	r0, r7, #0
    4c0c:	000d0000 	andeq	r0, sp, r0
    4c10:	00025c05 	andeq	r5, r2, r5, lsl #24
    4c14:	03570b00 	cmpeq	r7, #0, 22
    4c18:	9c070000 	stcls	0, cr0, [r7], {-0}
    4c1c:	00026717 	andeq	r6, r2, r7, lsl r7
    4c20:	0c010100 	stfeqs	f0, [r1], {-0}
    4c24:	0000009b 	muleq	r0, fp, r0
    4c28:	00000285 	andeq	r0, r0, r5, lsl #5
    4c2c:	7a05000d 	bvc	144c68 <__ccfg+0x124cc0>
    4c30:	0b000002 	bleq	4c40 <patchImageGenfsk+0x1bc>
    4c34:	000003d5 	ldrdeq	r0, [r0], -r5
    4c38:	85130608 	ldrhi	r0, [r3, #-1544]	; 0xfffff9f8
    4c3c:	01000002 	tsteq	r0, r2
    4c40:	01340b01 	teqeq	r4, r1, lsl #22
    4c44:	c3060000 	movwgt	r0, #24576	; 0x6000
    4c48:	0000bb0e 	andeq	fp, r0, lr, lsl #22
    4c4c:	0e010100 	adfeqs	f0, f1, f0
    4c50:	00000548 	andeq	r0, r0, r8, asr #10
    4c54:	10016e09 	andne	r6, r1, r9, lsl #28
    4c58:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
    4c5c:	02b90407 	adcseq	r0, r9, #117440512	; 0x7000000
    4c60:	010f0000 	mrseq	r0, CPSR
    4c64:	000002c5 	andeq	r0, r0, r5, asr #5
    4c68:	00008f10 	andeq	r8, r0, r0, lsl pc
    4c6c:	b20c0000 	andlt	r0, ip, #0
    4c70:	d0000001 	andle	r0, r0, r1
    4c74:	0d000002 	stceq	0, cr0, [r0, #-8]
    4c78:	02c50500 	sbceq	r0, r5, #0, 10
    4c7c:	e4110000 	ldr	r0, [r1], #-0
    4c80:	09000004 	stmdbeq	r0, {r2}
    4c84:	d016017f 	andsle	r0, r6, pc, ror r1
    4c88:	01000002 	tsteq	r0, r2
    4c8c:	03c11101 	biceq	r1, r1, #1073741824	; 0x40000000
    4c90:	82090000 	andhi	r0, r9, #0
    4c94:	00c71401 	sbceq	r1, r7, r1, lsl #8
    4c98:	01010000 	mrseq	r0, (UNDEF: 1)
    4c9c:	00051111 	andeq	r1, r5, r1, lsl r1
    4ca0:	02d80900 	sbcseq	r0, r8, #0, 18
    4ca4:	0000bb0e 	andeq	fp, r0, lr, lsl #22
    4ca8:	12010100 	andne	r0, r1, #0, 2
    4cac:	03030908 	movweq	r0, #14600	; 0x3908
    4cb0:	00032909 	andeq	r2, r3, r9, lsl #18
    4cb4:	361b1300 	ldrcc	r1, [fp], -r0, lsl #6
    4cb8:	07090000 	streq	r0, [r9, -r0]
    4cbc:	008f0703 	addeq	r0, pc, r3, lsl #14
    4cc0:	13000000 	movwne	r0, #0
    4cc4:	0000060b 	andeq	r0, r0, fp, lsl #12
    4cc8:	08030809 	stmdaeq	r3, {r0, r3, fp}
    4ccc:	000000cc 	andeq	r0, r0, ip, asr #1
    4cd0:	750e0004 	strvc	r0, [lr, #-4]
    4cd4:	09000002 	stmdbeq	r0, {r1}
    4cd8:	02030309 	andeq	r0, r3, #603979776	; 0x24000000
    4cdc:	14000003 	strne	r0, [r0], #-3
    4ce0:	00000558 	andeq	r0, r0, r8, asr r5
    4ce4:	030b0930 	movweq	r0, #47408	; 0xb930
    4ce8:	00039908 	andeq	r9, r3, r8, lsl #18
    4cec:	15121300 	ldrne	r1, [r2, #-768]	; 0xfffffd00
    4cf0:	14090000 	strne	r0, [r9], #-0
    4cf4:	008f0803 	addeq	r0, pc, r3, lsl #16
    4cf8:	13000000 	movwne	r0, #0
    4cfc:	0000032d 	andeq	r0, r0, sp, lsr #6
    4d00:	08031509 	stmdaeq	r3, {r0, r3, r8, sl, ip}
    4d04:	0000008f 	andeq	r0, r0, pc, lsl #1
    4d08:	054b1302 	strbeq	r1, [fp, #-770]	; 0xfffffcfe
    4d0c:	16090000 	strne	r0, [r9], -r0
    4d10:	02a60b03 	adceq	r0, r6, #3072	; 0xc00
    4d14:	13040000 	movwne	r0, #16384	; 0x4000
    4d18:	00000f88 	andeq	r0, r0, r8, lsl #31
    4d1c:	09031709 	stmdbeq	r3, {r0, r3, r8, r9, sl, ip}
    4d20:	000000cc 	andeq	r0, r0, ip, asr #1
    4d24:	04dd1308 	ldrbeq	r1, [sp], #776	; 0x308
    4d28:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    4d2c:	03990f03 	orrseq	r0, r9, #3, 30
    4d30:	130c0000 	movwne	r0, #49152	; 0xc000
    4d34:	00000328 	andeq	r0, r0, r8, lsr #6
    4d38:	15031909 	strne	r1, [r3, #-2313]	; 0xfffff6f7
    4d3c:	000003a9 	andeq	r0, r0, r9, lsr #7
    4d40:	290c002c 	stmdbcs	ip, {r2, r3, r5}
    4d44:	a9000003 	stmdbge	r0, {r0, r1}
    4d48:	15000003 	strne	r0, [r0, #-3]
    4d4c:	00000088 	andeq	r0, r0, r8, lsl #1
    4d50:	04070003 	streq	r0, [r7], #-3
    4d54:	00000336 	andeq	r0, r0, r6, lsr r3
    4d58:	0005630e 	andeq	r6, r5, lr, lsl #6
    4d5c:	031c0900 	tsteq	ip, #0, 18
    4d60:	0003361b 	andeq	r3, r3, fp, lsl r6
    4d64:	03b71100 			; <UNDEFINED> instruction: 0x03b71100
    4d68:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    4d6c:	03cb1403 	biceq	r1, fp, #50331648	; 0x3000000
    4d70:	01010000 	mrseq	r0, (UNDEF: 1)
    4d74:	03af0407 			; <UNDEFINED> instruction: 0x03af0407
    4d78:	110b0000 	mrsne	r0, (UNDEF: 11)
    4d7c:	0a000000 	beq	4d84 <__exidx_end+0x30>
    4d80:	008f131d 	addeq	r1, pc, sp, lsl r3	; <UNPREDICTABLE>
    4d84:	01010000 	mrseq	r0, (UNDEF: 1)
    4d88:	00031f0b 	andeq	r1, r3, fp, lsl #30
    4d8c:	1a1e0a00 	bne	787594 <__ccfg+0x7675ec>
    4d90:	000000a0 	andeq	r0, r0, r0, lsr #1
    4d94:	c00b0101 	andgt	r0, fp, r1, lsl #2
    4d98:	0a000004 	beq	4db0 <__exidx_end+0x5c>
    4d9c:	00a0241e 	adceq	r2, r0, lr, lsl r4
    4da0:	01010000 	mrseq	r0, (UNDEF: 1)
    4da4:	0000d40b 	andeq	sp, r0, fp, lsl #8
    4da8:	14220a00 	strtne	r0, [r2], #-2560	; 0xfffff600
    4dac:	000003cb 	andeq	r0, r0, fp, asr #7
    4db0:	6c160101 	ldfvss	f0, [r6], {1}
    4db4:	01000002 	tsteq	r0, r2
    4db8:	0305100d 	movweq	r1, #20493	; 0x500d
    4dbc:	00004351 	andeq	r4, r0, r1, asr r3
    4dc0:	12240117 	eorne	r0, r4, #-1073741819	; 0xc0000005
    4dc4:	11010000 	mrsne	r0, (UNDEF: 1)
    4dc8:	00000106 	andeq	r0, r0, r6, lsl #2
    4dcc:	00000000 	andeq	r0, r0, r0
    4dd0:	9c010000 	stcls	0, cr0, [r1], {-0}
    4dd4:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    4dd8:	00747318 	rsbseq	r7, r4, r8, lsl r3
    4ddc:	8f1c1101 	svchi	0x001c1101
    4de0:	73000000 	movwvc	r0, #0
    4de4:	1900001f 	stmdbne	r0, {r0, r1, r2, r3, r4}
    4de8:	0000121f 	andeq	r1, r0, pc, lsl r2
    4dec:	1b2c1101 	blne	b091f8 <__ccfg+0xae9250>
    4df0:	91000002 	tstls	r0, r2
    4df4:	1800001f 	stmdane	r0, {r0, r1, r2, r3, r4}
    4df8:	006c6176 	rsbeq	r6, ip, r6, ror r1
    4dfc:	d83a1101 	ldmdale	sl!, {r0, r8, ip}
    4e00:	af000000 	svcge	0x00000000
    4e04:	1a00001f 	bne	4e88 <__exidx_end+0x134>
    4e08:	13010070 	movwne	r0, #4208	; 0x1070
    4e0c:	0004bb12 	andeq	fp, r4, r2, lsl fp
    4e10:	00691b00 	rsbeq	r1, r9, r0, lsl #22
    4e14:	8f071401 	svchi	0x00071401
    4e18:	cd000000 	stcgt	0, cr0, [r0, #-0]
    4e1c:	1a00001f 	bne	4ea0 <__exidx_end+0x14c>
    4e20:	15010076 	strne	r0, [r1, #-118]	; 0xffffff8a
    4e24:	0000a507 	andeq	sl, r0, r7, lsl #10
    4e28:	04d41c00 	ldrbeq	r1, [r4], #3072	; 0xc00
	...
    4e34:	1c010000 	stcne	0, cr0, [r1], {-0}
    4e38:	04de1c03 	ldrbeq	r1, [lr], #3075	; 0xc03
	...
    4e44:	1f010000 	svcne	0x00010000
    4e48:	04e81d03 	strbteq	r1, [r8], #3331	; 0xd03
    4e4c:	00000000 	andeq	r0, r0, r0
    4e50:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
    4e54:	26010000 	strcs	r0, [r1], -r0
    4e58:	04f61e0b 	ldrbteq	r1, [r6], #3595	; 0xe0b
    4e5c:	1fe00000 	svcne	0x00e00000
    4e60:	00000000 	andeq	r0, r0, r0
    4e64:	02570407 	subseq	r0, r7, #117440512	; 0x7000000
    4e68:	011f0000 	tsteq	pc, r0
    4e6c:	00001234 	andeq	r1, r0, r4, lsr r2
    4e70:	00060f01 	andeq	r0, r6, r1, lsl #30
    4e74:	00000000 	andeq	r0, r0, r0
    4e78:	01000000 	mrseq	r0, (UNDEF: 0)
    4e7c:	08bc209c 	ldmeq	ip!, {r2, r3, r4, r7, sp}
    4e80:	5b020000 	blpl	84e88 <__ccfg+0x64ee0>
    4e84:	20030135 	andcs	r0, r3, r5, lsr r1
    4e88:	000005dc 	ldrdeq	r0, [r0], -ip
    4e8c:	01355002 	teqeq	r5, r2
    4e90:	12122103 	andsne	r2, r2, #-1073741824	; 0xc0000000
    4e94:	a4030000 	strge	r0, [r3], #-0
    4e98:	00670101 	rsbeq	r0, r7, r1, lsl #2
    4e9c:	22030000 	andcs	r0, r3, #0
    4ea0:	0000075f 	andeq	r0, r0, pc, asr r7
    4ea4:	6718a403 	ldrvs	sl, [r8, -r3, lsl #8]
    4ea8:	00000000 	andeq	r0, r0, r0
    4eac:	0004f600 	andeq	pc, r4, r0, lsl #12
    4eb0:	3a000300 	bcc	5ab8 <__exidx_end+0xd64>
    4eb4:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    4eb8:	00018101 	andeq	r8, r1, r1, lsl #2
    4ebc:	129e0c00 	addsne	r0, lr, #0, 24
    4ec0:	04060000 	streq	r0, [r6], #-0
    4ec4:	09b80000 	ldmibeq	r8!, {}	; <UNPREDICTABLE>
    4ec8:	00000000 	andeq	r0, r0, r0
    4ecc:	3a8c0000 	bcc	fe304ed4 <_estack+0xde2ffed4>
    4ed0:	01020000 	mrseq	r0, (UNDEF: 2)
    4ed4:	0003e506 	andeq	lr, r3, r6, lsl #10
    4ed8:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    4edc:	00000446 	andeq	r0, r0, r6, asr #8
    4ee0:	b4050402 	strlt	r0, [r5], #-1026	; 0xfffffbfe
    4ee4:	02000000 	andeq	r0, r0, #0
    4ee8:	00af0508 	adceq	r0, pc, r8, lsl #10
    4eec:	9b030000 	blls	c4ef4 <__ccfg+0xa4f4c>
    4ef0:	03000023 	movweq	r0, #35	; 0x23
    4ef4:	004d182e 	subeq	r1, sp, lr, lsr #16
    4ef8:	01020000 	mrseq	r0, (UNDEF: 2)
    4efc:	0003e308 	andeq	lr, r3, r8, lsl #6
    4f00:	27910300 	ldrcs	r0, [r1, r0, lsl #6]
    4f04:	31030000 	mrscc	r0, (UNDEF: 3)
    4f08:	00006019 	andeq	r6, r0, r9, lsl r0
    4f0c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    4f10:	0000028a 	andeq	r0, r0, sl, lsl #5
    4f14:	00233303 	eoreq	r3, r3, r3, lsl #6
    4f18:	19340300 	ldmdbne	r4!, {r8, r9}
    4f1c:	00000073 	andeq	r0, r0, r3, ror r0
    4f20:	7e070402 	cdpvc	4, 0, cr0, cr7, cr2, {0}
    4f24:	02000000 	andeq	r0, r0, #0
    4f28:	00790708 	rsbseq	r0, r9, r8, lsl #14
    4f2c:	04040000 	streq	r0, [r4], #-0
    4f30:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    4f34:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4f38:	00000083 	andeq	r0, r0, r3, lsl #1
    4f3c:	00227c03 	eoreq	r7, r2, r3, lsl #24
    4f40:	12270400 	eorne	r0, r7, #0, 8
    4f44:	00000054 	andeq	r0, r0, r4, asr r0
    4f48:	00008f05 	andeq	r8, r0, r5, lsl #30
    4f4c:	008f0600 	addeq	r0, pc, r0, lsl #12
    4f50:	fc030000 	stc2	0, cr0, [r3], {-0}
    4f54:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    4f58:	0041122b 	subeq	r1, r1, fp, lsr #4
    4f5c:	a5060000 	strge	r0, [r6, #-0]
    4f60:	03000000 	movweq	r0, #0
    4f64:	000022cd 	andeq	r2, r0, sp, asr #5
    4f68:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    4f6c:	05000000 	streq	r0, [r0, #-0]
    4f70:	000000b6 	strheq	r0, [r0], -r6
    4f74:	0002ef03 	andeq	lr, r2, r3, lsl #30
    4f78:	122d0400 	eorne	r0, sp, #0, 8
    4f7c:	00000067 	andeq	r0, r0, r7, rrx
    4f80:	32040807 	andcc	r0, r4, #458752	; 0x70000
    4f84:	00016109 	andeq	r6, r1, r9, lsl #2
    4f88:	03180800 	tsteq	r8, #0, 16
    4f8c:	34040000 	strcc	r0, [r4], #-0
    4f90:	0000a507 	andeq	sl, r0, r7, lsl #10
    4f94:	07010100 	streq	r0, [r1, -r0, lsl #2]
    4f98:	009e0800 	addseq	r0, lr, r0, lsl #16
    4f9c:	35040000 	strcc	r0, [r4, #-0]
    4fa0:	0000a503 	andeq	sl, r0, r3, lsl #10
    4fa4:	06010100 	streq	r0, [r1], -r0, lsl #2
    4fa8:	02bf0800 	adcseq	r0, pc, #0, 16
    4fac:	36040000 	strcc	r0, [r4], -r0
    4fb0:	0000a503 	andeq	sl, r0, r3, lsl #10
    4fb4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4fb8:	048c0800 	streq	r0, [ip], #2048	; 0x800
    4fbc:	37040000 	strcc	r0, [r4, -r0]
    4fc0:	0000a503 	andeq	sl, r0, r3, lsl #10
    4fc4:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    4fc8:	04850800 	streq	r0, [r5], #2048	; 0x800
    4fcc:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    4fd0:	0000a503 	andeq	sl, r0, r3, lsl #10
    4fd4:	00040100 	andeq	r0, r4, r0, lsl #2
    4fd8:	04760900 	ldrbteq	r0, [r6], #-2304	; 0xfffff700
    4fdc:	3a040000 	bcc	104fe4 <__ccfg+0xe503c>
    4fe0:	0000a507 	andeq	sl, r0, r7, lsl #10
    4fe4:	2b090100 	blcs	2453ec <__ccfg+0x225444>
    4fe8:	04000000 	streq	r0, [r0], #-0
    4fec:	00a5033c 	adceq	r0, r5, ip, lsr r3
    4ff0:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    4ff4:	00000072 	andeq	r0, r0, r2, ror r0
    4ff8:	a5033d04 	strge	r3, [r3, #-3332]	; 0xfffff2fc
    4ffc:	03000000 	movweq	r0, #0
    5000:	00014f09 	andeq	r4, r1, r9, lsl #30
    5004:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    5008:	000000b6 	strheq	r0, [r0], -r6
    500c:	d4030004 	strle	r0, [r3], #-4
    5010:	04000004 	streq	r0, [r0], #-4
    5014:	00d30341 	sbcseq	r0, r3, r1, asr #6
    5018:	61060000 	mrsvs	r0, (UNDEF: 6)
    501c:	0a000001 	beq	5028 <__exidx_end+0x2d4>
    5020:	0000030c 	andeq	r0, r0, ip, lsl #6
    5024:	6d1a4304 	ldcvs	3, cr4, [sl, #-16]
    5028:	01000001 	tsteq	r0, r1
    502c:	038e0a01 	orreq	r0, lr, #4096	; 0x1000
    5030:	45040000 	strmi	r0, [r4, #-0]
    5034:	00018e0e 	andeq	r8, r1, lr, lsl #28
    5038:	0b010100 	bleq	45440 <__ccfg+0x25498>
    503c:	00019404 	andeq	r9, r1, r4, lsl #8
    5040:	08010200 	stmdaeq	r1, {r9}
    5044:	000003ec 	andeq	r0, r0, ip, ror #7
    5048:	00019405 	andeq	r9, r1, r5, lsl #8
    504c:	03a40a00 			; <UNDEFINED> instruction: 0x03a40a00
    5050:	45040000 	strmi	r0, [r4, #-0]
    5054:	00018e1e 	andeq	r8, r1, lr, lsl lr
    5058:	07010100 	streq	r0, [r1, -r0, lsl #2]
    505c:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    5060:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5064:	0019fd09 	andseq	pc, r9, r9, lsl #26
    5068:	0b900500 	bleq	fe406470 <_estack+0xde401470>
    506c:	00000067 	andeq	r0, r0, r7, rrx
    5070:	06b30900 	ldrteq	r0, [r3], r0, lsl #18
    5074:	91050000 	mrsls	r0, (UNDEF: 5)
    5078:	00008f08 	andeq	r8, r0, r8, lsl #30
    507c:	be090400 	cfcpyslt	mvf0, mvf9
    5080:	05000015 	streq	r0, [r0, #-21]	; 0xffffffeb
    5084:	00b11092 	umlalseq	r1, r1, r2, r0	; <UNPREDICTABLE>
    5088:	00060000 	andeq	r0, r6, r0
    508c:	00049303 	andeq	r9, r4, r3, lsl #6
    5090:	03930500 	orrseq	r0, r3, #0, 10
    5094:	000001ae 	andeq	r0, r0, lr, lsr #3
    5098:	0001df0c 	andeq	sp, r1, ip, lsl #30
    509c:	0001f600 	andeq	pc, r1, r0, lsl #12
    50a0:	0a000d00 	beq	84a8 <__exidx_end+0x3754>
    50a4:	00000021 	andeq	r0, r0, r1, lsr #32
    50a8:	eb0f9905 	bl	3eb4c4 <__ccfg+0x3cb51c>
    50ac:	01000001 	tsteq	r0, r1
    50b0:	06010701 	streq	r0, [r1], -r1, lsl #14
    50b4:	022e0991 	eoreq	r0, lr, #2375680	; 0x244000
    50b8:	0c080000 	stceq	0, cr0, [r8], {-0}
    50bc:	06000005 	streq	r0, [r0], -r5
    50c0:	00a50793 	umlaleq	r0, r5, r3, r7
    50c4:	07010000 	streq	r0, [r1, -r0]
    50c8:	1c080001 	stcne	0, cr0, [r8], {1}
    50cc:	06000000 	streq	r0, [r0], -r0
    50d0:	00a50394 	umlaleq	r0, r5, r4, r3
    50d4:	01010000 	mrseq	r0, (UNDEF: 1)
    50d8:	03000000 	movweq	r0, #0
    50dc:	0000029d 	muleq	r0, sp, r2
    50e0:	04039606 	streq	r9, [r3], #-1542	; 0xfffff9fa
    50e4:	05000002 	streq	r0, [r0, #-2]
    50e8:	0000022e 	andeq	r0, r0, lr, lsr #4
    50ec:	00023a0c 	andeq	r3, r2, ip, lsl #20
    50f0:	00024a00 	andeq	r4, r2, r0, lsl #20
    50f4:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    50f8:	0000023f 	andeq	r0, r0, pc, lsr r2
    50fc:	0003570a 	andeq	r5, r3, sl, lsl #14
    5100:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    5104:	0000024a 	andeq	r0, r0, sl, asr #4
    5108:	9b0c0101 	blls	305514 <__ccfg+0x2e556c>
    510c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    5110:	0d000002 	stceq	0, cr0, [r0, #-8]
    5114:	025d0500 	subseq	r0, sp, #0, 10
    5118:	d50a0000 	strle	r0, [sl, #-0]
    511c:	07000003 	streq	r0, [r0, -r3]
    5120:	02681306 	rsbeq	r1, r8, #402653184	; 0x18000000
    5124:	01010000 	mrseq	r0, (UNDEF: 1)
    5128:	0001340a 	andeq	r3, r1, sl, lsl #8
    512c:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    5130:	000000b6 	strheq	r0, [r0], -r6
    5134:	480e0101 	stmdami	lr, {r0, r8}
    5138:	08000005 	stmdaeq	r0, {r0, r2}
    513c:	9610016e 	ldrls	r0, [r0], -lr, ror #2
    5140:	0b000002 	bleq	5150 <__exidx_end+0x3fc>
    5144:	00029c04 	andeq	r9, r2, r4, lsl #24
    5148:	a8010f00 	stmdage	r1, {r8, r9, sl, fp}
    514c:	10000002 	andne	r0, r0, r2
    5150:	0000008f 	andeq	r0, r0, pc, lsl #1
    5154:	019b0c00 	orrseq	r0, fp, r0, lsl #24
    5158:	02b30000 	adcseq	r0, r3, #0
    515c:	000d0000 	andeq	r0, sp, r0
    5160:	0002a805 	andeq	sl, r2, r5, lsl #16
    5164:	04e41100 	strbteq	r1, [r4], #256	; 0x100
    5168:	7f080000 	svcvc	0x00080000
    516c:	02b31601 	adcseq	r1, r3, #1048576	; 0x100000
    5170:	01010000 	mrseq	r0, (UNDEF: 1)
    5174:	0003c111 	andeq	ip, r3, r1, lsl r1
    5178:	01820800 	orreq	r0, r2, r0, lsl #16
    517c:	0000c214 	andeq	ip, r0, r4, lsl r2
    5180:	11010100 	mrsne	r0, (UNDEF: 17)
    5184:	00000511 	andeq	r0, r0, r1, lsl r5
    5188:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    518c:	000000b6 	strheq	r0, [r0], -r6
    5190:	08120101 	ldmdaeq	r2, {r0, r8}
    5194:	09030308 	stmdbeq	r3, {r3, r8, r9}
    5198:	0000030c 	andeq	r0, r0, ip, lsl #6
    519c:	00361b13 	eorseq	r1, r6, r3, lsl fp
    51a0:	03070800 	movweq	r0, #30720	; 0x7800
    51a4:	00008f07 	andeq	r8, r0, r7, lsl #30
    51a8:	0b130000 	bleq	4c51b0 <__ccfg+0x4a5208>
    51ac:	08000006 	stmdaeq	r0, {r1, r2}
    51b0:	c7080308 	strgt	r0, [r8, -r8, lsl #6]
    51b4:	04000000 	streq	r0, [r0], #-0
    51b8:	02750e00 	rsbseq	r0, r5, #0, 28
    51bc:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    51c0:	02e50303 	rsceq	r0, r5, #201326592	; 0xc000000
    51c4:	58140000 	ldmdapl	r4, {}	; <UNPREDICTABLE>
    51c8:	30000005 	andcc	r0, r0, r5
    51cc:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    51d0:	0000037c 	andeq	r0, r0, ip, ror r3
    51d4:	00151213 	andseq	r1, r5, r3, lsl r2
    51d8:	03140800 	tsteq	r4, #0, 16
    51dc:	00008f08 	andeq	r8, r0, r8, lsl #30
    51e0:	2d130000 	ldccs	0, cr0, [r3, #-0]
    51e4:	08000003 	stmdaeq	r0, {r0, r1}
    51e8:	8f080315 	svchi	0x00080315
    51ec:	02000000 	andeq	r0, r0, #0
    51f0:	00054b13 	andeq	r4, r5, r3, lsl fp
    51f4:	03160800 	tsteq	r6, #0, 16
    51f8:	0002890b 	andeq	r8, r2, fp, lsl #18
    51fc:	88130400 	ldmdahi	r3, {sl}
    5200:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    5204:	c7090317 	smladgt	r9, r7, r3, r0
    5208:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    520c:	0004dd13 	andeq	sp, r4, r3, lsl sp
    5210:	03180800 	tsteq	r8, #0, 16
    5214:	00037c0f 	andeq	r7, r3, pc, lsl #24
    5218:	28130c00 	ldmdacs	r3, {sl, fp}
    521c:	08000003 	stmdaeq	r0, {r0, r1}
    5220:	8c150319 	ldchi	3, cr0, [r5], {25}
    5224:	2c000003 	stccs	0, cr0, [r0], {3}
    5228:	030c0c00 	movweq	r0, #52224	; 0xcc00
    522c:	038c0000 	orreq	r0, ip, #0
    5230:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    5234:	03000000 	movweq	r0, #0
    5238:	19040b00 	stmdbne	r4, {r8, r9, fp}
    523c:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    5240:	00000563 	andeq	r0, r0, r3, ror #10
    5244:	1b031c08 	blne	cc26c <__ccfg+0xac2c4>
    5248:	00000319 	andeq	r0, r0, r9, lsl r3
    524c:	0003b711 	andeq	fp, r3, r1, lsl r7
    5250:	031e0800 	tsteq	lr, #0, 16
    5254:	0003ae14 	andeq	sl, r3, r4, lsl lr
    5258:	0b010100 	bleq	45660 <__ccfg+0x256b8>
    525c:	00039204 	andeq	r9, r3, r4, lsl #4
    5260:	00110a00 	andseq	r0, r1, r0, lsl #20
    5264:	1d090000 	stcne	0, cr0, [r9, #-0]
    5268:	00008f13 	andeq	r8, r0, r3, lsl pc
    526c:	0a010100 	beq	45674 <__ccfg+0x256cc>
    5270:	0000031f 	andeq	r0, r0, pc, lsl r3
    5274:	a01a1e09 	andsge	r1, sl, r9, lsl #28
    5278:	01000000 	mrseq	r0, (UNDEF: 0)
    527c:	04c00a01 	strbeq	r0, [r0], #2561	; 0xa01
    5280:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    5284:	0000a024 	andeq	sl, r0, r4, lsr #32
    5288:	0a010100 	beq	45690 <__ccfg+0x256e8>
    528c:	000000d4 	ldrdeq	r0, [r0], -r4
    5290:	ae142209 	cdpge	2, 1, cr2, cr4, cr9, {0}
    5294:	01000003 	tsteq	r0, r3
    5298:	128d1601 	addne	r1, sp, #1048576	; 0x100000
    529c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    52a0:	0002960f 	andeq	r9, r2, pc, lsl #12
    52a4:	00030500 	andeq	r0, r3, r0, lsl #10
    52a8:	16000000 	strne	r0, [r0], -r0
    52ac:	000012da 	ldrdeq	r1, [r0], -sl
    52b0:	8f0d0901 	svchi	0x000d0901
    52b4:	05000000 	streq	r0, [r0, #-0]
    52b8:	00000003 	andeq	r0, r0, r3
    52bc:	026d1700 	rsbeq	r1, sp, #0, 14
    52c0:	0a010000 	beq	452c8 <__ccfg+0x25320>
    52c4:	5603050c 	strpl	r0, [r3], -ip, lsl #10
    52c8:	18000043 	stmdane	r0, {r0, r1, r6}
    52cc:	0012ef01 	andseq	lr, r2, r1, lsl #30
    52d0:	06580100 	ldrbeq	r0, [r8], -r0, lsl #2
    52d4:	00000001 	andeq	r0, r0, r1
    52d8:	00000000 	andeq	r0, r0, r0
    52dc:	479c0100 	ldrmi	r0, [ip, r0, lsl #2]
    52e0:	19000004 	stmdbne	r0, {r2}
    52e4:	00746361 	rsbseq	r6, r4, r1, ror #6
    52e8:	961d5801 	ldrls	r5, [sp], -r1, lsl #16
    52ec:	f3000002 	vhadd.u8	d0, d0, d2
    52f0:	0000001f 	andeq	r0, r0, pc, lsl r0
    52f4:	12e20118 	rscne	r0, r2, #24, 2
    52f8:	1c010000 	stcne	0, cr0, [r1], {-0}
    52fc:	00000101 	andeq	r0, r0, r1, lsl #2
    5300:	00000000 	andeq	r0, r0, r0
    5304:	9c010000 	stcls	0, cr0, [r1], {-0}
    5308:	000004de 	ldrdeq	r0, [r0], -lr
    530c:	0000da1a 	andeq	sp, r0, sl, lsl sl
    5310:	011c0100 	tsteq	ip, r0, lsl #2
    5314:	0000008f 	andeq	r0, r0, pc, lsl #1
    5318:	0000202f 	andeq	r2, r0, pc, lsr #32
    531c:	0012881b 	andseq	r8, r2, fp, lsl r8
    5320:	01210100 			; <UNDEFINED> instruction: 0x01210100
    5324:	00000000 	andeq	r0, r0, r0
    5328:	0012951b 	andseq	r9, r2, fp, lsl r5
    532c:	01300100 	teqeq	r0, r0, lsl #2
    5330:	00000000 	andeq	r0, r0, r0
    5334:	0013e71b 	andseq	lr, r3, fp, lsl r7
    5338:	01370100 	teqeq	r7, r0, lsl #2
    533c:	00000000 	andeq	r0, r0, r0
    5340:	0004de1c 	andeq	sp, r4, ip, lsl lr
    5344:	00000000 	andeq	r0, r0, r0
    5348:	00095800 	andeq	r5, r9, r0, lsl #16
    534c:	072b0100 	streq	r0, [fp, -r0, lsl #2]!
    5350:	000004ad 	andeq	r0, r0, sp, lsr #9
    5354:	0004ec1d 	andeq	lr, r4, sp, lsl ip
    5358:	de1c0000 	cdple	0, 1, cr0, cr12, cr0, {0}
    535c:	00000004 	andeq	r0, r0, r4
    5360:	80000000 	andhi	r0, r0, r0
    5364:	01000009 	tsteq	r0, r9
    5368:	04c7073e 	strbeq	r0, [r7], #1854	; 0x73e
    536c:	ec1d0000 	ldc	0, cr0, [sp], {-0}
    5370:	00000004 	andeq	r0, r0, r4
    5374:	0004de1e 	andeq	sp, r4, lr, lsl lr
    5378:	00000000 	andeq	r0, r0, r0
    537c:	00099800 	andeq	r9, r9, r0, lsl #16
    5380:	074a0100 	strbeq	r0, [sl, -r0, lsl #2]
    5384:	0004ec1d 	andeq	lr, r4, sp, lsl ip
    5388:	1f000000 	svcne	0x00000000
    538c:	00001212 	andeq	r1, r0, r2, lsl r2
    5390:	0101a402 	tsteq	r1, r2, lsl #8
    5394:	00000067 	andeq	r0, r0, r7, rrx
    5398:	075f2003 	ldrbeq	r2, [pc, -r3]
    539c:	a4020000 	strge	r0, [r2], #-0
    53a0:	00006718 	andeq	r6, r0, r8, lsl r7
    53a4:	a7000000 	strge	r0, [r0, -r0]
    53a8:	0300000a 	movweq	r0, #10
    53ac:	00160500 	andseq	r0, r6, r0, lsl #10
    53b0:	81010400 	tsthi	r1, r0, lsl #8
    53b4:	0c000001 	stceq	0, cr0, [r0], {1}
    53b8:	00001375 	andeq	r1, r0, r5, ror r3
    53bc:	00000406 	andeq	r0, r0, r6, lsl #8
    53c0:	00000b58 	andeq	r0, r0, r8, asr fp
    53c4:	00000000 	andeq	r0, r0, r0
    53c8:	00003dcc 	andeq	r3, r0, ip, asr #27
    53cc:	e5060102 	str	r0, [r6, #-258]	; 0xfffffefe
    53d0:	02000003 	andeq	r0, r0, #3
    53d4:	04460502 	strbeq	r0, [r6], #-1282	; 0xfffffafe
    53d8:	04020000 	streq	r0, [r2], #-0
    53dc:	0000b405 	andeq	fp, r0, r5, lsl #8
    53e0:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    53e4:	000000af 	andeq	r0, r0, pc, lsr #1
    53e8:	00239b03 	eoreq	r9, r3, r3, lsl #22
    53ec:	182e0400 	stmdane	lr!, {sl}
    53f0:	0000004d 	andeq	r0, r0, sp, asr #32
    53f4:	e3080102 	movw	r0, #33026	; 0x8102
    53f8:	03000003 	movweq	r0, #3
    53fc:	00002791 	muleq	r0, r1, r7
    5400:	60193104 	andsvs	r3, r9, r4, lsl #2
    5404:	02000000 	andeq	r0, r0, #0
    5408:	028a0702 	addeq	r0, sl, #524288	; 0x80000
    540c:	33030000 	movwcc	r0, #12288	; 0x3000
    5410:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    5414:	00731934 	rsbseq	r1, r3, r4, lsr r9
    5418:	04020000 	streq	r0, [r2], #-0
    541c:	00007e07 	andeq	r7, r0, r7, lsl #28
    5420:	07080200 	streq	r0, [r8, -r0, lsl #4]
    5424:	00000079 	andeq	r0, r0, r9, ror r0
    5428:	69050404 	stmdbvs	r5, {r2, sl}
    542c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    5430:	00830704 	addeq	r0, r3, r4, lsl #14
    5434:	7d030000 	stcvc	0, cr0, [r3, #-0]
    5438:	05000004 	streq	r0, [r0, #-4]
    543c:	00411226 	subeq	r1, r1, r6, lsr #4
    5440:	7c030000 	stcvc	0, cr0, [r3], {-0}
    5444:	05000022 	streq	r0, [r0, #-34]	; 0xffffffde
    5448:	00541227 	subseq	r1, r4, r7, lsr #4
    544c:	9b050000 	blls	145454 <__ccfg+0x1254ac>
    5450:	06000000 	streq	r0, [r0], -r0
    5454:	0000009b 	muleq	r0, fp, r0
    5458:	0013fc03 	andseq	pc, r3, r3, lsl #24
    545c:	122b0500 	eorne	r0, fp, #0, 10
    5460:	00000041 	andeq	r0, r0, r1, asr #32
    5464:	0000b106 	andeq	fp, r0, r6, lsl #2
    5468:	00b10500 	adcseq	r0, r1, r0, lsl #10
    546c:	cd030000 	stcgt	0, cr0, [r3, #-0]
    5470:	05000022 	streq	r0, [r0, #-34]	; 0xffffffde
    5474:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    5478:	c7050000 	strgt	r0, [r5, -r0]
    547c:	03000000 	movweq	r0, #0
    5480:	000002ef 	andeq	r0, r0, pc, ror #5
    5484:	67122d05 	ldrvs	r2, [r2, -r5, lsl #26]
    5488:	07000000 	streq	r0, [r0, -r0]
    548c:	09320508 	ldmdbeq	r2!, {r3, r8, sl}
    5490:	00000172 	andeq	r0, r0, r2, ror r1
    5494:	00031808 	andeq	r1, r3, r8, lsl #16
    5498:	07340500 	ldreq	r0, [r4, -r0, lsl #10]!
    549c:	000000b1 	strheq	r0, [r0], -r1
    54a0:	00070101 	andeq	r0, r7, r1, lsl #2
    54a4:	00009e08 	andeq	r9, r0, r8, lsl #28
    54a8:	03350500 	teqeq	r5, #0, 10
    54ac:	000000b1 	strheq	r0, [r0], -r1
    54b0:	00060101 	andeq	r0, r6, r1, lsl #2
    54b4:	0002bf08 	andeq	fp, r2, r8, lsl #30
    54b8:	03360500 	teqeq	r6, #0, 10
    54bc:	000000b1 	strheq	r0, [r0], -r1
    54c0:	00050101 	andeq	r0, r5, r1, lsl #2
    54c4:	00048c08 	andeq	r8, r4, r8, lsl #24
    54c8:	03370500 	teqeq	r7, #0, 10
    54cc:	000000b1 	strheq	r0, [r0], -r1
    54d0:	00040101 	andeq	r0, r4, r1, lsl #2
    54d4:	00048508 	andeq	r8, r4, r8, lsl #10
    54d8:	03380500 	teqeq	r8, #0, 10
    54dc:	000000b1 	strheq	r0, [r0], -r1
    54e0:	00000401 	andeq	r0, r0, r1, lsl #8
    54e4:	00047609 	andeq	r7, r4, r9, lsl #12
    54e8:	073a0500 	ldreq	r0, [sl, -r0, lsl #10]!
    54ec:	000000b1 	strheq	r0, [r0], -r1
    54f0:	002b0901 	eoreq	r0, fp, r1, lsl #18
    54f4:	3c050000 	stccc	0, cr0, [r5], {-0}
    54f8:	0000b103 	andeq	fp, r0, r3, lsl #2
    54fc:	72090200 	andvc	r0, r9, #0, 4
    5500:	05000000 	streq	r0, [r0, #-0]
    5504:	00b1033d 	adcseq	r0, r1, sp, lsr r3
    5508:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    550c:	0000014f 	andeq	r0, r0, pc, asr #2
    5510:	c7083f05 	strgt	r3, [r8, -r5, lsl #30]
    5514:	04000000 	streq	r0, [r0], #-0
    5518:	04d40300 	ldrbeq	r0, [r4], #768	; 0x300
    551c:	41050000 	mrsmi	r0, (UNDEF: 5)
    5520:	0000e403 	andeq	lr, r0, r3, lsl #8
    5524:	01720600 	cmneq	r2, r0, lsl #12
    5528:	0c0a0000 	stceq	0, cr0, [sl], {-0}
    552c:	05000003 	streq	r0, [r0, #-3]
    5530:	017e1a43 	cmneq	lr, r3, asr #20
    5534:	01010000 	mrseq	r0, (UNDEF: 1)
    5538:	00038e0a 	andeq	r8, r3, sl, lsl #28
    553c:	0e450500 	cdpeq	5, 4, cr0, cr5, cr0, {0}
    5540:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    5544:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    5548:	000001a5 	andeq	r0, r0, r5, lsr #3
    554c:	ec080102 	stfs	f0, [r8], {2}
    5550:	05000003 	streq	r0, [r0, #-3]
    5554:	000001a5 	andeq	r0, r0, r5, lsr #3
    5558:	0003a40a 	andeq	sl, r3, sl, lsl #8
    555c:	1e450500 	cdpne	5, 4, cr0, cr5, cr0, {0}
    5560:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    5564:	08070101 	stmdaeq	r7, {r0, r8}
    5568:	f0098f06 			; <UNDEFINED> instruction: 0xf0098f06
    556c:	09000001 	stmdbeq	r0, {r0}
    5570:	000019fd 	strdeq	r1, [r0], -sp
    5574:	670b9006 	strvs	r9, [fp, -r6]
    5578:	00000000 	andeq	r0, r0, r0
    557c:	0006b309 	andeq	fp, r6, r9, lsl #6
    5580:	08910600 	ldmeq	r1, {r9, sl}
    5584:	0000009b 	muleq	r0, fp, r0
    5588:	15be0904 	ldrne	r0, [lr, #2308]!	; 0x904
    558c:	92060000 	andls	r0, r6, #0
    5590:	0000bd10 	andeq	fp, r0, r0, lsl sp
    5594:	03000600 	movweq	r0, #1536	; 0x600
    5598:	00000493 	muleq	r0, r3, r4
    559c:	bf039306 	svclt	0x00039306
    55a0:	0c000001 	stceq	0, cr0, [r0], {1}
    55a4:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    55a8:	00000207 	andeq	r0, r0, r7, lsl #4
    55ac:	210a000d 	tstcs	sl, sp
    55b0:	06000000 	streq	r0, [r0], -r0
    55b4:	01fc0f99 			; <UNDEFINED> instruction: 0x01fc0f99
    55b8:	01010000 	mrseq	r0, (UNDEF: 1)
    55bc:	00c2040b 	sbceq	r0, r2, fp, lsl #8
    55c0:	01070000 	mrseq	r0, (UNDEF: 7)
    55c4:	45099107 	strmi	r9, [r9, #-263]	; 0xfffffef9
    55c8:	08000002 	stmdaeq	r0, {r1}
    55cc:	0000050c 	andeq	r0, r0, ip, lsl #10
    55d0:	b1079307 	tstlt	r7, r7, lsl #6
    55d4:	01000000 	mrseq	r0, (UNDEF: 0)
    55d8:	08000107 	stmdaeq	r0, {r0, r1, r2, r8}
    55dc:	0000001c 	andeq	r0, r0, ip, lsl r0
    55e0:	b1039407 	tstlt	r3, r7, lsl #8
    55e4:	01000000 	mrseq	r0, (UNDEF: 0)
    55e8:	00000001 	andeq	r0, r0, r1
    55ec:	00029d03 	andeq	r9, r2, r3, lsl #26
    55f0:	03960700 	orrseq	r0, r6, #0, 14
    55f4:	0000021b 	andeq	r0, r0, fp, lsl r2
    55f8:	00024505 	andeq	r4, r2, r5, lsl #10
    55fc:	02510c00 	subseq	r0, r1, #0, 24
    5600:	02610000 	rsbeq	r0, r1, #0
    5604:	000d0000 	andeq	r0, sp, r0
    5608:	00025605 	andeq	r5, r2, r5, lsl #12
    560c:	03570a00 	cmpeq	r7, #0, 20
    5610:	9c070000 	stcls	0, cr0, [r7], {-0}
    5614:	00026117 	andeq	r6, r2, r7, lsl r1
    5618:	0c010100 	stfeqs	f0, [r1], {-0}
    561c:	000000a7 	andeq	r0, r0, r7, lsr #1
    5620:	0000027f 	andeq	r0, r0, pc, ror r2
    5624:	7405000d 	strvc	r0, [r5], #-13
    5628:	0a000002 	beq	5638 <__exidx_end+0x8e4>
    562c:	000003d5 	ldrdeq	r0, [r0], -r5
    5630:	7f130608 	svcvc	0x00130608
    5634:	01000002 	tsteq	r0, r2
    5638:	01340a01 	teqeq	r4, r1, lsl #20
    563c:	c3060000 	movwgt	r0, #24576	; 0x6000
    5640:	0000c70e 	andeq	ip, r0, lr, lsl #14
    5644:	0e010100 	adfeqs	f0, f1, f0
    5648:	00000548 	andeq	r0, r0, r8, asr #10
    564c:	10016e09 	andne	r6, r1, r9, lsl #28
    5650:	000002ad 	andeq	r0, r0, sp, lsr #5
    5654:	02b3040b 	adcseq	r0, r3, #184549376	; 0xb000000
    5658:	010f0000 	mrseq	r0, CPSR
    565c:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
    5660:	00009b10 	andeq	r9, r0, r0, lsl fp
    5664:	ac0c0000 	stcge	0, cr0, [ip], {-0}
    5668:	ca000001 	bgt	5674 <__exidx_end+0x920>
    566c:	0d000002 	stceq	0, cr0, [r0, #-8]
    5670:	02bf0500 	adcseq	r0, pc, #0, 10
    5674:	e4110000 	ldr	r0, [r1], #-0
    5678:	09000004 	stmdbeq	r0, {r2}
    567c:	ca16017f 	bgt	585c80 <__ccfg+0x565cd8>
    5680:	01000002 	tsteq	r0, r2
    5684:	03c11101 	biceq	r1, r1, #1073741824	; 0x40000000
    5688:	82090000 	andhi	r0, r9, #0
    568c:	00d31401 	sbcseq	r1, r3, r1, lsl #8
    5690:	01010000 	mrseq	r0, (UNDEF: 1)
    5694:	00051111 	andeq	r1, r5, r1, lsl r1
    5698:	02d80900 	sbcseq	r0, r8, #0, 18
    569c:	0000c70e 	andeq	ip, r0, lr, lsl #14
    56a0:	12010100 	andne	r0, r1, #0, 2
    56a4:	03030908 	movweq	r0, #14600	; 0x3908
    56a8:	00032309 	andeq	r2, r3, r9, lsl #6
    56ac:	361b1300 	ldrcc	r1, [fp], -r0, lsl #6
    56b0:	07090000 	streq	r0, [r9, -r0]
    56b4:	009b0703 	addseq	r0, fp, r3, lsl #14
    56b8:	13000000 	movwne	r0, #0
    56bc:	0000060b 	andeq	r0, r0, fp, lsl #12
    56c0:	08030809 	stmdaeq	r3, {r0, r3, fp}
    56c4:	000000d8 	ldrdeq	r0, [r0], -r8
    56c8:	750e0004 	strvc	r0, [lr, #-4]
    56cc:	09000002 	stmdbeq	r0, {r1}
    56d0:	fc030309 	stc2	3, cr0, [r3], {9}
    56d4:	14000002 	strne	r0, [r0], #-2
    56d8:	00000558 	andeq	r0, r0, r8, asr r5
    56dc:	030b0930 	movweq	r0, #47408	; 0xb930
    56e0:	00039308 	andeq	r9, r3, r8, lsl #6
    56e4:	15121300 	ldrne	r1, [r2, #-768]	; 0xfffffd00
    56e8:	14090000 	strne	r0, [r9], #-0
    56ec:	009b0803 	addseq	r0, fp, r3, lsl #16
    56f0:	13000000 	movwne	r0, #0
    56f4:	0000032d 	andeq	r0, r0, sp, lsr #6
    56f8:	08031509 	stmdaeq	r3, {r0, r3, r8, sl, ip}
    56fc:	0000009b 	muleq	r0, fp, r0
    5700:	054b1302 	strbeq	r1, [fp, #-770]	; 0xfffffcfe
    5704:	16090000 	strne	r0, [r9], -r0
    5708:	02a00b03 	adceq	r0, r0, #3072	; 0xc00
    570c:	13040000 	movwne	r0, #16384	; 0x4000
    5710:	00000f88 	andeq	r0, r0, r8, lsl #31
    5714:	09031709 	stmdbeq	r3, {r0, r3, r8, r9, sl, ip}
    5718:	000000d8 	ldrdeq	r0, [r0], -r8
    571c:	04dd1308 	ldrbeq	r1, [sp], #776	; 0x308
    5720:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    5724:	03930f03 	orrseq	r0, r3, #3, 30
    5728:	130c0000 	movwne	r0, #49152	; 0xc000
    572c:	00000328 	andeq	r0, r0, r8, lsr #6
    5730:	15031909 	strne	r1, [r3, #-2313]	; 0xfffff6f7
    5734:	000003a3 	andeq	r0, r0, r3, lsr #7
    5738:	230c002c 	movwcs	r0, #49196	; 0xc02c
    573c:	a3000003 	movwge	r0, #3
    5740:	15000003 	strne	r0, [r0, #-3]
    5744:	00000088 	andeq	r0, r0, r8, lsl #1
    5748:	040b0003 	streq	r0, [fp], #-3
    574c:	00000330 	andeq	r0, r0, r0, lsr r3
    5750:	0005630e 	andeq	r6, r5, lr, lsl #6
    5754:	031c0900 	tsteq	ip, #0, 18
    5758:	0003301b 	andeq	r3, r3, fp, lsl r0
    575c:	03b71100 			; <UNDEFINED> instruction: 0x03b71100
    5760:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    5764:	03c51403 	biceq	r1, r5, #50331648	; 0x3000000
    5768:	01010000 	mrseq	r0, (UNDEF: 1)
    576c:	03a9040b 			; <UNDEFINED> instruction: 0x03a9040b
    5770:	110a0000 	mrsne	r0, (UNDEF: 10)
    5774:	0a000000 	beq	577c <__exidx_end+0xa28>
    5778:	009b131d 	addseq	r1, fp, sp, lsl r3
    577c:	01010000 	mrseq	r0, (UNDEF: 1)
    5780:	00031f0a 	andeq	r1, r3, sl, lsl #30
    5784:	1a1e0a00 	bne	787f8c <__ccfg+0x767fe4>
    5788:	000000ac 	andeq	r0, r0, ip, lsr #1
    578c:	c00a0101 	andgt	r0, sl, r1, lsl #2
    5790:	0a000004 	beq	57a8 <__exidx_end+0xa54>
    5794:	00ac241e 	adceq	r2, ip, lr, lsl r4
    5798:	01010000 	mrseq	r0, (UNDEF: 1)
    579c:	0000d40a 	andeq	sp, r0, sl, lsl #8
    57a0:	14220a00 	strtne	r0, [r2], #-2560	; 0xfffff600
    57a4:	000003c5 	andeq	r0, r0, r5, asr #7
    57a8:	bc160101 	ldflts	f0, [r6], {1}
    57ac:	01000003 	tsteq	r0, r3
    57b0:	00c70f0f 	sbceq	r0, r7, pc, lsl #30
    57b4:	03050000 	movweq	r0, #20480	; 0x5000
    57b8:	00000000 	andeq	r0, r0, r0
    57bc:	001fd916 	andseq	sp, pc, r6, lsl r9	; <UNPREDICTABLE>
    57c0:	150f0100 	strne	r0, [pc, #-256]	; 56c8 <__exidx_end+0x974>
    57c4:	000000c7 	andeq	r0, r0, r7, asr #1
    57c8:	00000305 	andeq	r0, r0, r5, lsl #6
    57cc:	d3160000 	tstle	r6, #0
    57d0:	01000013 	tsteq	r0, r3, lsl r0
    57d4:	02151410 	andseq	r1, r5, #16, 8	; 0x10000000
    57d8:	03050000 	movweq	r0, #20480	; 0x5000
    57dc:	00000000 	andeq	r0, r0, r0
    57e0:	00133816 	andseq	r3, r3, r6, lsl r8
    57e4:	0d120100 	ldfeqs	f0, [r2, #-0]
    57e8:	000000b1 	strheq	r0, [r0], -r1
    57ec:	01880305 	orreq	r0, r8, r5, lsl #6
    57f0:	c7162000 	ldrgt	r2, [r6, -r0]
    57f4:	01000013 	tsteq	r0, r3, lsl r0
    57f8:	00b10313 	adcseq	r0, r1, r3, lsl r3
    57fc:	03050000 	movweq	r0, #20480	; 0x5000
    5800:	20000189 	andcs	r0, r0, r9, lsl #3
    5804:	000c9c16 	andeq	r9, ip, r6, lsl ip
    5808:	0d150100 	ldfeqs	f0, [r5, #-0]
    580c:	0000009b 	muleq	r0, fp, r0
    5810:	00000305 	andeq	r0, r0, r5, lsl #6
    5814:	01170000 	tsteq	r7, r0
    5818:	00001304 	andeq	r1, r0, r4, lsl #6
    581c:	00061303 	andeq	r1, r6, r3, lsl #6
    5820:	00000000 	andeq	r0, r0, r0
    5824:	01000000 	mrseq	r0, (UNDEF: 0)
    5828:	d801189c 	stmdale	r1, {r2, r3, r4, r7, fp, ip}
    582c:	03000013 	movweq	r0, #19
    5830:	c7010708 	strgt	r0, [r1, -r8, lsl #14]
	...
    583c:	01000000 	mrseq	r0, (UNDEF: 0)
    5840:	0004bc9c 	muleq	r4, ip, ip
    5844:	72651900 	rsbvc	r1, r5, #0, 18
    5848:	19080300 	stmdbne	r8, {r8, r9}
    584c:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
    5850:	00002063 	andeq	r2, r0, r3, rrx
    5854:	7572651a 	ldrbvc	r6, [r2, #-1306]!	; 0xfffffae6
    5858:	24080300 	strcs	r0, [r8], #-768	; 0xfffffd00
    585c:	000004c2 	andeq	r0, r0, r2, asr #9
    5860:	0b005101 	bleq	19c6c <__exidx_end+0x14f18>
    5864:	00008f04 	andeq	r8, r0, r4, lsl #30
    5868:	c7040b00 	strgt	r0, [r4, -r0, lsl #22]
    586c:	1b000000 	blne	5874 <__exidx_end+0xb20>
    5870:	00135b01 	andseq	r5, r3, r1, lsl #22
    5874:	01600100 	cmneq	r0, r0, lsl #2
    5878:	009b0106 	addseq	r0, fp, r6, lsl #2
	...
    5884:	9c010000 	stcls	0, cr0, [r1], {-0}
    5888:	000004f6 	strdeq	r0, [r0], -r6
    588c:	0074731c 	rsbseq	r7, r4, ip, lsl r3
    5890:	14016001 	strne	r6, [r1], #-1
    5894:	0000009b 	muleq	r0, fp, r0
    5898:	00002076 	andeq	r2, r0, r6, ror r0
    589c:	52011d00 	andpl	r1, r1, #0, 26
    58a0:	01000013 	tsteq	r0, r3, lsl r0
    58a4:	0006015b 	andeq	r0, r6, fp, asr r1
    58a8:	00000000 	andeq	r0, r0, r0
    58ac:	01000000 	mrseq	r0, (UNDEF: 0)
    58b0:	2f011b9c 	svccs	0x00011b9c
    58b4:	01000013 	tsteq	r0, r3, lsl r0
    58b8:	01060121 	tsteq	r6, r1, lsr #2
    58bc:	0000009b 	muleq	r0, fp, r0
	...
    58c8:	05c09c01 	strbeq	r9, [r0, #3073]	; 0xc01
    58cc:	731c0000 	tstvc	ip, #0
    58d0:	21010074 	tstcs	r1, r4, ror r0
    58d4:	009b1501 	addseq	r1, fp, r1, lsl #10
    58d8:	20890000 	addcs	r0, r9, r0
    58dc:	611c0000 	tstvs	ip, r0
    58e0:	01210100 			; <UNDEFINED> instruction: 0x01210100
    58e4:	0000c71f 	andeq	ip, r0, pc, lsl r7
    58e8:	00209c00 	eoreq	r9, r0, r0, lsl #24
    58ec:	00731c00 	rsbseq	r1, r3, r0, lsl #24
    58f0:	2e012101 	adfcss	f2, f1, f1
    58f4:	00000215 	andeq	r0, r0, r5, lsl r2
    58f8:	000020ba 	strheq	r2, [r0], -sl
    58fc:	6e656c1c 	mcrvs	12, 3, r6, cr5, cr12, {0}
    5900:	01210100 			; <UNDEFINED> instruction: 0x01210100
    5904:	00009b36 	andeq	r9, r0, r6, lsr fp
    5908:	0020cd00 	eoreq	ip, r0, r0, lsl #26
    590c:	6c621e00 	stclvs	14, cr1, [r2], #-0
    5910:	01230100 			; <UNDEFINED> instruction: 0x01230100
    5914:	00009b07 	andeq	r9, r0, r7, lsl #22
    5918:	0020e000 	eoreq	lr, r0, r0
    591c:	13461f00 	movtne	r1, #28416	; 0x6f00
    5920:	32010000 	andcc	r0, r1, #0
    5924:	00000101 	andeq	r0, r0, r1, lsl #2
    5928:	f6200000 			; <UNDEFINED> instruction: 0xf6200000
    592c:	00000009 	andeq	r0, r0, r9
    5930:	40000000 	andmi	r0, r0, r0
    5934:	0100000b 	tsteq	r0, fp
    5938:	a3030143 	movwge	r0, #12611	; 0x3143
    593c:	21000005 	tstcs	r0, r5
    5940:	00000a12 	andeq	r0, r0, r2, lsl sl
    5944:	000a0521 	andeq	r0, sl, r1, lsr #10
    5948:	f6220000 			; <UNDEFINED> instruction: 0xf6220000
    594c:	00000009 	andeq	r0, r0, r9
    5950:	00000000 	andeq	r0, r0, r0
    5954:	01000000 	mrseq	r0, (UNDEF: 0)
    5958:	21030150 	tstcs	r3, r0, asr r1
    595c:	00000a12 	andeq	r0, r0, r2, lsl sl
    5960:	000a0521 	andeq	r0, sl, r1, lsr #10
    5964:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    5968:	00132601 	andseq	r2, r3, r1, lsl #12
    596c:	06cb0100 	strbeq	r0, [fp], r0, lsl #2
    5970:	00009b01 	andeq	r9, r0, r1, lsl #22
	...
    597c:	819c0100 	orrshi	r0, ip, r0, lsl #2
    5980:	19000006 	stmdbne	r0, {r1, r2}
    5984:	01007473 	tsteq	r0, r3, ror r4
    5988:	009b15cb 	addseq	r1, fp, fp, asr #11
    598c:	21090000 	mrscs	r0, (UNDEF: 9)
    5990:	63230000 			; <UNDEFINED> instruction: 0x63230000
    5994:	01000013 	tsteq	r0, r3, lsl r0
    5998:	00c71fcb 	sbceq	r1, r7, fp, asr #31
    599c:	21270000 			; <UNDEFINED> instruction: 0x21270000
    59a0:	12230000 	eorne	r0, r3, #0
    59a4:	01000013 	tsteq	r0, r3, lsl r0
    59a8:	00c72bcb 	sbceq	r2, r7, fp, asr #23
    59ac:	21500000 	cmpcs	r0, r0
    59b0:	fe240000 	cdp2	0, 2, cr0, cr4, cr0, {0}
    59b4:	01000012 	tsteq	r0, r2, lsl r0
    59b8:	000001e6 	andeq	r0, r0, r6, ror #3
    59bc:	e6240000 	strt	r0, [r4], -r0
    59c0:	01000013 	tsteq	r0, r3, lsl r0
    59c4:	000001ea 	andeq	r0, r0, sl, ror #3
    59c8:	5e250000 	cdppl	0, 2, cr0, cr5, cr0, {0}
    59cc:	00000008 	andeq	r0, r0, r8
    59d0:	10000000 	andne	r0, r0, r0
    59d4:	0100000b 	tsteq	r0, fp
    59d8:	782604fc 	stmdavc	r6!, {r2, r3, r4, r5, r6, r7, sl}
    59dc:	6e000008 	cdpvs	0, 0, cr0, cr0, cr8, {0}
    59e0:	26000021 	strcs	r0, [r0], -r1, lsr #32
    59e4:	0000086c 	andeq	r0, r0, ip, ror #16
    59e8:	00002181 	andeq	r2, r0, r1, lsl #3
    59ec:	0009f627 	andeq	pc, r9, r7, lsr #12
    59f0:	00000000 	andeq	r0, r0, r0
    59f4:	000b2800 	andeq	r2, fp, r0, lsl #16
    59f8:	02430100 	subeq	r0, r3, #0, 2
    59fc:	00000664 	andeq	r0, r0, r4, ror #12
    5a00:	000a1221 	andeq	r1, sl, r1, lsr #4
    5a04:	0a052100 	beq	14de0c <__ccfg+0x12de64>
    5a08:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5a0c:	000009f6 	strdeq	r0, [r0], -r6
	...
    5a18:	21024801 	tstcs	r2, r1, lsl #16
    5a1c:	00000a12 	andeq	r0, r0, r2, lsl sl
    5a20:	000a0521 	andeq	r0, sl, r1, lsr #10
    5a24:	00000000 	andeq	r0, r0, r0
    5a28:	13680118 	cmnne	r8, #24, 2
    5a2c:	b0010000 	andlt	r0, r1, r0
    5a30:	009b0106 	addseq	r0, fp, r6, lsl #2
	...
    5a3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5a40:	00000704 	andeq	r0, r0, r4, lsl #14
    5a44:	01006119 	tsteq	r0, r9, lsl r1
    5a48:	00c715b0 	strheq	r1, [r7], #80	; 0x50
    5a4c:	21940000 	orrscs	r0, r4, r0
    5a50:	73190000 	tstvc	r9, #0
    5a54:	1eb00100 	frdnes	f0, f0, f0
    5a58:	00000704 	andeq	r0, r0, r4, lsl #14
    5a5c:	000021bd 			; <UNDEFINED> instruction: 0x000021bd
    5a60:	6e656c19 	mcrvs	12, 3, r6, cr5, cr9, {0}
    5a64:	26b00100 	ldrtcs	r0, [r0], r0, lsl #2
    5a68:	0000009b 	muleq	r0, fp, r0
    5a6c:	000021f1 	strdeq	r2, [r0], -r1
    5a70:	0009f627 	andeq	pc, r9, r7, lsr #12
    5a74:	00000000 	andeq	r0, r0, r0
    5a78:	000af800 	andeq	pc, sl, r0, lsl #16
    5a7c:	02ba0100 	adcseq	r0, sl, #0, 2
    5a80:	000006e8 	andeq	r0, r0, r8, ror #13
    5a84:	000a1221 	andeq	r1, sl, r1, lsr #4
    5a88:	0a052100 	beq	14de90 <__ccfg+0x12dee8>
    5a8c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5a90:	000009f6 	strdeq	r0, [r0], -r6
	...
    5a9c:	2102c401 	tstcs	r2, r1, lsl #8
    5aa0:	00000a12 	andeq	r0, r0, r2, lsl sl
    5aa4:	000a0521 	andeq	r0, sl, r1, lsr #10
    5aa8:	0b000000 	bleq	5ab0 <__exidx_end+0xd5c>
    5aac:	0000b104 	andeq	fp, r0, r4, lsl #2
    5ab0:	1d011700 	stcne	7, cr1, [r1, #-0]
    5ab4:	01000013 	tsteq	r0, r3, lsl r0
    5ab8:	1dc406a8 	stclne	6, cr0, [r4, #672]	; 0x2a0
    5abc:	1dd80000 	ldclne	0, cr0, [r8]
    5ac0:	9c010000 	stcls	0, cr0, [r1], {-0}
    5ac4:	133e0129 	teqne	lr, #1073741834	; 0x4000000a
    5ac8:	93010000 	movwls	r0, #4096	; 0x1000
    5acc:	00009b06 	andeq	r9, r0, r6, lsl #22
    5ad0:	001db000 	andseq	fp, sp, r0
    5ad4:	001dc400 	andseq	ip, sp, r0, lsl #8
    5ad8:	2a9c0100 	bcs	fe705ee0 <_estack+0xde700ee0>
    5adc:	000013e0 	andeq	r1, r0, r0, ror #7
    5ae0:	4c0d8201 	sfmmi	f0, 1, [sp], {1}
    5ae4:	8c00001d 	stchi	0, cr0, [r0], {29}
    5ae8:	0100001d 	tsteq	r0, sp, lsl r0
    5aec:	0007969c 	muleq	r7, ip, r6
    5af0:	079f2800 	ldreq	r2, [pc, r0, lsl #16]
    5af4:	1d660000 	stclne	0, cr0, [r6, #-0]
    5af8:	1d7a0000 	ldclne	0, cr0, [sl, #-0]
    5afc:	8a010000 	bhi	45b04 <__ccfg+0x25b5c>
    5b00:	09f62703 	ldmibeq	r6!, {r0, r1, r8, r9, sl, sp}^
    5b04:	1d660000 	stclne	0, cr0, [r6, #-0]
    5b08:	0ac80000 	beq	ff205b10 <_estack+0xdf200b10>
    5b0c:	72010000 	andvc	r0, r1, #0
    5b10:	00077902 	andeq	r7, r7, r2, lsl #18
    5b14:	0a122100 	beq	48df1c <__ccfg+0x46df74>
    5b18:	05210000 	streq	r0, [r1, #-0]!
    5b1c:	0000000a 	andeq	r0, r0, sl
    5b20:	0009f625 	andeq	pc, r9, r5, lsr #12
    5b24:	001d7200 	andseq	r7, sp, r0, lsl #4
    5b28:	000ae000 	andeq	lr, sl, r0
    5b2c:	02740100 	rsbseq	r0, r4, #0, 2
    5b30:	000a1221 	andeq	r1, sl, r1, lsr #4
    5b34:	0a052100 	beq	14df3c <__ccfg+0x12df94>
    5b38:	00000000 	andeq	r0, r0, r0
    5b3c:	13c02b00 	bicne	r2, r0, #0, 22
    5b40:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    5b44:	cd2b010d 	stfgts	f0, [fp, #-52]!	; 0xffffffcc
    5b48:	01000013 	tsteq	r0, r3, lsl r0
    5b4c:	2b010d6d 	blcs	49108 <__ccfg+0x29160>
    5b50:	000013ec 	andeq	r1, r0, ip, ror #7
    5b54:	010d6601 	tsteq	sp, r1, lsl #12
    5b58:	0013f22c 	andseq	pc, r3, ip, lsr #4
    5b5c:	0d580100 	ldfeqe	f0, [r8, #-0]
    5b60:	001cf801 	andseq	pc, ip, r1, lsl #16
    5b64:	001d4c00 	andseq	r4, sp, r0, lsl #24
    5b68:	429c0100 	addsmi	r0, ip, #0, 2
    5b6c:	19000008 	stmdbne	r0, {r3}
    5b70:	01007473 	tsteq	r0, r3, ror r4
    5b74:	009b1958 	addseq	r1, fp, r8, asr r9
    5b78:	220f0000 	andcs	r0, pc, #0
    5b7c:	64190000 	ldrvs	r0, [r9], #-0
    5b80:	01006c65 	tsteq	r0, r5, ror #24
    5b84:	009b2258 	addseq	r2, fp, r8, asr r2
    5b88:	22220000 	eorcs	r0, r2, #0
    5b8c:	42250000 	eormi	r0, r5, #0
    5b90:	00000008 	andeq	r0, r0, r8
    5b94:	8000001d 	andhi	r0, r0, sp, lsl r0
    5b98:	0100000a 	tsteq	r0, sl
    5b9c:	802d135c 	eorhi	r1, sp, ip, asr r3
    5ba0:	2e00000a 	cdpcs	0, 0, cr0, cr0, cr10, {0}
    5ba4:	00000853 	andeq	r0, r0, r3, asr r8
    5ba8:	00002235 	andeq	r2, r0, r5, lsr r2
    5bac:	0009f627 	andeq	pc, r9, r7, lsr #12
    5bb0:	001d0000 	andseq	r0, sp, r0
    5bb4:	000aa000 	andeq	sl, sl, r0
    5bb8:	02510100 	subseq	r0, r1, #0, 2
    5bbc:	00000824 	andeq	r0, r0, r4, lsr #16
    5bc0:	000a1221 	andeq	r1, sl, r1, lsr #4
    5bc4:	0a052100 	beq	14dfcc <__ccfg+0x12e024>
    5bc8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5bcc:	000009f6 	strdeq	r0, [r0], -r6
    5bd0:	00001d1a 	andeq	r1, r0, sl, lsl sp
    5bd4:	00001d1e 	andeq	r1, r0, lr, lsl sp
    5bd8:	21025401 	tstcs	r2, r1, lsl #8
    5bdc:	00000a12 	andeq	r0, r0, r2, lsl sl
    5be0:	000a0521 	andeq	r0, sl, r1, lsr #10
    5be4:	00000000 	andeq	r0, r0, r0
    5be8:	13702f00 	cmnne	r0, #0, 30
    5bec:	4b010000 	blmi	45bf4 <__ccfg+0x25c4c>
    5bf0:	0000b10d 	andeq	fp, r0, sp, lsl #2
    5bf4:	085e0100 	ldmdaeq	lr, {r8}^
    5bf8:	72300000 	eorsvc	r0, r0, #0
    5bfc:	074f0100 	strbeq	r0, [pc, -r0, lsl #2]
    5c00:	000000b1 	strheq	r0, [r0], -r1
    5c04:	134c3100 	movtne	r3, #49408	; 0xc100
    5c08:	41010000 	mrsmi	r0, (UNDEF: 1)
    5c0c:	8301010d 	movwhi	r0, #4365	; 0x110d
    5c10:	32000008 	andcc	r0, r0, #8
    5c14:	00646d63 	rsbeq	r6, r4, r3, ror #26
    5c18:	b1194101 	tstlt	r9, r1, lsl #2
    5c1c:	32000000 	andcc	r0, r0, #0
    5c20:	41010061 	tstmi	r1, r1, rrx
    5c24:	0000c724 	andeq	ip, r0, r4, lsr #14
    5c28:	172c0000 	strne	r0, [ip, -r0]!
    5c2c:	01000013 	tsteq	r0, r3, lsl r0
    5c30:	e0010d3a 	and	r0, r1, sl, lsr sp
    5c34:	f800001c 			; <UNDEFINED> instruction: 0xf800001c
    5c38:	0100001c 	tsteq	r0, ip, lsl r0
    5c3c:	0008e59c 	muleq	r8, ip, r5
    5c40:	6d631900 			; <UNDEFINED> instruction: 0x6d631900
    5c44:	3a010064 	bcc	45ddc <__ccfg+0x25e34>
    5c48:	0000b119 	andeq	fp, r0, r9, lsl r1
    5c4c:	00224800 	eoreq	r4, r2, r0, lsl #16
    5c50:	09f62700 	ldmibeq	r6!, {r8, r9, sl, sp}^
    5c54:	1ce00000 	stclne	0, cr0, [r0]
    5c58:	0a680000 	beq	1a05c60 <__ccfg+0x19e5cb8>
    5c5c:	3c010000 	stccc	0, cr0, [r1], {-0}
    5c60:	0008c902 	andeq	ip, r8, r2, lsl #18
    5c64:	0a122100 	beq	48e06c <__ccfg+0x46e0c4>
    5c68:	05210000 	streq	r0, [r1, #-0]!
    5c6c:	0000000a 	andeq	r0, r0, sl
    5c70:	0009f628 	andeq	pc, r9, r8, lsr #12
    5c74:	001cec00 	andseq	lr, ip, r0, lsl #24
    5c78:	001cf000 	andseq	pc, ip, r0
    5c7c:	023e0100 	eorseq	r0, lr, #0, 2
    5c80:	000a1221 	andeq	r1, sl, r1, lsr #4
    5c84:	0a052100 	beq	14e08c <__ccfg+0x12e0e4>
    5c88:	00000000 	andeq	r0, r0, r0
    5c8c:	0014012c 	andseq	r0, r4, ip, lsr #2
    5c90:	0d290100 	stfeqs	f0, [r9, #-0]
    5c94:	001cb001 	andseq	fp, ip, r1
    5c98:	001ce000 	andseq	lr, ip, r0
    5c9c:	799c0100 	ldmibvc	ip, {r8}
    5ca0:	19000009 	stmdbne	r0, {r0, r3}
    5ca4:	29010062 	stmdbcs	r1, {r1, r5, r6}
    5ca8:	0000b11c 	andeq	fp, r0, ip, lsl r1
    5cac:	00225b00 	eoreq	r5, r2, r0, lsl #22
    5cb0:	00693000 	rsbeq	r3, r9, r0
    5cb4:	81062b01 	tsthi	r6, r1, lsl #22
    5cb8:	27000000 	strcs	r0, [r0, -r0]
    5cbc:	00000a3d 	andeq	r0, r0, sp, lsr sl
    5cc0:	00001cb8 			; <UNDEFINED> instruction: 0x00001cb8
    5cc4:	00000a30 	andeq	r0, r0, r0, lsr sl
    5cc8:	2e033201 	cdpcs	2, 0, cr3, cr3, cr1, {0}
    5ccc:	21000009 	tstcs	r0, r9
    5cd0:	00000a4c 	andeq	r0, r0, ip, asr #20
    5cd4:	0a3d3300 	beq	f528dc <__ccfg+0xf32934>
    5cd8:	1cc40000 	stclne	0, cr0, [r4], {0}
    5cdc:	1cc80000 	stclne	0, cr0, [r8], {0}
    5ce0:	2f010000 	svccs	0x00010000
    5ce4:	00094804 	andeq	r4, r9, r4, lsl #16
    5ce8:	0a4c2100 	beq	130e0f0 <__ccfg+0x12ee148>
    5cec:	33000000 	movwcc	r0, #0
    5cf0:	00000a20 	andeq	r0, r0, r0, lsr #20
    5cf4:	00001cc8 	andeq	r1, r0, r8, asr #25
    5cf8:	00001cca 	andeq	r1, r0, sl, asr #25
    5cfc:	62043101 	andvs	r3, r4, #1073741824	; 0x40000000
    5d00:	21000009 	tstcs	r0, r9
    5d04:	00000a2f 	andeq	r0, r0, pc, lsr #20
    5d08:	0a202500 	beq	80f110 <__ccfg+0x7ef168>
    5d0c:	1cd00000 	ldclne	0, cr0, [r0], {0}
    5d10:	0a500000 	beq	1405d18 <__ccfg+0x13e5d70>
    5d14:	33010000 	movwcc	r0, #4096	; 0x1000
    5d18:	0a2f2103 	beq	bce12c <__ccfg+0xbae184>
    5d1c:	00000000 	andeq	r0, r0, r0
    5d20:	0013f834 	andseq	pc, r3, r4, lsr r8	; <UNPREDICTABLE>
    5d24:	0d190100 	ldfeqs	f0, [r9, #-0]
    5d28:	000000b1 	strheq	r0, [r0], -r1
    5d2c:	00001c7c 	andeq	r1, r0, ip, ror ip
    5d30:	00001cb0 			; <UNDEFINED> instruction: 0x00001cb0
    5d34:	09f69c01 	ldmibeq	r6!, {r0, sl, fp, ip, pc}^
    5d38:	69300000 	ldmdbvs	r0!, {}	; <UNPREDICTABLE>
    5d3c:	061b0100 	ldreq	r0, [fp], -r0, lsl #2
    5d40:	00000081 	andeq	r0, r0, r1, lsl #1
    5d44:	01006235 	tsteq	r0, r5, lsr r2
    5d48:	00b1071c 	adcseq	r0, r1, ip, lsl r7
    5d4c:	22790000 	rsbscs	r0, r9, #0
    5d50:	3d270000 	stccc	0, cr0, [r7, #-0]
    5d54:	8000000a 	andhi	r0, r0, sl
    5d58:	d000001c 	andle	r0, r0, ip, lsl r0
    5d5c:	01000009 	tsteq	r0, r9
    5d60:	09c50322 	stmibeq	r5, {r1, r5, r8, r9}^
    5d64:	4c210000 	stcmi	0, cr0, [r1], #-0
    5d68:	0000000a 	andeq	r0, r0, sl
    5d6c:	000a2027 	andeq	r2, sl, r7, lsr #32
    5d70:	001c8600 	andseq	r8, ip, r0, lsl #12
    5d74:	0009f800 	andeq	pc, r9, r0, lsl #16
    5d78:	03230100 			; <UNDEFINED> instruction: 0x03230100
    5d7c:	000009df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5d80:	000a2f21 	andeq	r2, sl, r1, lsr #30
    5d84:	5a250000 	bpl	945d8c <__ccfg+0x925de4>
    5d88:	8800000a 	stmdahi	r0, {r1, r3}
    5d8c:	1000001c 	andne	r0, r0, ip, lsl r0
    5d90:	0100000a 	tsteq	r0, sl
    5d94:	6c210720 	stcvs	7, cr0, [r1], #-128	; 0xffffff80
    5d98:	0000000a 	andeq	r0, r0, sl
    5d9c:	058e3600 	streq	r3, [lr, #1536]	; 0x600
    5da0:	06020000 	streq	r0, [r2], -r0
    5da4:	03010102 	movweq	r0, #4354	; 0x1102
    5da8:	00000a20 	andeq	r0, r0, r0, lsr #20
    5dac:	00075f37 	andeq	r5, r7, r7, lsr pc
    5db0:	02060200 	andeq	r0, r6, #0, 4
    5db4:	00006723 	andeq	r6, r0, r3, lsr #14
    5db8:	0a653700 	beq	19539c0 <__ccfg+0x1933a18>
    5dbc:	06020000 	streq	r0, [r2], -r0
    5dc0:	00673702 	rsbeq	r3, r7, r2, lsl #14
    5dc4:	36000000 	strcc	r0, [r0], -r0
    5dc8:	000008ca 	andeq	r0, r0, sl, asr #17
    5dcc:	01015402 	tsteq	r1, r2, lsl #8
    5dd0:	0a3d0301 	beq	f469dc <__ccfg+0xf26a34>
    5dd4:	5f370000 	svcpl	0x00370000
    5dd8:	02000007 	andeq	r0, r0, #7
    5ddc:	67190154 			; <UNDEFINED> instruction: 0x67190154
    5de0:	00000000 	andeq	r0, r0, r0
    5de4:	0009cf36 	andeq	ip, r9, r6, lsr pc
    5de8:	011e0200 	tsteq	lr, r0, lsl #4
    5dec:	5a030101 	bpl	c61f8 <__ccfg+0xa6250>
    5df0:	3700000a 	strcc	r0, [r0, -sl]
    5df4:	0000075f 	andeq	r0, r0, pc, asr r7
    5df8:	17011e02 	strne	r1, [r1, -r2, lsl #28]
    5dfc:	00000067 	andeq	r0, r0, r7, rrx
    5e00:	12123800 	andsne	r3, r2, #0, 16
    5e04:	a4020000 	strge	r0, [r2], #-0
    5e08:	00670101 	rsbeq	r0, r7, r1, lsl #2
    5e0c:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
    5e10:	3900000a 	stmdbcc	r0, {r1, r3}
    5e14:	0000075f 	andeq	r0, r0, pc, asr r7
    5e18:	6718a402 	ldrvs	sl, [r8, -r2, lsl #8]
    5e1c:	00000000 	andeq	r0, r0, r0
    5e20:	0007963a 	andeq	r9, r7, sl, lsr r6
    5e24:	001d8c00 	andseq	r8, sp, r0, lsl #24
    5e28:	001db000 	andseq	fp, sp, r0
    5e2c:	289c0100 	ldmcs	ip, {r8}
    5e30:	00000796 	muleq	r0, r6, r7
    5e34:	00001d96 	muleq	r0, r6, sp
    5e38:	00001daa 	andeq	r1, r0, sl, lsr #27
    5e3c:	3b0d7801 	blcc	363e48 <__ccfg+0x343ea0>
    5e40:	000007a8 	andeq	r0, r0, r8, lsr #15
    5e44:	00001da0 	andeq	r1, r0, r0, lsr #27
    5e48:	00001da6 	andeq	r1, r0, r6, lsr #27
    5e4c:	00037c01 	andeq	r7, r3, r1, lsl #24
    5e50:	04120000 	ldreq	r0, [r2], #-0
    5e54:	00030000 	andeq	r0, r3, r0
    5e58:	000019ab 	andeq	r1, r0, fp, lsr #19
    5e5c:	01810104 	orreq	r0, r1, r4, lsl #2
    5e60:	140c0000 	strne	r0, [ip], #-0
    5e64:	06000014 			; <UNDEFINED> instruction: 0x06000014
    5e68:	d8000004 	stmdale	r0, {r2}
    5e6c:	0000000b 	andeq	r0, r0, fp
    5e70:	01000000 	mrseq	r0, (UNDEF: 0)
    5e74:	02000047 	andeq	r0, r0, #71	; 0x47
    5e78:	03e50601 	mvneq	r0, #1048576	; 0x100000
    5e7c:	02020000 	andeq	r0, r2, #0
    5e80:	00044605 	andeq	r4, r4, r5, lsl #12
    5e84:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    5e88:	000000b4 	strheq	r0, [r0], -r4
    5e8c:	af050802 	svcge	0x00050802
    5e90:	03000000 	movweq	r0, #0
    5e94:	0000239b 	muleq	r0, fp, r3
    5e98:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    5e9c:	02000000 	andeq	r0, r0, #0
    5ea0:	03e30801 	mvneq	r0, #65536	; 0x10000
    5ea4:	91030000 	mrsls	r0, (UNDEF: 3)
    5ea8:	02000027 	andeq	r0, r0, #39	; 0x27
    5eac:	00601931 	rsbeq	r1, r0, r1, lsr r9
    5eb0:	02020000 	andeq	r0, r2, #0
    5eb4:	00028a07 	andeq	r8, r2, r7, lsl #20
    5eb8:	23330300 	teqcs	r3, #0, 6
    5ebc:	34020000 	strcc	r0, [r2], #-0
    5ec0:	00007319 	andeq	r7, r0, r9, lsl r3
    5ec4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5ec8:	0000007e 	andeq	r0, r0, lr, ror r0
    5ecc:	79070802 	stmdbvc	r7, {r1, fp}
    5ed0:	04000000 	streq	r0, [r0], #-0
    5ed4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    5ed8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    5edc:	00008307 	andeq	r8, r0, r7, lsl #6
    5ee0:	227c0300 	rsbscs	r0, ip, #0, 6
    5ee4:	27030000 	strcs	r0, [r3, -r0]
    5ee8:	00005412 	andeq	r5, r0, r2, lsl r4
    5eec:	008f0500 	addeq	r0, pc, r0, lsl #10
    5ef0:	fc030000 	stc2	0, cr0, [r3], {-0}
    5ef4:	03000013 	movweq	r0, #19
    5ef8:	0041122b 	subeq	r1, r1, fp, lsr #4
    5efc:	a0060000 	andge	r0, r6, r0
    5f00:	03000000 	movweq	r0, #0
    5f04:	000022cd 	andeq	r2, r0, sp, asr #5
    5f08:	67122c03 	ldrvs	r2, [r2, -r3, lsl #24]
    5f0c:	05000000 	streq	r0, [r0, #-0]
    5f10:	000000b1 	strheq	r0, [r0], -r1
    5f14:	0002ef03 	andeq	lr, r2, r3, lsl #30
    5f18:	122d0300 	eorne	r0, sp, #0, 6
    5f1c:	00000067 	andeq	r0, r0, r7, rrx
    5f20:	32030807 	andcc	r0, r3, #458752	; 0x70000
    5f24:	00015c09 	andeq	r5, r1, r9, lsl #24
    5f28:	03180800 	tsteq	r8, #0, 16
    5f2c:	34030000 	strcc	r0, [r3], #-0
    5f30:	0000a007 	andeq	sl, r0, r7
    5f34:	07010100 	streq	r0, [r1, -r0, lsl #2]
    5f38:	009e0800 	addseq	r0, lr, r0, lsl #16
    5f3c:	35030000 	strcc	r0, [r3, #-0]
    5f40:	0000a003 	andeq	sl, r0, r3
    5f44:	06010100 	streq	r0, [r1], -r0, lsl #2
    5f48:	02bf0800 	adcseq	r0, pc, #0, 16
    5f4c:	36030000 	strcc	r0, [r3], -r0
    5f50:	0000a003 	andeq	sl, r0, r3
    5f54:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5f58:	048c0800 	streq	r0, [ip], #2048	; 0x800
    5f5c:	37030000 	strcc	r0, [r3, -r0]
    5f60:	0000a003 	andeq	sl, r0, r3
    5f64:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    5f68:	04850800 	streq	r0, [r5], #2048	; 0x800
    5f6c:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    5f70:	0000a003 	andeq	sl, r0, r3
    5f74:	00040100 	andeq	r0, r4, r0, lsl #2
    5f78:	04760900 	ldrbteq	r0, [r6], #-2304	; 0xfffff700
    5f7c:	3a030000 	bcc	c5f84 <__ccfg+0xa5fdc>
    5f80:	0000a007 	andeq	sl, r0, r7
    5f84:	2b090100 	blcs	24638c <__ccfg+0x2263e4>
    5f88:	03000000 	movweq	r0, #0
    5f8c:	00a0033c 	adceq	r0, r0, ip, lsr r3
    5f90:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    5f94:	00000072 	andeq	r0, r0, r2, ror r0
    5f98:	a0033d03 	andge	r3, r3, r3, lsl #26
    5f9c:	03000000 	movweq	r0, #0
    5fa0:	00014f09 	andeq	r4, r1, r9, lsl #30
    5fa4:	083f0300 	ldmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    5fa8:	000000b1 	strheq	r0, [r0], -r1
    5fac:	d4030004 	strle	r0, [r3], #-4
    5fb0:	03000004 	movweq	r0, #4
    5fb4:	00ce0341 	sbceq	r0, lr, r1, asr #6
    5fb8:	5c060000 	stcpl	0, cr0, [r6], {-0}
    5fbc:	0a000001 	beq	5fc8 <__exidx_end+0x1274>
    5fc0:	0000030c 	andeq	r0, r0, ip, lsl #6
    5fc4:	681a4303 	ldmdavs	sl, {r0, r1, r8, r9, lr}
    5fc8:	01000001 	tsteq	r0, r1
    5fcc:	038e0a01 	orreq	r0, lr, #4096	; 0x1000
    5fd0:	45030000 	strmi	r0, [r3, #-0]
    5fd4:	0001890e 	andeq	r8, r1, lr, lsl #18
    5fd8:	0b010100 	bleq	463e0 <__ccfg+0x26438>
    5fdc:	00018f04 	andeq	r8, r1, r4, lsl #30
    5fe0:	08010200 	stmdaeq	r1, {r9}
    5fe4:	000003ec 	andeq	r0, r0, ip, ror #7
    5fe8:	00018f05 	andeq	r8, r1, r5, lsl #30
    5fec:	03a40a00 			; <UNDEFINED> instruction: 0x03a40a00
    5ff0:	45030000 	strmi	r0, [r3, #-0]
    5ff4:	0001891e 	andeq	r8, r1, lr, lsl r9
    5ff8:	07010100 	streq	r0, [r1, -r0, lsl #2]
    5ffc:	098f0408 	stmibeq	pc, {r3, sl}	; <UNPREDICTABLE>
    6000:	000001da 	ldrdeq	r0, [r0], -sl
    6004:	0019fd09 	andseq	pc, r9, r9, lsl #26
    6008:	0b900400 	bleq	fe407010 <_estack+0xde402010>
    600c:	00000067 	andeq	r0, r0, r7, rrx
    6010:	06b30900 	ldrteq	r0, [r3], r0, lsl #18
    6014:	91040000 	mrsls	r0, (UNDEF: 4)
    6018:	00008f08 	andeq	r8, r0, r8, lsl #30
    601c:	be090400 	cfcpyslt	mvf0, mvf9
    6020:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    6024:	00ac1092 	umlaleq	r1, ip, r2, r0
    6028:	00060000 	andeq	r0, r6, r0
    602c:	00049303 	andeq	r9, r4, r3, lsl #6
    6030:	03930400 	orrseq	r0, r3, #0, 8
    6034:	000001a9 	andeq	r0, r0, r9, lsr #3
    6038:	0001da0c 	andeq	sp, r1, ip, lsl #20
    603c:	0001f100 	andeq	pc, r1, r0, lsl #2
    6040:	0a000d00 	beq	9448 <__exidx_end+0x46f4>
    6044:	00000021 	andeq	r0, r0, r1, lsr #32
    6048:	e60f9904 	str	r9, [pc], -r4, lsl #18
    604c:	01000001 	tsteq	r0, r1
    6050:	05010701 	streq	r0, [r1, #-1793]	; 0xfffff8ff
    6054:	02290991 	eoreq	r0, r9, #2375680	; 0x244000
    6058:	0c080000 	stceq	0, cr0, [r8], {-0}
    605c:	05000005 	streq	r0, [r0, #-5]
    6060:	00a00793 	umlaleq	r0, r0, r3, r7	; <UNPREDICTABLE>
    6064:	07010000 	streq	r0, [r1, -r0]
    6068:	1c080001 	stcne	0, cr0, [r8], {1}
    606c:	05000000 	streq	r0, [r0, #-0]
    6070:	00a00394 	umlaleq	r0, r0, r4, r3	; <UNPREDICTABLE>
    6074:	01010000 	mrseq	r0, (UNDEF: 1)
    6078:	03000000 	movweq	r0, #0
    607c:	0000029d 	muleq	r0, sp, r2
    6080:	ff039605 			; <UNDEFINED> instruction: 0xff039605
    6084:	05000001 	streq	r0, [r0, #-1]
    6088:	00000229 	andeq	r0, r0, r9, lsr #4
    608c:	0002350c 	andeq	r3, r2, ip, lsl #10
    6090:	00024500 	andeq	r4, r2, r0, lsl #10
    6094:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    6098:	0000023a 	andeq	r0, r0, sl, lsr r2
    609c:	0003570a 	andeq	r5, r3, sl, lsl #14
    60a0:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    60a4:	00000245 	andeq	r0, r0, r5, asr #4
    60a8:	9b0c0101 	blls	3064b4 <__ccfg+0x2e650c>
    60ac:	63000000 	movwvs	r0, #0
    60b0:	0d000002 	stceq	0, cr0, [r0, #-8]
    60b4:	02580500 	subseq	r0, r8, #0, 10
    60b8:	d50a0000 	strle	r0, [sl, #-0]
    60bc:	06000003 	streq	r0, [r0], -r3
    60c0:	02631306 	rsbeq	r1, r3, #402653184	; 0x18000000
    60c4:	01010000 	mrseq	r0, (UNDEF: 1)
    60c8:	0001340a 	andeq	r3, r1, sl, lsl #8
    60cc:	0ec30400 	cdpeq	4, 12, cr0, cr3, cr0, {0}
    60d0:	000000b1 	strheq	r0, [r0], -r1
    60d4:	480e0101 	stmdami	lr, {r0, r8}
    60d8:	07000005 	streq	r0, [r0, -r5]
    60dc:	9110016e 	tstls	r0, lr, ror #2
    60e0:	0b000002 	bleq	60f0 <__exidx_end+0x139c>
    60e4:	00029704 	andeq	r9, r2, r4, lsl #14
    60e8:	a3010f00 	movwge	r0, #7936	; 0x1f00
    60ec:	10000002 	andne	r0, r0, r2
    60f0:	0000008f 	andeq	r0, r0, pc, lsl #1
    60f4:	01960c00 	orrseq	r0, r6, r0, lsl #24
    60f8:	02ae0000 	adceq	r0, lr, #0
    60fc:	000d0000 	andeq	r0, sp, r0
    6100:	0002a305 	andeq	sl, r2, r5, lsl #6
    6104:	04e41100 	strbteq	r1, [r4], #256	; 0x100
    6108:	7f070000 	svcvc	0x00070000
    610c:	02ae1601 	adceq	r1, lr, #1048576	; 0x100000
    6110:	01010000 	mrseq	r0, (UNDEF: 1)
    6114:	0003c111 	andeq	ip, r3, r1, lsl r1
    6118:	01820700 	orreq	r0, r2, r0, lsl #14
    611c:	0000bd14 	andeq	fp, r0, r4, lsl sp
    6120:	11010100 	mrsne	r0, (UNDEF: 17)
    6124:	00000511 	andeq	r0, r0, r1, lsl r5
    6128:	0e02d807 	cdpeq	8, 0, cr13, cr2, cr7, {0}
    612c:	000000b1 	strheq	r0, [r0], -r1
    6130:	08120101 	ldmdaeq	r2, {r0, r8}
    6134:	09030307 	stmdbeq	r3, {r0, r1, r2, r8, r9}
    6138:	00000307 	andeq	r0, r0, r7, lsl #6
    613c:	00361b13 	eorseq	r1, r6, r3, lsl fp
    6140:	03070700 	movweq	r0, #30464	; 0x7700
    6144:	00008f07 	andeq	r8, r0, r7, lsl #30
    6148:	0b130000 	bleq	4c6150 <__ccfg+0x4a61a8>
    614c:	07000006 	streq	r0, [r0, -r6]
    6150:	c2080308 	andgt	r0, r8, #8, 6	; 0x20000000
    6154:	04000000 	streq	r0, [r0], #-0
    6158:	02750e00 	rsbseq	r0, r5, #0, 28
    615c:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    6160:	02e00303 	rsceq	r0, r0, #201326592	; 0xc000000
    6164:	58140000 	ldmdapl	r4, {}	; <UNPREDICTABLE>
    6168:	30000005 	andcc	r0, r0, r5
    616c:	08030b07 	stmdaeq	r3, {r0, r1, r2, r8, r9, fp}
    6170:	00000377 	andeq	r0, r0, r7, ror r3
    6174:	00151213 	andseq	r1, r5, r3, lsl r2
    6178:	03140700 	tsteq	r4, #0, 14
    617c:	00008f08 	andeq	r8, r0, r8, lsl #30
    6180:	2d130000 	ldccs	0, cr0, [r3, #-0]
    6184:	07000003 	streq	r0, [r0, -r3]
    6188:	8f080315 	svchi	0x00080315
    618c:	02000000 	andeq	r0, r0, #0
    6190:	00054b13 	andeq	r4, r5, r3, lsl fp
    6194:	03160700 	tsteq	r6, #0, 14
    6198:	0002840b 	andeq	r8, r2, fp, lsl #8
    619c:	88130400 	ldmdahi	r3, {sl}
    61a0:	0700000f 	streq	r0, [r0, -pc]
    61a4:	c2090317 	andgt	r0, r9, #1543503872	; 0x5c000000
    61a8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    61ac:	0004dd13 	andeq	sp, r4, r3, lsl sp
    61b0:	03180700 	tsteq	r8, #0, 14
    61b4:	0003770f 	andeq	r7, r3, pc, lsl #14
    61b8:	28130c00 	ldmdacs	r3, {sl, fp}
    61bc:	07000003 	streq	r0, [r0, -r3]
    61c0:	87150319 			; <UNDEFINED> instruction: 0x87150319
    61c4:	2c000003 	stccs	0, cr0, [r0], {3}
    61c8:	03070c00 	movweq	r0, #31744	; 0x7c00
    61cc:	03870000 	orreq	r0, r7, #0
    61d0:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    61d4:	03000000 	movweq	r0, #0
    61d8:	14040b00 	strne	r0, [r4], #-2816	; 0xfffff500
    61dc:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    61e0:	00000563 	andeq	r0, r0, r3, ror #10
    61e4:	1b031c07 	blne	cd208 <__ccfg+0xad260>
    61e8:	00000314 	andeq	r0, r0, r4, lsl r3
    61ec:	0003b711 	andeq	fp, r3, r1, lsl r7
    61f0:	031e0700 	tsteq	lr, #0, 14
    61f4:	0003a914 	andeq	sl, r3, r4, lsl r9
    61f8:	0b010100 	bleq	46600 <__ccfg+0x26658>
    61fc:	00038d04 	andeq	r8, r3, r4, lsl #26
    6200:	140a0a00 	strne	r0, [sl], #-2560	; 0xfffff600
    6204:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    6208:	0001890e 	andeq	r8, r1, lr, lsl #18
    620c:	16010100 	strne	r0, [r1], -r0, lsl #2
    6210:	00145301 	andseq	r5, r4, r1, lsl #6
    6214:	050d0100 	streq	r0, [sp, #-256]	; 0xffffff00
    6218:	00008101 	andeq	r8, r0, r1, lsl #2
    621c:	001dd800 	andseq	sp, sp, r0, lsl #16
    6220:	001e5000 	andseq	r5, lr, r0
    6224:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    6228:	01007473 	tsteq	r0, r3, ror r4
    622c:	008f120d 	addeq	r1, pc, sp, lsl #4
    6230:	22970000 	addscs	r0, r7, #0
    6234:	62170000 	andsvs	r0, r7, #0
    6238:	01006675 	tsteq	r0, r5, ror r6
    623c:	01891c0d 	orreq	r1, r9, sp, lsl #24
    6240:	22b50000 	adcscs	r0, r5, #0
    6244:	6c170000 	ldcvs	0, cr0, [r7], {-0}
    6248:	01006e65 	tsteq	r0, r5, ror #28
    624c:	0081250d 	addeq	r2, r1, sp, lsl #10
    6250:	230a0000 	movwcs	r0, #40960	; 0xa000
    6254:	c8180000 	ldmdagt	r8, {}	; <UNPREDICTABLE>
    6258:	0100001e 	tsteq	r0, lr, lsl r0
    625c:	00810611 	addeq	r0, r1, r1, lsl r6
    6260:	235f0000 	cmpcs	pc, #0
    6264:	00000000 	andeq	r0, r0, r0
    6268:	0000044c 	andeq	r0, r0, ip, asr #8
    626c:	1afa0003 	bne	ffe86280 <_estack+0xdfe81280>
    6270:	01040000 	mrseq	r0, (UNDEF: 4)
    6274:	00000181 	andeq	r0, r0, r1, lsl #3
    6278:	0014630c 	andseq	r6, r4, ip, lsl #6
    627c:	00040600 	andeq	r0, r4, r0, lsl #12
    6280:	000be800 	andeq	lr, fp, r0, lsl #16
    6284:	00000000 	andeq	r0, r0, r0
    6288:	0048c600 	subeq	ip, r8, r0, lsl #12
    628c:	06010200 	streq	r0, [r1], -r0, lsl #4
    6290:	000003e5 	andeq	r0, r0, r5, ror #7
    6294:	46050202 	strmi	r0, [r5], -r2, lsl #4
    6298:	02000004 	andeq	r0, r0, #4
    629c:	00b40504 	adcseq	r0, r4, r4, lsl #10
    62a0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    62a4:	0000af05 	andeq	sl, r0, r5, lsl #30
    62a8:	239b0300 	orrscs	r0, fp, #0, 6
    62ac:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    62b0:	00004d18 	andeq	r4, r0, r8, lsl sp
    62b4:	08010200 	stmdaeq	r1, {r9}
    62b8:	000003e3 	andeq	r0, r0, r3, ror #7
    62bc:	00279103 	eoreq	r9, r7, r3, lsl #2
    62c0:	19310200 	ldmdbne	r1!, {r9}
    62c4:	00000060 	andeq	r0, r0, r0, rrx
    62c8:	8a070202 	bhi	1c6ad8 <__ccfg+0x1a6b30>
    62cc:	03000002 	movweq	r0, #2
    62d0:	00002333 	andeq	r2, r0, r3, lsr r3
    62d4:	73193402 	tstvc	r9, #33554432	; 0x2000000
    62d8:	02000000 	andeq	r0, r0, #0
    62dc:	007e0704 	rsbseq	r0, lr, r4, lsl #14
    62e0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    62e4:	00007907 	andeq	r7, r0, r7, lsl #18
    62e8:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    62ec:	00746e69 	rsbseq	r6, r4, r9, ror #28
    62f0:	83070402 	movwhi	r0, #29698	; 0x7402
    62f4:	03000000 	movweq	r0, #0
    62f8:	0000036c 	andeq	r0, r0, ip, ror #6
    62fc:	9b1b2803 	blls	6d0310 <__ccfg+0x6b0368>
    6300:	05000000 	streq	r0, [r0, #-0]
    6304:	000000e2 	andeq	r0, r0, r2, ror #1
    6308:	b3000904 	movwlt	r0, #2308	; 0x904
    630c:	06000000 	streq	r0, [r0], -r0
    6310:	000004f7 	strdeq	r0, [r0], -r7
    6314:	000000b3 	strheq	r0, [r0], -r3
    6318:	07000100 	streq	r0, [r0, -r0, lsl #2]
    631c:	00e40304 	rsceq	r0, r4, r4, lsl #6
    6320:	63030000 	movwvs	r0, #12288	; 0x3000
    6324:	00008f18 	andeq	r8, r0, r8, lsl pc
    6328:	227c0300 	rsbscs	r0, ip, #0, 6
    632c:	27040000 	strcs	r0, [r4, -r0]
    6330:	00005412 	andeq	r5, r0, r2, lsl r4
    6334:	00c10800 	sbceq	r0, r1, r0, lsl #16
    6338:	fc030000 	stc2	0, cr0, [r3], {-0}
    633c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    6340:	0041122b 	subeq	r1, r1, fp, lsr #4
    6344:	d2090000 	andle	r0, r9, #0
    6348:	03000000 	movweq	r0, #0
    634c:	000022cd 	andeq	r2, r0, sp, asr #5
    6350:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    6354:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6358:	000000e3 	andeq	r0, r0, r3, ror #1
    635c:	0002ef03 	andeq	lr, r2, r3, lsl #30
    6360:	122d0400 	eorne	r0, sp, #0, 8
    6364:	00000067 	andeq	r0, r0, r7, rrx
    6368:	3204080a 	andcc	r0, r4, #655360	; 0xa0000
    636c:	00018e09 	andeq	r8, r1, r9, lsl #28
    6370:	03180b00 	tsteq	r8, #0, 22
    6374:	34040000 	strcc	r0, [r4], #-0
    6378:	0000d207 	andeq	sp, r0, r7, lsl #4
    637c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    6380:	009e0b00 	addseq	r0, lr, r0, lsl #22
    6384:	35040000 	strcc	r0, [r4, #-0]
    6388:	0000d203 	andeq	sp, r0, r3, lsl #4
    638c:	06010100 	streq	r0, [r1], -r0, lsl #2
    6390:	02bf0b00 	adcseq	r0, pc, #0, 22
    6394:	36040000 	strcc	r0, [r4], -r0
    6398:	0000d203 	andeq	sp, r0, r3, lsl #4
    639c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    63a0:	048c0b00 	streq	r0, [ip], #2816	; 0xb00
    63a4:	37040000 	strcc	r0, [r4, -r0]
    63a8:	0000d203 	andeq	sp, r0, r3, lsl #4
    63ac:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    63b0:	04850b00 	streq	r0, [r5], #2816	; 0xb00
    63b4:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    63b8:	0000d203 	andeq	sp, r0, r3, lsl #4
    63bc:	00040100 	andeq	r0, r4, r0, lsl #2
    63c0:	04760c00 	ldrbteq	r0, [r6], #-3072	; 0xfffff400
    63c4:	3a040000 	bcc	1063cc <__ccfg+0xe6424>
    63c8:	0000d207 	andeq	sp, r0, r7, lsl #4
    63cc:	2b0c0100 	blcs	3067d4 <__ccfg+0x2e682c>
    63d0:	04000000 	streq	r0, [r0], #-0
    63d4:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    63d8:	0c020000 	stceq	0, cr0, [r2], {-0}
    63dc:	00000072 	andeq	r0, r0, r2, ror r0
    63e0:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    63e4:	03000000 	movweq	r0, #0
    63e8:	00014f0c 	andeq	r4, r1, ip, lsl #30
    63ec:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    63f0:	000000e3 	andeq	r0, r0, r3, ror #1
    63f4:	d4030004 	strle	r0, [r3], #-4
    63f8:	04000004 	streq	r0, [r0], #-4
    63fc:	01000341 	tsteq	r0, r1, asr #6
    6400:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    6404:	0d000001 	stceq	0, cr0, [r0, #-4]
    6408:	0000030c 	andeq	r0, r0, ip, lsl #6
    640c:	9a1a4304 	bls	697024 <__ccfg+0x67707c>
    6410:	01000001 	tsteq	r0, r1
    6414:	038e0d01 	orreq	r0, lr, #1, 26	; 0x40
    6418:	45040000 	strmi	r0, [r4, #-0]
    641c:	0001bb0e 	andeq	fp, r1, lr, lsl #22
    6420:	0e010100 	adfeqs	f0, f1, f0
    6424:	0001c104 	andeq	ip, r1, r4, lsl #2
    6428:	08010200 	stmdaeq	r1, {r9}
    642c:	000003ec 	andeq	r0, r0, ip, ror #7
    6430:	0001c108 	andeq	ip, r1, r8, lsl #2
    6434:	03a40d00 			; <UNDEFINED> instruction: 0x03a40d00
    6438:	45040000 	strmi	r0, [r4, #-0]
    643c:	0001bb1e 	andeq	fp, r1, lr, lsl fp
    6440:	0a010100 	beq	46848 <__ccfg+0x268a0>
    6444:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    6448:	0000020c 	andeq	r0, r0, ip, lsl #4
    644c:	0019fd0c 	andseq	pc, r9, ip, lsl #26
    6450:	0b900500 	bleq	fe407858 <_estack+0xde402858>
    6454:	00000067 	andeq	r0, r0, r7, rrx
    6458:	06b30c00 	ldrteq	r0, [r3], r0, lsl #24
    645c:	91050000 	mrsls	r0, (UNDEF: 5)
    6460:	0000c108 	andeq	ip, r0, r8, lsl #2
    6464:	be0c0400 	cfcpyslt	mvf0, mvf12
    6468:	05000015 	streq	r0, [r0, #-21]	; 0xffffffeb
    646c:	00de1092 	smullseq	r1, lr, r2, r0
    6470:	00060000 	andeq	r0, r6, r0
    6474:	00049303 	andeq	r9, r4, r3, lsl #6
    6478:	03930500 	orrseq	r0, r3, #0, 10
    647c:	000001db 	ldrdeq	r0, [r0], -fp
    6480:	00020c0f 	andeq	r0, r2, pc, lsl #24
    6484:	00022300 	andeq	r2, r2, r0, lsl #6
    6488:	0d001000 	stceq	0, cr1, [r0, #-0]
    648c:	00000021 	andeq	r0, r0, r1, lsr #32
    6490:	180f9905 	stmdane	pc, {r0, r2, r8, fp, ip, pc}	; <UNPREDICTABLE>
    6494:	01000002 	tsteq	r0, r2
    6498:	06010a01 	streq	r0, [r1], -r1, lsl #20
    649c:	025b0991 	subseq	r0, fp, #2375680	; 0x244000
    64a0:	0c0b0000 	stceq	0, cr0, [fp], {-0}
    64a4:	06000005 	streq	r0, [r0], -r5
    64a8:	00d20793 	smullseq	r0, r2, r3, r7
    64ac:	07010000 	streq	r0, [r1, -r0]
    64b0:	1c0b0001 	stcne	0, cr0, [fp], {1}
    64b4:	06000000 	streq	r0, [r0], -r0
    64b8:	00d20394 	smullseq	r0, r2, r4, r3
    64bc:	01010000 	mrseq	r0, (UNDEF: 1)
    64c0:	03000000 	movweq	r0, #0
    64c4:	0000029d 	muleq	r0, sp, r2
    64c8:	31039606 	tstcc	r3, r6, lsl #12
    64cc:	08000002 	stmdaeq	r0, {r1}
    64d0:	0000025b 	andeq	r0, r0, fp, asr r2
    64d4:	0002670f 	andeq	r6, r2, pc, lsl #14
    64d8:	00027700 	andeq	r7, r2, r0, lsl #14
    64dc:	08001000 	stmdaeq	r0, {ip}
    64e0:	0000026c 	andeq	r0, r0, ip, ror #4
    64e4:	0003570d 	andeq	r5, r3, sp, lsl #14
    64e8:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    64ec:	00000277 	andeq	r0, r0, r7, ror r2
    64f0:	cd0f0101 	stfgts	f0, [pc, #-4]	; 64f4 <__exidx_end+0x17a0>
    64f4:	95000000 	strls	r0, [r0, #-0]
    64f8:	10000002 	andne	r0, r0, r2
    64fc:	028a0800 	addeq	r0, sl, #0, 16
    6500:	d50d0000 	strle	r0, [sp, #-0]
    6504:	07000003 	streq	r0, [r0, -r3]
    6508:	02951306 	addseq	r1, r5, #402653184	; 0x18000000
    650c:	01010000 	mrseq	r0, (UNDEF: 1)
    6510:	0001340d 	andeq	r3, r1, sp, lsl #8
    6514:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    6518:	000000e3 	andeq	r0, r0, r3, ror #1
    651c:	48110101 	ldmdami	r1, {r0, r8}
    6520:	08000005 	stmdaeq	r0, {r0, r2}
    6524:	c310016e 	tstgt	r0, #-2147483621	; 0x8000001b
    6528:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    652c:	0002c904 	andeq	ip, r2, r4, lsl #18
    6530:	d5011200 	strle	r1, [r1, #-512]	; 0xfffffe00
    6534:	13000002 	movwne	r0, #2
    6538:	000000c1 	andeq	r0, r0, r1, asr #1
    653c:	01c80f00 	biceq	r0, r8, r0, lsl #30
    6540:	02e00000 	rsceq	r0, r0, #0
    6544:	00100000 	andseq	r0, r0, r0
    6548:	0002d508 	andeq	sp, r2, r8, lsl #10
    654c:	04e41400 	strbteq	r1, [r4], #1024	; 0x400
    6550:	7f080000 	svcvc	0x00080000
    6554:	02e01601 	rsceq	r1, r0, #1048576	; 0x100000
    6558:	01010000 	mrseq	r0, (UNDEF: 1)
    655c:	0003c114 	andeq	ip, r3, r4, lsl r1
    6560:	01820800 	orreq	r0, r2, r0, lsl #16
    6564:	0000ef14 	andeq	lr, r0, r4, lsl pc
    6568:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    656c:	00000511 	andeq	r0, r0, r1, lsl r5
    6570:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    6574:	000000e3 	andeq	r0, r0, r3, ror #1
    6578:	08150101 	ldmdaeq	r5, {r0, r8}
    657c:	09030308 	stmdbeq	r3, {r3, r8, r9}
    6580:	00000339 	andeq	r0, r0, r9, lsr r3
    6584:	00361b16 	eorseq	r1, r6, r6, lsl fp
    6588:	03070800 	movweq	r0, #30720	; 0x7800
    658c:	0000c107 	andeq	ip, r0, r7, lsl #2
    6590:	0b160000 	bleq	586598 <__ccfg+0x5665f0>
    6594:	08000006 	stmdaeq	r0, {r1, r2}
    6598:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    659c:	04000000 	streq	r0, [r0], #-0
    65a0:	02751100 	rsbseq	r1, r5, #0, 2
    65a4:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    65a8:	03120303 	tsteq	r2, #201326592	; 0xc000000
    65ac:	58170000 	ldmdapl	r7, {}	; <UNPREDICTABLE>
    65b0:	30000005 	andcc	r0, r0, r5
    65b4:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    65b8:	000003a9 	andeq	r0, r0, r9, lsr #7
    65bc:	00151216 	andseq	r1, r5, r6, lsl r2
    65c0:	03140800 	tsteq	r4, #0, 16
    65c4:	0000c108 	andeq	ip, r0, r8, lsl #2
    65c8:	2d160000 	ldccs	0, cr0, [r6, #-0]
    65cc:	08000003 	stmdaeq	r0, {r0, r1}
    65d0:	c1080315 	tstgt	r8, r5, lsl r3
    65d4:	02000000 	andeq	r0, r0, #0
    65d8:	00054b16 	andeq	r4, r5, r6, lsl fp
    65dc:	03160800 	tsteq	r6, #0, 16
    65e0:	0002b60b 	andeq	fp, r2, fp, lsl #12
    65e4:	88160400 	ldmdahi	r6, {sl}
    65e8:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    65ec:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    65f0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    65f4:	0004dd16 	andeq	sp, r4, r6, lsl sp
    65f8:	03180800 	tsteq	r8, #0, 16
    65fc:	0003a90f 	andeq	sl, r3, pc, lsl #18
    6600:	28160c00 	ldmdacs	r6, {sl, fp}
    6604:	08000003 	stmdaeq	r0, {r0, r1}
    6608:	b9150319 	ldmdblt	r5, {r0, r3, r4, r8, r9}
    660c:	2c000003 	stccs	0, cr0, [r0], {3}
    6610:	03390f00 	teqeq	r9, #0, 30
    6614:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    6618:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    661c:	03000000 	movweq	r0, #0
    6620:	46040e00 	strmi	r0, [r4], -r0, lsl #28
    6624:	11000003 	tstne	r0, r3
    6628:	00000563 	andeq	r0, r0, r3, ror #10
    662c:	1b031c08 	blne	cd654 <__ccfg+0xad6ac>
    6630:	00000346 	andeq	r0, r0, r6, asr #6
    6634:	0003b714 	andeq	fp, r3, r4, lsl r7
    6638:	031e0800 	tsteq	lr, #0, 16
    663c:	0003db14 	andeq	sp, r3, r4, lsl fp
    6640:	0e010100 	adfeqs	f0, f1, f0
    6644:	0003bf04 	andeq	fp, r3, r4, lsl #30
    6648:	5a011900 	bpl	4ca50 <__ccfg+0x2caa8>
    664c:	01000014 	tsteq	r0, r4, lsl r0
    6650:	8101050c 	tsthi	r1, ip, lsl #10
    6654:	50000000 	andpl	r0, r0, r0
    6658:	a400001e 	strge	r0, [r0], #-30	; 0xffffffe2
    665c:	0100001e 	tsteq	r0, lr, lsl r0
    6660:	0004499c 	muleq	r4, ip, r9
    6664:	74731a00 	ldrbtvc	r1, [r3], #-2560	; 0xfffff600
    6668:	140c0100 	strne	r0, [ip], #-256	; 0xffffff00
    666c:	000000c1 	andeq	r0, r0, r1, asr #1
    6670:	000023a9 	andeq	r2, r0, r9, lsr #7
    6674:	01006d1b 	tsteq	r0, fp, lsl sp
    6678:	0449240c 	strbeq	r2, [r9], #-1036	; 0xfffffbf4
    667c:	91020000 	mrsls	r0, (UNDEF: 2)
    6680:	c81d1c74 	ldmdagt	sp, {r2, r4, r5, r6, sl, fp, ip}
    6684:	0100001e 	tsteq	r0, lr, lsl r0
    6688:	0081060e 	addeq	r0, r1, lr, lsl #12
    668c:	23bc0000 			; <UNDEFINED> instruction: 0x23bc0000
    6690:	621e0000 	andsvs	r0, lr, #0
    6694:	01006675 	tsteq	r0, r5, ror r6
    6698:	01bb080f 			; <UNDEFINED> instruction: 0x01bb080f
    669c:	23fb0000 	mvnscs	r0, #0
    66a0:	611f0000 	tstvs	pc, r0
    66a4:	10010070 	andne	r0, r1, r0, ror r0
    66a8:	0000b50a 	andeq	fp, r0, sl, lsl #10
    66ac:	5c910200 	lfmpl	f0, 4, [r1], {0}
    66b0:	c8040e00 	stmdagt	r4, {r9, sl, fp}
    66b4:	00000001 	andeq	r0, r0, r1
    66b8:	0000044c 	andeq	r0, r0, ip, asr #8
    66bc:	1ca60003 	stcne	0, cr0, [r6], #12
    66c0:	01040000 	mrseq	r0, (UNDEF: 4)
    66c4:	00000181 	andeq	r0, r0, r1, lsl #3
    66c8:	0014a40c 	andseq	sl, r4, ip, lsl #8
    66cc:	00040600 	andeq	r0, r4, r0, lsl #12
    66d0:	000bf800 	andeq	pc, fp, r0, lsl #16
    66d4:	00000000 	andeq	r0, r0, r0
    66d8:	004a6800 	subeq	r6, sl, r0, lsl #16
    66dc:	06010200 	streq	r0, [r1], -r0, lsl #4
    66e0:	000003e5 	andeq	r0, r0, r5, ror #7
    66e4:	46050202 	strmi	r0, [r5], -r2, lsl #4
    66e8:	02000004 	andeq	r0, r0, #4
    66ec:	00b40504 	adcseq	r0, r4, r4, lsl #10
    66f0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    66f4:	0000af05 	andeq	sl, r0, r5, lsl #30
    66f8:	239b0300 	orrscs	r0, fp, #0, 6
    66fc:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    6700:	00004d18 	andeq	r4, r0, r8, lsl sp
    6704:	08010200 	stmdaeq	r1, {r9}
    6708:	000003e3 	andeq	r0, r0, r3, ror #7
    670c:	00279103 	eoreq	r9, r7, r3, lsl #2
    6710:	19310200 	ldmdbne	r1!, {r9}
    6714:	00000060 	andeq	r0, r0, r0, rrx
    6718:	8a070202 	bhi	1c6f28 <__ccfg+0x1a6f80>
    671c:	03000002 	movweq	r0, #2
    6720:	00002333 	andeq	r2, r0, r3, lsr r3
    6724:	73193402 	tstvc	r9, #33554432	; 0x2000000
    6728:	02000000 	andeq	r0, r0, #0
    672c:	007e0704 	rsbseq	r0, lr, r4, lsl #14
    6730:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6734:	00007907 	andeq	r7, r0, r7, lsl #18
    6738:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    673c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    6740:	83070402 	movwhi	r0, #29698	; 0x7402
    6744:	03000000 	movweq	r0, #0
    6748:	0000036c 	andeq	r0, r0, ip, ror #6
    674c:	9b1b2803 	blls	6d0760 <__ccfg+0x6b07b8>
    6750:	05000000 	streq	r0, [r0, #-0]
    6754:	000000e2 	andeq	r0, r0, r2, ror #1
    6758:	b3000904 	movwlt	r0, #2308	; 0x904
    675c:	06000000 	streq	r0, [r0], -r0
    6760:	000004f7 	strdeq	r0, [r0], -r7
    6764:	000000b3 	strheq	r0, [r0], -r3
    6768:	07000100 	streq	r0, [r0, -r0, lsl #2]
    676c:	00e40304 	rsceq	r0, r4, r4, lsl #6
    6770:	63030000 	movwvs	r0, #12288	; 0x3000
    6774:	00008f18 	andeq	r8, r0, r8, lsl pc
    6778:	227c0300 	rsbscs	r0, ip, #0, 6
    677c:	27040000 	strcs	r0, [r4, -r0]
    6780:	00005412 	andeq	r5, r0, r2, lsl r4
    6784:	00c10800 	sbceq	r0, r1, r0, lsl #16
    6788:	fc030000 	stc2	0, cr0, [r3], {-0}
    678c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    6790:	0041122b 	subeq	r1, r1, fp, lsr #4
    6794:	d2090000 	andle	r0, r9, #0
    6798:	03000000 	movweq	r0, #0
    679c:	000022cd 	andeq	r2, r0, sp, asr #5
    67a0:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    67a4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    67a8:	000000e3 	andeq	r0, r0, r3, ror #1
    67ac:	0002ef03 	andeq	lr, r2, r3, lsl #30
    67b0:	122d0400 	eorne	r0, sp, #0, 8
    67b4:	00000067 	andeq	r0, r0, r7, rrx
    67b8:	3204080a 	andcc	r0, r4, #655360	; 0xa0000
    67bc:	00018e09 	andeq	r8, r1, r9, lsl #28
    67c0:	03180b00 	tsteq	r8, #0, 22
    67c4:	34040000 	strcc	r0, [r4], #-0
    67c8:	0000d207 	andeq	sp, r0, r7, lsl #4
    67cc:	07010100 	streq	r0, [r1, -r0, lsl #2]
    67d0:	009e0b00 	addseq	r0, lr, r0, lsl #22
    67d4:	35040000 	strcc	r0, [r4, #-0]
    67d8:	0000d203 	andeq	sp, r0, r3, lsl #4
    67dc:	06010100 	streq	r0, [r1], -r0, lsl #2
    67e0:	02bf0b00 	adcseq	r0, pc, #0, 22
    67e4:	36040000 	strcc	r0, [r4], -r0
    67e8:	0000d203 	andeq	sp, r0, r3, lsl #4
    67ec:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    67f0:	048c0b00 	streq	r0, [ip], #2816	; 0xb00
    67f4:	37040000 	strcc	r0, [r4, -r0]
    67f8:	0000d203 	andeq	sp, r0, r3, lsl #4
    67fc:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    6800:	04850b00 	streq	r0, [r5], #2816	; 0xb00
    6804:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    6808:	0000d203 	andeq	sp, r0, r3, lsl #4
    680c:	00040100 	andeq	r0, r4, r0, lsl #2
    6810:	04760c00 	ldrbteq	r0, [r6], #-3072	; 0xfffff400
    6814:	3a040000 	bcc	10681c <__ccfg+0xe6874>
    6818:	0000d207 	andeq	sp, r0, r7, lsl #4
    681c:	2b0c0100 	blcs	306c24 <__ccfg+0x2e6c7c>
    6820:	04000000 	streq	r0, [r0], #-0
    6824:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    6828:	0c020000 	stceq	0, cr0, [r2], {-0}
    682c:	00000072 	andeq	r0, r0, r2, ror r0
    6830:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    6834:	03000000 	movweq	r0, #0
    6838:	00014f0c 	andeq	r4, r1, ip, lsl #30
    683c:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    6840:	000000e3 	andeq	r0, r0, r3, ror #1
    6844:	d4030004 	strle	r0, [r3], #-4
    6848:	04000004 	streq	r0, [r0], #-4
    684c:	01000341 	tsteq	r0, r1, asr #6
    6850:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    6854:	0d000001 	stceq	0, cr0, [r0, #-4]
    6858:	0000030c 	andeq	r0, r0, ip, lsl #6
    685c:	9a1a4304 	bls	697474 <__ccfg+0x6774cc>
    6860:	01000001 	tsteq	r0, r1
    6864:	038e0d01 	orreq	r0, lr, #1, 26	; 0x40
    6868:	45040000 	strmi	r0, [r4, #-0]
    686c:	0001bb0e 	andeq	fp, r1, lr, lsl #22
    6870:	0e010100 	adfeqs	f0, f1, f0
    6874:	0001c104 	andeq	ip, r1, r4, lsl #2
    6878:	08010200 	stmdaeq	r1, {r9}
    687c:	000003ec 	andeq	r0, r0, ip, ror #7
    6880:	0001c108 	andeq	ip, r1, r8, lsl #2
    6884:	03a40d00 			; <UNDEFINED> instruction: 0x03a40d00
    6888:	45040000 	strmi	r0, [r4, #-0]
    688c:	0001bb1e 	andeq	fp, r1, lr, lsl fp
    6890:	0a010100 	beq	46c98 <__ccfg+0x26cf0>
    6894:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    6898:	0000020c 	andeq	r0, r0, ip, lsl #4
    689c:	0019fd0c 	andseq	pc, r9, ip, lsl #26
    68a0:	0b900500 	bleq	fe407ca8 <_estack+0xde402ca8>
    68a4:	00000067 	andeq	r0, r0, r7, rrx
    68a8:	06b30c00 	ldrteq	r0, [r3], r0, lsl #24
    68ac:	91050000 	mrsls	r0, (UNDEF: 5)
    68b0:	0000c108 	andeq	ip, r0, r8, lsl #2
    68b4:	be0c0400 	cfcpyslt	mvf0, mvf12
    68b8:	05000015 	streq	r0, [r0, #-21]	; 0xffffffeb
    68bc:	00de1092 	smullseq	r1, lr, r2, r0
    68c0:	00060000 	andeq	r0, r6, r0
    68c4:	00049303 	andeq	r9, r4, r3, lsl #6
    68c8:	03930500 	orrseq	r0, r3, #0, 10
    68cc:	000001db 	ldrdeq	r0, [r0], -fp
    68d0:	00020c0f 	andeq	r0, r2, pc, lsl #24
    68d4:	00022300 	andeq	r2, r2, r0, lsl #6
    68d8:	0d001000 	stceq	0, cr1, [r0, #-0]
    68dc:	00000021 	andeq	r0, r0, r1, lsr #32
    68e0:	180f9905 	stmdane	pc, {r0, r2, r8, fp, ip, pc}	; <UNPREDICTABLE>
    68e4:	01000002 	tsteq	r0, r2
    68e8:	06010a01 	streq	r0, [r1], -r1, lsl #20
    68ec:	025b0991 	subseq	r0, fp, #2375680	; 0x244000
    68f0:	0c0b0000 	stceq	0, cr0, [fp], {-0}
    68f4:	06000005 	streq	r0, [r0], -r5
    68f8:	00d20793 	smullseq	r0, r2, r3, r7
    68fc:	07010000 	streq	r0, [r1, -r0]
    6900:	1c0b0001 	stcne	0, cr0, [fp], {1}
    6904:	06000000 	streq	r0, [r0], -r0
    6908:	00d20394 	smullseq	r0, r2, r4, r3
    690c:	01010000 	mrseq	r0, (UNDEF: 1)
    6910:	03000000 	movweq	r0, #0
    6914:	0000029d 	muleq	r0, sp, r2
    6918:	31039606 	tstcc	r3, r6, lsl #12
    691c:	08000002 	stmdaeq	r0, {r1}
    6920:	0000025b 	andeq	r0, r0, fp, asr r2
    6924:	0002670f 	andeq	r6, r2, pc, lsl #14
    6928:	00027700 	andeq	r7, r2, r0, lsl #14
    692c:	08001000 	stmdaeq	r0, {ip}
    6930:	0000026c 	andeq	r0, r0, ip, ror #4
    6934:	0003570d 	andeq	r5, r3, sp, lsl #14
    6938:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    693c:	00000277 	andeq	r0, r0, r7, ror r2
    6940:	cd0f0101 	stfgts	f0, [pc, #-4]	; 6944 <__exidx_end+0x1bf0>
    6944:	95000000 	strls	r0, [r0, #-0]
    6948:	10000002 	andne	r0, r0, r2
    694c:	028a0800 	addeq	r0, sl, #0, 16
    6950:	d50d0000 	strle	r0, [sp, #-0]
    6954:	07000003 	streq	r0, [r0, -r3]
    6958:	02951306 	addseq	r1, r5, #402653184	; 0x18000000
    695c:	01010000 	mrseq	r0, (UNDEF: 1)
    6960:	0001340d 	andeq	r3, r1, sp, lsl #8
    6964:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    6968:	000000e3 	andeq	r0, r0, r3, ror #1
    696c:	48110101 	ldmdami	r1, {r0, r8}
    6970:	08000005 	stmdaeq	r0, {r0, r2}
    6974:	c310016e 	tstgt	r0, #-2147483621	; 0x8000001b
    6978:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    697c:	0002c904 	andeq	ip, r2, r4, lsl #18
    6980:	d5011200 	strle	r1, [r1, #-512]	; 0xfffffe00
    6984:	13000002 	movwne	r0, #2
    6988:	000000c1 	andeq	r0, r0, r1, asr #1
    698c:	01c80f00 	biceq	r0, r8, r0, lsl #30
    6990:	02e00000 	rsceq	r0, r0, #0
    6994:	00100000 	andseq	r0, r0, r0
    6998:	0002d508 	andeq	sp, r2, r8, lsl #10
    699c:	04e41400 	strbteq	r1, [r4], #1024	; 0x400
    69a0:	7f080000 	svcvc	0x00080000
    69a4:	02e01601 	rsceq	r1, r0, #1048576	; 0x100000
    69a8:	01010000 	mrseq	r0, (UNDEF: 1)
    69ac:	0003c114 	andeq	ip, r3, r4, lsl r1
    69b0:	01820800 	orreq	r0, r2, r0, lsl #16
    69b4:	0000ef14 	andeq	lr, r0, r4, lsl pc
    69b8:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    69bc:	00000511 	andeq	r0, r0, r1, lsl r5
    69c0:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    69c4:	000000e3 	andeq	r0, r0, r3, ror #1
    69c8:	08150101 	ldmdaeq	r5, {r0, r8}
    69cc:	09030308 	stmdbeq	r3, {r3, r8, r9}
    69d0:	00000339 	andeq	r0, r0, r9, lsr r3
    69d4:	00361b16 	eorseq	r1, r6, r6, lsl fp
    69d8:	03070800 	movweq	r0, #30720	; 0x7800
    69dc:	0000c107 	andeq	ip, r0, r7, lsl #2
    69e0:	0b160000 	bleq	5869e8 <__ccfg+0x566a40>
    69e4:	08000006 	stmdaeq	r0, {r1, r2}
    69e8:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    69ec:	04000000 	streq	r0, [r0], #-0
    69f0:	02751100 	rsbseq	r1, r5, #0, 2
    69f4:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    69f8:	03120303 	tsteq	r2, #201326592	; 0xc000000
    69fc:	58170000 	ldmdapl	r7, {}	; <UNPREDICTABLE>
    6a00:	30000005 	andcc	r0, r0, r5
    6a04:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    6a08:	000003a9 	andeq	r0, r0, r9, lsr #7
    6a0c:	00151216 	andseq	r1, r5, r6, lsl r2
    6a10:	03140800 	tsteq	r4, #0, 16
    6a14:	0000c108 	andeq	ip, r0, r8, lsl #2
    6a18:	2d160000 	ldccs	0, cr0, [r6, #-0]
    6a1c:	08000003 	stmdaeq	r0, {r0, r1}
    6a20:	c1080315 	tstgt	r8, r5, lsl r3
    6a24:	02000000 	andeq	r0, r0, #0
    6a28:	00054b16 	andeq	r4, r5, r6, lsl fp
    6a2c:	03160800 	tsteq	r6, #0, 16
    6a30:	0002b60b 	andeq	fp, r2, fp, lsl #12
    6a34:	88160400 	ldmdahi	r6, {sl}
    6a38:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    6a3c:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    6a40:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6a44:	0004dd16 	andeq	sp, r4, r6, lsl sp
    6a48:	03180800 	tsteq	r8, #0, 16
    6a4c:	0003a90f 	andeq	sl, r3, pc, lsl #18
    6a50:	28160c00 	ldmdacs	r6, {sl, fp}
    6a54:	08000003 	stmdaeq	r0, {r0, r1}
    6a58:	b9150319 	ldmdblt	r5, {r0, r3, r4, r8, r9}
    6a5c:	2c000003 	stccs	0, cr0, [r0], {3}
    6a60:	03390f00 	teqeq	r9, #0, 30
    6a64:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    6a68:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    6a6c:	03000000 	movweq	r0, #0
    6a70:	46040e00 	strmi	r0, [r4], -r0, lsl #28
    6a74:	11000003 	tstne	r0, r3
    6a78:	00000563 	andeq	r0, r0, r3, ror #10
    6a7c:	1b031c08 	blne	cdaa4 <__ccfg+0xadafc>
    6a80:	00000346 	andeq	r0, r0, r6, asr #6
    6a84:	0003b714 	andeq	fp, r3, r4, lsl r7
    6a88:	031e0800 	tsteq	lr, #0, 16
    6a8c:	0003db14 	andeq	sp, r3, r4, lsl fp
    6a90:	0e010100 	adfeqs	f0, f1, f0
    6a94:	0003bf04 	andeq	fp, r3, r4, lsl #30
    6a98:	140a0d00 	strne	r0, [sl], #-3328	; 0xfffff300
    6a9c:	0a010000 	beq	46aa4 <__ccfg+0x26afc>
    6aa0:	0001bb0e 	andeq	fp, r1, lr, lsl #22
    6aa4:	19010100 	stmdbne	r1, {r8}
    6aa8:	0014e401 	andseq	lr, r4, r1, lsl #8
    6aac:	050e0100 	streq	r0, [lr, #-256]	; 0xffffff00
    6ab0:	00008101 	andeq	r8, r0, r1, lsl #2
    6ab4:	001ea400 	andseq	sl, lr, r0, lsl #8
    6ab8:	001f0400 	andseq	r0, pc, r0, lsl #8
    6abc:	499c0100 	ldmibmi	ip, {r8}
    6ac0:	1a000004 	bne	6ad8 <__exidx_end+0x1d84>
    6ac4:	01007473 	tsteq	r0, r3, ror r4
    6ac8:	00c1130e 	sbceq	r1, r1, lr, lsl #6
    6acc:	242f0000 	strtcs	r0, [pc], #-0	; 6ad4 <__exidx_end+0x1d80>
    6ad0:	661b0000 	ldrvs	r0, [fp], -r0
    6ad4:	0100746d 	tsteq	r0, sp, ror #8
    6ad8:	0449230e 	strbeq	r2, [r9], #-782	; 0xfffffcf2
    6adc:	91020000 	mrsls	r0, (UNDEF: 2)
    6ae0:	c81d1c74 	ldmdagt	sp, {r2, r4, r5, r6, sl, fp, ip}
    6ae4:	0100001e 	tsteq	r0, lr, lsl r0
    6ae8:	00810613 	addeq	r0, r1, r3, lsl r6
    6aec:	244d0000 	strbcs	r0, [sp], #-0
    6af0:	611e0000 	tstvs	lr, r0
    6af4:	14010070 	strne	r0, [r1], #-112	; 0xffffff90
    6af8:	0000b50a 	andeq	fp, r0, sl, lsl #10
    6afc:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    6b00:	c8040e00 	stmdagt	r4, {r9, sl, fp}
    6b04:	00000001 	andeq	r0, r0, r1
    6b08:	00002474 	andeq	r2, r0, r4, ror r4
    6b0c:	1e410003 	cdpne	0, 4, cr0, cr1, cr3, {0}
    6b10:	01040000 	mrseq	r0, (UNDEF: 4)
    6b14:	00000181 	andeq	r0, r0, r1, lsl #3
    6b18:	001b200c 	andseq	r2, fp, ip
    6b1c:	00040600 	andeq	r0, r4, r0, lsl #12
    6b20:	000d8000 	andeq	r8, sp, r0
    6b24:	00000000 	andeq	r0, r0, r0
    6b28:	004c1b00 	subeq	r1, ip, r0, lsl #22
    6b2c:	252a0200 	strcs	r0, [sl, #-512]!	; 0xfffffe00
    6b30:	22060000 	andcs	r0, r6, #0
    6b34:	00003117 	andeq	r3, r0, r7, lsl r1
    6b38:	06010300 	streq	r0, [r1], -r0, lsl #6
    6b3c:	000003e5 	andeq	r0, r0, r5, ror #7
    6b40:	002b6c02 	eoreq	r6, fp, r2, lsl #24
    6b44:	18250600 	stmdane	r5!, {r9, sl}
    6b48:	00000044 	andeq	r0, r0, r4, asr #32
    6b4c:	46050203 	strmi	r0, [r5], -r3, lsl #4
    6b50:	03000004 	movweq	r0, #4
    6b54:	00b40504 	adcseq	r0, r4, r4, lsl #10
    6b58:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    6b5c:	0000af05 	andeq	sl, r0, r5, lsl #30
    6b60:	239b0200 	orrscs	r0, fp, #0, 4
    6b64:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    6b68:	00006518 	andeq	r6, r0, r8, lsl r5
    6b6c:	08010300 	stmdaeq	r1, {r8, r9}
    6b70:	000003e3 	andeq	r0, r0, r3, ror #7
    6b74:	00279102 	eoreq	r9, r7, r2, lsl #2
    6b78:	19310600 	ldmdbne	r1!, {r9, sl}
    6b7c:	00000078 	andeq	r0, r0, r8, ror r0
    6b80:	8a070203 	bhi	1c7394 <__ccfg+0x1a73ec>
    6b84:	02000002 	andeq	r0, r0, #2
    6b88:	00002333 	andeq	r2, r0, r3, lsr r3
    6b8c:	90193406 	andsls	r3, r9, r6, lsl #8
    6b90:	04000000 	streq	r0, [r0], #-0
    6b94:	0000007f 	andeq	r0, r0, pc, ror r0
    6b98:	7e070403 	cdpvc	4, 0, cr0, cr7, cr3, {0}
    6b9c:	05000000 	streq	r0, [r0, #-0]
    6ba0:	00000090 	muleq	r0, r0, r0
    6ba4:	79070803 	stmdbvc	r7, {r0, r1, fp}
    6ba8:	06000000 	streq	r0, [r0], -r0
    6bac:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    6bb0:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
    6bb4:	00008307 	andeq	r8, r0, r7, lsl #6
    6bb8:	1e240700 	cdpne	7, 2, cr0, cr4, cr0, {0}
    6bbc:	5e070000 	cdppl	0, 0, cr0, cr7, cr0, {0}
    6bc0:	00aa1701 	adceq	r1, sl, r1, lsl #14
    6bc4:	53020000 	movwpl	r0, #8192	; 0x2000
    6bc8:	08000020 	stmdaeq	r0, {r5}
    6bcc:	004b0e2e 	subeq	r0, fp, lr, lsr #28
    6bd0:	40020000 	andmi	r0, r2, r0
    6bd4:	08000016 	stmdaeq	r0, {r1, r2, r4}
    6bd8:	004b0e74 	subeq	r0, fp, r4, ror lr
    6bdc:	04080000 	streq	r0, [r8], #-0
    6be0:	f803a508 			; <UNDEFINED> instruction: 0xf803a508
    6be4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    6be8:	0000196a 	andeq	r1, r0, sl, ror #18
    6bec:	b10ca708 	tstlt	ip, r8, lsl #14
    6bf0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    6bf4:	00001cea 	andeq	r1, r0, sl, ror #25
    6bf8:	f813a808 			; <UNDEFINED> instruction: 0xf813a808
    6bfc:	00000000 	andeq	r0, r0, r0
    6c00:	0000650a 	andeq	r6, r0, sl, lsl #10
    6c04:	00010800 	andeq	r0, r1, r0, lsl #16
    6c08:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    6c0c:	00030000 	andeq	r0, r3, r0
    6c10:	a208080c 	andge	r0, r8, #12, 16	; 0xc0000
    6c14:	00012c09 	andeq	r2, r1, r9, lsl #24
    6c18:	16c40d00 	strbne	r0, [r4], r0, lsl #26
    6c1c:	a4080000 	strge	r0, [r8], #-0
    6c20:	0000a307 	andeq	sl, r0, r7, lsl #6
    6c24:	8e0d0000 	cdphi	0, 0, cr0, cr13, cr0, {0}
    6c28:	08000018 	stmdaeq	r0, {r3, r4}
    6c2c:	00d605a9 	sbcseq	r0, r6, r9, lsr #11
    6c30:	00040000 	andeq	r0, r4, r0
    6c34:	001a9602 	andseq	r9, sl, r2, lsl #12
    6c38:	03aa0800 			; <UNDEFINED> instruction: 0x03aa0800
    6c3c:	00000108 	andeq	r0, r0, r8, lsl #2
    6c40:	1202040e 	andne	r0, r2, #234881024	; 0xe000000
    6c44:	0900001a 	stmdbeq	r0, {r1, r3, r4}
    6c48:	00901916 	addseq	r1, r0, r6, lsl r9
    6c4c:	f0020000 			; <UNDEFINED> instruction: 0xf0020000
    6c50:	0a000015 	beq	6cac <__exidx_end+0x1f58>
    6c54:	00a30d0c 	adceq	r0, r3, ip, lsl #26
    6c58:	55020000 	strpl	r0, [r2, #-0]
    6c5c:	09000019 	stmdbeq	r0, {r0, r3, r4}
    6c60:	01461b23 	cmpeq	r6, r3, lsr #22
    6c64:	6f0f0000 	svcvs	0x000f0000
    6c68:	18000016 	stmdane	r0, {r1, r2, r4}
    6c6c:	b8083409 	stmdalt	r8, {r0, r3, sl, ip, sp}
    6c70:	0d000001 	stceq	0, cr0, [r0, #-4]
    6c74:	000020bf 	strheq	r2, [r0], -pc	; <UNPREDICTABLE>
    6c78:	b8133609 	ldmdalt	r3, {r0, r3, r9, sl, ip, sp}
    6c7c:	00000001 	andeq	r0, r0, r1
    6c80:	006b5f10 	rsbeq	r5, fp, r0, lsl pc
    6c84:	a3073709 	movwge	r3, #30473	; 0x7709
    6c88:	04000000 	streq	r0, [r0], #-0
    6c8c:	001d7b0d 	andseq	r7, sp, sp, lsl #22
    6c90:	0b370900 	bleq	dc9098 <__ccfg+0xda90f0>
    6c94:	000000a3 	andeq	r0, r0, r3, lsr #1
    6c98:	3d6f0d08 	stclcc	13, cr0, [pc, #-32]!	; 6c80 <__exidx_end+0x1f2c>
    6c9c:	37090000 	strcc	r0, [r9, -r0]
    6ca0:	0000a314 	andeq	sl, r0, r4, lsl r3
    6ca4:	420d0c00 	andmi	r0, sp, #0, 24
    6ca8:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    6cac:	00a31b37 	adceq	r1, r3, r7, lsr fp
    6cb0:	10100000 	andsne	r0, r0, r0
    6cb4:	0900785f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}
    6cb8:	01be0b38 			; <UNDEFINED> instruction: 0x01be0b38
    6cbc:	00140000 	andseq	r0, r4, r0
    6cc0:	015e0411 	cmpeq	lr, r1, lsl r4
    6cc4:	3a0a0000 	bcc	286ccc <__ccfg+0x266d24>
    6cc8:	ce000001 	cdpgt	0, 0, cr0, cr0, cr1, {0}
    6ccc:	0b000001 	bleq	6cd8 <__exidx_end+0x1f84>
    6cd0:	000000aa 	andeq	r0, r0, sl, lsr #1
    6cd4:	bc0f0000 	stclt	0, cr0, [pc], {-0}
    6cd8:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
    6cdc:	51083c09 	tstpl	r8, r9, lsl #24
    6ce0:	0d000002 	stceq	0, cr0, [r0, #-8]
    6ce4:	0000159a 	muleq	r0, sl, r5
    6ce8:	a3093e09 	movwge	r3, #40457	; 0x9e09
    6cec:	00000000 	andeq	r0, r0, r0
    6cf0:	0016eb0d 	andseq	lr, r6, sp, lsl #22
    6cf4:	093f0900 	ldmdbeq	pc!, {r8, fp}	; <UNPREDICTABLE>
    6cf8:	000000a3 	andeq	r0, r0, r3, lsr #1
    6cfc:	169e0d04 	ldrne	r0, [lr], r4, lsl #26
    6d00:	40090000 	andmi	r0, r9, r0
    6d04:	0000a309 	andeq	sl, r0, r9, lsl #6
    6d08:	010d0800 	tsteq	sp, r0, lsl #16
    6d0c:	09000019 	stmdbeq	r0, {r0, r3, r4}
    6d10:	00a30941 	adceq	r0, r3, r1, asr #18
    6d14:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    6d18:	00001b78 	andeq	r1, r0, r8, ror fp
    6d1c:	a3094209 	movwge	r4, #37385	; 0x9209
    6d20:	10000000 	andne	r0, r0, r0
    6d24:	001d040d 	andseq	r0, sp, sp, lsl #8
    6d28:	09430900 	stmdbeq	r3, {r8, fp}^
    6d2c:	000000a3 	andeq	r0, r0, r3, lsr #1
    6d30:	16770d14 			; <UNDEFINED> instruction: 0x16770d14
    6d34:	44090000 	strmi	r0, [r9], #-0
    6d38:	0000a309 	andeq	sl, r0, r9, lsl #6
    6d3c:	040d1800 	streq	r1, [sp], #-2048	; 0xfffff800
    6d40:	09000018 	stmdbeq	r0, {r3, r4}
    6d44:	00a30945 	adceq	r0, r3, r5, asr #18
    6d48:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    6d4c:	00001ac6 	andeq	r1, r0, r6, asr #21
    6d50:	a3094609 	movwge	r4, #38409	; 0x9609
    6d54:	20000000 	andcs	r0, r0, r0
    6d58:	15261200 	strne	r1, [r6, #-512]!	; 0xfffffe00
    6d5c:	01080000 	mrseq	r0, (UNDEF: 8)
    6d60:	96084f09 	strls	r4, [r8], -r9, lsl #30
    6d64:	0d000002 	stceq	0, cr0, [r0, #-8]
    6d68:	00002012 	andeq	r2, r0, r2, lsl r0
    6d6c:	960a5009 	strls	r5, [sl], -r9
    6d70:	00000002 	andeq	r0, r0, r2
    6d74:	001e4a0d 	andseq	r4, lr, sp, lsl #20
    6d78:	09510900 	ldmdbeq	r1, {r8, fp}^
    6d7c:	00000296 	muleq	r0, r6, r2
    6d80:	20341380 	eorscs	r1, r4, r0, lsl #7
    6d84:	53090000 	movwpl	r0, #36864	; 0x9000
    6d88:	00013a0a 	andeq	r3, r1, sl, lsl #20
    6d8c:	13010000 	movwne	r0, #4096	; 0x1000
    6d90:	000020a3 	andeq	r2, r0, r3, lsr #1
    6d94:	3a0a5609 	bcc	29c5c0 <__ccfg+0x27c618>
    6d98:	04000001 	streq	r0, [r0], #-1
    6d9c:	380a0001 	stmdacc	sl, {r0}
    6da0:	a6000001 	strge	r0, [r0], -r1
    6da4:	0b000002 	bleq	6db4 <__exidx_end+0x2060>
    6da8:	000000aa 	andeq	r0, r0, sl, lsr #1
    6dac:	e412001f 	ldr	r0, [r2], #-31	; 0xffffffe1
    6db0:	9000001b 	andls	r0, r0, fp, lsl r0
    6db4:	08620901 	stmdaeq	r2!, {r0, r8, fp}^
    6db8:	000002e9 	andeq	r0, r0, r9, ror #5
    6dbc:	0020bf0d 	eoreq	fp, r0, sp, lsl #30
    6dc0:	12630900 	rsbne	r0, r3, #0, 18
    6dc4:	000002e9 	andeq	r0, r0, r9, ror #5
    6dc8:	18130d00 	ldmdane	r3, {r8, sl, fp}
    6dcc:	64090000 	strvs	r0, [r9], #-0
    6dd0:	0000a306 	andeq	sl, r0, r6, lsl #6
    6dd4:	510d0400 	tstpl	sp, r0, lsl #8
    6dd8:	09000016 	stmdbeq	r0, {r1, r2, r4}
    6ddc:	02ef0966 	rsceq	r0, pc, #1671168	; 0x198000
    6de0:	0d080000 	stceq	0, cr0, [r8, #-0]
    6de4:	00001526 	andeq	r1, r0, r6, lsr #10
    6de8:	511e6709 	tstpl	lr, r9, lsl #14
    6dec:	88000002 	stmdahi	r0, {r1}
    6df0:	a6041100 	strge	r1, [r4], -r0, lsl #2
    6df4:	0a000002 	beq	6e04 <__exidx_end+0x20b0>
    6df8:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    6dfc:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    6e00:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    6e04:	11001f00 	tstne	r0, r0, lsl #30
    6e08:	00030504 	andeq	r0, r3, r4, lsl #10
    6e0c:	0f011400 	svceq	0x00011400
    6e10:	00001f19 	andeq	r1, r0, r9, lsl pc
    6e14:	087a0908 	ldmdaeq	sl!, {r3, r8, fp}^
    6e18:	0000032f 	andeq	r0, r0, pc, lsr #6
    6e1c:	0019fc0d 	andseq	pc, r9, sp, lsl #24
    6e20:	117b0900 	cmnne	fp, r0, lsl #18
    6e24:	0000032f 	andeq	r0, r0, pc, lsr #6
    6e28:	13da0d00 	bicsne	r0, sl, #0, 26
    6e2c:	7c090000 	stcvc	0, cr0, [r9], {-0}
    6e30:	0000a306 	andeq	sl, r0, r6, lsl #6
    6e34:	11000400 	tstne	r0, r0, lsl #8
    6e38:	00006504 	andeq	r6, r0, r4, lsl #10
    6e3c:	173a0f00 	ldrne	r0, [sl, -r0, lsl #30]!
    6e40:	09680000 	stmdbeq	r8!, {}^	; <UNPREDICTABLE>
    6e44:	047808ba 	ldrbteq	r0, [r8], #-2234	; 0xfffff746
    6e48:	5f100000 	svcpl	0x00100000
    6e4c:	bb090070 	bllt	247014 <__ccfg+0x22706c>
    6e50:	00032f12 	andeq	r2, r3, r2, lsl pc
    6e54:	5f100000 	svcpl	0x00100000
    6e58:	bc090072 	stclt	0, cr0, [r9], {114}	; 0x72
    6e5c:	0000a307 	andeq	sl, r0, r7, lsl #6
    6e60:	5f100400 	svcpl	0x00100400
    6e64:	bd090077 	stclt	0, cr0, [r9, #-476]	; 0xfffffe24
    6e68:	0000a307 	andeq	sl, r0, r7, lsl #6
    6e6c:	bd0d0800 	stclt	8, cr0, [sp, #-0]
    6e70:	09000015 	stmdbeq	r0, {r0, r2, r4}
    6e74:	004409be 	strheq	r0, [r4], #-158	; 0xffffff62
    6e78:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    6e7c:	00001a3f 	andeq	r1, r0, pc, lsr sl
    6e80:	4409bf09 	strmi	fp, [r9], #-3849	; 0xfffff0f7
    6e84:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    6e88:	66625f10 	uqadd16vs	r5, r2, r0
    6e8c:	11c00900 	bicne	r0, r0, r0, lsl #18
    6e90:	00000307 	andeq	r0, r0, r7, lsl #6
    6e94:	15b40d10 	ldrne	r0, [r4, #3344]!	; 0xd10
    6e98:	c1090000 	mrsgt	r0, (UNDEF: 9)
    6e9c:	0000a307 	andeq	sl, r0, r7, lsl #6
    6ea0:	560d1800 	strpl	r1, [sp], -r0, lsl #16
    6ea4:	09000016 	stmdbeq	r0, {r1, r2, r4}
    6ea8:	01380ac8 	teqeq	r8, r8, asr #21
    6eac:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    6eb0:	0000136a 	andeq	r1, r0, sl, ror #6
    6eb4:	fd1dca09 	ldc2	10, cr12, [sp, #-36]	; 0xffffffdc	; <UNPREDICTABLE>
    6eb8:	20000005 	andcs	r0, r0, r5
    6ebc:	0013310d 	andseq	r3, r3, sp, lsl #2
    6ec0:	1dcc0900 	vstrne.16	s1, [ip]	; <UNPREDICTABLE>
    6ec4:	00000628 	andeq	r0, r0, r8, lsr #12
    6ec8:	20d00d24 	sbcscs	r0, r0, r4, lsr #26
    6ecc:	cf090000 	svcgt	0x00090000
    6ed0:	00064d0d 	andeq	r4, r6, sp, lsl #26
    6ed4:	1f0d2800 	svcne	0x000d2800
    6ed8:	09000013 	stmdbeq	r0, {r0, r1, r4}
    6edc:	066809d0 			; <UNDEFINED> instruction: 0x066809d0
    6ee0:	102c0000 	eorne	r0, ip, r0
    6ee4:	0062755f 	rsbeq	r7, r2, pc, asr r5
    6ee8:	0711d309 	ldreq	sp, [r1, -r9, lsl #6]
    6eec:	30000003 	andcc	r0, r0, r3
    6ef0:	70755f10 	rsbsvc	r5, r5, r0, lsl pc
    6ef4:	12d40900 	sbcsne	r0, r4, #0, 18
    6ef8:	0000032f 	andeq	r0, r0, pc, lsr #6
    6efc:	755f1038 	ldrbvc	r1, [pc, #-56]	; 6ecc <__exidx_end+0x2178>
    6f00:	d5090072 	strle	r0, [r9, #-114]	; 0xffffff8e
    6f04:	0000a307 	andeq	sl, r0, r7, lsl #6
    6f08:	e70d3c00 	str	r3, [sp, -r0, lsl #24]
    6f0c:	09000020 	stmdbeq	r0, {r5}
    6f10:	066e11d8 			; <UNDEFINED> instruction: 0x066e11d8
    6f14:	0d400000 	stcleq	0, cr0, [r0, #-0]
    6f18:	0000205a 	andeq	r2, r0, sl, asr r0
    6f1c:	7e11d909 	vnmlsvc.f16	s26, s2, s18	; <UNPREDICTABLE>
    6f20:	43000006 	movwmi	r0, #6
    6f24:	626c5f10 	rsbvs	r5, ip, #16, 30	; 0x40
    6f28:	11dc0900 	bicsne	r0, ip, r0, lsl #18
    6f2c:	00000307 	andeq	r0, r0, r7, lsl #6
    6f30:	1db30d44 	ldcne	13, cr0, [r3, #272]!	; 0x110
    6f34:	df090000 	svcle	0x00090000
    6f38:	0000a307 	andeq	sl, r0, r7, lsl #6
    6f3c:	830d4c00 	movwhi	r4, #56320	; 0xdc00
    6f40:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    6f44:	00be0ae0 	adcseq	r0, lr, r0, ror #21
    6f48:	0d500000 	ldcleq	0, cr0, [r0, #-0]
    6f4c:	00000f87 	andeq	r0, r0, r7, lsl #31
    6f50:	9712e309 	ldrls	lr, [r2, -r9, lsl #6]
    6f54:	54000004 	strpl	r0, [r0], #-4
    6f58:	001dd50d 	andseq	sp, sp, sp, lsl #10
    6f5c:	0ce70900 			; <UNDEFINED> instruction: 0x0ce70900
    6f60:	00000152 	andeq	r0, r0, r2, asr r1
    6f64:	1bec0d58 	blne	ffb0a4cc <_estack+0xdfb054cc>
    6f68:	e9090000 	stmdb	r9, {}	; <UNPREDICTABLE>
    6f6c:	00012c0e 	andeq	r2, r1, lr, lsl #24
    6f70:	9b0d5c00 	blls	35df78 <__ccfg+0x33dfd0>
    6f74:	09000020 	stmdbeq	r0, {r5}
    6f78:	00a309ea 	adceq	r0, r3, sl, ror #19
    6f7c:	00640000 	rsbeq	r0, r4, r0
    6f80:	00a30115 	adceq	r0, r3, r5, lsl r1
    6f84:	04970000 	ldreq	r0, [r7], #0
    6f88:	97160000 	ldrls	r0, [r6, -r0]
    6f8c:	16000004 	strne	r0, [r0], -r4
    6f90:	00000138 	andeq	r0, r0, r8, lsr r1
    6f94:	0005eb16 	andeq	lr, r5, r6, lsl fp
    6f98:	00a31600 	adceq	r1, r3, r0, lsl #12
    6f9c:	11000000 	mrsne	r0, (UNDEF: 0)
    6fa0:	0004a204 	andeq	sl, r4, r4, lsl #4
    6fa4:	04970400 	ldreq	r0, [r7], #1024	; 0x400
    6fa8:	21170000 	tstcs	r7, r0
    6fac:	28000020 	stmdacs	r0, {r5}
    6fb0:	02650904 	rsbeq	r0, r5, #4, 18	; 0x10000
    6fb4:	0005eb08 	andeq	lr, r5, r8, lsl #22
    6fb8:	1adc1800 	bne	ff70cfc0 <_estack+0xdf707fc0>
    6fbc:	67090000 	strvs	r0, [r9, -r0]
    6fc0:	00a30702 	adceq	r0, r3, r2, lsl #14
    6fc4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6fc8:	000019d9 	ldrdeq	r1, [r0], -r9
    6fcc:	0b026c09 	bleq	a1ff8 <__ccfg+0x82050>
    6fd0:	000006da 	ldrdeq	r0, [r0], -sl
    6fd4:	162e1804 	strtne	r1, [lr], -r4, lsl #16
    6fd8:	6c090000 	stcvs	0, cr0, [r9], {-0}
    6fdc:	06da1402 	ldrbeq	r1, [sl], r2, lsl #8
    6fe0:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    6fe4:	000020d6 	ldrdeq	r2, [r0], -r6
    6fe8:	1e026c09 	cdpne	12, 0, cr6, cr2, cr9, {0}
    6fec:	000006da 	ldrdeq	r0, [r0], -sl
    6ff0:	180e180c 	stmdane	lr, {r2, r3, fp, ip}
    6ff4:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
    6ff8:	00a30802 	adceq	r0, r3, r2, lsl #16
    6ffc:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
    7000:	000017ae 	andeq	r1, r0, lr, lsr #15
    7004:	08026f09 	stmdaeq	r2, {r0, r3, r8, r9, sl, fp, sp, lr}
    7008:	000008da 	ldrdeq	r0, [r0], -sl
    700c:	207a1814 	rsbscs	r1, sl, r4, lsl r8
    7010:	72090000 	andvc	r0, r9, #0
    7014:	00a30702 	adceq	r0, r3, r2, lsl #14
    7018:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
    701c:	00003c1b 	andeq	r3, r0, fp, lsl ip
    7020:	16027309 	strne	r7, [r2], -r9, lsl #6
    7024:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    7028:	19a11834 	stmibne	r1!, {r2, r4, r5, fp, ip}
    702c:	75090000 	strvc	r0, [r9, #-0]
    7030:	00a30702 	adceq	r0, r3, r2, lsl #14
    7034:	18380000 	ldmdane	r8!, {}	; <UNPREDICTABLE>
    7038:	00001a6c 	andeq	r1, r0, ip, ror #20
    703c:	0a027709 	beq	a4c68 <__ccfg+0x84cc0>
    7040:	00000902 	andeq	r0, r0, r2, lsl #18
    7044:	168c183c 			; <UNDEFINED> instruction: 0x168c183c
    7048:	7a090000 	bvc	247050 <__ccfg+0x2270a8>
    704c:	01b81302 			; <UNDEFINED> instruction: 0x01b81302
    7050:	18400000 	stmdane	r0, {}^	; <UNPREDICTABLE>
    7054:	00001717 	andeq	r1, r0, r7, lsl r7
    7058:	07027b09 	streq	r7, [r2, -r9, lsl #22]
    705c:	000000a3 	andeq	r0, r0, r3, lsr #1
    7060:	18a21844 	stmiane	r2!, {r2, r6, fp, ip}
    7064:	7c090000 	stcvc	0, cr0, [r9], {-0}
    7068:	01b81302 			; <UNDEFINED> instruction: 0x01b81302
    706c:	18480000 	stmdane	r8, {}^	; <UNPREDICTABLE>
    7070:	00001a02 	andeq	r1, r0, r2, lsl #20
    7074:	14027d09 	strne	r7, [r2], #-3337	; 0xfffff2f7
    7078:	00000908 	andeq	r0, r0, r8, lsl #18
    707c:	1d73184c 	ldclne	8, cr1, [r3, #-304]!	; 0xfffffed0
    7080:	80090000 	andhi	r0, r9, r0
    7084:	00a30702 	adceq	r0, r3, r2, lsl #14
    7088:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    708c:	00001ea8 	andeq	r1, r0, r8, lsr #29
    7090:	09028109 	stmdbeq	r2, {r0, r3, r8, pc}
    7094:	000005eb 	andeq	r0, r0, fp, ror #11
    7098:	04c41854 	strbeq	r1, [r4], #2132	; 0x854
    709c:	a4090000 	strge	r0, [r9], #-0
    70a0:	08b50702 	ldmeq	r5!, {r1, r8, r9, sl}
    70a4:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
    70a8:	00001be4 	andeq	r1, r0, r4, ror #23
    70ac:	1302a809 	movwne	sl, #10249	; 0x2809
    70b0:	000002e9 	andeq	r0, r0, r9, ror #5
    70b4:	24190148 	ldrcs	r0, [r9], #-328	; 0xfffffeb8
    70b8:	09000019 	stmdbeq	r0, {r0, r3, r4}
    70bc:	a61202a9 	ldrge	r0, [r2], -r9, lsr #5
    70c0:	4c000002 	stcmi	0, cr0, [r0], {2}
    70c4:	190b1901 	stmdbne	fp, {r0, r8, fp, ip}
    70c8:	ad090000 	stcge	0, cr0, [r9, #-0]
    70cc:	091a0c02 	ldmdbeq	sl, {r1, sl, fp}
    70d0:	02dc0000 	sbcseq	r0, ip, #0
    70d4:	001fc319 	andseq	ip, pc, r9, lsl r3	; <UNPREDICTABLE>
    70d8:	02b20900 	adcseq	r0, r2, #0, 18
    70dc:	00069b10 	andeq	r9, r6, r0, lsl fp
    70e0:	1902e000 	stmdbne	r2, {sp, lr, pc}
    70e4:	00001cab 	andeq	r1, r0, fp, lsr #25
    70e8:	0a02b409 	beq	b4114 <__ccfg+0x9416c>
    70ec:	00000926 	andeq	r0, r0, r6, lsr #18
    70f0:	110002ec 	smlattne	r0, ip, r2, r0
    70f4:	0005f104 	andeq	pc, r5, r4, lsl #2
    70f8:	08010300 	stmdaeq	r1, {r8, r9}
    70fc:	000003ec 	andeq	r0, r0, ip, ror #7
    7100:	0005f104 	andeq	pc, r5, r4, lsl #2
    7104:	78041100 	stmdavc	r4, {r8, ip}
    7108:	15000004 	strne	r0, [r0, #-4]
    710c:	0000a301 	andeq	sl, r0, r1, lsl #6
    7110:	00062200 	andeq	r2, r6, r0, lsl #4
    7114:	04971600 	ldreq	r1, [r7], #1536	; 0x600
    7118:	38160000 	ldmdacc	r6, {}	; <UNPREDICTABLE>
    711c:	16000001 	strne	r0, [r0], -r1
    7120:	00000622 	andeq	r0, r0, r2, lsr #12
    7124:	0000a316 	andeq	sl, r0, r6, lsl r3
    7128:	04110000 	ldreq	r0, [r1], #-0
    712c:	000005f8 	strdeq	r0, [r0], -r8
    7130:	06030411 			; <UNDEFINED> instruction: 0x06030411
    7134:	01150000 	tsteq	r5, r0
    7138:	000000ca 	andeq	r0, r0, sl, asr #1
    713c:	0000064d 	andeq	r0, r0, sp, asr #12
    7140:	00049716 	andeq	r9, r4, r6, lsl r7
    7144:	01381600 	teqeq	r8, r0, lsl #12
    7148:	ca160000 	bgt	587150 <__ccfg+0x5671a8>
    714c:	16000000 	strne	r0, [r0], -r0
    7150:	000000a3 	andeq	r0, r0, r3, lsr #1
    7154:	2e041100 	adfcss	f1, f4, f0
    7158:	15000006 	strne	r0, [r0, #-6]
    715c:	0000a301 	andeq	sl, r0, r1, lsl #6
    7160:	00066800 	andeq	r6, r6, r0, lsl #16
    7164:	04971600 	ldreq	r1, [r7], #1536	; 0x600
    7168:	38160000 	ldmdacc	r6, {}	; <UNPREDICTABLE>
    716c:	00000001 	andeq	r0, r0, r1
    7170:	06530411 			; <UNDEFINED> instruction: 0x06530411
    7174:	650a0000 	strvs	r0, [sl, #-0]
    7178:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    717c:	0b000006 	bleq	719c <__exidx_end+0x2448>
    7180:	000000aa 	andeq	r0, r0, sl, lsr #1
    7184:	650a0002 	strvs	r0, [sl, #-2]
    7188:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    718c:	0b000006 	bleq	71ac <__exidx_end+0x2458>
    7190:	000000aa 	andeq	r0, r0, sl, lsr #1
    7194:	77070000 	strvc	r0, [r7, -r0]
    7198:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    719c:	351a0124 	ldrcc	r0, [sl, #-292]	; 0xfffffedc
    71a0:	1a000003 	bne	71b4 <__exidx_end+0x2460>
    71a4:	00001f50 	andeq	r1, r0, r0, asr pc
    71a8:	0128090c 			; <UNDEFINED> instruction: 0x0128090c
    71ac:	0006d408 	andeq	sp, r6, r8, lsl #8
    71b0:	20bf1800 	adcscs	r1, pc, r0, lsl #16
    71b4:	2a090000 	bcs	2471bc <__ccfg+0x227214>
    71b8:	06d41101 	ldrbeq	r1, [r4], r1, lsl #2
    71bc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    71c0:	00001e1d 	andeq	r1, r0, sp, lsl lr
    71c4:	07012b09 	streq	r2, [r1, -r9, lsl #22]
    71c8:	000000a3 	andeq	r0, r0, r3, lsr #1
    71cc:	19701804 	ldmdbne	r0!, {r2, fp, ip}^
    71d0:	2c090000 	stccs	0, cr0, [r9], {-0}
    71d4:	06da0b01 	ldrbeq	r0, [sl], r1, lsl #22
    71d8:	00080000 	andeq	r0, r8, r0
    71dc:	069b0411 			; <UNDEFINED> instruction: 0x069b0411
    71e0:	04110000 	ldreq	r0, [r1], #-0
    71e4:	0000068e 	andeq	r0, r0, lr, lsl #13
    71e8:	0017031a 	andseq	r0, r7, sl, lsl r3
    71ec:	44090e00 	strmi	r0, [r9], #-3584	; 0xfffff200
    71f0:	07190801 	ldreq	r0, [r9, -r1, lsl #16]
    71f4:	8d180000 	ldchi	0, cr0, [r8, #-0]
    71f8:	0900000c 	stmdbeq	r0, {r2, r3}
    71fc:	19120145 	ldmdbne	r2, {r0, r2, r6, r8}
    7200:	00000007 	andeq	r0, r0, r7
    7204:	001a0c18 	andseq	r0, sl, r8, lsl ip
    7208:	01460900 	cmpeq	r6, r0, lsl #18
    720c:	00071912 	andeq	r1, r7, r2, lsl r9
    7210:	32180600 	andscc	r0, r8, #0, 12
    7214:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    7218:	78120147 	ldmdavc	r2, {r0, r1, r2, r6, r8}
    721c:	0c000000 	stceq	0, cr0, [r0], {-0}
    7220:	00780a00 	rsbseq	r0, r8, r0, lsl #20
    7224:	07290000 	streq	r0, [r9, -r0]!
    7228:	aa0b0000 	bge	2c7230 <__ccfg+0x2a7288>
    722c:	02000000 	andeq	r0, r0, #0
    7230:	09d01b00 	ldmibeq	r0, {r8, r9, fp, ip}^
    7234:	3e070285 	cdpcc	2, 0, cr0, cr7, cr5, {4}
    7238:	18000008 	stmdane	r0, {r3}
    723c:	00002060 	andeq	r2, r0, r0, rrx
    7240:	18028709 	stmdane	r2, {r0, r3, r8, r9, sl, pc}
    7244:	000000aa 	andeq	r0, r0, sl, lsr #1
    7248:	1fd11800 	svcne	0x00d11800
    724c:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
    7250:	05eb1202 	strbeq	r1, [fp, #514]!	; 0x202
    7254:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    7258:	0000172d 	andeq	r1, r0, sp, lsr #14
    725c:	10028909 	andne	r8, r2, r9, lsl #18
    7260:	0000083e 	andeq	r0, r0, lr, lsr r8
    7264:	1d2a1808 	stcne	8, cr1, [sl, #-32]!	; 0xffffffe0
    7268:	8a090000 	bhi	247270 <__ccfg+0x2272c8>
    726c:	01ce1702 	biceq	r1, lr, r2, lsl #14
    7270:	18240000 	stmdane	r4!, {}	; <UNPREDICTABLE>
    7274:	000019e0 	andeq	r1, r0, r0, ror #19
    7278:	0f028b09 	svceq	0x00028b09
    727c:	000000a3 	andeq	r0, r0, r3, lsr #1
    7280:	20ba1848 	adcscs	r1, sl, r8, asr #16
    7284:	8c090000 	stchi	0, cr0, [r9], {-0}
    7288:	009c2c02 	addseq	r2, ip, r2, lsl #24
    728c:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    7290:	0000156f 	andeq	r1, r0, pc, ror #10
    7294:	1a028d09 	bne	aa6c0 <__ccfg+0x8a718>
    7298:	000006e0 	andeq	r0, r0, r0, ror #13
    729c:	18d51858 	ldmne	r5, {r3, r4, r6, fp, ip}^
    72a0:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    72a4:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    72a8:	18680000 	stmdane	r8!, {}^	; <UNPREDICTABLE>
    72ac:	00001fde 	ldrdeq	r1, [r0], -lr
    72b0:	16028f09 	strne	r8, [r2], -r9, lsl #30
    72b4:	0000012c 	andeq	r0, r0, ip, lsr #2
    72b8:	15411870 	strbne	r1, [r1, #-2160]	; 0xfffff790
    72bc:	90090000 	andls	r0, r9, r0
    72c0:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    72c4:	18780000 	ldmdane	r8!, {}^	; <UNPREDICTABLE>
    72c8:	00001d83 	andeq	r1, r0, r3, lsl #27
    72cc:	10029109 	andne	r9, r2, r9, lsl #2
    72d0:	0000084e 	andeq	r0, r0, lr, asr #16
    72d4:	17211880 	strne	r1, [r1, -r0, lsl #17]!
    72d8:	92090000 	andls	r0, r9, #0
    72dc:	085e1002 	ldmdaeq	lr, {r1, ip}^
    72e0:	18880000 	stmne	r8, {}	; <UNPREDICTABLE>
    72e4:	00001eb8 			; <UNDEFINED> instruction: 0x00001eb8
    72e8:	0f029309 	svceq	0x00029309
    72ec:	000000a3 	andeq	r0, r0, r3, lsr #1
    72f0:	161518a0 	ldrne	r1, [r5], -r0, lsr #17
    72f4:	94090000 	strls	r0, [r9], #-0
    72f8:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    72fc:	18a40000 	stmiane	r4!, {}	; <UNPREDICTABLE>
    7300:	00001915 	andeq	r1, r0, r5, lsl r9
    7304:	16029509 	strne	r9, [r2], -r9, lsl #10
    7308:	0000012c 	andeq	r0, r0, ip, lsr #2
    730c:	184718ac 	stmdane	r7, {r2, r3, r5, r7, fp, ip}^
    7310:	96090000 	strls	r0, [r9], -r0
    7314:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    7318:	18b40000 	ldmne	r4!, {}	; <UNPREDICTABLE>
    731c:	00001a27 	andeq	r1, r0, r7, lsr #20
    7320:	16029709 	strne	r9, [r2], -r9, lsl #14
    7324:	0000012c 	andeq	r0, r0, ip, lsr #2
    7328:	18c418bc 	stmiane	r4, {r2, r3, r4, r5, r7, fp, ip}^
    732c:	98090000 	stmdals	r9, {}	; <UNPREDICTABLE>
    7330:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    7334:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
    7338:	00001ada 	ldrdeq	r1, [r0], -sl
    733c:	08029909 	stmdaeq	r2, {r0, r3, r8, fp, ip, pc}
    7340:	000000a3 	andeq	r0, r0, r3, lsr #1
    7344:	f10a00cc 	cpsie	if,#12
    7348:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
    734c:	0b000008 	bleq	7374 <__exidx_end+0x2620>
    7350:	000000aa 	andeq	r0, r0, sl, lsr #1
    7354:	f10a0019 	cpsie	,#25
    7358:	5e000005 	cdppl	0, 0, cr0, cr0, cr5, {0}
    735c:	0b000008 	bleq	7384 <__exidx_end+0x2630>
    7360:	000000aa 	andeq	r0, r0, sl, lsr #1
    7364:	f10a0007 	cpsie	,#7
    7368:	6e000005 	cdpvs	0, 0, cr0, cr0, cr5, {0}
    736c:	0b000008 	bleq	7394 <__exidx_end+0x2640>
    7370:	000000aa 	andeq	r0, r0, sl, lsr #1
    7374:	f01b0017 			; <UNDEFINED> instruction: 0xf01b0017
    7378:	07029e09 	streq	r9, [r2, -r9, lsl #28]
    737c:	00000895 	muleq	r0, r5, r8
    7380:	0016f418 	andseq	pc, r6, r8, lsl r4	; <UNPREDICTABLE>
    7384:	02a10900 	adceq	r0, r1, #0, 18
    7388:	0008951b 	andeq	r9, r8, fp, lsl r5
    738c:	de180000 	cdple	0, 1, cr0, cr8, cr0, {0}
    7390:	09000020 	stmdbeq	r0, {r5}
    7394:	a51802a2 	ldrge	r0, [r8, #-674]	; 0xfffffd5e
    7398:	78000008 	stmdavc	r0, {r3}
    739c:	032f0a00 			; <UNDEFINED> instruction: 0x032f0a00
    73a0:	08a50000 	stmiaeq	r5!, {}	; <UNPREDICTABLE>
    73a4:	aa0b0000 	bge	2c73ac <__ccfg+0x2a7404>
    73a8:	1d000000 	stcne	0, cr0, [r0, #-0]
    73ac:	00aa0a00 	adceq	r0, sl, r0, lsl #20
    73b0:	08b50000 	ldmeq	r5!, {}	; <UNPREDICTABLE>
    73b4:	aa0b0000 	bge	2c73bc <__ccfg+0x2a7414>
    73b8:	1d000000 	stcne	0, cr0, [r0, #-0]
    73bc:	09f01c00 	ldmibeq	r0!, {sl, fp, ip}^
    73c0:	da030283 	ble	c7dd4 <__ccfg+0xa7e2c>
    73c4:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    73c8:	00002021 	andeq	r2, r0, r1, lsr #32
    73cc:	0b029a09 	bleq	adbf8 <__ccfg+0x8dc50>
    73d0:	00000729 	andeq	r0, r0, r9, lsr #14
    73d4:	001d451d 	andseq	r4, sp, sp, lsl r5
    73d8:	02a30900 	adceq	r0, r3, #0, 18
    73dc:	00086e0b 	andeq	r6, r8, fp, lsl #28
    73e0:	f10a0000 	cpsie	,#0
    73e4:	ea000005 	b	7400 <__exidx_end+0x26ac>
    73e8:	0b000008 	bleq	7410 <__exidx_end+0x26bc>
    73ec:	000000aa 	andeq	r0, r0, sl, lsr #1
    73f0:	c51e0018 	ldrgt	r0, [lr, #-24]	; 0xffffffe8
    73f4:	01000020 	tsteq	r0, r0, lsr #32
    73f8:	08ea0411 	stmiaeq	sl!, {r0, r4, sl}^
    73fc:	011f0000 	tsteq	pc, r0
    7400:	00000902 	andeq	r0, r0, r2, lsl #18
    7404:	00049716 	andeq	r9, r4, r6, lsl r7
    7408:	04110000 	ldreq	r0, [r1], #-0
    740c:	000008f6 	strdeq	r0, [r0], -r6
    7410:	01b80411 			; <UNDEFINED> instruction: 0x01b80411
    7414:	011f0000 	tsteq	pc, r0
    7418:	0000091a 	andeq	r0, r0, sl, lsl r9
    741c:	0000a316 	andeq	sl, r0, r6, lsl r3
    7420:	04110000 	ldreq	r0, [r1], #-0
    7424:	00000920 	andeq	r0, r0, r0, lsr #18
    7428:	090e0411 	stmdbeq	lr, {r0, r4, sl}
    742c:	8e0a0000 	cdphi	0, 0, cr0, cr10, cr0, {0}
    7430:	36000006 	strcc	r0, [r0], -r6
    7434:	0b000009 	bleq	7460 <__exidx_end+0x270c>
    7438:	000000aa 	andeq	r0, r0, sl, lsr #1
    743c:	f8200002 			; <UNDEFINED> instruction: 0xf8200002
    7440:	0900001c 	stmdbeq	r0, {r2, r3, r4}
    7444:	97170333 			; <UNDEFINED> instruction: 0x97170333
    7448:	01000004 	tsteq	r0, r4
    744c:	1cf12001 	ldclne	0, cr2, [r1], #4
    7450:	34090000 	strcc	r0, [r9], #-0
    7454:	049d1d03 	ldreq	r1, [sp], #3331	; 0xd03
    7458:	01010000 	mrseq	r0, (UNDEF: 1)
    745c:	001d2202 	andseq	r2, sp, r2, lsl #4
    7460:	123b0b00 	eorsne	r0, fp, #0, 22
    7464:	0000007f 	andeq	r0, r0, pc, ror r0
    7468:	400b080c 	andmi	r0, fp, ip, lsl #16
    746c:	00098409 	andeq	r8, r9, r9, lsl #8
    7470:	16230d00 	strtne	r0, [r3], -r0, lsl #26
    7474:	410b0000 	mrsmi	r0, (UNDEF: 11)
    7478:	0009840d 	andeq	r8, r9, sp, lsl #8
    747c:	b40d0000 	strlt	r0, [sp], #-0
    7480:	0b000019 	bleq	74ec <__exidx_end+0x2798>
    7484:	09840d42 	stmibeq	r4, {r1, r6, r8, sl, fp}
    7488:	00040000 	andeq	r0, r4, r0
    748c:	00590411 	subseq	r0, r9, r1, lsl r4
    7490:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
    7494:	0b000020 	bleq	751c <__exidx_end+0x27c8>
    7498:	09600343 	stmdbeq	r0!, {r0, r1, r6, r8, r9}^
    749c:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    74a0:	0c00001a 	stceq	0, cr0, [r0], {26}
    74a4:	09a22b3c 	stmibeq	r2!, {r2, r3, r4, r5, r8, r9, fp, sp}
    74a8:	c70f0000 	strgt	r0, [pc, -r0]
    74ac:	1000001d 	andne	r0, r0, sp, lsl r0
    74b0:	fe156f0c 	cdp2	15, 1, cr6, cr5, cr12, {0}
    74b4:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
    74b8:	00001501 	andeq	r1, r0, r1, lsl #10
    74bc:	6c0d700c 	stcvs	0, cr7, [sp], {12}
    74c0:	00000000 	andeq	r0, r0, r0
    74c4:	0019760d 	andseq	r7, r9, sp, lsl #12
    74c8:	0d710c00 	ldcleq	12, cr0, [r1, #-0]
    74cc:	0000006c 	andeq	r0, r0, ip, rrx
    74d0:	1a5c0d02 	bne	170a8e0 <__ccfg+0x16ea938>
    74d4:	740c0000 	strvc	r0, [ip], #-0
    74d8:	000bc013 	andeq	ip, fp, r3, lsl r0
    74dc:	940d0400 	strls	r0, [sp], #-1024	; 0xfffffc00
    74e0:	0c000016 	stceq	0, cr0, [r0], {22}
    74e4:	09540c75 	ldmdbeq	r4, {r0, r2, r4, r5, r6, sl, fp}^
    74e8:	0d080000 	stceq	0, cr0, [r8, #-0]
    74ec:	00001aa1 	andeq	r1, r0, r1, lsr #21
    74f0:	4c067d0c 	stcmi	13, cr7, [r6], {12}
    74f4:	0c00000b 	stceq	0, cr0, [r0], {11}
    74f8:	0019820d 	andseq	r8, r9, sp, lsl #4
    74fc:	06810c00 	streq	r0, [r1], r0, lsl #24
    7500:	00000b96 	muleq	r0, r6, fp
    7504:	6202000d 	andvs	r0, r2, #13
    7508:	0c000017 	stceq	0, cr0, [r0], {23}
    750c:	0a0a2a3f 	beq	291e10 <__ccfg+0x271e68>
    7510:	550f0000 	strpl	r0, [pc, #-0]	; 7518 <__exidx_end+0x27c4>
    7514:	18000017 	stmdane	r0, {r0, r1, r2, r4}
    7518:	c115e00c 	tstgt	r5, ip
    751c:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
    7520:	00001501 	andeq	r1, r0, r1, lsl #10
    7524:	6c0de10c 	stfvsd	f6, [sp], {12}
    7528:	00000000 	andeq	r0, r0, r0
    752c:	0019760d 	andseq	r7, r9, sp, lsl #12
    7530:	0de20c00 	stcleq	12, cr0, [r2]
    7534:	0000006c 	andeq	r0, r0, ip, rrx
    7538:	1a5c0d02 	bne	170a948 <__ccfg+0x16ea9a0>
    753c:	e50c0000 	str	r0, [ip, #-0]
    7540:	000bc013 	andeq	ip, fp, r3, lsl r0
    7544:	940d0400 	strls	r0, [sp], #-1024	; 0xfffffc00
    7548:	0c000016 	stceq	0, cr0, [r0], {22}
    754c:	09540ce6 	ldmdbeq	r4, {r1, r2, r5, r6, r7, sl, fp}^
    7550:	0d080000 	stceq	0, cr0, [r8, #-0]
    7554:	00001aa1 	andeq	r1, r0, r1, lsr #21
    7558:	cc06ee0c 	stcgt	14, cr14, [r6], {12}
    755c:	0c00000b 	stceq	0, cr0, [r0], {11}
    7560:	0019820d 	andseq	r8, r9, sp, lsl #4
    7564:	06f20c00 	ldrbteq	r0, [r2], r0, lsl #24
    7568:	00000c16 	andeq	r0, r0, r6, lsl ip
    756c:	1f0f0d0d 	svcne	0x000f0d0d
    7570:	f30c0000 	vhadd.u8	d0, d12, d0
    7574:	00006c0d 	andeq	r6, r0, sp, lsl #24
    7578:	b10d0e00 	tstlt	sp, r0, lsl #28
    757c:	0c00001b 	stceq	0, cr0, [r0], {27}
    7580:	006c0df4 	strdeq	r0, [ip], #-212	; 0xffffff2c	; <UNPREDICTABLE>
    7584:	0d100000 	ldceq	0, cr0, [r0, #-0]
    7588:	000017a4 	andeq	r1, r0, r4, lsr #15
    758c:	4006fa0c 	andmi	pc, r6, ip, lsl #20
    7590:	1200000c 	andne	r0, r0, #12
    7594:	001a360d 	andseq	r3, sl, sp, lsl #12
    7598:	0cfb0c00 	ldcleq	12, cr0, [fp]
    759c:	00000059 	andeq	r0, r0, r9, asr r0
    75a0:	1e560d13 	mrcne	13, 2, r0, cr6, cr3, {0}
    75a4:	fc0c0000 	stc2	0, cr0, [ip], {-0}
    75a8:	0000590c 	andeq	r5, r0, ip, lsl #18
    75ac:	5f0d1400 	svcpl	0x000d1400
    75b0:	0c00001e 	stceq	0, cr0, [r0], {30}
    75b4:	00590cfd 	ldrsheq	r0, [r9], #-205	; 0xffffff33
    75b8:	0d150000 	ldceq	0, cr0, [r5, #-0]
    75bc:	00001e68 	andeq	r1, r0, r8, ror #28
    75c0:	6c0dfe0c 	stcvs	14, cr15, [sp], {12}
    75c4:	16000000 	strne	r0, [r0], -r0
    75c8:	1f970200 	svcne	0x00970200
    75cc:	440c0000 	strmi	r0, [ip], #-0
    75d0:	000acd36 	andeq	ip, sl, r6, lsr sp
    75d4:	1f7e1a00 	svcne	0x007e1a00
    75d8:	0c140000 	ldceq	0, cr0, [r4], {-0}
    75dc:	4c15019f 	ldfmis	f0, [r5], {159}	; 0x9f
    75e0:	1800000b 	stmdane	r0, {r0, r1, r3}
    75e4:	00001501 	andeq	r1, r0, r1, lsl #10
    75e8:	0d01a00c 	stceq	0, cr10, [r1, #-48]	; 0xffffffd0
    75ec:	0000006c 	andeq	r0, r0, ip, rrx
    75f0:	19761800 	ldmdbne	r6!, {fp, ip}^
    75f4:	a10c0000 	mrsge	r0, (UNDEF: 12)
    75f8:	006c0d01 	rsbeq	r0, ip, r1, lsl #26
    75fc:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    7600:	00001a5c 	andeq	r1, r0, ip, asr sl
    7604:	1301a40c 	movwne	sl, #5132	; 0x140c
    7608:	00000bc0 	andeq	r0, r0, r0, asr #23
    760c:	16941804 	ldrne	r1, [r4], r4, lsl #16
    7610:	a50c0000 	strge	r0, [ip, #-0]
    7614:	09540c01 	ldmdbeq	r4, {r0, sl, fp}^
    7618:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    761c:	00001aa1 	andeq	r1, r0, r1, lsr #21
    7620:	0601ad0c 	streq	sl, [r1], -ip, lsl #26
    7624:	00000c6a 	andeq	r0, r0, sl, ror #24
    7628:	1982180c 	stmibne	r2, {r2, r3, fp, ip}
    762c:	b10c0000 	mrslt	r0, (UNDEF: 12)
    7630:	0cb90601 	ldceq	6, cr0, [r9], #4
    7634:	180d0000 	stmdane	sp, {}	; <UNPREDICTABLE>
    7638:	00001a36 	andeq	r1, r0, r6, lsr sl
    763c:	0d01b20c 	sfmeq	f3, 1, [r1, #-48]	; 0xffffffd0
    7640:	0000006c 	andeq	r0, r0, ip, rrx
    7644:	1863180e 	stmdane	r3!, {r1, r2, r3, fp, ip}^
    7648:	b30c0000 	movwlt	r0, #49152	; 0xc000
    764c:	09540c01 	ldmdbeq	r4, {r0, sl, fp}^
    7650:	00100000 	andseq	r0, r0, r0
    7654:	760c010c 	strvc	r0, [ip], -ip, lsl #2
    7658:	000b9604 	andeq	r9, fp, r4, lsl #12
    765c:	20ed2100 	rsccs	r2, sp, r0, lsl #2
    7660:	770c0000 	strvc	r0, [ip, -r0]
    7664:	0000590f 	andeq	r5, r0, pc, lsl #18
    7668:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    766c:	17f12100 	ldrbne	r2, [r1, r0, lsl #2]!
    7670:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
    7674:	0000590f 	andeq	r5, r0, pc, lsl #18
    7678:	03010100 	movweq	r0, #4352	; 0x1100
    767c:	192d2100 	pushne	{r8, sp}
    7680:	7a0c0000 	bvc	307688 <__ccfg+0x2e76e0>
    7684:	0000590f 	andeq	r5, r0, pc, lsl #18
    7688:	01020100 	mrseq	r0, (UNDEF: 18)
    768c:	15912100 	ldrne	r2, [r1, #256]	; 0x100
    7690:	7b0c0000 	blvc	307698 <__ccfg+0x2e76f0>
    7694:	0000590f 	andeq	r5, r0, pc, lsl #18
    7698:	00010100 	andeq	r0, r1, r0, lsl #2
    769c:	010c0000 	mrseq	r0, (UNDEF: 12)
    76a0:	c0047e0c 	andgt	r7, r4, ip, lsl #28
    76a4:	2100000b 	tstcs	r0, fp
    76a8:	00001e84 	andeq	r1, r0, r4, lsl #29
    76ac:	590f7f0c 	stmdbpl	pc, {r2, r3, r8, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
    76b0:	01000000 	mrseq	r0, (UNDEF: 0)
    76b4:	21000404 	tstcs	r0, r4, lsl #8
    76b8:	0000203d 	andeq	r2, r0, sp, lsr r0
    76bc:	590f800c 	stmdbpl	pc, {r2, r3, pc}	; <UNPREDICTABLE>
    76c0:	01000000 	mrseq	r0, (UNDEF: 0)
    76c4:	00000004 	andeq	r0, r0, r4
    76c8:	09960411 	ldmibeq	r6, {r0, r4, sl}
    76cc:	04110000 	ldreq	r0, [r1], #-0
    76d0:	0000007f 	andeq	r0, r0, pc, ror r0
    76d4:	e70c010c 	str	r0, [ip, -ip, lsl #2]
    76d8:	000c1604 	andeq	r1, ip, r4, lsl #12
    76dc:	20ed2100 	rsccs	r2, sp, r0, lsl #2
    76e0:	e80c0000 	stmda	ip, {}	; <UNPREDICTABLE>
    76e4:	0000590f 	andeq	r5, r0, pc, lsl #18
    76e8:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    76ec:	17f12100 	ldrbne	r2, [r1, r0, lsl #2]!
    76f0:	e90c0000 	stmdb	ip, {}	; <UNPREDICTABLE>
    76f4:	0000590f 	andeq	r5, r0, pc, lsl #18
    76f8:	03010100 	movweq	r0, #4352	; 0x1100
    76fc:	192d2100 	pushne	{r8, sp}
    7700:	eb0c0000 	bl	307708 <__ccfg+0x2e7760>
    7704:	0000590f 	andeq	r5, r0, pc, lsl #18
    7708:	01020100 	mrseq	r0, (UNDEF: 18)
    770c:	15912100 	ldrne	r2, [r1, #256]	; 0x100
    7710:	ec0c0000 	stc	0, cr0, [ip], {-0}
    7714:	0000590f 	andeq	r5, r0, pc, lsl #18
    7718:	00010100 	andeq	r0, r1, r0, lsl #2
    771c:	010c0000 	mrseq	r0, (UNDEF: 12)
    7720:	4004ef0c 	andmi	lr, r4, ip, lsl #30
    7724:	2100000c 	tstcs	r0, ip
    7728:	00001e84 	andeq	r1, r0, r4, lsl #29
    772c:	590ff00c 	stmdbpl	pc, {r2, r3, ip, sp, lr, pc}	; <UNPREDICTABLE>
    7730:	01000000 	mrseq	r0, (UNDEF: 0)
    7734:	21000404 	tstcs	r0, r4, lsl #8
    7738:	0000203d 	andeq	r2, r0, sp, lsr r0
    773c:	590ff10c 	stmdbpl	pc, {r2, r3, r8, ip, sp, lr, pc}	; <UNPREDICTABLE>
    7740:	01000000 	mrseq	r0, (UNDEF: 0)
    7744:	00000004 	andeq	r0, r0, r4
    7748:	f50c010c 			; <UNDEFINED> instruction: 0xf50c010c
    774c:	000c6a04 	andeq	r6, ip, r4, lsl #20
    7750:	17db2100 	ldrbne	r2, [fp, r0, lsl #2]
    7754:	f60c0000 			; <UNDEFINED> instruction: 0xf60c0000
    7758:	0000590f 	andeq	r5, r0, pc, lsl #18
    775c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    7760:	20932100 	addscs	r2, r3, r0, lsl #2
    7764:	f80c0000 			; <UNDEFINED> instruction: 0xf80c0000
    7768:	0000590f 	andeq	r5, r0, pc, lsl #18
    776c:	01060100 	mrseq	r0, (UNDEF: 22)
    7770:	011b0000 	tsteq	fp, r0
    7774:	0401a60c 	streq	sl, [r1], #-1548	; 0xfffff9f4
    7778:	00000cb9 			; <UNDEFINED> instruction: 0x00000cb9
    777c:	0020ed22 	eoreq	lr, r0, r2, lsr #26
    7780:	01a70c00 			; <UNDEFINED> instruction: 0x01a70c00
    7784:	0000590f 	andeq	r5, r0, pc, lsl #18
    7788:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    778c:	17f12200 	ldrbne	r2, [r1, r0, lsl #4]!
    7790:	a80c0000 	stmdage	ip, {}	; <UNPREDICTABLE>
    7794:	00590f01 	subseq	r0, r9, r1, lsl #30
    7798:	01010000 	mrseq	r0, (UNDEF: 1)
    779c:	2d220003 	stccs	0, cr0, [r2, #-12]!
    77a0:	0c000019 	stceq	0, cr0, [r0], {25}
    77a4:	590f01aa 	stmdbpl	pc, {r1, r3, r5, r7, r8}	; <UNPREDICTABLE>
    77a8:	01000000 	mrseq	r0, (UNDEF: 0)
    77ac:	22000102 	andcs	r0, r0, #-2147483648	; 0x80000000
    77b0:	00001591 	muleq	r0, r1, r5
    77b4:	0f01ab0c 	svceq	0x0001ab0c
    77b8:	00000059 	andeq	r0, r0, r9, asr r0
    77bc:	00000101 	andeq	r0, r0, r1, lsl #2
    77c0:	0c011b00 			; <UNDEFINED> instruction: 0x0c011b00
    77c4:	e60401ae 	str	r0, [r4], -lr, lsr #3
    77c8:	2200000c 	andcs	r0, r0, #12
    77cc:	00001e84 	andeq	r1, r0, r4, lsl #29
    77d0:	0f01af0c 	svceq	0x0001af0c
    77d4:	00000059 	andeq	r0, r0, r9, asr r0
    77d8:	00040401 	andeq	r0, r4, r1, lsl #8
    77dc:	00203d22 	eoreq	r3, r0, r2, lsr #26
    77e0:	01b00c00 	lslseq	r0, r0, #24
    77e4:	0000590f 	andeq	r5, r0, pc, lsl #18
    77e8:	00040100 	andeq	r0, r4, r0, lsl #2
    77ec:	04110000 	ldreq	r0, [r1], #-0
    77f0:	0000098a 	andeq	r0, r0, sl, lsl #19
    77f4:	001ee402 	andseq	lr, lr, r2, lsl #8
    77f8:	2f3d0d00 	svccs	0x003d0d00
    77fc:	00000cf8 	strdeq	r0, [r0], -r8
    7800:	001ef60f 	andseq	pc, lr, pc, lsl #12
    7804:	780d1800 	stmdavc	sp, {fp, ip}
    7808:	000d8815 	andeq	r8, sp, r5, lsl r8
    780c:	15010d00 	strne	r0, [r1, #-3328]	; 0xfffff300
    7810:	790d0000 	stmdbvc	sp, {}	; <UNPREDICTABLE>
    7814:	00006c0d 	andeq	r6, r0, sp, lsl #24
    7818:	760d0000 	strvc	r0, [sp], -r0
    781c:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    7820:	006c0d7a 	rsbeq	r0, ip, sl, ror sp
    7824:	0d020000 	stceq	0, cr0, [r2, #-0]
    7828:	00001a5c 	andeq	r1, r0, ip, asr sl
    782c:	c0137d0d 	andsgt	r7, r3, sp, lsl #26
    7830:	0400000b 	streq	r0, [r0], #-11
    7834:	0016940d 	andseq	r9, r6, sp, lsl #8
    7838:	0c7e0d00 	ldcleq	13, cr0, [lr], #-0
    783c:	00000954 	andeq	r0, r0, r4, asr r9
    7840:	1aa10d08 	bne	fe84ac68 <_estack+0xde845c68>
    7844:	860d0000 	strhi	r0, [sp], -r0
    7848:	0010f306 	andseq	pc, r0, r6, lsl #6
    784c:	820d0c00 	andhi	r0, sp, #0, 24
    7850:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    7854:	113d068a 	teqne	sp, sl, lsl #13
    7858:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    785c:	000016fb 	strdeq	r1, [r0], -fp
    7860:	6706930d 	strvs	r9, [r6, -sp, lsl #6]
    7864:	0e000011 	mcreq	0, 0, r0, cr0, cr1, {0}
    7868:	001e7d0d 	andseq	r7, lr, sp, lsl #26
    786c:	0c940d00 	ldceq	13, cr0, [r4], {0}
    7870:	00000059 	andeq	r0, r0, r9, asr r0
    7874:	1b010d0f 	blne	4acb8 <__ccfg+0x2ad10>
    7878:	950d0000 	strls	r0, [sp, #-0]
    787c:	00007f0d 	andeq	r7, r0, sp, lsl #30
    7880:	3c0d1000 	stccc	0, cr1, [sp], {-0}
    7884:	0d000015 	stceq	0, cr0, [r0, #-84]	; 0xffffffac
    7888:	09840d96 	stmibeq	r4, {r1, r2, r4, r7, r8, sl, fp}
    788c:	00140000 	andseq	r0, r4, r0
    7890:	001cb002 	andseq	fp, ip, r2
    7894:	2f3e0d00 	svccs	0x003e0d00
    7898:	00000d94 	muleq	r0, r4, sp
    789c:	0018a70f 	andseq	sl, r8, pc, lsl #14
    78a0:	9f0d2400 	svcls	0x000d2400
    78a4:	000e7215 	andeq	r7, lr, r5, lsl r2
    78a8:	15010d00 	strne	r0, [r1, #-3328]	; 0xfffff300
    78ac:	a00d0000 	andge	r0, sp, r0
    78b0:	00006c0d 	andeq	r6, r0, sp, lsl #24
    78b4:	760d0000 	strvc	r0, [sp], -r0
    78b8:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    78bc:	006c0da1 	rsbeq	r0, ip, r1, lsr #27
    78c0:	0d020000 	stceq	0, cr0, [r2, #-0]
    78c4:	00001a5c 	andeq	r1, r0, ip, asr sl
    78c8:	c013a40d 	andsgt	sl, r3, sp, lsl #8
    78cc:	0400000b 	streq	r0, [r0], #-11
    78d0:	0016940d 	andseq	r9, r6, sp, lsl #8
    78d4:	0ca50d00 	stceq	13, cr0, [r5]
    78d8:	00000954 	andeq	r0, r0, r4, asr r9
    78dc:	1aa10d08 	bne	fe84ad04 <_estack+0xde845d04>
    78e0:	ad0d0000 	stcge	0, cr0, [sp, #-0]
    78e4:	0011a106 	andseq	sl, r1, r6, lsl #2
    78e8:	820d0c00 	andhi	r0, sp, #0, 24
    78ec:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    78f0:	11eb06b1 	strhne	r0, [fp, #97]!	; 0x61
    78f4:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    78f8:	000016fb 	strdeq	r1, [r0], -fp
    78fc:	1506c30d 	strne	ip, [r6, #-781]	; 0xfffffcf3
    7900:	0e000012 	mcreq	0, 0, r0, cr0, cr2, {0}
    7904:	001c090d 	andseq	r0, ip, sp, lsl #18
    7908:	06cd0d00 	strbeq	r0, [sp], r0, lsl #26
    790c:	0000129f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    7910:	1b010d0f 	blne	4ad54 <__ccfg+0x2adac>
    7914:	ce0d0000 	cdpgt	0, 0, cr0, cr13, cr0, {0}
    7918:	00007f0d 	andeq	r7, r0, sp, lsl #30
    791c:	3d0d1000 	stccc	0, cr1, [sp, #-0]
    7920:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
    7924:	00590ccf 	subseq	r0, r9, pc, asr #25
    7928:	0d140000 	ldceq	0, cr0, [r4, #-0]
    792c:	00001c5b 	andeq	r1, r0, fp, asr ip
    7930:	590cd10d 	stmdbpl	ip, {r0, r2, r3, r8, ip, lr, pc}
    7934:	15000000 	strne	r0, [r0, #-0]
    7938:	001c640d 	andseq	r6, ip, sp, lsl #8
    793c:	0cd20d00 	ldcleq	13, cr0, [r2], {0}
    7940:	00000059 	andeq	r0, r0, r9, asr r0
    7944:	18b90d16 	ldmne	r9!, {r1, r2, r4, r8, sl, fp}
    7948:	db0d0000 	blle	347950 <__ccfg+0x3279a8>
    794c:	00131906 	andseq	r1, r3, r6, lsl #18
    7950:	560d1700 	strpl	r1, [sp], -r0, lsl #14
    7954:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    7958:	09540cdc 	ldmdbeq	r4, {r2, r3, r4, r6, r7, sl, fp}^
    795c:	0d180000 	ldceq	0, cr0, [r8, #-0]
    7960:	00001937 	andeq	r1, r0, r7, lsr r9
    7964:	e611dd0d 	ldr	sp, [r1], -sp, lsl #26
    7968:	1c00000c 	stcne	0, cr0, [r0], {12}
    796c:	0015c40d 	andseq	ip, r5, sp, lsl #8
    7970:	0dde0d00 	ldcleq	13, cr0, [lr]
    7974:	00000984 	andeq	r0, r0, r4, lsl #19
    7978:	e2020020 	and	r0, r2, #32
    797c:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
    7980:	0e7e2f41 	cdpeq	15, 7, cr2, cr14, cr1, {2}
    7984:	7f1a0000 	svcvc	0x001a0000
    7988:	1c000015 	stcne	0, cr0, [r0], {21}
    798c:	15017d0d 	strne	r7, [r1, #-3341]	; 0xfffff2f3
    7990:	00000f6d 	andeq	r0, r0, sp, ror #30
    7994:	00150118 	andseq	r0, r5, r8, lsl r1
    7998:	017e0d00 	cmneq	lr, r0, lsl #26
    799c:	00006c0d 	andeq	r6, r0, sp, lsl #24
    79a0:	76180000 	ldrvc	r0, [r8], -r0
    79a4:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    79a8:	6c0d017f 	stfvss	f0, [sp], {127}	; 0x7f
    79ac:	02000000 	andeq	r0, r0, #0
    79b0:	001a5c18 	andseq	r5, sl, r8, lsl ip
    79b4:	01820d00 	orreq	r0, r2, r0, lsl #26
    79b8:	000bc013 	andeq	ip, fp, r3, lsl r0
    79bc:	94180400 	ldrls	r0, [r8], #-1024	; 0xfffffc00
    79c0:	0d000016 	stceq	0, cr0, [r0, #-88]	; 0xffffffa8
    79c4:	540c0183 	strpl	r0, [ip], #-387	; 0xfffffe7d
    79c8:	08000009 	stmdaeq	r0, {r0, r3}
    79cc:	001aa118 	andseq	sl, sl, r8, lsl r1
    79d0:	018b0d00 	orreq	r0, fp, r0, lsl #26
    79d4:	00136306 	andseq	r6, r3, r6, lsl #6
    79d8:	82180c00 	andshi	r0, r8, #0, 24
    79dc:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    79e0:	b206018f 	andlt	r0, r6, #-1073741789	; 0xc0000023
    79e4:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    79e8:	001f2a18 	andseq	r2, pc, r8, lsl sl	; <UNPREDICTABLE>
    79ec:	01950d00 	orrseq	r0, r5, r0, lsl #26
    79f0:	0013df06 	andseq	sp, r3, r6, lsl #30
    79f4:	36180e00 	ldrcc	r0, [r8], -r0, lsl #28
    79f8:	0d00001a 	stceq	0, cr0, [r0, #-104]	; 0xffffff98
    79fc:	590c0196 	stmdbpl	ip, {r1, r2, r4, r7, r8}
    7a00:	0f000000 	svceq	0x00000000
    7a04:	00201a18 	eoreq	r1, r0, r8, lsl sl
    7a08:	01a30d00 			; <UNDEFINED> instruction: 0x01a30d00
    7a0c:	00140c06 	andseq	r0, r4, r6, lsl #24
    7a10:	4d181000 	ldcmi	0, cr1, [r8, #-0]
    7a14:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    7a18:	250b01a4 	strcs	r0, [fp, #-420]	; 0xfffffe5c
    7a1c:	11000000 	mrsne	r0, (UNDEF: 0)
    7a20:	001cd518 	andseq	sp, ip, r8, lsl r5
    7a24:	01a50d00 			; <UNDEFINED> instruction: 0x01a50d00
    7a28:	0000590c 	andeq	r5, r0, ip, lsl #18
    7a2c:	b7181200 	ldrlt	r1, [r8, -r0, lsl #4]
    7a30:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    7a34:	590c01a7 	stmdbpl	ip, {r0, r1, r2, r5, r7, r8}
    7a38:	13000000 	movwne	r0, #0
    7a3c:	001b6d18 	andseq	r6, fp, r8, lsl sp
    7a40:	01a90d00 			; <UNDEFINED> instruction: 0x01a90d00
    7a44:	00006c0d 	andeq	r6, r0, sp, lsl #24
    7a48:	58181400 	ldmdapl	r8, {sl, ip}
    7a4c:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
    7a50:	7d0601af 	stfvcs	f0, [r6, #-700]	; 0xfffffd44
    7a54:	16000014 			; <UNDEFINED> instruction: 0x16000014
    7a58:	0019ef18 	andseq	lr, r9, r8, lsl pc
    7a5c:	01b70d00 			; <UNDEFINED> instruction: 0x01b70d00
    7a60:	0014aa06 	andseq	sl, r4, r6, lsl #20
    7a64:	59181700 	ldmdbpl	r8, {r8, r9, sl, ip}
    7a68:	0d00001b 	stceq	0, cr0, [r0, #-108]	; 0xffffff94
    7a6c:	540c01b8 	strpl	r0, [ip], #-440	; 0xfffffe48
    7a70:	18000009 	stmdane	r0, {r0, r3}
    7a74:	1c8c0200 	sfmne	f0, 4, [ip], {0}
    7a78:	430d0000 	movwmi	r0, #53248	; 0xd000
    7a7c:	000f793c 	andeq	r7, pc, ip, lsr r9	; <UNPREDICTABLE>
    7a80:	1c6d1a00 			; <UNDEFINED> instruction: 0x1c6d1a00
    7a84:	0d280000 	stceq	0, cr0, [r8, #-0]
    7a88:	7615021a 			; <UNDEFINED> instruction: 0x7615021a
    7a8c:	18000010 	stmdane	r0, {r4}
    7a90:	00001501 	andeq	r1, r0, r1, lsl #10
    7a94:	0d021b0d 	vstreq	d1, [r2, #-52]	; 0xffffffcc
    7a98:	0000006c 	andeq	r0, r0, ip, rrx
    7a9c:	19761800 	ldmdbne	r6!, {fp, ip}^
    7aa0:	1d0d0000 	stcne	0, cr0, [sp, #-0]
    7aa4:	006c0d02 	rsbeq	r0, ip, r2, lsl #26
    7aa8:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    7aac:	00001a5c 	andeq	r1, r0, ip, asr sl
    7ab0:	1302200d 	movwne	r2, #8205	; 0x200d
    7ab4:	00000bc0 	andeq	r0, r0, r0, asr #23
    7ab8:	16941804 	ldrne	r1, [r4], r4, lsl #16
    7abc:	210d0000 	mrscs	r0, (UNDEF: 13)
    7ac0:	09540c02 	ldmdbeq	r4, {r1, sl, fp}^
    7ac4:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    7ac8:	00001aa1 	andeq	r1, r0, r1, lsr #21
    7acc:	0602290d 	streq	r2, [r2], -sp, lsl #18
    7ad0:	000014f9 	strdeq	r1, [r0], -r9
    7ad4:	1982180c 	stmibne	r2, {r2, r3, fp, ip}
    7ad8:	2d0d0000 	stccs	0, cr0, [sp, #-0]
    7adc:	15480602 	strbne	r0, [r8, #-1538]	; 0xfffff9fe
    7ae0:	180d0000 	stmdane	sp, {}	; <UNPREDICTABLE>
    7ae4:	000014f6 	strdeq	r1, [r0], -r6
    7ae8:	0602330d 	streq	r3, [r2], -sp, lsl #6
    7aec:	00001575 	andeq	r1, r0, r5, ror r5
    7af0:	1a45180e 	bne	114db30 <__ccfg+0x112db88>
    7af4:	380d0000 	stmdacc	sp, {}	; <UNPREDICTABLE>
    7af8:	15a20602 	strne	r0, [r2, #1538]!	; 0x602
    7afc:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
    7b00:	0000177e 	andeq	r1, r0, lr, ror r7
    7b04:	0c02390d 			; <UNDEFINED> instruction: 0x0c02390d
    7b08:	00000059 	andeq	r0, r0, r9, asr r0
    7b0c:	1af71814 	bne	ffdcdb64 <_estack+0xdfdc8b64>
    7b10:	410d0000 	mrsmi	r0, (UNDEF: 13)
    7b14:	15cf0602 	strbne	r0, [pc, #1538]	; 811e <__exidx_end+0x33ca>
    7b18:	18150000 	ldmdane	r5, {}	; <UNPREDICTABLE>
    7b1c:	00001681 	andeq	r1, r0, r1, lsl #13
    7b20:	0602550d 	streq	r5, [r2], -sp, lsl #10
    7b24:	000015fc 	strdeq	r1, [r0], -ip
    7b28:	0ab21816 	beq	fec8db88 <_estack+0xdec88b88>
    7b2c:	680d0000 	stmdavs	sp, {}	; <UNPREDICTABLE>
    7b30:	165c0602 	ldrbne	r0, [ip], -r2, lsl #12
    7b34:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
    7b38:	0000176f 	andeq	r1, r0, pc, ror #14
    7b3c:	0d02690d 	vstreq.16	s12, [r2, #-26]	; 0xffffffe6	; <UNPREDICTABLE>
    7b40:	0000006c 	andeq	r0, r0, ip, rrx
    7b44:	1d15181a 	ldcne	8, cr1, [r5, #-104]	; 0xffffff98
    7b48:	6a0d0000 	bvs	347b50 <__ccfg+0x327ba8>
    7b4c:	0bc60e02 	bleq	ff18b35c <_estack+0xdf18635c>
    7b50:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
    7b54:	0000154f 	andeq	r1, r0, pc, asr #10
    7b58:	0d026c0d 	stceq	12, cr6, [r2, #-52]	; 0xffffffcc
    7b5c:	0000006c 	andeq	r0, r0, ip, rrx
    7b60:	1a641820 	bne	190dbe8 <__ccfg+0x18edc40>
    7b64:	700d0000 	andvc	r0, sp, r0
    7b68:	00380c02 	eorseq	r0, r8, r2, lsl #24
    7b6c:	18220000 	stmdane	r2!, {}	; <UNPREDICTABLE>
    7b70:	00001bd3 	ldrdeq	r1, [r0], -r3
    7b74:	0c02730d 	stceq	3, cr7, [r2], {13}
    7b78:	00000059 	andeq	r0, r0, r9, asr r0
    7b7c:	60020024 	andvs	r0, r2, r4, lsr #32
    7b80:	0d00001d 	stceq	0, cr0, [r0, #-116]	; 0xffffff8c
    7b84:	10823048 	addne	r3, r2, r8, asr #32
    7b88:	4d1a0000 	ldcmi	0, cr0, [sl, #-0]
    7b8c:	0c00001d 	stceq	0, cr0, [r0], {29}
    7b90:	1503750d 	strne	r7, [r3, #-1293]	; 0xfffffaf3
    7b94:	000010f3 	strdeq	r1, [r0], -r3
    7b98:	001e3f18 	andseq	r3, lr, r8, lsl pc
    7b9c:	03760d00 	cmneq	r6, #0, 26
    7ba0:	00006c0d 	andeq	r6, r0, sp, lsl #24
    7ba4:	e9180000 	ldmdb	r8, {}	; <UNPREDICTABLE>
    7ba8:	0d000015 	stceq	0, cr0, [r0, #-84]	; 0xffffffac
    7bac:	6c0d0377 	stcvs	3, cr0, [sp], {119}	; 0x77
    7bb0:	02000000 	andeq	r0, r0, #0
    7bb4:	0015d618 	andseq	sp, r5, r8, lsl r6
    7bb8:	03780d00 	cmneq	r8, #0, 26
    7bbc:	0000590c 	andeq	r5, r0, ip, lsl #18
    7bc0:	ca180400 	bgt	608bc8 <__ccfg+0x5e8c20>
    7bc4:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    7bc8:	590c0379 	stmdbpl	ip, {r0, r3, r4, r5, r6, r8, r9}
    7bcc:	05000000 	streq	r0, [r0, #-0]
    7bd0:	0019bf18 	andseq	fp, r9, r8, lsl pc
    7bd4:	037a0d00 	cmneq	sl, #0, 26
    7bd8:	0000590c 	andeq	r5, r0, ip, lsl #18
    7bdc:	98180600 	ldmdals	r8, {r9, sl}
    7be0:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    7be4:	250b037b 	strcs	r0, [fp, #-891]	; 0xfffffc85
    7be8:	07000000 	streq	r0, [r0, -r0]
    7bec:	00163618 	andseq	r3, r6, r8, lsl r6
    7bf0:	037c0d00 	cmneq	ip, #0, 26
    7bf4:	0009540c 	andeq	r5, r9, ip, lsl #8
    7bf8:	0c000800 	stceq	8, cr0, [r0], {-0}
    7bfc:	047f0d01 	ldrbteq	r0, [pc], #-3329	; 7c04 <__exidx_end+0x2eb0>
    7c00:	0000113d 	andeq	r1, r0, sp, lsr r1
    7c04:	0020ed21 	eoreq	lr, r0, r1, lsr #26
    7c08:	0f800d00 	svceq	0x00800d00
    7c0c:	00000059 	andeq	r0, r0, r9, asr r0
    7c10:	00040401 	andeq	r0, r4, r1, lsl #8
    7c14:	0017f121 	andseq	pc, r7, r1, lsr #2
    7c18:	0f810d00 	svceq	0x00810d00
    7c1c:	00000059 	andeq	r0, r0, r9, asr r0
    7c20:	00030101 	andeq	r0, r3, r1, lsl #2
    7c24:	00192d21 	andseq	r2, r9, r1, lsr #26
    7c28:	0f830d00 	svceq	0x00830d00
    7c2c:	00000059 	andeq	r0, r0, r9, asr r0
    7c30:	00010201 	andeq	r0, r1, r1, lsl #4
    7c34:	00159121 	andseq	r9, r5, r1, lsr #2
    7c38:	0f840d00 	svceq	0x00840d00
    7c3c:	00000059 	andeq	r0, r0, r9, asr r0
    7c40:	00000101 	andeq	r0, r0, r1, lsl #2
    7c44:	0d010c00 	stceq	12, cr0, [r1, #-0]
    7c48:	11670487 	smulbbne	r7, r7, r4
    7c4c:	84210000 	strthi	r0, [r1], #-0
    7c50:	0d00001e 	stceq	0, cr0, [r0, #-120]	; 0xffffff88
    7c54:	00590f88 	subseq	r0, r9, r8, lsl #31
    7c58:	04010000 	streq	r0, [r1], #-0
    7c5c:	3d210004 	stccc	0, cr0, [r1, #-16]!
    7c60:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    7c64:	00590f89 	subseq	r0, r9, r9, lsl #31
    7c68:	04010000 	streq	r0, [r1], #-0
    7c6c:	0c000000 	stceq	0, cr0, [r0], {-0}
    7c70:	048b0d01 	streq	r0, [fp], #3329	; 0xd01
    7c74:	000011a1 	andeq	r1, r0, r1, lsr #3
    7c78:	001f3b21 	andseq	r3, pc, r1, lsr #22
    7c7c:	0f8c0d00 	svceq	0x008c0d00
    7c80:	00000059 	andeq	r0, r0, r9, asr r0
    7c84:	00070101 	andeq	r0, r7, r1, lsl #2
    7c88:	001fec21 	andseq	lr, pc, r1, lsr #24
    7c8c:	0f8f0d00 	svceq	0x008f0d00
    7c90:	00000059 	andeq	r0, r0, r9, asr r0
    7c94:	00040101 	andeq	r0, r4, r1, lsl #2
    7c98:	00153421 	andseq	r3, r5, r1, lsr #8
    7c9c:	0f910d00 	svceq	0x00910d00
    7ca0:	00000059 	andeq	r0, r0, r9, asr r0
    7ca4:	00030101 	andeq	r0, r3, r1, lsl #2
    7ca8:	0d010c00 	stceq	12, cr0, [r1, #-0]
    7cac:	11eb04a6 	mvnne	r0, r6, lsr #9
    7cb0:	ed210000 	stc	0, cr0, [r1, #-0]
    7cb4:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    7cb8:	00590fa7 	subseq	r0, r9, r7, lsr #31
    7cbc:	04010000 	streq	r0, [r1], #-0
    7cc0:	f1210004 			; <UNDEFINED> instruction: 0xf1210004
    7cc4:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
    7cc8:	00590fa8 	subseq	r0, r9, r8, lsr #31
    7ccc:	01010000 	mrseq	r0, (UNDEF: 1)
    7cd0:	2d210003 	stccs	0, cr0, [r1, #-12]!
    7cd4:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    7cd8:	00590faa 	subseq	r0, r9, sl, lsr #31
    7cdc:	02010000 	andeq	r0, r1, #0
    7ce0:	91210001 			; <UNDEFINED> instruction: 0x91210001
    7ce4:	0d000015 	stceq	0, cr0, [r0, #-84]	; 0xffffffac
    7ce8:	00590fab 	subseq	r0, r9, fp, lsr #31
    7cec:	01010000 	mrseq	r0, (UNDEF: 1)
    7cf0:	0c000000 	stceq	0, cr0, [r0], {-0}
    7cf4:	04ae0d01 	strteq	r0, [lr], #3329	; 0xd01
    7cf8:	00001215 	andeq	r1, r0, r5, lsl r2
    7cfc:	001e8421 	andseq	r8, lr, r1, lsr #8
    7d00:	0faf0d00 	svceq	0x00af0d00
    7d04:	00000059 	andeq	r0, r0, r9, asr r0
    7d08:	00040401 	andeq	r0, r4, r1, lsl #8
    7d0c:	00203d21 	eoreq	r3, r0, r1, lsr #26
    7d10:	0fb00d00 	svceq	0x00b00d00
    7d14:	00000059 	andeq	r0, r0, r9, asr r0
    7d18:	00000401 	andeq	r0, r0, r1, lsl #8
    7d1c:	0d010c00 	stceq	12, cr0, [r1, #-0]
    7d20:	129f04b2 	addsne	r0, pc, #-1308622848	; 0xb2000000
    7d24:	3b210000 	blcc	847d2c <__ccfg+0x827d84>
    7d28:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    7d2c:	00590fb3 	ldrheq	r0, [r9], #-243	; 0xffffff0d
    7d30:	01010000 	mrseq	r0, (UNDEF: 1)
    7d34:	cc210007 	stcgt	0, cr0, [r1], #-28	; 0xffffffe4
    7d38:	0d000015 	stceq	0, cr0, [r0, #-84]	; 0xffffffac
    7d3c:	00590fb5 	ldrheq	r0, [r9], #-245	; 0xffffff0b
    7d40:	01010000 	mrseq	r0, (UNDEF: 1)
    7d44:	db210006 	blle	847d64 <__ccfg+0x827dbc>
    7d48:	0d00001d 	stceq	0, cr0, [r0, #-116]	; 0xffffff8c
    7d4c:	00590fb7 	ldrheq	r0, [r9], #-247	; 0xffffff09
    7d50:	01010000 	mrseq	r0, (UNDEF: 1)
    7d54:	ec210005 	stc	0, cr0, [r1], #-20	; 0xffffffec
    7d58:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    7d5c:	00590fb9 	ldrheq	r0, [r9], #-249	; 0xffffff07
    7d60:	01010000 	mrseq	r0, (UNDEF: 1)
    7d64:	34210004 	strtcc	r0, [r1], #-4
    7d68:	0d000015 	stceq	0, cr0, [r0, #-84]	; 0xffffffac
    7d6c:	00590fbb 	ldrheq	r0, [r9], #-251	; 0xffffff05
    7d70:	01010000 	mrseq	r0, (UNDEF: 1)
    7d74:	5e210003 	cdppl	0, 2, cr0, cr1, cr3, {0}
    7d78:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    7d7c:	00590fbd 	ldrheq	r0, [r9], #-253	; 0xffffff03
    7d80:	01010000 	mrseq	r0, (UNDEF: 1)
    7d84:	3e210002 	cdpcc	0, 2, cr0, cr1, cr2, {0}
    7d88:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    7d8c:	00590fbf 	ldrheq	r0, [r9], #-255	; 0xffffff01
    7d90:	01010000 	mrseq	r0, (UNDEF: 1)
    7d94:	e6210001 	strt	r0, [r1], -r1
    7d98:	0d00001d 	stceq	0, cr0, [r0, #-116]	; 0xffffff8c
    7d9c:	00590fc1 	subseq	r0, r9, r1, asr #31
    7da0:	01010000 	mrseq	r0, (UNDEF: 1)
    7da4:	0c000000 	stceq	0, cr0, [r0], {-0}
    7da8:	04c40d01 	strbeq	r0, [r4], #3329	; 0xd01
    7dac:	00001319 	andeq	r1, r0, r9, lsl r3
    7db0:	001a7621 	andseq	r7, sl, r1, lsr #12
    7db4:	0fc50d00 	svceq	0x00c50d00
    7db8:	00000059 	andeq	r0, r0, r9, asr r0
    7dbc:	00070101 	andeq	r0, r7, r1, lsl #2
    7dc0:	0017b921 	andseq	fp, r7, r1, lsr #18
    7dc4:	0fc60d00 	svceq	0x00c60d00
    7dc8:	00000059 	andeq	r0, r0, r9, asr r0
    7dcc:	00060101 	andeq	r0, r6, r1, lsl #2
    7dd0:	00198c21 	andseq	r8, r9, r1, lsr #24
    7dd4:	0fc80d00 	svceq	0x00c80d00
    7dd8:	00000059 	andeq	r0, r0, r9, asr r0
    7ddc:	00040101 	andeq	r0, r4, r1, lsl #2
    7de0:	00188221 	andseq	r8, r8, r1, lsr #4
    7de4:	0fc90d00 	svceq	0x00c90d00
    7de8:	00000059 	andeq	r0, r0, r9, asr r0
    7dec:	00030101 	andeq	r0, r3, r1, lsl #2
    7df0:	001d3921 	andseq	r3, sp, r1, lsr #18
    7df4:	0fca0d00 	svceq	0x00ca0d00
    7df8:	00000059 	andeq	r0, r0, r9, asr r0
    7dfc:	00020101 	andeq	r0, r2, r1, lsl #2
    7e00:	0016a821 	andseq	sl, r6, r1, lsr #16
    7e04:	0fcb0d00 	svceq	0x00cb0d00
    7e08:	00000059 	andeq	r0, r0, r9, asr r0
    7e0c:	00010101 	andeq	r0, r1, r1, lsl #2
    7e10:	00150b21 	andseq	r0, r5, r1, lsr #22
    7e14:	0fcc0d00 	svceq	0x00cc0d00
    7e18:	00000059 	andeq	r0, r0, r9, asr r0
    7e1c:	00000101 	andeq	r0, r0, r1, lsl #2
    7e20:	0d010c00 	stceq	12, cr0, [r1, #-0]
    7e24:	136304d4 	cmnne	r3, #212, 8	; 0xd4000000
    7e28:	ed210000 	stc	0, cr0, [r1, #-0]
    7e2c:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    7e30:	00590fd5 	ldrsbeq	r0, [r9], #-245	; 0xffffff0b
    7e34:	04010000 	streq	r0, [r1], #-0
    7e38:	f1210004 			; <UNDEFINED> instruction: 0xf1210004
    7e3c:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
    7e40:	00590fd6 	ldrsbeq	r0, [r9], #-246	; 0xffffff0a
    7e44:	01010000 	mrseq	r0, (UNDEF: 1)
    7e48:	2d210003 	stccs	0, cr0, [r1, #-12]!
    7e4c:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    7e50:	00590fd8 	ldrsbeq	r0, [r9], #-248	; 0xffffff08
    7e54:	02010000 	andeq	r0, r1, #0
    7e58:	91210001 			; <UNDEFINED> instruction: 0x91210001
    7e5c:	0d000015 	stceq	0, cr0, [r0, #-84]	; 0xffffffac
    7e60:	00590fd9 	ldrsbeq	r0, [r9], #-249	; 0xffffff07
    7e64:	01010000 	mrseq	r0, (UNDEF: 1)
    7e68:	1b000000 	blne	7e70 <__exidx_end+0x311c>
    7e6c:	01840d01 	orreq	r0, r4, r1, lsl #26
    7e70:	0013b204 	andseq	fp, r3, r4, lsl #4
    7e74:	20ed2200 	rsccs	r2, sp, r0, lsl #4
    7e78:	850d0000 	strhi	r0, [sp, #-0]
    7e7c:	00590f01 	subseq	r0, r9, r1, lsl #30
    7e80:	04010000 	streq	r0, [r1], #-0
    7e84:	f1220004 			; <UNDEFINED> instruction: 0xf1220004
    7e88:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
    7e8c:	590f0186 	stmdbpl	pc, {r1, r2, r7, r8}	; <UNPREDICTABLE>
    7e90:	01000000 	mrseq	r0, (UNDEF: 0)
    7e94:	22000301 	andcs	r0, r0, #67108864	; 0x4000000
    7e98:	0000192d 	andeq	r1, r0, sp, lsr #18
    7e9c:	0f01880d 	svceq	0x0001880d
    7ea0:	00000059 	andeq	r0, r0, r9, asr r0
    7ea4:	00010201 	andeq	r0, r1, r1, lsl #4
    7ea8:	00159122 	andseq	r9, r5, r2, lsr #2
    7eac:	01890d00 	orreq	r0, r9, r0, lsl #26
    7eb0:	0000590f 	andeq	r5, r0, pc, lsl #18
    7eb4:	00010100 	andeq	r0, r1, r0, lsl #2
    7eb8:	011b0000 	tsteq	fp, r0
    7ebc:	04018c0d 	streq	r8, [r1], #-3085	; 0xfffff3f3
    7ec0:	000013df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    7ec4:	001e8422 	andseq	r8, lr, r2, lsr #8
    7ec8:	018d0d00 	orreq	r0, sp, r0, lsl #26
    7ecc:	0000590f 	andeq	r5, r0, pc, lsl #18
    7ed0:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    7ed4:	203d2200 	eorscs	r2, sp, r0, lsl #4
    7ed8:	8e0d0000 	cdphi	0, 0, cr0, cr13, cr0, {0}
    7edc:	00590f01 	subseq	r0, r9, r1, lsl #30
    7ee0:	04010000 	streq	r0, [r1], #-0
    7ee4:	1b000000 	blne	7eec <__exidx_end+0x3198>
    7ee8:	01900d01 	orrseq	r0, r0, r1, lsl #26
    7eec:	00140c04 	andseq	r0, r4, r4, lsl #24
    7ef0:	1ae32200 	bne	ff8d06f8 <_estack+0xdf8cb6f8>
    7ef4:	910d0000 	mrsls	r0, (UNDEF: 13)
    7ef8:	00590f01 	subseq	r0, r9, r1, lsl #30
    7efc:	01010000 	mrseq	r0, (UNDEF: 1)
    7f00:	24220007 	strtcs	r0, [r2], #-7
    7f04:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    7f08:	590f0193 	stmdbpl	pc, {r0, r1, r4, r7, r8}	; <UNPREDICTABLE>
    7f0c:	01000000 	mrseq	r0, (UNDEF: 0)
    7f10:	00000601 	andeq	r0, r0, r1, lsl #12
    7f14:	970d011b 	smladls	sp, fp, r1, r0
    7f18:	147d0401 	ldrbtne	r0, [sp], #-1025	; 0xfffffbff
    7f1c:	43220000 			; <UNDEFINED> instruction: 0x43220000
    7f20:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    7f24:	590f0198 	stmdbpl	pc, {r3, r4, r7, r8}	; <UNPREDICTABLE>
    7f28:	01000000 	mrseq	r0, (UNDEF: 0)
    7f2c:	22000701 	andcs	r0, r0, #262144	; 0x40000
    7f30:	00001ad1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    7f34:	0f01990d 	svceq	0x0001990d
    7f38:	00000059 	andeq	r0, r0, r9, asr r0
    7f3c:	00060101 	andeq	r0, r6, r1, lsl #2
    7f40:	0007bb22 	andeq	fp, r7, r2, lsr #22
    7f44:	019a0d00 	orrseq	r0, sl, r0, lsl #26
    7f48:	0000590f 	andeq	r5, r0, pc, lsl #18
    7f4c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    7f50:	1bcc2200 	blne	ff310758 <_estack+0xdf30b758>
    7f54:	9c0d0000 	stcls	0, cr0, [sp], {-0}
    7f58:	00590f01 	subseq	r0, r9, r1, lsl #30
    7f5c:	01010000 	mrseq	r0, (UNDEF: 1)
    7f60:	08220004 	stmdaeq	r2!, {r2}
    7f64:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    7f68:	590f019f 	stmdbpl	pc, {r0, r1, r2, r3, r4, r7, r8}	; <UNPREDICTABLE>
    7f6c:	01000000 	mrseq	r0, (UNDEF: 0)
    7f70:	22000301 	andcs	r0, r0, #67108864	; 0x4000000
    7f74:	00001ba6 	andeq	r1, r0, r6, lsr #23
    7f78:	0f01a10d 	svceq	0x0001a10d
    7f7c:	00000059 	andeq	r0, r0, r9, asr r0
    7f80:	00020101 	andeq	r0, r2, r1, lsl #2
    7f84:	0d011b00 	vstreq	d1, [r1, #-0]
    7f88:	aa0401aa 	bge	108638 <__ccfg+0xe8690>
    7f8c:	22000014 	andcs	r0, r0, #20
    7f90:	000017f9 	strdeq	r1, [r0], -r9
    7f94:	0f01ab0d 	svceq	0x0001ab0d
    7f98:	00000059 	andeq	r0, r0, r9, asr r0
    7f9c:	00040401 	andeq	r0, r4, r1, lsl #8
    7fa0:	00195e22 	andseq	r5, r9, r2, lsr #28
    7fa4:	01ad0d00 			; <UNDEFINED> instruction: 0x01ad0d00
    7fa8:	0000590f 	andeq	r5, r0, pc, lsl #18
    7fac:	00040100 	andeq	r0, r4, r0, lsl #2
    7fb0:	011b0000 	tsteq	fp, r0
    7fb4:	0401b00d 	streq	fp, [r1], #-13
    7fb8:	000014f9 	strdeq	r1, [r0], -r9
    7fbc:	0020ed22 	eoreq	lr, r0, r2, lsr #26
    7fc0:	01b10d00 			; <UNDEFINED> instruction: 0x01b10d00
    7fc4:	0000590f 	andeq	r5, r0, pc, lsl #18
    7fc8:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    7fcc:	17f12200 	ldrbne	r2, [r1, r0, lsl #4]!
    7fd0:	b20d0000 	andlt	r0, sp, #0
    7fd4:	00590f01 	subseq	r0, r9, r1, lsl #30
    7fd8:	01010000 	mrseq	r0, (UNDEF: 1)
    7fdc:	2d220003 	stccs	0, cr0, [r2, #-12]!
    7fe0:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    7fe4:	590f01b4 	stmdbpl	pc, {r2, r4, r5, r7, r8}	; <UNPREDICTABLE>
    7fe8:	01000000 	mrseq	r0, (UNDEF: 0)
    7fec:	22000102 	andcs	r0, r0, #-2147483648	; 0x80000000
    7ff0:	00001591 	muleq	r0, r1, r5
    7ff4:	0f01b50d 	svceq	0x0001b50d
    7ff8:	00000059 	andeq	r0, r0, r9, asr r0
    7ffc:	00000101 	andeq	r0, r0, r1, lsl #2
    8000:	0d011b00 	vstreq	d1, [r1, #-0]
    8004:	48040222 	stmdami	r4, {r1, r5, r9}
    8008:	22000015 	andcs	r0, r0, #21
    800c:	000020ed 	andeq	r2, r0, sp, ror #1
    8010:	0f02230d 	svceq	0x0002230d
    8014:	00000059 	andeq	r0, r0, r9, asr r0
    8018:	00040401 	andeq	r0, r4, r1, lsl #8
    801c:	0017f122 	andseq	pc, r7, r2, lsr #2
    8020:	02240d00 	eoreq	r0, r4, #0, 26
    8024:	0000590f 	andeq	r5, r0, pc, lsl #18
    8028:	03010100 	movweq	r0, #4352	; 0x1100
    802c:	192d2200 	pushne	{r9, sp}
    8030:	260d0000 	strcs	r0, [sp], -r0
    8034:	00590f02 	subseq	r0, r9, r2, lsl #30
    8038:	02010000 	andeq	r0, r1, #0
    803c:	91220001 			; <UNDEFINED> instruction: 0x91220001
    8040:	0d000015 	stceq	0, cr0, [r0, #-84]	; 0xffffffac
    8044:	590f0227 	stmdbpl	pc, {r0, r1, r2, r5, r9}	; <UNPREDICTABLE>
    8048:	01000000 	mrseq	r0, (UNDEF: 0)
    804c:	00000001 	andeq	r0, r0, r1
    8050:	2a0d011b 	bcs	3484c4 <__ccfg+0x32851c>
    8054:	15750402 	ldrbne	r0, [r5, #-1026]!	; 0xfffffbfe
    8058:	84220000 	strthi	r0, [r2], #-0
    805c:	0d00001e 	stceq	0, cr0, [r0, #-120]	; 0xffffff88
    8060:	590f022b 	stmdbpl	pc, {r0, r1, r3, r5, r9}	; <UNPREDICTABLE>
    8064:	01000000 	mrseq	r0, (UNDEF: 0)
    8068:	22000404 	andcs	r0, r0, #4, 8	; 0x4000000
    806c:	0000203d 	andeq	r2, r0, sp, lsr r0
    8070:	0f022c0d 	svceq	0x00022c0d
    8074:	00000059 	andeq	r0, r0, r9, asr r0
    8078:	00000401 	andeq	r0, r0, r1, lsl #8
    807c:	0d021b00 	vstreq	d1, [r2, #-0]
    8080:	a204022e 	andge	r0, r4, #-536870910	; 0xe0000002
    8084:	22000015 	andcs	r0, r0, #21
    8088:	000019ac 	andeq	r1, r0, ip, lsr #19
    808c:	10022f0d 	andne	r2, r2, sp, lsl #30
    8090:	0000006c 	andeq	r0, r0, ip, rrx
    8094:	000d0302 	andeq	r0, sp, r2, lsl #6
    8098:	00200822 	eoreq	r0, r0, r2, lsr #16
    809c:	02320d00 	eorseq	r0, r2, #0, 26
    80a0:	00006c10 	andeq	r6, r0, r0, lsl ip
    80a4:	000d0200 	andeq	r0, sp, r0, lsl #4
    80a8:	041b0000 	ldreq	r0, [fp], #-0
    80ac:	0402340d 	streq	r3, [r2], #-1037	; 0xfffffbf3
    80b0:	000015cf 	andeq	r1, r0, pc, asr #11
    80b4:	001bbb22 	andseq	fp, fp, r2, lsr #22
    80b8:	02350d00 	eorseq	r0, r5, #0, 26
    80bc:	00007f10 	andeq	r7, r0, r0, lsl pc
    80c0:	1c040400 	cfstrsne	mvf0, [r4], {-0}
    80c4:	1ce12200 	sfmne	f2, 2, [r1]
    80c8:	370d0000 	strcc	r0, [sp, -r0]
    80cc:	007f1002 	rsbseq	r1, pc, r2
    80d0:	15040000 	strne	r0, [r4, #-0]
    80d4:	1b000003 	blne	80e8 <__exidx_end+0x3394>
    80d8:	023a0d01 	eorseq	r0, sl, #1, 26	; 0x40
    80dc:	0015fc04 	andseq	pc, r5, r4, lsl #24
    80e0:	1ecd2200 	cdpne	2, 12, cr2, cr13, cr0, {0}
    80e4:	3b0d0000 	blcc	3480ec <__ccfg+0x328144>
    80e8:	00590f02 	subseq	r0, r9, r2, lsl #30
    80ec:	06010000 	streq	r0, [r1], -r0
    80f0:	0b220002 	bleq	888100 <__ccfg+0x868158>
    80f4:	0d000016 	stceq	0, cr0, [r0, #-88]	; 0xffffffa8
    80f8:	590f023d 	stmdbpl	pc, {r0, r2, r3, r4, r5, r9}	; <UNPREDICTABLE>
    80fc:	01000000 	mrseq	r0, (UNDEF: 0)
    8100:	00000002 	andeq	r0, r0, r2
    8104:	420d021b 	andmi	r0, sp, #-1342177279	; 0xb0000001
    8108:	165c0402 	ldrbne	r0, [ip], -r2, lsl #8
    810c:	c4220000 	strtgt	r0, [r2], #-0
    8110:	0d00001b 	stceq	0, cr0, [r0, #-108]	; 0xffffff94
    8114:	6c100243 	lfmvs	f0, 4, [r0], {67}	; 0x43
    8118:	02000000 	andeq	r0, r0, #0
    811c:	22000a06 	andcs	r0, r0, #24576	; 0x6000
    8120:	00001a1a 	andeq	r1, r0, sl, lsl sl
    8124:	1002440d 	andne	r4, r2, sp, lsl #8
    8128:	0000006c 	andeq	r0, r0, ip, rrx
    812c:	00090102 	andeq	r0, r9, r2, lsl #2
    8130:	001c3d22 	andseq	r3, ip, r2, lsr #26
    8134:	02460d00 	subeq	r0, r6, #0, 26
    8138:	00006c10 	andeq	r6, r0, r0, lsl ip
    813c:	08010200 	stmdaeq	r1, {r9}
    8140:	15e12200 	strbne	r2, [r1, #512]!	; 0x200
    8144:	480d0000 	stmdami	sp, {}	; <UNPREDICTABLE>
    8148:	006c1002 	rsbeq	r1, ip, r2
    814c:	04020000 	streq	r0, [r2], #-0
    8150:	74220004 	strtvc	r0, [r2], #-4
    8154:	0d000015 	stceq	0, cr0, [r0, #-84]	; 0xffffffac
    8158:	6c10024d 	lfmvs	f0, 4, [r0], {77}	; 0x4d
    815c:	02000000 	andeq	r0, r0, #0
    8160:	00000003 	andeq	r0, r0, r3
    8164:	560d021b 			; <UNDEFINED> instruction: 0x560d021b
    8168:	16ab0402 	strtne	r0, [fp], r2, lsl #8
    816c:	f4220000 	vld4.8	{d0-d3}, [r2], r0
    8170:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
    8174:	6c100257 	lfmvs	f0, 4, [r0], {87}	; 0x57
    8178:	02000000 	andeq	r0, r0, #0
    817c:	22000d03 	andcs	r0, r0, #3, 26	; 0xc0
    8180:	00001868 	andeq	r1, r0, r8, ror #16
    8184:	10025d0d 	andne	r5, r2, sp, lsl #26
    8188:	0000006c 	andeq	r0, r0, ip, rrx
    818c:	000c0102 	andeq	r0, ip, r2, lsl #2
    8190:	0017e322 	andseq	lr, r7, r2, lsr #6
    8194:	025f0d00 	subseq	r0, pc, #0, 26
    8198:	00006c10 	andeq	r6, r0, r0, lsl ip
    819c:	06060200 	streq	r0, [r6], -r0, lsl #4
    81a0:	1c102200 	lfmne	f2, 4, [r0], {-0}
    81a4:	660d0000 	strvs	r0, [sp], -r0
    81a8:	006c1002 	rsbeq	r1, ip, r2
    81ac:	01020000 	mrseq	r0, (UNDEF: 2)
    81b0:	02000005 	andeq	r0, r0, #5
    81b4:	00001e06 	andeq	r1, r0, r6, lsl #28
    81b8:	b7343c0e 	ldrlt	r3, [r4, -lr, lsl #24]!
    81bc:	0f000016 	svceq	0x00000016
    81c0:	00001def 	andeq	r1, r0, pc, ror #27
    81c4:	155e0e0c 	ldrbne	r0, [lr, #-3596]	; 0xfffff1f4
    81c8:	00001706 	andeq	r1, r0, r6, lsl #14
    81cc:	0016b90d 	andseq	fp, r6, sp, lsl #18
    81d0:	0d5f0e00 	ldcleq	14, cr0, [pc, #-0]	; 81d8 <__exidx_end+0x3484>
    81d4:	00000984 	andeq	r0, r0, r4, lsl #19
    81d8:	19760d00 	ldmdbne	r6!, {r8, sl, fp}^
    81dc:	600e0000 	andvs	r0, lr, r0
    81e0:	0000590c 	andeq	r5, r0, ip, lsl #18
    81e4:	b20d0400 	andlt	r0, sp, #0, 8
    81e8:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
    81ec:	1706066e 	strne	r0, [r6, -lr, ror #12]
    81f0:	0d050000 	stceq	0, cr0, [r5, #-0]
    81f4:	00000f2c 	andeq	r0, r0, ip, lsr #30
    81f8:	6c0d6f0e 	stcvs	15, cr6, [sp], {14}
    81fc:	06000000 	streq	r0, [r0], -r0
    8200:	000f880d 	andeq	r8, pc, sp, lsl #16
    8204:	0c710e00 	ldcleq	14, cr0, [r1], #-0
    8208:	00000059 	andeq	r0, r0, r9, asr r0
    820c:	010c0008 	tsteq	ip, r8
    8210:	4004610e 	andmi	r6, r4, lr, lsl #2
    8214:	21000017 	tstcs	r0, r7, lsl r0
    8218:	00002636 	andeq	r2, r0, r6, lsr r6
    821c:	590f620e 	stmdbpl	pc, {r1, r2, r3, r9, sp, lr}	; <UNPREDICTABLE>
    8220:	01000000 	mrseq	r0, (UNDEF: 0)
    8224:	21000602 	tstcs	r0, r2, lsl #12
    8228:	00001dc1 	andeq	r1, r0, r1, asr #27
    822c:	590f670e 	stmdbpl	pc, {r1, r2, r3, r8, r9, sl, sp, lr}	; <UNPREDICTABLE>
    8230:	01000000 	mrseq	r0, (UNDEF: 0)
    8234:	21000402 	tstcs	r0, r2, lsl #8
    8238:	0000165e 	andeq	r1, r0, lr, asr r6
    823c:	590f6c0e 	stmdbpl	pc, {r1, r2, r3, sl, fp, sp, lr}	; <UNPREDICTABLE>
    8240:	01000000 	mrseq	r0, (UNDEF: 0)
    8244:	00000004 	andeq	r0, r0, r4
    8248:	4802100c 	stmdami	r2, {r2, r3, ip}
    824c:	00177e09 	andseq	r7, r7, r9, lsl #28
    8250:	18960d00 	ldmne	r6, {r8, sl, fp}
    8254:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    8258:	00007f0d 	andeq	r7, r0, sp, lsl #30
    825c:	ca0d0000 	bgt	348264 <__ccfg+0x3282bc>
    8260:	02000017 	andeq	r0, r0, #23
    8264:	007f0d4a 	rsbseq	r0, pc, sl, asr #26
    8268:	0d040000 	stceq	0, cr0, [r4, #-0]
    826c:	00001d9d 	muleq	r0, sp, sp
    8270:	7f0d4b02 	svcvc	0x000d4b02
    8274:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8278:	001f420d 	andseq	r4, pc, sp, lsl #4
    827c:	0d4c0200 	sfmeq	f0, 2, [ip, #-0]
    8280:	0000007f 	andeq	r0, r0, pc, ror r0
    8284:	4802000c 	stmdami	r2, {r2, r3}
    8288:	02000016 	andeq	r0, r0, #22
    828c:	1740034d 	strbne	r0, [r0, -sp, asr #6]
    8290:	8b0a0000 	blhi	288298 <__ccfg+0x2682f0>
    8294:	9a000000 	bls	829c <__exidx_end+0x3548>
    8298:	0b000017 	bleq	82fc <__exidx_end+0x35a8>
    829c:	000000aa 	andeq	r0, r0, sl, lsr #1
    82a0:	8a0400a2 	bhi	108530 <__ccfg+0xe8588>
    82a4:	23000017 	movwcs	r0, #23
    82a8:	00001aae 	andeq	r1, r0, lr, lsr #21
    82ac:	9a104904 	bls	41a6c4 <__ccfg+0x3fa71c>
    82b0:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    82b4:	004a8403 	subeq	r8, sl, r3, lsl #8
    82b8:	008b0a00 	addeq	r0, fp, r0, lsl #20
    82bc:	17c20000 	strbne	r0, [r2, r0]
    82c0:	aa240000 	bge	9082c8 <__ccfg+0x8e8320>
    82c4:	ac000000 	stcge	0, cr0, [r0], {-0}
    82c8:	b1040001 	tstlt	r4, r1
    82cc:	23000017 	movwcs	r0, #23
    82d0:	00001b11 	andeq	r1, r0, r1, lsl fp
    82d4:	c2103a05 	andsgt	r3, r0, #20480	; 0x5000
    82d8:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    82dc:	0043d003 	subeq	sp, r3, r3
    82e0:	227c0200 	rsbscs	r0, ip, #0, 4
    82e4:	270f0000 	strcs	r0, [pc, -r0]
    82e8:	00006c12 	andeq	r6, r0, r2, lsl ip
    82ec:	17d90400 	ldrbne	r0, [r9, r0, lsl #8]
    82f0:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
    82f4:	02000017 	andeq	r0, r0, #23
    82f8:	000013fc 	strdeq	r1, [r0], -ip
    82fc:	59122b0f 	ldmdbpl	r2, {r0, r1, r2, r3, r8, r9, fp, sp}
    8300:	05000000 	streq	r0, [r0, #-0]
    8304:	000017ef 	andeq	r1, r0, pc, ror #15
    8308:	0022cd02 	eoreq	ip, r2, r2, lsl #26
    830c:	122c0f00 	eorne	r0, ip, #0, 30
    8310:	0000007f 	andeq	r0, r0, pc, ror r0
    8314:	00180004 	andseq	r0, r8, r4
    8318:	02ef0200 	rsceq	r0, pc, #0, 4
    831c:	2d0f0000 	stccs	0, cr0, [pc, #-0]	; 8324 <__exidx_end+0x35d0>
    8320:	00007f12 	andeq	r7, r0, r2, lsl pc
    8324:	03640200 	cmneq	r4, #0, 4
    8328:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    832c:	00182910 	andseq	r2, r8, r0, lsl r9
    8330:	d9041100 	stmdble	r4, {r8, ip}
    8334:	0c000017 	stceq	0, cr0, [r0], {23}
    8338:	09320f08 	ldmdbeq	r2!, {r3, r8, r9, sl, fp}
    833c:	000018bd 			; <UNDEFINED> instruction: 0x000018bd
    8340:	00031821 	andeq	r1, r3, r1, lsr #16
    8344:	07340f00 	ldreq	r0, [r4, -r0, lsl #30]!
    8348:	000017ef 	andeq	r1, r0, pc, ror #15
    834c:	00070101 	andeq	r0, r7, r1, lsl #2
    8350:	00009e21 	andeq	r9, r0, r1, lsr #28
    8354:	03350f00 	teqeq	r5, #0, 30
    8358:	000017ef 	andeq	r1, r0, pc, ror #15
    835c:	00060101 	andeq	r0, r6, r1, lsl #2
    8360:	0002bf21 	andeq	fp, r2, r1, lsr #30
    8364:	03360f00 	teqeq	r6, #0, 30
    8368:	000017ef 	andeq	r1, r0, pc, ror #15
    836c:	00050101 	andeq	r0, r5, r1, lsl #2
    8370:	00048c21 	andeq	r8, r4, r1, lsr #24
    8374:	03370f00 	teqeq	r7, #0, 30
    8378:	000017ef 	andeq	r1, r0, pc, ror #15
    837c:	00040101 	andeq	r0, r4, r1, lsl #2
    8380:	00048521 	andeq	r8, r4, r1, lsr #10
    8384:	03380f00 	teqeq	r8, #0, 30
    8388:	000017ef 	andeq	r1, r0, pc, ror #15
    838c:	00000401 	andeq	r0, r0, r1, lsl #8
    8390:	0004760d 	andeq	r7, r4, sp, lsl #12
    8394:	073a0f00 	ldreq	r0, [sl, -r0, lsl #30]!
    8398:	000017ef 	andeq	r1, r0, pc, ror #15
    839c:	002b0d01 	eoreq	r0, fp, r1, lsl #26
    83a0:	3c0f0000 	stccc	0, cr0, [pc], {-0}
    83a4:	0017ef03 	andseq	lr, r7, r3, lsl #30
    83a8:	720d0200 	andvc	r0, sp, #0, 4
    83ac:	0f000000 	svceq	0x00000000
    83b0:	17ef033d 			; <UNDEFINED> instruction: 0x17ef033d
    83b4:	0d030000 	stceq	0, cr0, [r3, #-0]
    83b8:	0000014f 	andeq	r0, r0, pc, asr #2
    83bc:	00083f0f 	andeq	r3, r8, pc, lsl #30
    83c0:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    83c4:	04d40200 	ldrbeq	r0, [r4], #512	; 0x200
    83c8:	410f0000 	mrsmi	r0, CPSR
    83cc:	00182f03 	andseq	r2, r8, r3, lsl #30
    83d0:	18bd0500 	popne	{r8, sl}
    83d4:	0c250000 	stceq	0, cr0, [r5], #-0
    83d8:	0f000003 	svceq	0x00000003
    83dc:	18c91a43 	stmiane	r9, {r0, r1, r6, r9, fp, ip}^
    83e0:	01010000 	mrseq	r0, (UNDEF: 1)
    83e4:	00038e25 	andeq	r8, r3, r5, lsr #28
    83e8:	0e450f00 	cdpeq	15, 4, cr0, cr5, cr0, {0}
    83ec:	000005eb 	andeq	r0, r0, fp, ror #11
    83f0:	a4250101 	strtge	r0, [r5], #-257	; 0xfffffeff
    83f4:	0f000003 	svceq	0x00000003
    83f8:	05eb1e45 	strbeq	r1, [fp, #3653]!	; 0xe45
    83fc:	01010000 	mrseq	r0, (UNDEF: 1)
    8400:	8f10080c 	svchi	0x0010080c
    8404:	00192909 	andseq	r2, r9, r9, lsl #18
    8408:	19fd0d00 	ldmibne	sp!, {r8, sl, fp}^
    840c:	90100000 	andsls	r0, r0, r0
    8410:	00007f0b 	andeq	r7, r0, fp, lsl #30
    8414:	b30d0000 	movwlt	r0, #53248	; 0xd000
    8418:	10000006 	andne	r0, r0, r6
    841c:	17d90891 	bfine	r0, r1, #17, #9
    8420:	0d040000 	stceq	0, cr0, [r4, #-0]
    8424:	000015be 			; <UNDEFINED> instruction: 0x000015be
    8428:	fb109210 	blx	42cc72 <__ccfg+0x40ccca>
    842c:	06000017 			; <UNDEFINED> instruction: 0x06000017
    8430:	04930200 	ldreq	r0, [r3], #512	; 0x200
    8434:	93100000 	tstls	r0, #0
    8438:	0018f803 	andseq	pc, r8, r3, lsl #16
    843c:	19290a00 	stmdbne	r9!, {r9, fp}
    8440:	19400000 	stmdbne	r0, {}^	; <UNPREDICTABLE>
    8444:	00260000 	eoreq	r0, r6, r0
    8448:	00002125 	andeq	r2, r0, r5, lsr #2
    844c:	0f991000 	svceq	0x00991000
    8450:	00001935 	andeq	r1, r0, r5, lsr r9
    8454:	010c0101 	tsteq	ip, r1, lsl #2
    8458:	78099111 	stmdavc	r9, {r0, r4, r8, ip, pc}
    845c:	21000019 	tstcs	r0, r9, lsl r0
    8460:	0000050c 	andeq	r0, r0, ip, lsl #10
    8464:	ef079311 	svc	0x00079311
    8468:	01000017 	tsteq	r0, r7, lsl r0
    846c:	21000107 	tstcs	r0, r7, lsl #2
    8470:	0000001c 	andeq	r0, r0, ip, lsl r0
    8474:	ef039411 	svc	0x00039411
    8478:	01000017 	tsteq	r0, r7, lsl r0
    847c:	00000001 	andeq	r0, r0, r1
    8480:	00029d02 	andeq	r9, r2, r2, lsl #26
    8484:	03961100 	orrseq	r1, r6, #0, 2
    8488:	0000194e 	andeq	r1, r0, lr, asr #18
    848c:	00197804 	andseq	r7, r9, r4, lsl #16
    8490:	19840a00 	stmibne	r4, {r9, fp}
    8494:	19940000 	ldmibne	r4, {}	; <UNPREDICTABLE>
    8498:	00260000 	eoreq	r0, r6, r0
    849c:	00198904 	andseq	r8, r9, r4, lsl #18
    84a0:	03572500 	cmpeq	r7, #0, 10
    84a4:	9c110000 	ldcls	0, cr0, [r1], {-0}
    84a8:	00199417 	andseq	r9, r9, r7, lsl r4
    84ac:	0a010100 	beq	488b4 <__ccfg+0x2890c>
    84b0:	000017e5 	andeq	r1, r0, r5, ror #15
    84b4:	000019b2 			; <UNDEFINED> instruction: 0x000019b2
    84b8:	a7040026 	strge	r0, [r4, -r6, lsr #32]
    84bc:	25000019 	strcs	r0, [r0, #-25]	; 0xffffffe7
    84c0:	000003d5 	ldrdeq	r0, [r0], -r5
    84c4:	b2130612 	andslt	r0, r3, #18874368	; 0x1200000
    84c8:	01000019 	tsteq	r0, r9, lsl r0
    84cc:	01342501 	teqeq	r4, r1, lsl #10
    84d0:	c3100000 	tstgt	r0, #0
    84d4:	0018000e 	andseq	r0, r8, lr
    84d8:	07010100 	streq	r0, [r1, -r0, lsl #2]
    84dc:	00000548 	andeq	r0, r0, r8, asr #10
    84e0:	10016e13 	andne	r6, r1, r3, lsl lr
    84e4:	000019e0 	andeq	r1, r0, r0, ror #19
    84e8:	19e60411 	stmibne	r6!, {r0, r4, sl}^
    84ec:	011f0000 	tsteq	pc, r0
    84f0:	000019f2 	strdeq	r1, [r0], -r2
    84f4:	0017d916 	andseq	sp, r7, r6, lsl r9
    84f8:	f80a0000 			; <UNDEFINED> instruction: 0xf80a0000
    84fc:	fd000005 	stc2	0, cr0, [r0, #-20]	; 0xffffffec
    8500:	26000019 			; <UNDEFINED> instruction: 0x26000019
    8504:	19f20400 	ldmibne	r2!, {sl}^
    8508:	e4200000 	strt	r0, [r0], #-0
    850c:	13000004 	movwne	r0, #4
    8510:	fd16017f 	ldc2	1, cr0, [r6, #-508]	; 0xfffffe04
    8514:	01000019 	tsteq	r0, r9, lsl r0
    8518:	03c12001 	biceq	r2, r1, #1
    851c:	82130000 	andshi	r0, r3, #0
    8520:	180c1401 	stmdane	ip, {r0, sl, ip}
    8524:	01010000 	mrseq	r0, (UNDEF: 1)
    8528:	00051120 	andeq	r1, r5, r0, lsr #2
    852c:	02d81300 	sbcseq	r1, r8, #0, 6
    8530:	0018000e 	andseq	r0, r8, lr
    8534:	1b010100 	blne	4893c <__ccfg+0x28994>
    8538:	03031308 	movweq	r1, #13064	; 0x3308
    853c:	001a5609 	andseq	r5, sl, r9, lsl #12
    8540:	361b1800 	ldrcc	r1, [fp], -r0, lsl #16
    8544:	07130000 	ldreq	r0, [r3, -r0]
    8548:	17d90703 	ldrbne	r0, [r9, r3, lsl #14]
    854c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    8550:	0000060b 	andeq	r0, r0, fp, lsl #12
    8554:	08030813 	stmdaeq	r3, {r0, r1, r4, fp}
    8558:	00001811 	andeq	r1, r0, r1, lsl r8
    855c:	75070004 	strvc	r0, [r7, #-4]
    8560:	13000002 	movwne	r0, #2
    8564:	2f030309 	svccs	0x00030309
    8568:	1a00001a 	bne	85d8 <__exidx_end+0x3884>
    856c:	00000558 	andeq	r0, r0, r8, asr r5
    8570:	030b1330 	movweq	r1, #45872	; 0xb330
    8574:	001ac608 	andseq	ip, sl, r8, lsl #12
    8578:	15121800 	ldrne	r1, [r2, #-2048]	; 0xfffff800
    857c:	14130000 	ldrne	r0, [r3], #-0
    8580:	17d90803 	ldrbne	r0, [r9, r3, lsl #16]
    8584:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    8588:	0000032d 	andeq	r0, r0, sp, lsr #6
    858c:	08031513 	stmdaeq	r3, {r0, r1, r4, r8, sl, ip}
    8590:	000017d9 	ldrdeq	r1, [r0], -r9
    8594:	054b1802 	strbeq	r1, [fp, #-2050]	; 0xfffff7fe
    8598:	16130000 	ldrne	r0, [r3], -r0
    859c:	19d30b03 	ldmibne	r3, {r0, r1, r8, r9, fp}^
    85a0:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    85a4:	00000f88 	andeq	r0, r0, r8, lsl #31
    85a8:	09031713 	stmdbeq	r3, {r0, r1, r4, r8, r9, sl, ip}
    85ac:	00001811 	andeq	r1, r0, r1, lsl r8
    85b0:	04dd1808 	ldrbeq	r1, [sp], #2056	; 0x808
    85b4:	18130000 	ldmdane	r3, {}	; <UNPREDICTABLE>
    85b8:	1ac60f03 	bne	ff18c1cc <_estack+0xdf1871cc>
    85bc:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    85c0:	00000328 	andeq	r0, r0, r8, lsr #6
    85c4:	15031913 	strne	r1, [r3, #-2323]	; 0xfffff6ed
    85c8:	00001ad6 	ldrdeq	r1, [r0], -r6
    85cc:	560a002c 	strpl	r0, [sl], -ip, lsr #32
    85d0:	d600001a 			; <UNDEFINED> instruction: 0xd600001a
    85d4:	0b00001a 	bleq	8644 <__exidx_end+0x38f0>
    85d8:	000000aa 	andeq	r0, r0, sl, lsr #1
    85dc:	04110003 	ldreq	r0, [r1], #-3
    85e0:	00001a63 	andeq	r1, r0, r3, ror #20
    85e4:	00056307 	andeq	r6, r5, r7, lsl #6
    85e8:	031c1300 	tsteq	ip, #0, 6
    85ec:	001a631b 	andseq	r6, sl, fp, lsl r3
    85f0:	03b72000 			; <UNDEFINED> instruction: 0x03b72000
    85f4:	1e130000 	cdpne	0, 1, cr0, cr3, cr0, {0}
    85f8:	1af81403 	bne	ffe0d60c <_estack+0xdfe0860c>
    85fc:	01010000 	mrseq	r0, (UNDEF: 1)
    8600:	1adc0411 	bne	ff70964c <_estack+0xdf70464c>
    8604:	11250000 			; <UNDEFINED> instruction: 0x11250000
    8608:	14000000 	strne	r0, [r0], #-0
    860c:	17d9131d 	bfine	r1, sp, #6, #20
    8610:	01010000 	mrseq	r0, (UNDEF: 1)
    8614:	00031f25 	andeq	r1, r3, r5, lsr #30
    8618:	1a1e1400 	bne	78d620 <__ccfg+0x76d678>
    861c:	000017ea 	andeq	r1, r0, sl, ror #15
    8620:	c0250101 	eorgt	r0, r5, r1, lsl #2
    8624:	14000004 	strne	r0, [r0], #-4
    8628:	17ea241e 			; <UNDEFINED> instruction: 0x17ea241e
    862c:	01010000 	mrseq	r0, (UNDEF: 1)
    8630:	0000d425 	andeq	sp, r0, r5, lsr #8
    8634:	14221400 	strtne	r1, [r2], #-1024	; 0xfffffc00
    8638:	00001af8 	strdeq	r1, [r0], -r8
    863c:	cc250101 	stfgts	f0, [r5], #-4
    8640:	15000016 	strne	r0, [r0, #-22]	; 0xffffffea
    8644:	0f6d2739 	svceq	0x006d2739
    8648:	01010000 	mrseq	r0, (UNDEF: 1)
    864c:	001aee25 	andseq	lr, sl, r5, lsr #28
    8650:	153a1500 	ldrne	r1, [sl, #-1280]!	; 0xfffffb00
    8654:	000009fe 	strdeq	r0, [r0], -lr
    8658:	6d250101 	stfvss	f0, [r5, #-4]!
    865c:	15000020 	strne	r0, [r0, #-32]	; 0xffffffe0
    8660:	0cec1a3b 	vstmiaeq	ip!, {s3-s61}
    8664:	01010000 	mrseq	r0, (UNDEF: 1)
    8668:	001e8925 	andseq	r8, lr, r5, lsr #18
    866c:	1a3c1500 	bne	f0da74 <__ccfg+0xeedacc>
    8670:	00000d88 	andeq	r0, r0, r8, lsl #27
    8674:	b0230101 	eorlt	r0, r3, r1, lsl #2
    8678:	0100001f 	tsteq	r0, pc, lsl r0
    867c:	00a30c24 	adceq	r0, r3, r4, lsr #24
    8680:	03050000 	movweq	r0, #20480	; 0x5000
    8684:	20000198 	mulcs	r0, r8, r1
    8688:	0015a323 	andseq	sl, r5, r3, lsr #6
    868c:	0d260100 	stfeqs	f0, [r6, #-0]
    8690:	000017ef 	andeq	r1, r0, pc, ror #15
    8694:	01a40305 			; <UNDEFINED> instruction: 0x01a40305
    8698:	37232000 	strcc	r2, [r3, -r0]!
    869c:	0100000c 	tsteq	r0, ip
    86a0:	17ef0327 	strbne	r0, [pc, r7, lsr #6]!
    86a4:	03050000 	movweq	r0, #20480	; 0x5000
    86a8:	20000194 	mulcs	r0, r4, r1
    86ac:	001c3523 	andseq	r3, ip, r3, lsr #10
    86b0:	0d2a0100 	stfeqs	f0, [sl, #-0]
    86b4:	000017ef 	andeq	r1, r0, pc, ror #15
    86b8:	01c60305 	biceq	r0, r6, r5, lsl #6
    86bc:	2f232000 	svccs	0x00232000
    86c0:	0100001c 	tsteq	r0, ip, lsl r0
    86c4:	17ef0d43 	strbne	r0, [pc, r3, asr #26]!
    86c8:	03050000 	movweq	r0, #20480	; 0x5000
    86cc:	2000003a 	andcs	r0, r0, sl, lsr r0
    86d0:	00179c23 	andseq	r9, r7, r3, lsr #24
    86d4:	0d470100 	stfeqe	f0, [r7, #-0]
    86d8:	000017ef 	andeq	r1, r0, pc, ror #15
    86dc:	018c0305 	orreq	r0, ip, r5, lsl #6
    86e0:	e50a2000 	str	r2, [sl, #-0]
    86e4:	ea000017 	b	8748 <__exidx_end+0x39f4>
    86e8:	0b00001b 	bleq	875c <__exidx_end+0x3a08>
    86ec:	000000aa 	andeq	r0, r0, sl, lsr #1
    86f0:	da040007 	ble	108714 <__ccfg+0xe876c>
    86f4:	2300001b 	movwcs	r0, #27
    86f8:	00001cc2 	andeq	r1, r0, r2, asr #25
    86fc:	ea134e01 	b	4dbf08 <__ccfg+0x4bbf60>
    8700:	0500001b 	streq	r0, [r0, #-27]	; 0xffffffe5
    8704:	0043be03 	subeq	fp, r3, r3, lsl #28
    8708:	204c2300 	subcs	r2, ip, r0, lsl #6
    870c:	52010000 	andpl	r0, r1, #0
    8710:	0017d90d 	andseq	sp, r7, sp, lsl #18
    8714:	9c030500 	cfstr32ls	mvfx0, [r3], {-0}
    8718:	23200001 			; <UNDEFINED> instruction: 0x23200001
    871c:	00001bdd 	ldrdeq	r1, [r0], -sp
    8720:	d9035301 	stmdble	r3, {r0, r8, r9, ip, lr}
    8724:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    8728:	0001c403 	andeq	ip, r1, r3, lsl #8
    872c:	1ed92320 	cdpne	3, 13, cr2, cr9, cr0, {1}
    8730:	54010000 	strpl	r0, [r1], #-0
    8734:	0017d903 	andseq	sp, r7, r3, lsl #18
    8738:	8a030500 	bhi	c9b40 <__ccfg+0xa9b98>
    873c:	23200001 			; <UNDEFINED> instruction: 0x23200001
    8740:	00001602 	andeq	r1, r0, r2, lsl #12
    8744:	d9035501 	stmdble	r3, {r0, r8, sl, ip, lr}
    8748:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    874c:	00003803 	andeq	r3, r0, r3, lsl #16
    8750:	01040c20 	tsteq	r4, r0, lsr #24
    8754:	1c6b0959 			; <UNDEFINED> instruction: 0x1c6b0959
    8758:	70100000 	andsvc	r0, r0, r0
    875c:	5a010073 	bpl	48930 <__ccfg+0x28988>
    8760:	0017d908 	andseq	sp, r7, r8, lsl #18
    8764:	72100000 	andsvc	r0, r0, #0
    8768:	5b010077 	blpl	4894c <__ccfg+0x289a4>
    876c:	0017d904 	andseq	sp, r7, r4, lsl #18
    8770:	02000200 	andeq	r0, r0, #0, 4
    8774:	00001b63 	andeq	r1, r0, r3, ror #22
    8778:	49035c01 	stmdbmi	r3, {r0, sl, fp, ip, lr}
    877c:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    8780:	00001c6b 	andeq	r1, r0, fp, ror #24
    8784:	001c770a 	andseq	r7, ip, sl, lsl #14
    8788:	001c8c00 	andseq	r8, ip, r0, lsl #24
    878c:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    8790:	00020000 	andeq	r0, r2, r0
    8794:	001c7c04 	andseq	r7, ip, r4, lsl #24
    8798:	1b9e2300 	blne	fe7913a0 <_estack+0xde78c3a0>
    879c:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    87a0:	001c8c18 	andseq	r8, ip, r8, lsl ip
    87a4:	10030500 	andne	r0, r3, r0, lsl #10
    87a8:	2300004d 	movwcs	r0, #77	; 0x4d
    87ac:	00001d0e 	andeq	r1, r0, lr, lsl #26
    87b0:	761b6601 	ldrvc	r6, [fp], -r1, lsl #12
    87b4:	05000010 	streq	r0, [r0, #-16]
    87b8:	0001b803 	andeq	fp, r1, r3, lsl #16
    87bc:	1ec52320 	cdpne	3, 12, cr2, cr5, cr0, {1}
    87c0:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    87c4:	0018110e 	andseq	r1, r8, lr, lsl #2
    87c8:	90030500 	andls	r0, r3, r0, lsl #10
    87cc:	23200001 			; <UNDEFINED> instruction: 0x23200001
    87d0:	000016e4 	andeq	r1, r0, r4, ror #13
    87d4:	11176901 	tstne	r7, r1, lsl #18
    87d8:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    87dc:	0001a003 	andeq	sl, r1, r3
    87e0:	1f332320 	svcne	0x00332320
    87e4:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    87e8:	000ac121 	andeq	ip, sl, r1, lsr #2
    87ec:	24030500 	strcs	r0, [r3], #-1280	; 0xfffffb00
    87f0:	23200000 	nopcs	{0}	; <UNPREDICTABLE>
    87f4:	00001946 	andeq	r1, r0, r6, asr #18
    87f8:	721a8301 	andsvc	r8, sl, #67108864	; 0x4000000
    87fc:	0500000e 	streq	r0, [r0, #-14]
    8800:	00000803 	andeq	r0, r0, r3, lsl #16
    8804:	151f2320 	ldrne	r2, [pc, #-800]	; 84ec <__exidx_end+0x3798>
    8808:	c1010000 	mrsgt	r0, (UNDEF: 1)
    880c:	00177e11 	andseq	r7, r7, r1, lsl lr
    8810:	a8030500 	stmdage	r3, {r8, sl}
    8814:	27200001 	strcs	r0, [r0, -r1]!
    8818:	00001da9 	andeq	r1, r0, r9, lsr #27
    881c:	0c020a01 			; <UNDEFINED> instruction: 0x0c020a01
    8820:	000000a3 	andeq	r0, r0, r3, lsr #1
    8824:	170b0128 	strne	r0, [fp, -r8, lsr #2]
    8828:	d7010000 	strle	r0, [r1, -r0]
    882c:	64010603 	strvs	r0, [r1], #-1539	; 0xfffff9fd
    8830:	d8000026 	stmdale	r0, {r1, r2, r5}
    8834:	01000027 	tsteq	r0, r7, lsr #32
    8838:	001da59c 	mulseq	sp, ip, r5
    883c:	68702900 	ldmdavs	r0!, {r8, fp, sp}^
    8840:	d7010079 	smlsdxle	r1, r9, r0, r0
    8844:	00a31703 	adceq	r1, r3, r3, lsl #14
    8848:	24970000 	ldrcs	r0, [r7], #0
    884c:	6d290000 	stcvs	0, cr0, [r9, #-0]
    8850:	01007362 	tsteq	r0, r2, ror #6
    8854:	a32003d7 			; <UNDEFINED> instruction: 0xa32003d7
    8858:	e1000000 	mrs	r0, (UNDEF: 0)
    885c:	2a000024 	bcs	88f4 <__exidx_end+0x3ba0>
    8860:	00001e35 	andeq	r1, r0, r5, lsr lr
    8864:	00002688 	andeq	r2, r0, r8, lsl #13
    8868:	00000d28 	andeq	r0, r0, r8, lsr #26
    886c:	0203f001 	andeq	pc, r3, #1
    8870:	00001d93 	muleq	r0, r3, sp
    8874:	000d282b 	andeq	r2, sp, fp, lsr #16
    8878:	1e432c00 	cdpne	12, 4, cr2, cr3, cr0, {0}
    887c:	4e2d0000 	cdpmi	0, 2, cr0, cr13, cr0, {0}
    8880:	0a00001e 	beq	8900 <__exidx_end+0x3bac>
    8884:	2d000025 	stccs	0, cr0, [r0, #-148]	; 0xffffff6c
    8888:	00001e5a 	andeq	r1, r0, sl, asr lr
    888c:	00002529 	andeq	r2, r0, r9, lsr #10
    8890:	001e662d 	andseq	r6, lr, sp, lsr #12
    8894:	00255200 	eoreq	r5, r5, r0, lsl #4
    8898:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    889c:	00001fcc 	andeq	r1, r0, ip, asr #31
    88a0:	0000273e 	andeq	r2, r0, lr, lsr r7
    88a4:	00000d68 	andeq	r0, r0, r8, ror #26
    88a8:	02041401 	andeq	r1, r4, #16777216	; 0x1000000
    88ac:	1b0a2f00 	blne	2944b4 <__ccfg+0x27450c>
    88b0:	4a010000 	bmi	488b8 <__ccfg+0x28910>
    88b4:	a3010c03 	movwge	r0, #7171	; 0x1c03
    88b8:	24000000 	strcs	r0, [r0], #-0
    88bc:	b400001f 	strlt	r0, [r0], #-31	; 0xffffffe1
    88c0:	01000020 	tsteq	r0, r0, lsr #32
    88c4:	001e359c 	mulseq	lr, ip, r5
    88c8:	706f2900 	rsbvc	r2, pc, r0, lsl #18
    88cc:	4a010074 	bmi	48aa4 <__ccfg+0x28afc>
    88d0:	00a31803 	adceq	r1, r3, r3, lsl #16
    88d4:	25860000 	strcs	r0, [r6]
    88d8:	76290000 	strtvc	r0, [r9], -r0
    88dc:	01006c61 	tsteq	r0, r1, ror #24
    88e0:	1d25034a 	stcne	3, cr0, [r5, #-296]!	; 0xfffffed8
    88e4:	12000018 	andne	r0, r0, #24
    88e8:	30000026 	andcc	r0, r0, r6, lsr #32
    88ec:	00746572 	rsbseq	r6, r4, r2, ror r5
    88f0:	06034c01 	streq	r4, [r3], -r1, lsl #24
    88f4:	000000a3 	andeq	r0, r0, r3, lsr #1
    88f8:	000026ca 	andeq	r2, r0, sl, asr #13
    88fc:	00197d31 	andseq	r7, r9, r1, lsr sp
    8900:	03cf0100 	biceq	r0, pc, #0, 2
    8904:	001fac01 	andseq	sl, pc, r1, lsl #24
    8908:	1c1d3100 	ldfnes	f3, [sp], {-0}
    890c:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    8910:	1f660103 	svcne	0x00660103
    8914:	45310000 	ldrmi	r0, [r1, #-0]!
    8918:	0100001e 	tsteq	r0, lr, lsl r0
    891c:	b00103cd 	andlt	r0, r1, sp, asr #7
    8920:	3200001f 	andcc	r0, r0, #31
    8924:	00001f66 	andeq	r1, r0, r6, ror #30
    8928:	00001f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    892c:	01006a30 	tsteq	r0, r0, lsr sl
    8930:	a3040359 	movwge	r0, #17241	; 0x4359
    8934:	14000000 	strne	r0, [r0], #-0
    8938:	00000027 	andeq	r0, r0, r7, lsr #32
    893c:	1a503300 	bne	1415544 <__ccfg+0x13f559c>
    8940:	07010000 	streq	r0, [r1, -r0]
    8944:	73010d03 	movwvc	r0, #7427	; 0x1d03
    8948:	3400001e 	strcc	r0, [r0], #-30	; 0xffffffe2
    894c:	0b010069 	bleq	48af8 <__ccfg+0x28b50>
    8950:	00a30603 	adceq	r0, r3, r3, lsl #12
    8954:	72340000 	eorsvc	r0, r4, #0
    8958:	0c010065 	stceq	0, cr0, [r1], {101}	; 0x65
    895c:	1e731a03 	vaddne.f32	s3, s6, s6
    8960:	64340000 	ldrtvs	r0, [r4], #-0
    8964:	0c010061 	stceq	0, cr0, [r1], {97}	; 0x61
    8968:	1e731f03 	cdpne	15, 7, cr1, cr3, cr3, {0}
    896c:	64340000 	ldrtvs	r0, [r4], #-0
    8970:	0c010062 	stceq	0, cr0, [r1], {98}	; 0x62
    8974:	1e732403 	cdpne	4, 7, cr2, cr3, cr3, {0}
    8978:	11000000 	mrsne	r0, (UNDEF: 0)
    897c:	0016ab04 	andseq	sl, r6, r4, lsl #22
    8980:	47012800 	strmi	r2, [r1, -r0, lsl #16]
    8984:	01000017 	tsteq	r0, r7, lsl r0
    8988:	0101020d 	tsteq	r1, sp, lsl #4
    898c:	00002404 	andeq	r2, r0, r4, lsl #8
    8990:	000025f4 	strdeq	r2, [r0], -r4
    8994:	1efd9c01 	cdpne	12, 15, cr9, cr13, cr1, {0}
    8998:	da350000 	ble	d489a0 <__ccfg+0xd289f8>
    899c:	01000000 	mrseq	r0, (UNDEF: 0)
    89a0:	d901020d 	stmdble	r1, {r0, r2, r3, r9}
    89a4:	27000017 	smladcs	r0, r7, r0, r0
    89a8:	31000027 	tstcc	r0, r7, lsr #32
    89ac:	000015aa 	andeq	r1, r0, sl, lsr #11
    89b0:	01021601 	tsteq	r2, r1, lsl #12
    89b4:	00002418 	andeq	r2, r0, r8, lsl r4
    89b8:	0020232e 	eoreq	r2, r0, lr, lsr #6
    89bc:	00247a00 	eoreq	r7, r4, r0, lsl #20
    89c0:	000cc800 	andeq	ip, ip, r0, lsl #16
    89c4:	02250100 	eoreq	r0, r5, #0, 2
    89c8:	1ff32a04 	svcne	0x00f32a04
    89cc:	247e0000 	ldrbtcs	r0, [lr], #-0
    89d0:	0ce00000 	stcleq	0, cr0, [r0]
    89d4:	26010000 	strcs	r0, [r1], -r0
    89d8:	1eeb0402 	cdpne	4, 14, cr0, cr11, cr2, {0}
    89dc:	e02b0000 	eor	r0, fp, r0
    89e0:	2d00000c 	stccs	0, cr0, [r0, #-48]	; 0xffffffd0
    89e4:	00002001 	andeq	r2, r0, r1
    89e8:	00002750 	andeq	r2, r0, r0, asr r7
    89ec:	00200d2c 	eoreq	r0, r0, ip, lsr #26
    89f0:	36000000 	strcc	r0, [r0], -r0
    89f4:	00002023 	andeq	r2, r0, r3, lsr #32
    89f8:	00002502 	andeq	r2, r0, r2, lsl #10
    89fc:	0000250c 	andeq	r2, r0, ip, lsl #10
    8a00:	03026501 	movweq	r6, #9473	; 0x2501
    8a04:	96012800 	strls	r2, [r1], -r0, lsl #16
    8a08:	0100001e 	tsteq	r0, lr, lsl r0
    8a0c:	010601ec 	smlatteq	r6, ip, r1, r0
    8a10:	000025f4 	strdeq	r2, [r0], -r4
    8a14:	00002664 	andeq	r2, r0, r4, ror #12
    8a18:	1f629c01 	svcne	0x00629c01
    8a1c:	10370000 	eorsne	r0, r7, r0
    8a20:	2f00000d 	svccs	0x0000000d
    8a24:	3000001f 	andcc	r0, r0, pc, lsl r0
    8a28:	fe01006a 	cdp2	0, 0, cr0, cr1, cr10, {3}
    8a2c:	00a30201 	adceq	r0, r3, r1, lsl #4
    8a30:	276f0000 	strbcs	r0, [pc, -r0]!
    8a34:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    8a38:	000021d5 	ldrdeq	r2, [r0], -r5
    8a3c:	00002608 	andeq	r2, r0, r8, lsl #12
    8a40:	00002612 	andeq	r2, r0, r2, lsl r6
    8a44:	0201f801 	andeq	pc, r1, #65536	; 0x10000
    8a48:	00001f4a 	andeq	r1, r0, sl, asr #30
    8a4c:	0021e439 	eoreq	lr, r1, r9, lsr r4
    8a50:	f23a0000 	vhadd.s<illegal width 64>	d0, d10, d0
    8a54:	12000021 	andne	r0, r0, #33	; 0x21
    8a58:	f8000026 			; <UNDEFINED> instruction: 0xf8000026
    8a5c:	0100000c 	tsteq	r0, ip
    8a60:	390201fb 	stmdbcc	r2, {r0, r1, r3, r4, r5, r6, r7, r8}
    8a64:	00002200 	andeq	r2, r0, r0, lsl #4
    8a68:	4d3b0000 	ldcmi	0, cr0, [fp, #-0]
    8a6c:	0100001c 	tsteq	r0, ip, lsl r0
    8a70:	340d01b5 	strcc	r0, [sp], #-437	; 0xfffffe4b
    8a74:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    8a78:	01000024 	tsteq	r0, r4, lsr #32
    8a7c:	001fcc9c 	mulseq	pc, ip, ip	; <UNPREDICTABLE>
    8a80:	62643000 	rsbvs	r3, r4, #0
    8a84:	01b70100 			; <UNDEFINED> instruction: 0x01b70100
    8a88:	001e731a 	andseq	r7, lr, sl, lsl r3
    8a8c:	00278200 	eoreq	r8, r7, r0, lsl #4
    8a90:	00693400 	rsbeq	r3, r9, r0, lsl #8
    8a94:	0601b801 	streq	fp, [r1], -r1, lsl #16
    8a98:	000000a3 	andeq	r0, r0, r3, lsr #1
    8a9c:	006c7030 	rsbeq	r7, ip, r0, lsr r0
    8aa0:	0901b801 	stmdbeq	r1, {r0, fp, ip, sp, pc}
    8aa4:	000000a3 	andeq	r0, r0, r3, lsr #1
    8aa8:	000027c4 	andeq	r2, r0, r4, asr #15
    8aac:	00726e30 	rsbseq	r6, r2, r0, lsr lr
    8ab0:	0d01b801 	stceq	8, cr11, [r1, #-4]
    8ab4:	000000a3 	andeq	r0, r0, r3, lsr #1
    8ab8:	000027d7 	ldrdeq	r2, [r0], -r7
    8abc:	00220d3a 	eoreq	r0, r2, sl, lsr sp
    8ac0:	00233400 	eoreq	r3, r3, r0, lsl #8
    8ac4:	000c9800 	andeq	r9, ip, r0, lsl #16
    8ac8:	01c10100 	biceq	r0, r1, r0, lsl #2
    8acc:	221b3902 	andscs	r3, fp, #32768	; 0x8000
    8ad0:	00000000 	andeq	r0, r0, r0
    8ad4:	001b813c 	andseq	r8, fp, ip, lsr r1
    8ad8:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    8adc:	973d010d 	ldrls	r0, [sp, -sp, lsl #2]!
    8ae0:	0100001b 	tsteq	r0, fp, lsl r0
    8ae4:	040d01a0 	streq	r0, [sp], #-416	; 0xfffffe60
    8ae8:	2400001f 	strcs	r0, [r0], #-31	; 0xffffffe1
    8aec:	0100001f 	tsteq	r0, pc, lsl r0
    8af0:	1c473c9c 	mcrrne	12, 9, r3, r7, cr12
    8af4:	95010000 	strls	r0, [r1, #-0]
    8af8:	33010d01 	movwcc	r0, #7425	; 0x1d01
    8afc:	000019ca 	andeq	r1, r0, sl, asr #19
    8b00:	0d018001 	stceq	0, cr8, [r1, #-4]
    8b04:	00201901 	eoreq	r1, r0, r1, lsl #18
    8b08:	65723400 	ldrbvs	r3, [r2, #-1024]!	; 0xfffffc00
    8b0c:	01840100 	orreq	r0, r4, r0, lsl #2
    8b10:	001e731a 	andseq	r7, lr, sl, lsl r3
    8b14:	00693400 	rsbeq	r3, r9, r0, lsl #8
    8b18:	06018501 	streq	r8, [r1], -r1, lsl #10
    8b1c:	000000a3 	andeq	r0, r0, r3, lsr #1
    8b20:	1abf3c00 	bne	fefd7b28 <_estack+0xdefd2b28>
    8b24:	61010000 	mrsvs	r0, (UNDEF: 1)
    8b28:	3e010d01 	cdpcc	13, 0, cr0, cr1, cr1, {0}
    8b2c:	00001519 	andeq	r1, r0, r9, lsl r5
    8b30:	010dff01 	tsteq	sp, r1, lsl #30	; <UNPREDICTABLE>
    8b34:	0016663f 	andseq	r6, r6, pc, lsr r6
    8b38:	0de20100 	stfeqe	f0, [r2]
    8b3c:	205f0101 	subscs	r0, pc, r1, lsl #2
    8b40:	63400000 	movtvs	r0, #0
    8b44:	0100646d 	tsteq	r0, sp, ror #8
    8b48:	0bc026e2 	bleq	ff0126d8 <_estack+0xdf00d6d8>
    8b4c:	cb410000 	blgt	1048b54 <__ccfg+0x1028bac>
    8b50:	0100001f 	tsteq	r0, pc, lsl r0
    8b54:	180031e2 	stmdane	r0, {r1, r5, r6, r7, r8, ip, sp}
    8b58:	b0410000 	sublt	r0, r1, r0
    8b5c:	0100001e 	tsteq	r0, lr, lsl r0
    8b60:	18003ee2 	stmdane	r0, {r1, r5, r6, r7, r9, sl, fp, ip, sp}
    8b64:	3f000000 	svccc	0x00000000
    8b68:	000014ec 	andeq	r1, r0, ip, ror #9
    8b6c:	010dc501 	tsteq	sp, r1, lsl #10
    8b70:	00209201 	eoreq	r9, r0, r1, lsl #4
    8b74:	6d634000 	stclvs	0, cr4, [r3, #-0]
    8b78:	c5010064 	strgt	r0, [r1, #-100]	; 0xffffff9c
    8b7c:	0018001e 	andseq	r0, r8, lr, lsl r0
    8b80:	65724200 	ldrbvs	r4, [r2, #-512]!	; 0xfffffe00
    8b84:	ca010073 	bgt	48d58 <__ccfg+0x28db0>
    8b88:	0000a306 	andeq	sl, r0, r6, lsl #6
    8b8c:	6e634200 	cdpvs	2, 6, cr4, cr3, cr0, {0}
    8b90:	cd010074 	stcgt	0, cr0, [r1, #-464]	; 0xfffffe30
    8b94:	0000a306 	andeq	sl, r0, r6, lsl #6
    8b98:	ca430000 	bgt	10c8ba0 <__ccfg+0x10a8bf8>
    8b9c:	03000008 	movweq	r0, #8
    8ba0:	01010154 	tsteq	r1, r4, asr r1
    8ba4:	0020af03 	eoreq	sl, r0, r3, lsl #30
    8ba8:	075f4400 	ldrbeq	r4, [pc, -r0, lsl #8]
    8bac:	54030000 	strpl	r0, [r3], #-0
    8bb0:	007f1901 	rsbseq	r1, pc, r1, lsl #18
    8bb4:	43000000 	movwmi	r0, #0
    8bb8:	000009cf 	andeq	r0, r0, pc, asr #19
    8bbc:	01011e03 	tsteq	r1, r3, lsl #28
    8bc0:	20cc0301 	sbccs	r0, ip, r1, lsl #6
    8bc4:	5f440000 	svcpl	0x00440000
    8bc8:	03000007 	movweq	r0, #7
    8bcc:	7f17011e 	svcvc	0x0017011e
    8bd0:	00000000 	andeq	r0, r0, r0
    8bd4:	001e2b43 	andseq	r2, lr, r3, asr #22
    8bd8:	01ea0500 	mvneq	r0, r0, lsl #10
    8bdc:	61030115 	tstvs	r3, r5, lsl r1
    8be0:	34000021 	strcc	r0, [r0], #-33	; 0xffffffdf
    8be4:	05005370 	streq	r5, [r0, #-880]	; 0xfffffc90
    8be8:	611401f2 			; <UNDEFINED> instruction: 0x611401f2
    8bec:	34000021 	strcc	r0, [r0], #-33	; 0xffffffdf
    8bf0:	05004470 	streq	r4, [r0, #-1136]	; 0xfffffb90
    8bf4:	671c01f3 			; <UNDEFINED> instruction: 0x671c01f3
    8bf8:	34000021 	strcc	r0, [r0], #-33	; 0xffffffdf
    8bfc:	05003174 	streq	r3, [r0, #-372]	; 0xfffffe8c
    8c00:	7f0d01f4 	svcvc	0x000d01f4
    8c04:	34000000 	strcc	r0, [r0], #-0
    8c08:	05003274 	streq	r3, [r0, #-628]	; 0xfffffd8c
    8c0c:	7f1101f4 	svcvc	0x001101f4
    8c10:	34000000 	strcc	r0, [r0], #-0
    8c14:	05003374 	streq	r3, [r0, #-884]	; 0xfffffc8c
    8c18:	7f1501f4 	svcvc	0x001501f4
    8c1c:	34000000 	strcc	r0, [r0], #-0
    8c20:	05003474 	streq	r3, [r0, #-1140]	; 0xfffffb8c
    8c24:	7f1901f4 	svcvc	0x001901f4
    8c28:	34000000 	strcc	r0, [r0], #-0
    8c2c:	05003574 	streq	r3, [r0, #-1396]	; 0xfffffa8c
    8c30:	7f1d01f4 	svcvc	0x001d01f4
    8c34:	34000000 	strcc	r0, [r0], #-0
    8c38:	05003674 	streq	r3, [r0, #-1652]	; 0xfffff98c
    8c3c:	7f2101f4 	svcvc	0x002101f4
    8c40:	34000000 	strcc	r0, [r0], #-0
    8c44:	05003774 	streq	r3, [r0, #-1908]	; 0xfffff88c
    8c48:	7f2501f4 	svcvc	0x002501f4
    8c4c:	34000000 	strcc	r0, [r0], #-0
    8c50:	05003874 	streq	r3, [r0, #-2164]	; 0xfffff78c
    8c54:	7f2901f4 	svcvc	0x002901f4
    8c58:	27000000 	strcs	r0, [r0, -r0]
    8c5c:	00001e71 	andeq	r1, r0, r1, ror lr
    8c60:	0d01f505 	cfstr32eq	mvfx15, [r1, #-20]	; 0xffffffec
    8c64:	0000007f 	andeq	r0, r0, pc, ror r0
    8c68:	8b041100 	blhi	10d070 <__ccfg+0xed0c8>
    8c6c:	11000000 	mrsne	r0, (UNDEF: 0)
    8c70:	00009704 	andeq	r9, r0, r4, lsl #14
    8c74:	1bf54500 	blne	ffd5a07c <_estack+0xdfd5507c>
    8c78:	2f040000 	svccs	0x00040000
    8c7c:	03011501 	movweq	r1, #5377	; 0x1501
    8c80:	00178b45 	andseq	r8, r7, r5, asr #22
    8c84:	01220400 			; <UNDEFINED> instruction: 0x01220400
    8c88:	43030115 	movwmi	r0, #12565	; 0x3115
    8c8c:	0000155a 	andeq	r1, r0, sl, asr r5
    8c90:	15011104 	strne	r1, [r1, #-260]	; 0xfffffefc
    8c94:	21ad0301 			; <UNDEFINED> instruction: 0x21ad0301
    8c98:	20270000 	eorcs	r0, r7, r0
    8c9c:	0400001f 	streq	r0, [r0], #-31	; 0xffffffe1
    8ca0:	840d0113 	strhi	r0, [sp], #-275	; 0xfffffeed
    8ca4:	27000009 	strcs	r0, [r0, -r9]
    8ca8:	00001818 	andeq	r1, r0, r8, lsl r8
    8cac:	0e011404 	cdpeq	4, 0, cr1, cr1, cr4, {0}
    8cb0:	00000bc6 	andeq	r0, r0, r6, asr #23
    8cb4:	1ff44500 	svcne	0x00f44500
    8cb8:	0d040000 	stceq	0, cr0, [r4, #-0]
    8cbc:	03011501 	movweq	r1, #5377	; 0x1501
    8cc0:	001f6a43 	andseq	r6, pc, r3, asr #20
    8cc4:	01040400 	tsteq	r4, r0, lsl #8
    8cc8:	d5030115 	strle	r0, [r3, #-277]	; 0xfffffeeb
    8ccc:	27000021 	strcs	r0, [r0, -r1, lsr #32]
    8cd0:	00001822 	andeq	r1, r0, r2, lsr #16
    8cd4:	0e010604 	cfmadd32eq	mvax0, mvfx0, mvfx1, mvfx4
    8cd8:	00000bc6 	andeq	r0, r0, r6, asr #23
    8cdc:	1b884300 	blne	fe2198e4 <_estack+0xde2148e4>
    8ce0:	1d020000 	stcne	0, cr0, [r2, #-0]
    8ce4:	03010101 	movweq	r0, #4353	; 0x1101
    8ce8:	000021f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    8cec:	0019d044 	andseq	sp, r9, r4, asr #32
    8cf0:	011d0200 	tsteq	sp, r0, lsl #4
    8cf4:	00007f19 	andeq	r7, r0, r9, lsl pc
    8cf8:	2c3f0000 	ldccs	0, cr0, [pc], #-0	; 8d00 <__exidx_end+0x3fac>
    8cfc:	02000018 	andeq	r0, r0, #24
    8d00:	030101f7 	movweq	r0, #4599	; 0x11f7
    8d04:	0000220d 	andeq	r2, r0, sp, lsl #4
    8d08:	0019d041 	andseq	sp, r9, r1, asr #32
    8d0c:	1bf70200 	blne	ffdc9514 <_estack+0xdfdc4514>
    8d10:	0000007f 	andeq	r0, r0, pc, ror r0
    8d14:	18713f00 	ldmdane	r1!, {r8, r9, sl, fp, ip, sp}^
    8d18:	aa020000 	bge	88d20 <__ccfg+0x68d78>
    8d1c:	28030101 	stmdacs	r3, {r0, r8}
    8d20:	41000022 	tstmi	r0, r2, lsr #32
    8d24:	000019d0 	ldrdeq	r1, [r0], -r0
    8d28:	7f1baa02 	svcvc	0x001baa02
    8d2c:	00000000 	andeq	r0, r0, r0
    8d30:	001d8d46 	andseq	r8, sp, r6, asr #26
    8d34:	019c0200 	orrseq	r0, ip, r0, lsl #4
    8d38:	ab460301 	blge	1189944 <__ccfg+0x116999c>
    8d3c:	02000020 	andeq	r0, r0, #32
    8d40:	03010179 	movweq	r0, #4473	; 0x1179
    8d44:	00205f47 	eoreq	r5, r0, r7, asr #30
    8d48:	0020b400 	eoreq	fp, r0, r0, lsl #8
    8d4c:	0020fc00 	eoreq	pc, r0, r0, lsl #24
    8d50:	8b9c0100 	blhi	fe709158 <_estack+0xde704158>
    8d54:	48000022 	stmdami	r0, {r1, r5}
    8d58:	0000206d 	andeq	r2, r0, sp, rrx
    8d5c:	000027f5 	strdeq	r2, [r0], -r5
    8d60:	0020792d 	eoreq	r7, r0, sp, lsr #18
    8d64:	00281300 	eoreq	r1, r8, r0, lsl #6
    8d68:	20852c00 	addcs	r2, r5, r0, lsl #24
    8d6c:	5f490000 	svcpl	0x00490000
    8d70:	ca000020 	bgt	8df8 <__exidx_end+0x40a4>
    8d74:	cc000020 	stcgt	0, cr0, [r0], {32}
    8d78:	01000020 	tsteq	r0, r0, lsr #32
    8d7c:	6d480dc5 	stclvs	13, cr0, [r8, #-788]	; 0xfffffcec
    8d80:	47000020 	strmi	r0, [r0, -r0, lsr #32]
    8d84:	2c000028 	stccs	0, cr0, [r0], {40}	; 0x28
    8d88:	00002079 	andeq	r2, r0, r9, ror r0
    8d8c:	0020852c 	eoreq	r8, r0, ip, lsr #10
    8d90:	47000000 	strmi	r0, [r0, -r0]
    8d94:	00001fe9 	andeq	r1, r0, r9, ror #31
    8d98:	000020fc 	strdeq	r2, [r0], -ip
    8d9c:	00002120 	andeq	r2, r0, r0, lsr #2
    8da0:	22b09c01 	adcscs	r9, r0, #256	; 0x100
    8da4:	e9360000 	ldmdb	r6!, {}	; <UNPREDICTABLE>
    8da8:	0600001f 			; <UNDEFINED> instruction: 0x0600001f
    8dac:	14000021 	strne	r0, [r0], #-33	; 0xffffffdf
    8db0:	01000021 	tsteq	r0, r1, lsr #32
    8db4:	000d0195 	muleq	sp, r5, r1
    8db8:	00201947 	eoreq	r1, r0, r7, asr #18
    8dbc:	00212000 	eoreq	r2, r1, r0
    8dc0:	00217c00 	eoreq	r7, r1, r0, lsl #24
    8dc4:	199c0100 	ldmibne	ip, {r8}
    8dc8:	4a000023 	bmi	8e5c <__exidx_end+0x4108>
    8dcc:	00002019 	andeq	r2, r0, r9, lsl r0
    8dd0:	0000212a 	andeq	r2, r0, sl, lsr #2
    8dd4:	00002166 	andeq	r2, r0, r6, ror #2
    8dd8:	0d016101 	stfeqs	f6, [r1, #-4]
    8ddc:	0022282e 	eoreq	r2, r2, lr, lsr #16
    8de0:	00212a00 	eoreq	r2, r1, r0, lsl #20
    8de4:	000c0800 	andeq	r0, ip, r0, lsl #16
    8de8:	016f0100 	cmneq	pc, r0, lsl #2
    8dec:	20923802 	addscs	r3, r2, r2, lsl #16
    8df0:	21520000 	cmpcs	r2, r0
    8df4:	215a0000 	cmpcs	sl, r0
    8df8:	7a010000 	bvc	48e00 <__ccfg+0x28e58>
    8dfc:	23000201 	movwcs	r0, #513	; 0x201
    8e00:	a1390000 	teqge	r9, r0
    8e04:	00000020 	andeq	r0, r0, r0, lsr #32
    8e08:	0020924a 	eoreq	r9, r0, sl, asr #4
    8e0c:	00215a00 	eoreq	r5, r1, r0, lsl #20
    8e10:	00215e00 	eoreq	r5, r1, r0, lsl #28
    8e14:	017a0100 	cmneq	sl, r0, lsl #2
    8e18:	20a13902 	adccs	r3, r1, r2, lsl #18
    8e1c:	00000000 	andeq	r0, r0, r0
    8e20:	202c4700 	eorcs	r4, ip, r0, lsl #14
    8e24:	217c0000 	cmncs	ip, r0
    8e28:	21b40000 			; <UNDEFINED> instruction: 0x21b40000
    8e2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8e30:	00002344 	andeq	r2, r0, r4, asr #6
    8e34:	00203a48 	eoreq	r3, r0, r8, asr #20
    8e38:	00285a00 	eoreq	r5, r8, r0, lsl #20
    8e3c:	20464800 	subcs	r4, r6, r0, lsl #16
    8e40:	28780000 	ldmdacs	r8!, {}^	; <UNPREDICTABLE>
    8e44:	52390000 	eorspl	r0, r9, #0
    8e48:	00000020 	andeq	r0, r0, r0, lsr #32
    8e4c:	0020234b 	eoreq	r2, r0, fp, asr #6
    8e50:	0021b400 	eoreq	fp, r1, r0, lsl #8
    8e54:	00233400 	eoreq	r3, r3, r0, lsl #8
    8e58:	2a9c0100 	bcs	fe709260 <_estack+0xde704260>
    8e5c:	000020af 	andeq	r2, r0, pc, lsr #1
    8e60:	000021b4 			; <UNDEFINED> instruction: 0x000021b4
    8e64:	00000c28 	andeq	r0, r0, r8, lsr #24
    8e68:	02010801 	andeq	r0, r1, #65536	; 0x10000
    8e6c:	0000236e 	andeq	r2, r0, lr, ror #6
    8e70:	0020be39 	eoreq	fp, r0, r9, lsr lr
    8e74:	af380000 	svcge	0x00380000
    8e78:	c0000020 	andgt	r0, r0, r0, lsr #32
    8e7c:	c4000021 	strgt	r0, [r0], #-33	; 0xffffffdf
    8e80:	01000021 	tsteq	r0, r1, lsr #32
    8e84:	89020108 	stmdbhi	r2, {r3, r8}
    8e88:	39000023 	stmdbcc	r0, {r0, r1, r5}
    8e8c:	000020be 	strheq	r2, [r0], -lr
    8e90:	22322e00 	eorscs	r2, r2, #0, 28
    8e94:	21e20000 	mvncs	r0, r0
    8e98:	0c400000 	mareq	acc0, r0, r0
    8e9c:	1a010000 	bne	48ea4 <__ccfg+0x28efc>
    8ea0:	6d2a0201 	sfmvs	f0, 4, [sl, #-4]!
    8ea4:	f0000021 			; <UNDEFINED> instruction: 0xf0000021
    8ea8:	58000021 	stmdapl	r0, {r0, r5}
    8eac:	0100000c 	tsteq	r0, ip
    8eb0:	0b020121 	bleq	8933c <__ccfg+0x69394>
    8eb4:	3a000024 	bcc	8f4c <__exidx_end+0x41f8>
    8eb8:	00002178 	andeq	r2, r0, r8, ror r1
    8ebc:	000021f0 	strdeq	r2, [r0], -r0
    8ec0:	00000c58 	andeq	r0, r0, r8, asr ip
    8ec4:	04013104 	streq	r3, [r1], #-260	; 0xfffffefc
    8ec8:	0021b838 	eoreq	fp, r1, r8, lsr r8
    8ecc:	0021f000 	eoreq	pc, r1, r0
    8ed0:	0021fc00 	eoreq	pc, r1, r0, lsl #24
    8ed4:	01250400 			; <UNDEFINED> instruction: 0x01250400
    8ed8:	0023df04 	eoreq	sp, r3, r4, lsl #30
    8edc:	21c74c00 	biccs	r4, r7, r0, lsl #24
    8ee0:	041c0000 	ldreq	r0, [ip], #-0
    8ee4:	3a002100 	bcc	112ec <__exidx_end+0xc598>
    8ee8:	00002183 	andeq	r2, r0, r3, lsl #3
    8eec:	000021fc 	strdeq	r2, [r0], -ip
    8ef0:	00000c60 	andeq	r0, r0, r0, ror #24
    8ef4:	04012604 	streq	r2, [r1], #-1540	; 0xfffff9fc
    8ef8:	000c602b 	andeq	r6, ip, fp, lsr #32
    8efc:	21924c00 	orrscs	r4, r2, r0, lsl #24
    8f00:	03400000 	movteq	r0, #0
    8f04:	9f4c2100 	svcls	0x004c2100
    8f08:	bc000021 	stclt	0, cr0, [r0], {33}	; 0x21
    8f0c:	00210003 	eoreq	r0, r1, r3
    8f10:	3a000000 	bcc	8f18 <__exidx_end+0x41c4>
    8f14:	000020cc 	andeq	r2, r0, ip, asr #1
    8f18:	00002200 	andeq	r2, r0, r0, lsl #4
    8f1c:	00000c78 	andeq	r0, r0, r8, ror ip
    8f20:	02012201 	andeq	r2, r1, #268435456	; 0x10000000
    8f24:	000c782b 	andeq	r7, ip, fp, lsr #16
    8f28:	20db2d00 	sbcscs	r2, fp, r0, lsl #26
    8f2c:	28960000 	ldmcs	r6, {}	; <UNPREDICTABLE>
    8f30:	e72d0000 	str	r0, [sp, -r0]!
    8f34:	a9000020 	stmdbge	r0, {r5}
    8f38:	2c000028 	stccs	0, cr0, [r0], {40}	; 0x28
    8f3c:	000020f3 	strdeq	r2, [r0], -r3
    8f40:	0020ff2d 	eoreq	pc, r0, sp, lsr #30
    8f44:	0028c700 	eoreq	ip, r8, r0, lsl #14
    8f48:	210b2c00 	tstcs	fp, r0, lsl #24
    8f4c:	172d0000 	strne	r0, [sp, -r0]!
    8f50:	da000021 	ble	8fdc <__exidx_end+0x4288>
    8f54:	2c000028 	stccs	0, cr0, [r0], {40}	; 0x28
    8f58:	00002123 	andeq	r2, r0, r3, lsr #2
    8f5c:	00212f2d 	eoreq	r2, r1, sp, lsr #30
    8f60:	0028ed00 	eoreq	lr, r8, r0, lsl #26
    8f64:	213b2d00 	teqcs	fp, r0, lsl #26
    8f68:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    8f6c:	472d0000 	strmi	r0, [sp, -r0]!
    8f70:	2b000021 	blcs	8ffc <__exidx_end+0x42a8>
    8f74:	2c000029 	stccs	0, cr0, [r0], {41}	; 0x29
    8f78:	00002153 	andeq	r2, r0, r3, asr r1
    8f7c:	00000000 	andeq	r0, r0, r0
    8f80:	00000731 	andeq	r0, r0, r1, lsr r7
    8f84:	22900003 	addscs	r0, r0, #3
    8f88:	01040000 	mrseq	r0, (UNDEF: 4)
    8f8c:	00000181 	andeq	r0, r0, r1, lsl #3
    8f90:	0020f90c 	eoreq	pc, r0, ip, lsl #18
    8f94:	00040600 	andeq	r0, r4, r0, lsl #12
    8f98:	000de000 	andeq	lr, sp, r0
    8f9c:	00000000 	andeq	r0, r0, r0
    8fa0:	0058c800 	subseq	ip, r8, r0, lsl #16
    8fa4:	06010200 	streq	r0, [r1], -r0, lsl #4
    8fa8:	000003e5 	andeq	r0, r0, r5, ror #7
    8fac:	46050202 	strmi	r0, [r5], -r2, lsl #4
    8fb0:	02000004 	andeq	r0, r0, #4
    8fb4:	00b40504 	adcseq	r0, r4, r4, lsl #10
    8fb8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    8fbc:	0000af05 	andeq	sl, r0, r5, lsl #30
    8fc0:	239b0300 	orrscs	r0, fp, #0, 6
    8fc4:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    8fc8:	00004d17 	andeq	r4, r0, r7, lsl sp
    8fcc:	08010200 	stmdaeq	r1, {r9}
    8fd0:	000003e3 	andeq	r0, r0, r3, ror #7
    8fd4:	00279103 	eoreq	r9, r7, r3, lsl #2
    8fd8:	1c310200 	lfmne	f0, 4, [r1], #-0
    8fdc:	00000060 	andeq	r0, r0, r0, rrx
    8fe0:	8a070202 	bhi	1c97f0 <__ccfg+0x1a9848>
    8fe4:	03000002 	movweq	r0, #2
    8fe8:	00002333 	andeq	r2, r0, r3, lsr r3
    8fec:	731b3402 	tstvc	fp, #33554432	; 0x2000000
    8ff0:	02000000 	andeq	r0, r0, #0
    8ff4:	007e0704 	rsbseq	r0, lr, r4, lsl #14
    8ff8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    8ffc:	00007907 	andeq	r7, r0, r7, lsl #18
    9000:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    9004:	00746e69 	rsbseq	r6, r4, r9, ror #28
    9008:	83070402 	movwhi	r0, #29698	; 0x7402
    900c:	03000000 	movweq	r0, #0
    9010:	0000036c 	andeq	r0, r0, ip, ror #6
    9014:	9b1b2803 	blls	6d3028 <__ccfg+0x6b3080>
    9018:	05000000 	streq	r0, [r0, #-0]
    901c:	000000e2 	andeq	r0, r0, r2, ror #1
    9020:	b3000a04 	movwlt	r0, #2564	; 0xa04
    9024:	06000000 	streq	r0, [r0], -r0
    9028:	000004f7 	strdeq	r0, [r0], -r7
    902c:	000000b3 	strheq	r0, [r0], -r3
    9030:	07000100 	streq	r0, [r0, -r0, lsl #2]
    9034:	00e40304 	rsceq	r0, r4, r4, lsl #6
    9038:	63030000 	movwvs	r0, #12288	; 0x3000
    903c:	00008f18 	andeq	r8, r0, r8, lsl pc
    9040:	227c0300 	rsbscs	r0, ip, #0, 6
    9044:	27040000 	strcs	r0, [r4, -r0]
    9048:	00005412 	andeq	r5, r0, r2, lsl r4
    904c:	00c10800 	sbceq	r0, r1, r0, lsl #16
    9050:	fc030000 	stc2	0, cr0, [r3], {-0}
    9054:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    9058:	0041112b 	subeq	r1, r1, fp, lsr #2
    905c:	d2090000 	andle	r0, r9, #0
    9060:	03000000 	movweq	r0, #0
    9064:	000022cd 	andeq	r2, r0, sp, asr #5
    9068:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    906c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9070:	000000e3 	andeq	r0, r0, r3, ror #1
    9074:	0002ef03 	andeq	lr, r2, r3, lsl #30
    9078:	122d0400 	eorne	r0, sp, #0, 8
    907c:	00000067 	andeq	r0, r0, r7, rrx
    9080:	00036403 	andeq	r6, r3, r3, lsl #8
    9084:	0f2e0400 	svceq	0x002e0400
    9088:	0000010c 	andeq	r0, r0, ip, lsl #2
    908c:	00c1040a 	sbceq	r0, r1, sl, lsl #8
    9090:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    9094:	a0093204 	andge	r3, r9, r4, lsl #4
    9098:	0c000001 	stceq	0, cr0, [r0], {1}
    909c:	00000318 	andeq	r0, r0, r8, lsl r3
    90a0:	d2073404 	andle	r3, r7, #4, 8	; 0x4000000
    90a4:	01000000 	mrseq	r0, (UNDEF: 0)
    90a8:	0c000701 	stceq	7, cr0, [r0], {1}
    90ac:	0000009e 	muleq	r0, lr, r0
    90b0:	d2033504 	andle	r3, r3, #4, 10	; 0x1000000
    90b4:	01000000 	mrseq	r0, (UNDEF: 0)
    90b8:	0c000601 	stceq	6, cr0, [r0], {1}
    90bc:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
    90c0:	d2033604 	andle	r3, r3, #4, 12	; 0x400000
    90c4:	01000000 	mrseq	r0, (UNDEF: 0)
    90c8:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    90cc:	0000048c 	andeq	r0, r0, ip, lsl #9
    90d0:	d2033704 	andle	r3, r3, #4, 14	; 0x100000
    90d4:	01000000 	mrseq	r0, (UNDEF: 0)
    90d8:	0c000401 	cfstrseq	mvf0, [r0], {1}
    90dc:	00000485 	andeq	r0, r0, r5, lsl #9
    90e0:	d2033804 	andle	r3, r3, #4, 16	; 0x40000
    90e4:	01000000 	mrseq	r0, (UNDEF: 0)
    90e8:	0d000004 	stceq	0, cr0, [r0, #-16]
    90ec:	00000476 	andeq	r0, r0, r6, ror r4
    90f0:	d2073a04 	andle	r3, r7, #4, 20	; 0x4000
    90f4:	01000000 	mrseq	r0, (UNDEF: 0)
    90f8:	00002b0d 	andeq	r2, r0, sp, lsl #22
    90fc:	033c0400 	teqeq	ip, #0, 8
    9100:	000000d2 	ldrdeq	r0, [r0], -r2
    9104:	00720d02 	rsbseq	r0, r2, r2, lsl #26
    9108:	3d040000 	stccc	0, cr0, [r4, #-0]
    910c:	0000d203 	andeq	sp, r0, r3, lsl #4
    9110:	4f0d0300 	svcmi	0x000d0300
    9114:	04000001 	streq	r0, [r0], #-1
    9118:	00e3083f 	rsceq	r0, r3, pc, lsr r8
    911c:	00040000 	andeq	r0, r4, r0
    9120:	0004d403 	andeq	sp, r4, r3, lsl #8
    9124:	03410400 	movteq	r0, #5120	; 0x1400
    9128:	00000112 	andeq	r0, r0, r2, lsl r1
    912c:	0001a009 	andeq	sl, r1, r9
    9130:	030c0e00 	movweq	r0, #52736	; 0xce00
    9134:	43040000 	movwmi	r0, #16384	; 0x4000
    9138:	0001ac1a 	andeq	sl, r1, sl, lsl ip
    913c:	0e010100 	adfeqs	f0, f1, f0
    9140:	0000038e 	andeq	r0, r0, lr, lsl #7
    9144:	cd0e4504 	cfstr32gt	mvfx4, [lr, #-16]
    9148:	01000001 	tsteq	r0, r1
    914c:	d3040a01 	movwle	r0, #18945	; 0x4a01
    9150:	02000001 	andeq	r0, r0, #1
    9154:	03ec0801 	mvneq	r0, #65536	; 0x10000
    9158:	d3080000 	movwle	r0, #32768	; 0x8000
    915c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    9160:	000003a4 	andeq	r0, r0, r4, lsr #7
    9164:	cd1e4504 	cfldr32gt	mvfx4, [lr, #-16]
    9168:	01000001 	tsteq	r0, r1
    916c:	05080b01 	streq	r0, [r8, #-2817]	; 0xfffff4ff
    9170:	021e098f 	andseq	r0, lr, #2342912	; 0x23c000
    9174:	fd0d0000 	stc2	0, cr0, [sp, #-0]
    9178:	05000019 	streq	r0, [r0, #-25]	; 0xffffffe7
    917c:	00670b90 	mlseq	r7, r0, fp, r0
    9180:	0d000000 	stceq	0, cr0, [r0, #-0]
    9184:	000006b3 			; <UNDEFINED> instruction: 0x000006b3
    9188:	c1079105 	tstgt	r7, r5, lsl #2
    918c:	04000000 	streq	r0, [r0], #-0
    9190:	0015be0d 	andseq	fp, r5, sp, lsl #28
    9194:	10920500 	addsne	r0, r2, r0, lsl #10
    9198:	000000de 	ldrdeq	r0, [r0], -lr
    919c:	93030006 	movwls	r0, #12294	; 0x3006
    91a0:	05000004 	streq	r0, [r0, #-4]
    91a4:	01ed0393 			; <UNDEFINED> instruction: 0x01ed0393
    91a8:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
    91ac:	35000002 	strcc	r0, [r0, #-2]
    91b0:	10000002 	andne	r0, r0, r2
    91b4:	00210e00 	eoreq	r0, r1, r0, lsl #28
    91b8:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    91bc:	00022a0f 	andeq	r2, r2, pc, lsl #20
    91c0:	0b010100 	bleq	495c8 <__ccfg+0x29620>
    91c4:	09910601 	ldmibeq	r1, {r0, r9, sl}
    91c8:	0000026d 	andeq	r0, r0, sp, ror #4
    91cc:	00050c0c 	andeq	r0, r5, ip, lsl #24
    91d0:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    91d4:	000000d2 	ldrdeq	r0, [r0], -r2
    91d8:	00010701 	andeq	r0, r1, r1, lsl #14
    91dc:	00001c0c 	andeq	r1, r0, ip, lsl #24
    91e0:	03940600 	orrseq	r0, r4, #0, 12
    91e4:	000000d2 	ldrdeq	r0, [r0], -r2
    91e8:	00000101 	andeq	r0, r0, r1, lsl #2
    91ec:	029d0300 	addseq	r0, sp, #0, 6
    91f0:	96060000 	strls	r0, [r6], -r0
    91f4:	00024303 	andeq	r4, r2, r3, lsl #6
    91f8:	026d0800 	rsbeq	r0, sp, #0, 16
    91fc:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    9200:	89000002 	stmdbhi	r0, {r1}
    9204:	10000002 	andne	r0, r0, r2
    9208:	027e0800 	rsbseq	r0, lr, #0, 16
    920c:	570e0000 	strpl	r0, [lr, -r0]
    9210:	06000003 	streq	r0, [r0], -r3
    9214:	0289179c 	addeq	r1, r9, #156, 14	; 0x2700000
    9218:	01010000 	mrseq	r0, (UNDEF: 1)
    921c:	0000cd0f 	andeq	ip, r0, pc, lsl #26
    9220:	0002a700 	andeq	sl, r2, r0, lsl #14
    9224:	08001000 	stmdaeq	r0, {ip}
    9228:	0000029c 	muleq	r0, ip, r2
    922c:	0003d50e 	andeq	sp, r3, lr, lsl #10
    9230:	13060700 	movwne	r0, #26368	; 0x6700
    9234:	000002a7 	andeq	r0, r0, r7, lsr #5
    9238:	340e0101 	strcc	r0, [lr], #-257	; 0xfffffeff
    923c:	05000001 	streq	r0, [r0, #-1]
    9240:	00e30ec3 	rsceq	r0, r3, r3, asr #29
    9244:	01010000 	mrseq	r0, (UNDEF: 1)
    9248:	00054811 	andeq	r4, r5, r1, lsl r8
    924c:	016e0800 	cmneq	lr, r0, lsl #16
    9250:	0002d510 	andeq	sp, r2, r0, lsl r5
    9254:	db040a00 	blle	10ba5c <__ccfg+0xebab4>
    9258:	12000002 	andne	r0, r0, #2
    925c:	0002e701 	andeq	lr, r2, r1, lsl #14
    9260:	00c11300 	sbceq	r1, r1, r0, lsl #6
    9264:	0f000000 	svceq	0x00000000
    9268:	000001da 	ldrdeq	r0, [r0], -sl
    926c:	000002f2 	strdeq	r0, [r0], -r2
    9270:	e7080010 	smlad	r8, r0, r0, r0
    9274:	14000002 	strne	r0, [r0], #-2
    9278:	000004e4 	andeq	r0, r0, r4, ror #9
    927c:	13017f08 	movwne	r7, #7944	; 0x1f08
    9280:	000002f2 	strdeq	r0, [r0], -r2
    9284:	c1140101 	tstgt	r4, r1, lsl #2
    9288:	08000003 	stmdaeq	r0, {r0, r1}
    928c:	ef140182 	svc	0x00140182
    9290:	01000000 	mrseq	r0, (UNDEF: 0)
    9294:	09040b01 	stmdbeq	r4, {r0, r8, r9, fp}
    9298:	03390908 	teqeq	r9, #8, 18	; 0x20000
    929c:	9a0d0000 	bls	3492a4 <__ccfg+0x3292fc>
    92a0:	09000004 	stmdbeq	r0, {r2}
    92a4:	00c1070f 	sbceq	r0, r1, pc, lsl #14
    92a8:	0d000000 	stceq	0, cr0, [r0, #-0]
    92ac:	00000347 	andeq	r0, r0, r7, asr #6
    92b0:	c1031009 	tstgt	r3, r9
    92b4:	02000000 	andeq	r0, r0, #0
    92b8:	04500300 	ldrbeq	r0, [r0], #-768	; 0xfffffd00
    92bc:	11090000 	mrsne	r0, (UNDEF: 9)
    92c0:	00031503 	andeq	r1, r3, r3, lsl #10
    92c4:	09200b00 	stmdbeq	r0!, {r8, r9, fp}
    92c8:	03b70916 			; <UNDEFINED> instruction: 0x03b70916
    92cc:	360d0000 	strcc	r0, [sp], -r0
    92d0:	09000004 	stmdbeq	r0, {r2}
    92d4:	03d10817 	bicseq	r0, r1, #1507328	; 0x170000
    92d8:	0d000000 	stceq	0, cr0, [r0, #-0]
    92dc:	00000147 	andeq	r0, r0, r7, asr #2
    92e0:	ec081809 	stc	8, cr1, [r8], {9}
    92e4:	04000003 	streq	r0, [r0], #-3
    92e8:	0002e70d 	andeq	lr, r2, sp, lsl #14
    92ec:	08190900 	ldmdaeq	r9, {r8, fp}
    92f0:	00000422 	andeq	r0, r0, r2, lsr #8
    92f4:	039c0d08 	orrseq	r0, ip, #8, 26	; 0x200
    92f8:	1a090000 	bne	249300 <__ccfg+0x229358>
    92fc:	00043d08 	andeq	r3, r4, r8, lsl #26
    9300:	790d0c00 	stmdbvc	sp, {sl, fp}
    9304:	09000001 	stmdbeq	r0, {r0}
    9308:	0453081b 	ldrbeq	r0, [r3], #-2075	; 0xfffff7e5
    930c:	0d100000 	ldceq	0, cr0, [r0, #-0]
    9310:	0000043e 	andeq	r0, r0, lr, lsr r4
    9314:	53081c09 	movwpl	r1, #35849	; 0x8c09
    9318:	14000004 	strne	r0, [r0], #-4
    931c:	0002820d 	andeq	r8, r2, sp, lsl #4
    9320:	081d0900 	ldmdaeq	sp, {r8, fp}
    9324:	00000453 	andeq	r0, r0, r3, asr r4
    9328:	00bd0d18 	adcseq	r0, sp, r8, lsl sp
    932c:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    9330:	00008106 	andeq	r8, r0, r6, lsl #2
    9334:	15001c00 	strne	r1, [r0, #-3072]	; 0xfffff400
    9338:	00008101 	andeq	r8, r0, r1, lsl #2
    933c:	0003d100 	andeq	sp, r3, r0, lsl #2
    9340:	00811300 	addeq	r1, r1, r0, lsl #6
    9344:	81130000 	tsthi	r3, r0
    9348:	13000000 	movwne	r0, #0
    934c:	000000b5 	strheq	r0, [r0], -r5
    9350:	b7040a00 	strlt	r0, [r4, -r0, lsl #20]
    9354:	15000003 	strne	r0, [r0, #-3]
    9358:	00008101 	andeq	r8, r0, r1, lsl #2
    935c:	0003ec00 	andeq	lr, r3, r0, lsl #24
    9360:	00811300 	addeq	r1, r1, r0, lsl #6
    9364:	81130000 	tsthi	r3, r0
    9368:	00000000 	andeq	r0, r0, r0
    936c:	03d7040a 	bicseq	r0, r7, #167772160	; 0xa000000
    9370:	01150000 	tsteq	r5, r0
    9374:	00000081 	andeq	r0, r0, r1, lsl #1
    9378:	00000416 	andeq	r0, r0, r6, lsl r4
    937c:	00008113 	andeq	r8, r0, r3, lsl r1
    9380:	01001300 	mrseq	r1, LR_irq
    9384:	81130000 	tsthi	r3, r0
    9388:	13000000 	movwne	r0, #0
    938c:	00000416 	andeq	r0, r0, r6, lsl r4
    9390:	00041c13 	andeq	r1, r4, r3, lsl ip
    9394:	040a0000 	streq	r0, [sl], #-0
    9398:	00000081 	andeq	r0, r0, r1, lsl #1
    939c:	0339040a 	teqeq	r9, #167772160	; 0xa000000
    93a0:	040a0000 	streq	r0, [sl], #-0
    93a4:	000003f2 	strdeq	r0, [r0], -r2
    93a8:	00810115 	addeq	r0, r1, r5, lsl r1
    93ac:	043d0000 	ldrteq	r0, [sp], #-0
    93b0:	00130000 	andseq	r0, r3, r0
    93b4:	13000001 	movwne	r0, #1
    93b8:	0000041c 	andeq	r0, r0, ip, lsl r4
    93bc:	28040a00 	stmdacs	r4, {r9, fp}
    93c0:	15000004 	strne	r0, [r0, #-4]
    93c4:	00008101 	andeq	r8, r0, r1, lsl #2
    93c8:	00045300 	andeq	r5, r4, r0, lsl #6
    93cc:	01001300 	mrseq	r1, LR_irq
    93d0:	0a000000 	beq	93d8 <__exidx_end+0x4684>
    93d4:	00044304 	andeq	r4, r4, r4, lsl #6
    93d8:	00a50300 	adceq	r0, r5, r0, lsl #6
    93dc:	1f090000 	svcne	0x00090000
    93e0:	00034503 	andeq	r4, r3, r3, lsl #10
    93e4:	04590800 	ldrbeq	r0, [r9], #-2048	; 0xfffff800
    93e8:	11140000 	tstne	r4, r0
    93ec:	08000005 	stmdaeq	r0, {r0, r2}
    93f0:	e30e02d8 	movw	r0, #58072	; 0xe2d8
    93f4:	01000000 	mrseq	r0, (UNDEF: 0)
    93f8:	08081601 	stmdaeq	r8, {r0, r9, sl, ip}
    93fc:	a0090303 	andge	r0, r9, r3, lsl #6
    9400:	17000004 	strne	r0, [r0, -r4]
    9404:	0000361b 	andeq	r3, r0, fp, lsl r6
    9408:	07030708 	streq	r0, [r3, -r8, lsl #14]
    940c:	000000c1 	andeq	r0, r0, r1, asr #1
    9410:	060b1700 	streq	r1, [fp], -r0, lsl #14
    9414:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    9418:	00f40803 	rscseq	r0, r4, r3, lsl #16
    941c:	00040000 	andeq	r0, r4, r0
    9420:	00027511 	andeq	r7, r2, r1, lsl r5
    9424:	03090800 	movweq	r0, #38912	; 0x9800
    9428:	00047903 	andeq	r7, r4, r3, lsl #18
    942c:	05581800 	ldrbeq	r1, [r8, #-2048]	; 0xfffff800
    9430:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    9434:	1008030b 	andne	r0, r8, fp, lsl #6
    9438:	17000005 	strne	r0, [r0, -r5]
    943c:	00001512 	andeq	r1, r0, r2, lsl r5
    9440:	07031408 	streq	r1, [r3, -r8, lsl #8]
    9444:	000000c1 	andeq	r0, r0, r1, asr #1
    9448:	032d1700 			; <UNDEFINED> instruction: 0x032d1700
    944c:	15080000 	strne	r0, [r8, #-0]
    9450:	00c10703 	sbceq	r0, r1, r3, lsl #14
    9454:	17020000 	strne	r0, [r2, -r0]
    9458:	0000054b 	andeq	r0, r0, fp, asr #10
    945c:	0a031608 	beq	cec84 <__ccfg+0xaecdc>
    9460:	000002c8 	andeq	r0, r0, r8, asr #5
    9464:	0f881704 	svceq	0x00881704
    9468:	17080000 	strne	r0, [r8, -r0]
    946c:	00f40803 	rscseq	r0, r4, r3, lsl #16
    9470:	17080000 	strne	r0, [r8, -r0]
    9474:	000004dd 	ldrdeq	r0, [r0], -sp
    9478:	0f031808 	svceq	0x00031808
    947c:	00000510 	andeq	r0, r0, r0, lsl r5
    9480:	0328170c 			; <UNDEFINED> instruction: 0x0328170c
    9484:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    9488:	05201503 	streq	r1, [r0, #-1283]!	; 0xfffffafd
    948c:	002c0000 	eoreq	r0, ip, r0
    9490:	0004a00f 	andeq	sl, r4, pc
    9494:	00052000 	andeq	r2, r5, r0
    9498:	00881900 	addeq	r1, r8, r0, lsl #18
    949c:	00030000 	andeq	r0, r3, r0
    94a0:	04ad040a 	strteq	r0, [sp], #1034	; 0x40a
    94a4:	63110000 	tstvs	r1, #0
    94a8:	08000005 	stmdaeq	r0, {r0, r2}
    94ac:	ad1b031c 	ldcge	3, cr0, [fp, #-112]	; 0xffffff90
    94b0:	14000004 	strne	r0, [r0], #-4
    94b4:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    94b8:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    94bc:	00000542 	andeq	r0, r0, r2, asr #10
    94c0:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    94c4:	00000526 	andeq	r0, r0, r6, lsr #10
    94c8:	0005191a 	andeq	r1, r5, sl, lsl r9
    94cc:	111a0100 	tstne	sl, r0, lsl #2
    94d0:	00000465 	andeq	r0, r0, r5, ror #8
    94d4:	34030501 	strcc	r0, [r3], #-1281	; 0xfffffaff
    94d8:	1b00004d 	blne	9614 <__exidx_end+0x48c0>
    94dc:	0000215f 	andeq	r2, r0, pc, asr r1
    94e0:	160d1f01 	strne	r1, [sp], -r1, lsl #30
    94e4:	05000004 	streq	r0, [r0, #-4]
    94e8:	0001c803 	andeq	ip, r1, r3, lsl #16
    94ec:	214b1c20 	cmpcs	fp, r0, lsr #24
    94f0:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    94f4:	0081010c 	addeq	r0, r1, ip, lsl #2
    94f8:	282c0000 	stmdacs	ip!, {}	; <UNPREDICTABLE>
    94fc:	28300000 	ldmdacs	r0!, {}	; <UNPREDICTABLE>
    9500:	9c010000 	stcls	0, cr0, [r1], {-0}
    9504:	00000597 	muleq	r0, r7, r5
    9508:	0100701d 	tsteq	r0, sp, lsl r0
    950c:	01002258 	tsteq	r0, r8, asr r2
    9510:	293e0000 	ldmdbcs	lr!, {}	; <UNPREDICTABLE>
    9514:	1c000000 	stcne	0, cr0, [r0], {-0}
    9518:	0000210a 	andeq	r2, r0, sl, lsl #2
    951c:	010c5201 	tsteq	ip, r1, lsl #4
    9520:	00000081 	andeq	r0, r0, r1, lsl #1
    9524:	00002828 	andeq	r2, r0, r8, lsr #16
    9528:	0000282c 	andeq	r2, r0, ip, lsr #16
    952c:	05c19c01 	strbeq	r9, [r1, #3073]	; 0xc01
    9530:	701d0000 	andsvc	r0, sp, r0
    9534:	22520100 	subscs	r0, r2, #0, 2
    9538:	00000100 	andeq	r0, r0, r0, lsl #2
    953c:	00002951 	andeq	r2, r0, r1, asr r9
    9540:	21311c00 	teqcs	r1, r0, lsl #24
    9544:	4d010000 	stcmi	0, cr0, [r1, #-0]
    9548:	0081010c 	addeq	r0, r1, ip, lsl #2
    954c:	28200000 	stmdacs	r0!, {}	; <UNPREDICTABLE>
    9550:	28280000 	stmdacs	r8!, {}	; <UNPREDICTABLE>
    9554:	9c010000 	stcls	0, cr0, [r1], {-0}
    9558:	000005f9 	strdeq	r0, [r0], -r9
    955c:	0100701d 	tsteq	r0, sp, lsl r0
    9560:	0100224d 	tsteq	r0, sp, asr #4
    9564:	29640000 	stmdbcs	r4!, {}^	; <UNPREDICTABLE>
    9568:	581e0000 	ldmdapl	lr, {}	; <UNPREDICTABLE>
    956c:	01000021 	tsteq	r0, r1, lsr #32
    9570:	041c2f4d 	ldreq	r2, [ip], #-3917	; 0xfffff0b3
    9574:	51010000 	mrspl	r0, (UNDEF: 1)
    9578:	21171c00 	tstcs	r7, r0, lsl #24
    957c:	42010000 	andmi	r0, r1, #0
    9580:	0081010c 	addeq	r0, r1, ip, lsl #2
    9584:	27fc0000 	ldrbcs	r0, [ip, r0]!
    9588:	28200000 	stmdacs	r0!, {}	; <UNPREDICTABLE>
    958c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9590:	00000662 	andeq	r0, r0, r2, ror #12
    9594:	7968701d 	stmdbvc	r8!, {r0, r2, r3, r4, ip, sp, lr}^
    9598:	1e420100 	dvfnes	f0, f2, f0
    959c:	00000081 	andeq	r0, r0, r1, lsl #1
    95a0:	00002977 	andeq	r2, r0, r7, ror r9
    95a4:	0100701d 	tsteq	r0, sp, lsl r0
    95a8:	01002b42 	tsteq	r0, r2, asr #22
    95ac:	29950000 	ldmibcs	r5, {}	; <UNPREDICTABLE>
    95b0:	6c1d0000 	ldcvs	0, cr0, [sp], {-0}
    95b4:	01006e65 	tsteq	r0, r5, ror #28
    95b8:	00813242 	addeq	r3, r1, r2, asr #4
    95bc:	29a80000 	stmibcs	r8!, {}	; <UNPREDICTABLE>
    95c0:	731d0000 	tstvc	sp, #0
    95c4:	01007365 	tsteq	r0, r5, ror #6
    95c8:	04163c42 	ldreq	r3, [r6], #-3138	; 0xfffff3be
    95cc:	29bb0000 	ldmibcs	fp!, {}	; <UNPREDICTABLE>
    95d0:	581e0000 	ldmdapl	lr, {}	; <UNPREDICTABLE>
    95d4:	01000021 	tsteq	r0, r1, lsr #32
    95d8:	041c1743 	ldreq	r1, [ip], #-1859	; 0xfffff8bd
    95dc:	91020000 	mrsls	r0, (UNDEF: 2)
    95e0:	3e1c0000 	cdpcc	0, 1, cr0, cr12, cr0, {0}
    95e4:	01000021 	tsteq	r0, r1, lsr #32
    95e8:	81010c37 	tsthi	r1, r7, lsr ip
    95ec:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    95f0:	fc000027 	stc2	0, cr0, [r0], {39}	; 0x27
    95f4:	01000027 	tsteq	r0, r7, lsr #32
    95f8:	00069b9c 	muleq	r6, ip, fp
    95fc:	68701d00 	ldmdavs	r0!, {r8, sl, fp, ip}^
    9600:	37010079 	smlsdxcc	r1, r9, r0, r0
    9604:	0000811e 	andeq	r8, r0, lr, lsl r1
    9608:	0029ce00 	eoreq	ip, r9, r0, lsl #28
    960c:	64661f00 	strbtvs	r1, [r6], #-3840	; 0xfffff100
    9610:	27370100 	ldrcs	r0, [r7, -r0, lsl #2]!
    9614:	00000081 	andeq	r0, r0, r1, lsl #1
    9618:	20005101 	andcs	r5, r0, r1, lsl #2
    961c:	00002124 	andeq	r2, r0, r4, lsr #2
    9620:	010c2101 	tsteq	ip, r1, lsl #2
    9624:	00000081 	andeq	r0, r0, r1, lsl #1
    9628:	0006db01 	andeq	sp, r6, r1, lsl #22
    962c:	68702100 	ldmdavs	r0!, {r8, sp}^
    9630:	21010079 	tstcs	r1, r9, ror r0
    9634:	0000811e 	andeq	r8, r0, lr, lsl r1
    9638:	64662100 	strbtvs	r2, [r6], #-256	; 0xffffff00
    963c:	27210100 	strcs	r0, [r1, -r0, lsl #2]!
    9640:	00000081 	andeq	r0, r0, r1, lsl #1
    9644:	000ef322 	andeq	pc, lr, r2, lsr #6
    9648:	33210100 			; <UNDEFINED> instruction: 0x33210100
    964c:	000000b5 	strheq	r0, [r0], -r5
    9650:	01006923 	tsteq	r0, r3, lsr #18
    9654:	00810625 	addeq	r0, r1, r5, lsr #12
    9658:	24000000 	strcs	r0, [r0], #-0
    965c:	0000069b 	muleq	r0, fp, r6
    9660:	00002830 	andeq	r2, r0, r0, lsr r8
    9664:	00002878 	andeq	r2, r0, r8, ror r8
    9668:	ad259c01 	stcge	12, cr9, [r5, #-4]!
    966c:	ec000006 	stc	0, cr0, [r0], {6}
    9670:	25000029 	strcs	r0, [r0, #-41]	; 0xffffffd7
    9674:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
    9678:	00002a0a 	andeq	r2, r0, sl, lsl #20
    967c:	0006c425 	andeq	ip, r6, r5, lsr #8
    9680:	002a2800 	eoreq	r2, sl, r0, lsl #16
    9684:	06d02600 	ldrbeq	r2, [r0], r0, lsl #12
    9688:	9b270000 	blls	9c9690 <__ccfg+0x9a96e8>
    968c:	66000006 	strvs	r0, [r0], -r6
    9690:	78000028 	stmdavc	r0, {r3, r5}
    9694:	01000028 	tsteq	r0, r8, lsr #32
    9698:	ad280c21 	stcge	12, cr0, [r8, #-132]!	; 0xffffff7c
    969c:	01000006 	tsteq	r0, r6
    96a0:	06b92855 	ssateq	r2, #26, r5, asr #16
    96a4:	56010000 	strpl	r0, [r1], -r0
    96a8:	0006c429 	andeq	ip, r6, r9, lsr #8
    96ac:	06d02600 	ldrbeq	r2, [r0], r0, lsl #12
    96b0:	00000000 	andeq	r0, r0, r0
    96b4:	00042d00 	andeq	r2, r4, r0, lsl #26
    96b8:	c2000300 	andgt	r0, r0, #0, 6
    96bc:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    96c0:	00018101 	andeq	r8, r1, r1, lsl #2
    96c4:	21690c00 	cmncs	r9, r0, lsl #24
    96c8:	04060000 	streq	r0, [r6], #-0
    96cc:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
    96d0:	00000000 	andeq	r0, r0, r0
    96d4:	5b740000 	blpl	1d096dc <__ccfg+0x1ce9734>
    96d8:	01020000 	mrseq	r0, (UNDEF: 2)
    96dc:	0003e506 	andeq	lr, r3, r6, lsl #10
    96e0:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    96e4:	00000446 	andeq	r0, r0, r6, asr #8
    96e8:	b4050402 	strlt	r0, [r5], #-1026	; 0xfffffbfe
    96ec:	02000000 	andeq	r0, r0, #0
    96f0:	00af0508 	adceq	r0, pc, r8, lsl #10
    96f4:	9b030000 	blls	c96fc <__ccfg+0xa9754>
    96f8:	02000023 	andeq	r0, r0, #35	; 0x23
    96fc:	004d182e 	subeq	r1, sp, lr, lsr #16
    9700:	01020000 	mrseq	r0, (UNDEF: 2)
    9704:	0003e308 	andeq	lr, r3, r8, lsl #6
    9708:	27910300 	ldrcs	r0, [r1, r0, lsl #6]
    970c:	31020000 	mrscc	r0, (UNDEF: 2)
    9710:	00006019 	andeq	r6, r0, r9, lsl r0
    9714:	07020200 	streq	r0, [r2, -r0, lsl #4]
    9718:	0000028a 	andeq	r0, r0, sl, lsl #5
    971c:	00233303 	eoreq	r3, r3, r3, lsl #6
    9720:	19340200 	ldmdbne	r4!, {r9}
    9724:	00000073 	andeq	r0, r0, r3, ror r0
    9728:	7e070402 	cdpvc	4, 0, cr0, cr7, cr2, {0}
    972c:	02000000 	andeq	r0, r0, #0
    9730:	00790708 	rsbseq	r0, r9, r8, lsl #14
    9734:	04040000 	streq	r0, [r4], #-0
    9738:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    973c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    9740:	00000083 	andeq	r0, r0, r3, lsl #1
    9744:	00227c03 	eoreq	r7, r2, r3, lsl #24
    9748:	12270300 	eorne	r0, r7, #0, 6
    974c:	00000054 	andeq	r0, r0, r4, asr r0
    9750:	00008f05 	andeq	r8, r0, r5, lsl #30
    9754:	13fc0300 	mvnsne	r0, #0, 6
    9758:	2b030000 	blcs	c9760 <__ccfg+0xa97b8>
    975c:	00004112 	andeq	r4, r0, r2, lsl r1
    9760:	00a00600 	adceq	r0, r0, r0, lsl #12
    9764:	cd030000 	stcgt	0, cr0, [r3, #-0]
    9768:	03000022 	movweq	r0, #34	; 0x22
    976c:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    9770:	b1050000 	mrslt	r0, (UNDEF: 5)
    9774:	03000000 	movweq	r0, #0
    9778:	000002ef 	andeq	r0, r0, pc, ror #5
    977c:	67122d03 	ldrvs	r2, [r2, -r3, lsl #26]
    9780:	07000000 	streq	r0, [r0, -r0]
    9784:	09320308 	ldmdbeq	r2!, {r3, r8, r9}
    9788:	0000015c 	andeq	r0, r0, ip, asr r1
    978c:	00031808 	andeq	r1, r3, r8, lsl #16
    9790:	07340300 	ldreq	r0, [r4, -r0, lsl #6]!
    9794:	000000a0 	andeq	r0, r0, r0, lsr #1
    9798:	00070101 	andeq	r0, r7, r1, lsl #2
    979c:	00009e08 	andeq	r9, r0, r8, lsl #28
    97a0:	03350300 	teqeq	r5, #0, 6
    97a4:	000000a0 	andeq	r0, r0, r0, lsr #1
    97a8:	00060101 	andeq	r0, r6, r1, lsl #2
    97ac:	0002bf08 	andeq	fp, r2, r8, lsl #30
    97b0:	03360300 	teqeq	r6, #0, 6
    97b4:	000000a0 	andeq	r0, r0, r0, lsr #1
    97b8:	00050101 	andeq	r0, r5, r1, lsl #2
    97bc:	00048c08 	andeq	r8, r4, r8, lsl #24
    97c0:	03370300 	teqeq	r7, #0, 6
    97c4:	000000a0 	andeq	r0, r0, r0, lsr #1
    97c8:	00040101 	andeq	r0, r4, r1, lsl #2
    97cc:	00048508 	andeq	r8, r4, r8, lsl #10
    97d0:	03380300 	teqeq	r8, #0, 6
    97d4:	000000a0 	andeq	r0, r0, r0, lsr #1
    97d8:	00000401 	andeq	r0, r0, r1, lsl #8
    97dc:	00047609 	andeq	r7, r4, r9, lsl #12
    97e0:	073a0300 	ldreq	r0, [sl, -r0, lsl #6]!
    97e4:	000000a0 	andeq	r0, r0, r0, lsr #1
    97e8:	002b0901 	eoreq	r0, fp, r1, lsl #18
    97ec:	3c030000 	stccc	0, cr0, [r3], {-0}
    97f0:	0000a003 	andeq	sl, r0, r3
    97f4:	72090200 	andvc	r0, r9, #0, 4
    97f8:	03000000 	movweq	r0, #0
    97fc:	00a0033d 	adceq	r0, r0, sp, lsr r3
    9800:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    9804:	0000014f 	andeq	r0, r0, pc, asr #2
    9808:	b1083f03 	tstlt	r8, r3, lsl #30
    980c:	04000000 	streq	r0, [r0], #-0
    9810:	04d40300 	ldrbeq	r0, [r4], #768	; 0x300
    9814:	41030000 	mrsmi	r0, (UNDEF: 3)
    9818:	0000ce03 	andeq	ip, r0, r3, lsl #28
    981c:	015c0600 	cmpeq	ip, r0, lsl #12
    9820:	0c0a0000 	stceq	0, cr0, [sl], {-0}
    9824:	03000003 	movweq	r0, #3
    9828:	01681a43 	cmneq	r8, r3, asr #20
    982c:	01010000 	mrseq	r0, (UNDEF: 1)
    9830:	00038e0a 	andeq	r8, r3, sl, lsl #28
    9834:	0e450300 	cdpeq	3, 4, cr0, cr5, cr0, {0}
    9838:	00000189 	andeq	r0, r0, r9, lsl #3
    983c:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    9840:	0000018f 	andeq	r0, r0, pc, lsl #3
    9844:	ec080102 	stfs	f0, [r8], {2}
    9848:	05000003 	streq	r0, [r0, #-3]
    984c:	0000018f 	andeq	r0, r0, pc, lsl #3
    9850:	0003a40a 	andeq	sl, r3, sl, lsl #8
    9854:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    9858:	00000189 	andeq	r0, r0, r9, lsl #3
    985c:	08070101 	stmdaeq	r7, {r0, r8}
    9860:	da098f04 	ble	26d478 <__ccfg+0x24d4d0>
    9864:	09000001 	stmdbeq	r0, {r0}
    9868:	000019fd 	strdeq	r1, [r0], -sp
    986c:	670b9004 	strvs	r9, [fp, -r4]
    9870:	00000000 	andeq	r0, r0, r0
    9874:	0006b309 	andeq	fp, r6, r9, lsl #6
    9878:	08910400 	ldmeq	r1, {sl}
    987c:	0000008f 	andeq	r0, r0, pc, lsl #1
    9880:	15be0904 	ldrne	r0, [lr, #2308]!	; 0x904
    9884:	92040000 	andls	r0, r4, #0
    9888:	0000ac10 	andeq	sl, r0, r0, lsl ip
    988c:	03000600 	movweq	r0, #1536	; 0x600
    9890:	00000493 	muleq	r0, r3, r4
    9894:	a9039304 	stmdbge	r3, {r2, r8, r9, ip, pc}
    9898:	0c000001 	stceq	0, cr0, [r0], {1}
    989c:	000001da 	ldrdeq	r0, [r0], -sl
    98a0:	000001f1 	strdeq	r0, [r0], -r1
    98a4:	210a000d 	tstcs	sl, sp
    98a8:	04000000 	streq	r0, [r0], #-0
    98ac:	01e60f99 	strexheq	r0, r9, [r6]
    98b0:	01010000 	mrseq	r0, (UNDEF: 1)
    98b4:	91050107 	tstls	r5, r7, lsl #2
    98b8:	00022909 	andeq	r2, r2, r9, lsl #18
    98bc:	050c0800 	streq	r0, [ip, #-2048]	; 0xfffff800
    98c0:	93050000 	movwls	r0, #20480	; 0x5000
    98c4:	0000a007 	andeq	sl, r0, r7
    98c8:	01070100 	mrseq	r0, (UNDEF: 23)
    98cc:	001c0800 	andseq	r0, ip, r0, lsl #16
    98d0:	94050000 	strls	r0, [r5], #-0
    98d4:	0000a003 	andeq	sl, r0, r3
    98d8:	00010100 	andeq	r0, r1, r0, lsl #2
    98dc:	9d030000 	stcls	0, cr0, [r3, #-0]
    98e0:	05000002 	streq	r0, [r0, #-2]
    98e4:	01ff0396 			; <UNDEFINED> instruction: 0x01ff0396
    98e8:	29050000 	stmdbcs	r5, {}	; <UNPREDICTABLE>
    98ec:	0c000002 	stceq	0, cr0, [r0], {2}
    98f0:	00000235 	andeq	r0, r0, r5, lsr r2
    98f4:	00000245 	andeq	r0, r0, r5, asr #4
    98f8:	3a05000d 	bcc	149934 <__ccfg+0x12998c>
    98fc:	0a000002 	beq	990c <__exidx_end+0x4bb8>
    9900:	00000357 	andeq	r0, r0, r7, asr r3
    9904:	45179c05 	ldrmi	r9, [r7, #-3077]	; 0xfffff3fb
    9908:	01000002 	tsteq	r0, r2
    990c:	009b0c01 	addseq	r0, fp, r1, lsl #24
    9910:	02630000 	rsbeq	r0, r3, #0
    9914:	000d0000 	andeq	r0, sp, r0
    9918:	00025805 	andeq	r5, r2, r5, lsl #16
    991c:	03d50a00 	bicseq	r0, r5, #0, 20
    9920:	06060000 	streq	r0, [r6], -r0
    9924:	00026313 	andeq	r6, r2, r3, lsl r3
    9928:	0a010100 	beq	49d30 <__ccfg+0x29d88>
    992c:	00000134 	andeq	r0, r0, r4, lsr r1
    9930:	b10ec304 	tstlt	lr, r4, lsl #6
    9934:	01000000 	mrseq	r0, (UNDEF: 0)
    9938:	05480e01 	strbeq	r0, [r8, #-3585]	; 0xfffff1ff
    993c:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    9940:	02911001 	addseq	r1, r1, #1
    9944:	040b0000 	streq	r0, [fp], #-0
    9948:	00000297 	muleq	r0, r7, r2
    994c:	02a3010f 	adceq	r0, r3, #-1073741821	; 0xc0000003
    9950:	8f100000 	svchi	0x00100000
    9954:	00000000 	andeq	r0, r0, r0
    9958:	0001960c 	andeq	r9, r1, ip, lsl #12
    995c:	0002ae00 	andeq	sl, r2, r0, lsl #28
    9960:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    9964:	000002a3 	andeq	r0, r0, r3, lsr #5
    9968:	0004e411 	andeq	lr, r4, r1, lsl r4
    996c:	017f0700 	cmneq	pc, r0, lsl #14
    9970:	0002ae16 	andeq	sl, r2, r6, lsl lr
    9974:	11010100 	mrsne	r0, (UNDEF: 17)
    9978:	000003c1 	andeq	r0, r0, r1, asr #7
    997c:	14018207 	strne	r8, [r1], #-519	; 0xfffffdf9
    9980:	000000bd 	strheq	r0, [r0], -sp
    9984:	11110101 	tstne	r1, r1, lsl #2
    9988:	07000005 	streq	r0, [r0, -r5]
    998c:	b10e02d8 	ldrdlt	r0, [lr, -r8]
    9990:	01000000 	mrseq	r0, (UNDEF: 0)
    9994:	07081201 	streq	r1, [r8, -r1, lsl #4]
    9998:	07090303 	streq	r0, [r9, -r3, lsl #6]
    999c:	13000003 	movwne	r0, #3
    99a0:	0000361b 	andeq	r3, r0, fp, lsl r6
    99a4:	07030707 	streq	r0, [r3, -r7, lsl #14]
    99a8:	0000008f 	andeq	r0, r0, pc, lsl #1
    99ac:	060b1300 	streq	r1, [fp], -r0, lsl #6
    99b0:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    99b4:	00c20803 	sbceq	r0, r2, r3, lsl #16
    99b8:	00040000 	andeq	r0, r4, r0
    99bc:	0002750e 	andeq	r7, r2, lr, lsl #10
    99c0:	03090700 	movweq	r0, #38656	; 0x9700
    99c4:	0002e003 	andeq	lr, r2, r3
    99c8:	05581400 	ldrbeq	r1, [r8, #-1024]	; 0xfffffc00
    99cc:	07300000 	ldreq	r0, [r0, -r0]!
    99d0:	7708030b 	strvc	r0, [r8, -fp, lsl #6]
    99d4:	13000003 	movwne	r0, #3
    99d8:	00001512 	andeq	r1, r0, r2, lsl r5
    99dc:	08031407 	stmdaeq	r3, {r0, r1, r2, sl, ip}
    99e0:	0000008f 	andeq	r0, r0, pc, lsl #1
    99e4:	032d1300 			; <UNDEFINED> instruction: 0x032d1300
    99e8:	15070000 	strne	r0, [r7, #-0]
    99ec:	008f0803 	addeq	r0, pc, r3, lsl #16
    99f0:	13020000 	movwne	r0, #8192	; 0x2000
    99f4:	0000054b 	andeq	r0, r0, fp, asr #10
    99f8:	0b031607 	bleq	cf21c <__ccfg+0xaf274>
    99fc:	00000284 	andeq	r0, r0, r4, lsl #5
    9a00:	0f881304 	svceq	0x00881304
    9a04:	17070000 	strne	r0, [r7, -r0]
    9a08:	00c20903 	sbceq	r0, r2, r3, lsl #18
    9a0c:	13080000 	movwne	r0, #32768	; 0x8000
    9a10:	000004dd 	ldrdeq	r0, [r0], -sp
    9a14:	0f031807 	svceq	0x00031807
    9a18:	00000377 	andeq	r0, r0, r7, ror r3
    9a1c:	0328130c 			; <UNDEFINED> instruction: 0x0328130c
    9a20:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    9a24:	03871503 	orreq	r1, r7, #12582912	; 0xc00000
    9a28:	002c0000 	eoreq	r0, ip, r0
    9a2c:	0003070c 	andeq	r0, r3, ip, lsl #14
    9a30:	00038700 	andeq	r8, r3, r0, lsl #14
    9a34:	00881500 	addeq	r1, r8, r0, lsl #10
    9a38:	00030000 	andeq	r0, r3, r0
    9a3c:	0314040b 	tsteq	r4, #184549376	; 0xb000000
    9a40:	630e0000 	movwvs	r0, #57344	; 0xe000
    9a44:	07000005 	streq	r0, [r0, -r5]
    9a48:	141b031c 	ldrne	r0, [fp], #-796	; 0xfffffce4
    9a4c:	11000003 	tstne	r0, r3
    9a50:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    9a54:	14031e07 	strne	r1, [r3], #-3591	; 0xfffff1f9
    9a58:	000003a9 	andeq	r0, r0, r9, lsr #7
    9a5c:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    9a60:	0000038d 	andeq	r0, r0, sp, lsl #7
    9a64:	21b30116 			; <UNDEFINED> instruction: 0x21b30116
    9a68:	1d010000 	stcne	0, cr0, [r1, #-0]
    9a6c:	28780101 	ldmdacs	r8!, {r0, r8}^
    9a70:	28e80000 	stmiacs	r8!, {}^	; <UNPREDICTABLE>
    9a74:	9c010000 	stcls	0, cr0, [r1], {-0}
    9a78:	0000042a 	andeq	r0, r0, sl, lsr #8
    9a7c:	0000da17 	andeq	sp, r0, r7, lsl sl
    9a80:	011d0100 	tsteq	sp, r0, lsl #2
    9a84:	0000008f 	andeq	r0, r0, pc, lsl #1
    9a88:	00002a46 	andeq	r2, r0, r6, asr #20
    9a8c:	000f8818 	andeq	r8, pc, r8, lsl r8	; <UNPREDICTABLE>
    9a90:	011d0100 	tsteq	sp, r0, lsl #2
    9a94:	0000042a 	andeq	r0, r0, sl, lsr #8
    9a98:	00002a6f 	andeq	r2, r0, pc, ror #20
    9a9c:	0021bf19 	eoreq	fp, r1, r9, lsl pc
    9aa0:	01300100 	teqeq	r0, r0, lsl #2
    9aa4:	000e181a 	andeq	r1, lr, sl, lsl r8
    9aa8:	74701b00 	ldrbtvc	r1, [r0], #-2816	; 0xfffff500
    9aac:	22010072 	andcs	r0, r1, #114	; 0x72
    9ab0:	00042a15 	andeq	r2, r4, r5, lsl sl
    9ab4:	d0030500 	andle	r0, r3, r0, lsl #10
    9ab8:	1b200001 	blne	809ac4 <__ccfg+0x7e9b1c>
    9abc:	006e656c 	rsbeq	r6, lr, ip, ror #10
    9ac0:	810d2301 	tsthi	sp, r1, lsl #6
    9ac4:	05000000 	streq	r0, [r0, #-0]
    9ac8:	0001cc03 	andeq	ip, r1, r3, lsl #24
    9acc:	21ad1820 			; <UNDEFINED> instruction: 0x21ad1820
    9ad0:	24010000 	strcs	r0, [r1], #-0
    9ad4:	00008106 	andeq	r8, r0, r6, lsl #2
    9ad8:	002a9900 	eoreq	r9, sl, r0, lsl #18
    9adc:	0b000000 	bleq	9ae4 <__exidx_end+0x4d90>
    9ae0:	00019604 	andeq	r9, r1, r4, lsl #12
    9ae4:	04400000 	strbeq	r0, [r0], #-0
    9ae8:	00030000 	andeq	r0, r3, r0
    9aec:	00002636 	andeq	r2, r0, r6, lsr r6
    9af0:	01810104 	orreq	r0, r1, r4, lsl #2
    9af4:	d50c0000 	strle	r0, [ip, #-0]
    9af8:	06000021 	streq	r0, [r0], -r1, lsr #32
    9afc:	60000004 	andvs	r0, r0, r4
    9b00:	0000000e 	andeq	r0, r0, lr
    9b04:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    9b08:	0200005d 	andeq	r0, r0, #93	; 0x5d
    9b0c:	03e50601 	mvneq	r0, #1048576	; 0x100000
    9b10:	02020000 	andeq	r0, r2, #0
    9b14:	00044605 	andeq	r4, r4, r5, lsl #12
    9b18:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    9b1c:	000000b4 	strheq	r0, [r0], -r4
    9b20:	af050802 	svcge	0x00050802
    9b24:	03000000 	movweq	r0, #0
    9b28:	0000239b 	muleq	r0, fp, r3
    9b2c:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    9b30:	02000000 	andeq	r0, r0, #0
    9b34:	03e30801 	mvneq	r0, #65536	; 0x10000
    9b38:	91030000 	mrsls	r0, (UNDEF: 3)
    9b3c:	02000027 	andeq	r0, r0, #39	; 0x27
    9b40:	00601931 	rsbeq	r1, r0, r1, lsr r9
    9b44:	02020000 	andeq	r0, r2, #0
    9b48:	00028a07 	andeq	r8, r2, r7, lsl #20
    9b4c:	23330300 	teqcs	r3, #0, 6
    9b50:	34020000 	strcc	r0, [r2], #-0
    9b54:	00007319 	andeq	r7, r0, r9, lsl r3
    9b58:	07040200 	streq	r0, [r4, -r0, lsl #4]
    9b5c:	0000007e 	andeq	r0, r0, lr, ror r0
    9b60:	79070802 	stmdbvc	r7, {r1, fp}
    9b64:	04000000 	streq	r0, [r0], #-0
    9b68:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    9b6c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    9b70:	00008307 	andeq	r8, r0, r7, lsl #6
    9b74:	227c0300 	rsbscs	r0, ip, #0, 6
    9b78:	27030000 	strcs	r0, [r3, -r0]
    9b7c:	00005412 	andeq	r5, r0, r2, lsl r4
    9b80:	008f0500 	addeq	r0, pc, r0, lsl #10
    9b84:	fc030000 	stc2	0, cr0, [r3], {-0}
    9b88:	03000013 	movweq	r0, #19
    9b8c:	0041122b 	subeq	r1, r1, fp, lsr #4
    9b90:	a0060000 	andge	r0, r6, r0
    9b94:	03000000 	movweq	r0, #0
    9b98:	000022cd 	andeq	r2, r0, sp, asr #5
    9b9c:	67122c03 	ldrvs	r2, [r2, -r3, lsl #24]
    9ba0:	05000000 	streq	r0, [r0, #-0]
    9ba4:	000000b1 	strheq	r0, [r0], -r1
    9ba8:	0002ef03 	andeq	lr, r2, r3, lsl #30
    9bac:	122d0300 	eorne	r0, sp, #0, 6
    9bb0:	00000067 	andeq	r0, r0, r7, rrx
    9bb4:	00036403 	andeq	r6, r3, r3, lsl #8
    9bb8:	102e0300 	eorne	r0, lr, r0, lsl #6
    9bbc:	000000da 	ldrdeq	r0, [r0], -sl
    9bc0:	008f0407 	addeq	r0, pc, r7, lsl #8
    9bc4:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    9bc8:	6e093203 	cdpvs	2, 0, cr3, cr9, cr3, {0}
    9bcc:	09000001 	stmdbeq	r0, {r0}
    9bd0:	00000318 	andeq	r0, r0, r8, lsl r3
    9bd4:	a0073403 	andge	r3, r7, r3, lsl #8
    9bd8:	01000000 	mrseq	r0, (UNDEF: 0)
    9bdc:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
    9be0:	0000009e 	muleq	r0, lr, r0
    9be4:	a0033503 	andge	r3, r3, r3, lsl #10
    9be8:	01000000 	mrseq	r0, (UNDEF: 0)
    9bec:	09000601 	stmdbeq	r0, {r0, r9, sl}
    9bf0:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
    9bf4:	a0033603 	andge	r3, r3, r3, lsl #12
    9bf8:	01000000 	mrseq	r0, (UNDEF: 0)
    9bfc:	09000501 	stmdbeq	r0, {r0, r8, sl}
    9c00:	0000048c 	andeq	r0, r0, ip, lsl #9
    9c04:	a0033703 	andge	r3, r3, r3, lsl #14
    9c08:	01000000 	mrseq	r0, (UNDEF: 0)
    9c0c:	09000401 	stmdbeq	r0, {r0, sl}
    9c10:	00000485 	andeq	r0, r0, r5, lsl #9
    9c14:	a0033803 	andge	r3, r3, r3, lsl #16
    9c18:	01000000 	mrseq	r0, (UNDEF: 0)
    9c1c:	0a000004 	beq	9c34 <__exidx_end+0x4ee0>
    9c20:	00000476 	andeq	r0, r0, r6, ror r4
    9c24:	a0073a03 	andge	r3, r7, r3, lsl #20
    9c28:	01000000 	mrseq	r0, (UNDEF: 0)
    9c2c:	00002b0a 	andeq	r2, r0, sl, lsl #22
    9c30:	033c0300 	teqeq	ip, #0, 6
    9c34:	000000a0 	andeq	r0, r0, r0, lsr #1
    9c38:	00720a02 	rsbseq	r0, r2, r2, lsl #20
    9c3c:	3d030000 	stccc	0, cr0, [r3, #-0]
    9c40:	0000a003 	andeq	sl, r0, r3
    9c44:	4f0a0300 	svcmi	0x000a0300
    9c48:	03000001 	movweq	r0, #1
    9c4c:	00b1083f 	adcseq	r0, r1, pc, lsr r8
    9c50:	00040000 	andeq	r0, r4, r0
    9c54:	0004d403 	andeq	sp, r4, r3, lsl #8
    9c58:	03410300 	movteq	r0, #4864	; 0x1300
    9c5c:	000000e0 	andeq	r0, r0, r0, ror #1
    9c60:	00016e06 	andeq	r6, r1, r6, lsl #28
    9c64:	030c0b00 	movweq	r0, #51968	; 0xcb00
    9c68:	43030000 	movwmi	r0, #12288	; 0x3000
    9c6c:	00017a1a 	andeq	r7, r1, sl, lsl sl
    9c70:	0b010100 	bleq	4a078 <__ccfg+0x2a0d0>
    9c74:	0000038e 	andeq	r0, r0, lr, lsl #7
    9c78:	9b0e4503 	blls	39b08c <__ccfg+0x37b0e4>
    9c7c:	01000001 	tsteq	r0, r1
    9c80:	a1040701 	tstge	r4, r1, lsl #14
    9c84:	02000001 	andeq	r0, r0, #1
    9c88:	03ec0801 	mvneq	r0, #65536	; 0x10000
    9c8c:	a1050000 	mrsge	r0, (UNDEF: 5)
    9c90:	0b000001 	bleq	9c9c <__exidx_end+0x4f48>
    9c94:	000003a4 	andeq	r0, r0, r4, lsr #7
    9c98:	9b1e4503 	blls	79b0ac <__ccfg+0x77b104>
    9c9c:	01000001 	tsteq	r0, r1
    9ca0:	04080801 	streq	r0, [r8], #-2049	; 0xfffff7ff
    9ca4:	01ec098f 	mvneq	r0, pc, lsl #19
    9ca8:	fd0a0000 	stc2	0, cr0, [sl, #-0]
    9cac:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    9cb0:	00670b90 	mlseq	r7, r0, fp, r0
    9cb4:	0a000000 	beq	9cbc <__exidx_end+0x4f68>
    9cb8:	000006b3 			; <UNDEFINED> instruction: 0x000006b3
    9cbc:	8f089104 	svchi	0x00089104
    9cc0:	04000000 	streq	r0, [r0], #-0
    9cc4:	0015be0a 	andseq	fp, r5, sl, lsl #28
    9cc8:	10920400 	addsne	r0, r2, r0, lsl #8
    9ccc:	000000ac 	andeq	r0, r0, ip, lsr #1
    9cd0:	93030006 	movwls	r0, #12294	; 0x3006
    9cd4:	04000004 	streq	r0, [r0], #-4
    9cd8:	01bb0393 			; <UNDEFINED> instruction: 0x01bb0393
    9cdc:	ec0c0000 	stc	0, cr0, [ip], {-0}
    9ce0:	03000001 	movweq	r0, #1
    9ce4:	0d000002 	stceq	0, cr0, [r0, #-8]
    9ce8:	00210b00 	eoreq	r0, r1, r0, lsl #22
    9cec:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    9cf0:	0001f80f 	andeq	pc, r1, pc, lsl #16
    9cf4:	08010100 	stmdaeq	r1, {r8}
    9cf8:	09910501 	ldmibeq	r1, {r0, r8, sl}
    9cfc:	0000023b 	andeq	r0, r0, fp, lsr r2
    9d00:	00050c09 	andeq	r0, r5, r9, lsl #24
    9d04:	07930500 	ldreq	r0, [r3, r0, lsl #10]
    9d08:	000000a0 	andeq	r0, r0, r0, lsr #1
    9d0c:	00010701 	andeq	r0, r1, r1, lsl #14
    9d10:	00001c09 	andeq	r1, r0, r9, lsl #24
    9d14:	03940500 	orrseq	r0, r4, #0, 10
    9d18:	000000a0 	andeq	r0, r0, r0, lsr #1
    9d1c:	00000101 	andeq	r0, r0, r1, lsl #2
    9d20:	029d0300 	addseq	r0, sp, #0, 6
    9d24:	96050000 	strls	r0, [r5], -r0
    9d28:	00021103 	andeq	r1, r2, r3, lsl #2
    9d2c:	023b0500 	eorseq	r0, fp, #0, 10
    9d30:	470c0000 	strmi	r0, [ip, -r0]
    9d34:	57000002 	strpl	r0, [r0, -r2]
    9d38:	0d000002 	stceq	0, cr0, [r0, #-8]
    9d3c:	024c0500 	subeq	r0, ip, #0, 10
    9d40:	570b0000 	strpl	r0, [fp, -r0]
    9d44:	05000003 	streq	r0, [r0, #-3]
    9d48:	0257179c 	subseq	r1, r7, #156, 14	; 0x2700000
    9d4c:	01010000 	mrseq	r0, (UNDEF: 1)
    9d50:	00009b0c 	andeq	r9, r0, ip, lsl #22
    9d54:	00027500 	andeq	r7, r2, r0, lsl #10
    9d58:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    9d5c:	0000026a 	andeq	r0, r0, sl, ror #4
    9d60:	0003d50b 	andeq	sp, r3, fp, lsl #10
    9d64:	13060600 	movwne	r0, #26112	; 0x6600
    9d68:	00000275 	andeq	r0, r0, r5, ror r2
    9d6c:	340b0101 	strcc	r0, [fp], #-257	; 0xfffffeff
    9d70:	04000001 	streq	r0, [r0], #-1
    9d74:	00b10ec3 	adcseq	r0, r1, r3, asr #29
    9d78:	01010000 	mrseq	r0, (UNDEF: 1)
    9d7c:	0005480e 	andeq	r4, r5, lr, lsl #16
    9d80:	016e0700 	cmneq	lr, r0, lsl #14
    9d84:	0002a310 	andeq	sl, r2, r0, lsl r3
    9d88:	a9040700 	stmdbge	r4, {r8, r9, sl}
    9d8c:	0f000002 	svceq	0x00000002
    9d90:	0002b501 	andeq	fp, r2, r1, lsl #10
    9d94:	008f1000 	addeq	r1, pc, r0
    9d98:	0c000000 	stceq	0, cr0, [r0], {-0}
    9d9c:	000001a8 	andeq	r0, r0, r8, lsr #3
    9da0:	000002c0 	andeq	r0, r0, r0, asr #5
    9da4:	b505000d 	strlt	r0, [r5, #-13]
    9da8:	11000002 	tstne	r0, r2
    9dac:	000004e4 	andeq	r0, r0, r4, ror #9
    9db0:	16017f07 	strne	r7, [r1], -r7, lsl #30
    9db4:	000002c0 	andeq	r0, r0, r0, asr #5
    9db8:	c1110101 	tstgt	r1, r1, lsl #2
    9dbc:	07000003 	streq	r0, [r0, -r3]
    9dc0:	bd140182 	ldflts	f0, [r4, #-520]	; 0xfffffdf8
    9dc4:	01000000 	mrseq	r0, (UNDEF: 0)
    9dc8:	05111101 	ldreq	r1, [r1, #-257]	; 0xfffffeff
    9dcc:	d8070000 	stmdale	r7, {}	; <UNPREDICTABLE>
    9dd0:	00b10e02 	adcseq	r0, r1, r2, lsl #28
    9dd4:	01010000 	mrseq	r0, (UNDEF: 1)
    9dd8:	03070812 	movweq	r0, #30738	; 0x7812
    9ddc:	03190903 	tsteq	r9, #49152	; 0xc000
    9de0:	1b130000 	blne	4c9de8 <__ccfg+0x4a9e40>
    9de4:	07000036 	smladxeq	r0, r6, r0, r0
    9de8:	8f070307 	svchi	0x00070307
    9dec:	00000000 	andeq	r0, r0, r0
    9df0:	00060b13 	andeq	r0, r6, r3, lsl fp
    9df4:	03080700 	movweq	r0, #34560	; 0x8700
    9df8:	0000c208 	andeq	ip, r0, r8, lsl #4
    9dfc:	0e000400 	cfcpyseq	mvf0, mvf0
    9e00:	00000275 	andeq	r0, r0, r5, ror r2
    9e04:	03030907 	movweq	r0, #14599	; 0x3907
    9e08:	000002f2 	strdeq	r0, [r0], -r2
    9e0c:	00055814 	andeq	r5, r5, r4, lsl r8
    9e10:	0b073000 	bleq	1d5e18 <__ccfg+0x1b5e70>
    9e14:	03890803 	orreq	r0, r9, #196608	; 0x30000
    9e18:	12130000 	andsne	r0, r3, #0
    9e1c:	07000015 	smladeq	r0, r5, r0, r0
    9e20:	8f080314 	svchi	0x00080314
    9e24:	00000000 	andeq	r0, r0, r0
    9e28:	00032d13 	andeq	r2, r3, r3, lsl sp
    9e2c:	03150700 	tsteq	r5, #0, 14
    9e30:	00008f08 	andeq	r8, r0, r8, lsl #30
    9e34:	4b130200 	blmi	4ca63c <__ccfg+0x4aa694>
    9e38:	07000005 	streq	r0, [r0, -r5]
    9e3c:	960b0316 			; <UNDEFINED> instruction: 0x960b0316
    9e40:	04000002 	streq	r0, [r0], #-2
    9e44:	000f8813 	andeq	r8, pc, r3, lsl r8	; <UNPREDICTABLE>
    9e48:	03170700 	tsteq	r7, #0, 14
    9e4c:	0000c209 	andeq	ip, r0, r9, lsl #4
    9e50:	dd130800 	ldcle	8, cr0, [r3, #-0]
    9e54:	07000004 	streq	r0, [r0, -r4]
    9e58:	890f0318 	stmdbhi	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    9e5c:	0c000003 	stceq	0, cr0, [r0], {3}
    9e60:	00032813 	andeq	r2, r3, r3, lsl r8
    9e64:	03190700 	tsteq	r9, #0, 14
    9e68:	00039915 	andeq	r9, r3, r5, lsl r9
    9e6c:	0c002c00 	stceq	12, cr2, [r0], {-0}
    9e70:	00000319 	andeq	r0, r0, r9, lsl r3
    9e74:	00000399 	muleq	r0, r9, r3
    9e78:	00008815 	andeq	r8, r0, r5, lsl r8
    9e7c:	07000300 	streq	r0, [r0, -r0, lsl #6]
    9e80:	00032604 	andeq	r2, r3, r4, lsl #12
    9e84:	05630e00 	strbeq	r0, [r3, #-3584]!	; 0xfffff200
    9e88:	1c070000 	stcne	0, cr0, [r7], {-0}
    9e8c:	03261b03 			; <UNDEFINED> instruction: 0x03261b03
    9e90:	b7110000 	ldrlt	r0, [r1, -r0]
    9e94:	07000003 	streq	r0, [r0, -r3]
    9e98:	bb14031e 	bllt	50ab18 <__ccfg+0x4eab70>
    9e9c:	01000003 	tsteq	r0, r3
    9ea0:	9f040701 	svcls	0x00040701
    9ea4:	16000003 	strne	r0, [r0], -r3
    9ea8:	0000140a 	andeq	r1, r0, sl, lsl #8
    9eac:	9b070d01 	blls	1cd2b8 <__ccfg+0x1ad310>
    9eb0:	01000001 	tsteq	r0, r1
    9eb4:	01d40305 	bicseq	r0, r4, r5, lsl #6
    9eb8:	01172000 	tsteq	r7, r0
    9ebc:	000021ca 	andeq	r2, r0, sl, asr #3
    9ec0:	01012301 	tsteq	r1, r1, lsl #6
    9ec4:	000028e8 	andeq	r2, r0, r8, ror #17
    9ec8:	00002a04 	andeq	r2, r0, r4, lsl #20
    9ecc:	da189c01 	ble	630ed8 <__ccfg+0x610f30>
    9ed0:	01000000 	mrseq	r0, (UNDEF: 0)
    9ed4:	008f0123 	addeq	r0, pc, r3, lsr #2
    9ed8:	2aac0000 	bcs	feb09ee0 <_estack+0xdeb04ee0>
    9edc:	88190000 	ldmdahi	r9, {}	; <UNPREDICTABLE>
    9ee0:	0100000f 	tsteq	r0, pc
    9ee4:	00ce0123 	sbceq	r0, lr, r3, lsr #2
    9ee8:	2aca0000 	bcs	ff289ef0 <_estack+0xdf284ef0>
    9eec:	401a0000 	andsmi	r0, sl, r0
    9ef0:	1b00000e 	blne	9f30 <__exidx_end+0x51dc>
    9ef4:	00727470 	rsbseq	r7, r2, r0, ror r4
    9ef8:	9b0f2801 	blls	3d3f04 <__ccfg+0x3b3f5c>
    9efc:	05000001 	streq	r0, [r0, #-1]
    9f00:	0001dc03 	andeq	sp, r1, r3, lsl #24
    9f04:	656c1b20 	strbvs	r1, [ip, #-2848]!	; 0xfffff4e0
    9f08:	2901006e 	stmdbcs	r1, {r1, r2, r3, r5, r6}
    9f0c:	0000810d 	andeq	r8, r0, sp, lsl #2
    9f10:	d8030500 	stmdale	r3, {r8, sl}
    9f14:	19200001 	stmdbne	r0!, {r0}
    9f18:	000021ad 	andeq	r2, r0, sp, lsr #3
    9f1c:	81062a01 	tsthi	r6, r1, lsl #20
    9f20:	20000000 	andcs	r0, r0, r0
    9f24:	0000002b 	andeq	r0, r0, fp, lsr #32
    9f28:	05f00000 	ldrbeq	r0, [r0, #0]!
    9f2c:	00030000 	andeq	r0, r3, r0
    9f30:	000027ae 	andeq	r2, r0, lr, lsr #15
    9f34:	01810104 	orreq	r0, r1, r4, lsl #2
    9f38:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    9f3c:	06000022 	streq	r0, [r0], -r2, lsr #32
    9f40:	e8000004 	stmda	r0, {r2}
    9f44:	0000000e 	andeq	r0, r0, lr
    9f48:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    9f4c:	0200005f 	andeq	r0, r0, #95	; 0x5f
    9f50:	03e50601 	mvneq	r0, #1048576	; 0x100000
    9f54:	02020000 	andeq	r0, r2, #0
    9f58:	00044605 	andeq	r4, r4, r5, lsl #12
    9f5c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    9f60:	000000b4 	strheq	r0, [r0], -r4
    9f64:	af050802 	svcge	0x00050802
    9f68:	03000000 	movweq	r0, #0
    9f6c:	0000239b 	muleq	r0, fp, r3
    9f70:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    9f74:	02000000 	andeq	r0, r0, #0
    9f78:	03e30801 	mvneq	r0, #65536	; 0x10000
    9f7c:	91030000 	mrsls	r0, (UNDEF: 3)
    9f80:	02000027 	andeq	r0, r0, #39	; 0x27
    9f84:	00601931 	rsbeq	r1, r0, r1, lsr r9
    9f88:	02020000 	andeq	r0, r2, #0
    9f8c:	00028a07 	andeq	r8, r2, r7, lsl #20
    9f90:	23330300 	teqcs	r3, #0, 6
    9f94:	34020000 	strcc	r0, [r2], #-0
    9f98:	00007319 	andeq	r7, r0, r9, lsl r3
    9f9c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    9fa0:	0000007e 	andeq	r0, r0, lr, ror r0
    9fa4:	79070802 	stmdbvc	r7, {r1, fp}
    9fa8:	04000000 	streq	r0, [r0], #-0
    9fac:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    9fb0:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    9fb4:	00008307 	andeq	r8, r0, r7, lsl #6
    9fb8:	036c0300 	cmneq	ip, #0, 6
    9fbc:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    9fc0:	00009b1b 	andeq	r9, r0, fp, lsl fp
    9fc4:	00e20500 	rsceq	r0, r2, r0, lsl #10
    9fc8:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    9fcc:	0000b300 	andeq	fp, r0, r0, lsl #6
    9fd0:	04f70600 	ldrbteq	r0, [r7], #1536	; 0x600
    9fd4:	00b30000 	adcseq	r0, r3, r0
    9fd8:	01000000 	mrseq	r0, (UNDEF: 0)
    9fdc:	03040700 	movweq	r0, #18176	; 0x4700
    9fe0:	000000e4 	andeq	r0, r0, r4, ror #1
    9fe4:	8f186303 	svchi	0x00186303
    9fe8:	03000000 	movweq	r0, #0
    9fec:	0000227c 	andeq	r2, r0, ip, ror r2
    9ff0:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    9ff4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9ff8:	000000c1 	andeq	r0, r0, r1, asr #1
    9ffc:	0013fc03 	andseq	pc, r3, r3, lsl #24
    a000:	122b0400 	eorne	r0, fp, #0, 8
    a004:	00000041 	andeq	r0, r0, r1, asr #32
    a008:	0000d209 	andeq	sp, r0, r9, lsl #4
    a00c:	22cd0300 	sbccs	r0, sp, #0, 6
    a010:	2c040000 	stccs	0, cr0, [r4], {-0}
    a014:	00006712 	andeq	r6, r0, r2, lsl r7
    a018:	00e30800 	rsceq	r0, r3, r0, lsl #16
    a01c:	ef030000 	svc	0x00030000
    a020:	04000002 	streq	r0, [r0], #-2
    a024:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    a028:	64030000 	strvs	r0, [r3], #-0
    a02c:	04000003 	streq	r0, [r0], #-3
    a030:	010c102e 	tsteq	ip, lr, lsr #32
    a034:	040a0000 	streq	r0, [sl], #-0
    a038:	000000c1 	andeq	r0, r0, r1, asr #1
    a03c:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    a040:	0001a009 	andeq	sl, r1, r9
    a044:	03180c00 	tsteq	r8, #0, 24
    a048:	34040000 	strcc	r0, [r4], #-0
    a04c:	0000d207 	andeq	sp, r0, r7, lsl #4
    a050:	07010100 	streq	r0, [r1, -r0, lsl #2]
    a054:	009e0c00 	addseq	r0, lr, r0, lsl #24
    a058:	35040000 	strcc	r0, [r4, #-0]
    a05c:	0000d203 	andeq	sp, r0, r3, lsl #4
    a060:	06010100 	streq	r0, [r1], -r0, lsl #2
    a064:	02bf0c00 	adcseq	r0, pc, #0, 24
    a068:	36040000 	strcc	r0, [r4], -r0
    a06c:	0000d203 	andeq	sp, r0, r3, lsl #4
    a070:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    a074:	048c0c00 	streq	r0, [ip], #3072	; 0xc00
    a078:	37040000 	strcc	r0, [r4, -r0]
    a07c:	0000d203 	andeq	sp, r0, r3, lsl #4
    a080:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    a084:	04850c00 	streq	r0, [r5], #3072	; 0xc00
    a088:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    a08c:	0000d203 	andeq	sp, r0, r3, lsl #4
    a090:	00040100 	andeq	r0, r4, r0, lsl #2
    a094:	04760d00 	ldrbteq	r0, [r6], #-3328	; 0xfffff300
    a098:	3a040000 	bcc	10a0a0 <__ccfg+0xea0f8>
    a09c:	0000d207 	andeq	sp, r0, r7, lsl #4
    a0a0:	2b0d0100 	blcs	34a4a8 <__ccfg+0x32a500>
    a0a4:	04000000 	streq	r0, [r0], #-0
    a0a8:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    a0ac:	0d020000 	stceq	0, cr0, [r2, #-0]
    a0b0:	00000072 	andeq	r0, r0, r2, ror r0
    a0b4:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    a0b8:	03000000 	movweq	r0, #0
    a0bc:	00014f0d 	andeq	r4, r1, sp, lsl #30
    a0c0:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    a0c4:	000000e3 	andeq	r0, r0, r3, ror #1
    a0c8:	d4030004 	strle	r0, [r3], #-4
    a0cc:	04000004 	streq	r0, [r0], #-4
    a0d0:	01120341 	tsteq	r2, r1, asr #6
    a0d4:	a0090000 	andge	r0, r9, r0
    a0d8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    a0dc:	0000030c 	andeq	r0, r0, ip, lsl #6
    a0e0:	ac1a4304 	ldcge	3, cr4, [sl], {4}
    a0e4:	01000001 	tsteq	r0, r1
    a0e8:	038e0e01 	orreq	r0, lr, #1, 28
    a0ec:	45040000 	strmi	r0, [r4, #-0]
    a0f0:	0001cd0e 	andeq	ip, r1, lr, lsl #26
    a0f4:	0a010100 	beq	4a4fc <__ccfg+0x2a554>
    a0f8:	0001d304 	andeq	sp, r1, r4, lsl #6
    a0fc:	08010200 	stmdaeq	r1, {r9}
    a100:	000003ec 	andeq	r0, r0, ip, ror #7
    a104:	0001d308 	andeq	sp, r1, r8, lsl #6
    a108:	03a40e00 			; <UNDEFINED> instruction: 0x03a40e00
    a10c:	45040000 	strmi	r0, [r4, #-0]
    a110:	0001cd1e 	andeq	ip, r1, lr, lsl sp
    a114:	0b010100 	bleq	4a51c <__ccfg+0x2a574>
    a118:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    a11c:	0000021e 	andeq	r0, r0, lr, lsl r2
    a120:	0019fd0d 	andseq	pc, r9, sp, lsl #26
    a124:	0b900500 	bleq	fe40b52c <_estack+0xde40652c>
    a128:	00000067 	andeq	r0, r0, r7, rrx
    a12c:	06b30d00 	ldrteq	r0, [r3], r0, lsl #26
    a130:	91050000 	mrsls	r0, (UNDEF: 5)
    a134:	0000c108 	andeq	ip, r0, r8, lsl #2
    a138:	be0d0400 	cfcpyslt	mvf0, mvf13
    a13c:	05000015 	streq	r0, [r0, #-21]	; 0xffffffeb
    a140:	00de1092 	smullseq	r1, lr, r2, r0
    a144:	00060000 	andeq	r0, r6, r0
    a148:	00049303 	andeq	r9, r4, r3, lsl #6
    a14c:	03930500 	orrseq	r0, r3, #0, 10
    a150:	000001ed 	andeq	r0, r0, sp, ror #3
    a154:	00021e0f 	andeq	r1, r2, pc, lsl #28
    a158:	00023500 	andeq	r3, r2, r0, lsl #10
    a15c:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    a160:	00000021 	andeq	r0, r0, r1, lsr #32
    a164:	2a0f9905 	bcs	3f0580 <__ccfg+0x3d05d8>
    a168:	01000002 	tsteq	r0, r2
    a16c:	06010b01 	streq	r0, [r1], -r1, lsl #22
    a170:	026d0991 	rsbeq	r0, sp, #2375680	; 0x244000
    a174:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    a178:	06000005 	streq	r0, [r0], -r5
    a17c:	00d20793 	smullseq	r0, r2, r3, r7
    a180:	07010000 	streq	r0, [r1, -r0]
    a184:	1c0c0001 	stcne	0, cr0, [ip], {1}
    a188:	06000000 	streq	r0, [r0], -r0
    a18c:	00d20394 	smullseq	r0, r2, r4, r3
    a190:	01010000 	mrseq	r0, (UNDEF: 1)
    a194:	03000000 	movweq	r0, #0
    a198:	0000029d 	muleq	r0, sp, r2
    a19c:	43039606 	movwmi	r9, #13830	; 0x3606
    a1a0:	08000002 	stmdaeq	r0, {r1}
    a1a4:	0000026d 	andeq	r0, r0, sp, ror #4
    a1a8:	0002790f 	andeq	r7, r2, pc, lsl #18
    a1ac:	00028900 	andeq	r8, r2, r0, lsl #18
    a1b0:	08001000 	stmdaeq	r0, {ip}
    a1b4:	0000027e 	andeq	r0, r0, lr, ror r2
    a1b8:	0003570e 	andeq	r5, r3, lr, lsl #14
    a1bc:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    a1c0:	00000289 	andeq	r0, r0, r9, lsl #5
    a1c4:	cd0f0101 	stfgts	f0, [pc, #-4]	; a1c8 <__exidx_end+0x5474>
    a1c8:	a7000000 	strge	r0, [r0, -r0]
    a1cc:	10000002 	andne	r0, r0, r2
    a1d0:	029c0800 	addseq	r0, ip, #0, 16
    a1d4:	d50e0000 	strle	r0, [lr, #-0]
    a1d8:	07000003 	streq	r0, [r0, -r3]
    a1dc:	02a71306 	adceq	r1, r7, #402653184	; 0x18000000
    a1e0:	01010000 	mrseq	r0, (UNDEF: 1)
    a1e4:	0001340e 	andeq	r3, r1, lr, lsl #8
    a1e8:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    a1ec:	000000e3 	andeq	r0, r0, r3, ror #1
    a1f0:	48110101 	ldmdami	r1, {r0, r8}
    a1f4:	08000005 	stmdaeq	r0, {r0, r2}
    a1f8:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    a1fc:	0a000002 	beq	a20c <__exidx_end+0x54b8>
    a200:	0002db04 	andeq	sp, r2, r4, lsl #22
    a204:	e7011200 	str	r1, [r1, -r0, lsl #4]
    a208:	13000002 	movwne	r0, #2
    a20c:	000000c1 	andeq	r0, r0, r1, asr #1
    a210:	01da0f00 	bicseq	r0, sl, r0, lsl #30
    a214:	02f20000 	rscseq	r0, r2, #0
    a218:	00100000 	andseq	r0, r0, r0
    a21c:	0002e708 	andeq	lr, r2, r8, lsl #14
    a220:	04e41400 	strbteq	r1, [r4], #1024	; 0x400
    a224:	7f080000 	svcvc	0x00080000
    a228:	02f21601 	rscseq	r1, r2, #1048576	; 0x100000
    a22c:	01010000 	mrseq	r0, (UNDEF: 1)
    a230:	0003c114 	andeq	ip, r3, r4, lsl r1
    a234:	01820800 	orreq	r0, r2, r0, lsl #16
    a238:	0000ef14 	andeq	lr, r0, r4, lsl pc
    a23c:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    a240:	00000511 	andeq	r0, r0, r1, lsl r5
    a244:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    a248:	000000e3 	andeq	r0, r0, r3, ror #1
    a24c:	08150101 	ldmdaeq	r5, {r0, r8}
    a250:	09030308 	stmdbeq	r3, {r3, r8, r9}
    a254:	0000034b 	andeq	r0, r0, fp, asr #6
    a258:	00361b16 	eorseq	r1, r6, r6, lsl fp
    a25c:	03070800 	movweq	r0, #30720	; 0x7800
    a260:	0000c107 	andeq	ip, r0, r7, lsl #2
    a264:	0b160000 	bleq	58a26c <__ccfg+0x56a2c4>
    a268:	08000006 	stmdaeq	r0, {r1, r2}
    a26c:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    a270:	04000000 	streq	r0, [r0], #-0
    a274:	02751100 	rsbseq	r1, r5, #0, 2
    a278:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    a27c:	03240303 			; <UNDEFINED> instruction: 0x03240303
    a280:	58170000 	ldmdapl	r7, {}	; <UNPREDICTABLE>
    a284:	30000005 	andcc	r0, r0, r5
    a288:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    a28c:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    a290:	00151216 	andseq	r1, r5, r6, lsl r2
    a294:	03140800 	tsteq	r4, #0, 16
    a298:	0000c108 	andeq	ip, r0, r8, lsl #2
    a29c:	2d160000 	ldccs	0, cr0, [r6, #-0]
    a2a0:	08000003 	stmdaeq	r0, {r0, r1}
    a2a4:	c1080315 	tstgt	r8, r5, lsl r3
    a2a8:	02000000 	andeq	r0, r0, #0
    a2ac:	00054b16 	andeq	r4, r5, r6, lsl fp
    a2b0:	03160800 	tsteq	r6, #0, 16
    a2b4:	0002c80b 	andeq	ip, r2, fp, lsl #16
    a2b8:	88160400 	ldmdahi	r6, {sl}
    a2bc:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    a2c0:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    a2c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a2c8:	0004dd16 	andeq	sp, r4, r6, lsl sp
    a2cc:	03180800 	tsteq	r8, #0, 16
    a2d0:	0003bb0f 	andeq	fp, r3, pc, lsl #22
    a2d4:	28160c00 	ldmdacs	r6, {sl, fp}
    a2d8:	08000003 	stmdaeq	r0, {r0, r1}
    a2dc:	cb150319 	blgt	54af48 <__ccfg+0x52afa0>
    a2e0:	2c000003 	stccs	0, cr0, [r0], {3}
    a2e4:	034b0f00 	movteq	r0, #48896	; 0xbf00
    a2e8:	03cb0000 	biceq	r0, fp, #0
    a2ec:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    a2f0:	03000000 	movweq	r0, #0
    a2f4:	58040a00 	stmdapl	r4, {r9, fp}
    a2f8:	11000003 	tstne	r0, r3
    a2fc:	00000563 	andeq	r0, r0, r3, ror #10
    a300:	1b031c08 	blne	d1328 <__ccfg+0xb1380>
    a304:	00000358 	andeq	r0, r0, r8, asr r3
    a308:	0003b714 	andeq	fp, r3, r4, lsl r7
    a30c:	031e0800 	tsteq	lr, #0, 16
    a310:	0003ed14 	andeq	lr, r3, r4, lsl sp
    a314:	0a010100 	beq	4a71c <__ccfg+0x2a774>
    a318:	0003d104 	andeq	sp, r3, r4, lsl #2
    a31c:	6e011900 	vmlavs.f16	s2, s2, s0	; <UNPREDICTABLE>
    a320:	01000022 	tsteq	r0, r2, lsr #32
    a324:	cd010791 	stcgt	7, cr0, [r1, #-580]	; 0xfffffdbc
    a328:	54000001 	strpl	r0, [r0], #-1
    a32c:	a400002c 	strge	r0, [r0], #-44	; 0xffffffd4
    a330:	0100002c 	tsteq	r0, ip, lsr #32
    a334:	0004689c 	muleq	r4, ip, r8
    a338:	65721a00 	ldrbvs	r1, [r2, #-2560]!	; 0xfffff600
    a33c:	91010073 	tstls	r1, r3, ror r0
    a340:	0001cd14 	andeq	ip, r1, r4, lsl sp
    a344:	002b3e00 	eoreq	r3, fp, r0, lsl #28
    a348:	6d661a00 	vstmdbvs	r6!, {s3-s2}
    a34c:	25910100 	ldrcs	r0, [r1, #256]	; 0x100
    a350:	00000468 	andeq	r0, r0, r8, ror #8
    a354:	00002b88 	andeq	r2, r0, r8, lsl #23
    a358:	0071611a 	rsbseq	r6, r1, sl, lsl r1
    a35c:	b5319101 	ldrlt	r9, [r1, #-257]!	; 0xfffffeff
    a360:	c7000000 	strgt	r0, [r0, -r0]
    a364:	1b00002b 	blne	a418 <__exidx_end+0x56c4>
    a368:	006c6d66 	rsbeq	r6, ip, r6, ror #26
    a36c:	c1079301 	tstgt	r7, r1, lsl #6
    a370:	fb000000 	blx	a37a <__exidx_end+0x5626>
    a374:	1b00002b 	blne	a428 <__exidx_end+0x56d4>
    a378:	93010064 	movwls	r0, #4196	; 0x1064
    a37c:	0000c10c 	andeq	ip, r0, ip, lsl #2
    a380:	002c1900 	eoreq	r1, ip, r0, lsl #18
    a384:	22561c00 	subscs	r1, r6, #0, 24
    a388:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    a38c:	002c7e01 	eoreq	r7, ip, r1, lsl #28
    a390:	040a0000 	streq	r0, [sl], #-0
    a394:	000001da 	ldrdeq	r0, [r0], -sl
    a398:	2261011d 	rsbcs	r0, r1, #1073741831	; 0x40000007
    a39c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    a3a0:	00c10106 	sbceq	r0, r1, r6, lsl #2
    a3a4:	2a240000 	bcs	90a3ac <__ccfg+0x8ea404>
    a3a8:	2c540000 	mracs	r0, r4, acc0
    a3ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    a3b0:	7365721a 	cmnvc	r5, #-1610612735	; 0xa0000001
    a3b4:	1a080100 	bne	20a7bc <__ccfg+0x1ea814>
    a3b8:	000001cd 	andeq	r0, r0, sp, asr #3
    a3bc:	00002c2c 	andeq	r2, r0, ip, lsr #24
    a3c0:	01006e1a 	tsteq	r0, sl, lsl lr
    a3c4:	00c12408 	sbceq	r2, r1, r8, lsl #8
    a3c8:	2c3f0000 	ldccs	0, cr0, [pc], #-0	; a3d0 <__exidx_end+0x567c>
    a3cc:	661a0000 	ldrvs	r0, [sl], -r0
    a3d0:	0801006d 	stmdaeq	r1, {r0, r2, r3, r5, r6}
    a3d4:	00046833 	andeq	r6, r4, r3, lsr r8
    a3d8:	002c5200 	eoreq	r5, ip, r0, lsl #4
    a3dc:	70611a00 	rsbvc	r1, r1, r0, lsl #20
    a3e0:	3f080100 	svccc	0x00080100
    a3e4:	000000b5 	strheq	r0, [r0], -r5
    a3e8:	00002c7b 	andeq	r2, r0, fp, ror ip
    a3ec:	0100631b 	tsteq	r0, fp, lsl r3
    a3f0:	01d3070a 	bicseq	r0, r3, sl, lsl #14
    a3f4:	2d1d0000 	ldccs	0, cr0, [sp, #-0]
    a3f8:	641e0000 	ldrvs	r0, [lr], #-0
    a3fc:	070b0100 	streq	r0, [fp, -r0, lsl #2]
    a400:	000000c1 	andeq	r0, r0, r1, asr #1
    a404:	23549104 	cmpcs	r4, #4, 2
    a408:	225c1f06 	subscs	r1, ip, #6, 30
    a40c:	0d010000 	stceq	0, cr0, [r1, #-0]
    a410:	2a040107 	bcs	10a834 <__ccfg+0xea88c>
    a414:	2a240000 	bcs	90a41c <__ccfg+0x8ea474>
    a418:	9c010000 	stcls	0, cr0, [r1], {-0}
    a41c:	23007c05 	movwcs	r7, #3077	; 0xc05
    a420:	05090608 	streq	r0, [r9, #-1544]	; 0xfffff9f8
    a424:	63200000 	nopvs	{0}	; <UNPREDICTABLE>
    a428:	120d0100 	andne	r0, sp, #0, 2
    a42c:	000000c1 	andeq	r0, r0, r1, asr #1
    a430:	21005001 	tstcs	r0, r1
    a434:	006c6f45 	rsbeq	r6, ip, r5, asr #30
    a438:	5e018801 	cdppl	8, 0, cr8, cr1, cr1, {0}
    a43c:	2100002a 	tstcs	r0, sl, lsr #32
    a440:	00746552 	rsbseq	r6, r4, r2, asr r5
    a444:	c0018b01 	andgt	r8, r1, r1, lsl #22
    a448:	2200002a 	andcs	r0, r0, #42	; 0x2a
    a44c:	00000e98 	muleq	r0, r8, lr
    a450:	00000545 	andeq	r0, r0, r5, asr #10
    a454:	6c617623 	stclvs	6, cr7, [r1], #-140	; 0xffffff74
    a458:	0a3a0100 	beq	e8a860 <__ccfg+0xe6a8b8>
    a45c:	000000c1 	andeq	r0, r0, r1, asr #1
    a460:	0100691b 	tsteq	r0, fp, lsl r9
    a464:	0081133a 	addeq	r1, r1, sl, lsr r3
    a468:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    a46c:	22000000 	andcs	r0, r0, #0
    a470:	00000e70 	andeq	r0, r0, r0, ror lr
    a474:	0000056d 	andeq	r0, r0, sp, ror #10
    a478:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    a47c:	0a460100 	beq	118a884 <__ccfg+0x116a8dc>
    a480:	000000c1 	andeq	r0, r0, r1, asr #1
    a484:	00002e16 	andeq	r2, r0, r6, lsl lr
    a488:	0100691b 	tsteq	r0, fp, lsl r9
    a48c:	00c10f46 	sbceq	r0, r1, r6, asr #30
    a490:	2e3f0000 	cdpcs	0, 3, cr0, cr15, cr0, {0}
    a494:	22000000 	andcs	r0, r0, #0
    a498:	00000ed0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    a49c:	00000595 	muleq	r0, r5, r5
    a4a0:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    a4a4:	0c550100 	ldfeqe	f0, [r5], {-0}
    a4a8:	000000e3 	andeq	r0, r0, r3, ror #1
    a4ac:	00002e68 	andeq	r2, r0, r8, ror #28
    a4b0:	0100691b 	tsteq	r0, fp, lsl r9
    a4b4:	00e31155 	rsceq	r1, r3, r5, asr r1
    a4b8:	2e7b0000 	cdpcs	0, 7, cr0, cr11, cr0, {0}
    a4bc:	24000000 	strcs	r0, [r0], #-0
    a4c0:	00002be2 	andeq	r2, r0, r2, ror #23
    a4c4:	00002c0c 	andeq	r2, r0, ip, lsl #24
    a4c8:	000005bf 			; <UNDEFINED> instruction: 0x000005bf
    a4cc:	6c61761e 	stclvs	6, cr7, [r1], #-120	; 0xffffff88
    a4d0:	0c600100 	stfeqe	f0, [r0], #-0
    a4d4:	000000e3 	andeq	r0, r0, r3, ror #1
    a4d8:	691b5901 	ldmdbvs	fp, {r0, r8, fp, ip, lr}
    a4dc:	0a610100 	beq	184a8e4 <__ccfg+0x182a93c>
    a4e0:	00000081 	andeq	r0, r0, r1, lsl #1
    a4e4:	00002ea4 	andeq	r2, r0, r4, lsr #29
    a4e8:	0eb82200 	cdpeq	2, 11, cr2, cr8, cr0, {0}
    a4ec:	05d90000 	ldrbeq	r0, [r9]
    a4f0:	761b0000 	ldrvc	r0, [fp], -r0
    a4f4:	01006c61 	tsteq	r0, r1, ror #24
    a4f8:	00c10a71 	sbceq	r0, r1, r1, ror sl
    a4fc:	2eb70000 	cdpcs	0, 11, cr0, cr7, cr0, {0}
    a500:	25000000 	strcs	r0, [r0, #-0]
    a504:	00002c2a 	andeq	r2, r0, sl, lsr #24
    a508:	00002c46 	andeq	r2, r0, r6, asr #24
    a50c:	0074731b 	rsbseq	r7, r4, fp, lsl r3
    a510:	cd0b7801 	stcgt	8, cr7, [fp, #-4]
    a514:	d7000001 	strle	r0, [r0, -r1]
    a518:	0000002e 	andeq	r0, r0, lr, lsr #32
    a51c:	058f0000 	streq	r0, [pc]	; a524 <__exidx_end+0x57d0>
    a520:	00030000 	andeq	r0, r3, r0
    a524:	000029c0 	andeq	r2, r0, r0, asr #19
    a528:	01810104 	orreq	r0, r1, r4, lsl #2
    a52c:	810c0000 	mrshi	r0, (UNDEF: 12)
    a530:	06000022 	streq	r0, [r0], -r2, lsr #32
    a534:	90000004 	andls	r0, r0, r4
    a538:	0000000f 	andeq	r0, r0, pc
    a53c:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    a540:	02000063 	andeq	r0, r0, #99	; 0x63
    a544:	03e50601 	mvneq	r0, #1048576	; 0x100000
    a548:	02020000 	andeq	r0, r2, #0
    a54c:	00044605 	andeq	r4, r4, r5, lsl #12
    a550:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    a554:	000000b4 	strheq	r0, [r0], -r4
    a558:	af050802 	svcge	0x00050802
    a55c:	03000000 	movweq	r0, #0
    a560:	0000239b 	muleq	r0, fp, r3
    a564:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    a568:	02000000 	andeq	r0, r0, #0
    a56c:	03e30801 	mvneq	r0, #65536	; 0x10000
    a570:	91030000 	mrsls	r0, (UNDEF: 3)
    a574:	02000027 	andeq	r0, r0, #39	; 0x27
    a578:	00601931 	rsbeq	r1, r0, r1, lsr r9
    a57c:	02020000 	andeq	r0, r2, #0
    a580:	00028a07 	andeq	r8, r2, r7, lsl #20
    a584:	23330300 	teqcs	r3, #0, 6
    a588:	34020000 	strcc	r0, [r2], #-0
    a58c:	00007319 	andeq	r7, r0, r9, lsl r3
    a590:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a594:	0000007e 	andeq	r0, r0, lr, ror r0
    a598:	79070802 	stmdbvc	r7, {r1, fp}
    a59c:	04000000 	streq	r0, [r0], #-0
    a5a0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    a5a4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    a5a8:	00008307 	andeq	r8, r0, r7, lsl #6
    a5ac:	036c0300 	cmneq	ip, #0, 6
    a5b0:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    a5b4:	00009b1b 	andeq	r9, r0, fp, lsl fp
    a5b8:	00e20500 	rsceq	r0, r2, r0, lsl #10
    a5bc:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    a5c0:	0000b300 	andeq	fp, r0, r0, lsl #6
    a5c4:	04f70600 	ldrbteq	r0, [r7], #1536	; 0x600
    a5c8:	00b30000 	adcseq	r0, r3, r0
    a5cc:	01000000 	mrseq	r0, (UNDEF: 0)
    a5d0:	03040700 	movweq	r0, #18176	; 0x4700
    a5d4:	000000e4 	andeq	r0, r0, r4, ror #1
    a5d8:	8f186303 	svchi	0x00186303
    a5dc:	03000000 	movweq	r0, #0
    a5e0:	0000047d 	andeq	r0, r0, sp, ror r4
    a5e4:	41122604 	tstmi	r2, r4, lsl #12
    a5e8:	03000000 	movweq	r0, #0
    a5ec:	0000227c 	andeq	r2, r0, ip, ror r2
    a5f0:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    a5f4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a5f8:	000000cd 	andeq	r0, r0, sp, asr #1
    a5fc:	0013fc03 	andseq	pc, r3, r3, lsl #24
    a600:	122b0400 	eorne	r0, fp, #0, 8
    a604:	00000041 	andeq	r0, r0, r1, asr #32
    a608:	0000de09 	andeq	sp, r0, r9, lsl #28
    a60c:	22cd0300 	sbccs	r0, sp, #0, 6
    a610:	2c040000 	stccs	0, cr0, [r4], {-0}
    a614:	00006712 	andeq	r6, r0, r2, lsl r7
    a618:	00ef0800 	rsceq	r0, pc, r0, lsl #16
    a61c:	ef030000 	svc	0x00030000
    a620:	04000002 	streq	r0, [r0], #-2
    a624:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    a628:	040a0000 	streq	r0, [sl], #-0
    a62c:	000000cd 	andeq	r0, r0, sp, asr #1
    a630:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    a634:	0001a009 	andeq	sl, r1, r9
    a638:	03180c00 	tsteq	r8, #0, 24
    a63c:	34040000 	strcc	r0, [r4], #-0
    a640:	0000de07 	andeq	sp, r0, r7, lsl #28
    a644:	07010100 	streq	r0, [r1, -r0, lsl #2]
    a648:	009e0c00 	addseq	r0, lr, r0, lsl #24
    a64c:	35040000 	strcc	r0, [r4, #-0]
    a650:	0000de03 	andeq	sp, r0, r3, lsl #28
    a654:	06010100 	streq	r0, [r1], -r0, lsl #2
    a658:	02bf0c00 	adcseq	r0, pc, #0, 24
    a65c:	36040000 	strcc	r0, [r4], -r0
    a660:	0000de03 	andeq	sp, r0, r3, lsl #28
    a664:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    a668:	048c0c00 	streq	r0, [ip], #3072	; 0xc00
    a66c:	37040000 	strcc	r0, [r4, -r0]
    a670:	0000de03 	andeq	sp, r0, r3, lsl #28
    a674:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    a678:	04850c00 	streq	r0, [r5], #3072	; 0xc00
    a67c:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    a680:	0000de03 	andeq	sp, r0, r3, lsl #28
    a684:	00040100 	andeq	r0, r4, r0, lsl #2
    a688:	04760d00 	ldrbteq	r0, [r6], #-3328	; 0xfffff300
    a68c:	3a040000 	bcc	10a694 <__ccfg+0xea6ec>
    a690:	0000de07 	andeq	sp, r0, r7, lsl #28
    a694:	2b0d0100 	blcs	34aa9c <__ccfg+0x32aaf4>
    a698:	04000000 	streq	r0, [r0], #-0
    a69c:	00de033c 	sbcseq	r0, lr, ip, lsr r3
    a6a0:	0d020000 	stceq	0, cr0, [r2, #-0]
    a6a4:	00000072 	andeq	r0, r0, r2, ror r0
    a6a8:	de033d04 	cdple	13, 0, cr3, cr3, cr4, {0}
    a6ac:	03000000 	movweq	r0, #0
    a6b0:	00014f0d 	andeq	r4, r1, sp, lsl #30
    a6b4:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    a6b8:	000000ef 	andeq	r0, r0, pc, ror #1
    a6bc:	d4030004 	strle	r0, [r3], #-4
    a6c0:	04000004 	streq	r0, [r0], #-4
    a6c4:	01120341 	tsteq	r2, r1, asr #6
    a6c8:	a0090000 	andge	r0, r9, r0
    a6cc:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    a6d0:	0000030c 	andeq	r0, r0, ip, lsl #6
    a6d4:	ac1a4304 	ldcge	3, cr4, [sl], {4}
    a6d8:	01000001 	tsteq	r0, r1
    a6dc:	038e0e01 	orreq	r0, lr, #1, 28
    a6e0:	45040000 	strmi	r0, [r4, #-0]
    a6e4:	0001cd0e 	andeq	ip, r1, lr, lsl #26
    a6e8:	0a010100 	beq	4aaf0 <__ccfg+0x2ab48>
    a6ec:	0001d304 	andeq	sp, r1, r4, lsl #6
    a6f0:	08010200 	stmdaeq	r1, {r9}
    a6f4:	000003ec 	andeq	r0, r0, ip, ror #7
    a6f8:	0001d308 	andeq	sp, r1, r8, lsl #6
    a6fc:	03a40e00 			; <UNDEFINED> instruction: 0x03a40e00
    a700:	45040000 	strmi	r0, [r4, #-0]
    a704:	0001cd1e 	andeq	ip, r1, lr, lsl sp
    a708:	0b010100 	bleq	4ab10 <__ccfg+0x2ab68>
    a70c:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    a710:	0000021e 	andeq	r0, r0, lr, lsl r2
    a714:	0019fd0d 	andseq	pc, r9, sp, lsl #26
    a718:	0b900500 	bleq	fe40bb20 <_estack+0xde406b20>
    a71c:	00000067 	andeq	r0, r0, r7, rrx
    a720:	06b30d00 	ldrteq	r0, [r3], r0, lsl #26
    a724:	91050000 	mrsls	r0, (UNDEF: 5)
    a728:	0000cd08 	andeq	ip, r0, r8, lsl #26
    a72c:	be0d0400 	cfcpyslt	mvf0, mvf13
    a730:	05000015 	streq	r0, [r0, #-21]	; 0xffffffeb
    a734:	00ea1092 	smlaleq	r1, sl, r2, r0
    a738:	00060000 	andeq	r0, r6, r0
    a73c:	00049303 	andeq	r9, r4, r3, lsl #6
    a740:	03930500 	orrseq	r0, r3, #0, 10
    a744:	000001ed 	andeq	r0, r0, sp, ror #3
    a748:	00021e0f 	andeq	r1, r2, pc, lsl #28
    a74c:	00023500 	andeq	r3, r2, r0, lsl #10
    a750:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    a754:	00000021 	andeq	r0, r0, r1, lsr #32
    a758:	2a0f9905 	bcs	3f0b74 <__ccfg+0x3d0bcc>
    a75c:	01000002 	tsteq	r0, r2
    a760:	06010b01 	streq	r0, [r1], -r1, lsl #22
    a764:	026d0991 	rsbeq	r0, sp, #2375680	; 0x244000
    a768:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    a76c:	06000005 	streq	r0, [r0], -r5
    a770:	00de0793 	smullseq	r0, lr, r3, r7
    a774:	07010000 	streq	r0, [r1, -r0]
    a778:	1c0c0001 	stcne	0, cr0, [ip], {1}
    a77c:	06000000 	streq	r0, [r0], -r0
    a780:	00de0394 	smullseq	r0, lr, r4, r3
    a784:	01010000 	mrseq	r0, (UNDEF: 1)
    a788:	03000000 	movweq	r0, #0
    a78c:	0000029d 	muleq	r0, sp, r2
    a790:	43039606 	movwmi	r9, #13830	; 0x3606
    a794:	08000002 	stmdaeq	r0, {r1}
    a798:	0000026d 	andeq	r0, r0, sp, ror #4
    a79c:	0002790f 	andeq	r7, r2, pc, lsl #18
    a7a0:	00028900 	andeq	r8, r2, r0, lsl #18
    a7a4:	08001000 	stmdaeq	r0, {ip}
    a7a8:	0000027e 	andeq	r0, r0, lr, ror r2
    a7ac:	0003570e 	andeq	r5, r3, lr, lsl #14
    a7b0:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    a7b4:	00000289 	andeq	r0, r0, r9, lsl #5
    a7b8:	d90f0101 	stmdble	pc, {r0, r8}	; <UNPREDICTABLE>
    a7bc:	a7000000 	strge	r0, [r0, -r0]
    a7c0:	10000002 	andne	r0, r0, r2
    a7c4:	029c0800 	addseq	r0, ip, #0, 16
    a7c8:	d50e0000 	strle	r0, [lr, #-0]
    a7cc:	07000003 	streq	r0, [r0, -r3]
    a7d0:	02a71306 	adceq	r1, r7, #402653184	; 0x18000000
    a7d4:	01010000 	mrseq	r0, (UNDEF: 1)
    a7d8:	0001340e 	andeq	r3, r1, lr, lsl #8
    a7dc:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    a7e0:	000000ef 	andeq	r0, r0, pc, ror #1
    a7e4:	48110101 	ldmdami	r1, {r0, r8}
    a7e8:	08000005 	stmdaeq	r0, {r0, r2}
    a7ec:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    a7f0:	0a000002 	beq	a800 <__exidx_end+0x5aac>
    a7f4:	0002db04 	andeq	sp, r2, r4, lsl #22
    a7f8:	e7011200 	str	r1, [r1, -r0, lsl #4]
    a7fc:	13000002 	movwne	r0, #2
    a800:	000000cd 	andeq	r0, r0, sp, asr #1
    a804:	01da0f00 	bicseq	r0, sl, r0, lsl #30
    a808:	02f20000 	rscseq	r0, r2, #0
    a80c:	00100000 	andseq	r0, r0, r0
    a810:	0002e708 	andeq	lr, r2, r8, lsl #14
    a814:	04e41400 	strbteq	r1, [r4], #1024	; 0x400
    a818:	7f080000 	svcvc	0x00080000
    a81c:	02f21601 	rscseq	r1, r2, #1048576	; 0x100000
    a820:	01010000 	mrseq	r0, (UNDEF: 1)
    a824:	0003c114 	andeq	ip, r3, r4, lsl r1
    a828:	01820800 	orreq	r0, r2, r0, lsl #16
    a82c:	0000fb14 	andeq	pc, r0, r4, lsl fp	; <UNPREDICTABLE>
    a830:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    a834:	00000511 	andeq	r0, r0, r1, lsl r5
    a838:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    a83c:	000000ef 	andeq	r0, r0, pc, ror #1
    a840:	08150101 	ldmdaeq	r5, {r0, r8}
    a844:	09030308 	stmdbeq	r3, {r3, r8, r9}
    a848:	0000034b 	andeq	r0, r0, fp, asr #6
    a84c:	00361b16 	eorseq	r1, r6, r6, lsl fp
    a850:	03070800 	movweq	r0, #30720	; 0x7800
    a854:	0000cd07 	andeq	ip, r0, r7, lsl #26
    a858:	0b160000 	bleq	58a860 <__ccfg+0x56a8b8>
    a85c:	08000006 	stmdaeq	r0, {r1, r2}
    a860:	00080308 	andeq	r0, r8, r8, lsl #6
    a864:	04000001 	streq	r0, [r0], #-1
    a868:	02751100 	rsbseq	r1, r5, #0, 2
    a86c:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    a870:	03240303 			; <UNDEFINED> instruction: 0x03240303
    a874:	58170000 	ldmdapl	r7, {}	; <UNPREDICTABLE>
    a878:	30000005 	andcc	r0, r0, r5
    a87c:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    a880:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    a884:	00151216 	andseq	r1, r5, r6, lsl r2
    a888:	03140800 	tsteq	r4, #0, 16
    a88c:	0000cd08 	andeq	ip, r0, r8, lsl #26
    a890:	2d160000 	ldccs	0, cr0, [r6, #-0]
    a894:	08000003 	stmdaeq	r0, {r0, r1}
    a898:	cd080315 	stcgt	3, cr0, [r8, #-84]	; 0xffffffac
    a89c:	02000000 	andeq	r0, r0, #0
    a8a0:	00054b16 	andeq	r4, r5, r6, lsl fp
    a8a4:	03160800 	tsteq	r6, #0, 16
    a8a8:	0002c80b 	andeq	ip, r2, fp, lsl #16
    a8ac:	88160400 	ldmdahi	r6, {sl}
    a8b0:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    a8b4:	00090317 	andeq	r0, r9, r7, lsl r3
    a8b8:	08000001 	stmdaeq	r0, {r0}
    a8bc:	0004dd16 	andeq	sp, r4, r6, lsl sp
    a8c0:	03180800 	tsteq	r8, #0, 16
    a8c4:	0003bb0f 	andeq	fp, r3, pc, lsl #22
    a8c8:	28160c00 	ldmdacs	r6, {sl, fp}
    a8cc:	08000003 	stmdaeq	r0, {r0, r1}
    a8d0:	cb150319 	blgt	54b53c <__ccfg+0x52b594>
    a8d4:	2c000003 	stccs	0, cr0, [r0], {3}
    a8d8:	034b0f00 	movteq	r0, #48896	; 0xbf00
    a8dc:	03cb0000 	biceq	r0, fp, #0
    a8e0:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    a8e4:	03000000 	movweq	r0, #0
    a8e8:	58040a00 	stmdapl	r4, {r9, fp}
    a8ec:	11000003 	tstne	r0, r3
    a8f0:	00000563 	andeq	r0, r0, r3, ror #10
    a8f4:	1b031c08 	blne	d191c <__ccfg+0xb1974>
    a8f8:	00000358 	andeq	r0, r0, r8, asr r3
    a8fc:	0003b714 	andeq	fp, r3, r4, lsl r7
    a900:	031e0800 	tsteq	lr, #0, 16
    a904:	0003ed14 	andeq	lr, r3, r4, lsl sp
    a908:	0a010100 	beq	4ad10 <__ccfg+0x2ad68>
    a90c:	0003d104 	andeq	sp, r3, r4, lsl #2
    a910:	bf011900 	svclt	0x00011900
    a914:	01000022 	tsteq	r0, r2, lsr #32
    a918:	81010508 	tsthi	r1, r8, lsl #10
    a91c:	a4000000 	strge	r0, [r0], #-0
    a920:	3400002c 	strcc	r0, [r0], #-44	; 0xffffffd4
    a924:	01000030 	tsteq	r0, r0, lsr r0
    a928:	0005869c 	muleq	r5, ip, r6
    a92c:	75621a00 	strbvc	r1, [r2, #-2560]!	; 0xfffff600
    a930:	08010066 	stmdaeq	r1, {r1, r2, r5, r6}
    a934:	00058618 	andeq	r8, r5, r8, lsl r6
    a938:	002eea00 	eoreq	lr, lr, r0, lsl #20
    a93c:	6d661a00 	vstmdbvs	r6!, {s3-s2}
    a940:	08010074 	stmdaeq	r1, {r2, r4, r5, r6}
    a944:	00058629 	andeq	r8, r5, r9, lsr #12
    a948:	0030e100 	eorseq	lr, r0, r0, lsl #2
    a94c:	70611a00 	rsbvc	r1, r1, r0, lsl #20
    a950:	36080100 	strcc	r0, [r8], -r0, lsl #2
    a954:	000000b5 	strheq	r0, [r0], -r5
    a958:	00003115 	andeq	r3, r0, r5, lsl r1
    a95c:	00636e1b 	rsbeq	r6, r3, fp, lsl lr
    a960:	81060a01 	tsthi	r6, r1, lsl #20
    a964:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    a968:	1c000031 	stcne	0, cr0, [r0], {49}	; 0x31
    a96c:	00002274 	andeq	r2, r0, r4, ror r2
    a970:	1c114e01 	ldcne	14, cr4, [r1], {1}
    a974:	000022c5 	andeq	r2, r0, r5, asr #5
    a978:	1d165501 	cfldr32ne	mvfx5, [r6, #-4]
    a97c:	00002d66 	andeq	r2, r0, r6, ror #26
    a980:	00002dd6 	ldrdeq	r2, [r0], -r6
    a984:	00000488 	andeq	r0, r0, r8, lsl #9
    a988:	7061761e 	rsbvc	r7, r1, lr, lsl r6
    a98c:	114e0100 	mrsne	r0, (UNDEF: 94)
    a990:	0000010c 	andeq	r0, r0, ip, lsl #2
    a994:	6d1b5601 	ldcvs	6, cr5, [fp, #-4]
    a998:	4e010066 	cdpmi	0, 0, cr0, cr1, cr6, {3}
    a99c:	0000c111 	andeq	ip, r0, r1, lsl r1
    a9a0:	00322f00 	eorseq	r2, r2, r0, lsl #30
    a9a4:	d61d0000 	ldrle	r0, [sp], -r0
    a9a8:	1e00002d 	cdpne	0, 0, cr0, cr0, cr13, {1}
    a9ac:	a400002e 	strge	r0, [r0], #-46	; 0xffffffd2
    a9b0:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    a9b4:	00706176 	rsbseq	r6, r0, r6, ror r1
    a9b8:	0c114f01 	ldceq	15, cr4, [r1], {1}
    a9bc:	01000001 	tsteq	r0, r1
    a9c0:	401f005e 	andsmi	r0, pc, lr, asr r0	; <UNPREDICTABLE>
    a9c4:	d500000f 	strle	r0, [r0, #-15]
    a9c8:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    a9cc:	00706176 	rsbseq	r6, r0, r6, ror r1
    a9d0:	0c115001 	ldceq	0, cr5, [r1], {1}
    a9d4:	01000001 	tsteq	r0, r1
    a9d8:	6364205e 	cmnvs	r4, #94	; 0x5e
    a9dc:	11500100 	cmpne	r0, r0, lsl #2
    a9e0:	00000081 	andeq	r0, r0, r1, lsl #1
    a9e4:	0100631b 	tsteq	r0, fp, lsl r3
    a9e8:	01d31150 	bicseq	r1, r3, r0, asr r1
    a9ec:	324d0000 	subcc	r0, sp, #0
    a9f0:	1f000000 	svcne	0x00000000
    a9f4:	00000f58 	andeq	r0, r0, r8, asr pc
    a9f8:	000004fc 	strdeq	r0, [r0], -ip
    a9fc:	7061761e 	rsbvc	r7, r1, lr, lsl r6
    aa00:	16550100 	ldrbne	r0, [r5], -r0, lsl #2
    aa04:	0000058c 	andeq	r0, r0, ip, lsl #11
    aa08:	6d1b5e01 	ldcvs	14, cr5, [fp, #-4]
    aa0c:	55010066 	strpl	r0, [r1, #-102]	; 0xffffff9a
    aa10:	0000c116 	andeq	ip, r0, r6, lsl r1
    aa14:	00326b00 	eorseq	r6, r2, r0, lsl #22
    aa18:	081f0000 	ldmdaeq	pc, {}	; <UNPREDICTABLE>
    aa1c:	1400000f 	strne	r0, [r0], #-15
    aa20:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    aa24:	00706176 	rsbseq	r6, r0, r6, ror r1
    aa28:	8c165601 	ldchi	6, cr5, [r6], {1}
    aa2c:	01000005 	tsteq	r0, r5
    aa30:	701f005e 	andsvc	r0, pc, lr, asr r0	; <UNPREDICTABLE>
    aa34:	4500000f 	strmi	r0, [r0, #-15]
    aa38:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    aa3c:	00706176 	rsbseq	r6, r0, r6, ror r1
    aa40:	8c165701 	ldchi	7, cr5, [r6], {1}
    aa44:	01000005 	tsteq	r0, r5
    aa48:	6364205e 	cmnvs	r4, #94	; 0x5e
    aa4c:	16570100 	ldrbne	r0, [r7], -r0, lsl #2
    aa50:	00000081 	andeq	r0, r0, r1, lsl #1
    aa54:	0100631b 	tsteq	r0, fp, lsl r3
    aa58:	01d31657 	bicseq	r1, r3, r7, asr r6
    aa5c:	32890000 	addcc	r0, r9, #0
    aa60:	1d000000 	stcne	0, cr0, [r0, #-0]
    aa64:	00002fe6 	andeq	r2, r0, r6, ror #31
    aa68:	00002ffa 	strdeq	r2, [r0], -sl
    aa6c:	0000056f 	andeq	r0, r0, pc, ror #10
    aa70:	0100631b 	tsteq	r0, fp, lsl r3
    aa74:	01d3095c 	bicseq	r0, r3, ip, asr r9
    aa78:	32a70000 	adccc	r0, r7, #0
    aa7c:	731e0000 	tstvc	lr, #0
    aa80:	01007061 	tsteq	r0, r1, rrx
    aa84:	01cd0d5c 	biceq	r0, sp, ip, asr sp
    aa88:	56010000 	strpl	r0, [r1], -r0
    aa8c:	0f202100 	svceq	0x00202100
    aa90:	731b0000 	tstvc	fp, #0
    aa94:	01007061 	tsteq	r0, r1, rrx
    aa98:	01cd0a66 	biceq	r0, sp, r6, ror #20
    aa9c:	32ba0000 	adcscc	r0, sl, #0
    aaa0:	00000000 	andeq	r0, r0, r0
    aaa4:	01da040a 	bicseq	r0, sl, sl, lsl #8
    aaa8:	040a0000 	streq	r0, [sl], #-0
    aaac:	000000ef 	andeq	r0, r0, pc, ror #1
    aab0:	001fea00 	andseq	lr, pc, r0, lsl #20
    aab4:	7c000300 	stcvc	3, cr0, [r0], {-0}
    aab8:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    aabc:	00018101 	andeq	r8, r1, r1, lsl #2
    aac0:	22d30c00 	sbcscs	r0, r3, #0, 24
    aac4:	04060000 	streq	r0, [r6], #-0
    aac8:	65f30000 	ldrbvs	r0, [r3, #0]!
    aacc:	01020000 	mrseq	r0, (UNDEF: 2)
    aad0:	0003e506 	andeq	lr, r3, r6, lsl #10
    aad4:	2b6c0300 	blcs	1b0b6dc <__ccfg+0x1aeb734>
    aad8:	25010000 	strcs	r0, [r1, #-0]
    aadc:	00003018 	andeq	r3, r0, r8, lsl r0
    aae0:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    aae4:	00000446 	andeq	r0, r0, r6, asr #8
    aae8:	b4050402 	strlt	r0, [r5], #-1026	; 0xfffffbfe
    aaec:	02000000 	andeq	r0, r0, #0
    aaf0:	00af0508 	adceq	r0, pc, r8, lsl #10
    aaf4:	9b030000 	blls	caafc <__ccfg+0xaab54>
    aaf8:	01000023 	tsteq	r0, r3, lsr #32
    aafc:	0051182e 	subseq	r1, r1, lr, lsr #16
    ab00:	01020000 	mrseq	r0, (UNDEF: 2)
    ab04:	0003e308 	andeq	lr, r3, r8, lsl #6
    ab08:	27910300 	ldrcs	r0, [r1, r0, lsl #6]
    ab0c:	31010000 	mrscc	r0, (UNDEF: 1)
    ab10:	00006419 	andeq	r6, r0, r9, lsl r4
    ab14:	07020200 	streq	r0, [r2, -r0, lsl #4]
    ab18:	0000028a 	andeq	r0, r0, sl, lsl #5
    ab1c:	00233303 	eoreq	r3, r3, r3, lsl #6
    ab20:	19340100 	ldmdbne	r4!, {r8}
    ab24:	0000007c 	andeq	r0, r0, ip, ror r0
    ab28:	00006b04 	andeq	r6, r0, r4, lsl #22
    ab2c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    ab30:	0000007e 	andeq	r0, r0, lr, ror r0
    ab34:	79070802 	stmdbvc	r7, {r1, fp}
    ab38:	05000000 	streq	r0, [r0, #-0]
    ab3c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    ab40:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    ab44:	00008307 	andeq	r8, r0, r7, lsl #6
    ab48:	231c0300 	tstcs	ip, #0, 6
    ab4c:	56010000 	strpl	r0, [r1], -r0
    ab50:	0000911a 	andeq	r9, r0, sl, lsl r1
    ab54:	1e240600 	cfmadda32ne	mvax0, mvax0, mvfx4, mvfx0
    ab58:	5e020000 	cdppl	0, 0, cr0, cr2, cr0, {0}
    ab5c:	00911701 	addseq	r1, r1, r1, lsl #14
    ab60:	53030000 	movwpl	r0, #12288	; 0x3000
    ab64:	03000020 	movweq	r0, #32
    ab68:	00370e2e 	eorseq	r0, r7, lr, lsr #28
    ab6c:	40030000 	andmi	r0, r3, r0
    ab70:	03000016 	movweq	r0, #22
    ab74:	00370e74 	eorseq	r0, r7, r4, ror lr
    ab78:	04070000 	streq	r0, [r7], #-0
    ab7c:	eb03a503 	bl	f3f90 <__ccfg+0xd3fe8>
    ab80:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    ab84:	0000196a 	andeq	r1, r0, sl, ror #18
    ab88:	a40ca703 	strge	sl, [ip], #-1795	; 0xfffff8fd
    ab8c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    ab90:	00001cea 	andeq	r1, r0, sl, ror #25
    ab94:	eb13a803 	bl	4f4ba8 <__ccfg+0x4d4c00>
    ab98:	00000000 	andeq	r0, r0, r0
    ab9c:	00005109 	andeq	r5, r0, r9, lsl #2
    aba0:	0000fb00 	andeq	pc, r0, r0, lsl #22
    aba4:	00910a00 	addseq	r0, r1, r0, lsl #20
    aba8:	00030000 	andeq	r0, r3, r0
    abac:	a203080b 	andge	r0, r3, #720896	; 0xb0000
    abb0:	00011f09 	andeq	r1, r1, r9, lsl #30
    abb4:	16c40c00 	strbne	r0, [r4], r0, lsl #24
    abb8:	a4030000 	strge	r0, [r3], #-0
    abbc:	00008a07 	andeq	r8, r0, r7, lsl #20
    abc0:	8e0c0000 	cdphi	0, 0, cr0, cr12, cr0, {0}
    abc4:	03000018 	movweq	r0, #24
    abc8:	00c905a9 	sbceq	r0, r9, r9, lsr #11
    abcc:	00040000 	andeq	r0, r4, r0
    abd0:	001a9603 	andseq	r9, sl, r3, lsl #12
    abd4:	03aa0300 			; <UNDEFINED> instruction: 0x03aa0300
    abd8:	000000fb 	strdeq	r0, [r0], -fp
    abdc:	1203040d 	andne	r0, r3, #218103808	; 0xd000000
    abe0:	0400001a 	streq	r0, [r0], #-26	; 0xffffffe6
    abe4:	007c1916 	rsbseq	r1, ip, r6, lsl r9
    abe8:	f0030000 			; <UNDEFINED> instruction: 0xf0030000
    abec:	05000015 	streq	r0, [r0, #-21]	; 0xffffffeb
    abf0:	008a0d0c 	addeq	r0, sl, ip, lsl #26
    abf4:	55030000 	strpl	r0, [r3, #-0]
    abf8:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    abfc:	01391b23 	teqeq	r9, r3, lsr #22
    ac00:	6f0e0000 	svcvs	0x000e0000
    ac04:	18000016 	stmdane	r0, {r1, r2, r4}
    ac08:	ab083404 	blge	217c20 <__ccfg+0x1f7c78>
    ac0c:	0c000001 	stceq	0, cr0, [r0], {1}
    ac10:	000020bf 	strheq	r2, [r0], -pc	; <UNPREDICTABLE>
    ac14:	ab133604 	blge	4d842c <__ccfg+0x4b8484>
    ac18:	00000001 	andeq	r0, r0, r1
    ac1c:	006b5f0f 	rsbeq	r5, fp, pc, lsl #30
    ac20:	8a073704 	bhi	1d8838 <__ccfg+0x1b8890>
    ac24:	04000000 	streq	r0, [r0], #-0
    ac28:	001d7b0c 	andseq	r7, sp, ip, lsl #22
    ac2c:	0b370400 	bleq	dcbc34 <__ccfg+0xdabc8c>
    ac30:	0000008a 	andeq	r0, r0, sl, lsl #1
    ac34:	3d6f0c08 	stclcc	12, cr0, [pc, #-32]!	; ac1c <__exidx_end+0x5ec8>
    ac38:	37040000 	strcc	r0, [r4, -r0]
    ac3c:	00008a14 	andeq	r8, r0, r4, lsl sl
    ac40:	420c0c00 	andmi	r0, ip, #0, 24
    ac44:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    ac48:	008a1b37 	addeq	r1, sl, r7, lsr fp
    ac4c:	0f100000 	svceq	0x00100000
    ac50:	0400785f 	streq	r7, [r0], #-2143	; 0xfffff7a1
    ac54:	01b10b38 			; <UNDEFINED> instruction: 0x01b10b38
    ac58:	00140000 	andseq	r0, r4, r0
    ac5c:	01510410 	cmpeq	r1, r0, lsl r4
    ac60:	2d090000 	stccs	0, cr0, [r9, #-0]
    ac64:	c1000001 	tstgt	r0, r1
    ac68:	0a000001 	beq	ac74 <__exidx_end+0x5f20>
    ac6c:	00000091 	muleq	r0, r1, r0
    ac70:	bc0e0000 	stclt	0, cr0, [lr], {-0}
    ac74:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
    ac78:	44083c04 	strmi	r3, [r8], #-3076	; 0xfffff3fc
    ac7c:	0c000002 	stceq	0, cr0, [r0], {2}
    ac80:	0000159a 	muleq	r0, sl, r5
    ac84:	8a093e04 	bhi	25a49c <__ccfg+0x23a4f4>
    ac88:	00000000 	andeq	r0, r0, r0
    ac8c:	0016eb0c 	andseq	lr, r6, ip, lsl #22
    ac90:	093f0400 	ldmdbeq	pc!, {sl}	; <UNPREDICTABLE>
    ac94:	0000008a 	andeq	r0, r0, sl, lsl #1
    ac98:	169e0c04 	ldrne	r0, [lr], r4, lsl #24
    ac9c:	40040000 	andmi	r0, r4, r0
    aca0:	00008a09 	andeq	r8, r0, r9, lsl #20
    aca4:	010c0800 	tsteq	ip, r0, lsl #16
    aca8:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    acac:	008a0941 	addeq	r0, sl, r1, asr #18
    acb0:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    acb4:	00001b78 	andeq	r1, r0, r8, ror fp
    acb8:	8a094204 	bhi	25b4d0 <__ccfg+0x23b528>
    acbc:	10000000 	andne	r0, r0, r0
    acc0:	001d040c 	andseq	r0, sp, ip, lsl #8
    acc4:	09430400 	stmdbeq	r3, {sl}^
    acc8:	0000008a 	andeq	r0, r0, sl, lsl #1
    accc:	16770c14 			; <UNDEFINED> instruction: 0x16770c14
    acd0:	44040000 	strmi	r0, [r4], #-0
    acd4:	00008a09 	andeq	r8, r0, r9, lsl #20
    acd8:	040c1800 	streq	r1, [ip], #-2048	; 0xfffff800
    acdc:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    ace0:	008a0945 	addeq	r0, sl, r5, asr #18
    ace4:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    ace8:	00001ac6 	andeq	r1, r0, r6, asr #21
    acec:	8a094604 	bhi	25c504 <__ccfg+0x23c55c>
    acf0:	20000000 	andcs	r0, r0, r0
    acf4:	15261100 	strne	r1, [r6, #-256]!	; 0xffffff00
    acf8:	01080000 	mrseq	r0, (UNDEF: 8)
    acfc:	89084f04 	stmdbhi	r8, {r2, r8, r9, sl, fp, lr}
    ad00:	0c000002 	stceq	0, cr0, [r0], {2}
    ad04:	00002012 	andeq	r2, r0, r2, lsl r0
    ad08:	890a5004 	stmdbhi	sl, {r2, ip, lr}
    ad0c:	00000002 	andeq	r0, r0, r2
    ad10:	001e4a0c 	andseq	r4, lr, ip, lsl #20
    ad14:	09510400 	ldmdbeq	r1, {sl}^
    ad18:	00000289 	andeq	r0, r0, r9, lsl #5
    ad1c:	20341280 	eorscs	r1, r4, r0, lsl #5
    ad20:	53040000 	movwpl	r0, #16384	; 0x4000
    ad24:	00012d0a 	andeq	r2, r1, sl, lsl #26
    ad28:	12010000 	andne	r0, r1, #0
    ad2c:	000020a3 	andeq	r2, r0, r3, lsr #1
    ad30:	2d0a5604 	stccs	6, cr5, [sl, #-16]
    ad34:	04000001 	streq	r0, [r0], #-1
    ad38:	2b090001 	blcs	24ad44 <__ccfg+0x22ad9c>
    ad3c:	99000001 	stmdbls	r0, {r0}
    ad40:	0a000002 	beq	ad50 <__exidx_end+0x5ffc>
    ad44:	00000091 	muleq	r0, r1, r0
    ad48:	e411001f 	ldr	r0, [r1], #-31	; 0xffffffe1
    ad4c:	9000001b 	andls	r0, r0, fp, lsl r0
    ad50:	08620401 	stmdaeq	r2!, {r0, sl}^
    ad54:	000002dc 	ldrdeq	r0, [r0], -ip
    ad58:	0020bf0c 	eoreq	fp, r0, ip, lsl #30
    ad5c:	12630400 	rsbne	r0, r3, #0, 8
    ad60:	000002dc 	ldrdeq	r0, [r0], -ip
    ad64:	18130c00 	ldmdane	r3, {sl, fp}
    ad68:	64040000 	strvs	r0, [r4], #-0
    ad6c:	00008a06 	andeq	r8, r0, r6, lsl #20
    ad70:	510c0400 	tstpl	ip, r0, lsl #8
    ad74:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    ad78:	02e20966 	rsceq	r0, r2, #1671168	; 0x198000
    ad7c:	0c080000 	stceq	0, cr0, [r8], {-0}
    ad80:	00001526 	andeq	r1, r0, r6, lsr #10
    ad84:	441e6704 	ldrmi	r6, [lr], #-1796	; 0xfffff8fc
    ad88:	88000002 	stmdahi	r0, {r1}
    ad8c:	99041000 	stmdbls	r4, {ip}
    ad90:	09000002 	stmdbeq	r0, {r1}
    ad94:	000002f2 	strdeq	r0, [r0], -r2
    ad98:	000002f2 	strdeq	r0, [r0], -r2
    ad9c:	0000910a 	andeq	r9, r0, sl, lsl #2
    ada0:	10001f00 	andne	r1, r0, r0, lsl #30
    ada4:	0002f804 	andeq	pc, r2, r4, lsl #16
    ada8:	0e011300 	cdpeq	3, 0, cr1, cr1, cr0, {0}
    adac:	00001f19 	andeq	r1, r0, r9, lsl pc
    adb0:	087a0408 	ldmdaeq	sl!, {r3, sl}^
    adb4:	00000322 	andeq	r0, r0, r2, lsr #6
    adb8:	0019fc0c 	andseq	pc, r9, ip, lsl #24
    adbc:	117b0400 	cmnne	fp, r0, lsl #8
    adc0:	00000322 	andeq	r0, r0, r2, lsr #6
    adc4:	13da0c00 	bicsne	r0, sl, #0, 24
    adc8:	7c040000 	stcvc	0, cr0, [r4], {-0}
    adcc:	00008a06 	andeq	r8, r0, r6, lsl #20
    add0:	10000400 	andne	r0, r0, r0, lsl #8
    add4:	00005104 	andeq	r5, r0, r4, lsl #2
    add8:	173a0e00 	ldrne	r0, [sl, -r0, lsl #28]!
    addc:	04680000 	strbteq	r0, [r8], #-0
    ade0:	046b08ba 	strbteq	r0, [fp], #-2234	; 0xfffff746
    ade4:	5f0f0000 	svcpl	0x000f0000
    ade8:	bb040070 	bllt	10afb0 <__ccfg+0xeb008>
    adec:	00032212 	andeq	r2, r3, r2, lsl r2
    adf0:	5f0f0000 	svcpl	0x000f0000
    adf4:	bc040072 	stclt	0, cr0, [r4], {114}	; 0x72
    adf8:	00008a07 	andeq	r8, r0, r7, lsl #20
    adfc:	5f0f0400 	svcpl	0x000f0400
    ae00:	bd040077 	stclt	0, cr0, [r4, #-476]	; 0xfffffe24
    ae04:	00008a07 	andeq	r8, r0, r7, lsl #20
    ae08:	bd0c0800 	stclt	8, cr0, [ip, #-0]
    ae0c:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    ae10:	003009be 	ldrhteq	r0, [r0], -lr
    ae14:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    ae18:	00001a3f 	andeq	r1, r0, pc, lsr sl
    ae1c:	3009bf04 	andcc	fp, r9, r4, lsl #30
    ae20:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    ae24:	66625f0f 	strbtvs	r5, [r2], -pc, lsl #30
    ae28:	11c00400 	bicne	r0, r0, r0, lsl #8
    ae2c:	000002fa 	strdeq	r0, [r0], -sl
    ae30:	15b40c10 	ldrne	r0, [r4, #3088]!	; 0xc10
    ae34:	c1040000 	mrsgt	r0, (UNDEF: 4)
    ae38:	00008a07 	andeq	r8, r0, r7, lsl #20
    ae3c:	560c1800 	strpl	r1, [ip], -r0, lsl #16
    ae40:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    ae44:	012b0ac8 	smlawteq	fp, r8, sl, r0
    ae48:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    ae4c:	0000136a 	andeq	r1, r0, sl, ror #6
    ae50:	f01dca04 			; <UNDEFINED> instruction: 0xf01dca04
    ae54:	20000005 	andcs	r0, r0, r5
    ae58:	0013310c 	andseq	r3, r3, ip, lsl #2
    ae5c:	1dcc0400 	cfstrdne	mvd0, [ip]
    ae60:	0000061b 	andeq	r0, r0, fp, lsl r6
    ae64:	20d00c24 	sbcscs	r0, r0, r4, lsr #24
    ae68:	cf040000 	svcgt	0x00040000
    ae6c:	0006400d 	andeq	r4, r6, sp
    ae70:	1f0c2800 	svcne	0x000c2800
    ae74:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    ae78:	065b09d0 			; <UNDEFINED> instruction: 0x065b09d0
    ae7c:	0f2c0000 	svceq	0x002c0000
    ae80:	0062755f 	rsbeq	r7, r2, pc, asr r5
    ae84:	fa11d304 	blx	47fa9c <__ccfg+0x45faf4>
    ae88:	30000002 	andcc	r0, r0, r2
    ae8c:	70755f0f 	rsbsvc	r5, r5, pc, lsl #30
    ae90:	12d40400 	sbcsne	r0, r4, #0, 8
    ae94:	00000322 	andeq	r0, r0, r2, lsr #6
    ae98:	755f0f38 	ldrbvc	r0, [pc, #-3896]	; 9f68 <__exidx_end+0x5214>
    ae9c:	d5040072 	strle	r0, [r4, #-114]	; 0xffffff8e
    aea0:	00008a07 	andeq	r8, r0, r7, lsl #20
    aea4:	e70c3c00 	str	r3, [ip, -r0, lsl #24]
    aea8:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
    aeac:	066111d8 			; <UNDEFINED> instruction: 0x066111d8
    aeb0:	0c400000 	mareq	acc0, r0, r0
    aeb4:	0000205a 	andeq	r2, r0, sl, asr r0
    aeb8:	7111d904 	tstvc	r1, r4, lsl #18
    aebc:	43000006 	movwmi	r0, #6
    aec0:	626c5f0f 	rsbvs	r5, ip, #15, 30	; 0x3c
    aec4:	11dc0400 	bicsne	r0, ip, r0, lsl #8
    aec8:	000002fa 	strdeq	r0, [r0], -sl
    aecc:	1db30c44 	ldcne	12, cr0, [r3, #272]!	; 0x110
    aed0:	df040000 	svcle	0x00040000
    aed4:	00008a07 	andeq	r8, r0, r7, lsl #20
    aed8:	830c4c00 	movwhi	r4, #52224	; 0xcc00
    aedc:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    aee0:	00b10ae0 	adcseq	r0, r1, r0, ror #21
    aee4:	0c500000 	mraeq	r0, r0, acc0
    aee8:	00000f87 	andeq	r0, r0, r7, lsl #31
    aeec:	8a12e304 	bhi	4c3b04 <__ccfg+0x4a3b5c>
    aef0:	54000004 	strpl	r0, [r0], #-4
    aef4:	001dd50c 	andseq	sp, sp, ip, lsl #10
    aef8:	0ce70400 	cfstrdeq	mvd0, [r7]
    aefc:	00000145 	andeq	r0, r0, r5, asr #2
    af00:	1bec0c58 	blne	ffb0e068 <_estack+0xdfb09068>
    af04:	e9040000 	stmdb	r4, {}	; <UNPREDICTABLE>
    af08:	00011f0e 	andeq	r1, r1, lr, lsl #30
    af0c:	9b0c5c00 	blls	321f14 <__ccfg+0x301f6c>
    af10:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
    af14:	008a09ea 	addeq	r0, sl, sl, ror #19
    af18:	00640000 	rsbeq	r0, r4, r0
    af1c:	008a0114 	addeq	r0, sl, r4, lsl r1
    af20:	048a0000 	streq	r0, [sl], #0
    af24:	8a150000 	bhi	54af2c <__ccfg+0x52af84>
    af28:	15000004 	strne	r0, [r0, #-4]
    af2c:	0000012b 	andeq	r0, r0, fp, lsr #2
    af30:	0005de15 	andeq	sp, r5, r5, lsl lr
    af34:	008a1500 	addeq	r1, sl, r0, lsl #10
    af38:	10000000 	andne	r0, r0, r0
    af3c:	00049504 	andeq	r9, r4, r4, lsl #10
    af40:	048a0400 	streq	r0, [sl], #1024	; 0x400
    af44:	21160000 	tstcs	r6, r0
    af48:	28000020 	stmdacs	r0, {r5}
    af4c:	02650404 	rsbeq	r0, r5, #4, 8	; 0x4000000
    af50:	0005de08 	andeq	sp, r5, r8, lsl #28
    af54:	1adc1700 	bne	ff710b5c <_estack+0xdf70bb5c>
    af58:	67040000 	strvs	r0, [r4, -r0]
    af5c:	008a0702 	addeq	r0, sl, r2, lsl #14
    af60:	17000000 	strne	r0, [r0, -r0]
    af64:	000019d9 	ldrdeq	r1, [r0], -r9
    af68:	0b026c04 	bleq	a5f80 <__ccfg+0x85fd8>
    af6c:	000006cd 	andeq	r0, r0, sp, asr #13
    af70:	162e1704 	strtne	r1, [lr], -r4, lsl #14
    af74:	6c040000 	stcvs	0, cr0, [r4], {-0}
    af78:	06cd1402 	strbeq	r1, [sp], r2, lsl #8
    af7c:	17080000 	strne	r0, [r8, -r0]
    af80:	000020d6 	ldrdeq	r2, [r0], -r6
    af84:	1e026c04 	cdpne	12, 0, cr6, cr2, cr4, {0}
    af88:	000006cd 	andeq	r0, r0, sp, asr #13
    af8c:	180e170c 	stmdane	lr, {r2, r3, r8, r9, sl, ip}
    af90:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
    af94:	008a0802 	addeq	r0, sl, r2, lsl #16
    af98:	17100000 	ldrne	r0, [r0, -r0]
    af9c:	000017ae 	andeq	r1, r0, lr, lsr #15
    afa0:	08026f04 	stmdaeq	r2, {r2, r8, r9, sl, fp, sp, lr}
    afa4:	000008cd 	andeq	r0, r0, sp, asr #17
    afa8:	207a1714 	rsbscs	r1, sl, r4, lsl r7
    afac:	72040000 	andvc	r0, r4, #0
    afb0:	008a0702 	addeq	r0, sl, r2, lsl #14
    afb4:	17300000 	ldrne	r0, [r0, -r0]!
    afb8:	00003c1b 	andeq	r3, r0, fp, lsl ip
    afbc:	16027304 	strne	r7, [r2], -r4, lsl #6
    afc0:	000008e3 	andeq	r0, r0, r3, ror #17
    afc4:	19a11734 	stmibne	r1!, {r2, r4, r5, r8, r9, sl, ip}
    afc8:	75040000 	strvc	r0, [r4, #-0]
    afcc:	008a0702 	addeq	r0, sl, r2, lsl #14
    afd0:	17380000 	ldrne	r0, [r8, -r0]!
    afd4:	00001a6c 	andeq	r1, r0, ip, ror #20
    afd8:	0a027704 	beq	a8bf0 <__ccfg+0x88c48>
    afdc:	000008f5 	strdeq	r0, [r0], -r5
    afe0:	168c173c 			; <UNDEFINED> instruction: 0x168c173c
    afe4:	7a040000 	bvc	10afec <__ccfg+0xeb044>
    afe8:	01ab1302 			; <UNDEFINED> instruction: 0x01ab1302
    afec:	17400000 	strbne	r0, [r0, -r0]
    aff0:	00001717 	andeq	r1, r0, r7, lsl r7
    aff4:	07027b04 	streq	r7, [r2, -r4, lsl #22]
    aff8:	0000008a 	andeq	r0, r0, sl, lsl #1
    affc:	18a21744 	stmiane	r2!, {r2, r6, r8, r9, sl, ip}
    b000:	7c040000 	stcvc	0, cr0, [r4], {-0}
    b004:	01ab1302 			; <UNDEFINED> instruction: 0x01ab1302
    b008:	17480000 	strbne	r0, [r8, -r0]
    b00c:	00001a02 	andeq	r1, r0, r2, lsl #20
    b010:	14027d04 	strne	r7, [r2], #-3332	; 0xfffff2fc
    b014:	000008fb 	strdeq	r0, [r0], -fp
    b018:	1d73174c 	ldclne	7, cr1, [r3, #-304]!	; 0xfffffed0
    b01c:	80040000 	andhi	r0, r4, r0
    b020:	008a0702 	addeq	r0, sl, r2, lsl #14
    b024:	17500000 	ldrbne	r0, [r0, -r0]
    b028:	00001ea8 	andeq	r1, r0, r8, lsr #29
    b02c:	09028104 	stmdbeq	r2, {r2, r8, pc}
    b030:	000005de 	ldrdeq	r0, [r0], -lr
    b034:	04c41754 	strbeq	r1, [r4], #1876	; 0x754
    b038:	a4040000 	strge	r0, [r4], #-0
    b03c:	08a80702 	stmiaeq	r8!, {r1, r8, r9, sl}
    b040:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
    b044:	00001be4 	andeq	r1, r0, r4, ror #23
    b048:	1302a804 	movwne	sl, #10244	; 0x2804
    b04c:	000002dc 	ldrdeq	r0, [r0], -ip
    b050:	24180148 	ldrcs	r0, [r8], #-328	; 0xfffffeb8
    b054:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    b058:	991202a9 	ldmdbls	r2, {r0, r3, r5, r7, r9}
    b05c:	4c000002 	stcmi	0, cr0, [r0], {2}
    b060:	190b1801 	stmdbne	fp, {r0, fp, ip}
    b064:	ad040000 	stcge	0, cr0, [r4, #-0]
    b068:	090d0c02 	stmdbeq	sp, {r1, sl, fp}
    b06c:	02dc0000 	sbcseq	r0, ip, #0
    b070:	001fc318 	andseq	ip, pc, r8, lsl r3	; <UNPREDICTABLE>
    b074:	02b20400 	adcseq	r0, r2, #0, 8
    b078:	00068e10 	andeq	r8, r6, r0, lsl lr
    b07c:	1802e000 	stmdane	r2, {sp, lr, pc}
    b080:	00001cab 	andeq	r1, r0, fp, lsr #25
    b084:	0a02b404 	beq	b809c <__ccfg+0x980f4>
    b088:	00000919 	andeq	r0, r0, r9, lsl r9
    b08c:	100002ec 	andne	r0, r0, ip, ror #5
    b090:	0005e404 	andeq	lr, r5, r4, lsl #8
    b094:	08010200 	stmdaeq	r1, {r9}
    b098:	000003ec 	andeq	r0, r0, ip, ror #7
    b09c:	0005e404 	andeq	lr, r5, r4, lsl #8
    b0a0:	6b041000 	blvs	10f0a8 <__ccfg+0xef100>
    b0a4:	14000004 	strne	r0, [r0], #-4
    b0a8:	00008a01 	andeq	r8, r0, r1, lsl #20
    b0ac:	00061500 	andeq	r1, r6, r0, lsl #10
    b0b0:	048a1500 	streq	r1, [sl], #1280	; 0x500
    b0b4:	2b150000 	blcs	54b0bc <__ccfg+0x52b114>
    b0b8:	15000001 	strne	r0, [r0, #-1]
    b0bc:	00000615 	andeq	r0, r0, r5, lsl r6
    b0c0:	00008a15 	andeq	r8, r0, r5, lsl sl
    b0c4:	04100000 	ldreq	r0, [r0], #-0
    b0c8:	000005eb 	andeq	r0, r0, fp, ror #11
    b0cc:	05f60410 	ldrbeq	r0, [r6, #1040]!	; 0x410
    b0d0:	01140000 	tsteq	r4, r0
    b0d4:	000000bd 	strheq	r0, [r0], -sp
    b0d8:	00000640 	andeq	r0, r0, r0, asr #12
    b0dc:	00048a15 	andeq	r8, r4, r5, lsl sl
    b0e0:	012b1500 			; <UNDEFINED> instruction: 0x012b1500
    b0e4:	bd150000 	ldclt	0, cr0, [r5, #-0]
    b0e8:	15000000 	strne	r0, [r0, #-0]
    b0ec:	0000008a 	andeq	r0, r0, sl, lsl #1
    b0f0:	21041000 	mrscs	r1, (UNDEF: 4)
    b0f4:	14000006 	strne	r0, [r0], #-6
    b0f8:	00008a01 	andeq	r8, r0, r1, lsl #20
    b0fc:	00065b00 	andeq	r5, r6, r0, lsl #22
    b100:	048a1500 	streq	r1, [sl], #1280	; 0x500
    b104:	2b150000 	blcs	54b10c <__ccfg+0x52b164>
    b108:	00000001 	andeq	r0, r0, r1
    b10c:	06460410 			; <UNDEFINED> instruction: 0x06460410
    b110:	51090000 	mrspl	r0, (UNDEF: 9)
    b114:	71000000 	mrsvc	r0, (UNDEF: 0)
    b118:	0a000006 	beq	b138 <__exidx_end+0x63e4>
    b11c:	00000091 	muleq	r0, r1, r0
    b120:	51090002 	tstpl	r9, r2
    b124:	81000000 	mrshi	r0, (UNDEF: 0)
    b128:	0a000006 	beq	b148 <__exidx_end+0x63f4>
    b12c:	00000091 	muleq	r0, r1, r0
    b130:	77060000 	strvc	r0, [r6, -r0]
    b134:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    b138:	281a0124 	ldmdacs	sl, {r2, r5, r8}
    b13c:	19000003 	stmdbne	r0, {r0, r1}
    b140:	00001f50 	andeq	r1, r0, r0, asr pc
    b144:	0128040c 			; <UNDEFINED> instruction: 0x0128040c
    b148:	0006c708 	andeq	ip, r6, r8, lsl #14
    b14c:	20bf1700 	adcscs	r1, pc, r0, lsl #14
    b150:	2a040000 	bcs	10b158 <__ccfg+0xeb1b0>
    b154:	06c71101 	strbeq	r1, [r7], r1, lsl #2
    b158:	17000000 	strne	r0, [r0, -r0]
    b15c:	00001e1d 	andeq	r1, r0, sp, lsl lr
    b160:	07012b04 	streq	r2, [r1, -r4, lsl #22]
    b164:	0000008a 	andeq	r0, r0, sl, lsl #1
    b168:	19701704 	ldmdbne	r0!, {r2, r8, r9, sl, ip}^
    b16c:	2c040000 	stccs	0, cr0, [r4], {-0}
    b170:	06cd0b01 	strbeq	r0, [sp], r1, lsl #22
    b174:	00080000 	andeq	r0, r8, r0
    b178:	068e0410 	pkhbteq	r0, lr, r0, lsl #8
    b17c:	04100000 	ldreq	r0, [r0], #-0
    b180:	00000681 	andeq	r0, r0, r1, lsl #13
    b184:	00170319 	andseq	r0, r7, r9, lsl r3
    b188:	44040e00 	strmi	r0, [r4], #-3584	; 0xfffff200
    b18c:	070c0801 	streq	r0, [ip, -r1, lsl #16]
    b190:	8d170000 	ldchi	0, cr0, [r7, #-0]
    b194:	0400000c 	streq	r0, [r0], #-12
    b198:	0c120145 	ldfeqs	f0, [r2], {69}	; 0x45
    b19c:	00000007 	andeq	r0, r0, r7
    b1a0:	001a0c17 	andseq	r0, sl, r7, lsl ip
    b1a4:	01460400 	cmpeq	r6, r0, lsl #8
    b1a8:	00070c12 	andeq	r0, r7, r2, lsl ip
    b1ac:	32170600 	andscc	r0, r7, #0, 12
    b1b0:	0400000b 	streq	r0, [r0], #-11
    b1b4:	64120147 	ldrvs	r0, [r2], #-327	; 0xfffffeb9
    b1b8:	0c000000 	stceq	0, cr0, [r0], {-0}
    b1bc:	00640900 	rsbeq	r0, r4, r0, lsl #18
    b1c0:	071c0000 	ldreq	r0, [ip, -r0]
    b1c4:	910a0000 	mrsls	r0, (UNDEF: 10)
    b1c8:	02000000 	andeq	r0, r0, #0
    b1cc:	04d01a00 	ldrbeq	r1, [r0], #2560	; 0xa00
    b1d0:	31070285 	smlabbcc	r7, r5, r2, r0
    b1d4:	17000008 	strne	r0, [r0, -r8]
    b1d8:	00002060 	andeq	r2, r0, r0, rrx
    b1dc:	18028704 	stmdane	r2, {r2, r8, r9, sl, pc}
    b1e0:	00000091 	muleq	r0, r1, r0
    b1e4:	1fd11700 	svcne	0x00d11700
    b1e8:	88040000 	stmdahi	r4, {}	; <UNPREDICTABLE>
    b1ec:	05de1202 	ldrbeq	r1, [lr, #514]	; 0x202
    b1f0:	17040000 	strne	r0, [r4, -r0]
    b1f4:	0000172d 	andeq	r1, r0, sp, lsr #14
    b1f8:	10028904 	andne	r8, r2, r4, lsl #18
    b1fc:	00000831 	andeq	r0, r0, r1, lsr r8
    b200:	1d2a1708 	stcne	7, cr1, [sl, #-32]!	; 0xffffffe0
    b204:	8a040000 	bhi	10b20c <__ccfg+0xeb264>
    b208:	01c11702 	biceq	r1, r1, r2, lsl #14
    b20c:	17240000 	strne	r0, [r4, -r0]!
    b210:	000019e0 	andeq	r1, r0, r0, ror #19
    b214:	0f028b04 	svceq	0x00028b04
    b218:	0000008a 	andeq	r0, r0, sl, lsl #1
    b21c:	20ba1748 	adcscs	r1, sl, r8, asr #14
    b220:	8c040000 	stchi	0, cr0, [r4], {-0}
    b224:	00832c02 	addeq	r2, r3, r2, lsl #24
    b228:	17500000 	ldrbne	r0, [r0, -r0]
    b22c:	0000156f 	andeq	r1, r0, pc, ror #10
    b230:	1a028d04 	bne	ae648 <__ccfg+0x8e6a0>
    b234:	000006d3 	ldrdeq	r0, [r0], -r3
    b238:	18d51758 	ldmne	r5, {r3, r4, r6, r8, r9, sl, ip}^
    b23c:	8e040000 	cdphi	0, 0, cr0, cr4, cr0, {0}
    b240:	011f1602 	tsteq	pc, r2, lsl #12
    b244:	17680000 	strbne	r0, [r8, -r0]!
    b248:	00001fde 	ldrdeq	r1, [r0], -lr
    b24c:	16028f04 	strne	r8, [r2], -r4, lsl #30
    b250:	0000011f 	andeq	r0, r0, pc, lsl r1
    b254:	15411770 	strbne	r1, [r1, #-1904]	; 0xfffff890
    b258:	90040000 	andls	r0, r4, r0
    b25c:	011f1602 	tsteq	pc, r2, lsl #12
    b260:	17780000 	ldrbne	r0, [r8, -r0]!
    b264:	00001d83 	andeq	r1, r0, r3, lsl #27
    b268:	10029104 	andne	r9, r2, r4, lsl #2
    b26c:	00000841 	andeq	r0, r0, r1, asr #16
    b270:	17211780 	strne	r1, [r1, -r0, lsl #15]!
    b274:	92040000 	andls	r0, r4, #0
    b278:	08511002 	ldmdaeq	r1, {r1, ip}^
    b27c:	17880000 	strne	r0, [r8, r0]
    b280:	00001eb8 			; <UNDEFINED> instruction: 0x00001eb8
    b284:	0f029304 	svceq	0x00029304
    b288:	0000008a 	andeq	r0, r0, sl, lsl #1
    b28c:	161517a0 	ldrne	r1, [r5], -r0, lsr #15
    b290:	94040000 	strls	r0, [r4], #-0
    b294:	011f1602 	tsteq	pc, r2, lsl #12
    b298:	17a40000 	strne	r0, [r4, r0]!
    b29c:	00001915 	andeq	r1, r0, r5, lsl r9
    b2a0:	16029504 	strne	r9, [r2], -r4, lsl #10
    b2a4:	0000011f 	andeq	r0, r0, pc, lsl r1
    b2a8:	184717ac 	stmdane	r7, {r2, r3, r5, r7, r8, r9, sl, ip}^
    b2ac:	96040000 	strls	r0, [r4], -r0
    b2b0:	011f1602 	tsteq	pc, r2, lsl #12
    b2b4:	17b40000 	ldrne	r0, [r4, r0]!
    b2b8:	00001a27 	andeq	r1, r0, r7, lsr #20
    b2bc:	16029704 	strne	r9, [r2], -r4, lsl #14
    b2c0:	0000011f 	andeq	r0, r0, pc, lsl r1
    b2c4:	18c417bc 	stmiane	r4, {r2, r3, r4, r5, r7, r8, r9, sl, ip}^
    b2c8:	98040000 	stmdals	r4, {}	; <UNPREDICTABLE>
    b2cc:	011f1602 	tsteq	pc, r2, lsl #12
    b2d0:	17c40000 	strbne	r0, [r4, r0]
    b2d4:	00001ada 	ldrdeq	r1, [r0], -sl
    b2d8:	08029904 	stmdaeq	r2, {r2, r8, fp, ip, pc}
    b2dc:	0000008a 	andeq	r0, r0, sl, lsl #1
    b2e0:	e40900cc 	str	r0, [r9], #-204	; 0xffffff34
    b2e4:	41000005 	tstmi	r0, r5
    b2e8:	0a000008 	beq	b310 <__exidx_end+0x65bc>
    b2ec:	00000091 	muleq	r0, r1, r0
    b2f0:	e4090019 	str	r0, [r9], #-25	; 0xffffffe7
    b2f4:	51000005 	tstpl	r0, r5
    b2f8:	0a000008 	beq	b320 <__exidx_end+0x65cc>
    b2fc:	00000091 	muleq	r0, r1, r0
    b300:	e4090007 	str	r0, [r9], #-7
    b304:	61000005 	tstvs	r0, r5
    b308:	0a000008 	beq	b330 <__exidx_end+0x65dc>
    b30c:	00000091 	muleq	r0, r1, r0
    b310:	f01a0017 			; <UNDEFINED> instruction: 0xf01a0017
    b314:	07029e04 	streq	r9, [r2, -r4, lsl #28]
    b318:	00000888 	andeq	r0, r0, r8, lsl #17
    b31c:	0016f417 	andseq	pc, r6, r7, lsl r4	; <UNPREDICTABLE>
    b320:	02a10400 	adceq	r0, r1, #0, 8
    b324:	0008881b 	andeq	r8, r8, fp, lsl r8
    b328:	de170000 	cdple	0, 1, cr0, cr7, cr0, {0}
    b32c:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
    b330:	981802a2 	ldmdals	r8, {r1, r5, r7, r9}
    b334:	78000008 	stmdavc	r0, {r3}
    b338:	03220900 			; <UNDEFINED> instruction: 0x03220900
    b33c:	08980000 	ldmeq	r8, {}	; <UNPREDICTABLE>
    b340:	910a0000 	mrsls	r0, (UNDEF: 10)
    b344:	1d000000 	stcne	0, cr0, [r0, #-0]
    b348:	00910900 	addseq	r0, r1, r0, lsl #18
    b34c:	08a80000 	stmiaeq	r8!, {}	; <UNPREDICTABLE>
    b350:	910a0000 	mrsls	r0, (UNDEF: 10)
    b354:	1d000000 	stcne	0, cr0, [r0, #-0]
    b358:	04f01b00 	ldrbteq	r1, [r0], #2816	; 0xb00
    b35c:	cd030283 	sfmgt	f0, 4, [r3, #-524]	; 0xfffffdf4
    b360:	1c000008 	stcne	0, cr0, [r0], {8}
    b364:	00002021 	andeq	r2, r0, r1, lsr #32
    b368:	0b029a04 	bleq	b1b80 <__ccfg+0x91bd8>
    b36c:	0000071c 	andeq	r0, r0, ip, lsl r7
    b370:	001d451c 	andseq	r4, sp, ip, lsl r5
    b374:	02a30400 	adceq	r0, r3, #0, 8
    b378:	0008610b 	andeq	r6, r8, fp, lsl #2
    b37c:	e4090000 	str	r0, [r9], #-0
    b380:	dd000005 	stcle	0, cr0, [r0, #-20]	; 0xffffffec
    b384:	0a000008 	beq	b3ac <__exidx_end+0x6658>
    b388:	00000091 	muleq	r0, r1, r0
    b38c:	c51d0018 	ldrgt	r0, [sp, #-24]	; 0xffffffe8
    b390:	01000020 	tsteq	r0, r0, lsr #32
    b394:	08dd0410 	ldmeq	sp, {r4, sl}^
    b398:	011e0000 	tsteq	lr, r0
    b39c:	000008f5 	strdeq	r0, [r0], -r5
    b3a0:	00048a15 	andeq	r8, r4, r5, lsl sl
    b3a4:	04100000 	ldreq	r0, [r0], #-0
    b3a8:	000008e9 	andeq	r0, r0, r9, ror #17
    b3ac:	01ab0410 			; <UNDEFINED> instruction: 0x01ab0410
    b3b0:	011e0000 	tsteq	lr, r0
    b3b4:	0000090d 	andeq	r0, r0, sp, lsl #18
    b3b8:	00008a15 	andeq	r8, r0, r5, lsl sl
    b3bc:	04100000 	ldreq	r0, [r0], #-0
    b3c0:	00000913 	andeq	r0, r0, r3, lsl r9
    b3c4:	09010410 	stmdbeq	r1, {r4, sl}
    b3c8:	81090000 	mrshi	r0, (UNDEF: 9)
    b3cc:	29000006 	stmdbcs	r0, {r1, r2}
    b3d0:	0a000009 	beq	b3fc <__exidx_end+0x66a8>
    b3d4:	00000091 	muleq	r0, r1, r0
    b3d8:	f81f0002 			; <UNDEFINED> instruction: 0xf81f0002
    b3dc:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    b3e0:	8a170333 	bhi	5cc0b4 <__ccfg+0x5ac10c>
    b3e4:	01000004 	tsteq	r0, r4
    b3e8:	1cf11f01 	ldclne	15, cr1, [r1], #4
    b3ec:	34040000 	strcc	r0, [r4], #-0
    b3f0:	04901d03 	ldreq	r1, [r0], #3331	; 0xd03
    b3f4:	01010000 	mrseq	r0, (UNDEF: 1)
    b3f8:	001d2203 	andseq	r2, sp, r3, lsl #4
    b3fc:	123b0600 	eorsne	r0, fp, #0, 12
    b400:	0000006b 	andeq	r0, r0, fp, rrx
    b404:	4006080b 	andmi	r0, r6, fp, lsl #16
    b408:	00097709 	andeq	r7, r9, r9, lsl #14
    b40c:	16230c00 	strtne	r0, [r3], -r0, lsl #24
    b410:	41060000 	mrsmi	r0, (UNDEF: 6)
    b414:	0009770d 	andeq	r7, r9, sp, lsl #14
    b418:	b40c0000 	strlt	r0, [ip], #-0
    b41c:	06000019 			; <UNDEFINED> instruction: 0x06000019
    b420:	09770d42 	ldmdbeq	r7!, {r1, r6, r8, sl, fp}^
    b424:	00040000 	andeq	r0, r4, r0
    b428:	00450410 	subeq	r0, r5, r0, lsl r4
    b42c:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    b430:	06000020 	streq	r0, [r0], -r0, lsr #32
    b434:	09530343 	ldmdbeq	r3, {r0, r1, r6, r8, r9}^
    b438:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
    b43c:	0700001a 	smladeq	r0, sl, r0, r0
    b440:	09952b3c 	ldmibeq	r5, {r2, r3, r4, r5, r8, r9, fp, sp}
    b444:	c70e0000 	strgt	r0, [lr, -r0]
    b448:	1000001d 	andne	r0, r0, sp, lsl r0
    b44c:	f1156f07 			; <UNDEFINED> instruction: 0xf1156f07
    b450:	0c000009 	stceq	0, cr0, [r0], {9}
    b454:	00001501 	andeq	r1, r0, r1, lsl #10
    b458:	580d7007 	stmdapl	sp, {r0, r1, r2, ip, sp, lr}
    b45c:	00000000 	andeq	r0, r0, r0
    b460:	0019760c 	andseq	r7, r9, ip, lsl #12
    b464:	0d710700 	ldcleq	7, cr0, [r1, #-0]
    b468:	00000058 	andeq	r0, r0, r8, asr r0
    b46c:	1a5c0c02 	bne	170e47c <__ccfg+0x16ee4d4>
    b470:	74070000 	strvc	r0, [r7], #-0
    b474:	000b2813 	andeq	r2, fp, r3, lsl r8
    b478:	940c0400 	strls	r0, [ip], #-1024	; 0xfffffc00
    b47c:	07000016 	smladeq	r0, r6, r0, r0
    b480:	09470c75 	stmdbeq	r7, {r0, r2, r4, r5, r6, sl, fp}^
    b484:	0c080000 	stceq	0, cr0, [r8], {-0}
    b488:	00001aa1 	andeq	r1, r0, r1, lsr #21
    b48c:	b4067d07 	strlt	r7, [r6], #-3335	; 0xfffff2f9
    b490:	0c00000a 	stceq	0, cr0, [r0], {10}
    b494:	0019820c 	andseq	r8, r9, ip, lsl #4
    b498:	06810700 	streq	r0, [r1], r0, lsl #14
    b49c:	00000afe 	strdeq	r0, [r0], -lr
    b4a0:	6203000d 	andvs	r0, r3, #13
    b4a4:	07000017 	smladeq	r0, r7, r0, r0
    b4a8:	09fd2a3f 	ldmibeq	sp!, {r0, r1, r2, r3, r4, r5, r9, fp, sp}^
    b4ac:	550e0000 	strpl	r0, [lr, #-0]
    b4b0:	18000017 	stmdane	r0, {r0, r1, r2, r4}
    b4b4:	b415e007 	ldrlt	lr, [r5], #-7
    b4b8:	0c00000a 	stceq	0, cr0, [r0], {10}
    b4bc:	00001501 	andeq	r1, r0, r1, lsl #10
    b4c0:	580de107 	stmdapl	sp, {r0, r1, r2, r8, sp, lr, pc}
    b4c4:	00000000 	andeq	r0, r0, r0
    b4c8:	0019760c 	andseq	r7, r9, ip, lsl #12
    b4cc:	0de20700 	stcleq	7, cr0, [r2]
    b4d0:	00000058 	andeq	r0, r0, r8, asr r0
    b4d4:	1a5c0c02 	bne	170e4e4 <__ccfg+0x16ee53c>
    b4d8:	e5070000 	str	r0, [r7, #-0]
    b4dc:	000b2813 	andeq	r2, fp, r3, lsl r8
    b4e0:	940c0400 	strls	r0, [ip], #-1024	; 0xfffffc00
    b4e4:	07000016 	smladeq	r0, r6, r0, r0
    b4e8:	09470ce6 	stmdbeq	r7, {r1, r2, r5, r6, r7, sl, fp}^
    b4ec:	0c080000 	stceq	0, cr0, [r8], {-0}
    b4f0:	00001aa1 	andeq	r1, r0, r1, lsr #21
    b4f4:	3406ee07 	strcc	lr, [r6], #-3591	; 0xfffff1f9
    b4f8:	0c00000b 	stceq	0, cr0, [r0], {11}
    b4fc:	0019820c 	andseq	r8, r9, ip, lsl #4
    b500:	06f20700 	ldrbteq	r0, [r2], r0, lsl #14
    b504:	00000b7e 	andeq	r0, r0, lr, ror fp
    b508:	1f0f0c0d 	svcne	0x000f0c0d
    b50c:	f3070000 	vhadd.u8	d0, d7, d0
    b510:	0000580d 	andeq	r5, r0, sp, lsl #16
    b514:	b10c0e00 	tstlt	ip, r0, lsl #28
    b518:	0700001b 	smladeq	r0, fp, r0, r0
    b51c:	00580df4 	ldrsheq	r0, [r8], #-212	; 0xffffff2c
    b520:	0c100000 	ldceq	0, cr0, [r0], {-0}
    b524:	000017a4 	andeq	r1, r0, r4, lsr #15
    b528:	a806fa07 	stmdage	r6, {r0, r1, r2, r9, fp, ip, sp, lr, pc}
    b52c:	1200000b 	andne	r0, r0, #11
    b530:	001a360c 	andseq	r3, sl, ip, lsl #12
    b534:	0cfb0700 	ldcleq	7, cr0, [fp]
    b538:	00000045 	andeq	r0, r0, r5, asr #32
    b53c:	1e560c13 	mrcne	12, 2, r0, cr6, cr3, {0}
    b540:	fc070000 	stc2	0, cr0, [r7], {-0}
    b544:	0000450c 	andeq	r4, r0, ip, lsl #10
    b548:	5f0c1400 	svcpl	0x000c1400
    b54c:	0700001e 	smladeq	r0, lr, r0, r0
    b550:	00450cfd 	strdeq	r0, [r5], #-205	; 0xffffff33
    b554:	0c150000 	ldceq	0, cr0, [r5], {-0}
    b558:	00001e68 	andeq	r1, r0, r8, ror #28
    b55c:	580dfe07 	stmdapl	sp, {r0, r1, r2, r9, sl, fp, ip, sp, lr, pc}
    b560:	16000000 	strne	r0, [r0], -r0
    b564:	07010b00 	streq	r0, [r1, -r0, lsl #22]
    b568:	0afe0476 	beq	fff8c748 <_estack+0xdff87748>
    b56c:	ed200000 	stc	0, cr0, [r0, #-0]
    b570:	07000020 	streq	r0, [r0, -r0, lsr #32]
    b574:	00450f77 	subeq	r0, r5, r7, ror pc
    b578:	04010000 	streq	r0, [r1], #-0
    b57c:	f1200004 			; <UNDEFINED> instruction: 0xf1200004
    b580:	07000017 	smladeq	r0, r7, r0, r0
    b584:	00450f78 	subeq	r0, r5, r8, ror pc
    b588:	01010000 	mrseq	r0, (UNDEF: 1)
    b58c:	2d200003 	stccs	0, cr0, [r0, #-12]!
    b590:	07000019 	smladeq	r0, r9, r0, r0
    b594:	00450f7a 	subeq	r0, r5, sl, ror pc
    b598:	02010000 	andeq	r0, r1, #0
    b59c:	91200001 			; <UNDEFINED> instruction: 0x91200001
    b5a0:	07000015 	smladeq	r0, r5, r0, r0
    b5a4:	00450f7b 	subeq	r0, r5, fp, ror pc
    b5a8:	01010000 	mrseq	r0, (UNDEF: 1)
    b5ac:	0b000000 	bleq	b5b4 <__exidx_end+0x6860>
    b5b0:	047e0701 	ldrbteq	r0, [lr], #-1793	; 0xfffff8ff
    b5b4:	00000b28 	andeq	r0, r0, r8, lsr #22
    b5b8:	001e8420 	andseq	r8, lr, r0, lsr #8
    b5bc:	0f7f0700 	svceq	0x007f0700
    b5c0:	00000045 	andeq	r0, r0, r5, asr #32
    b5c4:	00040401 	andeq	r0, r4, r1, lsl #8
    b5c8:	00203d20 	eoreq	r3, r0, r0, lsr #26
    b5cc:	0f800700 	svceq	0x00800700
    b5d0:	00000045 	andeq	r0, r0, r5, asr #32
    b5d4:	00000401 	andeq	r0, r0, r1, lsl #8
    b5d8:	89041000 	stmdbhi	r4, {ip}
    b5dc:	10000009 	andne	r0, r0, r9
    b5e0:	00006b04 	andeq	r6, r0, r4, lsl #22
    b5e4:	07010b00 	streq	r0, [r1, -r0, lsl #22]
    b5e8:	0b7e04e7 	bleq	1f8c98c <__ccfg+0x1f6c9e4>
    b5ec:	ed200000 	stc	0, cr0, [r0, #-0]
    b5f0:	07000020 	streq	r0, [r0, -r0, lsr #32]
    b5f4:	00450fe8 	subeq	r0, r5, r8, ror #31
    b5f8:	04010000 	streq	r0, [r1], #-0
    b5fc:	f1200004 			; <UNDEFINED> instruction: 0xf1200004
    b600:	07000017 	smladeq	r0, r7, r0, r0
    b604:	00450fe9 	subeq	r0, r5, r9, ror #31
    b608:	01010000 	mrseq	r0, (UNDEF: 1)
    b60c:	2d200003 	stccs	0, cr0, [r0, #-12]!
    b610:	07000019 	smladeq	r0, r9, r0, r0
    b614:	00450feb 	subeq	r0, r5, fp, ror #31
    b618:	02010000 	andeq	r0, r1, #0
    b61c:	91200001 			; <UNDEFINED> instruction: 0x91200001
    b620:	07000015 	smladeq	r0, r5, r0, r0
    b624:	00450fec 	subeq	r0, r5, ip, ror #31
    b628:	01010000 	mrseq	r0, (UNDEF: 1)
    b62c:	0b000000 	bleq	b634 <__exidx_end+0x68e0>
    b630:	04ef0701 	strbteq	r0, [pc], #1793	; b638 <__exidx_end+0x68e4>
    b634:	00000ba8 	andeq	r0, r0, r8, lsr #23
    b638:	001e8420 	andseq	r8, lr, r0, lsr #8
    b63c:	0ff00700 	svceq	0x00f00700
    b640:	00000045 	andeq	r0, r0, r5, asr #32
    b644:	00040401 	andeq	r0, r4, r1, lsl #8
    b648:	00203d20 	eoreq	r3, r0, r0, lsr #26
    b64c:	0ff10700 	svceq	0x00f10700
    b650:	00000045 	andeq	r0, r0, r5, asr #32
    b654:	00000401 	andeq	r0, r0, r1, lsl #8
    b658:	07010b00 	streq	r0, [r1, -r0, lsl #22]
    b65c:	0bd204f5 	bleq	ff48ca38 <_estack+0xdf487a38>
    b660:	db200000 	blle	80b668 <__ccfg+0x7eb6c0>
    b664:	07000017 	smladeq	r0, r7, r0, r0
    b668:	00450ff6 	strdeq	r0, [r5], #-246	; 0xffffff0a
    b66c:	01010000 	mrseq	r0, (UNDEF: 1)
    b670:	93200007 			; <UNDEFINED> instruction: 0x93200007
    b674:	07000020 	streq	r0, [r0, -r0, lsr #32]
    b678:	00450ff8 	strdeq	r0, [r5], #-248	; 0xffffff08
    b67c:	06010000 	streq	r0, [r1], -r0
    b680:	10000001 	andne	r0, r0, r1
    b684:	00097d04 	andeq	r7, r9, r4, lsl #26
    b688:	1ee40300 	cdpne	3, 14, cr0, cr4, cr0, {0}
    b68c:	3d080000 	stccc	0, cr0, [r8, #-0]
    b690:	000be42f 	andeq	lr, fp, pc, lsr #8
    b694:	1ef60e00 	cdpne	14, 15, cr0, cr6, cr0, {0}
    b698:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    b69c:	0c741578 	cfldr64eq	mvdx1, [r4], #-480	; 0xfffffe20
    b6a0:	010c0000 	mrseq	r0, (UNDEF: 12)
    b6a4:	08000015 	stmdaeq	r0, {r0, r2, r4}
    b6a8:	00580d79 	subseq	r0, r8, r9, ror sp
    b6ac:	0c000000 	stceq	0, cr0, [r0], {-0}
    b6b0:	00001976 	andeq	r1, r0, r6, ror r9
    b6b4:	580d7a08 	stmdapl	sp, {r3, r9, fp, ip, sp, lr}
    b6b8:	02000000 	andeq	r0, r0, #0
    b6bc:	001a5c0c 	andseq	r5, sl, ip, lsl #24
    b6c0:	137d0800 	cmnne	sp, #0, 16
    b6c4:	00000b28 	andeq	r0, r0, r8, lsr #22
    b6c8:	16940c04 	ldrne	r0, [r4], r4, lsl #24
    b6cc:	7e080000 	cdpvc	0, 0, cr0, cr8, cr0, {0}
    b6d0:	0009470c 	andeq	r4, r9, ip, lsl #14
    b6d4:	a10c0800 	tstge	ip, r0, lsl #16
    b6d8:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    b6dc:	0e670686 	cdpeq	6, 6, cr0, cr7, cr6, {4}
    b6e0:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    b6e4:	00001982 	andeq	r1, r0, r2, lsl #19
    b6e8:	b1068a08 	tstlt	r6, r8, lsl #20
    b6ec:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
    b6f0:	0016fb0c 	andseq	pc, r6, ip, lsl #22
    b6f4:	06930800 	ldreq	r0, [r3], r0, lsl #16
    b6f8:	00000edb 	ldrdeq	r0, [r0], -fp
    b6fc:	1e7d0c0e 	cdpne	12, 7, cr0, cr13, cr14, {0}
    b700:	94080000 	strls	r0, [r8], #-0
    b704:	0000450c 	andeq	r4, r0, ip, lsl #10
    b708:	010c0f00 	tsteq	ip, r0, lsl #30
    b70c:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    b710:	006b0d95 	mlseq	fp, r5, sp, r0
    b714:	0c100000 	ldceq	0, cr0, [r0], {-0}
    b718:	0000153c 	andeq	r1, r0, ip, lsr r5
    b71c:	770d9608 	strvc	r9, [sp, -r8, lsl #12]
    b720:	14000009 	strne	r0, [r0], #-9
    b724:	1cb00300 	ldcne	3, cr0, [r0]
    b728:	3e080000 	cdpcc	0, 0, cr0, cr8, cr0, {0}
    b72c:	000c802f 	andeq	r8, ip, pc, lsr #32
    b730:	18a70e00 	stmiane	r7!, {r9, sl, fp}
    b734:	08240000 	stmdaeq	r4!, {}	; <UNPREDICTABLE>
    b738:	0d5e159f 	cfldr64eq	mvdx1, [lr, #-636]	; 0xfffffd84
    b73c:	010c0000 	mrseq	r0, (UNDEF: 12)
    b740:	08000015 	stmdaeq	r0, {r0, r2, r4}
    b744:	00580da0 	subseq	r0, r8, r0, lsr #27
    b748:	0c000000 	stceq	0, cr0, [r0], {-0}
    b74c:	00001976 	andeq	r1, r0, r6, ror r9
    b750:	580da108 	stmdapl	sp, {r3, r8, sp, pc}
    b754:	02000000 	andeq	r0, r0, #0
    b758:	001a5c0c 	andseq	r5, sl, ip, lsl #24
    b75c:	13a40800 			; <UNDEFINED> instruction: 0x13a40800
    b760:	00000b28 	andeq	r0, r0, r8, lsr #22
    b764:	16940c04 	ldrne	r0, [r4], r4, lsl #24
    b768:	a5080000 	strge	r0, [r8, #-0]
    b76c:	0009470c 	andeq	r4, r9, ip, lsl #14
    b770:	a10c0800 	tstge	ip, r0, lsl #16
    b774:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    b778:	0f1506ad 	svceq	0x001506ad
    b77c:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    b780:	00001982 	andeq	r1, r0, r2, lsl #19
    b784:	5f06b108 	svcpl	0x0006b108
    b788:	0d00000f 	stceq	0, cr0, [r0, #-60]	; 0xffffffc4
    b78c:	0016fb0c 	andseq	pc, r6, ip, lsl #22
    b790:	06c30800 	strbeq	r0, [r3], r0, lsl #16
    b794:	00000f89 	andeq	r0, r0, r9, lsl #31
    b798:	1c090c0e 	stcne	12, cr0, [r9], {14}
    b79c:	cd080000 	stcgt	0, cr0, [r8, #-0]
    b7a0:	00101306 	andseq	r1, r0, r6, lsl #6
    b7a4:	010c0f00 	tsteq	ip, r0, lsl #30
    b7a8:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    b7ac:	006b0dce 	rsbeq	r0, fp, lr, asr #27
    b7b0:	0c100000 	ldceq	0, cr0, [r0], {-0}
    b7b4:	0000183d 	andeq	r1, r0, sp, lsr r8
    b7b8:	450ccf08 	strmi	ip, [ip, #-3848]	; 0xfffff0f8
    b7bc:	14000000 	strne	r0, [r0], #-0
    b7c0:	001c5b0c 	andseq	r5, ip, ip, lsl #22
    b7c4:	0cd10800 	ldcleq	8, cr0, [r1], {0}
    b7c8:	00000045 	andeq	r0, r0, r5, asr #32
    b7cc:	1c640c15 	stclne	12, cr0, [r4], #-84	; 0xffffffac
    b7d0:	d2080000 	andle	r0, r8, #0
    b7d4:	0000450c 	andeq	r4, r0, ip, lsl #10
    b7d8:	b90c1600 	stmdblt	ip, {r9, sl, ip}
    b7dc:	08000018 	stmdaeq	r0, {r3, r4}
    b7e0:	108d06db 	ldrdne	r0, [sp], fp
    b7e4:	0c170000 	ldceq	0, cr0, [r7], {-0}
    b7e8:	00001f56 	andeq	r1, r0, r6, asr pc
    b7ec:	470cdc08 	strmi	sp, [ip, -r8, lsl #24]
    b7f0:	18000009 	stmdane	r0, {r0, r3}
    b7f4:	0019370c 	andseq	r3, r9, ip, lsl #14
    b7f8:	11dd0800 	bicsne	r0, sp, r0, lsl #16
    b7fc:	00000bd2 	ldrdeq	r0, [r0], -r2
    b800:	15c40c1c 	strbne	r0, [r4, #3100]	; 0xc1c
    b804:	de080000 	cdple	0, 0, cr0, cr8, cr0, {0}
    b808:	0009770d 	andeq	r7, r9, sp, lsl #14
    b80c:	03002000 	movweq	r2, #0
    b810:	00001c8c 	andeq	r1, r0, ip, lsl #25
    b814:	6a3c4308 	bvs	f1c43c <__ccfg+0xefc494>
    b818:	1900000d 	stmdbne	r0, {r0, r2, r3}
    b81c:	00001c6d 	andeq	r1, r0, sp, ror #24
    b820:	021a0828 	andseq	r0, sl, #40, 16	; 0x280000
    b824:	000e6715 	andeq	r6, lr, r5, lsl r7
    b828:	15011700 	strne	r1, [r1, #-1792]	; 0xfffff900
    b82c:	1b080000 	blne	20b834 <__ccfg+0x1eb88c>
    b830:	00580d02 	subseq	r0, r8, r2, lsl #26
    b834:	17000000 	strne	r0, [r0, -r0]
    b838:	00001976 	andeq	r1, r0, r6, ror r9
    b83c:	0d021d08 	stceq	13, cr1, [r2, #-32]	; 0xffffffe0
    b840:	00000058 	andeq	r0, r0, r8, asr r0
    b844:	1a5c1702 	bne	1711454 <__ccfg+0x16f14ac>
    b848:	20080000 	andcs	r0, r8, r0
    b84c:	0b281302 	bleq	a1045c <__ccfg+0x9f04b4>
    b850:	17040000 	strne	r0, [r4, -r0]
    b854:	00001694 	muleq	r0, r4, r6
    b858:	0c022108 	stfeqs	f2, [r2], {8}
    b85c:	00000947 	andeq	r0, r0, r7, asr #18
    b860:	1aa11708 	bne	fe851488 <_estack+0xde84c488>
    b864:	29080000 	stmdbcs	r8, {}	; <UNPREDICTABLE>
    b868:	10d70602 	sbcsne	r0, r7, r2, lsl #12
    b86c:	170c0000 	strne	r0, [ip, -r0]
    b870:	00001982 	andeq	r1, r0, r2, lsl #19
    b874:	06022d08 	streq	r2, [r2], -r8, lsl #26
    b878:	00001126 	andeq	r1, r0, r6, lsr #2
    b87c:	14f6170d 	ldrbtne	r1, [r6], #1805	; 0x70d
    b880:	33080000 	movwcc	r0, #32768	; 0x8000
    b884:	11530602 	cmpne	r3, r2, lsl #12
    b888:	170e0000 	strne	r0, [lr, -r0]
    b88c:	00001a45 	andeq	r1, r0, r5, asr #20
    b890:	06023808 	streq	r3, [r2], -r8, lsl #16
    b894:	00001180 	andeq	r1, r0, r0, lsl #3
    b898:	177e1710 			; <UNDEFINED> instruction: 0x177e1710
    b89c:	39080000 	stmdbcc	r8, {}	; <UNPREDICTABLE>
    b8a0:	00450c02 	subeq	r0, r5, r2, lsl #24
    b8a4:	17140000 	ldrne	r0, [r4, -r0]
    b8a8:	00001af7 	strdeq	r1, [r0], -r7
    b8ac:	06024108 	streq	r4, [r2], -r8, lsl #2
    b8b0:	000011ad 	andeq	r1, r0, sp, lsr #3
    b8b4:	16811715 	pkhbtne	r1, r1, r5, lsl #14
    b8b8:	55080000 	strpl	r0, [r8, #-0]
    b8bc:	11da0602 	bicsne	r0, sl, r2, lsl #12
    b8c0:	17160000 	ldrne	r0, [r6, -r0]
    b8c4:	00000ab2 			; <UNDEFINED> instruction: 0x00000ab2
    b8c8:	06026808 	streq	r6, [r2], -r8, lsl #16
    b8cc:	0000123a 	andeq	r1, r0, sl, lsr r2
    b8d0:	176f1718 			; <UNDEFINED> instruction: 0x176f1718
    b8d4:	69080000 	stmdbvs	r8, {}	; <UNPREDICTABLE>
    b8d8:	00580d02 	subseq	r0, r8, r2, lsl #26
    b8dc:	171a0000 	ldrne	r0, [sl, -r0]
    b8e0:	00001d15 	andeq	r1, r0, r5, lsl sp
    b8e4:	0e026a08 	vmlaeq.f32	s12, s4, s16
    b8e8:	00000b2e 	andeq	r0, r0, lr, lsr #22
    b8ec:	154f171c 	strbne	r1, [pc, #-1820]	; b1d8 <__exidx_end+0x6484>
    b8f0:	6c080000 	stcvs	0, cr0, [r8], {-0}
    b8f4:	00580d02 	subseq	r0, r8, r2, lsl #26
    b8f8:	17200000 	strne	r0, [r0, -r0]!
    b8fc:	00001a64 	andeq	r1, r0, r4, ror #20
    b900:	0c027008 	stceq	0, cr7, [r2], {8}
    b904:	00000024 	andeq	r0, r0, r4, lsr #32
    b908:	1bd31722 	blne	ff4d1598 <_estack+0xdf4cc598>
    b90c:	73080000 	movwvc	r0, #32768	; 0x8000
    b910:	00450c02 	subeq	r0, r5, r2, lsl #24
    b914:	00240000 	eoreq	r0, r4, r0
    b918:	7f08010b 	svcvc	0x0008010b
    b91c:	000eb104 	andeq	fp, lr, r4, lsl #2
    b920:	20ed2000 	rsccs	r2, sp, r0
    b924:	80080000 	andhi	r0, r8, r0
    b928:	0000450f 	andeq	r4, r0, pc, lsl #10
    b92c:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    b930:	17f12000 	ldrbne	r2, [r1, r0]!
    b934:	81080000 	mrshi	r0, (UNDEF: 8)
    b938:	0000450f 	andeq	r4, r0, pc, lsl #10
    b93c:	03010100 	movweq	r0, #4352	; 0x1100
    b940:	192d2000 	stmfdne	sp!, {sp}
    b944:	83080000 	movwhi	r0, #32768	; 0x8000
    b948:	0000450f 	andeq	r4, r0, pc, lsl #10
    b94c:	01020100 	mrseq	r0, (UNDEF: 18)
    b950:	15912000 	ldrne	r2, [r1]
    b954:	84080000 	strhi	r0, [r8], #-0
    b958:	0000450f 	andeq	r4, r0, pc, lsl #10
    b95c:	00010100 	andeq	r0, r1, r0, lsl #2
    b960:	010b0000 	mrseq	r0, (UNDEF: 11)
    b964:	db048708 	blle	12d58c <__ccfg+0x10d5e4>
    b968:	2000000e 	andcs	r0, r0, lr
    b96c:	00001e84 	andeq	r1, r0, r4, lsl #29
    b970:	450f8808 	strmi	r8, [pc, #-2056]	; b170 <__exidx_end+0x641c>
    b974:	01000000 	mrseq	r0, (UNDEF: 0)
    b978:	20000404 	andcs	r0, r0, r4, lsl #8
    b97c:	0000203d 	andeq	r2, r0, sp, lsr r0
    b980:	450f8908 	strmi	r8, [pc, #-2312]	; b080 <__exidx_end+0x632c>
    b984:	01000000 	mrseq	r0, (UNDEF: 0)
    b988:	00000004 	andeq	r0, r0, r4
    b98c:	8b08010b 	blhi	20bdc0 <__ccfg+0x1ebe18>
    b990:	000f1504 	andeq	r1, pc, r4, lsl #10
    b994:	1f3b2000 	svcne	0x003b2000
    b998:	8c080000 	stchi	0, cr0, [r8], {-0}
    b99c:	0000450f 	andeq	r4, r0, pc, lsl #10
    b9a0:	07010100 	streq	r0, [r1, -r0, lsl #2]
    b9a4:	1fec2000 	svcne	0x00ec2000
    b9a8:	8f080000 	svchi	0x00080000
    b9ac:	0000450f 	andeq	r4, r0, pc, lsl #10
    b9b0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    b9b4:	15342000 	ldrne	r2, [r4, #-0]!
    b9b8:	91080000 	mrsls	r0, (UNDEF: 8)
    b9bc:	0000450f 	andeq	r4, r0, pc, lsl #10
    b9c0:	03010100 	movweq	r0, #4352	; 0x1100
    b9c4:	010b0000 	mrseq	r0, (UNDEF: 11)
    b9c8:	5f04a608 	svcpl	0x0004a608
    b9cc:	2000000f 	andcs	r0, r0, pc
    b9d0:	000020ed 	andeq	r2, r0, sp, ror #1
    b9d4:	450fa708 	strmi	sl, [pc, #-1800]	; b2d4 <__exidx_end+0x6580>
    b9d8:	01000000 	mrseq	r0, (UNDEF: 0)
    b9dc:	20000404 	andcs	r0, r0, r4, lsl #8
    b9e0:	000017f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    b9e4:	450fa808 	strmi	sl, [pc, #-2056]	; b1e4 <__exidx_end+0x6490>
    b9e8:	01000000 	mrseq	r0, (UNDEF: 0)
    b9ec:	20000301 	andcs	r0, r0, r1, lsl #6
    b9f0:	0000192d 	andeq	r1, r0, sp, lsr #18
    b9f4:	450faa08 	strmi	sl, [pc, #-2568]	; aff4 <__exidx_end+0x62a0>
    b9f8:	01000000 	mrseq	r0, (UNDEF: 0)
    b9fc:	20000102 	andcs	r0, r0, r2, lsl #2
    ba00:	00001591 	muleq	r0, r1, r5
    ba04:	450fab08 	strmi	sl, [pc, #-2824]	; af04 <__exidx_end+0x61b0>
    ba08:	01000000 	mrseq	r0, (UNDEF: 0)
    ba0c:	00000001 	andeq	r0, r0, r1
    ba10:	ae08010b 	adfgee	f0, f0, #3.0
    ba14:	000f8904 	andeq	r8, pc, r4, lsl #18
    ba18:	1e842000 	cdpne	0, 8, cr2, cr4, cr0, {0}
    ba1c:	af080000 	svcge	0x00080000
    ba20:	0000450f 	andeq	r4, r0, pc, lsl #10
    ba24:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    ba28:	203d2000 	eorscs	r2, sp, r0
    ba2c:	b0080000 	andlt	r0, r8, r0
    ba30:	0000450f 	andeq	r4, r0, pc, lsl #10
    ba34:	00040100 	andeq	r0, r4, r0, lsl #2
    ba38:	010b0000 	mrseq	r0, (UNDEF: 11)
    ba3c:	1304b208 	movwne	fp, #16904	; 0x4208
    ba40:	20000010 	andcs	r0, r0, r0, lsl r0
    ba44:	00001f3b 	andeq	r1, r0, fp, lsr pc
    ba48:	450fb308 	strmi	fp, [pc, #-776]	; b748 <__exidx_end+0x69f4>
    ba4c:	01000000 	mrseq	r0, (UNDEF: 0)
    ba50:	20000701 	andcs	r0, r0, r1, lsl #14
    ba54:	000015cc 	andeq	r1, r0, ip, asr #11
    ba58:	450fb508 	strmi	fp, [pc, #-1288]	; b558 <__exidx_end+0x6804>
    ba5c:	01000000 	mrseq	r0, (UNDEF: 0)
    ba60:	20000601 	andcs	r0, r0, r1, lsl #12
    ba64:	00001ddb 	ldrdeq	r1, [r0], -fp
    ba68:	450fb708 	strmi	fp, [pc, #-1800]	; b368 <__exidx_end+0x6614>
    ba6c:	01000000 	mrseq	r0, (UNDEF: 0)
    ba70:	20000501 	andcs	r0, r0, r1, lsl #10
    ba74:	00001fec 	andeq	r1, r0, ip, ror #31
    ba78:	450fb908 	strmi	fp, [pc, #-2312]	; b178 <__exidx_end+0x6424>
    ba7c:	01000000 	mrseq	r0, (UNDEF: 0)
    ba80:	20000401 	andcs	r0, r0, r1, lsl #8
    ba84:	00001534 	andeq	r1, r0, r4, lsr r5
    ba88:	450fbb08 	strmi	fp, [pc, #-2824]	; af88 <__exidx_end+0x6234>
    ba8c:	01000000 	mrseq	r0, (UNDEF: 0)
    ba90:	20000301 	andcs	r0, r0, r1, lsl #6
    ba94:	00001f5e 	andeq	r1, r0, lr, asr pc
    ba98:	450fbd08 	strmi	fp, [pc, #-3336]	; ad98 <__exidx_end+0x6044>
    ba9c:	01000000 	mrseq	r0, (UNDEF: 0)
    baa0:	20000201 	andcs	r0, r0, r1, lsl #4
    baa4:	0000193e 	andeq	r1, r0, lr, lsr r9
    baa8:	450fbf08 	strmi	fp, [pc, #-3848]	; aba8 <__exidx_end+0x5e54>
    baac:	01000000 	mrseq	r0, (UNDEF: 0)
    bab0:	20000101 	andcs	r0, r0, r1, lsl #2
    bab4:	00001de6 	andeq	r1, r0, r6, ror #27
    bab8:	450fc108 	strmi	ip, [pc, #-264]	; b9b8 <__exidx_end+0x6c64>
    babc:	01000000 	mrseq	r0, (UNDEF: 0)
    bac0:	00000001 	andeq	r0, r0, r1
    bac4:	c408010b 	strgt	r0, [r8], #-267	; 0xfffffef5
    bac8:	00108d04 	andseq	r8, r0, r4, lsl #26
    bacc:	1a762000 	bne	1d93ad4 <__ccfg+0x1d73b2c>
    bad0:	c5080000 	strgt	r0, [r8, #-0]
    bad4:	0000450f 	andeq	r4, r0, pc, lsl #10
    bad8:	07010100 	streq	r0, [r1, -r0, lsl #2]
    badc:	17b92000 	ldrne	r2, [r9, r0]!
    bae0:	c6080000 	strgt	r0, [r8], -r0
    bae4:	0000450f 	andeq	r4, r0, pc, lsl #10
    bae8:	06010100 	streq	r0, [r1], -r0, lsl #2
    baec:	198c2000 	stmibne	ip, {sp}
    baf0:	c8080000 	stmdagt	r8, {}	; <UNPREDICTABLE>
    baf4:	0000450f 	andeq	r4, r0, pc, lsl #10
    baf8:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    bafc:	18822000 	stmne	r2, {sp}
    bb00:	c9080000 	stmdbgt	r8, {}	; <UNPREDICTABLE>
    bb04:	0000450f 	andeq	r4, r0, pc, lsl #10
    bb08:	03010100 	movweq	r0, #4352	; 0x1100
    bb0c:	1d392000 	ldcne	0, cr2, [r9, #-0]
    bb10:	ca080000 	bgt	20bb18 <__ccfg+0x1ebb70>
    bb14:	0000450f 	andeq	r4, r0, pc, lsl #10
    bb18:	02010100 	andeq	r0, r1, #0, 2
    bb1c:	16a82000 	strtne	r2, [r8], r0
    bb20:	cb080000 	blgt	20bb28 <__ccfg+0x1ebb80>
    bb24:	0000450f 	andeq	r4, r0, pc, lsl #10
    bb28:	01010100 	mrseq	r0, (UNDEF: 17)
    bb2c:	150b2000 	strne	r2, [fp, #-0]
    bb30:	cc080000 	stcgt	0, cr0, [r8], {-0}
    bb34:	0000450f 	andeq	r4, r0, pc, lsl #10
    bb38:	00010100 	andeq	r0, r1, r0, lsl #2
    bb3c:	010b0000 	mrseq	r0, (UNDEF: 11)
    bb40:	d704d408 	strle	sp, [r4, -r8, lsl #8]
    bb44:	20000010 	andcs	r0, r0, r0, lsl r0
    bb48:	000020ed 	andeq	r2, r0, sp, ror #1
    bb4c:	450fd508 	strmi	sp, [pc, #-1288]	; b64c <__exidx_end+0x68f8>
    bb50:	01000000 	mrseq	r0, (UNDEF: 0)
    bb54:	20000404 	andcs	r0, r0, r4, lsl #8
    bb58:	000017f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    bb5c:	450fd608 	strmi	sp, [pc, #-1544]	; b55c <__exidx_end+0x6808>
    bb60:	01000000 	mrseq	r0, (UNDEF: 0)
    bb64:	20000301 	andcs	r0, r0, r1, lsl #6
    bb68:	0000192d 	andeq	r1, r0, sp, lsr #18
    bb6c:	450fd808 	strmi	sp, [pc, #-2056]	; b36c <__exidx_end+0x6618>
    bb70:	01000000 	mrseq	r0, (UNDEF: 0)
    bb74:	20000102 	andcs	r0, r0, r2, lsl #2
    bb78:	00001591 	muleq	r0, r1, r5
    bb7c:	450fd908 	strmi	sp, [pc, #-2312]	; b27c <__exidx_end+0x6528>
    bb80:	01000000 	mrseq	r0, (UNDEF: 0)
    bb84:	00000001 	andeq	r0, r0, r1
    bb88:	2208011a 	andcs	r0, r8, #-2147483642	; 0x80000006
    bb8c:	11260402 			; <UNDEFINED> instruction: 0x11260402
    bb90:	ed210000 	stc	0, cr0, [r1, #-0]
    bb94:	08000020 	stmdaeq	r0, {r5}
    bb98:	450f0223 	strmi	r0, [pc, #-547]	; b97d <__exidx_end+0x6c29>
    bb9c:	01000000 	mrseq	r0, (UNDEF: 0)
    bba0:	21000404 	tstcs	r0, r4, lsl #8
    bba4:	000017f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    bba8:	0f022408 	svceq	0x00022408
    bbac:	00000045 	andeq	r0, r0, r5, asr #32
    bbb0:	00030101 	andeq	r0, r3, r1, lsl #2
    bbb4:	00192d21 	andseq	r2, r9, r1, lsr #26
    bbb8:	02260800 	eoreq	r0, r6, #0, 16
    bbbc:	0000450f 	andeq	r4, r0, pc, lsl #10
    bbc0:	01020100 	mrseq	r0, (UNDEF: 18)
    bbc4:	15912100 	ldrne	r2, [r1, #256]	; 0x100
    bbc8:	27080000 	strcs	r0, [r8, -r0]
    bbcc:	00450f02 	subeq	r0, r5, r2, lsl #30
    bbd0:	01010000 	mrseq	r0, (UNDEF: 1)
    bbd4:	1a000000 	bne	bbdc <__exidx_end+0x6e88>
    bbd8:	022a0801 	eoreq	r0, sl, #65536	; 0x10000
    bbdc:	00115304 	andseq	r5, r1, r4, lsl #6
    bbe0:	1e842100 	rmfnes	f2, f4, f0
    bbe4:	2b080000 	blcs	20bbec <__ccfg+0x1ebc44>
    bbe8:	00450f02 	subeq	r0, r5, r2, lsl #30
    bbec:	04010000 	streq	r0, [r1], #-0
    bbf0:	3d210004 	stccc	0, cr0, [r1, #-16]!
    bbf4:	08000020 	stmdaeq	r0, {r5}
    bbf8:	450f022c 	strmi	r0, [pc, #-556]	; b9d4 <__exidx_end+0x6c80>
    bbfc:	01000000 	mrseq	r0, (UNDEF: 0)
    bc00:	00000004 	andeq	r0, r0, r4
    bc04:	2e08021a 	mcrcs	2, 0, r0, cr8, cr10, {0}
    bc08:	11800402 	orrne	r0, r0, r2, lsl #8
    bc0c:	ac210000 	stcge	0, cr0, [r1], #-0
    bc10:	08000019 	stmdaeq	r0, {r0, r3, r4}
    bc14:	5810022f 	ldmdapl	r0, {r0, r1, r2, r3, r5, r9}
    bc18:	02000000 	andeq	r0, r0, #0
    bc1c:	21000d03 	tstcs	r0, r3, lsl #26
    bc20:	00002008 	andeq	r2, r0, r8
    bc24:	10023208 	andne	r3, r2, r8, lsl #4
    bc28:	00000058 	andeq	r0, r0, r8, asr r0
    bc2c:	00000d02 	andeq	r0, r0, r2, lsl #26
    bc30:	08041a00 	stmdaeq	r4, {r9, fp, ip}
    bc34:	ad040234 	sfmge	f0, 4, [r4, #-208]	; 0xffffff30
    bc38:	21000011 	tstcs	r0, r1, lsl r0
    bc3c:	00001bbb 			; <UNDEFINED> instruction: 0x00001bbb
    bc40:	10023508 	andne	r3, r2, r8, lsl #10
    bc44:	0000006b 	andeq	r0, r0, fp, rrx
    bc48:	001c0404 	andseq	r0, ip, r4, lsl #8
    bc4c:	001ce121 	andseq	lr, ip, r1, lsr #2
    bc50:	02370800 	eorseq	r0, r7, #0, 16
    bc54:	00006b10 	andeq	r6, r0, r0, lsl fp
    bc58:	03150400 	tsteq	r5, #0, 8
    bc5c:	011a0000 	tsteq	sl, r0
    bc60:	04023a08 	streq	r3, [r2], #-2568	; 0xfffff5f8
    bc64:	000011da 	ldrdeq	r1, [r0], -sl
    bc68:	001ecd21 	andseq	ip, lr, r1, lsr #26
    bc6c:	023b0800 	eorseq	r0, fp, #0, 16
    bc70:	0000450f 	andeq	r4, r0, pc, lsl #10
    bc74:	02060100 	andeq	r0, r6, #0, 2
    bc78:	160b2100 	strne	r2, [fp], -r0, lsl #2
    bc7c:	3d080000 	stccc	0, cr0, [r8, #-0]
    bc80:	00450f02 	subeq	r0, r5, r2, lsl #30
    bc84:	02010000 	andeq	r0, r1, #0
    bc88:	1a000000 	bne	bc90 <__exidx_end+0x6f3c>
    bc8c:	02420802 	subeq	r0, r2, #131072	; 0x20000
    bc90:	00123a04 	andseq	r3, r2, r4, lsl #20
    bc94:	1bc42100 	blne	ff11409c <_estack+0xdf10f09c>
    bc98:	43080000 	movwmi	r0, #32768	; 0x8000
    bc9c:	00581002 	subseq	r1, r8, r2
    bca0:	06020000 	streq	r0, [r2], -r0
    bca4:	1a21000a 	bne	84bcd4 <__ccfg+0x82bd2c>
    bca8:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    bcac:	58100244 	ldmdapl	r0, {r2, r6, r9}
    bcb0:	02000000 	andeq	r0, r0, #0
    bcb4:	21000901 	tstcs	r0, r1, lsl #18
    bcb8:	00001c3d 	andeq	r1, r0, sp, lsr ip
    bcbc:	10024608 	andne	r4, r2, r8, lsl #12
    bcc0:	00000058 	andeq	r0, r0, r8, asr r0
    bcc4:	00080102 	andeq	r0, r8, r2, lsl #2
    bcc8:	0015e121 	andseq	lr, r5, r1, lsr #2
    bccc:	02480800 	subeq	r0, r8, #0, 16
    bcd0:	00005810 	andeq	r5, r0, r0, lsl r8
    bcd4:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    bcd8:	15742100 	ldrbne	r2, [r4, #-256]!	; 0xffffff00
    bcdc:	4d080000 	stcmi	0, cr0, [r8, #-0]
    bce0:	00581002 	subseq	r1, r8, r2
    bce4:	03020000 	movweq	r0, #8192	; 0x2000
    bce8:	1a000000 	bne	bcf0 <__exidx_end+0x6f9c>
    bcec:	02560802 	subseq	r0, r6, #131072	; 0x20000
    bcf0:	00128904 	andseq	r8, r2, r4, lsl #18
    bcf4:	18f42100 	ldmne	r4!, {r8, sp}^
    bcf8:	57080000 	strpl	r0, [r8, -r0]
    bcfc:	00581002 	subseq	r1, r8, r2
    bd00:	03020000 	movweq	r0, #8192	; 0x2000
    bd04:	6821000d 	stmdavs	r1!, {r0, r2, r3}
    bd08:	08000018 	stmdaeq	r0, {r3, r4}
    bd0c:	5810025d 	ldmdapl	r0, {r0, r2, r3, r4, r6, r9}
    bd10:	02000000 	andeq	r0, r0, #0
    bd14:	21000c01 	tstcs	r0, r1, lsl #24
    bd18:	000017e3 	andeq	r1, r0, r3, ror #15
    bd1c:	10025f08 	andne	r5, r2, r8, lsl #30
    bd20:	00000058 	andeq	r0, r0, r8, asr r0
    bd24:	00060602 	andeq	r0, r6, r2, lsl #12
    bd28:	001c1021 	andseq	r1, ip, r1, lsr #32
    bd2c:	02660800 	rsbeq	r0, r6, #0, 16
    bd30:	00005810 	andeq	r5, r0, r0, lsl r8
    bd34:	05010200 	streq	r0, [r1, #-512]	; 0xfffffe00
    bd38:	77090000 	strvc	r0, [r9, -r0]
    bd3c:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    bd40:	0a000012 	beq	bd90 <__exidx_end+0x703c>
    bd44:	00000091 	muleq	r0, r1, r0
    bd48:	890400a2 	stmdbhi	r4, {r1, r5, r7}
    bd4c:	22000012 	andcs	r0, r0, #18
    bd50:	00001aae 	andeq	r1, r0, lr, lsr #21
    bd54:	99104909 	ldmdbls	r0, {r0, r3, r8, fp, lr}
    bd58:	8c000012 	stchi	0, cr0, [r0], {18}
    bd5c:	0004ad02 	andeq	sl, r4, r2, lsl #26
    bd60:	00044921 	andeq	r4, r4, r1, lsr #18
    bd64:	00047d21 	andeq	r7, r4, r1, lsr #26
    bd68:	00048121 	andeq	r8, r4, r1, lsr #2
    bd6c:	00051121 	andeq	r1, r5, r1, lsr #2
    bd70:	00059121 	andeq	r9, r5, r1, lsr #2
    bd74:	00064121 	andeq	r4, r6, r1, lsr #2
    bd78:	10b5f821 	adcsne	pc, r5, r1, lsr #16
    bd7c:	0eb5f847 	cdpeq	8, 11, cr15, cr5, cr7, {2}
    bd80:	01210046 			; <UNDEFINED> instruction: 0x01210046
    bd84:	3004ad25 	andcc	sl, r4, r5, lsr #26
    bd88:	03480a47 	movteq	r0, #35399	; 0x8a47
    bd8c:	0ff00078 	svceq	0x00f00078
    bd90:	0b079bf8 	bleq	1f2d78 <__ccfg+0x1d2dd0>
    bd94:	204c12d0 	ldrdcs	r1, [ip], #-32	; 0xffffffe0
    bd98:	0728ff78 			; <UNDEFINED> instruction: 0x0728ff78
    bd9c:	2121ffd0 	ldrdcs	pc, [r1, -r0]!
    bda0:	0f490e70 	svceq	0x00490e70
    bda4:	20022424 	andcs	r2, r2, r4, lsr #8
    bda8:	c8316043 	ldmdagt	r1!, {r0, r1, r6, sp, lr}
    bdac:	f8bdf882 			; <UNDEFINED> instruction: 0xf8bdf882
    bdb0:	004801b5 	strheq	r0, [r8], #-21	; 0xffffffeb
    bdb4:	00026b47 	andeq	r6, r2, r7, asr #22
    bdb8:	004ce521 	subeq	lr, ip, r1, lsr #10
    bdbc:	01480900 	cmpeq	r8, r0, lsl #18
    bdc0:	004808e0 	subeq	r0, r8, r0, ror #17
    bdc4:	054c060c 	strbeq	r0, [ip, #-1548]	; 0xfffff9f4
    bdc8:	ff782249 			; <UNDEFINED> instruction: 0xff782249
    bdcc:	cad1012a 	bgt	ff44c27c <_estack+0xdf44727c>
    bdd0:	6070227a 	rsbsvs	r2, r0, sl, ror r2
    bdd4:	7082c831 	addvc	ip, r2, r1, lsr r8
    bdd8:	001c8046 	andseq	r8, ip, r6, asr #32
    bddc:	08620047 	stmdaeq	r2!, {r0, r1, r2, r6}^
    bde0:	0006a440 	andeq	sl, r6, r0, asr #8
    bde4:	080f0721 	stmdaeq	pc, {r0, r5, r8, r9, sl}	; <UNPREDICTABLE>
    bde8:	08b4f008 	ldmeq	r4!, {r3, ip, sp, lr, pc}
    bdec:	03b57047 			; <UNDEFINED> instruction: 0x03b57047
    bdf0:	01461546 	cmpeq	r6, r6, asr #10
    bdf4:	00d00629 	sbcseq	r0, r0, r9, lsr #12
    bdf8:	11d00629 	bicsne	r0, r0, r9, lsr #12
    bdfc:	ff46284a 			; <UNDEFINED> instruction: 0xff46284a
    be00:	70ffbbf7 	ldrshtvc	fp, [pc], #183
    be04:	00480fbd 	strheq	r0, [r8], #-253	; 0xffffff03
    be08:	05480fe0 	strbeq	r0, [r8, #-4064]	; 0xfffff020
    be0c:	03428324 	movteq	r8, #8996	; 0x2324
    be10:	640840d8 	strvs	r4, [r8], #-216	; 0xffffff28
    be14:	f92c001e 			; <UNDEFINED> instruction: 0xf92c001e
    be18:	0140e3dc 	ldrdeq	lr, [r0, #-60]	; 0xffffffc4
    be1c:	18034020 	stmdane	r3, {r5, lr}
    be20:	010b8218 	tsteq	fp, r8, lsl r2
    be24:	06d00729 	ldrbeq	r0, [r0], r9, lsr #14
    be28:	80230049 	eorhi	r0, r3, r9, asr #32
    be2c:	ff462831 			; <UNDEFINED> instruction: 0xff462831
    be30:	e0ffa5f7 	ldrsht	sl, [pc], #87
    be34:	02bd70b2 	adcseq	r7, sp, #178	; 0xb2
    be38:	6c4b0449 	cfstrdvs	mvd0, [fp], {73}	; 0x49
    be3c:	00e7f631 	rsceq	pc, r7, r1, lsr r6	; <UNPREDICTABLE>
    be40:	005c8300 	subseq	r8, ip, r0, lsl #6
    be44:	86bca000 	ldrthi	sl, [ip], r0
    be48:	0d830023 	stceq	0, cr0, [r3, #140]	; 0x8c
    be4c:	00067423 	andeq	r7, r6, r3, lsr #8
    be50:	1ab5f821 	bne	fed89edc <_estack+0xded84edc>
    be54:	7146054e 	cmpvc	r6, lr, asr #10
    be58:	cc48196b 	mcrrgt	9, 6, r1, r8, cr11	; <UNPREDICTABLE>
    be5c:	0001e409 	andeq	lr, r1, r9, lsl #8
    be60:	18d0112d 	ldmne	r0, {r0, r2, r3, r5, r8, ip}^
    be64:	02780949 	rsbseq	r0, r8, #1196032	; 0x124000
    be68:	00d00f29 	sbcseq	r0, r0, r9, lsr #30
    be6c:	7243047b 	subvc	r0, r3, #2063597568	; 0x7b000000
    be70:	152001b6 	strne	r0, [r0, #-438]!	; 0xfffffe4a
    be74:	b802404f 	stmdalt	r2, {r0, r1, r2, r3, r6, lr}
    be78:	20481147 	subcs	r1, r8, r7, asr #2
    be7c:	c1880038 	orrgt	r0, r8, r8, lsr r0
    be80:	0407c909 	streq	ip, [r7], #-2313	; 0xfffff6f7
    be84:	c0e016d0 	ldrdgt	r1, [r0], #96	; 0x60	; <UNPREDICTABLE>
    be88:	40e7f07a 	rscmi	pc, r7, sl, ror r0	; <UNPREDICTABLE>
    be8c:	0fe7ee7b 	svceq	0x00e7ee7b
    be90:	cc637449 	cfstrdgt	mvd7, [r3], #-292	; 0xfffffedc
    be94:	c00a4061 	andgt	r4, sl, r1, rrx
    be98:	01d00c07 	bicseq	r0, r0, r7, lsl #24
    be9c:	31038020 	tstcc	r3, r0, lsr #32
    bea0:	012d006b 			; <UNDEFINED> instruction: 0x012d006b
    bea4:	004301d0 	ldrdeq	r0, [r3], #-16
    bea8:	084381e0 	stmdaeq	r3, {r5, r6, r7, r8, pc}^
    beac:	07633146 	strbeq	r3, [r3, -r6, asr #2]!
    beb0:	48394049 	ldmdami	r9!, {r0, r3, r6, lr}
    beb4:	b8200063 	stmdalt	r0!, {r0, r1, r5, r6}
    beb8:	f8b66247 			; <UNDEFINED> instruction: 0xf8b66247
    bebc:	000280bd 	strheq	r8, [r2], -sp
    bec0:	00008821 	andeq	r8, r0, r1, lsr #16
    bec4:	00029b21 	andeq	r9, r2, r1, lsr #22
    bec8:	003f7b21 	eorseq	r7, pc, r1, lsr #22
    becc:	04404000 	strbeq	r4, [r0], #-0
    bed0:	22b51040 	adcscs	r1, r5, #64	; 0x40
    bed4:	5121004a 			; <UNDEFINED> instruction: 0x5121004a
    bed8:	89492161 	stmdbhi	r9, {r0, r5, r6, r8, sp}^
    bedc:	0900c968 	stmdbeq	r0, {r3, r5, r6, r8, fp, lr, pc}
    bee0:	204921d4 	ldrdcs	r2, [r9], #-20	; 0xffffffec
    bee4:	9805ca4b 	stmdals	r5, {r0, r1, r3, r6, r9, fp, lr, pc}
    bee8:	016b4b42 	cmneq	fp, r2, asr #22
    beec:	004313d8 	ldrdeq	r1, [r3], #-56	; 0xffffffc8
    bef0:	4b4393e0 	blmi	10f0e78 <__ccfg+0x10d0ed0>
    bef4:	ff491d63 			; <UNDEFINED> instruction: 0xff491d63
    bef8:	10ff77f7 	ldrshtne	r7, [pc], #119
    befc:	1ab538bd 	bne	fed5a1f8 <_estack+0xded551f8>
    bf00:	007f284d 	rsbseq	r2, pc, sp, asr #16
    bf04:	1ad12728 	bne	ff455bac <_estack+0xdf450bac>
    bf08:	c0880048 	addgt	r0, r8, r8, asr #32
    bf0c:	2207c009 	andcs	ip, r7, #9
    bf10:	604c12d1 	ldrdvs	r1, [ip], #-33	; 0xffffffdf
    bf14:	1e280069 	cdpne	0, 2, cr0, cr8, cr9, {3}
    bf18:	004668d1 	ldrdeq	r6, [r6], #-129	; 0xffffff7f
    bf1c:	68f845f0 	ldmvs	r8!, {r4, r5, r6, r7, r8, sl, lr}^
    bf20:	01780046 	cmneq	r8, r6, asr #32
    bf24:	68d11728 	ldmvs	r1, {r3, r5, r8, r9, sl, ip}^
    bf28:	10784046 	rsbsne	r4, r8, r6, asr #32
    bf2c:	08d21328 	ldmeq	r2, {r3, r5, r8, r9, ip}^
    bf30:	68616020 	stmdavs	r1!, {r5, sp, lr}^
    bf34:	4009406a 	andmi	r4, r9, sl, rrx
    bf38:	0e602001 	cdpeq	0, 6, cr2, cr0, cr1, {0}
    bf3c:	d121004a 			; <UNDEFINED> instruction: 0xd121004a
    bf40:	024a0d62 	subeq	r0, sl, #6272	; 0x1880
    bf44:	01601121 	cmneq	r0, r1, lsr #2
    bf48:	20430821 	subcs	r0, r3, r1, lsr #16
    bf4c:	08210360 	stmdaeq	r1!, {r5, r6, r8, r9}
    bf50:	20626843 	rsbcs	r6, r2, r3, asr #16
    bf54:	09bd3860 	ldmibeq	sp!, {r5, r6, fp, ip, sp}
    bf58:	38478048 	stmdacc	r7, {r3, r6, pc}^
    bf5c:	044000bd 	strbeq	r0, [r0], #-189	; 0xffffff43
    bf60:	00001840 	andeq	r1, r0, r0, asr #16
    bf64:	93000021 	movwls	r0, #33	; 0x21
    bf68:	00028008 	andeq	r8, r2, r8
    bf6c:	0068cf21 	rsbeq	ip, r8, r1, lsr #30
    bf70:	00006800 	andeq	r6, r0, r0, lsl #16
    bf74:	04110021 	ldreq	r0, [r1], #-33	; 0xffffffdf
    bf78:	00e28040 	rsceq	r8, r2, r0, asr #32
    bf7c:	003bc3e0 	eorseq	ip, fp, r0, ror #7
    bf80:	00490700 	subeq	r0, r9, r0, lsl #14
    bf84:	04d00028 	ldrbeq	r0, [r0], #40	; 0x28
    bf88:	724a0620 	subvc	r0, sl, #32, 12	; 0x2000000
    bf8c:	c97809b6 	ldmdbgt	r8!, {r1, r2, r4, r5, r7, r8, fp}^
    bf90:	10d00107 	sbcsne	r0, r0, r7, lsl #2
    bf94:	80e00058 	rschi	r0, r0, r8, asr r0
    bf98:	40b66220 	adcsmi	r6, r6, r0, lsr #4
    bf9c:	004770b2 	strheq	r7, [r7], #-2
    bfa0:	00026b00 	andeq	r6, r2, r0, lsl #22
    bfa4:	04605821 	strbteq	r5, [r0], #-2081	; 0xfffff7df
    bfa8:	01b40340 			; <UNDEFINED> instruction: 0x01b40340
    bfac:	01900148 	orrseq	r0, r0, r8, asr #2
    bfb0:	006fa5bd 	strhteq	sl, [pc], #-93
    bfb4:	00000000 	andeq	r0, r0, r0
    bfb8:	03000100 	movweq	r0, #256	; 0x100
    bfbc:	1f000a00 	svcne	0x00000a00
    bfc0:	eb005900 	bl	223c8 <__ccfg+0x2420>
    bfc4:	ea023900 	b	9a3cc <__ccfg+0x7a424>
    bfc8:	9709f904 	strls	pc, [r9, -r4, lsl #18]
    bfcc:	a11feb12 	tstge	pc, r2, lsl fp	; <UNPREDICTABLE>
    bfd0:	0a4a7832 	beq	12aa0a0 <__ccfg+0x128a0f8>
    bfd4:	8c82fa66 	vstmiahi	r2, {s30-s131}
    bfd8:	17b6639e 			; <UNDEFINED> instruction: 0x17b6639e
    bfdc:	edd664c9 	cfldrd	mvd6, [r6, #804]	; 0x324
    bfe0:	e0e3c1de 	ldrd	ip, [r3], #30	; <UNPREDICTABLE>
    bfe4:	0000ffe5 	andeq	pc, r0, r5, ror #31
    bfe8:	00770900 	rsbseq	r0, r7, r0, lsl #18
    bfec:	15490000 	strbne	r0, [r9, #-0]
    bff0:	91230000 			; <UNDEFINED> instruction: 0x91230000
    bff4:	ac000000 	stcge	0, cr0, [r0], {-0}
    bff8:	38040001 	stmdacc	r4, {r0}
    bffc:	22000015 	andcs	r0, r0, #21
    c000:	00001b11 	andeq	r1, r0, r1, lsl fp
    c004:	49103a0a 	ldmdbmi	r0, {r1, r3, r9, fp, ip, sp}
    c008:	b4000015 	strlt	r0, [r0], #-21	; 0xffffffeb
    c00c:	0061a306 	rsbeq	sl, r1, r6, lsl #6
    c010:	07147f00 	ldreq	r7, [r4, -r0, lsl #30]
    c014:	f1004d13 			; <UNDEFINED> instruction: 0xf1004d13
    c018:	131f2e24 	tstne	pc, #36, 28	; 0x240
    c01c:	3f0ab03f 	svccc	0x000ab03f
    c020:	00ff0700 	rscseq	r0, pc, r0, lsl #14
    c024:	00403000 	subeq	r3, r0, r0
    c028:	03400140 	movteq	r0, #320	; 0x140
    c02c:	0f400740 	svceq	0x00400740
    c030:	cf404f40 	svcgt	0x00404f40
    c034:	cf41cf40 	svcgt	0x0041cf40
    c038:	cf47cf43 	svcgt	0x0047cf43
    c03c:	cf3fcf4f 	svcgt	0x003fcf4f
    c040:	cf1fcf2f 	svcgt	0x001fcf2f
    c044:	0000000f 	andeq	r0, r0, pc
    c048:	08000f00 	stmdaeq	r0, {r8, r9, sl, fp}
    c04c:	3f000000 	svccc	0x00000000
    c050:	40000000 	andmi	r0, r0, r0
    c054:	00003f00 	andeq	r3, r0, r0, lsl #30
    c058:	68000400 	stmdavs	r0, {sl}
    c05c:	dc000e00 	stcle	14, cr0, [r0], {-0}
    c060:	43000600 	movwmi	r0, #1536	; 0x600
    c064:	05001a00 	streq	r1, [r0, #-2560]	; 0xfffff600
    c068:	00000000 	andeq	r0, r0, r0
    c06c:	00000200 	andeq	r0, r0, r0, lsl #4
    c070:	00003f00 	andeq	r3, r0, r0, lsl #30
    c074:	04000000 	streq	r0, [r0], #-0
    c078:	0000c000 	andeq	ip, r0, r0
    c07c:	c0000400 	andgt	r0, r0, r0, lsl #8
    c080:	07000000 	streq	r0, [r0, -r0]
    c084:	00c05000 	sbceq	r5, r0, r0
    c088:	70700091 			; <UNDEFINED> instruction: 0x70700091
    c08c:	009100c0 	addseq	r0, r1, r0, asr #1
    c090:	21318270 	teqcs	r1, r0, ror r2
    c094:	10913100 	addsne	r3, r1, r0, lsl #2
    c098:	017000b1 	ldrheq	r0, [r0, #-1]!
    c09c:	00b10181 	adcseq	r0, r1, r1, lsl #3
    c0a0:	323182a1 	eorscc	r8, r1, #268435466	; 0x1000000a
    c0a4:	01b11091 			; <UNDEFINED> instruction: 0x01b11091
    c0a8:	41101191 			; <UNDEFINED> instruction: 0x41101191
    c0ac:	4f224181 	svcmi	0x00224181
    c0b0:	0006f140 	andeq	pc, r6, r0, asr #2
    c0b4:	01c05170 	biceq	r5, r0, r0, ror r1
    c0b8:	10183091 	mulsne	r8, r1, r0
    c0bc:	08318339 	ldmdaeq	r1!, {r0, r3, r4, r5, r8, r9, pc}
    c0c0:	413118d0 	teqmi	r1, r0	; <illegal shifter operand>
    c0c4:	3100316f 	tstcc	r0, pc, ror #2
    c0c8:	83b11091 			; <UNDEFINED> instruction: 0x83b11091
    c0cc:	5b161414 	blpl	591124 <__ccfg+0x57117c>
    c0d0:	25700068 	ldrbcs	r0, [r0, #-104]!	; 0xffffff98
    c0d4:	00c05010 	sbceq	r5, r0, r0, lsl r0
    c0d8:	c0c3f491 	smullgt	pc, r3, r1, r4	; <UNPREDICTABLE>
    c0dc:	031420c0 	tsteq	r4, #192	; 0xc0
    c0e0:	4110316f 	tstmi	r0, pc, ror #2
    c0e4:	82c02204 	sbchi	r2, r0, #4, 4	; 0x40000000
    c0e8:	31002131 	tstcc	r0, r1, lsr r1
    c0ec:	63b11091 			; <UNDEFINED> instruction: 0x63b11091
    c0f0:	41103139 	tstmi	r0, r9, lsr r1
    c0f4:	82c08204 	sbchi	r8, r0, #4, 4	; 0x40000000
    c0f8:	31002131 	tstcc	r0, r1, lsr r1
    c0fc:	63b11091 			; <UNDEFINED> instruction: 0x63b11091
    c100:	a2103139 	andsge	r3, r0, #1073741838	; 0x4000000e
    c104:	213182c0 	teqcs	r1, r0, asr #5
    c108:	10913100 	addsne	r3, r1, r0, lsl #2
    c10c:	151050b1 	ldrne	r5, [r0, #-177]	; 0xffffff4f
    c110:	05140531 	ldreq	r0, [r4, #-1329]	; 0xfffffacf
    c114:	3f700092 	svccc	0x00700092
    c118:	31c05264 	biccc	r5, r0, r4, ror #4
    c11c:	61063110 	tstvs	r6, r0, lsl r1
    c120:	4202c131 	andmi	ip, r2, #1073741836	; 0x4000000c
    c124:	31c11264 	biccc	r1, r1, r4, ror #4
    c128:	71392110 	teqvc	r9, r0, lsl r1
    c12c:	e1315106 	teq	r1, r6, lsl #2
    c130:	00644202 	rsbeq	r4, r4, r2, lsl #4
    c134:	99658a70 	stmdbls	r5!, {r4, r5, r6, r9, fp, pc}^
    c138:	20c08865 	sbccs	r8, r0, r5, ror #16
    c13c:	80395082 	eorshi	r5, r9, r2, lsl #1
    c140:	9f1e0039 	svcls	0x001e0039
    c144:	01c04140 	biceq	r4, r0, r0, asr #2
    c148:	18141830 	ldmdane	r4, {r4, r5, fp, ip}
    c14c:	30c0891a 	sbccc	r8, r0, sl, lsl r9
    c150:	80396082 	eorshi	r6, r9, r2, lsl #1
    c154:	a91e0039 	ldmdbge	lr, {r0, r3, r4, r5}
    c158:	01c04140 	biceq	r4, r0, r0, asr #2
    c15c:	19141930 	ldmdbne	r4, {r4, r5, r8, fp, ip}
    c160:	36643c1a 			; <UNDEFINED> instruction: 0x36643c1a
    c164:	34b11091 	ldrtcc	r1, [r1], #145	; 0x91
    c168:	54b11091 	ldrtpl	r1, [r1], #145	; 0x91
    c16c:	547100b0 	ldrbtpl	r0, [r1], #-176	; 0xffffff50
    c170:	f0b064a0 			; <UNDEFINED> instruction: 0xf0b064a0
    c174:	af220080 	svcge	0x00220080
    c178:	b0124040 	andslt	r4, r2, r0, asr #32
    c17c:	53b03290 	movspl	r3, #144, 4
    c180:	53395382 	teqpl	r9, #134217730	; 0x8000002
    c184:	3f648539 	svccc	0x00648539
    c188:	22c11164 	sbccs	r1, r1, #100, 2
    c18c:	706442c1 	rsbvc	r4, r4, r1, asr #5
    c190:	1168c2c1 	cmnne	r8, r1, asr #5
    c194:	42c0c2c1 	sbcmi	ip, r0, #268435468	; 0x1000000c
    c198:	c7c17064 	strbgt	r7, [r1, r4, rrx]
    c19c:	00c05068 	sbceq	r5, r0, r8, rrx
    c1a0:	98722791 	ldmdals	r2!, {r0, r4, r7, r8, r9, sl, sp}^
    c1a4:	14161592 	ldrne	r1, [r6], #-1426	; 0xfffffa6e
    c1a8:	53104216 	tstpl	r0, #1610612737	; 0x60000001
    c1ac:	21c1f010 	biccs	pc, r1, r0, lsl r0	; <UNPREDICTABLE>
    c1b0:	31313182 	teqcc	r1, r2, lsl #3
    c1b4:	31398139 	teqcc	r9, r9, lsr r1
    c1b8:	70b05131 	adcsvc	r5, r0, r1, lsr r1
    c1bc:	276572b2 			; <UNDEFINED> instruction: 0x276572b2
    c1c0:	70929972 	addsvc	r9, r2, r2, ror r9
    c1c4:	731062b2 	tstvc	r0, #536870923	; 0x2000000b
    c1c8:	31c3f010 	biccc	pc, r3, r0, lsl r0	; <UNPREDICTABLE>
    c1cc:	21312182 	teqcs	r1, r2, lsl #3
    c1d0:	1b398139 	blne	e6c6bc <__ccfg+0xe4c714>
    c1d4:	e2657210 	rsb	r7, r5, #16, 4
    c1d8:	603182c0 	eorsvs	r8, r1, r0, asr #5
    c1dc:	80318082 	eorshi	r8, r1, r2, lsl #1
    c1e0:	61000239 	tstvs	r0, r9, lsr r2
    c1e4:	327100b0 	rsbscc	r0, r1, #176	; 0xb0
    c1e8:	51b11091 			; <UNDEFINED> instruction: 0x51b11091
    c1ec:	27b061a0 	ldrcs	r6, [r0, r0, lsr #3]!
    c1f0:	f3c23072 	vmvn.i32	<illegal reg q9.5>, #162	; 0x000000a2
    c1f4:	80000068 	andhi	r0, r0, r8, rrx
    c1f8:	3290b012 	addscc	fp, r0, #18
    c1fc:	507000b0 	ldrhtpl	r0, [r0], #-0
    c200:	279100c0 	ldrcs	r0, [r1, r0, asr #1]
    c204:	62929972 	addsvs	r9, r2, #1867776	; 0x1c8000
    c208:	f0107310 			; <UNDEFINED> instruction: 0xf0107310
    c20c:	218231c3 	orrcs	r3, r2, r3, asr #3
    c210:	81392131 	teqhi	r9, r1, lsr r1
    c214:	70b05139 	adcsvc	r5, r0, r9, lsr r1
    c218:	27657eb2 			; <UNDEFINED> instruction: 0x27657eb2
    c21c:	70929872 	addsvc	r9, r2, r2, ror r8
    c220:	531042b2 	tstpl	r0, #536870923	; 0x2000000b
    c224:	21c1f010 	biccs	pc, r1, r0, lsl r0	; <UNPREDICTABLE>
    c228:	31313182 	teqcc	r1, r2, lsl #3
    c22c:	31398139 	teqcc	r9, r9, lsr r1
    c230:	7e101a31 			; <UNDEFINED> instruction: 0x7e101a31
    c234:	61a05165 	rorvs	r5, r5, #2
    c238:	b07227b0 	ldrhtlt	r2, [r2], #-112	; 0xffffff90
    c23c:	3f6918c0 	svccc	0x006918c0
    c240:	22c10164 	sbccs	r0, r1, #100, 2
    c244:	016442c1 	cmneq	r4, r1, asr #5
    c248:	42c0c2c1 	sbcmi	ip, r0, #268435468	; 0x1000000c
    c24c:	3c1a1564 	cfldr32cc	mvfx1, [sl], {100}	; 0x64
    c250:	10913564 	addsne	r3, r1, r4, ror #10
    c254:	858253b1 	strhi	r5, [r2, #945]	; 0x3b1
    c258:	b012c064 	andslt	ip, r2, r4, rrx
    c25c:	00b03290 	umlalseq	r3, r0, r0, r2
    c260:	72643f70 	rsbvc	r3, r4, #112, 30	; 0x1c0
    c264:	42c081c2 	sbcmi	r8, r0, #-2147483600	; 0x80000030
    c268:	11c12264 	bicne	r2, r1, r4, ror #4
    c26c:	026442c1 	rsbeq	r4, r4, #268435468	; 0x1000000c
    c270:	42c111c0 	sbcmi	r1, r1, #192, 2	; 0x30
    c274:	31c06264 	biccc	r6, r0, r4, ror #4
    c278:	626442c3 	rsbvs	r4, r4, #805306380	; 0x3000000c
    c27c:	42c111c3 	sbcmi	r1, r1, #-1073741776	; 0xc0000030
    c280:	11c30264 	bicne	r0, r3, r4, ror #4
    c284:	536442c1 	cmnpl	r4, #268435468	; 0x1000000c
    c288:	85395382 	ldrhi	r5, [r9, #-898]!	; 0xfffffc7e
    c28c:	47c3e264 	strbmi	lr, [r3, r4, ror #4]
    c290:	40221164 	eormi	r1, r2, r4, ror #2
    c294:	81c24241 	bichi	r4, r2, r1, asr #4
    c298:	526442c8 	rsbpl	r4, r4, #200, 4	; 0x8000000c
    c29c:	42c111c2 	sbcmi	r1, r1, #-2147483600	; 0x80000030
    c2a0:	e1c27264 	bic	r7, r2, r4, ror #4
    c2a4:	026442ce 	rsbeq	r4, r4, #-536870900	; 0xe000000c
    c2a8:	42c881c2 	sbcmi	r8, r8, #-2147483600	; 0x80000030
    c2ac:	01c20264 	biceq	r0, r2, r4, ror #4
    c2b0:	b06442c8 	rsblt	r4, r4, r8, asr #5
    c2b4:	006954c0 	rsbeq	r5, r9, r0, asr #9
    c2b8:	42643f70 	rsbmi	r3, r4, #112, 30	; 0x1c0
    c2bc:	42c801c2 	sbcmi	r0, r8, #-2147483600	; 0x80000030
    c2c0:	11c25264 	bicne	r5, r2, r4, ror #4
    c2c4:	726442c0 	rsbvc	r4, r4, #192, 4
    c2c8:	42c0e1c2 	sbcmi	lr, r0, #-2147483600	; 0x80000030
    c2cc:	01c00264 	biceq	r0, r0, r4, ror #4
    c2d0:	626442c1 	rsbvs	r4, r4, #268435468	; 0x1000000c
    c2d4:	42c301c0 	sbcmi	r0, r3, #192, 2	; 0x30
    c2d8:	01c12264 	biceq	r2, r1, r4, ror #4
    c2dc:	626442c1 	rsbvs	r4, r4, #268435468	; 0x1000000c
    c2e0:	42c101c3 	sbcmi	r0, r1, #-1073741776	; 0xc0000030
    c2e4:	01c30264 	biceq	r0, r3, r4, ror #4
    c2e8:	536442c1 	cmnpl	r4, #268435468	; 0x1000000c
    c2ec:	00648582 	rsbeq	r8, r4, r2, lsl #11
    c2f0:	00b06170 	adcseq	r6, r0, r0, ror r1
    c2f4:	23141271 	tstcs	r4, #268435463	; 0x10000007
    c2f8:	334d7a1c 	movtcc	r7, #55836	; 0xda1c
    c2fc:	00b11091 	umlalseq	r1, r1, r1, r0	; <UNPREDICTABLE>
    c300:	10913270 	addsne	r3, r1, r0, ror r2
    c304:	006972b1 	strhteq	r7, [r9], #-33	; 0xffffffdf
    c308:	00b06170 	adcseq	r6, r0, r0, ror r1
    c30c:	32181371 	andscc	r1, r8, #-1006632959	; 0xc4000001
    c310:	3249861c 	subcc	r8, r9, #28, 12	; 0x1c00000
    c314:	00b11091 	umlalseq	r1, r1, r1, r0	; <UNPREDICTABLE>
    c318:	10913370 	addsne	r3, r1, r0, ror r3
    c31c:	00697eb1 	strhteq	r7, [r9], #-225	; 0xffffff1f
    c320:	47c0c270 			; <UNDEFINED> instruction: 0x47c0c270
    c324:	c2101564 	andsgt	r1, r0, #100, 10	; 0x19000000
    c328:	471612c0 	ldrmi	r1, [r6, -r0, asr #5]
    c32c:	15314164 	ldrne	r4, [r1, #-356]!	; 0xfffffe9c
    c330:	80c0c014 	sbchi	ip, r0, r4, lsl r0
    c334:	54140531 	ldrpl	r0, [r4], #-1329	; 0xfffffacf
    c338:	0478a010 	ldrbteq	sl, [r8], #-16
    c33c:	e6700004 	ldrbt	r0, [r0], -r4
    c340:	013186c0 	teqeq	r1, r0, asr #13
    c344:	671416cc 	ldrvs	r1, [r4, -ip, asr #13]
    c348:	f0826110 			; <UNDEFINED> instruction: 0xf0826110
    c34c:	170401c3 	strne	r0, [r4, -r3, asr #3]
    c350:	06700014 			; <UNDEFINED> instruction: 0x06700014
    c354:	0b720573 	bleq	1c8d928 <__ccfg+0x1c6d980>
    c358:	50720e72 	rsbspl	r0, r2, r2, ror lr
    c35c:	817100b0 	ldrhhi	r0, [r1, #-0]!
    c360:	50b06080 	adcspl	r6, r0, r0, lsl #1
    c364:	418092a0 	orrmi	r9, r0, r0, lsr #5
    c368:	8045c322 	subhi	ip, r5, r2, lsr #6
    c36c:	10c1f180 	sbcne	pc, r1, r0, lsl #3
    c370:	01163004 	tsteq	r6, r4
    c374:	01140111 	tsteq	r4, r1, lsl r1
    c378:	d761d66c 	strble	sp, [r1, -ip, ror #12]!
    c37c:	d961d861 	stmdble	r1!, {r0, r5, r6, fp, ip, lr, pc}^
    c380:	db61da61 	blle	1882d0c <__ccfg+0x1862d64>
    c384:	de61dc61 	cdple	12, 6, cr13, cr1, cr1, {3}
    c388:	e261e061 	rsb	lr, r1, #97	; 0x61
    c38c:	3661e461 	strbtcc	lr, [r1], -r1, ror #8
    c390:	91633963 	cmnls	r3, r3, ror #18
    c394:	21c0f280 	biccs	pc, r0, r0, lsl #5
    c398:	82312104 	eorshi	r2, r1, #4, 2
    c39c:	122a4280 	eorne	r4, sl, #128, 4
    c3a0:	01163214 	tsteq	r6, r4, lsl r2
    c3a4:	01142111 	tsteq	r4, r1, lsl r1
    c3a8:	0b61ee6c 	bleq	1887d60 <__ccfg+0x1867db8>
    c3ac:	3961f462 	stmdbcc	r1!, {r1, r5, r6, sl, ip, sp, lr, pc}^
    c3b0:	0b61ee63 	bleq	1887d44 <__ccfg+0x1867d9c>
    c3b4:	3961f462 	stmdbcc	r1!, {r1, r5, r6, sl, ip, sp, lr, pc}^
    c3b8:	e661e663 	strbt	lr, [r1], -r3, ror #12
    c3bc:	e661e661 	strbt	lr, [r1], -r1, ror #12
    c3c0:	e661e661 	strbt	lr, [r1], -r1, ror #12
    c3c4:	e6649461 	strbt	r9, [r4], -r1, ror #8
    c3c8:	e664f961 	strbt	pc, [r4], -r1, ror #18	; <UNPREDICTABLE>
    c3cc:	e6652a61 	strbt	r2, [r5], -r1, ror #20
    c3d0:	e6655661 	strbt	r5, [r5], -r1, ror #12
    c3d4:	e6674661 	strbt	r4, [r7], -r1, ror #12
    c3d8:	b0121061 	andslt	r1, r2, r1, rrx
    c3dc:	06720e90 			; <UNDEFINED> instruction: 0x06720e90
    c3e0:	10720573 	rsbsne	r0, r2, r3, ror r5
    c3e4:	a7903012 			; <UNDEFINED> instruction: 0xa7903012
    c3e8:	3ccff061 	stclcc	0, cr15, [pc], {97}	; 0x61
    c3ec:	03c1d467 	biceq	sp, r1, #1728053248	; 0x67000000
    c3f0:	54c3c0c0 	strbpl	ip, [r3], #192	; 0xc0
    c3f4:	50784064 	rsbspl	r4, r8, r4, rrx
    c3f8:	10785091 			; <UNDEFINED> instruction: 0x10785091
    c3fc:	20786092 			; <UNDEFINED> instruction: 0x20786092
    c400:	30787092 			; <UNDEFINED> instruction: 0x30787092
    c404:	40788092 			; <UNDEFINED> instruction: 0x40788092
    c408:	60789092 			; <UNDEFINED> instruction: 0x60789092
    c40c:	90783092 			; <UNDEFINED> instruction: 0x90783092
    c410:	40821091 	umullmi	r1, r2, r1, r0
    c414:	0106f039 	tsteq	r6, r9, lsr r0	; <UNPREDICTABLE>
    c418:	10311010 	eorsne	r1, r1, r0, lsl r0
    c41c:	42920014 	addsmi	r0, r2, #20
    c420:	bc61e667 	stcllt	6, cr14, [r1], #-412	; 0xfffffe64
    c424:	54a0e2a0 	strtpl	lr, [r0], #672	; 0x2a0
    c428:	5080f0a0 	addpl	pc, r0, r0, lsr #1
    c42c:	40461522 	submi	r1, r6, r2, lsr #10
    c430:	2b220080 	blcs	88c638 <__ccfg+0x86c690>
    c434:	40620d47 	rsbmi	r0, r2, r7, asr #26
    c438:	8d822da0 	stchi	13, cr2, [r2, #640]	; 0x280
    c43c:	10398d31 	eorsne	r8, r9, r1, lsr sp
    c440:	10c0f182 	sbcne	pc, r0, r2, lsl #3
    c444:	1a100904 	bne	40e85c <__ccfg+0x3ee8b4>
    c448:	1a394a82 	bne	e5ee58 <__ccfg+0xe3eeb0>
    c44c:	80821004 	addhi	r1, r2, r4
    c450:	0e041039 	mcreq	0, 0, r1, cr4, cr9, {1}
    c454:	bc10ab10 			; <UNDEFINED> instruction: 0xbc10ab10
    c458:	6310c210 	tstvs	r0, #16, 4
    c45c:	e0722964 	rsbs	r2, r2, r4, ror #18
    c460:	13673ccf 	cmnne	r7, #52992	; 0xcf00
    c464:	c8b003b0 	ldmgt	r0!, {r4, r5, r7, r8, r9}
    c468:	50b05366 	adcspl	r5, r0, r6, ror #6
    c46c:	64b054b0 	ldrtvs	r5, [r0], #1200	; 0x4b0
    c470:	a5b013b0 	ldrge	r1, [r0, #944]!	; 0x3b0
    c474:	e0821066 	add	r1, r2, r6, rrx
    c478:	ae463822 	cdpge	8, 4, cr3, cr6, cr2, {1}
    c47c:	41710066 	cmnmi	r1, r6, rrx
    c480:	2b220180 	blcs	88ca88 <__ccfg+0x86cae0>
    c484:	1080f047 	addne	pc, r0, r7, asr #32
    c488:	f0464b22 			; <UNDEFINED> instruction: 0xf0464b22
    c48c:	64471822 	strbvs	r1, [r7], #-2082	; 0xfffff7de
    c490:	382231b0 	stmdacc	r2!, {r4, r5, r7, r8, ip, sp}
    c494:	ceb06342 	cdpgt	3, 11, cr6, cr0, cr2, {2}
    c498:	e0821066 	add	r1, r2, r6, rrx
    c49c:	70463822 	subvc	r3, r6, r2, lsr #16
    c4a0:	64623866 	strbtvs	r3, [r2], #-2150	; 0xfffff79a
    c4a4:	8f816fb0 	svchi	0x00816fb0
    c4a8:	d03d8f31 	eorsle	r8, sp, r1, lsr pc
    c4ac:	3c92ffdf 	ldccc	15, cr15, [r2], {223}	; 0xdf
    c4b0:	41710067 	cmnmi	r1, r7, rrx
    c4b4:	2b220180 	blcs	88cabc <__ccfg+0x86cb14>
    c4b8:	f0b06447 			; <UNDEFINED> instruction: 0xf0b06447
    c4bc:	65225080 	strvs	r5, [r2, #-128]!	; 0xffffff80
    c4c0:	11b06342 	asrsne	r6, r2, #6
    c4c4:	6022c182 	eorvs	ip, r2, r2, lsl #3
    c4c8:	0566ce46 	strbeq	ip, [r6, #-3654]!	; 0xfffff1ba
    c4cc:	d1821167 	orrle	r1, r2, r7, ror #2
    c4d0:	70465222 	subvc	r5, r6, r2, lsr #4
    c4d4:	61625266 	cmnvs	r2, r6, ror #4
    c4d8:	81817281 	orrhi	r7, r1, r1, lsl #5
    c4dc:	823d8131 	eorshi	r8, sp, #1073741836	; 0x4000000c
    c4e0:	c03d8231 	eorsgt	r8, sp, r1, lsr r2
    c4e4:	0292f1ef 	addseq	pc, r2, #-1073741765	; 0xc000003b
    c4e8:	0b673c93 	bleq	19db73c <__ccfg+0x19bb794>
    c4ec:	c081b062 	addgt	fp, r1, r2, rrx
    c4f0:	9781d391 			; <UNDEFINED> instruction: 0x9781d391
    c4f4:	d3a29082 			; <UNDEFINED> instruction: 0xd3a29082
    c4f8:	f34e7f18 	vmaxnm.f32	d23, d14, d8
    c4fc:	e316130b 	tst	r6, #738197504	; 0x2c000000
    c500:	c34aa41c 	movtgt	sl, #42012	; 0xa41c
    c504:	3b81e391 	blcc	fe085350 <_estack+0xde080350>
    c508:	ba629014 	blt	18b0560 <__ccfg+0x18905b8>
    c50c:	23468b1c 	movtcs	r8, #27420	; 0x6b1c
    c510:	e34a8b1e 	movt	r8, #43806	; 0xab1e
    c514:	904e8b1c 	subls	r8, lr, ip, lsl fp
    c518:	8b2207b2 	blhi	88e3e8 <__ccfg+0x86e440>
    c51c:	1ba29042 	blne	fe8b062c <_estack+0xde8ab62c>
    c520:	e362961a 	cmn	r2, #27262976	; 0x1a00000
    c524:	c34aa41c 	movtgt	sl, #42012	; 0xa41c
    c528:	3b81e391 	blcc	fe085374 <_estack+0xde080374>
    c52c:	a01cab18 	andsge	sl, ip, r8, lsl fp
    c530:	a21c9b4e 	andsge	r9, ip, #79872	; 0x13800
    c534:	a41cbc4a 	ldrge	fp, [ip], #-3146	; 0xfffff3b6
    c538:	1010b242 	andsne	fp, r0, r2, asr #4
    c53c:	9d22d082 	stcls	0, cr13, [r2, #-520]!	; 0xfffffdf8
    c540:	1080f042 	addne	pc, r0, r2, asr #32
    c544:	6346a422 	movtvs	sl, #25634	; 0x6422
    c548:	a466a564 	strbtge	sl, [r6], #-1380	; 0xfffffa9c
    c54c:	9410ab62 	ldrls	sl, [r0], #-2914	; 0xfffff49e
    c550:	94109b62 	ldrls	r9, [r0], #-2914	; 0xfffff49e
    c554:	30700062 	rsbscc	r0, r0, r2, rrx
    c558:	10c0f182 	sbcne	pc, r0, r2, lsl #3
    c55c:	00b06304 	adcseq	r6, r0, r4, lsl #6
    c560:	bc6aa871 	stcllt	8, cr10, [sl], #-452	; 0xfffffe3c
    c564:	00b0e010 	adcseq	lr, r0, r0, lsl r0
    c568:	c281b270 	addgt	fp, r1, #112, 4
    c56c:	0181d291 			; <UNDEFINED> instruction: 0x0181d291
    c570:	51181282 	tstpl	r8, r2, lsl #5
    c574:	41181281 	tstmi	r8, r1, lsl #5
    c578:	81318182 	teqhi	r1, r2, lsl #3
    c57c:	bf1c123d 	svclt	0x001c123d
    c580:	32b0e24a 	adcscc	lr, r0, #-1610612732	; 0xa0000004
    c584:	f2dfb0b0 	vshr.s64	d27, d16, #33
    c588:	f1673c92 			; <UNDEFINED> instruction: 0xf1673c92
    c58c:	c31421c7 	tstgt	r4, #-1073741775	; 0xc0000031
    c590:	62c8124e 	sbcvs	r1, r8, #-536870908	; 0xe0000004
    c594:	31917291 			; <UNDEFINED> instruction: 0x31917291
    c598:	00b0e1b0 	ldrhteq	lr, [r0], r0
    c59c:	06c00870 	uxtab16eq	r0, r0, r0, ror #16
    c5a0:	60c800c0 	sbcvs	r0, r8, r0, asr #1
    c5a4:	00917091 	umullseq	r7, r1, r1, r0
    c5a8:	b0820170 	addlt	r0, r2, r0, ror r1
    c5ac:	d091c081 	addsle	ip, r1, r1, lsl #1
    c5b0:	51181081 	tstpl	r8, r1, lsl #1
    c5b4:	06181081 	ldreq	r1, [r8], -r1, lsl #1
    c5b8:	4280e114 	addmi	lr, r0, #20, 2
    c5bc:	82318282 	eorshi	r8, r1, #536870920	; 0x20000008
    c5c0:	e41c203d 	ldr	r2, [ip], #-61	; 0xffffffc3
    c5c4:	21b0e24a 	asrscs	lr, sl, #4
    c5c8:	3246e822 	subcc	lr, r6, #2228224	; 0x220000
    c5cc:	a01005b0 			; <UNDEFINED> instruction: 0xa01005b0
    c5d0:	3c92f5df 	cfldr32cc	mvfx15, [r2], {223}	; 0xdf
    c5d4:	e8222167 	stmda	r2!, {r0, r1, r2, r5, r6, r8, sp}
    c5d8:	32a0e242 	adccc	lr, r0, #536870916	; 0x20000004
    c5dc:	418231b0 			; <UNDEFINED> instruction: 0x418231b0
    c5e0:	01c0f039 	biceq	pc, r0, r9, lsr r0	; <UNPREDICTABLE>
    c5e4:	f61e0104 			; <UNDEFINED> instruction: 0xf61e0104
    c5e8:	10161842 	andsne	r1, r6, r2, asr #16
    c5ec:	083010c0 	ldmdaeq	r0!, {r6, r7, ip}
    c5f0:	6047041c 	subvs	r0, r7, ip, lsl r4
    c5f4:	063c1010 			; <UNDEFINED> instruction: 0x063c1010
    c5f8:	61c7f110 	bicvs	pc, r7, r0, lsl r1	; <UNPREDICTABLE>
    c5fc:	164efa14 			; <UNDEFINED> instruction: 0x164efa14
    c600:	719166c8 	orrsvc	r6, r1, r8, asr #13
    c604:	81318181 	teqhi	r1, r1, lsl #3
    c608:	011c163d 	tsteq	ip, sp, lsr r6
    c60c:	3191764b 	orrscc	r7, r1, fp, asr #12
    c610:	08c006b0 	stmiaeq	r0, {r4, r5, r7, r9, sl}^
    c614:	617000c0 	cmnvs	r0, r0, asr #1
    c618:	81318181 	teqhi	r1, r1, lsl #3
    c61c:	8082403d 	addhi	r4, r2, sp, lsr r0
    c620:	f1180139 			; <UNDEFINED> instruction: 0xf1180139
    c624:	014b171c 	cmpeq	fp, ip, lsl r7
    c628:	c080b014 	addgt	fp, r0, r4, lsl r0
    c62c:	bc471722 	mcrrlt	7, 2, r1, r7, cr2
    c630:	90b033b0 	ldrhtls	r3, [r0], r0
    c634:	0f92f1ef 	svceq	0x0092f1ef
    c638:	00673c93 	mlseq	r7, r3, ip, r3
    c63c:	63a00370 	movvs	r0, #112, 6	; 0xc0000001
    c640:	efb064b0 	svc	0x00b064b0
    c644:	006556b0 	strhteq	r5, [r5], #-96	; 0xffffffa0
    c648:	00804071 	addeq	r4, r0, r1, ror r0
    c64c:	64472b22 	strbvs	r2, [r7], #-2850	; 0xfffff4de
    c650:	ef652ab0 	svc	0x00652ab0
    c654:	407100a0 	rsbsmi	r0, r1, r0, lsr #1
    c658:	2b220080 	blcs	88c860 <__ccfg+0x86c8b8>
    c65c:	03b06447 	movseq	r6, #1191182336	; 0x47000000
    c660:	016238b0 	strheq	r3, [r2, #-128]!	; 0xffffff80
    c664:	82816282 	addhi	r6, r1, #536870920	; 0x20000008
    c668:	803d8231 	eorshi	r8, sp, r1, lsr r2
    c66c:	0292f1ef 	addseq	pc, r2, #-1073741765	; 0xc000003b
    c670:	03673c93 	cmneq	r7, #37632	; 0x9300
    c674:	e66556a0 	strbt	r5, [r5], -r0, lsr #13
    c678:	6380a261 	orrvs	sl, r0, #268435462	; 0x10000006
    c67c:	5061e664 	rsbpl	lr, r1, r4, ror #12
    c680:	e67100b0 			; <UNDEFINED> instruction: 0xe67100b0
    c684:	d092e061 	addsle	lr, r2, r1, rrx
    c688:	3d220082 	stccc	0, cr0, [r2, #-520]!	; 0xfffffdf8
    c68c:	00b2c047 	adcseq	ip, r2, r7, asr #32
    c690:	f080a070 			; <UNDEFINED> instruction: 0xf080a070
    c694:	30435922 	subcc	r5, r3, r2, lsr #18
    c698:	62c102b0 	sbcvs	r0, r1, #176, 4
    c69c:	a0c00131 	sbcge	r0, r0, r1, lsr r1
    c6a0:	521e0080 	andspl	r0, lr, #128	; 0x80
    c6a4:	5322f043 	msrpl	CPSR_x, #67	; 0x43
    c6a8:	60f5a043 	rscsvs	sl, r5, r3, asr #32
    c6ac:	53396031 	teqpl	r9, #49	; 0x31
    c6b0:	10102063 	andsne	r2, r0, r3, rrx
    c6b4:	236f131a 	cmncs	pc, #1744830464	; 0x68000000
    c6b8:	1216116e 	andsne	r1, r6, #-2147483621	; 0x8000001b
    c6bc:	006b5416 	rsbeq	r5, fp, r6, lsl r4
    c6c0:	227c0370 	rsbscs	r0, ip, #112, 6	; 0xc0000001
    c6c4:	270b0000 	strcs	r0, [fp, -r0]
    c6c8:	00005812 	andeq	r5, r0, r2, lsl r8
    c6cc:	1c100400 	cfldrsne	mvf0, [r0], {-0}
    c6d0:	10240000 	eorne	r0, r4, r0
    c6d4:	0300001c 	movweq	r0, #28
    c6d8:	000013fc 	strdeq	r1, [r0], -ip
    c6dc:	45122b0b 	ldrmi	r2, [r2, #-2827]	; 0xfffff4f5
    c6e0:	24000000 	strcs	r0, [r0], #-0
    c6e4:	00001c26 	andeq	r1, r0, r6, lsr #24
    c6e8:	0022cd03 	eoreq	ip, r2, r3, lsl #26
    c6ec:	122c0b00 	eorne	r0, ip, #0, 22
    c6f0:	0000006b 	andeq	r0, r0, fp, rrx
    c6f4:	001c3704 	andseq	r3, ip, r4, lsl #14
    c6f8:	02ef0300 	rsceq	r0, pc, #0, 6
    c6fc:	2d0b0000 	stccs	0, cr0, [fp, #-0]
    c700:	00006b12 	andeq	r6, r0, r2, lsl fp
    c704:	0b080b00 	bleq	20f30c <__ccfg+0x1ef364>
    c708:	1ce20932 			; <UNDEFINED> instruction: 0x1ce20932
    c70c:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
    c710:	0b000003 	bleq	c724 <__exidx_end+0x79d0>
    c714:	1c260734 	stcne	7, cr0, [r6], #-208	; 0xffffff30
    c718:	01010000 	mrseq	r0, (UNDEF: 1)
    c71c:	9e200007 	cdpls	0, 2, cr0, cr0, cr7, {0}
    c720:	0b000000 	bleq	c728 <__exidx_end+0x79d4>
    c724:	1c260335 	stcne	3, cr0, [r6], #-212	; 0xffffff2c
    c728:	01010000 	mrseq	r0, (UNDEF: 1)
    c72c:	bf200006 	svclt	0x00200006
    c730:	0b000002 	bleq	c740 <__exidx_end+0x79ec>
    c734:	1c260336 	stcne	3, cr0, [r6], #-216	; 0xffffff28
    c738:	01010000 	mrseq	r0, (UNDEF: 1)
    c73c:	8c200005 	stchi	0, cr0, [r0], #-20	; 0xffffffec
    c740:	0b000004 	bleq	c758 <__exidx_end+0x7a04>
    c744:	1c260337 	stcne	3, cr0, [r6], #-220	; 0xffffff24
    c748:	01010000 	mrseq	r0, (UNDEF: 1)
    c74c:	85200004 	strhi	r0, [r0, #-4]!
    c750:	0b000004 	bleq	c768 <__exidx_end+0x7a14>
    c754:	1c260338 	stcne	3, cr0, [r6], #-224	; 0xffffff20
    c758:	04010000 	streq	r0, [r1], #-0
    c75c:	760c0000 	strvc	r0, [ip], -r0
    c760:	0b000004 	bleq	c778 <__exidx_end+0x7a24>
    c764:	1c26073a 	stcne	7, cr0, [r6], #-232	; 0xffffff18
    c768:	0c010000 	stceq	0, cr0, [r1], {-0}
    c76c:	0000002b 	andeq	r0, r0, fp, lsr #32
    c770:	26033c0b 	strcs	r3, [r3], -fp, lsl #24
    c774:	0200001c 	andeq	r0, r0, #28
    c778:	0000720c 	andeq	r7, r0, ip, lsl #4
    c77c:	033d0b00 	teqeq	sp, #0, 22
    c780:	00001c26 	andeq	r1, r0, r6, lsr #24
    c784:	014f0c03 	cmpeq	pc, r3, lsl #24
    c788:	3f0b0000 	svccc	0x000b0000
    c78c:	001c3708 	andseq	r3, ip, r8, lsl #14
    c790:	03000400 	movweq	r0, #1024	; 0x400
    c794:	000004d4 	ldrdeq	r0, [r0], -r4
    c798:	5403410b 	strpl	r4, [r3], #-267	; 0xfffffef5
    c79c:	2400001c 	strcs	r0, [r0], #-28	; 0xffffffe4
    c7a0:	00001ce2 	andeq	r1, r0, r2, ror #25
    c7a4:	00030c25 	andeq	r0, r3, r5, lsr #24
    c7a8:	1a430b00 	bne	10cf3b0 <__ccfg+0x10af408>
    c7ac:	00001cee 	andeq	r1, r0, lr, ror #25
    c7b0:	8e250101 	sufhis	f0, f5, f1
    c7b4:	0b000003 	bleq	c7c8 <__exidx_end+0x7a74>
    c7b8:	05de0e45 	ldrbeq	r0, [lr, #3653]	; 0xe45
    c7bc:	01010000 	mrseq	r0, (UNDEF: 1)
    c7c0:	0003a425 	andeq	sl, r3, r5, lsr #8
    c7c4:	1e450b00 	vmlane.f64	d16, d5, d0
    c7c8:	000005de 	ldrdeq	r0, [r0], -lr
    c7cc:	080b0101 	stmdaeq	fp, {r0, r8}
    c7d0:	4e098f0c 	cdpmi	15, 0, cr8, cr9, cr12, {0}
    c7d4:	0c00001d 	stceq	0, cr0, [r0], {29}
    c7d8:	000019fd 	strdeq	r1, [r0], -sp
    c7dc:	6b0b900c 	blvs	2f0814 <__ccfg+0x2d086c>
    c7e0:	00000000 	andeq	r0, r0, r0
    c7e4:	0006b30c 	andeq	fp, r6, ip, lsl #6
    c7e8:	08910c00 	ldmeq	r1, {sl, fp}
    c7ec:	00001c10 	andeq	r1, r0, r0, lsl ip
    c7f0:	15be0c04 	ldrne	r0, [lr, #3076]!	; 0xc04
    c7f4:	920c0000 	andls	r0, ip, #0
    c7f8:	001c3210 	andseq	r3, ip, r0, lsl r2
    c7fc:	03000600 	movweq	r0, #1536	; 0x600
    c800:	00000493 	muleq	r0, r3, r4
    c804:	1d03930c 	stcne	3, cr9, [r3, #-48]	; 0xffffffd0
    c808:	0900001d 	stmdbeq	r0, {r0, r2, r3, r4}
    c80c:	00001d4e 	andeq	r1, r0, lr, asr #26
    c810:	00001d65 	andeq	r1, r0, r5, ror #26
    c814:	21250026 			; <UNDEFINED> instruction: 0x21250026
    c818:	0c000000 	stceq	0, cr0, [r0], {-0}
    c81c:	1d5a0f99 	ldclne	15, cr0, [sl, #-612]	; 0xfffffd9c
    c820:	01010000 	mrseq	r0, (UNDEF: 1)
    c824:	910d010b 	tstls	sp, fp, lsl #2
    c828:	001d9d09 	andseq	r9, sp, r9, lsl #26
    c82c:	050c2000 	streq	r2, [ip, #-0]
    c830:	930d0000 	movwls	r0, #53248	; 0xd000
    c834:	001c2607 	andseq	r2, ip, r7, lsl #12
    c838:	01070100 	mrseq	r0, (UNDEF: 23)
    c83c:	001c2000 	andseq	r2, ip, r0
    c840:	940d0000 	strls	r0, [sp], #-0
    c844:	001c2603 	andseq	r2, ip, r3, lsl #12
    c848:	00010100 	andeq	r0, r1, r0, lsl #2
    c84c:	9d030000 	stcls	0, cr0, [r3, #-0]
    c850:	0d000002 	stceq	0, cr0, [r0, #-8]
    c854:	1d730396 	ldclne	3, cr0, [r3, #-600]!	; 0xfffffda8
    c858:	9d040000 	stcls	0, cr0, [r4, #-0]
    c85c:	0900001d 	stmdbeq	r0, {r0, r2, r3, r4}
    c860:	00001da9 	andeq	r1, r0, r9, lsr #27
    c864:	00001db9 			; <UNDEFINED> instruction: 0x00001db9
    c868:	ae040026 	cdpge	0, 0, cr0, cr4, cr6, {1}
    c86c:	2500001d 	strcs	r0, [r0, #-29]	; 0xffffffe3
    c870:	00000357 	andeq	r0, r0, r7, asr r3
    c874:	b9179c0d 	ldmdblt	r7, {r0, r2, r3, sl, fp, ip, pc}
    c878:	0100001d 	tsteq	r0, sp, lsl r0
    c87c:	1c1c0901 			; <UNDEFINED> instruction: 0x1c1c0901
    c880:	1dd70000 	ldclne	0, cr0, [r7]
    c884:	00260000 	eoreq	r0, r6, r0
    c888:	001dcc04 	andseq	ip, sp, r4, lsl #24
    c88c:	03d52500 	bicseq	r2, r5, #0, 10
    c890:	060e0000 	streq	r0, [lr], -r0
    c894:	001dd713 	andseq	sp, sp, r3, lsl r7
    c898:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    c89c:	00000134 	andeq	r0, r0, r4, lsr r1
    c8a0:	370ec30c 	strcc	ip, [lr, -ip, lsl #6]
    c8a4:	0100001c 	tsteq	r0, ip, lsl r0
    c8a8:	05480601 	strbeq	r0, [r8, #-1537]	; 0xfffff9ff
    c8ac:	6e0f0000 	cdpvs	0, 0, cr0, cr15, cr0, {0}
    c8b0:	1e051001 	cdpne	0, 0, cr1, cr5, cr1, {0}
    c8b4:	04100000 	ldreq	r0, [r0], #-0
    c8b8:	00001e0b 	andeq	r1, r0, fp, lsl #28
    c8bc:	1e17011e 	mrcne	1, 0, r0, cr7, cr14, {0}
    c8c0:	10150000 	andsne	r0, r5, r0
    c8c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    c8c8:	0005eb09 	andeq	lr, r5, r9, lsl #22
    c8cc:	001e2200 	andseq	r2, lr, r0, lsl #4
    c8d0:	04002600 	streq	r2, [r0], #-1536	; 0xfffffa00
    c8d4:	00001e17 	andeq	r1, r0, r7, lsl lr
    c8d8:	0004e41f 	andeq	lr, r4, pc, lsl r4
    c8dc:	017f0f00 	cmneq	pc, r0, lsl #30
    c8e0:	001e2216 	andseq	r2, lr, r6, lsl r2
    c8e4:	1f010100 	svcne	0x00010100
    c8e8:	000003c1 	andeq	r0, r0, r1, asr #7
    c8ec:	1401820f 	strne	r8, [r1], #-527	; 0xfffffdf1
    c8f0:	00001c43 	andeq	r1, r0, r3, asr #24
    c8f4:	111f0101 	tstne	pc, r1, lsl #2
    c8f8:	0f000005 	svceq	0x00000005
    c8fc:	370e02d8 			; <UNDEFINED> instruction: 0x370e02d8
    c900:	0100001c 	tsteq	r0, ip, lsl r0
    c904:	0f081a01 	svceq	0x00081a01
    c908:	7b090303 	blvc	24d51c <__ccfg+0x22d574>
    c90c:	1700001e 	smladne	r0, lr, r0, r0
    c910:	0000361b 	andeq	r3, r0, fp, lsl r6
    c914:	0703070f 	streq	r0, [r3, -pc, lsl #14]
    c918:	00001c10 	andeq	r1, r0, r0, lsl ip
    c91c:	060b1700 	streq	r1, [fp], -r0, lsl #14
    c920:	080f0000 	stmdaeq	pc, {}	; <UNPREDICTABLE>
    c924:	1c480803 	mcrrne	8, 0, r0, r8, cr3
    c928:	00040000 	andeq	r0, r4, r0
    c92c:	00027506 	andeq	r7, r2, r6, lsl #10
    c930:	03090f00 	movweq	r0, #40704	; 0x9f00
    c934:	001e5403 	andseq	r5, lr, r3, lsl #8
    c938:	05581900 	ldrbeq	r1, [r8, #-2304]	; 0xfffff700
    c93c:	0f300000 	svceq	0x00300000
    c940:	eb08030b 	bl	20d574 <__ccfg+0x1ed5cc>
    c944:	1700001e 	smladne	r0, lr, r0, r0
    c948:	00001512 	andeq	r1, r0, r2, lsl r5
    c94c:	0803140f 	stmdaeq	r3, {r0, r1, r2, r3, sl, ip}
    c950:	00001c10 	andeq	r1, r0, r0, lsl ip
    c954:	032d1700 			; <UNDEFINED> instruction: 0x032d1700
    c958:	150f0000 	strne	r0, [pc, #-0]	; c960 <__exidx_end+0x7c0c>
    c95c:	1c100803 	ldcne	8, cr0, [r0], {3}
    c960:	17020000 	strne	r0, [r2, -r0]
    c964:	0000054b 	andeq	r0, r0, fp, asr #10
    c968:	0b03160f 	bleq	d21ac <__ccfg+0xb2204>
    c96c:	00001df8 	strdeq	r1, [r0], -r8
    c970:	0f881704 	svceq	0x00881704
    c974:	170f0000 	strne	r0, [pc, -r0]
    c978:	1c480903 	mcrrne	9, 0, r0, r8, cr3	; <UNPREDICTABLE>
    c97c:	17080000 	strne	r0, [r8, -r0]
    c980:	000004dd 	ldrdeq	r0, [r0], -sp
    c984:	0f03180f 	svceq	0x0003180f
    c988:	00001eeb 	andeq	r1, r0, fp, ror #29
    c98c:	0328170c 			; <UNDEFINED> instruction: 0x0328170c
    c990:	190f0000 	stmdbne	pc, {}	; <UNPREDICTABLE>
    c994:	1efb1503 	cdpne	5, 15, cr1, cr11, cr3, {0}
    c998:	002c0000 	eoreq	r0, ip, r0
    c99c:	001e7b09 	andseq	r7, lr, r9, lsl #22
    c9a0:	001efb00 	andseq	pc, lr, r0, lsl #22
    c9a4:	00910a00 	addseq	r0, r1, r0, lsl #20
    c9a8:	00030000 	andeq	r0, r3, r0
    c9ac:	1e880410 	mcrne	4, 4, r0, cr8, cr0, {0}
    c9b0:	63060000 	movwvs	r0, #24576	; 0x6000
    c9b4:	0f000005 	svceq	0x00000005
    c9b8:	881b031c 	ldmdahi	fp, {r2, r3, r4, r8, r9}
    c9bc:	1f00001e 	svcne	0x0000001e
    c9c0:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    c9c4:	14031e0f 	strne	r1, [r3], #-3599	; 0xfffff1f1
    c9c8:	00001f1d 	andeq	r1, r0, sp, lsl pc
    c9cc:	04100101 	ldreq	r0, [r0], #-257	; 0xfffffeff
    c9d0:	00001f01 	andeq	r1, r0, r1, lsl #30
    c9d4:	00001125 	andeq	r1, r0, r5, lsr #2
    c9d8:	131d1000 	tstne	sp, #0
    c9dc:	00001c10 	andeq	r1, r0, r0, lsl ip
    c9e0:	1f250101 	svcne	0x00250101
    c9e4:	10000003 	andne	r0, r0, r3
    c9e8:	1c211a1e 			; <UNDEFINED> instruction: 0x1c211a1e
    c9ec:	01010000 	mrseq	r0, (UNDEF: 1)
    c9f0:	0004c025 	andeq	ip, r4, r5, lsr #32
    c9f4:	241e1000 	ldrcs	r1, [lr], #-0
    c9f8:	00001c21 	andeq	r1, r0, r1, lsr #24
    c9fc:	d4250101 	strtle	r0, [r5], #-257	; 0xfffffeff
    ca00:	10000000 	andne	r0, r0, r0
    ca04:	1f1d1422 	svcne	0x001d1422
    ca08:	01010000 	mrseq	r0, (UNDEF: 1)
    ca0c:	0016cc25 	andseq	ip, r6, r5, lsr #24
    ca10:	27391100 	ldrcs	r1, [r9, -r0, lsl #2]!
    ca14:	00000d5e 	andeq	r0, r0, lr, asr sp
    ca18:	ee250101 	sufs	f0, f5, f1
    ca1c:	1100001a 	tstne	r0, sl, lsl r0
    ca20:	09f1153a 	ldmibeq	r1!, {r1, r3, r4, r5, r8, sl, ip}^
    ca24:	01010000 	mrseq	r0, (UNDEF: 1)
    ca28:	00206d25 	eoreq	r6, r0, r5, lsr #26
    ca2c:	1a3b1100 	bne	ed0e34 <__ccfg+0xeb0e8c>
    ca30:	00000bd8 	ldrdeq	r0, [r0], -r8
    ca34:	89250101 	stmdbhi	r5!, {r0, r8}
    ca38:	1100001e 	tstne	r0, lr, lsl r0
    ca3c:	0c741a3c 			; <UNDEFINED> instruction: 0x0c741a3c
    ca40:	01010000 	mrseq	r0, (UNDEF: 1)
    ca44:	00006b09 	andeq	r6, r0, r9, lsl #22
    ca48:	001fa300 	andseq	sl, pc, r0, lsl #6
    ca4c:	00910a00 	addseq	r0, r1, r0, lsl #20
    ca50:	00140000 	andseq	r0, r4, r0
    ca54:	00232627 	eoreq	r2, r3, r7, lsr #12
    ca58:	113d1200 	teqne	sp, r0, lsl #4
    ca5c:	00001f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    ca60:	00b80305 	adcseq	r0, r8, r5, lsl #6
    ca64:	5b282000 	blpl	a14a6c <__ccfg+0x9f4ac4>
    ca68:	1200001f 	andne	r0, r0, #31
    ca6c:	03052072 	movweq	r2, #20594	; 0x5072
    ca70:	20000054 	andcs	r0, r0, r4, asr r0
    ca74:	001f6928 	andseq	r6, pc, r8, lsr #18
    ca78:	0e961200 	cdpeq	2, 9, cr1, cr6, cr0, {0}
    ca7c:	003c0305 	eorseq	r0, ip, r5, lsl #6
    ca80:	77282000 	strvc	r2, [r8, -r0]!
    ca84:	1200001f 	andne	r0, r0, #31
    ca88:	030513ad 	movweq	r1, #21421	; 0x53ad
    ca8c:	200000a0 	andcs	r0, r0, r0, lsr #1
    ca90:	001f8528 	andseq	r8, pc, r8, lsr #10
    ca94:	13c21200 	bicne	r1, r2, #0, 4
    ca98:	007c0305 	rsbseq	r0, ip, r5, lsl #6
    ca9c:	8a002000 	bhi	14aa4 <__exidx_end+0xfd50>
    caa0:	04000001 	streq	r0, [r0], #-1
    caa4:	002da100 	eoreq	sl, sp, r0, lsl #2
    caa8:	be010400 	cfcpyslt	mvf0, mvf1
    caac:	01000023 	tsteq	r0, r3, lsr #32
    cab0:	000023a3 	andeq	r2, r0, r3, lsr #7
    cab4:	00002485 	andeq	r2, r0, r5, lsl #9
    cab8:	00000fa0 	andeq	r0, r0, r0, lsr #31
    cabc:	00000000 	andeq	r0, r0, r0
    cac0:	00006880 	andeq	r6, r0, r0, lsl #17
    cac4:	e5060102 	str	r0, [r6, #-258]	; 0xfffffefe
    cac8:	03000003 	movweq	r0, #3
    cacc:	00002399 	muleq	r0, r9, r3
    cad0:	00371d02 	eorseq	r1, r7, r2, lsl #26
    cad4:	01020000 	mrseq	r0, (UNDEF: 2)
    cad8:	0003e308 	andeq	lr, r3, r8, lsl #6
    cadc:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    cae0:	00000446 	andeq	r0, r0, r6, asr #8
    cae4:	8a070202 	bhi	1cd2f4 <__ccfg+0x1ad34c>
    cae8:	02000002 	andeq	r0, r0, #2
    caec:	00b40504 	adcseq	r0, r4, r4, lsl #10
    caf0:	31030000 	mrscc	r0, (UNDEF: 3)
    caf4:	02000023 	andeq	r0, r0, #35	; 0x23
    caf8:	00005e41 	andeq	r5, r0, r1, asr #28
    cafc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    cb00:	0000007e 	andeq	r0, r0, lr, ror r0
    cb04:	af050802 	svcge	0x00050802
    cb08:	02000000 	andeq	r0, r0, #0
    cb0c:	00790708 	rsbseq	r0, r9, r8, lsl #14
    cb10:	04040000 	streq	r0, [r4], #-0
    cb14:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    cb18:	07040200 	streq	r0, [r4, -r0, lsl #4]
    cb1c:	00000083 	andeq	r0, r0, r3, lsl #1
    cb20:	00239b03 	eoreq	r9, r3, r3, lsl #22
    cb24:	2c140300 	ldccs	3, cr0, [r4], {-0}
    cb28:	03000000 	movweq	r0, #0
    cb2c:	00002333 	andeq	r2, r0, r3, lsr r3
    cb30:	00532003 	subseq	r2, r3, r3
    cb34:	5d030000 	stcpl	0, cr0, [r3, #-0]
    cb38:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    cb3c:	0000a233 	andeq	sl, r0, r3, lsr r2
    cb40:	a8040500 	stmdage	r4, {r8, sl}
    cb44:	06000000 	streq	r0, [r0], -r0
    cb48:	00247303 	eoreq	r7, r4, r3, lsl #6
    cb4c:	b4340400 	ldrtlt	r0, [r4], #-1024	; 0xfffffc00
    cb50:	05000000 	streq	r0, [r0, #-0]
    cb54:	0000ba04 	andeq	fp, r0, r4, lsl #20
    cb58:	00c50700 	sbceq	r0, r5, r0, lsl #14
    cb5c:	81080000 	mrshi	r0, (UNDEF: 8)
    cb60:	00000000 	andeq	r0, r0, r0
    cb64:	00238c09 	eoreq	r8, r3, r9, lsl #24
    cb68:	34990500 	ldrcc	r0, [r9], #1280	; 0x500
    cb6c:	28000030 	stmdacs	r0, {r4, r5}
    cb70:	01000000 	mrseq	r0, (UNDEF: 0)
    cb74:	00010b9c 	muleq	r1, ip, fp
    cb78:	246e0a00 	strbtcs	r0, [lr], #-2560	; 0xfffff600
    cb7c:	35010000 	strcc	r0, [r1, #-0]
    cb80:	00000097 	muleq	r0, r7, r0
    cb84:	000032d8 	ldrdeq	r3, [r0], -r8
    cb88:	00233c0b 	eoreq	r3, r3, fp, lsl #24
    cb8c:	0b370100 	bleq	dccf94 <__ccfg+0xdacfec>
    cb90:	1d000001 	stcne	0, cr0, [r0, #-4]
    cb94:	0c000033 	stceq	0, cr0, [r0], {51}	; 0x33
    cb98:	0000303c 	andeq	r3, r0, ip, lsr r0
    cb9c:	00000177 	andeq	r0, r0, r7, ror r1
    cba0:	0030560d 	eorseq	r5, r0, sp, lsl #12
    cba4:	00018200 	andeq	r8, r1, r0, lsl #4
    cba8:	01020000 	mrseq	r0, (UNDEF: 2)
    cbac:	000c6f02 	andeq	r6, ip, r2, lsl #30
    cbb0:	23480e00 	movtcs	r0, #36352	; 0x8e00
    cbb4:	9a050000 	bls	14cbbc <__ccfg+0x12cc14>
    cbb8:	00000000 	andeq	r0, r0, r0
    cbbc:	0000002c 	andeq	r0, r0, ip, lsr #32
    cbc0:	01779c01 	cmneq	r7, r1, lsl #24
    cbc4:	6e0a0000 	cdpvs	0, 0, cr0, cr10, cr0, {0}
    cbc8:	01000024 	tsteq	r0, r4, lsr #32
    cbcc:	0000a940 	andeq	sl, r0, r0, asr #18
    cbd0:	00335200 	eorseq	r5, r3, r0, lsl #4
    cbd4:	24e50a00 	strbtcs	r0, [r5], #2560	; 0xa00
    cbd8:	40010000 	andmi	r0, r1, r0
    cbdc:	00000081 	andeq	r0, r0, r1, lsl #1
    cbe0:	00003397 	muleq	r0, r7, r3
    cbe4:	00233c0b 	eoreq	r3, r3, fp, lsl #24
    cbe8:	0b420100 	bleq	108cff0 <__ccfg+0x106d048>
    cbec:	b8000001 	stmdalt	r0, {r0}
    cbf0:	0c000033 	stceq	0, cr0, [r0], {51}	; 0x33
    cbf4:	00000000 	andeq	r0, r0, r0
    cbf8:	00000177 	andeq	r0, r0, r7, ror r1
    cbfc:	0000000f 	andeq	r0, r0, pc
    cc00:	00016d00 	andeq	r6, r1, r0, lsl #26
    cc04:	50011000 	andpl	r1, r1, r0
    cc08:	00007702 	andeq	r7, r0, r2, lsl #14
    cc0c:	0000000d 	andeq	r0, r0, sp
    cc10:	00018200 	andeq	r8, r1, r0, lsl #4
    cc14:	6e110000 	cdpvs	0, 1, cr0, cr1, cr0, {0}
    cc18:	06000023 	streq	r0, [r0], -r3, lsr #32
    cc1c:	00008c6a 	andeq	r8, r0, sl, ror #24
    cc20:	237d1100 	cmncs	sp, #0, 2
    cc24:	84060000 	strhi	r0, [r6], #-0
    cc28:	0000008c 	andeq	r0, r0, ip, lsl #1
    cc2c:	0000d500 	andeq	sp, r0, r0, lsl #10
    cc30:	8d000400 	cfstrshi	mvf0, [r0, #-0]
    cc34:	0400002e 	streq	r0, [r0], #-46	; 0xffffffd2
    cc38:	0023be01 	eoreq	fp, r3, r1, lsl #28
    cc3c:	25310100 	ldrcs	r0, [r1, #-256]!	; 0xffffff00
    cc40:	24850000 	strcs	r0, [r5], #0
    cc44:	0fb80000 	svceq	0x00b80000
    cc48:	00000000 	andeq	r0, r0, r0
    cc4c:	6a200000 	bvs	80cc54 <__ccfg+0x7eccac>
    cc50:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
    cc54:	02000025 	andeq	r0, r0, #37	; 0x25
    cc58:	0000301b 	andeq	r3, r0, fp, lsl r0
    cc5c:	06010300 	streq	r0, [r1], -r0, lsl #6
    cc60:	000003e5 	andeq	r0, r0, r5, ror #7
    cc64:	e3080103 	movw	r0, #33027	; 0x8103
    cc68:	03000003 	movweq	r0, #3
    cc6c:	04460502 	strbeq	r0, [r6], #-1282	; 0xfffffafe
    cc70:	02030000 	andeq	r0, r3, #0
    cc74:	00028a07 	andeq	r8, r2, r7, lsl #20
    cc78:	251e0200 	ldrcs	r0, [lr, #-512]	; 0xfffffe00
    cc7c:	3f020000 	svccc	0x00020000
    cc80:	00000057 	andeq	r0, r0, r7, asr r0
    cc84:	b4050403 	strlt	r0, [r5], #-1027	; 0xfffffbfd
    cc88:	03000000 	movweq	r0, #0
    cc8c:	007e0704 	rsbseq	r0, lr, r4, lsl #14
    cc90:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    cc94:	0000af05 	andeq	sl, r0, r5, lsl #30
    cc98:	07080300 	streq	r0, [r8, -r0, lsl #6]
    cc9c:	00000079 	andeq	r0, r0, r9, ror r0
    cca0:	69050404 	stmdbvs	r5, {r2, sl}
    cca4:	0300746e 	movweq	r7, #1134	; 0x46e
    cca8:	00830704 	addeq	r0, r3, r4, lsl #14
    ccac:	2a020000 	bcs	8ccb4 <__ccfg+0x6cd0c>
    ccb0:	03000025 	movweq	r0, #37	; 0x25
    ccb4:	00002513 	andeq	r2, r0, r3, lsl r5
    ccb8:	25200200 	strcs	r0, [r0, #-512]!	; 0xfffffe00
    ccbc:	1f030000 	svcne	0x00030000
    ccc0:	0000004c 	andeq	r0, r0, ip, asr #32
    ccc4:	0024ef05 	eoreq	lr, r4, r5, lsl #30
    ccc8:	8caa0400 	cfstrshi	mvf0, [sl]
    cccc:	5c000000 	stcpl	0, cr0, [r0], {-0}
    ccd0:	30000030 	andcc	r0, r0, r0, lsr r0
    ccd4:	01000000 	mrseq	r0, (UNDEF: 0)
    ccd8:	2562069c 	strbcs	r0, [r2, #-1692]!	; 0xfffff964
    ccdc:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    cce0:	0000008c 	andeq	r0, r0, ip, lsl #1
    cce4:	000033ed 	andeq	r3, r0, sp, ror #7
    cce8:	00255306 	eoreq	r5, r5, r6, lsl #6
    ccec:	8c3f0100 	ldfhis	f0, [pc], #-0	; ccf4 <__exidx_end+0x7fa0>
    ccf0:	06000000 	streq	r0, [r0], -r0
    ccf4:	07000034 	smladxeq	r0, r4, r0, r0
    ccf8:	00002511 	andeq	r2, r0, r1, lsl r5
    ccfc:	00814001 	addeq	r4, r1, r1
    cd00:	51010000 	mrspl	r0, (UNDEF: 1)
    cd04:	01430000 	mrseq	r0, (UNDEF: 67)
    cd08:	00040000 	andeq	r0, r4, r0
    cd0c:	00002efc 	strdeq	r2, [r0], -ip
    cd10:	23be0104 			; <UNDEFINED> instruction: 0x23be0104
    cd14:	13010000 	movwne	r0, #4096	; 0x1000
    cd18:	85000026 	strhi	r0, [r0, #-38]	; 0xffffffda
    cd1c:	c8000024 	stmdagt	r0, {r2, r5}
    cd20:	0000000f 	andeq	r0, r0, pc
    cd24:	8b000000 	blhi	cd2c <__exidx_end+0x7fd8>
    cd28:	0200006b 	andeq	r0, r0, #107	; 0x6b
    cd2c:	03e50601 	mvneq	r0, #1048576	; 0x100000
    cd30:	01020000 	mrseq	r0, (UNDEF: 2)
    cd34:	0003e308 	andeq	lr, r3, r8, lsl #6
    cd38:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    cd3c:	00000446 	andeq	r0, r0, r6, asr #8
    cd40:	8a070202 	bhi	1cd550 <__ccfg+0x1ad5a8>
    cd44:	02000002 	andeq	r0, r0, #2
    cd48:	00b40504 	adcseq	r0, r4, r4, lsl #10
    cd4c:	31030000 	mrscc	r0, (UNDEF: 3)
    cd50:	02000023 	andeq	r0, r0, #35	; 0x23
    cd54:	00005341 	andeq	r5, r0, r1, asr #6
    cd58:	07040200 	streq	r0, [r4, -r0, lsl #4]
    cd5c:	0000007e 	andeq	r0, r0, lr, ror r0
    cd60:	af050802 	svcge	0x00050802
    cd64:	03000000 	movweq	r0, #0
    cd68:	000025bd 			; <UNDEFINED> instruction: 0x000025bd
    cd6c:	006c5b02 	rsbeq	r5, ip, r2, lsl #22
    cd70:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    cd74:	00007907 	andeq	r7, r0, r7, lsl #18
    cd78:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    cd7c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    cd80:	83070402 	movwhi	r0, #29698	; 0x7402
    cd84:	03000000 	movweq	r0, #0
    cd88:	00002333 	andeq	r2, r0, r3, lsr r3
    cd8c:	00482003 	subeq	r2, r8, r3
    cd90:	bf030000 	svclt	0x00030000
    cd94:	03000025 	movweq	r0, #37	; 0x25
    cd98:	00006126 	andeq	r6, r0, r6, lsr #2
    cd9c:	25880500 	strcs	r0, [r8, #1280]	; 0x500
    cda0:	45040000 	strmi	r0, [r4, #-0]
    cda4:	00008103 	andeq	r8, r0, r3, lsl #2
    cda8:	00308c00 	eorseq	r8, r0, r0, lsl #24
    cdac:	00002000 	andeq	r2, r0, r0
    cdb0:	dd9c0100 	ldfles	f0, [ip]
    cdb4:	06000000 	streq	r0, [r0], -r0
    cdb8:	00002579 	andeq	r2, r0, r9, ror r5
    cdbc:	00814001 	addeq	r4, r1, r1
    cdc0:	343b0000 	ldrtcc	r0, [fp], #-0
    cdc4:	c8060000 	stmdagt	r6, {}	; <UNPREDICTABLE>
    cdc8:	01000025 	tsteq	r0, r5, lsr #32
    cdcc:	00008141 	andeq	r8, r0, r1, asr #2
    cdd0:	00344e00 	eorseq	r4, r4, r0, lsl #28
    cdd4:	25ab0700 	strcs	r0, [fp, #1792]!	; 0x700
    cdd8:	42010000 	andmi	r0, r1, #0
    cddc:	00000081 	andeq	r0, r0, r1, lsl #1
    cde0:	05005201 	streq	r5, [r0, #-513]	; 0xfffffdff
    cde4:	000025da 	ldrdeq	r2, [r0], -sl
    cde8:	8c035304 	stchi	3, cr5, [r3], {4}
    cdec:	ac000000 	stcge	0, cr0, [r0], {-0}
    cdf0:	18000030 	stmdane	r0, {r4, r5}
    cdf4:	01000000 	mrseq	r0, (UNDEF: 0)
    cdf8:	00012f9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
    cdfc:	01080800 	tsteq	r8, r0, lsl #16
    ce00:	00011659 	andeq	r1, r1, r9, asr r6
    ce04:	256d0900 	strbcs	r0, [sp, #-2304]!	; 0xfffff700
    ce08:	5a010000 	bpl	4ce10 <__ccfg+0x2ce68>
    ce0c:	0000008c 	andeq	r0, r0, ip, lsl #1
    ce10:	00260609 	eoreq	r0, r6, r9, lsl #12
    ce14:	2f5b0100 	svccs	0x005b0100
    ce18:	00000001 	andeq	r0, r0, r1
    ce1c:	0025fb0a 	eoreq	pc, r5, sl, lsl #22
    ce20:	f75c0100 			; <UNDEFINED> instruction: 0xf75c0100
    ce24:	07000000 	streq	r0, [r0, -r0]
    ce28:	000025ab 	andeq	r2, r0, fp, lsr #11
    ce2c:	00815d01 	addeq	r5, r1, r1, lsl #26
    ce30:	51010000 	mrspl	r0, (UNDEF: 1)
    ce34:	00810b00 	addeq	r0, r1, r0, lsl #22
    ce38:	013f0000 	teqeq	pc, r0
    ce3c:	3f0c0000 	svccc	0x000c0000
    ce40:	01000001 	tsteq	r0, r1
    ce44:	07040200 	streq	r0, [r4, -r0, lsl #4]
    ce48:	00002632 	andeq	r2, r0, r2, lsr r6
    ce4c:	00013600 	andeq	r3, r1, r0, lsl #12
    ce50:	a6000400 	strge	r0, [r0], -r0, lsl #8
    ce54:	0400002f 	streq	r0, [r0], #-47	; 0xffffffd1
    ce58:	0023be01 	eoreq	fp, r3, r1, lsl #28
    ce5c:	26700100 	ldrbtcs	r0, [r0], -r0, lsl #2
    ce60:	24850000 	strcs	r0, [r5], #0
    ce64:	0fe00000 	svceq	0x00e00000
    ce68:	00000000 	andeq	r0, r0, r0
    ce6c:	6d380000 	ldcvs	0, cr0, [r8, #-0]
    ce70:	01020000 	mrseq	r0, (UNDEF: 2)
    ce74:	0003e506 	andeq	lr, r3, r6, lsl #10
    ce78:	08010200 	stmdaeq	r1, {r9}
    ce7c:	000003e3 	andeq	r0, r0, r3, ror #7
    ce80:	46050202 	strmi	r0, [r5], -r2, lsl #4
    ce84:	02000004 	andeq	r0, r0, #4
    ce88:	028a0702 	addeq	r0, sl, #524288	; 0x80000
    ce8c:	04020000 	streq	r0, [r2], #-0
    ce90:	0000b405 	andeq	fp, r0, r5, lsl #8
    ce94:	23310300 	teqcs	r1, #0, 6
    ce98:	41020000 	mrsmi	r0, (UNDEF: 2)
    ce9c:	00000053 	andeq	r0, r0, r3, asr r0
    cea0:	7e070402 	cdpvc	4, 0, cr0, cr7, cr2, {0}
    cea4:	02000000 	andeq	r0, r0, #0
    cea8:	00af0508 	adceq	r0, pc, r8, lsl #10
    ceac:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    ceb0:	00007907 	andeq	r7, r0, r7, lsl #18
    ceb4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    ceb8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    cebc:	83070402 	movwhi	r0, #29698	; 0x7402
    cec0:	03000000 	movweq	r0, #0
    cec4:	00002333 	andeq	r2, r0, r3, lsr r3
    cec8:	00482003 	subeq	r2, r8, r3
    cecc:	6e050000 	cdpvs	0, 0, cr0, cr5, cr0, {0}
    ced0:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    ced4:	0000766a 	andeq	r7, r0, sl, ror #12
    ced8:	0030c400 	eorseq	ip, r0, r0, lsl #8
    cedc:	00000800 	andeq	r0, r0, r0, lsl #16
    cee0:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    cee4:	06000000 	streq	r0, [r0], -r0
    cee8:	0000265e 	andeq	r2, r0, lr, asr r6
    ceec:	00767701 	rsbseq	r7, r6, r1, lsl #14
    cef0:	05000000 	streq	r0, [r0, #-0]
    cef4:	0000268b 	andeq	r2, r0, fp, lsl #13
    cef8:	00767804 	rsbseq	r7, r6, r4, lsl #16
    cefc:	00000000 	andeq	r0, r0, r0
    cf00:	00060000 	andeq	r0, r6, r0
    cf04:	9c010000 	stcls	0, cr0, [r1], {-0}
    cf08:	000000cb 	andeq	r0, r0, fp, asr #1
    cf0c:	00265e06 	eoreq	r5, r6, r6, lsl #28
    cf10:	76c20100 	strbvc	r0, [r2], r0, lsl #2
    cf14:	00000000 	andeq	r0, r0, r0
    cf18:	00237d05 	eoreq	r7, r3, r5, lsl #26
    cf1c:	76840400 	strvc	r0, [r4], r0, lsl #8
    cf20:	cc000000 	stcgt	0, cr0, [r0], {-0}
    cf24:	08000030 	stmdaeq	r0, {r4, r5}
    cf28:	01000000 	mrseq	r0, (UNDEF: 0)
    cf2c:	0000f19c 	muleq	r0, ip, r1
    cf30:	265e0700 	ldrbcs	r0, [lr], -r0, lsl #14
    cf34:	0f010000 	svceq	0x00010000
    cf38:	00007601 	andeq	r7, r0, r1, lsl #12
    cf3c:	3b080000 	blcc	20cf44 <__ccfg+0x1ecf9c>
    cf40:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    cf44:	0076015b 	rsbseq	r0, r6, fp, asr r1
    cf48:	00000000 	andeq	r0, r0, r0
    cf4c:	00060000 	andeq	r0, r6, r0
    cf50:	9c010000 	stcls	0, cr0, [r1], {-0}
    cf54:	00000118 	andeq	r0, r0, r8, lsl r1
    cf58:	00265e07 	eoreq	r5, r6, r7, lsl #28
    cf5c:	015a0100 	cmpeq	sl, r0, lsl #2
    cf60:	00000076 	andeq	r0, r0, r6, ror r0
    cf64:	264f0900 	strbcs	r0, [pc], -r0, lsl #18
    cf68:	6c040000 	stcvs	0, cr0, [r4], {-0}
    cf6c:	00000001 	andeq	r0, r0, r1
    cf70:	00000800 	andeq	r0, r0, r0, lsl #16
    cf74:	0a9c0100 	beq	fe70d37c <_estack+0xde70837c>
    cf78:	00002666 	andeq	r2, r0, r6, ror #12
    cf7c:	76019e01 	strvc	r9, [r1], -r1, lsl #28
    cf80:	01000000 	mrseq	r0, (UNDEF: 0)
    cf84:	bf000050 	svclt	0x00000050
    cf88:	04000008 	streq	r0, [r0], #-8
    cf8c:	00305600 	eorseq	r5, r0, r0, lsl #12
    cf90:	be010400 	cfcpyslt	mvf0, mvf1
    cf94:	01000023 	tsteq	r0, r3, lsr #32
    cf98:	000027c3 	andeq	r2, r0, r3, asr #15
    cf9c:	00002485 	andeq	r2, r0, r5, lsl #9
    cfa0:	00001028 	andeq	r1, r0, r8, lsr #32
    cfa4:	00000000 	andeq	r0, r0, r0
    cfa8:	00006ed8 	ldrdeq	r6, [r0], -r8
    cfac:	e5060102 	str	r0, [r6, #-258]	; 0xfffffefe
    cfb0:	03000003 	movweq	r0, #3
    cfb4:	00002399 	muleq	r0, r9, r3
    cfb8:	00371d03 	eorseq	r1, r7, r3, lsl #26
    cfbc:	01020000 	mrseq	r0, (UNDEF: 2)
    cfc0:	0003e308 	andeq	lr, r3, r8, lsl #6
    cfc4:	2b6a0300 	blcs	1a8dbcc <__ccfg+0x1a6dc24>
    cfc8:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    cfcc:	00000049 	andeq	r0, r0, r9, asr #32
    cfd0:	46050202 	strmi	r0, [r5], -r2, lsl #4
    cfd4:	03000004 	movweq	r0, #4
    cfd8:	0000278f 	andeq	r2, r0, pc, lsl #15
    cfdc:	005b2b03 	subseq	r2, fp, r3, lsl #22
    cfe0:	02020000 	andeq	r0, r2, #0
    cfe4:	00028a07 	andeq	r8, r2, r7, lsl #20
    cfe8:	251e0300 	ldrcs	r0, [lr, #-768]	; 0xfffffd00
    cfec:	3f030000 	svccc	0x00030000
    cff0:	0000006d 	andeq	r0, r0, sp, rrx
    cff4:	b4050402 	strlt	r0, [r5], #-1026	; 0xfffffbfe
    cff8:	03000000 	movweq	r0, #0
    cffc:	00002331 	andeq	r2, r0, r1, lsr r3
    d000:	007f4103 	rsbseq	r4, pc, r3, lsl #2
    d004:	04020000 	streq	r0, [r2], #-0
    d008:	00007e07 	andeq	r7, r0, r7, lsl #28
    d00c:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    d010:	000000af 	andeq	r0, r0, pc, lsr #1
    d014:	79070802 	stmdbvc	r7, {r1, fp}
    d018:	04000000 	streq	r0, [r0], #-0
    d01c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    d020:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    d024:	00008307 	andeq	r8, r0, r7, lsl #6
    d028:	239b0300 	orrscs	r0, fp, #0, 6
    d02c:	14040000 	strne	r0, [r4], #-0
    d030:	0000002c 	andeq	r0, r0, ip, lsr #32
    d034:	002b6c03 	eoreq	r6, fp, r3, lsl #24
    d038:	3e190400 	cfmulscc	mvf0, mvf9, mvf0
    d03c:	03000000 	movweq	r0, #0
    d040:	00002791 	muleq	r0, r1, r7
    d044:	00501a04 	subseq	r1, r0, r4, lsl #20
    d048:	20030000 	andcs	r0, r3, r0
    d04c:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    d050:	0000621f 	andeq	r6, r0, pc, lsl r2
    d054:	23330300 	teqcs	r3, #0, 6
    d058:	20040000 	andcs	r0, r4, r0
    d05c:	00000074 	andeq	r0, r0, r4, ror r0
    d060:	00235d03 	eoreq	r5, r3, r3, lsl #26
    d064:	e4330500 	ldrt	r0, [r3], #-1280	; 0xfffffb00
    d068:	05000000 	streq	r0, [r0, #-0]
    d06c:	0000ea04 	andeq	lr, r0, r4, lsl #20
    d070:	04050600 	streq	r0, [r5], #-1536	; 0xfffffa00
    d074:	000000f1 	strdeq	r0, [r0], -r1
    d078:	0000fc07 	andeq	pc, r0, r7, lsl #24
    d07c:	00a20800 	adceq	r0, r2, r0, lsl #16
    d080:	03000000 	movweq	r0, #0
    d084:	00002a93 	muleq	r0, r3, sl
    d088:	01074206 	tsteq	r7, r6, lsl #4
    d08c:	04050000 	streq	r0, [r5], #-0
    d090:	0000010d 	andeq	r0, r0, sp, lsl #2
    d094:	0000ce09 	andeq	ip, r0, r9, lsl #28
    d098:	00012600 	andeq	r2, r1, r0, lsl #12
    d09c:	01260800 			; <UNDEFINED> instruction: 0x01260800
    d0a0:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    d0a4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    d0a8:	000000ce 	andeq	r0, r0, lr, asr #1
    d0ac:	a2040500 	andge	r0, r4, #0, 10
    d0b0:	03000000 	movweq	r0, #0
    d0b4:	00002bfb 	strdeq	r2, [r0], -fp
    d0b8:	01374606 	teqeq	r7, r6, lsl #12
    d0bc:	04050000 	streq	r0, [r5], #-0
    d0c0:	0000013d 	andeq	r0, r0, sp, lsr r1
    d0c4:	0000ce0a 	andeq	ip, r0, sl, lsl #28
    d0c8:	2c440300 	mcrrcs	3, 0, r0, r4, cr0
    d0cc:	48060000 	stmdami	r6, {}	; <UNPREDICTABLE>
    d0d0:	00000137 	andeq	r0, r0, r7, lsr r1
    d0d4:	00292b03 	eoreq	r2, r9, r3, lsl #22
    d0d8:	584a0600 	stmdapl	sl, {r9, sl}^
    d0dc:	05000001 	streq	r0, [r0, #-1]
    d0e0:	00015e04 	andeq	r5, r1, r4, lsl #28
    d0e4:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    d0e8:	016d0000 	cmneq	sp, r0
    d0ec:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    d0f0:	00000000 	andeq	r0, r0, r0
    d0f4:	00283a03 	eoreq	r3, r8, r3, lsl #20
    d0f8:	374c0600 	strbcc	r0, [ip, -r0, lsl #12]
    d0fc:	03000001 	movweq	r0, #1
    d100:	0000279a 	muleq	r0, sl, r7
    d104:	01074e06 	tsteq	r7, r6, lsl #28
    d108:	2a030000 	bcs	cd110 <__ccfg+0xad168>
    d10c:	06000028 	streq	r0, [r0], -r8, lsr #32
    d110:	0000e451 	andeq	lr, r0, r1, asr r4
    d114:	26b40300 	ldrtcs	r0, [r4], r0, lsl #6
    d118:	53060000 	movwpl	r0, #24576	; 0x6000
    d11c:	00000199 	muleq	r0, r9, r1
    d120:	019f0405 	orrseq	r0, pc, r5, lsl #8
    d124:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    d128:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    d12c:	08000001 	stmdaeq	r0, {r0}
    d130:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    d134:	0000b808 	andeq	fp, r0, r8, lsl #16
    d138:	00b80800 	adcseq	r0, r8, r0, lsl #16
    d13c:	05000000 	streq	r0, [r0, #-0]
    d140:	0000b804 	andeq	fp, r0, r4, lsl #16
    d144:	2aa90300 	bcs	fea4dd4c <_estack+0xdea48d4c>
    d148:	57060000 	strpl	r0, [r6, -r0]
    d14c:	000001c9 	andeq	r0, r0, r9, asr #3
    d150:	01cf0405 	biceq	r0, pc, r5, lsl #8
    d154:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    d158:	e3000000 	movw	r0, #0
    d15c:	08000001 	stmdaeq	r0, {r0}
    d160:	000001e3 	andeq	r0, r0, r3, ror #3
    d164:	0000ce08 	andeq	ip, r0, r8, lsl #28
    d168:	04050000 	streq	r0, [r5], #-0
    d16c:	000000ce 	andeq	r0, r0, lr, asr #1
    d170:	00289d03 	eoreq	r9, r8, r3, lsl #26
    d174:	c95a0600 	ldmdbgt	sl, {r9, sl}^
    d178:	03000001 	movweq	r0, #1
    d17c:	00002957 	andeq	r2, r0, r7, asr r9
    d180:	01c95d06 	biceq	r5, r9, r6, lsl #26
    d184:	c6030000 	strgt	r0, [r3], -r0
    d188:	06000026 	streq	r0, [r0], -r6, lsr #32
    d18c:	0001c960 	andeq	ip, r1, r0, ror #18
    d190:	2ab70300 	bcs	fedcdd98 <_estack+0xdedc8d98>
    d194:	63060000 	movwvs	r0, #24576	; 0x6000
    d198:	000000e4 	andeq	r0, r0, r4, ror #1
    d19c:	00270403 	eoreq	r0, r7, r3, lsl #8
    d1a0:	20650600 	rsbcs	r0, r5, r0, lsl #12
    d1a4:	05000002 	streq	r0, [r0, #-2]
    d1a8:	00022604 	andeq	r2, r2, r4, lsl #12
    d1ac:	02310700 	eorseq	r0, r1, #0, 14
    d1b0:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    d1b4:	00000000 	andeq	r0, r0, r0
    d1b8:	002c5503 	eoreq	r5, ip, r3, lsl #10
    d1bc:	20670600 	rsbcs	r0, r7, r0, lsl #12
    d1c0:	03000002 	movweq	r0, #2
    d1c4:	00002999 	muleq	r0, r9, r9
    d1c8:	00eb6906 	rsceq	r6, fp, r6, lsl #18
    d1cc:	34030000 	strcc	r0, [r3], #-0
    d1d0:	0600002c 	streq	r0, [r0], -ip, lsr #32
    d1d4:	0000eb6b 	andeq	lr, r0, fp, ror #22
    d1d8:	29660300 	stmdbcs	r6!, {r8, r9}^
    d1dc:	6d060000 	stcvs	0, cr0, [r6, #-0]
    d1e0:	000000eb 	andeq	r0, r0, fp, ror #1
    d1e4:	00297803 	eoreq	r7, r9, r3, lsl #16
    d1e8:	eb6f0600 	bl	1bce9f0 <__ccfg+0x1baea48>
    d1ec:	0b000000 	bleq	d1f4 <__exidx_end+0x84a0>
    d1f0:	557a064c 	ldrbpl	r0, [sl, #-1612]!	; 0xfffff9b4
    d1f4:	0c000003 	stceq	0, cr0, [r0], {3}
    d1f8:	0000293c 	andeq	r2, r0, ip, lsr r9
    d1fc:	00fc7c06 	rscseq	r7, ip, r6, lsl #24
    d200:	0c000000 	stceq	0, cr0, [r0], {-0}
    d204:	00002c27 	andeq	r2, r0, r7, lsr #24
    d208:	012c7d06 			; <UNDEFINED> instruction: 0x012c7d06
    d20c:	0c040000 	stceq	0, cr0, [r4], {-0}
    d210:	0000294d 	andeq	r2, r0, sp, asr #18
    d214:	01427e06 	cmpeq	r2, r6, lsl #28
    d218:	0c080000 	stceq	0, cr0, [r8], {-0}
    d21c:	00002b46 	andeq	r2, r0, r6, asr #22
    d220:	014d7f06 	cmpeq	sp, r6, lsl #30
    d224:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    d228:	00002b58 	andeq	r2, r0, r8, asr fp
    d22c:	016d8006 	cmneq	sp, r6
    d230:	0c100000 	ldceq	0, cr0, [r0], {-0}
    d234:	0000284b 	andeq	r2, r0, fp, asr #16
    d238:	01788106 	cmneq	r8, r6, lsl #2
    d23c:	0c140000 	ldceq	0, cr0, [r4], {-0}
    d240:	00002807 	andeq	r2, r0, r7, lsl #16
    d244:	01838206 	orreq	r8, r3, r6, lsl #4
    d248:	0c180000 	ldceq	0, cr0, [r8], {-0}
    d24c:	00002942 	andeq	r2, r0, r2, asr #18
    d250:	018e8306 	orreq	r8, lr, r6, lsl #6
    d254:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    d258:	00002ad1 	ldrdeq	r2, [r0], -r1
    d25c:	01be8406 			; <UNDEFINED> instruction: 0x01be8406
    d260:	0c200000 	stceq	0, cr0, [r0], #-0
    d264:	000028c9 	andeq	r2, r0, r9, asr #17
    d268:	01e98506 	mvneq	r8, r6, lsl #10
    d26c:	0c240000 	stceq	0, cr0, [r4], #-0
    d270:	00002921 	andeq	r2, r0, r1, lsr #18
    d274:	01f48606 	mvnseq	r8, r6, lsl #12
    d278:	0c280000 	stceq	0, cr0, [r8], #-0
    d27c:	00002b86 	andeq	r2, r0, r6, lsl #23
    d280:	01ff8706 	mvnseq	r8, r6, lsl #14
    d284:	0c2c0000 	stceq	0, cr0, [ip], #-0
    d288:	00002866 	andeq	r2, r0, r6, ror #16
    d28c:	02158806 	andseq	r8, r5, #393216	; 0x60000
    d290:	0c300000 	ldceq	0, cr0, [r0], #-0
    d294:	00002b74 	andeq	r2, r0, r4, ror fp
    d298:	02318906 	eorseq	r8, r1, #98304	; 0x18000
    d29c:	0c340000 	ldceq	0, cr0, [r4], #-0
    d2a0:	00002745 	andeq	r2, r0, r5, asr #14
    d2a4:	020a8a06 	andeq	r8, sl, #24576	; 0x6000
    d2a8:	0c380000 	ldceq	0, cr0, [r8], #-0
    d2ac:	00002988 	andeq	r2, r0, r8, lsl #19
    d2b0:	023c8b06 	eorseq	r8, ip, #6144	; 0x1800
    d2b4:	0c3c0000 	ldceq	0, cr0, [ip], #-0
    d2b8:	00002b27 	andeq	r2, r0, r7, lsr #22
    d2bc:	02478c06 	subeq	r8, r7, #1536	; 0x600
    d2c0:	0c400000 	mareq	acc0, r0, r0
    d2c4:	000028ab 	andeq	r2, r0, fp, lsr #17
    d2c8:	02528d06 	subseq	r8, r2, #384	; 0x180
    d2cc:	0c440000 	mareq	acc0, r0, r4
    d2d0:	000026f5 	strdeq	r2, [r0], -r5
    d2d4:	025d8e06 	subseq	r8, sp, #6, 28	; 0x60
    d2d8:	00480000 	subeq	r0, r8, r0
    d2dc:	002a5703 	eoreq	r5, sl, r3, lsl #14
    d2e0:	688f0600 	stmvs	pc, {r9, sl}	; <UNPREDICTABLE>
    d2e4:	0b000002 	bleq	d2f4 <__exidx_end+0x85a0>
    d2e8:	a5540114 	ldrbge	r0, [r4, #-276]	; 0xfffffeec
    d2ec:	0c000003 	stceq	0, cr0, [r0], {3}
    d2f0:	000027ab 	andeq	r2, r0, fp, lsr #15
    d2f4:	00ce5501 	sbceq	r5, lr, r1, lsl #10
    d2f8:	0c000000 	stceq	0, cr0, [r0], {-0}
    d2fc:	00002a1d 	andeq	r2, r0, sp, lsl sl
    d300:	00ce5601 	sbceq	r5, lr, r1, lsl #12
    d304:	0c040000 	stceq	0, cr0, [r4], {-0}
    d308:	00002715 	andeq	r2, r0, r5, lsl r7
    d30c:	00ce5701 	sbceq	r5, lr, r1, lsl #14
    d310:	0c080000 	stceq	0, cr0, [r8], {-0}
    d314:	000027de 	ldrdeq	r2, [r0], -lr
    d318:	00ce5801 	sbceq	r5, lr, r1, lsl #16
    d31c:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    d320:	00002758 	andeq	r2, r0, r8, asr r7
    d324:	00c35901 	sbceq	r5, r3, r1, lsl #18
    d328:	00100000 	andseq	r0, r0, r0
    d32c:	002a4803 	eoreq	r4, sl, r3, lsl #16
    d330:	605a0100 	subsvs	r0, sl, r0, lsl #2
    d334:	0d000003 	stceq	0, cr0, [r0, #-12]
    d338:	0000269c 	muleq	r0, ip, r6
    d33c:	d301f902 	movwle	pc, #6402	; 0x1902	; <UNPREDICTABLE>
    d340:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    d344:	00002a76 	andeq	r2, r0, r6, ror sl
    d348:	00ce6501 	sbceq	r6, lr, r1, lsl #10
    d34c:	ed0e0000 	stc	0, cr0, [lr, #-0]
    d350:	01000026 	tsteq	r0, r6, lsr #32
    d354:	0000ce65 	andeq	ip, r0, r5, ror #28
    d358:	d50f0000 	strle	r0, [pc, #-0]	; d360 <__exidx_end+0x860c>
    d35c:	02000026 	andeq	r0, r0, #38	; 0x26
    d360:	00ce0110 	sbceq	r0, lr, r0, lsl r1
    d364:	fb010000 	blx	4d36e <__ccfg+0x2d3c6>
    d368:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    d36c:	00002a76 	andeq	r2, r0, r6, ror sl
    d370:	00cea001 	sbceq	sl, lr, r1
    d374:	36100000 	ldrcc	r0, [r0], -r0
    d378:	0100002b 	tsteq	r0, fp, lsr #32
    d37c:	0000cea2 	andeq	ip, r0, r2, lsr #29
    d380:	b0110000 	andslt	r0, r1, r0
    d384:	d4000003 	strle	r0, [r0], #-3
    d388:	5c000030 	stcpl	0, cr0, [r0], {48}	; 0x30
    d38c:	01000000 	mrseq	r0, (UNDEF: 0)
    d390:	0004b69c 	muleq	r4, ip, r6
    d394:	03bc1200 			; <UNDEFINED> instruction: 0x03bc1200
    d398:	34610000 	strbtcc	r0, [r1], #-0
    d39c:	c7120000 	ldrgt	r0, [r2, -r0]
    d3a0:	8d000003 	stchi	0, cr0, [r0, #-12]
    d3a4:	13000034 	movwne	r0, #52	; 0x34
    d3a8:	0000310e 	andeq	r3, r0, lr, lsl #2
    d3ac:	00000014 	andeq	r0, r0, r4, lsl r0
    d3b0:	00000461 	andeq	r0, r0, r1, ror #8
    d3b4:	0003bc12 	andeq	fp, r3, r2, lsl ip
    d3b8:	0034b900 	eorseq	fp, r4, r0, lsl #18
    d3bc:	03c71200 	biceq	r1, r7, #0, 4
    d3c0:	34cc0000 	strbcc	r0, [ip], #0
    d3c4:	22140000 	andscs	r0, r4, #0
    d3c8:	02000031 	andeq	r0, r0, #49	; 0x31
    d3cc:	01150074 	tsteq	r5, r4, ror r0
    d3d0:	15320153 	ldrne	r0, [r2, #-339]!	; 0xfffffead
    d3d4:	3c015201 	sfmcc	f5, 4, [r1], {1}
    d3d8:	01510115 	cmpeq	r1, r5, lsl r1
    d3dc:	50011530 	andpl	r1, r1, r0, lsr r5
    d3e0:	a0000c05 	andge	r0, r0, r5, lsl #24
    d3e4:	0000400c 	andeq	r4, r0, ip
    d3e8:	0030f216 	eorseq	pc, r0, r6, lsl r2	; <UNPREDICTABLE>
    d3ec:	00760200 	rsbseq	r0, r6, r0, lsl #4
    d3f0:	0000048d 	andeq	r0, r0, sp, lsl #9
    d3f4:	01530115 	cmpeq	r3, r5, lsl r1
    d3f8:	52011530 	andpl	r1, r1, #48, 10	; 0xc000000
    d3fc:	01153101 	tsteq	r5, r1, lsl #2
    d400:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    d404:	0c055001 	stceq	0, cr5, [r5], {1}
    d408:	400ca000 	andmi	sl, ip, r0
    d40c:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    d410:	00007402 	andeq	r7, r0, r2, lsl #8
    d414:	00310a14 	eorseq	r0, r1, r4, lsl sl
    d418:	00760200 	rsbseq	r0, r6, r0, lsl #4
    d41c:	01530115 	cmpeq	r3, r5, lsl r1
    d420:	52011531 	andpl	r1, r1, #205520896	; 0xc400000
    d424:	01153201 	tsteq	r5, r1, lsl #4
    d428:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    d42c:	0c055001 	stceq	0, cr5, [r5], {1}
    d430:	400ca000 	andmi	sl, ip, r0
    d434:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    d438:	00007402 	andeq	r7, r0, r2, lsl #8
    d43c:	03d31100 	bicseq	r1, r3, #0, 2
    d440:	31300000 	teqcc	r0, r0
    d444:	002c0000 	eoreq	r0, ip, r0
    d448:	9c010000 	stcls	0, cr0, [r1], {-0}
    d44c:	0000050d 	andeq	r0, r0, sp, lsl #10
    d450:	0003e412 	andeq	lr, r3, r2, lsl r4
    d454:	0034ed00 	eorseq	lr, r4, r0, lsl #26
    d458:	03ef1700 	mvneq	r1, #0, 14
    d45c:	50010000 	andpl	r0, r1, r0
    d460:	00101018 	andseq	r1, r0, r8, lsl r0
    d464:	0004f400 	andeq	pc, r4, r0, lsl #8
    d468:	03e41900 	mvneq	r1, #0, 18
    d46c:	1a040000 	bne	10d474 <__ccfg+0xed4cc>
    d470:	00001010 	andeq	r1, r0, r0, lsl r0
    d474:	0003ef1b 	andeq	lr, r3, fp, lsl pc
    d478:	14000000 	strne	r0, [r0], #-0
    d47c:	00003150 	andeq	r3, r0, r0, asr r1
    d480:	15007402 	strne	r7, [r0, #-1026]	; 0xfffffbfe
    d484:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    d488:	50011534 	andpl	r1, r1, r4, lsr r5
    d48c:	a0000c05 	andge	r0, r0, r5, lsl #24
    d490:	0000400c 	andeq	r4, r0, ip
    d494:	002c0c1c 	eoreq	r0, ip, ip, lsl ip
    d498:	01840200 	orreq	r0, r4, r0, lsl #4
    d49c:	000000ce 	andeq	r0, r0, lr, asr #1
    d4a0:	00000000 	andeq	r0, r0, r0
    d4a4:	00000090 	muleq	r0, r0, r0
    d4a8:	05769c01 	ldrbeq	r9, [r6, #-3073]!	; 0xfffff3ff
    d4ac:	621d0000 	andsvs	r0, sp, #0
    d4b0:	0100002a 	tsteq	r0, sl, lsr #32
    d4b4:	0000cec2 	andeq	ip, r0, r2, asr #29
    d4b8:	00350e00 	eorseq	r0, r5, r0, lsl #28
    d4bc:	29d51e00 	ldmibcs	r5, {r9, sl, fp, ip}^
    d4c0:	c4010000 	strgt	r0, [r1], #-0
    d4c4:	000000ce 	andeq	r0, r0, lr, asr #1
    d4c8:	0000353a 	andeq	r3, r0, sl, lsr r5
    d4cc:	0029ee1e 	eoreq	lr, r9, lr, lsl lr
    d4d0:	c3c50100 	bicgt	r0, r5, #0, 2
    d4d4:	4d000000 	stcmi	0, cr0, [r0, #-0]
    d4d8:	1e000035 	mcrne	0, 0, r0, cr0, cr5, {1}
    d4dc:	00002764 	andeq	r2, r0, r4, ror #14
    d4e0:	00cec601 	sbceq	ip, lr, r1, lsl #12
    d4e4:	35740000 	ldrbcc	r0, [r4, #-0]!
    d4e8:	001f0000 	andseq	r0, pc, r0
    d4ec:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    d4f0:	1f000008 	svcne	0x00000008
    d4f4:	00000000 	andeq	r0, r0, r0
    d4f8:	000008aa 	andeq	r0, r0, sl, lsr #17
    d4fc:	28132000 	ldmdacs	r3, {sp}
    d500:	91020000 	mrsls	r0, (UNDEF: 2)
    d504:	00315c01 	eorseq	r5, r1, r1, lsl #24
    d508:	00001800 	andeq	r1, r0, r0, lsl #16
    d50c:	ae9c0100 	fmlgee	f0, f4, f0
    d510:	21000005 	tstcs	r0, r5
    d514:	00003166 	andeq	r3, r0, r6, ror #2
    d518:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
    d51c:	000005a4 	andeq	r0, r0, r4, lsr #11
    d520:	01510115 	cmpeq	r1, r5, lsl r1
    d524:	50011531 	andpl	r1, r1, r1, lsr r5
    d528:	1f003301 	svcne	0x00003301
    d52c:	0000316a 	andeq	r3, r0, sl, ror #2
    d530:	0000089e 	muleq	r0, lr, r8
    d534:	2a2c2200 	bcs	b15d3c <__ccfg+0xaf5d94>
    d538:	22020000 	andcs	r0, r2, #0
    d53c:	0005bb01 	andeq	fp, r5, r1, lsl #22
    d540:	01020300 	mrseq	r0, LR_svc
    d544:	000c6f02 	andeq	r6, ip, r2, lsl #30
    d548:	2a812300 	bcs	fe056150 <_estack+0xde051150>
    d54c:	40020000 	andmi	r0, r2, r0
    d550:	231c0301 	tstcs	ip, #67108864	; 0x4000000
    d554:	02000027 	andeq	r0, r0, #39	; 0x27
    d558:	05bb01a1 	ldreq	r0, [fp, #417]!	; 0x1a1
    d55c:	31740000 	cmncc	r4, r0
    d560:	00600000 	rsbeq	r0, r0, r0
    d564:	9c010000 	stcls	0, cr0, [r1], {-0}
    d568:	00000677 	andeq	r0, r0, r7, ror r6
    d56c:	002a0d24 	eoreq	r0, sl, r4, lsr #26
    d570:	01020100 	mrseq	r0, (UNDEF: 18)
    d574:	000000ce 	andeq	r0, r0, lr, asr #1
    d578:	000035c8 	andeq	r3, r0, r8, asr #11
    d57c:	002ada24 	eoreq	sp, sl, r4, lsr #20
    d580:	01030100 	mrseq	r0, (UNDEF: 19)
    d584:	000000ce 	andeq	r0, r0, lr, asr #1
    d588:	000035db 	ldrdeq	r3, [r0], -fp
    d58c:	0005ae25 	andeq	sl, r5, r5, lsr #28
    d590:	00318000 	eorseq	r8, r1, r0
    d594:	00001000 	andeq	r1, r0, r0
    d598:	01090100 	mrseq	r0, (UNDEF: 25)
    d59c:	0000063c 	andeq	r0, r0, ip, lsr r6
    d5a0:	00319014 	eorseq	r9, r1, r4, lsl r0
    d5a4:	00740200 	rsbseq	r0, r4, r0, lsl #4
    d5a8:	01530115 	cmpeq	r3, r5, lsl r1
    d5ac:	52011530 	andpl	r1, r1, #48, 10	; 0xc000000
    d5b0:	01153101 	tsteq	r5, r1, lsl #2
    d5b4:	34080251 	strcc	r0, [r8], #-593	; 0xfffffdaf
    d5b8:	05500115 	ldrbeq	r0, [r0, #-277]	; 0xfffffeeb
    d5bc:	0ca0000c 	stceq	0, cr0, [r0], #48	; 0x30
    d5c0:	25000040 	strcs	r0, [r0, #-64]	; 0xffffffc0
    d5c4:	000005c2 	andeq	r0, r0, r2, asr #11
    d5c8:	00003192 	muleq	r0, r2, r1
    d5cc:	00000008 	andeq	r0, r0, r8
    d5d0:	5a010a01 	bpl	4fddc <__ccfg+0x2fe34>
    d5d4:	1f000006 	svcne	0x00000006
    d5d8:	0000319a 	muleq	r0, sl, r1
    d5dc:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    d5e0:	317c2100 	cmncc	ip, r0, lsl #2
    d5e4:	03d30000 	bicseq	r0, r3, #0
    d5e8:	066d0000 	strbteq	r0, [sp], -r0
    d5ec:	01150000 	tsteq	r5, r0
    d5f0:	00310150 	eorseq	r0, r1, r0, asr r1
    d5f4:	00319e1f 	eorseq	r9, r1, pc, lsl lr
    d5f8:	00089e00 	andeq	r9, r8, r0, lsl #28
    d5fc:	78200000 	stmdavc	r0!, {}	; <UNPREDICTABLE>
    d600:	02000028 	andeq	r0, r0, #40	; 0x28
    d604:	31d401ae 	bicscc	r0, r4, lr, lsr #3
    d608:	00340000 	eorseq	r0, r4, r0
    d60c:	9c010000 	stcls	0, cr0, [r1], {-0}
    d610:	000006e9 	andeq	r0, r0, r9, ror #13
    d614:	0005c225 	andeq	ip, r5, r5, lsr #4
    d618:	0031e600 	eorseq	lr, r1, r0, lsl #12
    d61c:	00000800 	andeq	r0, r0, r0, lsl #16
    d620:	012f0100 			; <UNDEFINED> instruction: 0x012f0100
    d624:	000006ab 	andeq	r0, r0, fp, lsr #13
    d628:	0031ee1f 	eorseq	lr, r1, pc, lsl lr
    d62c:	0008b500 	andeq	fp, r8, r0, lsl #10
    d630:	de210000 	cdple	0, 2, cr0, cr1, cr0, {0}
    d634:	b0000031 	andlt	r0, r0, r1, lsr r0
    d638:	c3000003 	movwgt	r0, #3
    d63c:	15000006 	strne	r0, [r0, #-6]
    d640:	30015101 	andcc	r5, r1, r1, lsl #2
    d644:	01500115 	cmpeq	r0, r5, lsl r1
    d648:	e4210033 	strt	r0, [r1], #-51	; 0xffffffcd
    d64c:	d3000031 	movwle	r0, #49	; 0x31
    d650:	d6000003 	strle	r0, [r0], -r3
    d654:	15000006 	strne	r0, [r0, #-6]
    d658:	31015001 	tstcc	r1, r1
    d65c:	31f21f00 	mvnscc	r1, r0, lsl #30
    d660:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    d664:	fa1f0000 	blx	7cd66c <__ccfg+0x7ad6c4>
    d668:	aa000031 	bge	d734 <__exidx_end+0x89e0>
    d66c:	00000008 	andeq	r0, r0, r8
    d670:	0028d21c 	eoreq	sp, r8, ip, lsl r2
    d674:	01f20200 	mvnseq	r0, r0, lsl #4
    d678:	000000c3 	andeq	r0, r0, r3, asr #1
    d67c:	00000000 	andeq	r0, r0, r0
    d680:	00000038 	andeq	r0, r0, r8, lsr r0
    d684:	079a9c01 	ldreq	r9, [sl, r1, lsl #24]
    d688:	a0260000 	eorge	r0, r6, r0
    d68c:	0100002a 	tsteq	r0, sl, lsr #32
    d690:	00c3013c 	sbceq	r0, r3, ip, lsr r1
    d694:	35ee0000 	strbcc	r0, [lr, #0]!
    d698:	03270000 			; <UNDEFINED> instruction: 0x03270000
    d69c:	0100002a 	tsteq	r0, sl, lsr #32
    d6a0:	00ce013f 	sbceq	r0, lr, pc, lsr r1
    d6a4:	51010000 	mrspl	r0, (UNDEF: 1)
    d6a8:	002c6627 	eoreq	r6, ip, r7, lsr #12
    d6ac:	01410100 	mrseq	r0, (UNDEF: 81)
    d6b0:	000000c3 	andeq	r0, r0, r3, asr #1
    d6b4:	40007105 	andmi	r7, r0, r5, lsl #2
    d6b8:	77279f26 	strvc	r9, [r7, -r6, lsr #30]!
    d6bc:	01000027 	tsteq	r0, r7, lsr #32
    d6c0:	00c30143 	sbceq	r0, r3, r3, asr #2
    d6c4:	71070000 	mrsvc	r0, (UNDEF: 7)
    d6c8:	48244000 	stmdami	r4!, {lr}
    d6cc:	7f279f26 	svcvc	0x00279f26
    d6d0:	01000027 	tsteq	r0, r7, lsr #32
    d6d4:	00c30145 	sbceq	r0, r3, r5, asr #2
    d6d8:	71070000 	mrsvc	r0, (UNDEF: 7)
    d6dc:	48244800 	stmdami	r4!, {fp, lr}
    d6e0:	87249f26 	strhi	r9, [r4, -r6, lsr #30]!
    d6e4:	01000027 	tsteq	r0, r7, lsr #32
    d6e8:	00c30147 	sbceq	r0, r3, r7, asr #2
    d6ec:	361c0000 	ldrcc	r0, [ip], -r0
    d6f0:	f0240000 			; <UNDEFINED> instruction: 0xf0240000
    d6f4:	01000027 	tsteq	r0, r7, lsr #32
    d6f8:	00c30156 	sbceq	r0, r3, r6, asr r1
    d6fc:	36350000 	ldrtcc	r0, [r5], -r0
    d700:	a8240000 	stmdage	r4!, {}	; <UNPREDICTABLE>
    d704:	01000029 	tsteq	r0, r9, lsr #32
    d708:	00c30157 	sbceq	r0, r3, r7, asr r1
    d70c:	36580000 	ldrbcc	r0, [r8], -r0
    d710:	64280000 	strtvs	r0, [r8], #-0
    d714:	01580100 	cmpeq	r8, r0, lsl #2
    d718:	000000c3 	andeq	r0, r0, r3, asr #1
    d71c:	00003681 	andeq	r3, r0, r1, lsl #13
    d720:	2aeb1c00 	bcs	ffad4728 <_estack+0xdfacf728>
    d724:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    d728:	0000ad02 	andeq	sl, r0, r2, lsl #26
    d72c:	00000000 	andeq	r0, r0, r0
    d730:	00000c00 	andeq	r0, r0, r0, lsl #24
    d734:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
    d738:	26000007 	strcs	r0, [r0], -r7
    d73c:	000029c1 	andeq	r2, r0, r1, asr #19
    d740:	c3016301 	movwgt	r6, #4865	; 0x1301
    d744:	fb000000 	blx	d74e <__exidx_end+0x89fa>
    d748:	24000036 	strcs	r0, [r0], #-54	; 0xffffffca
    d74c:	00002b9a 	muleq	r0, sl, fp
    d750:	c3018501 	movwgt	r8, #5377	; 0x1501
    d754:	1c000000 	stcne	0, cr0, [r0], {-0}
    d758:	00000037 	andeq	r0, r0, r7, lsr r0
    d75c:	0028fc1c 	eoreq	pc, r8, ip, lsl ip	; <UNPREDICTABLE>
    d760:	01c20200 	biceq	r0, r2, r0, lsl #4
    d764:	000000ce 	andeq	r0, r0, lr, asr #1
    d768:	00000000 	andeq	r0, r0, r0
    d76c:	00000034 	andeq	r0, r0, r4, lsr r0
    d770:	08429c01 	stmdaeq	r2, {r0, sl, fp, ip, pc}^
    d774:	ed240000 	stc	0, cr0, [r4, #-0]
    d778:	0100002b 	tsteq	r0, fp, lsr #32
    d77c:	00ce0192 	smulleq	r0, lr, r2, r1
    d780:	375c0000 	ldrbcc	r0, [ip, -r0]
    d784:	94240000 	strtls	r0, [r4], #-0
    d788:	01000016 	tsteq	r0, r6, lsl r0
    d78c:	00ce0193 	smulleq	r0, lr, r3, r1
    d790:	377e0000 	ldrbcc	r0, [lr, -r0]!
    d794:	bf240000 	svclt	0x00240000
    d798:	01000028 	tsteq	r0, r8, lsr #32
    d79c:	00ce0194 	smulleq	r0, lr, r4, r1
    d7a0:	37910000 	ldrcc	r0, [r1, r0]
    d7a4:	5d240000 	stcpl	0, cr0, [r4, #-0]
    d7a8:	01000028 	tsteq	r0, r8, lsr #32
    d7ac:	00ce0195 	smulleq	r0, lr, r5, r1
    d7b0:	37b40000 	ldrcc	r0, [r4, r0]!
    d7b4:	001f0000 	andseq	r0, pc, r0
    d7b8:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    d7bc:	1f000008 	svcne	0x00000008
    d7c0:	00000000 	andeq	r0, r0, r0
    d7c4:	0000089e 	muleq	r0, lr, r8
    d7c8:	2bb91c00 	blcs	fee547d0 <_estack+0xdee4f7d0>
    d7cc:	d3020000 	movwle	r0, #8192	; 0x2000
    d7d0:	0000ce01 	andeq	ip, r0, r1, lsl #28
    d7d4:	00000000 	andeq	r0, r0, r0
    d7d8:	00001c00 	andeq	r1, r0, r0, lsl #24
    d7dc:	8d9c0100 	ldfhis	f0, [ip]
    d7e0:	24000008 	strcs	r0, [r0], #-8
    d7e4:	00002a3d 	andeq	r2, r0, sp, lsr sl
    d7e8:	ce01b701 	cdpgt	7, 0, cr11, cr1, cr1, {0}
    d7ec:	d0000000 	andle	r0, r0, r0
    d7f0:	24000037 	strcs	r0, [r0], #-55	; 0xffffffc9
    d7f4:	00002bab 	andeq	r2, r0, fp, lsr #23
    d7f8:	ce01b801 	cdpgt	8, 0, cr11, cr1, cr1, {0}
    d7fc:	e3000000 	movw	r0, #0
    d800:	24000037 	strcs	r0, [r0], #-55	; 0xffffffc9
    d804:	000027fa 	strdeq	r2, [r0], -sl
    d808:	ce01b901 	vmlagt.f16	s22, s2, s2	; <UNPREDICTABLE>
    d80c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
    d810:	00000037 	andeq	r0, r0, r7, lsr r0
    d814:	0029b429 	eoreq	fp, r9, r9, lsr #8
    d818:	a55c0100 	ldrbge	r0, [ip, #-256]	; 0xffffff00
    d81c:	05000003 	streq	r0, [r0, #-3]
    d820:	0001e003 	andeq	lr, r1, r3
    d824:	25882a20 	strcs	r2, [r8, #2592]	; 0xa20
    d828:	45070000 	strmi	r0, [r7, #-0]
    d82c:	0000ce03 	andeq	ip, r0, r3, lsl #28
    d830:	24ef2b00 	strbtcs	r2, [pc], #2816	; d838 <__exidx_end+0x8ae4>
    d834:	aa080000 	bge	20d83c <__ccfg+0x1ed894>
    d838:	000000c3 	andeq	r0, r0, r3, asr #1
    d83c:	00238c2c 	eoreq	r8, r3, ip, lsr #24
    d840:	08990600 	ldmeq	r9, {r9, sl}
    d844:	000000d9 	ldrdeq	r0, [r0], -r9
    d848:	0ab40000 	beq	fed0d850 <_estack+0xded08850>
    d84c:	00040000 	andeq	r0, r4, r0
    d850:	000032b3 			; <UNDEFINED> instruction: 0x000032b3
    d854:	23be0104 			; <UNDEFINED> instruction: 0x23be0104
    d858:	8a010000 	bhi	4d860 <__ccfg+0x2d8b8>
    d85c:	8500002d 	strhi	r0, [r0, #-45]	; 0xffffffd3
    d860:	80000024 	andhi	r0, r0, r4, lsr #32
    d864:	00000010 	andeq	r0, r0, r0, lsl r0
    d868:	b2000000 	andlt	r0, r0, #0
    d86c:	02000071 	andeq	r0, r0, #113	; 0x71
    d870:	03e50601 	mvneq	r0, #1048576	; 0x100000
    d874:	99030000 	stmdbls	r3, {}	; <UNPREDICTABLE>
    d878:	03000023 	movweq	r0, #35	; 0x23
    d87c:	0000371d 	andeq	r3, r0, sp, lsl r7
    d880:	08010200 	stmdaeq	r1, {r9}
    d884:	000003e3 	andeq	r0, r0, r3, ror #7
    d888:	002b6a03 	eoreq	r6, fp, r3, lsl #20
    d88c:	49290300 	stmdbmi	r9!, {r8, r9}
    d890:	02000000 	andeq	r0, r0, #0
    d894:	04460502 	strbeq	r0, [r6], #-1282	; 0xfffffafe
    d898:	8f030000 	svchi	0x00030000
    d89c:	03000027 	movweq	r0, #39	; 0x27
    d8a0:	00005b2b 	andeq	r5, r0, fp, lsr #22
    d8a4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    d8a8:	0000028a 	andeq	r0, r0, sl, lsl #5
    d8ac:	00251e03 	eoreq	r1, r5, r3, lsl #28
    d8b0:	6d3f0300 	ldcvs	3, cr0, [pc, #-0]	; d8b8 <__exidx_end+0x8b64>
    d8b4:	02000000 	andeq	r0, r0, #0
    d8b8:	00b40504 	adcseq	r0, r4, r4, lsl #10
    d8bc:	31030000 	mrscc	r0, (UNDEF: 3)
    d8c0:	03000023 	movweq	r0, #35	; 0x23
    d8c4:	00007f41 	andeq	r7, r0, r1, asr #30
    d8c8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    d8cc:	0000007e 	andeq	r0, r0, lr, ror r0
    d8d0:	af050802 	svcge	0x00050802
    d8d4:	02000000 	andeq	r0, r0, #0
    d8d8:	00790708 	rsbseq	r0, r9, r8, lsl #14
    d8dc:	04040000 	streq	r0, [r4], #-0
    d8e0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    d8e4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    d8e8:	00000083 	andeq	r0, r0, r3, lsl #1
    d8ec:	00239b03 	eoreq	r9, r3, r3, lsl #22
    d8f0:	2c140400 	cfldrscs	mvf0, [r4], {-0}
    d8f4:	03000000 	movweq	r0, #0
    d8f8:	00002b6c 	andeq	r2, r0, ip, ror #22
    d8fc:	003e1904 	eorseq	r1, lr, r4, lsl #18
    d900:	91030000 	mrsls	r0, (UNDEF: 3)
    d904:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    d908:	0000501a 	andeq	r5, r0, sl, lsl r0
    d90c:	25200300 	strcs	r0, [r0, #-768]!	; 0xfffffd00
    d910:	1f040000 	svcne	0x00040000
    d914:	00000062 	andeq	r0, r0, r2, rrx
    d918:	00233303 	eoreq	r3, r3, r3, lsl #6
    d91c:	74200400 	strtvc	r0, [r0], #-1024	; 0xfffffc00
    d920:	03000000 	movweq	r0, #0
    d924:	00002c93 	muleq	r0, r3, ip
    d928:	009bd405 	addseq	sp, fp, r5, lsl #8
    d92c:	04020000 	streq	r0, [r2], #-0
    d930:	00263207 	eoreq	r3, r6, r7, lsl #4
    d934:	02040500 	andeq	r0, r4, #0, 10
    d938:	03ec0801 	mvneq	r0, #65536	; 0x10000
    d93c:	22030000 	andcs	r0, r3, #0
    d940:	0600001d 			; <UNDEFINED> instruction: 0x0600001d
    d944:	0000ce3b 	andeq	ip, r0, fp, lsr lr
    d948:	a2040600 	andge	r0, r4, #0, 12
    d94c:	03000000 	movweq	r0, #0
    d950:	00001a88 	andeq	r1, r0, r8, lsl #21
    d954:	01103c07 	tsteq	r0, r7, lsl #24
    d958:	c7070000 	strgt	r0, [r7, -r0]
    d95c:	1000001d 	andne	r0, r0, sp, lsl r0
    d960:	01656f07 	cmneq	r5, r7, lsl #30
    d964:	01080000 	mrseq	r0, (UNDEF: 8)
    d968:	07000015 	smladeq	r0, r5, r0, r0
    d96c:	0000b870 	andeq	fp, r0, r0, ror r8
    d970:	76080000 	strvc	r0, [r8], -r0
    d974:	07000019 	smladeq	r0, r9, r0, r0
    d978:	0000b871 	andeq	fp, r0, r1, ror r8
    d97c:	5c080200 	sfmpl	f0, 4, [r8], {-0}
    d980:	0700001a 	smladeq	r0, sl, r0, r0
    d984:	00026d74 	andeq	r6, r2, r4, ror sp
    d988:	94080400 	strls	r0, [r8], #-1024	; 0xfffffc00
    d98c:	07000016 	smladeq	r0, r6, r0, r0
    d990:	0000f475 	andeq	pc, r0, r5, ror r4	; <UNPREDICTABLE>
    d994:	a1080800 	tstge	r8, r0, lsl #16
    d998:	0700001a 	smladeq	r0, sl, r0, r0
    d99c:	0002017d 	andeq	r0, r2, sp, ror r1
    d9a0:	82080c00 	andhi	r0, r8, #0, 24
    d9a4:	07000019 	smladeq	r0, r9, r0, r0
    d9a8:	00024681 	andeq	r4, r2, r1, lsl #13
    d9ac:	03000d00 	movweq	r0, #3328	; 0xd00
    d9b0:	00002dbb 			; <UNDEFINED> instruction: 0x00002dbb
    d9b4:	01703e07 	cmneq	r0, r7, lsl #28
    d9b8:	a5070000 	strge	r0, [r7, #-0]
    d9bc:	1800002d 	stmdane	r0, {r0, r2, r3, r5}
    d9c0:	0201a507 	andeq	sl, r1, #29360128	; 0x1c00000
    d9c4:	01080000 	mrseq	r0, (UNDEF: 8)
    d9c8:	07000015 	smladeq	r0, r5, r0, r0
    d9cc:	0000b8a6 	andeq	fp, r0, r6, lsr #17
    d9d0:	76080000 	strvc	r0, [r8], -r0
    d9d4:	07000019 	smladeq	r0, r9, r0, r0
    d9d8:	0000b8a7 	andeq	fp, r0, r7, lsr #17
    d9dc:	5c080200 	sfmpl	f0, 4, [r8], {-0}
    d9e0:	0700001a 	smladeq	r0, sl, r0, r0
    d9e4:	00026daa 	andeq	r6, r2, sl, lsr #27
    d9e8:	94080400 	strls	r0, [r8], #-1024	; 0xfffffc00
    d9ec:	07000016 	smladeq	r0, r6, r0, r0
    d9f0:	0000f4ab 	andeq	pc, r0, fp, lsr #9
    d9f4:	a1080800 	tstge	r8, r0, lsl #16
    d9f8:	0700001a 	smladeq	r0, sl, r0, r0
    d9fc:	000273b3 			; <UNDEFINED> instruction: 0x000273b3
    da00:	82080c00 	andhi	r0, r8, #0, 24
    da04:	07000019 	smladeq	r0, r9, r0, r0
    da08:	0002b8b7 			; <UNDEFINED> instruction: 0x0002b8b7
    da0c:	1a080d00 	bne	210e14 <__ccfg+0x1f0e6c>
    da10:	07000003 	streq	r0, [r0, -r3]
    da14:	0000a2b8 			; <UNDEFINED> instruction: 0x0000a2b8
    da18:	d3080e00 	movwle	r0, #36352	; 0x8e00
    da1c:	0700001b 	smladeq	r0, fp, r0, r0
    da20:	0000a2bf 			; <UNDEFINED> instruction: 0x0000a2bf
    da24:	b2080f00 	andlt	r0, r8, #0, 30
    da28:	0700000a 	streq	r0, [r0, -sl]
    da2c:	0002dfd4 	ldrdeq	sp, [r2], -r4
    da30:	6f081000 	svcvs	0x00081000
    da34:	07000017 	smladeq	r0, r7, r0, r0
    da38:	0000b8d5 	ldrdeq	fp, [r0], -r5
    da3c:	15081200 	strne	r1, [r8, #-512]	; 0xfffffe00
    da40:	0700001d 	smladeq	r0, sp, r0, r0
    da44:	000324d6 	ldrdeq	r2, [r3], -r6
    da48:	09001400 	stmdbeq	r0, {sl, ip}
    da4c:	46760701 	ldrbtmi	r0, [r6], -r1, lsl #14
    da50:	0a000002 	beq	da60 <__exidx_end+0x8d0c>
    da54:	000020ed 	andeq	r2, r0, sp, ror #1
    da58:	00a27707 	adceq	r7, r2, r7, lsl #14
    da5c:	04010000 	streq	r0, [r1], #-0
    da60:	f10a0004 	cpsie	,#4
    da64:	07000017 	smladeq	r0, r7, r0, r0
    da68:	0000a278 	andeq	sl, r0, r8, ror r2
    da6c:	03010100 	movweq	r0, #4352	; 0x1100
    da70:	192d0a00 	pushne	{r9, fp}
    da74:	7a070000 	bvc	1cda7c <__ccfg+0x1adad4>
    da78:	000000a2 	andeq	r0, r0, r2, lsr #1
    da7c:	00010201 	andeq	r0, r1, r1, lsl #4
    da80:	0015910a 	andseq	r9, r5, sl, lsl #2
    da84:	a27b0700 	rsbsge	r0, fp, #0, 14
    da88:	01000000 	mrseq	r0, (UNDEF: 0)
    da8c:	00000001 	andeq	r0, r0, r1
    da90:	7e070109 	adfvcs	f0, f7, #1.0
    da94:	0000026d 	andeq	r0, r0, sp, ror #4
    da98:	001e840a 	andseq	r8, lr, sl, lsl #8
    da9c:	a27f0700 	rsbsge	r0, pc, #0, 14
    daa0:	01000000 	mrseq	r0, (UNDEF: 0)
    daa4:	0a000404 	beq	eabc <__exidx_end+0x9d68>
    daa8:	0000203d 	andeq	r2, r0, sp, lsr r0
    daac:	00a28007 	adceq	r8, r2, r7
    dab0:	04010000 	streq	r0, [r1], #-0
    dab4:	06000000 	streq	r0, [r0], -r0
    dab8:	00010504 	andeq	r0, r1, r4, lsl #10
    dabc:	07010900 	streq	r0, [r1, -r0, lsl #18]
    dac0:	0002b8ac 	andeq	fp, r2, ip, lsr #17
    dac4:	20ed0a00 	rsccs	r0, sp, r0, lsl #20
    dac8:	ad070000 	stcge	0, cr0, [r7, #-0]
    dacc:	000000a2 	andeq	r0, r0, r2, lsr #1
    dad0:	00040401 	andeq	r0, r4, r1, lsl #8
    dad4:	0017f10a 	andseq	pc, r7, sl, lsl #2
    dad8:	a2ae0700 	adcge	r0, lr, #0, 14
    dadc:	01000000 	mrseq	r0, (UNDEF: 0)
    dae0:	0a000301 	beq	e6ec <__exidx_end+0x9998>
    dae4:	0000192d 	andeq	r1, r0, sp, lsr #18
    dae8:	00a2b007 	adceq	fp, r2, r7
    daec:	02010000 	andeq	r0, r1, #0
    daf0:	910a0001 	tstls	sl, r1
    daf4:	07000015 	smladeq	r0, r5, r0, r0
    daf8:	0000a2b1 			; <UNDEFINED> instruction: 0x0000a2b1
    dafc:	00010100 	andeq	r0, r1, r0, lsl #2
    db00:	01090000 	mrseq	r0, (UNDEF: 9)
    db04:	02dfb407 	sbcseq	fp, pc, #117440512	; 0x7000000
    db08:	840a0000 	strhi	r0, [sl], #-0
    db0c:	0700001e 	smladeq	r0, lr, r0, r0
    db10:	0000a2b5 			; <UNDEFINED> instruction: 0x0000a2b5
    db14:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    db18:	203d0a00 	eorscs	r0, sp, r0, lsl #20
    db1c:	b6070000 	strlt	r0, [r7], -r0
    db20:	000000a2 	andeq	r0, r0, r2, lsr #1
    db24:	00000401 	andeq	r0, r0, r1, lsl #8
    db28:	07020900 	streq	r0, [r2, -r0, lsl #18]
    db2c:	000324c2 	andeq	r2, r3, r2, asr #9
    db30:	18f40a00 	ldmne	r4!, {r9, fp}^
    db34:	c3070000 	movwgt	r0, #28672	; 0x7000
    db38:	000000b8 	strheq	r0, [r0], -r8
    db3c:	000d0302 	andeq	r0, sp, r2, lsl #6
    db40:	0018680a 	andseq	r6, r8, sl, lsl #16
    db44:	b8c90700 	stmialt	r9, {r8, r9, sl}^
    db48:	02000000 	andeq	r0, r0, #0
    db4c:	0a000c01 	beq	10b58 <__exidx_end+0xbe04>
    db50:	000017e3 	andeq	r1, r0, r3, ror #15
    db54:	00b8cb07 	adcseq	ip, r8, r7, lsl #22
    db58:	06020000 	streq	r0, [r2], -r0
    db5c:	100a0006 	andne	r0, sl, r6
    db60:	0700001c 	smladeq	r0, ip, r0, r0
    db64:	0000b8d2 	ldrdeq	fp, [r0], -r2
    db68:	05010200 	streq	r0, [r1, #-512]	; 0xfffffe00
    db6c:	04060000 	streq	r0, [r6], #-0
    db70:	000000ce 	andeq	r0, r0, lr, asr #1
    db74:	002cc803 	eoreq	ip, ip, r3, lsl #16
    db78:	35420800 	strbcc	r0, [r2, #-2048]	; 0xfffff800
    db7c:	0b000003 	bleq	db90 <__exidx_end+0x8e3c>
    db80:	00002d58 	andeq	r2, r0, r8, asr sp
    db84:	01c10820 	biceq	r0, r1, r0, lsr #16
    db88:	000003f9 	strdeq	r0, [r0], -r9
    db8c:	0015010c 	andseq	r0, r5, ip, lsl #2
    db90:	01c20800 	biceq	r0, r2, r0, lsl #16
    db94:	000000b8 	strheq	r0, [r0], -r8
    db98:	19760c00 	ldmdbne	r6!, {sl, fp}^
    db9c:	c3080000 	movwgt	r0, #32768	; 0x8000
    dba0:	0000b801 	andeq	fp, r0, r1, lsl #16
    dba4:	5c0c0200 	sfmpl	f0, 4, [ip], {-0}
    dba8:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    dbac:	026d01c6 	rsbeq	r0, sp, #-2147483599	; 0x80000031
    dbb0:	0c040000 	stceq	0, cr0, [r4], {-0}
    dbb4:	00001694 	muleq	r0, r4, r6
    dbb8:	f401c708 	vst1.8	{d12}, [r1], r8
    dbbc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    dbc0:	001aa10c 	andseq	sl, sl, ip, lsl #2
    dbc4:	01cf0800 	biceq	r0, pc, r0, lsl #16
    dbc8:	000004ef 	andeq	r0, r0, pc, ror #9
    dbcc:	19820c0c 	stmibne	r2, {r2, r3, sl, fp}
    dbd0:	d3080000 	movwle	r0, #32768	; 0x8000
    dbd4:	00053901 	andeq	r3, r5, r1, lsl #18
    dbd8:	f60c0d00 			; <UNDEFINED> instruction: 0xf60c0d00
    dbdc:	08000014 	stmdaeq	r0, {r2, r4}
    dbe0:	056301d9 	strbeq	r0, [r3, #-473]!	; 0xfffffe27
    dbe4:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    dbe8:	00001a45 	andeq	r1, r0, r5, asr #20
    dbec:	8d01de08 	stchi	14, cr13, [r1, #-32]	; 0xffffffe0
    dbf0:	10000005 	andne	r0, r0, r5
    dbf4:	00177e0c 	andseq	r7, r7, ip, lsl #28
    dbf8:	01df0800 	bicseq	r0, pc, r0, lsl #16
    dbfc:	000000a2 	andeq	r0, r0, r2, lsr #1
    dc00:	1af70c14 	bne	ffdd0c58 <_estack+0xdfdcbc58>
    dc04:	e7080000 	str	r0, [r8, -r0]
    dc08:	0005b701 	andeq	fp, r5, r1, lsl #14
    dc0c:	810c1500 	tsthi	ip, r0, lsl #10
    dc10:	08000016 	stmdaeq	r0, {r1, r2, r4}
    dc14:	05e101fb 	strbeq	r0, [r1, #507]!	; 0x1fb
    dc18:	0c160000 	ldceq	0, cr0, [r6], {-0}
    dc1c:	00000ab2 			; <UNDEFINED> instruction: 0x00000ab2
    dc20:	3b020e08 	blcc	91448 <__ccfg+0x714a0>
    dc24:	18000006 	stmdane	r0, {r1, r2}
    dc28:	00176f0c 	andseq	r6, r7, ip, lsl #30
    dc2c:	020f0800 	andeq	r0, pc, #0, 16
    dc30:	000000b8 	strheq	r0, [r0], -r8
    dc34:	1d150c1a 	ldcne	12, cr0, [r5, #-104]	; 0xffffff98
    dc38:	10080000 	andne	r0, r8, r0
    dc3c:	00032402 	andeq	r2, r3, r2, lsl #8
    dc40:	03001c00 	movweq	r1, #3072	; 0xc00
    dc44:	00001c8c 	andeq	r1, r0, ip, lsl #25
    dc48:	04044308 	streq	r4, [r4], #-776	; 0xfffffcf8
    dc4c:	6d0b0000 	stcvs	0, cr0, [fp, #-0]
    dc50:	2800001c 	stmdacs	r0, {r2, r3, r4}
    dc54:	ef021a08 	svc	0x00021a08
    dc58:	0c000004 	stceq	0, cr0, [r0], {4}
    dc5c:	00001501 	andeq	r1, r0, r1, lsl #10
    dc60:	b8021b08 	stmdalt	r2, {r3, r8, r9, fp, ip}
    dc64:	00000000 	andeq	r0, r0, r0
    dc68:	0019760c 	andseq	r7, r9, ip, lsl #12
    dc6c:	021d0800 	andseq	r0, sp, #0, 16
    dc70:	000000b8 	strheq	r0, [r0], -r8
    dc74:	1a5c0c02 	bne	1710c84 <__ccfg+0x16f0cdc>
    dc78:	20080000 	andcs	r0, r8, r0
    dc7c:	00026d02 	andeq	r6, r2, r2, lsl #26
    dc80:	940c0400 	strls	r0, [ip], #-1024	; 0xfffffc00
    dc84:	08000016 	stmdaeq	r0, {r1, r2, r4}
    dc88:	00f40221 	rscseq	r0, r4, r1, lsr #4
    dc8c:	0c080000 	stceq	0, cr0, [r8], {-0}
    dc90:	00001aa1 	andeq	r1, r0, r1, lsr #21
    dc94:	85022908 	strhi	r2, [r2, #-2312]	; 0xfffff6f8
    dc98:	0c000006 	stceq	0, cr0, [r0], {6}
    dc9c:	0019820c 	andseq	r8, r9, ip, lsl #4
    dca0:	022d0800 	eoreq	r0, sp, #0, 16
    dca4:	000006cf 	andeq	r0, r0, pc, asr #13
    dca8:	14f60c0d 	ldrbtne	r0, [r6], #3085	; 0xc0d
    dcac:	33080000 	movwcc	r0, #32768	; 0x8000
    dcb0:	0006f902 	andeq	pc, r6, r2, lsl #18
    dcb4:	450c0e00 	strmi	r0, [ip, #-3584]	; 0xfffff200
    dcb8:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    dcbc:	07230238 			; <UNDEFINED> instruction: 0x07230238
    dcc0:	0c100000 	ldceq	0, cr0, [r0], {-0}
    dcc4:	0000177e 	andeq	r1, r0, lr, ror r7
    dcc8:	a2023908 	andge	r3, r2, #8, 18	; 0x20000
    dccc:	14000000 	strne	r0, [r0], #-0
    dcd0:	001af70c 	andseq	pc, sl, ip, lsl #14
    dcd4:	02410800 	subeq	r0, r1, #0, 16
    dcd8:	0000074d 	andeq	r0, r0, sp, asr #14
    dcdc:	16810c15 	pkhbtne	r0, r1, r5, lsl #24
    dce0:	55080000 	strpl	r0, [r8, #-0]
    dce4:	00077702 	andeq	r7, r7, r2, lsl #14
    dce8:	b20c1600 	andlt	r1, ip, #0, 12
    dcec:	0800000a 	stmdaeq	r0, {r1, r3}
    dcf0:	07d10268 	ldrbeq	r0, [r1, r8, ror #4]
    dcf4:	0c180000 	ldceq	0, cr0, [r8], {-0}
    dcf8:	0000176f 	andeq	r1, r0, pc, ror #14
    dcfc:	b8026908 	stmdalt	r2, {r3, r8, fp, sp, lr}
    dd00:	1a000000 	bne	dd08 <__exidx_end+0x8fb4>
    dd04:	001d150c 	andseq	r1, sp, ip, lsl #10
    dd08:	026a0800 	rsbeq	r0, sl, #0, 16
    dd0c:	00000324 	andeq	r0, r0, r4, lsr #6
    dd10:	154f0c1c 	strbne	r0, [pc, #-3100]	; d0fc <__exidx_end+0x83a8>
    dd14:	6c080000 	stcvs	0, cr0, [r8], {-0}
    dd18:	0000b802 	andeq	fp, r0, r2, lsl #16
    dd1c:	640c2000 	strvs	r2, [ip], #-0
    dd20:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    dd24:	00ad0270 	adceq	r0, sp, r0, ror r2
    dd28:	0c220000 	stceq	0, cr0, [r2], #-0
    dd2c:	00001bd3 	ldrdeq	r1, [r0], -r3
    dd30:	a2027308 	andge	r7, r2, #8, 6	; 0x20000000
    dd34:	24000000 	strcs	r0, [r0], #-0
    dd38:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    dd3c:	053901c8 	ldreq	r0, [r9, #-456]!	; 0xfffffe38
    dd40:	ed0e0000 	stc	0, cr0, [lr, #-0]
    dd44:	08000020 	stmdaeq	r0, {r5}
    dd48:	00a201c9 	adceq	r0, r2, r9, asr #3
    dd4c:	04010000 	streq	r0, [r1], #-0
    dd50:	f10e0004 	cpsid	,#4
    dd54:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    dd58:	00a201ca 	adceq	r0, r2, sl, asr #3
    dd5c:	01010000 	mrseq	r0, (UNDEF: 1)
    dd60:	2d0e0003 	stccs	0, cr0, [lr, #-12]
    dd64:	08000019 	stmdaeq	r0, {r0, r3, r4}
    dd68:	00a201cc 	adceq	r0, r2, ip, asr #3
    dd6c:	02010000 	andeq	r0, r1, #0
    dd70:	910e0001 	tstls	lr, r1
    dd74:	08000015 	stmdaeq	r0, {r0, r2, r4}
    dd78:	00a201cd 	adceq	r0, r2, sp, asr #3
    dd7c:	01010000 	mrseq	r0, (UNDEF: 1)
    dd80:	0d000000 	stceq	0, cr0, [r0, #-0]
    dd84:	01d00801 	bicseq	r0, r0, r1, lsl #16
    dd88:	00000563 	andeq	r0, r0, r3, ror #10
    dd8c:	001e840e 	andseq	r8, lr, lr, lsl #8
    dd90:	01d10800 	bicseq	r0, r1, r0, lsl #16
    dd94:	000000a2 	andeq	r0, r0, r2, lsr #1
    dd98:	00040401 	andeq	r0, r4, r1, lsl #8
    dd9c:	00203d0e 	eoreq	r3, r0, lr, lsl #26
    dda0:	01d20800 	bicseq	r0, r2, r0, lsl #16
    dda4:	000000a2 	andeq	r0, r0, r2, lsr #1
    dda8:	00000401 	andeq	r0, r0, r1, lsl #8
    ddac:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    ddb0:	058d01d4 	streq	r0, [sp, #468]	; 0x1d4
    ddb4:	ac0e0000 	stcge	0, cr0, [lr], {-0}
    ddb8:	08000019 	stmdaeq	r0, {r0, r3, r4}
    ddbc:	00b801d5 	ldrsbteq	r0, [r8], r5
    ddc0:	03020000 	movweq	r0, #8192	; 0x2000
    ddc4:	080e000d 	stmdaeq	lr, {r0, r2, r3}
    ddc8:	08000020 	stmdaeq	r0, {r5}
    ddcc:	00b801d8 	ldrsbteq	r0, [r8], r8
    ddd0:	0d020000 	stceq	0, cr0, [r2, #-0]
    ddd4:	0d000000 	stceq	0, cr0, [r0, #-0]
    ddd8:	01da0804 	bicseq	r0, sl, r4, lsl #16
    dddc:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    dde0:	001bbb0e 	andseq	fp, fp, lr, lsl #22
    dde4:	01db0800 	bicseq	r0, fp, r0, lsl #16
    dde8:	000000ce 	andeq	r0, r0, lr, asr #1
    ddec:	001c0404 	andseq	r0, ip, r4, lsl #8
    ddf0:	001ce10e 	andseq	lr, ip, lr, lsl #2
    ddf4:	01dd0800 	bicseq	r0, sp, r0, lsl #16
    ddf8:	000000ce 	andeq	r0, r0, lr, asr #1
    ddfc:	00031504 	andeq	r1, r3, r4, lsl #10
    de00:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    de04:	05e101e0 	strbeq	r0, [r1, #480]!	; 0x1e0
    de08:	cd0e0000 	stcgt	0, cr0, [lr, #-0]
    de0c:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    de10:	00a201e1 	adceq	r0, r2, r1, ror #3
    de14:	06010000 	streq	r0, [r1], -r0
    de18:	0b0e0002 	bleq	38de28 <__ccfg+0x36de80>
    de1c:	08000016 	stmdaeq	r0, {r1, r2, r4}
    de20:	00a201e3 	adceq	r0, r2, r3, ror #3
    de24:	02010000 	andeq	r0, r1, #0
    de28:	0d000000 	stceq	0, cr0, [r0, #-0]
    de2c:	01e80802 	mvneq	r0, r2, lsl #16
    de30:	0000063b 	andeq	r0, r0, fp, lsr r6
    de34:	001bc40e 	andseq	ip, fp, lr, lsl #8
    de38:	01e90800 	mvneq	r0, r0, lsl #16
    de3c:	000000b8 	strheq	r0, [r0], -r8
    de40:	000a0602 	andeq	r0, sl, r2, lsl #12
    de44:	001a1a0e 	andseq	r1, sl, lr, lsl #20
    de48:	01ea0800 	mvneq	r0, r0, lsl #16
    de4c:	000000b8 	strheq	r0, [r0], -r8
    de50:	00090102 	andeq	r0, r9, r2, lsl #2
    de54:	001c3d0e 	andseq	r3, ip, lr, lsl #26
    de58:	01ec0800 	mvneq	r0, r0, lsl #16
    de5c:	000000b8 	strheq	r0, [r0], -r8
    de60:	00080102 	andeq	r0, r8, r2, lsl #2
    de64:	0015e10e 	andseq	lr, r5, lr, lsl #2
    de68:	01ee0800 	mvneq	r0, r0, lsl #16
    de6c:	000000b8 	strheq	r0, [r0], -r8
    de70:	00040402 	andeq	r0, r4, r2, lsl #8
    de74:	0015740e 	andseq	r7, r5, lr, lsl #8
    de78:	01f30800 	mvnseq	r0, r0, lsl #16
    de7c:	000000b8 	strheq	r0, [r0], -r8
    de80:	00000302 	andeq	r0, r0, r2, lsl #6
    de84:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    de88:	068501fc 			; <UNDEFINED> instruction: 0x068501fc
    de8c:	f40e0000 	vst4.8	{d0-d3}, [lr], r0
    de90:	08000018 	stmdaeq	r0, {r3, r4}
    de94:	00b801fd 	ldrshteq	r0, [r8], sp
    de98:	03020000 	movweq	r0, #8192	; 0x2000
    de9c:	680e000d 	stmdavs	lr, {r0, r2, r3}
    dea0:	08000018 	stmdaeq	r0, {r3, r4}
    dea4:	00b80203 	adcseq	r0, r8, r3, lsl #4
    dea8:	01020000 	mrseq	r0, (UNDEF: 2)
    deac:	e30e000c 	movw	r0, #57356	; 0xe00c
    deb0:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    deb4:	00b80205 	adcseq	r0, r8, r5, lsl #4
    deb8:	06020000 	streq	r0, [r2], -r0
    debc:	100e0006 	andne	r0, lr, r6
    dec0:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    dec4:	00b8020c 	adcseq	r0, r8, ip, lsl #4
    dec8:	01020000 	mrseq	r0, (UNDEF: 2)
    decc:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    ded0:	02220801 	eoreq	r0, r2, #65536	; 0x10000
    ded4:	000006cf 	andeq	r0, r0, pc, asr #13
    ded8:	0020ed0e 	eoreq	lr, r0, lr, lsl #26
    dedc:	02230800 	eoreq	r0, r3, #0, 16
    dee0:	000000a2 	andeq	r0, r0, r2, lsr #1
    dee4:	00040401 	andeq	r0, r4, r1, lsl #8
    dee8:	0017f10e 	andseq	pc, r7, lr, lsl #2
    deec:	02240800 	eoreq	r0, r4, #0, 16
    def0:	000000a2 	andeq	r0, r0, r2, lsr #1
    def4:	00030101 	andeq	r0, r3, r1, lsl #2
    def8:	00192d0e 	andseq	r2, r9, lr, lsl #26
    defc:	02260800 	eoreq	r0, r6, #0, 16
    df00:	000000a2 	andeq	r0, r0, r2, lsr #1
    df04:	00010201 	andeq	r0, r1, r1, lsl #4
    df08:	0015910e 	andseq	r9, r5, lr, lsl #2
    df0c:	02270800 	eoreq	r0, r7, #0, 16
    df10:	000000a2 	andeq	r0, r0, r2, lsr #1
    df14:	00000101 	andeq	r0, r0, r1, lsl #2
    df18:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    df1c:	06f9022a 	ldrbteq	r0, [r9], sl, lsr #4
    df20:	840e0000 	strhi	r0, [lr], #-0
    df24:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    df28:	00a2022b 	adceq	r0, r2, fp, lsr #4
    df2c:	04010000 	streq	r0, [r1], #-0
    df30:	3d0e0004 	stccc	0, cr0, [lr, #-16]
    df34:	08000020 	stmdaeq	r0, {r5}
    df38:	00a2022c 	adceq	r0, r2, ip, lsr #4
    df3c:	04010000 	streq	r0, [r1], #-0
    df40:	0d000000 	stceq	0, cr0, [r0, #-0]
    df44:	022e0802 	eoreq	r0, lr, #131072	; 0x20000
    df48:	00000723 	andeq	r0, r0, r3, lsr #14
    df4c:	0019ac0e 	andseq	sl, r9, lr, lsl #24
    df50:	022f0800 	eoreq	r0, pc, #0, 16
    df54:	000000b8 	strheq	r0, [r0], -r8
    df58:	000d0302 	andeq	r0, sp, r2, lsl #6
    df5c:	0020080e 	eoreq	r0, r0, lr, lsl #16
    df60:	02320800 	eorseq	r0, r2, #0, 16
    df64:	000000b8 	strheq	r0, [r0], -r8
    df68:	00000d02 	andeq	r0, r0, r2, lsl #26
    df6c:	08040d00 	stmdaeq	r4, {r8, sl, fp}
    df70:	074d0234 	smlaldxeq	r0, sp, r4, r2
    df74:	bb0e0000 	bllt	38df7c <__ccfg+0x36dfd4>
    df78:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    df7c:	00ce0235 	sbceq	r0, lr, r5, lsr r2
    df80:	04040000 	streq	r0, [r4], #-0
    df84:	e10e001c 	tst	lr, ip, lsl r0
    df88:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    df8c:	00ce0237 	sbceq	r0, lr, r7, lsr r2
    df90:	15040000 	strne	r0, [r4, #-0]
    df94:	0d000003 	stceq	0, cr0, [r0, #-12]
    df98:	023a0801 	eorseq	r0, sl, #65536	; 0x10000
    df9c:	00000777 	andeq	r0, r0, r7, ror r7
    dfa0:	001ecd0e 	andseq	ip, lr, lr, lsl #26
    dfa4:	023b0800 	eorseq	r0, fp, #0, 16
    dfa8:	000000a2 	andeq	r0, r0, r2, lsr #1
    dfac:	00020601 	andeq	r0, r2, r1, lsl #12
    dfb0:	00160b0e 	andseq	r0, r6, lr, lsl #22
    dfb4:	023d0800 	eorseq	r0, sp, #0, 16
    dfb8:	000000a2 	andeq	r0, r0, r2, lsr #1
    dfbc:	00000201 	andeq	r0, r0, r1, lsl #4
    dfc0:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    dfc4:	07d10242 	ldrbeq	r0, [r1, r2, asr #4]
    dfc8:	c40e0000 	strgt	r0, [lr], #-0
    dfcc:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    dfd0:	00b80243 	adcseq	r0, r8, r3, asr #4
    dfd4:	06020000 	streq	r0, [r2], -r0
    dfd8:	1a0e000a 	bne	38e008 <__ccfg+0x36e060>
    dfdc:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    dfe0:	00b80244 	adcseq	r0, r8, r4, asr #4
    dfe4:	01020000 	mrseq	r0, (UNDEF: 2)
    dfe8:	3d0e0009 	stccc	0, cr0, [lr, #-36]	; 0xffffffdc
    dfec:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    dff0:	00b80246 	adcseq	r0, r8, r6, asr #4
    dff4:	01020000 	mrseq	r0, (UNDEF: 2)
    dff8:	e10e0008 	tst	lr, r8
    dffc:	08000015 	stmdaeq	r0, {r0, r2, r4}
    e000:	00b80248 	adcseq	r0, r8, r8, asr #4
    e004:	04020000 	streq	r0, [r2], #-0
    e008:	740e0004 	strvc	r0, [lr], #-4
    e00c:	08000015 	stmdaeq	r0, {r0, r2, r4}
    e010:	00b8024d 	adcseq	r0, r8, sp, asr #4
    e014:	03020000 	movweq	r0, #8192	; 0x2000
    e018:	0d000000 	stceq	0, cr0, [r0, #-0]
    e01c:	02560802 	subseq	r0, r6, #131072	; 0x20000
    e020:	0000081b 	andeq	r0, r0, fp, lsl r8
    e024:	0018f40e 	andseq	pc, r8, lr, lsl #8
    e028:	02570800 	subseq	r0, r7, #0, 16
    e02c:	000000b8 	strheq	r0, [r0], -r8
    e030:	000d0302 	andeq	r0, sp, r2, lsl #6
    e034:	0018680e 	andseq	r6, r8, lr, lsl #16
    e038:	025d0800 	subseq	r0, sp, #0, 16
    e03c:	000000b8 	strheq	r0, [r0], -r8
    e040:	000c0102 	andeq	r0, ip, r2, lsl #2
    e044:	0017e30e 	andseq	lr, r7, lr, lsl #6
    e048:	025f0800 	subseq	r0, pc, #0, 16
    e04c:	000000b8 	strheq	r0, [r0], -r8
    e050:	00060602 	andeq	r0, r6, r2, lsl #12
    e054:	001c100e 	andseq	r1, ip, lr
    e058:	02660800 	rsbeq	r0, r6, #0, 16
    e05c:	000000b8 	strheq	r0, [r0], -r8
    e060:	00050102 	andeq	r0, r5, r2, lsl #2
    e064:	02100900 	andseq	r0, r0, #0, 18
    e068:	00085448 	andeq	r5, r8, r8, asr #8
    e06c:	18960800 	ldmne	r6, {fp}
    e070:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    e074:	000000ce 	andeq	r0, r0, lr, asr #1
    e078:	17ca0800 	strbne	r0, [sl, r0, lsl #16]
    e07c:	4a020000 	bmi	8e084 <__ccfg+0x6e0dc>
    e080:	000000ce 	andeq	r0, r0, lr, asr #1
    e084:	1d9d0804 	ldcne	8, cr0, [sp, #16]
    e088:	4b020000 	blmi	8e090 <__ccfg+0x6e0e8>
    e08c:	000000ce 	andeq	r0, r0, lr, asr #1
    e090:	1f420808 	svcne	0x00420808
    e094:	4c020000 	stcmi	0, cr0, [r2], {-0}
    e098:	000000ce 	andeq	r0, r0, lr, asr #1
    e09c:	4803000c 	stmdami	r3, {r2, r3}
    e0a0:	02000016 	andeq	r0, r0, #22
    e0a4:	00081b4d 	andeq	r1, r8, sp, asr #22
    e0a8:	2e0c0f00 	cdpcs	15, 0, cr0, cr12, cr0, {0}
    e0ac:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
    e0b0:	6e100301 	cdpvs	3, 1, cr0, cr0, cr1, {0}
    e0b4:	0200002c 	andeq	r0, r0, #44	; 0x2c
    e0b8:	00ce0114 	sbceq	r0, lr, r4, lsl r1
    e0bc:	00000000 	andeq	r0, r0, r0
    e0c0:	00140000 	andseq	r0, r4, r0
    e0c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    e0c8:	00000890 	muleq	r0, r0, r8
    e0cc:	002d2611 	eoreq	r2, sp, r1, lsl r6
    e0d0:	ce6a0100 	powgte	f0, f2, f0
    e0d4:	01000000 	mrseq	r0, (UNDEF: 0)
    e0d8:	f4100050 			; <UNDEFINED> instruction: 0xf4100050
    e0dc:	0200002d 	andeq	r0, r0, #45	; 0x2d
    e0e0:	00ce014c 	sbceq	r0, lr, ip, asr #2
    e0e4:	32080000 	andcc	r0, r8, #0
    e0e8:	00280000 	eoreq	r0, r8, r0
    e0ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    e0f0:	000008d8 	ldrdeq	r0, [r0], -r8
    e0f4:	704f7012 	subvc	r7, pc, r2, lsl r0	; <UNPREDICTABLE>
    e0f8:	ce7a0100 	rpwgte	f0, f2, f0
    e0fc:	1a000000 	bne	e104 <__exidx_end+0x93b0>
    e100:	13000038 	movwne	r0, #56	; 0x38
    e104:	0000085f 	andeq	r0, r0, pc, asr r8
    e108:	00003210 	andeq	r3, r0, r0, lsl r2
    e10c:	00000004 	andeq	r0, r0, r4
    e110:	5f137e01 	svcpl	0x00137e01
    e114:	1c000008 	stcne	0, cr0, [r0], {8}
    e118:	06000032 			; <UNDEFINED> instruction: 0x06000032
    e11c:	01000000 	mrseq	r0, (UNDEF: 0)
    e120:	f6140083 			; <UNDEFINED> instruction: 0xf6140083
    e124:	0200002c 	andeq	r0, r0, #44	; 0x2c
    e128:	32300154 	eorscc	r0, r0, #84, 2
    e12c:	004c0000 	subeq	r0, ip, r0
    e130:	9c010000 	stcls	0, cr0, [r1], {-0}
    e134:	002e2315 	eoreq	r2, lr, r5, lsl r3
    e138:	015c0200 	cmpeq	ip, r0, lsl #4
    e13c:	0000327c 	andeq	r3, r0, ip, ror r2
    e140:	00000150 	andeq	r0, r0, r0, asr r1
    e144:	092a9c01 	stmdbeq	sl!, {r0, sl, fp, ip, pc}
    e148:	1d160000 	ldcne	0, cr0, [r6, #-0]
    e14c:	0100002d 	tsteq	r0, sp, lsr #32
    e150:	00026da4 	andeq	r6, r2, r4, lsr #27
    e154:	16500100 	ldrbne	r0, [r0], -r0, lsl #2
    e158:	00002d73 	andeq	r2, r0, r3, ror sp
    e15c:	092aa401 	stmdbeq	sl!, {r0, sl, sp, pc}
    e160:	51010000 	mrspl	r0, (UNDEF: 1)
    e164:	002e1b17 	eoreq	r1, lr, r7, lsl fp
    e168:	94a60100 	strtls	r0, [r6], #256	; 0x100
    e16c:	3b000000 	blcc	e174 <__exidx_end+0x9420>
    e170:	00000038 	andeq	r0, r0, r8, lsr r0
    e174:	08540406 	ldmdaeq	r4, {r1, r2, sl}^
    e178:	e5150000 	ldr	r0, [r5, #-0]
    e17c:	0200002d 	andeq	r0, r0, #45	; 0x2d
    e180:	33cc016c 	biccc	r0, ip, #108, 2
    e184:	01180000 	tsteq	r8, r0
    e188:	9c010000 	stcls	0, cr0, [r1], {-0}
    e18c:	000009ac 	andeq	r0, r0, ip, lsr #19
    e190:	002d1d18 	eoreq	r1, sp, r8, lsl sp
    e194:	6df30100 	ldfvse	f0, [r3]
    e198:	59000002 	stmdbpl	r0, {r1}
    e19c:	17000038 	smladxne	r0, r8, r0, r0
    e1a0:	00002e1b 	andeq	r2, r0, fp, lsl lr
    e1a4:	00c3f501 	sbceq	pc, r3, r1, lsl #10
    e1a8:	387a0000 	ldmdacc	sl!, {}^	; <UNPREDICTABLE>
    e1ac:	d9170000 	ldmdble	r7, {}	; <UNPREDICTABLE>
    e1b0:	0100002d 	tsteq	r0, sp, lsr #32
    e1b4:	0000cef6 	strdeq	ip, [r0], -r6
    e1b8:	0038c900 	eorseq	ip, r8, r0, lsl #18
    e1bc:	2c891700 	stccs	7, cr1, [r9], {0}
    e1c0:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    e1c4:	00000324 	andeq	r0, r0, r4, lsr #6
    e1c8:	00003913 	andeq	r3, r0, r3, lsl r9
    e1cc:	002c9a19 	eoreq	r9, ip, r9, lsl sl
    e1d0:	c3f80100 	mvnsgt	r0, #0, 2
    e1d4:	17000000 	strne	r0, [r0, -r0]
    e1d8:	00002d7b 	andeq	r2, r0, fp, ror sp
    e1dc:	00cef901 	sbceq	pc, lr, r1, lsl #18
    e1e0:	39560000 	ldmdbcc	r6, {}^	; <UNPREDICTABLE>
    e1e4:	0e170000 	cdpeq	0, 1, cr0, cr7, cr0, {0}
    e1e8:	0100002d 	tsteq	r0, sp, lsr #32
    e1ec:	0000cefa 	strdeq	ip, [r0], -sl
    e1f0:	0039ae00 	eorseq	sl, r9, r0, lsl #28
    e1f4:	e3150000 	tst	r5, #0
    e1f8:	0200002c 	andeq	r0, r0, #44	; 0x2c
    e1fc:	34e40164 	strbtcc	r0, [r4], #356	; 0x164
    e200:	00200000 	eoreq	r0, r0, r0
    e204:	9c010000 	stcls	0, cr0, [r1], {-0}
    e208:	000009d3 	ldrdeq	r0, [r0], -r3
    e20c:	002d731a 	eoreq	r7, sp, sl, lsl r3
    e210:	01770100 	cmneq	r7, r0, lsl #2
    e214:	0000092a 	andeq	r0, r0, sl, lsr #18
    e218:	000039e4 	andeq	r3, r0, r4, ror #19
    e21c:	2d411500 	cfstr64cs	mvdx1, [r1, #-0]
    e220:	74020000 	strvc	r0, [r2], #-0
    e224:	00000001 	andeq	r0, r0, r1
    e228:	00006000 	andeq	r6, r0, r0
    e22c:	379c0100 	ldrcc	r0, [ip, r0, lsl #2]
    e230:	1b00000a 	blne	e260 <__exidx_end+0x950c>
    e234:	00001f20 	andeq	r1, r0, r0, lsr #30
    e238:	ff018401 			; <UNDEFINED> instruction: 0xff018401
    e23c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    e240:	1b210003 	blne	84e254 <__ccfg+0x82e2ac>
    e244:	00001818 	andeq	r1, r0, r8, lsl r8
    e248:	24018501 	strcs	r8, [r1], #-1281	; 0xfffffaff
    e24c:	bc000003 	stclt	0, cr0, [r0], {3}
    e250:	1c210003 	stcne	0, cr0, [r1], #-12
    e254:	89010069 	stmdbhi	r1, {r0, r3, r5, r6}
    e258:	00009401 	andeq	r9, r0, r1, lsl #8
    e25c:	003a1200 	eorseq	r1, sl, r0, lsl #4
    e260:	00001d00 	andeq	r1, r0, r0, lsl #26
    e264:	0a9c0000 	beq	fe70e26c <_estack+0xde70926c>
    e268:	011e0000 	tsteq	lr, r0
    e26c:	84080252 	strhi	r0, [r8], #-594	; 0xfffffdae
    e270:	0251011e 	subseq	r0, r1, #-2147483641	; 0x80000007
    e274:	011eff08 	tsteq	lr, r8, lsl #30	; <UNPREDICTABLE>
    e278:	380c0550 	stmdacc	ip, {r4, r6, r8, sl}
    e27c:	00210003 	eoreq	r0, r1, r3
    e280:	2ca91500 	cfstr32cs	mvfx1, [r9]
    e284:	7c020000 	stcvc	0, cr0, [r2], {-0}
    e288:	00350401 	eorseq	r0, r5, r1, lsl #8
    e28c:	00001c00 	andeq	r1, r0, r0, lsl #24
    e290:	5c9c0100 	ldfpls	f0, [ip], {0}
    e294:	1f00000a 	svcne	0x0000000a
    e298:	00002dd1 	ldrdeq	r2, [r0], -r1
    e29c:	5c019601 	stcpl	6, cr9, [r1], {1}
    e2a0:	0100000a 	tsteq	r0, sl
    e2a4:	01020050 	qaddeq	r0, r0, r2
    e2a8:	000c6f02 	andeq	r6, ip, r2, lsl #30
    e2ac:	00b82000 	adcseq	r2, r8, r0
    e2b0:	0a730000 	beq	1cce2b8 <__ccfg+0x1cae310>
    e2b4:	e4210000 	strt	r0, [r1], #-0
    e2b8:	0b000000 	bleq	e2c0 <__exidx_end+0x956c>
    e2bc:	2d2e2200 	sfmcs	f2, 4, [lr, #-0]
    e2c0:	52010000 	andpl	r0, r1, #0
    e2c4:	00000a97 	muleq	r0, r7, sl
    e2c8:	3d3bc318 	ldccc	3, cr12, [fp, #-96]!	; 0xffffffa0
    e2cc:	713a5d3a 	teqvc	sl, sl, lsr sp
    e2d0:	8f0aa13a 	svchi	0x000aa13a
    e2d4:	b33b0f3a 	teqlt	fp, #58, 30	; 0xe8
    e2d8:	855e4909 	ldrbhi	r4, [lr, #-2313]	; 0xfffff6f7
    e2dc:	853b2f0a 	ldrhi	r2, [fp, #-3850]!	; 0xfffff0f6
    e2e0:	0a63233b 	beq	18d6fd4 <__ccfg+0x18b702c>
    e2e4:	e4240000 	strt	r0, [r4], #-0
    e2e8:	0900000c 	stmdbeq	r0, {r2, r3}
    e2ec:	0000eb19 	andeq	lr, r0, r9, lsl fp
    e2f0:	00eb2500 	rsceq	r2, fp, r0, lsl #10
    e2f4:	94250000 	strtls	r0, [r5], #-0
    e2f8:	25000000 	strcs	r0, [r0, #-0]
    e2fc:	000000d9 	ldrdeq	r0, [r0], -r9
    e300:	02070000 	andeq	r0, r7, #0
    e304:	00040000 	andeq	r0, r4, r0
    e308:	000034d3 	ldrdeq	r3, [r0], -r3	; <UNPREDICTABLE>
    e30c:	23be0104 			; <UNDEFINED> instruction: 0x23be0104
    e310:	f3010000 	vhadd.u8	d0, d1, d0
    e314:	8500002e 	strhi	r0, [r0, #-46]	; 0xffffffd2
    e318:	c8000024 	stmdagt	r0, {r2, r5}
    e31c:	00000010 	andeq	r0, r0, r0, lsl r0
    e320:	5d000000 	stcpl	0, cr0, [r0, #-0]
    e324:	02000075 	andeq	r0, r0, #117	; 0x75
    e328:	03e50601 	mvneq	r0, #1048576	; 0x100000
    e32c:	01020000 	mrseq	r0, (UNDEF: 2)
    e330:	0003e308 	andeq	lr, r3, r8, lsl #6
    e334:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    e338:	00000446 	andeq	r0, r0, r6, asr #8
    e33c:	8a070202 	bhi	1ceb4c <__ccfg+0x1aeba4>
    e340:	02000002 	andeq	r0, r0, #2
    e344:	00b40504 	adcseq	r0, r4, r4, lsl #10
    e348:	31030000 	mrscc	r0, (UNDEF: 3)
    e34c:	03000023 	movweq	r0, #35	; 0x23
    e350:	00005341 	andeq	r5, r0, r1, asr #6
    e354:	07040200 	streq	r0, [r4, -r0, lsl #4]
    e358:	0000007e 	andeq	r0, r0, lr, ror r0
    e35c:	af050802 	svcge	0x00050802
    e360:	02000000 	andeq	r0, r0, #0
    e364:	00790708 	rsbseq	r0, r9, r8, lsl #14
    e368:	04040000 	streq	r0, [r4], #-0
    e36c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    e370:	07040200 	streq	r0, [r4, -r0, lsl #4]
    e374:	00000083 	andeq	r0, r0, r3, lsl #1
    e378:	00233303 	eoreq	r3, r3, r3, lsl #6
    e37c:	48200400 	stmdami	r0!, {sl}
    e380:	05000000 	streq	r0, [r0, #-0]
    e384:	00002f50 	andeq	r2, r0, r0, asr pc
    e388:	03033002 	movweq	r3, #12290	; 0x3002
    e38c:	002fbb06 	eoreq	fp, pc, r6, lsl #22
    e390:	01fd0100 	mvnseq	r0, r0, lsl #2
    e394:	002f6305 	eoreq	r6, pc, r5, lsl #6
    e398:	01820100 	orreq	r0, r2, r0, lsl #2
    e39c:	2e3e0701 	cdpcs	7, 3, cr0, cr14, cr1, {0}
    e3a0:	0d010000 	stceq	0, cr0, [r1, #-0]
    e3a4:	00352001 	eorseq	r2, r5, r1
    e3a8:	0000d400 	andeq	sp, r0, r0, lsl #8
    e3ac:	6d9c0100 	ldfvss	f0, [ip]
    e3b0:	08000001 	stmdaeq	r0, {r0}
    e3b4:	00002f3e 	andeq	r2, r0, lr, lsr pc
    e3b8:	76010d01 	strvc	r0, [r1], -r1, lsl #26
    e3bc:	b6000000 	strlt	r0, [r0], -r0
    e3c0:	0900003a 	stmdbeq	r0, {r1, r3, r4, r5}
    e3c4:	00002faa 	andeq	r2, r0, sl, lsr #31
    e3c8:	76010f01 	strvc	r0, [r1], -r1, lsl #30
    e3cc:	e2000000 	and	r0, r0, #0
    e3d0:	0900003a 	stmdbeq	r0, {r1, r3, r4, r5}
    e3d4:	00002e37 	andeq	r2, r0, r7, lsr lr
    e3d8:	76011001 	strvc	r1, [r1], -r1
    e3dc:	f5000000 			; <UNDEFINED> instruction: 0xf5000000
    e3e0:	0a00003a 	beq	e4d0 <__exidx_end+0x977c>
    e3e4:	00000081 	andeq	r0, r0, r1, lsl #1
    e3e8:	00003552 	andeq	r3, r0, r2, asr r5
    e3ec:	00000006 	andeq	r0, r0, r6
    e3f0:	0b013601 	bleq	5bbfc <__ccfg+0x3bc54>
    e3f4:	00003578 	andeq	r3, r0, r8, ror r5
    e3f8:	0000002a 	andeq	r0, r0, sl, lsr #32
    e3fc:	0000011f 	andeq	r0, r0, pc, lsl r1
    e400:	00303009 	eorseq	r3, r0, r9
    e404:	01530100 	cmpeq	r3, r0, lsl #2
    e408:	00000076 	andeq	r0, r0, r6, ror r0
    e40c:	00003b0e 	andeq	r3, r0, lr, lsl #22
    e410:	002f8c09 	eoreq	r8, pc, r9, lsl #24
    e414:	01540100 	cmpeq	r4, r0, lsl #2
    e418:	00000076 	andeq	r0, r0, r6, ror r0
    e41c:	00003b21 	andeq	r3, r0, r1, lsr #22
    e420:	35620c00 	strbcc	r0, [r2, #-3072]!	; 0xfffff400
    e424:	01c30000 	biceq	r0, r3, r0
    e428:	01330000 	teqeq	r3, r0
    e42c:	010d0000 	mrseq	r0, (UNDEF: 13)
    e430:	00740250 	rsbseq	r0, r4, r0, asr r2
    e434:	356a0c00 	strbcc	r0, [sl, #-3072]!	; 0xfffff400
    e438:	01d40000 	bicseq	r0, r4, r0
    e43c:	014d0000 	mrseq	r0, (UNDEF: 77)
    e440:	010d0000 	mrseq	r0, (UNDEF: 13)
    e444:	00740251 	rsbseq	r0, r4, r1, asr r2
    e448:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    e44c:	0c000075 	stceq	0, cr0, [r0], {117}	; 0x75
    e450:	000035a8 	andeq	r3, r0, r8, lsr #11
    e454:	000001ea 	andeq	r0, r0, sl, ror #3
    e458:	00000161 	andeq	r0, r0, r1, ror #2
    e45c:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    e460:	0e000074 	mcreq	0, 0, r0, cr0, cr4, {3}
    e464:	000035b2 			; <UNDEFINED> instruction: 0x000035b2
    e468:	0150010d 	cmpeq	r0, sp, lsl #2
    e46c:	0f000032 	svceq	0x00000032
    e470:	00002f76 	andeq	r2, r0, r6, ror pc
    e474:	35f45f07 	ldrbcc	r5, [r4, #3847]!	; 0xf07
    e478:	00a40000 	adceq	r0, r4, r0
    e47c:	9c010000 	stcls	0, cr0, [r1], {-0}
    e480:	000001c3 	andeq	r0, r0, r3, asr #3
    e484:	002f3e10 	eoreq	r3, pc, r0, lsl lr	; <UNPREDICTABLE>
    e488:	76720100 	ldrbtvc	r0, [r2], -r0, lsl #2
    e48c:	4c000000 	stcmi	0, cr0, [r0], {-0}
    e490:	1000003b 	andne	r0, r0, fp, lsr r0
    e494:	00002f97 	muleq	r0, r7, pc	; <UNPREDICTABLE>
    e498:	00767301 	rsbseq	r7, r6, r1, lsl #6
    e49c:	3b5f0000 	blcc	17ce4a4 <__ccfg+0x17ae4fc>
    e4a0:	04110000 	ldreq	r0, [r1], #-0
    e4a4:	fb000036 	blx	e586 <__exidx_end+0x9832>
    e4a8:	11000001 	tstne	r0, r1
    e4ac:	00003618 	andeq	r3, r0, r8, lsl r6
    e4b0:	00000203 	andeq	r0, r0, r3, lsl #4
    e4b4:	00362812 	eorseq	r2, r6, r2, lsl r8
    e4b8:	00009b00 	andeq	r9, r0, r0, lsl #22
    e4bc:	50010d00 	andpl	r0, r1, r0, lsl #26
    e4c0:	00007402 	andeq	r7, r0, r2, lsl #8
    e4c4:	2e631300 	cdpcs	3, 6, cr1, cr3, cr0, {0}
    e4c8:	6c050000 	stcvs	0, cr0, [r5], {-0}
    e4cc:	000001d4 	ldrdeq	r0, [r0], -r4
    e4d0:	00007614 	andeq	r7, r0, r4, lsl r6
    e4d4:	93130000 	tstls	r3, #0
    e4d8:	0500002e 	streq	r0, [r0, #-46]	; 0xffffffd2
    e4dc:	0001ea73 	andeq	lr, r1, r3, ror sl
    e4e0:	00761400 	rsbseq	r1, r6, r0, lsl #8
    e4e4:	76140000 	ldrvc	r0, [r4], -r0
    e4e8:	00000000 	andeq	r0, r0, r0
    e4ec:	002ec313 	eoreq	ip, lr, r3, lsl r3
    e4f0:	fb7a0500 	blx	1e8f8fa <__ccfg+0x1e6f952>
    e4f4:	14000001 	strne	r0, [r0], #-1
    e4f8:	00000076 	andeq	r0, r0, r6, ror r0
    e4fc:	2ff31500 	svccs	0x00f31500
    e500:	43060000 	movwmi	r0, #24576	; 0x6000
    e504:	2f101602 	svccs	0x00101602
    e508:	fd050000 	stc2	0, cr0, [r5, #-0]
    e50c:	000b1700 	andeq	r1, fp, r0, lsl #14
    e510:	15000400 	strne	r0, [r0, #-1024]	; 0xfffffc00
    e514:	04000036 	streq	r0, [r0], #-54	; 0xffffffca
    e518:	0023be01 	eoreq	fp, r3, r1, lsl #28
    e51c:	32730100 	rsbscc	r0, r3, #0, 2
    e520:	24850000 	strcs	r0, [r5], #0
    e524:	11100000 	tstne	r0, r0
    e528:	00000000 	andeq	r0, r0, r0
    e52c:	774a0000 	strbvc	r0, [sl, -r0]
    e530:	01020000 	mrseq	r0, (UNDEF: 2)
    e534:	0003e506 	andeq	lr, r3, r6, lsl #10
    e538:	08010200 	stmdaeq	r1, {r9}
    e53c:	000003e3 	andeq	r0, r0, r3, ror #7
    e540:	46050202 	strmi	r0, [r5], -r2, lsl #4
    e544:	02000004 	andeq	r0, r0, #4
    e548:	028a0702 	addeq	r0, sl, #524288	; 0x80000
    e54c:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
    e550:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    e554:	00004c3f 	andeq	r4, r0, pc, lsr ip
    e558:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    e55c:	000000b4 	strheq	r0, [r0], -r4
    e560:	00233103 	eoreq	r3, r3, r3, lsl #2
    e564:	5e410400 	cdppl	4, 4, cr0, cr1, cr0, {0}
    e568:	02000000 	andeq	r0, r0, #0
    e56c:	007e0704 	rsbseq	r0, lr, r4, lsl #14
    e570:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    e574:	0000af05 	andeq	sl, r0, r5, lsl #30
    e578:	07080200 	streq	r0, [r8, -r0, lsl #4]
    e57c:	00000079 	andeq	r0, r0, r9, ror r0
    e580:	69050404 	stmdbvs	r5, {r2, sl}
    e584:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    e588:	00830704 	addeq	r0, r3, r4, lsl #14
    e58c:	20030000 	andcs	r0, r3, r0
    e590:	05000025 	streq	r0, [r0, #-37]	; 0xffffffdb
    e594:	0000411f 	andeq	r4, r0, pc, lsl r1
    e598:	23330300 	teqcs	r3, #0, 6
    e59c:	20050000 	andcs	r0, r5, r0
    e5a0:	00000053 	andeq	r0, r0, r3, asr r0
    e5a4:	00330605 	eorseq	r0, r3, r5, lsl #12
    e5a8:	81e90200 	mvnhi	r0, r0, lsl #4
    e5ac:	03000000 	movweq	r0, #0
    e5b0:	000000be 	strheq	r0, [r0], -lr
    e5b4:	00305606 	eorseq	r5, r0, r6, lsl #12
    e5b8:	8ce90200 	sfmhi	f0, 2, [r9]
    e5bc:	07000000 	streq	r0, [r0, -r0]
    e5c0:	0000335f 	andeq	r3, r0, pc, asr r3
    e5c4:	0081ef02 	addeq	lr, r1, r2, lsl #30
    e5c8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    e5cc:	0000308b 	andeq	r3, r0, fp, lsl #1
    e5d0:	008cab02 	addeq	sl, ip, r2, lsl #22
    e5d4:	e7010000 	str	r0, [r1, -r0]
    e5d8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    e5dc:	00002f3e 	andeq	r2, r0, lr, lsr pc
    e5e0:	8c032901 			; <UNDEFINED> instruction: 0x8c032901
    e5e4:	0a000000 	beq	e5ec <__exidx_end+0x9898>
    e5e8:	000033e8 	andeq	r3, r0, r8, ror #7
    e5ec:	8c032b01 			; <UNDEFINED> instruction: 0x8c032b01
    e5f0:	00000000 	andeq	r0, r0, r0
    e5f4:	00333e08 	eorseq	r3, r3, r8, lsl #28
    e5f8:	8c810200 	sfmhi	f0, 4, [r1], {0}
    e5fc:	01000000 	mrseq	r0, (UNDEF: 0)
    e600:	00000110 	andeq	r0, r0, r0, lsl r1
    e604:	002f3e09 	eoreq	r3, pc, r9, lsl #28
    e608:	033c0100 	teqeq	ip, #0, 2
    e60c:	0000008c 	andeq	r0, r0, ip, lsl #1
    e610:	0033af0a 	eorseq	sl, r3, sl, lsl #30
    e614:	033e0100 	teqeq	lr, #0, 2
    e618:	0000008c 	andeq	r0, r0, ip, lsl #1
    e61c:	31ec0800 	mvncc	r0, r0, lsl #16
    e620:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    e624:	0000008c 	andeq	r0, r0, ip, lsl #1
    e628:	00013901 	andeq	r3, r1, r1, lsl #18
    e62c:	2f3e0900 	svccs	0x003e0900
    e630:	4f010000 	svcmi	0x00010000
    e634:	00008c03 	andeq	r8, r0, r3, lsl #24
    e638:	33230a00 			; <UNDEFINED> instruction: 0x33230a00
    e63c:	51010000 	mrspl	r0, (UNDEF: 1)
    e640:	00008c03 	andeq	r8, r0, r3, lsl #24
    e644:	50080000 	andpl	r0, r8, r0
    e648:	02000031 	andeq	r0, r0, #49	; 0x31
    e64c:	00008cc8 	andeq	r8, r0, r8, asr #25
    e650:	016e0100 	cmneq	lr, r0, lsl #2
    e654:	3e090000 	cdpcc	0, 0, cr0, cr9, cr0, {0}
    e658:	0100002f 	tsteq	r0, pc, lsr #32
    e65c:	008c0362 	addeq	r0, ip, r2, ror #6
    e660:	e00a0000 	and	r0, sl, r0
    e664:	01000030 	tsteq	r0, r0, lsr r0
    e668:	008c0364 	addeq	r0, ip, r4, ror #6
    e66c:	210a0000 	mrscs	r0, (UNDEF: 10)
    e670:	01000032 	tsteq	r0, r2, lsr r0
    e674:	008c0365 	addeq	r0, ip, r5, ror #6
    e678:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    e67c:	00003253 	andeq	r3, r0, r3, asr r2
    e680:	008cb202 	addeq	fp, ip, r2, lsl #4
    e684:	a3010000 	movwge	r0, #4096	; 0x1000
    e688:	09000001 	stmdbeq	r0, {r0}
    e68c:	00002f3e 	andeq	r2, r0, lr, lsr pc
    e690:	8c039401 	cfstrshi	mvf9, [r3], {1}
    e694:	0a000000 	beq	e69c <__exidx_end+0x9948>
    e698:	0000316f 	andeq	r3, r0, pc, ror #2
    e69c:	8c039601 	stchi	6, cr9, [r3], {1}
    e6a0:	0a000000 	beq	e6a8 <__exidx_end+0x9954>
    e6a4:	00003221 	andeq	r3, r0, r1, lsr #4
    e6a8:	8c039701 	stchi	7, cr9, [r3], {1}
    e6ac:	00000000 	andeq	r0, r0, r0
    e6b0:	00311e08 	eorseq	r1, r1, r8, lsl #28
    e6b4:	8cb90200 	lfmhi	f0, 4, [r9]
    e6b8:	01000000 	mrseq	r0, (UNDEF: 0)
    e6bc:	000001cc 	andeq	r0, r0, ip, asr #3
    e6c0:	002f3e09 	eoreq	r3, pc, r9, lsl #28
    e6c4:	03b40100 			; <UNDEFINED> instruction: 0x03b40100
    e6c8:	0000008c 	andeq	r0, r0, ip, lsl #1
    e6cc:	00322b0a 	eorseq	r2, r2, sl, lsl #22
    e6d0:	03b60100 			; <UNDEFINED> instruction: 0x03b60100
    e6d4:	0000008c 	andeq	r0, r0, ip, lsl #1
    e6d8:	32c90800 	sbccc	r0, r9, #0, 16
    e6dc:	df020000 	svcle	0x00020000
    e6e0:	0000008c 	andeq	r0, r0, ip, lsl #1
    e6e4:	0001f501 	andeq	pc, r1, r1, lsl #10
    e6e8:	2f3e0900 	svccs	0x003e0900
    e6ec:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    e6f0:	00008c03 	andeq	r8, r0, r3, lsl #24
    e6f4:	34080a00 	strcc	r0, [r8], #-2560	; 0xfffff600
    e6f8:	ca010000 	bgt	4e700 <__ccfg+0x2e758>
    e6fc:	00008c03 	andeq	r8, r0, r3, lsl #24
    e700:	89080000 	stmdbhi	r8, {}	; <UNPREDICTABLE>
    e704:	02000033 	andeq	r0, r0, #51	; 0x33
    e708:	00008cd7 	ldrdeq	r8, [r0], -r7
    e70c:	02120100 	andseq	r0, r2, #0, 2
    e710:	bb0a0000 	bllt	28e718 <__ccfg+0x26e770>
    e714:	01000034 	tsteq	r0, r4, lsr r0
    e718:	008c0283 	addeq	r0, ip, r3, lsl #5
    e71c:	0b000000 	bleq	e724 <__exidx_end+0x99d0>
    e720:	000008d8 	ldrdeq	r0, [r0], -r8
    e724:	0c03c403 	cfstrseq	mvf12, [r3], {3}
    e728:	00003498 	muleq	r0, r8, r4
    e72c:	98010f02 	stmdals	r1, {r1, r8, r9, sl, fp}
    e730:	7c000036 	stcvc	0, cr0, [r0], {54}	; 0x36
    e734:	01000000 	mrseq	r0, (UNDEF: 0)
    e738:	0002c49c 	muleq	r2, ip, r4
    e73c:	2faa0d00 	svccs	0x00aa0d00
    e740:	7f010000 	svcvc	0x00010000
    e744:	0000008c 	andeq	r0, r0, ip, lsl #1
    e748:	00003b72 	andeq	r3, r0, r2, ror fp
    e74c:	0034b007 	eorseq	fp, r4, r7
    e750:	8c810100 	stfhis	f0, [r1], {0}
    e754:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    e758:	00003248 	andeq	r3, r0, r8, asr #4
    e75c:	00818201 	addeq	r8, r1, r1, lsl #4
    e760:	52010000 	andpl	r0, r1, #0
    e764:	0030bb0f 	eorseq	fp, r0, pc, lsl #22
    e768:	81830100 	orrhi	r0, r3, r0, lsl #2
    e76c:	93000000 	movwls	r0, #0
    e770:	0f00003b 	svceq	0x0000003b
    e774:	00003189 	andeq	r3, r0, r9, lsl #3
    e778:	00818401 	addeq	r8, r1, r1, lsl #8
    e77c:	3ba60000 	blcc	fe98e784 <_estack+0xde989784>
    e780:	97100000 	ldrls	r0, [r0, -r0]
    e784:	a6000000 	strge	r0, [r0], -r0
    e788:	e0000036 	and	r0, r0, r6, lsr r0
    e78c:	01000010 	tsteq	r0, r0, lsl r0
    e790:	00029b97 	muleq	r2, r7, fp
    e794:	00a71100 	adceq	r1, r7, r0, lsl #2
    e798:	e0120000 	ands	r0, r2, r0
    e79c:	13000010 	movwne	r0, #16
    e7a0:	000000b2 	strheq	r0, [r0], -r2
    e7a4:	00005201 	andeq	r5, r0, r1, lsl #4
    e7a8:	00009714 	andeq	r9, r0, r4, lsl r7
    e7ac:	0036b000 	eorseq	fp, r6, r0
    e7b0:	00000600 	andeq	r0, r0, r0, lsl #12
    e7b4:	11980100 	orrsne	r0, r8, r0, lsl #2
    e7b8:	000000a7 	andeq	r0, r0, r7, lsr #1
    e7bc:	0036b015 	eorseq	fp, r6, r5, lsl r0
    e7c0:	00000600 	andeq	r0, r0, r0, lsl #12
    e7c4:	00b21600 	adcseq	r1, r2, r0, lsl #12
    e7c8:	3bd40000 	blcc	ff50e7d0 <_estack+0xdf5097d0>
    e7cc:	00000000 	andeq	r0, r0, r0
    e7d0:	2e631700 	cdpcs	7, 6, cr1, cr3, cr0, {0}
    e7d4:	6c020000 	stcvs	0, cr0, [r2], {-0}
    e7d8:	00003714 	andeq	r3, r0, r4, lsl r7
    e7dc:	000000ac 	andeq	r0, r0, ip, lsr #1
    e7e0:	03439c01 	movteq	r9, #15361	; 0x3c01
    e7e4:	aa0d0000 	bge	34e7ec <__ccfg+0x32e844>
    e7e8:	0100002f 	tsteq	r0, pc, lsr #32
    e7ec:	00008cbf 			; <UNDEFINED> instruction: 0x00008cbf
    e7f0:	003be700 	eorseq	lr, fp, r0, lsl #14
    e7f4:	33ca0f00 	biccc	r0, sl, #0, 30
    e7f8:	c1010000 	mrsgt	r0, (UNDEF: 1)
    e7fc:	00000081 	andeq	r0, r0, r1, lsl #1
    e800:	00003c1b 	andeq	r3, r0, fp, lsl ip
    e804:	0034e00f 	eorseq	lr, r4, pc
    e808:	81c20100 	bichi	r0, r2, r0, lsl #2
    e80c:	44000000 	strmi	r0, [r0], #-0
    e810:	1800003c 	stmdane	r0, {r2, r3, r4, r5}
    e814:	00000097 	muleq	r0, r7, r0
    e818:	0000374a 	andeq	r3, r0, sl, asr #14
    e81c:	00000006 	andeq	r0, r0, r6
    e820:	0332ee01 	teqeq	r2, #1, 28
    e824:	a7110000 	ldrge	r0, [r1, -r0]
    e828:	15000000 	strne	r0, [r0, #-0]
    e82c:	0000374a 	andeq	r3, r0, sl, asr #14
    e830:	00000006 	andeq	r0, r0, r6
    e834:	0000b216 	andeq	fp, r0, r6, lsl r2
    e838:	003c6b00 	eorseq	r6, ip, r0, lsl #22
    e83c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    e840:	00003738 	andeq	r3, r0, r8, lsr r7
    e844:	0000021a 	andeq	r0, r0, sl, lsl r2
    e848:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    e84c:	00000074 	andeq	r0, r0, r4, ror r0
    e850:	0030661b 	eorseq	r6, r0, fp, lsl r6
    e854:	8ca40200 	sfmhi	f0, 4, [r4]
    e858:	c0000000 	andgt	r0, r0, r0
    e85c:	5c000037 	stcpl	0, cr0, [r0], {55}	; 0x37
    e860:	01000000 	mrseq	r0, (UNDEF: 0)
    e864:	0003bd9c 	muleq	r3, ip, sp
    e868:	2faa1c00 	svccs	0x00aa1c00
    e86c:	1f010000 	svcne	0x00010000
    e870:	00008c02 	andeq	r8, r0, r2, lsl #24
    e874:	003c7e00 	eorseq	r7, ip, r0, lsl #28
    e878:	337a1d00 	cmncc	sl, #0, 26
    e87c:	21010000 	mrscs	r0, (UNDEF: 1)
    e880:	00008c02 	andeq	r8, r0, r2, lsl #24
    e884:	003c9f00 	eorseq	r9, ip, r0, lsl #30
    e888:	347c1d00 	ldrbtcc	r1, [ip], #-3328	; 0xfffff300
    e88c:	22010000 	andcs	r0, r1, #0
    e890:	00008c02 	andeq	r8, r0, r2, lsl #24
    e894:	003cb200 	eorseq	fp, ip, r0, lsl #4
    e898:	348a1d00 	strcc	r1, [sl], #3328	; 0xd00
    e89c:	23010000 	movwcs	r0, #4096	; 0x1000
    e8a0:	00008c02 	andeq	r8, r0, r2, lsl #24
    e8a4:	003d0000 	eorseq	r0, sp, r0
    e8a8:	34c91d00 	strbcc	r1, [r9], #3328	; 0xd00
    e8ac:	24010000 	strcs	r0, [r1], #-0
    e8b0:	00008102 	andeq	r8, r0, r2, lsl #2
    e8b4:	003d6800 	eorseq	r6, sp, r0, lsl #16
    e8b8:	34bb1d00 	ldrtcc	r1, [fp], #3328	; 0xd00
    e8bc:	25010000 	strcs	r0, [r1, #-0]
    e8c0:	00008c02 	andeq	r8, r0, r2, lsl #24
    e8c4:	003d8700 	eorseq	r8, sp, r0, lsl #14
    e8c8:	9e1b0000 	cdpls	0, 1, cr0, cr11, cr0, {0}
    e8cc:	02000032 	andeq	r0, r0, #50	; 0x32
    e8d0:	00008cc1 	andeq	r8, r0, r1, asr #25
    e8d4:	00381c00 	eorseq	r1, r8, r0, lsl #24
    e8d8:	00001800 	andeq	r1, r0, r0, lsl #16
    e8dc:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
    e8e0:	1d000003 	stcne	0, cr0, [r0, #-12]
    e8e4:	000034bb 			; <UNDEFINED> instruction: 0x000034bb
    e8e8:	8c026701 	stchi	7, cr6, [r2], {1}
    e8ec:	ac000000 	stcge	0, cr0, [r0], {-0}
    e8f0:	0000003d 	andeq	r0, r0, sp, lsr r0
    e8f4:	0001f51e 	andeq	pc, r1, lr, lsl r5	; <UNPREDICTABLE>
    e8f8:	00000000 	andeq	r0, r0, r0
    e8fc:	00001000 	andeq	r1, r0, r0
    e900:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    e904:	16000004 	strne	r0, [r0], -r4
    e908:	00000205 	andeq	r0, r0, r5, lsl #4
    e90c:	00003dd3 	ldrdeq	r3, [r0], -r3	; <UNPREDICTABLE>
    e910:	31cc1b00 	biccc	r1, ip, r0, lsl #22
    e914:	9d020000 	stcls	0, cr0, [r2, #-0]
    e918:	0000008c 	andeq	r0, r0, ip, lsl #1
    e91c:	00003834 	andeq	r3, r0, r4, lsr r8
    e920:	00000010 	andeq	r0, r0, r0, lsl r0
    e924:	043e9c01 	ldrteq	r9, [lr], #-3073	; 0xfffff3ff
    e928:	bb1d0000 	bllt	74e930 <__ccfg+0x72e988>
    e92c:	01000034 	tsteq	r0, r4, lsr r0
    e930:	008c0297 	umulleq	r0, ip, r7, r2
    e934:	3dec0000 	stclcc	0, cr0, [ip]
    e938:	7a1d0000 	bvc	74e940 <__ccfg+0x72e998>
    e93c:	01000033 	tsteq	r0, r3, lsr r0
    e940:	008c0298 	umulleq	r0, ip, r8, r2
    e944:	3e0d0000 	cdpcc	0, 0, cr0, cr13, cr0, {0}
    e948:	1b000000 	blne	e950 <__exidx_end+0x9bfc>
    e94c:	000031ac 	andeq	r3, r0, ip, lsr #3
    e950:	008c9602 	addeq	r9, ip, r2, lsl #12
    e954:	38440000 	stmdacc	r4, {}^	; <UNPREDICTABLE>
    e958:	00140000 	andseq	r0, r4, r0
    e95c:	9c010000 	stcls	0, cr0, [r1], {-0}
    e960:	00000478 	andeq	r0, r0, r8, ror r4
    e964:	0034bb1d 	eorseq	fp, r4, sp, lsl fp
    e968:	02ba0100 	adcseq	r0, sl, #0, 2
    e96c:	0000008c 	andeq	r0, r0, ip, lsl #1
    e970:	00003e20 	andeq	r3, r0, r0, lsr #28
    e974:	00337a1d 	eorseq	r7, r3, sp, lsl sl
    e978:	02bb0100 	adcseq	r0, fp, #0, 2
    e97c:	0000008c 	andeq	r0, r0, ip, lsl #1
    e980:	00003e41 	andeq	r3, r0, r1, asr #28
    e984:	345b1b00 	ldrbcc	r1, [fp], #-2816	; 0xfffff500
    e988:	8f020000 	svchi	0x00020000
    e98c:	0000008c 	andeq	r0, r0, ip, lsl #1
    e990:	00003858 	andeq	r3, r0, r8, asr r8
    e994:	00000064 	andeq	r0, r0, r4, rrx
    e998:	04fe9c01 	ldrbteq	r9, [lr], #3073	; 0xc01
    e99c:	3e1c0000 	cdpcc	0, 1, cr0, cr12, cr0, {0}
    e9a0:	0100002f 	tsteq	r0, pc, lsr #32
    e9a4:	008c02db 	ldrdeq	r0, [ip], fp
    e9a8:	3e540000 	cdpcc	0, 5, cr0, cr4, cr0, {0}
    e9ac:	bb1d0000 	bllt	74e9b4 <__ccfg+0x72ea0c>
    e9b0:	01000034 	tsteq	r0, r4, lsr r0
    e9b4:	008c02dd 	ldrdeq	r0, [ip], sp
    e9b8:	3e750000 	cdpcc	0, 7, cr0, cr5, cr0, {0}
    e9bc:	7a1d0000 	bvc	74e9c4 <__ccfg+0x72ea1c>
    e9c0:	01000033 	tsteq	r0, r3, lsr r0
    e9c4:	008c02de 	ldrdeq	r0, [ip], lr
    e9c8:	3ea90000 	cdpcc	0, 10, cr0, cr9, cr0, {0}
    e9cc:	d41d0000 	ldrle	r0, [sp], #-0
    e9d0:	01000030 	tsteq	r0, r0, lsr r0
    e9d4:	008c02df 	ldrdeq	r0, [ip], pc	; <UNPREDICTABLE>
    e9d8:	3ebc0000 	cdpcc	0, 11, cr0, cr12, cr0, {0}
    e9dc:	331d0000 	tstcc	sp, #0
    e9e0:	01000034 	tsteq	r0, r4, lsr r0
    e9e4:	008c02e0 	addeq	r0, ip, r0, ror #5
    e9e8:	3eea0000 	cdpcc	0, 14, cr0, cr10, cr0, {0}
    e9ec:	700a0000 	andvc	r0, sl, r0
    e9f0:	01000033 	tsteq	r0, r3, lsr r0
    e9f4:	008c02e1 	addeq	r0, ip, r1, ror #5
    e9f8:	441d0000 	ldrmi	r0, [sp], #-0
    e9fc:	01000031 	tsteq	r0, r1, lsr r0
    ea00:	008102e2 	addeq	r0, r1, r2, ror #5
    ea04:	3f180000 	svccc	0x00180000
    ea08:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    ea0c:	000000be 	strheq	r0, [r0], -lr
    ea10:	000038bc 			; <UNDEFINED> instruction: 0x000038bc
    ea14:	00000014 	andeq	r0, r0, r4, lsl r0
    ea18:	054a9c01 	strbeq	r9, [sl, #-3073]	; 0xfffff3ff
    ea1c:	ce1f0000 	cdpgt	0, 1, cr0, cr15, cr0, {0}
    ea20:	93000000 	movwls	r0, #0
    ea24:	1600003f 			; <UNDEFINED> instruction: 0x1600003f
    ea28:	000000da 	ldrdeq	r0, [r0], -sl
    ea2c:	00003fb4 			; <UNDEFINED> instruction: 0x00003fb4
    ea30:	0038be15 	eorseq	fp, r8, r5, lsl lr
    ea34:	00000a00 	andeq	r0, r0, r0, lsl #20
    ea38:	00ce1f00 	sbceq	r1, lr, r0, lsl #30
    ea3c:	3fd30000 	svccc	0x00d30000
    ea40:	be150000 	cdplt	0, 1, cr0, cr5, cr0, {0}
    ea44:	0a000038 	beq	eb2c <__exidx_end+0x9dd8>
    ea48:	16000000 	strne	r0, [r0], -r0
    ea4c:	000000da 	ldrdeq	r0, [r0], -sl
    ea50:	00003ff4 	strdeq	r3, [r0], -r4
    ea54:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    ea58:	000000e7 	andeq	r0, r0, r7, ror #1
    ea5c:	000038d0 	ldrdeq	r3, [r0], -r0
    ea60:	00000014 	andeq	r0, r0, r4, lsl r0
    ea64:	05969c01 	ldreq	r9, [r6, #3073]	; 0xc01
    ea68:	f71f0000 			; <UNDEFINED> instruction: 0xf71f0000
    ea6c:	07000000 	streq	r0, [r0, -r0]
    ea70:	16000040 	strne	r0, [r0], -r0, asr #32
    ea74:	00000103 	andeq	r0, r0, r3, lsl #2
    ea78:	00004028 	andeq	r4, r0, r8, lsr #32
    ea7c:	0038d215 	eorseq	sp, r8, r5, lsl r2
    ea80:	00000a00 	andeq	r0, r0, r0, lsl #20
    ea84:	00f71f00 	rscseq	r1, r7, r0, lsl #30
    ea88:	40470000 	submi	r0, r7, r0
    ea8c:	d2150000 	andsle	r0, r5, #0
    ea90:	0a000038 	beq	eb78 <__exidx_end+0x9e24>
    ea94:	16000000 	strne	r0, [r0], -r0
    ea98:	00000103 	andeq	r0, r0, r3, lsl #2
    ea9c:	00004068 	andeq	r4, r0, r8, rrx
    eaa0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    eaa4:	00000110 	andeq	r0, r0, r0, lsl r1
    eaa8:	000038e4 	andeq	r3, r0, r4, ror #17
    eaac:	00000014 	andeq	r0, r0, r4, lsl r0
    eab0:	05e29c01 	strbeq	r9, [r2, #3073]!	; 0xc01
    eab4:	201f0000 	andscs	r0, pc, r0
    eab8:	7b000001 	blvc	eac4 <__exidx_end+0x9d70>
    eabc:	16000040 	strne	r0, [r0], -r0, asr #32
    eac0:	0000012c 	andeq	r0, r0, ip, lsr #2
    eac4:	0000409c 	muleq	r0, ip, r0
    eac8:	0038e615 	eorseq	lr, r8, r5, lsl r6
    eacc:	00000a00 	andeq	r0, r0, r0, lsl #20
    ead0:	01201f00 			; <UNDEFINED> instruction: 0x01201f00
    ead4:	40bb0000 	adcsmi	r0, fp, r0
    ead8:	e6150000 	ldr	r0, [r5], -r0
    eadc:	0a000038 	beq	ebc4 <__exidx_end+0x9e70>
    eae0:	16000000 	strne	r0, [r0], -r0
    eae4:	0000012c 	andeq	r0, r0, ip, lsr #2
    eae8:	000040dc 	ldrdeq	r4, [r0], -ip
    eaec:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    eaf0:	00000139 	andeq	r0, r0, r9, lsr r1
    eaf4:	000038f8 	strdeq	r3, [r0], -r8
    eaf8:	00000028 	andeq	r0, r0, r8, lsr #32
    eafc:	063c9c01 	ldrteq	r9, [ip], -r1, lsl #24
    eb00:	491f0000 	ldmdbmi	pc, {}	; <UNPREDICTABLE>
    eb04:	ef000001 	svc	0x00000001
    eb08:	16000040 	strne	r0, [r0], -r0, asr #32
    eb0c:	00000155 	andeq	r0, r0, r5, asr r1
    eb10:	00004110 	andeq	r4, r0, r0, lsl r1
    eb14:	00016120 	andeq	r6, r1, r0, lsr #2
    eb18:	38fa1500 	ldmcc	sl!, {r8, sl, ip}^
    eb1c:	001c0000 	andseq	r0, ip, r0
    eb20:	491f0000 	ldmdbmi	pc, {}	; <UNPREDICTABLE>
    eb24:	2f000001 	svccs	0x00000001
    eb28:	15000041 	strne	r0, [r0, #-65]	; 0xffffffbf
    eb2c:	000038fa 	strdeq	r3, [r0], -sl
    eb30:	0000001c 	andeq	r0, r0, ip, lsl r0
    eb34:	00015516 	andeq	r5, r1, r6, lsl r5
    eb38:	00415000 	subeq	r5, r1, r0
    eb3c:	01611600 	cmneq	r1, r0, lsl #12
    eb40:	417d0000 	cmnmi	sp, r0
    eb44:	00000000 	andeq	r0, r0, r0
    eb48:	30f91b00 	rscscc	r1, r9, r0, lsl #22
    eb4c:	cf020000 	svcgt	0x00020000
    eb50:	0000008c 	andeq	r0, r0, ip, lsl #1
    eb54:	00003920 	andeq	r3, r0, r0, lsr #18
    eb58:	00000010 	andeq	r0, r0, r0, lsl r0
    eb5c:	06669c01 	strbteq	r9, [r6], -r1, lsl #24
    eb60:	931d0000 	tstls	sp, #0
    eb64:	01000031 	tsteq	r0, r1, lsr r0
    eb68:	008c0384 	addeq	r0, ip, r4, lsl #7
    eb6c:	41900000 	orrsmi	r0, r0, r0
    eb70:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    eb74:	0000016e 	andeq	r0, r0, lr, ror #2
    eb78:	00003930 	andeq	r3, r0, r0, lsr r9
    eb7c:	0000002c 	andeq	r0, r0, ip, lsr #32
    eb80:	06c09c01 	strbeq	r9, [r0], r1, lsl #24
    eb84:	7e1f0000 	cdpvc	0, 1, cr0, cr15, cr0, {0}
    eb88:	ab000001 	blge	eb94 <__exidx_end+0x9e40>
    eb8c:	16000041 	strne	r0, [r0], -r1, asr #32
    eb90:	0000018a 	andeq	r0, r0, sl, lsl #3
    eb94:	000041cc 	andeq	r4, r0, ip, asr #3
    eb98:	00019620 	andeq	r9, r1, r0, lsr #12
    eb9c:	39321500 	ldmdbcc	r2!, {r8, sl, ip}
    eba0:	001e0000 	andseq	r0, lr, r0
    eba4:	7e1f0000 	cdpvc	0, 1, cr0, cr15, cr0, {0}
    eba8:	ef000001 	svc	0x00000001
    ebac:	15000041 	strne	r0, [r0, #-65]	; 0xffffffbf
    ebb0:	00003932 	andeq	r3, r0, r2, lsr r9
    ebb4:	0000001e 	andeq	r0, r0, lr, lsl r0
    ebb8:	00018a16 	andeq	r8, r1, r6, lsl sl
    ebbc:	00421000 	subeq	r1, r2, r0
    ebc0:	01961600 	orrseq	r1, r6, r0, lsl #12
    ebc4:	423d0000 	eorsmi	r0, sp, #0
    ebc8:	00000000 	andeq	r0, r0, r0
    ebcc:	01a31e00 			; <UNDEFINED> instruction: 0x01a31e00
    ebd0:	395c0000 	ldmdbcc	ip, {}^	; <UNPREDICTABLE>
    ebd4:	00140000 	andseq	r0, r4, r0
    ebd8:	9c010000 	stcls	0, cr0, [r1], {-0}
    ebdc:	0000070c 	andeq	r0, r0, ip, lsl #14
    ebe0:	0001b31f 	andeq	fp, r1, pc, lsl r3
    ebe4:	00425000 	subeq	r5, r2, r0
    ebe8:	01bf1600 			; <UNDEFINED> instruction: 0x01bf1600
    ebec:	42710000 	rsbsmi	r0, r1, #0
    ebf0:	5e150000 	cdppl	0, 1, cr0, cr5, cr0, {0}
    ebf4:	0a000039 	beq	ece0 <__exidx_end+0x9f8c>
    ebf8:	1f000000 	svcne	0x00000000
    ebfc:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
    ec00:	00004290 	muleq	r0, r0, r2
    ec04:	00395e15 	eorseq	r5, r9, r5, lsl lr
    ec08:	00000a00 	andeq	r0, r0, r0, lsl #20
    ec0c:	01bf1600 			; <UNDEFINED> instruction: 0x01bf1600
    ec10:	42b10000 	adcsmi	r0, r1, #0
    ec14:	00000000 	andeq	r0, r0, r0
    ec18:	01cc1e00 	biceq	r1, ip, r0, lsl #28
    ec1c:	39700000 	ldmdbcc	r0!, {}^	; <UNPREDICTABLE>
    ec20:	00140000 	andseq	r0, r4, r0
    ec24:	9c010000 	stcls	0, cr0, [r1], {-0}
    ec28:	00000758 	andeq	r0, r0, r8, asr r7
    ec2c:	0001dc1f 	andeq	sp, r1, pc, lsl ip
    ec30:	0042c400 	subeq	ip, r2, r0, lsl #8
    ec34:	01e81600 	mvneq	r1, r0, lsl #12
    ec38:	42e50000 	rscmi	r0, r5, #0
    ec3c:	72150000 	andsvc	r0, r5, #0
    ec40:	0a000039 	beq	ed2c <__exidx_end+0x9fd8>
    ec44:	1f000000 	svcne	0x00000000
    ec48:	000001dc 	ldrdeq	r0, [r0], -ip
    ec4c:	00004304 	andeq	r4, r0, r4, lsl #6
    ec50:	00397215 	eorseq	r7, r9, r5, lsl r2
    ec54:	00000a00 	andeq	r0, r0, r0, lsl #20
    ec58:	01e81600 	mvneq	r1, r0, lsl #12
    ec5c:	43250000 			; <UNDEFINED> instruction: 0x43250000
    ec60:	00000000 	andeq	r0, r0, r0
    ec64:	2e931700 	cdpcs	7, 9, cr1, cr3, cr0, {0}
    ec68:	73020000 	movwvc	r0, #8192	; 0x2000
    ec6c:	00003984 	andeq	r3, r0, r4, lsl #19
    ec70:	00000110 	andeq	r0, r0, r0, lsl r1
    ec74:	09639c01 	stmdbeq	r3!, {r0, sl, fp, ip, pc}^
    ec78:	3e1c0000 	cdpcc	0, 1, cr0, cr12, cr0, {0}
    ec7c:	0100002f 	tsteq	r0, pc, lsr #32
    ec80:	008c0127 	addeq	r0, ip, r7, lsr #2
    ec84:	43380000 	teqmi	r8, #0
    ec88:	aa1c0000 	bge	70ec90 <__ccfg+0x6eece8>
    ec8c:	0100002f 	tsteq	r0, pc, lsr #32
    ec90:	008c0127 	addeq	r0, ip, r7, lsr #2
    ec94:	43640000 	cmnmi	r4, #0
    ec98:	fd1d0000 	ldc2	0, cr0, [sp, #-0]
    ec9c:	01000032 	tsteq	r0, r2, lsr r0
    eca0:	008c0129 	addeq	r0, ip, r9, lsr #2
    eca4:	43850000 	orrmi	r0, r5, #0
    eca8:	f5210000 			; <UNDEFINED> instruction: 0xf5210000
    ecac:	b4000001 	strlt	r0, [r0], #-1
    ecb0:	f8000039 			; <UNDEFINED> instruction: 0xf8000039
    ecb4:	01000010 	tsteq	r0, r0, lsl r0
    ecb8:	07c10140 	strbeq	r0, [r1, r0, asr #2]
    ecbc:	f8120000 			; <UNDEFINED> instruction: 0xf8120000
    ecc0:	16000010 			; <UNDEFINED> instruction: 0x16000010
    ecc4:	00000205 	andeq	r0, r0, r5, lsl #4
    ecc8:	00004453 	andeq	r4, r0, r3, asr r4
    eccc:	8e220000 	cdphi	0, 2, cr0, cr2, cr0, {0}
    ecd0:	43000039 	movwmi	r0, #57	; 0x39
    ecd4:	d6000003 	strle	r0, [r0], -r3
    ecd8:	1a000007 	bne	ecfc <__exidx_end+0x9fa8>
    ecdc:	f3035001 	vhadd.u8	d5, d3, d1
    ece0:	22005101 	andcs	r5, r0, #1073741824	; 0x40000000
    ece4:	0000399a 	muleq	r0, sl, r9
    ece8:	00000ad6 	ldrdeq	r0, [r0], -r6
    ecec:	000007ef 	andeq	r0, r0, pc, ror #15
    ecf0:	0151011a 	cmpeq	r1, sl, lsl r1
    ecf4:	50011a48 	andpl	r1, r1, r8, asr #20
    ecf8:	00007402 	andeq	r7, r0, r2, lsl #8
    ecfc:	00399e23 	eorseq	r9, r9, r3, lsr #28
    ed00:	0003bd00 	andeq	fp, r3, r0, lsl #26
    ed04:	39b42400 	ldmibcc	r4!, {sl, sp}
    ed08:	76020000 	strvc	r0, [r2], -r0
    ed0c:	00081d00 	andeq	r1, r8, r0, lsl #26
    ed10:	53011a00 	movwpl	r1, #6656	; 0x1a00
    ed14:	011a3001 	tsteq	sl, r1
    ed18:	ff0a0352 			; <UNDEFINED> instruction: 0xff0a0352
    ed1c:	51011a03 	tstpl	r1, r3, lsl #20
    ed20:	1a2c0802 	bne	b10d30 <__ccfg+0xaf0d88>
    ed24:	74025001 	strvc	r5, [r2], #-1
    ed28:	c4220000 	strtgt	r0, [r2], #-0
    ed2c:	d6000039 			; <UNDEFINED> instruction: 0xd6000039
    ed30:	3600000a 	strcc	r0, [r0], -sl
    ed34:	1a000008 	bne	ed5c <__exidx_end+0xa008>
    ed38:	4c015101 	stfmis	f5, [r1], {1}
    ed3c:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    ed40:	23000074 	movwcs	r0, #116	; 0x74
    ed44:	000039c8 	andeq	r3, r0, r8, asr #19
    ed48:	00000404 	andeq	r0, r0, r4, lsl #8
    ed4c:	0039d222 	eorseq	sp, r9, r2, lsr #4
    ed50:	000ad600 	andeq	sp, sl, r0, lsl #12
    ed54:	00085800 	andeq	r5, r8, r0, lsl #16
    ed58:	51011a00 	tstpl	r1, r0, lsl #20
    ed5c:	011a4401 	tsteq	sl, r1, lsl #8
    ed60:	00740250 	rsbseq	r0, r4, r0, asr r2
    ed64:	39d62300 	ldmibcc	r6, {r8, r9, sp}^
    ed68:	043e0000 	ldrteq	r0, [lr], #-0
    ed6c:	e0220000 	eor	r0, r2, r0
    ed70:	d6000039 			; <UNDEFINED> instruction: 0xd6000039
    ed74:	7a00000a 	bvc	eda4 <__exidx_end+0xa050>
    ed78:	1a000008 	bne	eda0 <__exidx_end+0xa04c>
    ed7c:	40015101 	andmi	r5, r1, r1, lsl #2
    ed80:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    ed84:	22000074 	andcs	r0, r0, #116	; 0x74
    ed88:	000039e6 	andeq	r3, r0, r6, ror #19
    ed8c:	00000478 	andeq	r0, r0, r8, ror r4
    ed90:	0000088e 	andeq	r0, r0, lr, lsl #17
    ed94:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    ed98:	22000075 	andcs	r0, r0, #117	; 0x75
    ed9c:	000039f0 	strdeq	r3, [r0], -r0
    eda0:	00000ad6 	ldrdeq	r0, [r0], -r6
    eda4:	000008a7 	andeq	r0, r0, r7, lsr #17
    eda8:	0151011a 	cmpeq	r1, sl, lsl r1
    edac:	50011a3c 	andpl	r1, r1, ip, lsr sl
    edb0:	00007402 	andeq	r7, r0, r2, lsl #8
    edb4:	0039f622 	eorseq	pc, r9, r2, lsr #12
    edb8:	0000e700 	andeq	lr, r0, r0, lsl #14
    edbc:	0008bb00 	andeq	fp, r8, r0, lsl #22
    edc0:	50011a00 	andpl	r1, r1, r0, lsl #20
    edc4:	00007502 	andeq	r7, r0, r2, lsl #10
    edc8:	003a0822 	eorseq	r0, sl, r2, lsr #16
    edcc:	00011000 	andeq	r1, r1, r0
    edd0:	0008cf00 	andeq	ip, r8, r0, lsl #30
    edd4:	50011a00 	andpl	r1, r1, r0, lsl #20
    edd8:	00007502 	andeq	r7, r0, r2, lsl #10
    eddc:	003a1622 	eorseq	r1, sl, r2, lsr #12
    ede0:	00013900 	andeq	r3, r1, r0, lsl #18
    ede4:	0008e300 	andeq	lr, r8, r0, lsl #6
    ede8:	50011a00 	andpl	r1, r1, r0, lsl #20
    edec:	00007502 	andeq	r7, r0, r2, lsl #10
    edf0:	003a2022 	eorseq	r2, sl, r2, lsr #32
    edf4:	000ad600 	andeq	sp, sl, r0, lsl #12
    edf8:	0008fd00 	andeq	pc, r8, r0, lsl #26
    edfc:	51011a00 	tstpl	r1, r0, lsl #20
    ee00:	1a280802 	bne	a10e10 <__ccfg+0x9f0e68>
    ee04:	74025001 	strvc	r5, [r2], #-1
    ee08:	26220000 	strtcs	r0, [r2], -r0
    ee0c:	be00003a 	mcrlt	0, 0, r0, cr0, cr10, {1}
    ee10:	11000000 	mrsne	r0, (UNDEF: 0)
    ee14:	1a000009 	bne	ee40 <__exidx_end+0xa0ec>
    ee18:	75025001 	strvc	r5, [r2, #-1]
    ee1c:	38220000 	stmdacc	r2!, {}	; <UNPREDICTABLE>
    ee20:	a300003a 	movwge	r0, #58	; 0x3a
    ee24:	25000001 	strcs	r0, [r0, #-1]
    ee28:	1a000009 	bne	ee54 <__exidx_end+0xa100>
    ee2c:	75025001 	strvc	r5, [r2, #-1]
    ee30:	4a220000 	bmi	88ee38 <__ccfg+0x86ee90>
    ee34:	cc00003a 	stcgt	0, cr0, [r0], {58}	; 0x3a
    ee38:	39000001 	stmdbcc	r0, {r0}
    ee3c:	1a000009 	bne	ee68 <__exidx_end+0xa114>
    ee40:	75025001 	strvc	r5, [r2, #-1]
    ee44:	5e220000 	cdppl	0, 2, cr0, cr2, cr0, {0}
    ee48:	6e00003a 	mcrvs	0, 0, r0, cr0, cr10, {1}
    ee4c:	4d000001 	stcmi	0, cr0, [r0, #-4]
    ee50:	1a000009 	bne	ee7c <__exidx_end+0xa128>
    ee54:	75025001 	strvc	r5, [r2, #-1]
    ee58:	68190000 	ldmdavs	r9, {}	; <UNPREDICTABLE>
    ee5c:	d600003a 			; <UNDEFINED> instruction: 0xd600003a
    ee60:	1a00000a 	bne	ee90 <__exidx_end+0xa13c>
    ee64:	38015101 	stmdacc	r1, {r0, r8, ip, lr}
    ee68:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    ee6c:	00000074 	andeq	r0, r0, r4, ror r0
    ee70:	002f1017 	eoreq	r1, pc, r7, lsl r0	; <UNPREDICTABLE>
    ee74:	94fd0200 	ldrbtls	r0, [sp], #512	; 0x200
    ee78:	6400003a 	strvs	r0, [r0], #-58	; 0xffffffc6
    ee7c:	01000000 	mrseq	r0, (UNDEF: 0)
    ee80:	0009899c 	muleq	r9, ip, r9
    ee84:	30c71d00 	sbccc	r1, r7, r0, lsl #26
    ee88:	eb010000 	bl	4ee90 <__ccfg+0x2eee8>
    ee8c:	00008c03 	andeq	r8, r0, r3, lsl #24
    ee90:	00446c00 	subeq	r6, r4, r0, lsl #24
    ee94:	3d0c0000 	stccc	0, cr0, [ip, #-0]
    ee98:	02000034 	andeq	r0, r0, #52	; 0x34
    ee9c:	3af80106 	bcc	ffe0f2bc <_estack+0xdfe0a2bc>
    eea0:	00280000 	eoreq	r0, r8, r0
    eea4:	9c010000 	stcls	0, cr0, [r1], {-0}
    eea8:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
    eeac:	0032941c 	eorseq	r9, r2, ip, lsl r4
    eeb0:	04130100 	ldreq	r0, [r3], #-256	; 0xffffff00
    eeb4:	0000008c 	andeq	r0, r0, ip, lsl #1
    eeb8:	00004487 	andeq	r4, r0, r7, lsl #9
    eebc:	2ec31700 	cdpcs	7, 12, cr1, cr3, cr0, {0}
    eec0:	7a020000 	bvc	8eec8 <__ccfg+0x6ef20>
    eec4:	00003b20 	andeq	r3, r0, r0, lsr #22
    eec8:	00000150 	andeq	r0, r0, r0, asr r1
    eecc:	0ad69c01 	beq	ff5b5ed8 <_estack+0xdf5b0ed8>
    eed0:	aa1c0000 	bge	70eed8 <__ccfg+0x6eef30>
    eed4:	0100002f 	tsteq	r0, pc, lsr #32
    eed8:	008c019b 	umulleq	r0, ip, fp, r1
    eedc:	44a80000 	strtmi	r0, [r8], #0
    eee0:	db1d0000 	blle	74eee8 <__ccfg+0x72ef40>
    eee4:	01000033 	tsteq	r0, r3, lsr r0
    eee8:	008c019d 	umulleq	r0, ip, sp, r1
    eeec:	45030000 	strmi	r0, [r3, #-0]
    eef0:	fd1d0000 	ldc2	0, cr0, [sp, #-0]
    eef4:	01000032 	tsteq	r0, r2, lsr r0
    eef8:	008c019e 	umulleq	r0, ip, lr, r1
    eefc:	45160000 	ldrmi	r0, [r6, #-0]
    ef00:	471d0000 	ldrmi	r0, [sp, -r0]
    ef04:	01000030 	tsteq	r0, r0, lsr r0
    ef08:	008c019f 	umulleq	r0, ip, pc, r1	; <UNPREDICTABLE>
    ef0c:	45290000 	strmi	r0, [r9, #-0]!
    ef10:	3a1d0000 	bcc	74ef18 <__ccfg+0x72ef70>
    ef14:	01000030 	tsteq	r0, r0, lsr r0
    ef18:	008c01a0 	addeq	r0, ip, r0, lsr #3
    ef1c:	45470000 	strbmi	r0, [r7, #-0]
    ef20:	12250000 	eorne	r0, r5, #0
    ef24:	32000002 	andcc	r0, r0, #2
    ef28:	3e00003c 	mcrcc	0, 0, r0, cr0, cr12, {1}
    ef2c:	01000000 	mrseq	r0, (UNDEF: 0)
    ef30:	aa230216 	bge	8cf790 <__ccfg+0x8af7e8>
    ef34:	3c00003b 	stccc	0, cr0, [r0], {59}	; 0x3b
    ef38:	22000006 	andcs	r0, r0, #6
    ef3c:	00003bcc 	andeq	r3, r0, ip, asr #23
    ef40:	00000af2 	strdeq	r0, [r0], -r2
    ef44:	00000a46 	andeq	r0, r0, r6, asr #20
    ef48:	0151011a 	cmpeq	r1, sl, lsl r1
    ef4c:	50011a31 	andpl	r1, r1, r1, lsr sl
    ef50:	22003401 	andcs	r3, r0, #16777216	; 0x1000000
    ef54:	00003bd2 	ldrdeq	r3, [r0], -r2
    ef58:	00000989 	andeq	r0, r0, r9, lsl #19
    ef5c:	00000a5d 	andeq	r0, r0, sp, asr sl
    ef60:	0550011a 	ldrbeq	r0, [r0, #-282]	; 0xfffffee6
    ef64:	8637bd0c 	ldrthi	fp, [r7], -ip, lsl #26
    ef68:	d8230000 	stmdale	r3!, {}	; <UNPREDICTABLE>
    ef6c:	0800003b 	stmdaeq	r0, {r0, r1, r3, r4, r5}
    ef70:	2200000b 	andcs	r0, r0, #11
    ef74:	00003be2 	andeq	r3, r0, r2, ror #23
    ef78:	00000af2 	strdeq	r0, [r0], -r2
    ef7c:	00000a7f 	andeq	r0, r0, pc, ror sl
    ef80:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
    ef84:	011a0074 	tsteq	sl, r4, ror r0
    ef88:	00340150 	eorseq	r0, r4, r0, asr r1
    ef8c:	003be822 	eorseq	lr, fp, r2, lsr #16
    ef90:	000b0800 	andeq	r0, fp, r0, lsl #16
    ef94:	000a9200 	andeq	r9, sl, r0, lsl #4
    ef98:	50011a00 	andpl	r1, r1, r0, lsl #20
    ef9c:	22003401 	andcs	r3, r0, #16777216	; 0x1000000
    efa0:	00003bf8 	strdeq	r3, [r0], -r8
    efa4:	00000989 	andeq	r0, r0, r9, lsl #19
    efa8:	00000aac 	andeq	r0, r0, ip, lsr #21
    efac:	0850011a 	ldmdaeq	r0, {r1, r3, r4, r8}^
    efb0:	ff0c0074 			; <UNDEFINED> instruction: 0xff0c0074
    efb4:	1a00ffff 	bne	4efb8 <__ccfg+0x2f010>
    efb8:	3c082600 	stccc	6, cr2, [r8], {-0}
    efbc:	0acc0000 	beq	ff30efc4 <_estack+0xdf309fc4>
    efc0:	011a0000 	tsteq	sl, r0
    efc4:	000c0552 	andeq	r0, ip, r2, asr r5
    efc8:	1a600060 	bne	180f150 <__ccfg+0x17ef1a8>
    efcc:	37015101 	strcc	r5, [r1, -r1, lsl #2]
    efd0:	0450011a 	ldrbeq	r0, [r0], #-282	; 0xfffffee6
    efd4:	25480074 	strbcs	r0, [r8, #-116]	; 0xffffff8c
    efd8:	3c1e2300 	ldccc	3, cr2, [lr], {-0}
    efdc:	0af20000 	beq	ffc8efe4 <_estack+0xdfc89fe4>
    efe0:	27000000 	strcs	r0, [r0, -r0]
    efe4:	0000320d 	andeq	r3, r0, sp, lsl #4
    efe8:	f201ca06 	vpmax.s8	d12, d1, d6
    efec:	2800000a 	stmdacs	r0, {r1, r3}
    eff0:	0000008c 	andeq	r0, r0, ip, lsl #1
    eff4:	00008c28 	andeq	r8, r0, r8, lsr #24
    eff8:	008c2800 	addeq	r2, ip, r0, lsl #16
    effc:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    f000:	0000269c 	muleq	r0, ip, r6
    f004:	0b08f907 	bleq	24d428 <__ccfg+0x22d480>
    f008:	8c280000 	stchi	0, cr0, [r8], #-0
    f00c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    f010:	0000008c 	andeq	r0, r0, ip, lsl #1
    f014:	26d52a00 	ldrbcs	r2, [r5], r0, lsl #20
    f018:	10070000 	andne	r0, r7, r0
    f01c:	00008c01 	andeq	r8, r0, r1, lsl #24
    f020:	008c2800 	addeq	r2, ip, r0, lsl #16
    f024:	00000000 	andeq	r0, r0, r0
    f028:	00000923 	andeq	r0, r0, r3, lsr #18
    f02c:	38760004 	ldmdacc	r6!, {r2}^
    f030:	01040000 	mrseq	r0, (UNDEF: 4)
    f034:	000023be 			; <UNDEFINED> instruction: 0x000023be
    f038:	00357f01 	eorseq	r7, r5, r1, lsl #30
    f03c:	00248500 	eoreq	r8, r4, r0, lsl #10
    f040:	0011e800 	andseq	lr, r1, r0, lsl #16
    f044:	00000000 	andeq	r0, r0, r0
    f048:	007ba500 	rsbseq	sl, fp, r0, lsl #10
    f04c:	25280200 	strcs	r0, [r8, #-512]!	; 0xfffffe00
    f050:	1b060000 	blne	18f058 <__ccfg+0x16f0b0>
    f054:	00000030 	andeq	r0, r0, r0, lsr r0
    f058:	e5060103 	str	r0, [r6, #-259]	; 0xfffffefd
    f05c:	02000003 	andeq	r0, r0, #3
    f060:	00002399 	muleq	r0, r9, r3
    f064:	00421d06 	subeq	r1, r2, r6, lsl #26
    f068:	01030000 	mrseq	r0, (UNDEF: 3)
    f06c:	0003e308 	andeq	lr, r3, r8, lsl #6
    f070:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    f074:	00000446 	andeq	r0, r0, r6, asr #8
    f078:	00278f02 	eoreq	r8, r7, r2, lsl #30
    f07c:	5b2b0600 	blpl	ad0884 <__ccfg+0xab08dc>
    f080:	03000000 	movweq	r0, #0
    f084:	028a0702 	addeq	r0, sl, #524288	; 0x80000
    f088:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
    f08c:	06000025 	streq	r0, [r0], -r5, lsr #32
    f090:	00006d3f 	andeq	r6, r0, pc, lsr sp
    f094:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    f098:	000000b4 	strheq	r0, [r0], -r4
    f09c:	00233102 	eoreq	r3, r3, r2, lsl #2
    f0a0:	7f410600 	svcvc	0x00410600
    f0a4:	03000000 	movweq	r0, #0
    f0a8:	007e0704 	rsbseq	r0, lr, r4, lsl #14
    f0ac:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    f0b0:	0000af05 	andeq	sl, r0, r5, lsl #30
    f0b4:	07080300 	streq	r0, [r8, -r0, lsl #6]
    f0b8:	00000079 	andeq	r0, r0, r9, ror r0
    f0bc:	69050404 	stmdbvs	r5, {r2, sl}
    f0c0:	0300746e 	movweq	r7, #1134	; 0x46e
    f0c4:	00830704 	addeq	r0, r3, r4, lsl #14
    f0c8:	2a020000 	bcs	8f0d0 <__ccfg+0x6f128>
    f0cc:	07000025 	streq	r0, [r0, -r5, lsr #32]
    f0d0:	00002513 	andeq	r2, r0, r3, lsl r5
    f0d4:	239b0200 	orrscs	r0, fp, #0, 4
    f0d8:	14070000 	strne	r0, [r7], #-0
    f0dc:	00000037 	andeq	r0, r0, r7, lsr r0
    f0e0:	00279102 	eoreq	r9, r7, r2, lsl #2
    f0e4:	501a0700 	andspl	r0, sl, r0, lsl #14
    f0e8:	02000000 	andeq	r0, r0, #0
    f0ec:	00002520 	andeq	r2, r0, r0, lsr #10
    f0f0:	00621f07 	rsbeq	r1, r2, r7, lsl #30
    f0f4:	33020000 	movwcc	r0, #8192	; 0x2000
    f0f8:	07000023 	streq	r0, [r0, -r3, lsr #32]
    f0fc:	00007420 	andeq	r7, r0, r0, lsr #8
    f100:	235d0200 	cmpcs	sp, #0, 4
    f104:	33080000 	movwcc	r0, #32768	; 0x8000
    f108:	000000e4 	andeq	r0, r0, r4, ror #1
    f10c:	00ea0405 	rsceq	r0, sl, r5, lsl #8
    f110:	05060000 	streq	r0, [r6, #-0]
    f114:	0000f104 	andeq	pc, r0, r4, lsl #2
    f118:	00fc0700 	rscseq	r0, ip, r0, lsl #14
    f11c:	ad080000 	stcge	0, cr0, [r8, #-0]
    f120:	00000000 	andeq	r0, r0, r0
    f124:	002a9302 	eoreq	r9, sl, r2, lsl #6
    f128:	07420900 	strbeq	r0, [r2, -r0, lsl #18]
    f12c:	05000001 	streq	r0, [r0, #-1]
    f130:	00010d04 	andeq	r0, r1, r4, lsl #26
    f134:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    f138:	01260000 			; <UNDEFINED> instruction: 0x01260000
    f13c:	26080000 	strcs	r0, [r8], -r0
    f140:	08000001 	stmdaeq	r0, {r0}
    f144:	000000ce 	andeq	r0, r0, lr, asr #1
    f148:	0000ce08 	andeq	ip, r0, r8, lsl #28
    f14c:	04050000 	streq	r0, [r5], #-0
    f150:	000000ad 	andeq	r0, r0, sp, lsr #1
    f154:	002bfb02 	eoreq	pc, fp, r2, lsl #22
    f158:	37460900 	strbcc	r0, [r6, -r0, lsl #18]
    f15c:	05000001 	streq	r0, [r0, #-1]
    f160:	00013d04 	andeq	r3, r1, r4, lsl #26
    f164:	00ce0a00 	sbceq	r0, lr, r0, lsl #20
    f168:	44020000 	strmi	r0, [r2], #-0
    f16c:	0900002c 	stmdbeq	r0, {r2, r3, r5}
    f170:	00013748 	andeq	r3, r1, r8, asr #14
    f174:	292b0200 	stmdbcs	fp!, {r9}
    f178:	4a090000 	bmi	24f180 <__ccfg+0x22f1d8>
    f17c:	00000158 	andeq	r0, r0, r8, asr r1
    f180:	015e0405 	cmpeq	lr, r5, lsl #8
    f184:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    f188:	6d000000 	stcvs	0, cr0, [r0, #-0]
    f18c:	08000001 	stmdaeq	r0, {r0}
    f190:	000000ce 	andeq	r0, r0, lr, asr #1
    f194:	283a0200 	ldmdacs	sl!, {r9}
    f198:	4c090000 	stcmi	0, cr0, [r9], {-0}
    f19c:	00000137 	andeq	r0, r0, r7, lsr r1
    f1a0:	00279a02 	eoreq	r9, r7, r2, lsl #20
    f1a4:	074e0900 	strbeq	r0, [lr, -r0, lsl #18]
    f1a8:	02000001 	andeq	r0, r0, #1
    f1ac:	0000282a 	andeq	r2, r0, sl, lsr #16
    f1b0:	00e45109 	rsceq	r5, r4, r9, lsl #2
    f1b4:	b4020000 	strlt	r0, [r2], #-0
    f1b8:	09000026 	stmdbeq	r0, {r1, r2, r5}
    f1bc:	00019953 	andeq	r9, r1, r3, asr r9
    f1c0:	9f040500 	svcls	0x00040500
    f1c4:	09000001 	stmdbeq	r0, {r0}
    f1c8:	000000ce 	andeq	r0, r0, lr, asr #1
    f1cc:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    f1d0:	0001b808 	andeq	fp, r1, r8, lsl #16
    f1d4:	00b80800 	adcseq	r0, r8, r0, lsl #16
    f1d8:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
    f1dc:	00000000 	andeq	r0, r0, r0
    f1e0:	00b80405 	adcseq	r0, r8, r5, lsl #8
    f1e4:	a9020000 	stmdbge	r2, {}	; <UNPREDICTABLE>
    f1e8:	0900002a 	stmdbeq	r0, {r1, r3, r5}
    f1ec:	0001c957 	andeq	ip, r1, r7, asr r9
    f1f0:	cf040500 	svcgt	0x00040500
    f1f4:	09000001 	stmdbeq	r0, {r0}
    f1f8:	000000ce 	andeq	r0, r0, lr, asr #1
    f1fc:	000001e3 	andeq	r0, r0, r3, ror #3
    f200:	0001e308 	andeq	lr, r1, r8, lsl #6
    f204:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    f208:	05000000 	streq	r0, [r0, #-0]
    f20c:	0000ce04 	andeq	ip, r0, r4, lsl #28
    f210:	289d0200 	ldmcs	sp, {r9}
    f214:	5a090000 	bpl	24f21c <__ccfg+0x22f274>
    f218:	000001c9 	andeq	r0, r0, r9, asr #3
    f21c:	00295702 	eoreq	r5, r9, r2, lsl #14
    f220:	c95d0900 	ldmdbgt	sp, {r8, fp}^
    f224:	02000001 	andeq	r0, r0, #1
    f228:	000026c6 	andeq	r2, r0, r6, asr #13
    f22c:	01c96009 	biceq	r6, r9, r9
    f230:	b7020000 	strlt	r0, [r2, -r0]
    f234:	0900002a 	stmdbeq	r0, {r1, r3, r5}
    f238:	0000e463 	andeq	lr, r0, r3, ror #8
    f23c:	27040200 	strcs	r0, [r4, -r0, lsl #4]
    f240:	65090000 	strvs	r0, [r9, #-0]
    f244:	00000220 	andeq	r0, r0, r0, lsr #4
    f248:	02260405 	eoreq	r0, r6, #83886080	; 0x5000000
    f24c:	31070000 	mrscc	r0, (UNDEF: 7)
    f250:	08000002 	stmdaeq	r0, {r1}
    f254:	000000ce 	andeq	r0, r0, lr, asr #1
    f258:	2c550200 	lfmcs	f0, 2, [r5], {-0}
    f25c:	67090000 	strvs	r0, [r9, -r0]
    f260:	00000220 	andeq	r0, r0, r0, lsr #4
    f264:	00299902 	eoreq	r9, r9, r2, lsl #18
    f268:	eb690900 	bl	1a51670 <__ccfg+0x1a316c8>
    f26c:	02000000 	andeq	r0, r0, #0
    f270:	00002c34 	andeq	r2, r0, r4, lsr ip
    f274:	00eb6b09 	rsceq	r6, fp, r9, lsl #22
    f278:	66020000 	strvs	r0, [r2], -r0
    f27c:	09000029 	stmdbeq	r0, {r0, r3, r5}
    f280:	0000eb6d 	andeq	lr, r0, sp, ror #22
    f284:	29780200 	ldmdbcs	r8!, {r9}^
    f288:	6f090000 	svcvs	0x00090000
    f28c:	000000eb 	andeq	r0, r0, fp, ror #1
    f290:	7a094c0b 	bvc	2622c4 <__ccfg+0x24231c>
    f294:	00000355 	andeq	r0, r0, r5, asr r3
    f298:	00293c0c 	eoreq	r3, r9, ip, lsl #24
    f29c:	fc7c0900 	ldc2l	9, cr0, [ip], #-0	; <UNPREDICTABLE>
    f2a0:	00000000 	andeq	r0, r0, r0
    f2a4:	002c270c 	eoreq	r2, ip, ip, lsl #14
    f2a8:	2c7d0900 			; <UNDEFINED> instruction: 0x2c7d0900
    f2ac:	04000001 	streq	r0, [r0], #-1
    f2b0:	00294d0c 	eoreq	r4, r9, ip, lsl #26
    f2b4:	427e0900 	rsbsmi	r0, lr, #0, 18
    f2b8:	08000001 	stmdaeq	r0, {r0}
    f2bc:	002b460c 	eoreq	r4, fp, ip, lsl #12
    f2c0:	4d7f0900 			; <UNDEFINED> instruction: 0x4d7f0900
    f2c4:	0c000001 	stceq	0, cr0, [r0], {1}
    f2c8:	002b580c 	eoreq	r5, fp, ip, lsl #16
    f2cc:	6d800900 	vstrvs.16	s0, [r0]	; <UNPREDICTABLE>
    f2d0:	10000001 	andne	r0, r0, r1
    f2d4:	00284b0c 	eoreq	r4, r8, ip, lsl #22
    f2d8:	78810900 	stmvc	r1, {r8, fp}
    f2dc:	14000001 	strne	r0, [r0], #-1
    f2e0:	0028070c 	eoreq	r0, r8, ip, lsl #14
    f2e4:	83820900 	orrhi	r0, r2, #0, 18
    f2e8:	18000001 	stmdane	r0, {r0}
    f2ec:	0029420c 	eoreq	r4, r9, ip, lsl #4
    f2f0:	8e830900 	vdivhi.f16	s0, s6, s0	; <UNPREDICTABLE>
    f2f4:	1c000001 	stcne	0, cr0, [r0], {1}
    f2f8:	002ad10c 	eoreq	sp, sl, ip, lsl #2
    f2fc:	be840900 	vdivlt.f16	s0, s8, s0	; <UNPREDICTABLE>
    f300:	20000001 	andcs	r0, r0, r1
    f304:	0028c90c 	eoreq	ip, r8, ip, lsl #18
    f308:	e9850900 	stmib	r5, {r8, fp}
    f30c:	24000001 	strcs	r0, [r0], #-1
    f310:	0029210c 	eoreq	r2, r9, ip, lsl #2
    f314:	f4860900 	vst2.32	{d0[0],d1[0]}, [r6], r0
    f318:	28000001 	stmdacs	r0, {r0}
    f31c:	002b860c 	eoreq	r8, fp, ip, lsl #12
    f320:	ff870900 			; <UNDEFINED> instruction: 0xff870900
    f324:	2c000001 	stccs	0, cr0, [r0], {1}
    f328:	0028660c 	eoreq	r6, r8, ip, lsl #12
    f32c:	15880900 	strne	r0, [r8, #2304]	; 0x900
    f330:	30000002 	andcc	r0, r0, r2
    f334:	002b740c 	eoreq	r7, fp, ip, lsl #8
    f338:	31890900 	orrcc	r0, r9, r0, lsl #18
    f33c:	34000002 	strcc	r0, [r0], #-2
    f340:	0027450c 	eoreq	r4, r7, ip, lsl #10
    f344:	0a8a0900 	beq	fe29174c <_estack+0xde28c74c>
    f348:	38000002 	stmdacc	r0, {r1}
    f34c:	0029880c 	eoreq	r8, r9, ip, lsl #16
    f350:	3c8b0900 			; <UNDEFINED> instruction: 0x3c8b0900
    f354:	3c000002 	stccc	0, cr0, [r0], {2}
    f358:	002b270c 	eoreq	r2, fp, ip, lsl #14
    f35c:	478c0900 	strmi	r0, [ip, r0, lsl #18]
    f360:	40000002 	andmi	r0, r0, r2
    f364:	0028ab0c 	eoreq	sl, r8, ip, lsl #22
    f368:	528d0900 	addpl	r0, sp, #0, 18
    f36c:	44000002 	strmi	r0, [r0], #-2
    f370:	0026f50c 	eoreq	pc, r6, ip, lsl #10
    f374:	5d8e0900 	vstrpl.16	s0, [lr]	; <UNPREDICTABLE>
    f378:	48000002 	stmdami	r0, {r1}
    f37c:	2a570200 	bcs	15cfb84 <__ccfg+0x15afbdc>
    f380:	8f090000 	svchi	0x00090000
    f384:	00000268 	andeq	r0, r0, r8, ror #4
    f388:	4e01080b 	cdpmi	8, 0, cr0, cr1, cr11, {0}
    f38c:	00000399 	muleq	r0, r9, r3
    f390:	0036ae0c 	eorseq	sl, r6, ip, lsl #28
    f394:	ce4f0100 	dvfgte	f0, f7, f0
    f398:	00000000 	andeq	r0, r0, r0
    f39c:	0036df0c 	eorseq	sp, r6, ip, lsl #30
    f3a0:	b8500100 	ldmdalt	r0, {r8}^
    f3a4:	04000000 	streq	r0, [r0], #-0
    f3a8:	0036190c 	eorseq	r1, r6, ip, lsl #18
    f3ac:	ad510100 	ldfgee	f0, [r1, #-0]
    f3b0:	06000000 	streq	r0, [r0], -r0
    f3b4:	0035cc0c 	eorseq	ip, r5, ip, lsl #24
    f3b8:	a2520100 	subsge	r0, r2, #0, 2
    f3bc:	07000000 	streq	r0, [r0, -r0]
    f3c0:	370b0200 	strcc	r0, [fp, -r0, lsl #4]
    f3c4:	53010000 	movwpl	r0, #4096	; 0x1000
    f3c8:	00000360 	andeq	r0, r0, r0, ror #6
    f3cc:	0005fc0d 	andeq	pc, r5, sp, lsl #24
    f3d0:	01dc0200 	bicseq	r0, ip, r0, lsl #4
    f3d4:	0003be03 	andeq	fp, r3, r3, lsl #28
    f3d8:	05b60e00 	ldreq	r0, [r6, #3584]!	; 0xe00
    f3dc:	dc020000 	stcle	0, cr0, [r2], {-0}
    f3e0:	0000ce01 	andeq	ip, r0, r1, lsl #28
    f3e4:	110f0000 	mrsne	r0, CPSR
    f3e8:	02000006 	andeq	r0, r0, #6
    f3ec:	00ce022c 	sbceq	r0, lr, ip, lsr #4
    f3f0:	10030000 	andne	r0, r3, r0
    f3f4:	00000715 	andeq	r0, r0, r5, lsl r7
    f3f8:	03022a04 	movweq	r2, #10756	; 0x2a04
    f3fc:	00330611 	eorseq	r0, r3, r1, lsl r6
    f400:	c3e90500 	mvngt	r0, #0, 10
    f404:	03000000 	movweq	r0, #0
    f408:	000003fb 	strdeq	r0, [r0], -fp
    f40c:	00305612 	eorseq	r5, r0, r2, lsl r6
    f410:	cee90500 	cdpgt	5, 14, cr0, cr9, cr0, {0}
    f414:	13000000 	movwne	r0, #0
    f418:	0000335f 	andeq	r3, r0, pc, asr r3
    f41c:	00c3ef05 	sbceq	lr, r3, r5, lsl #30
    f420:	0d000000 	stceq	0, cr0, [r0, #-0]
    f424:	000035e1 	andeq	r3, r0, r1, ror #11
    f428:	03025c04 	movweq	r5, #11268	; 0x2c04
    f42c:	00000415 	andeq	r0, r0, r5, lsl r4
    f430:	0035bb0e 	eorseq	fp, r5, lr, lsl #22
    f434:	025c0400 	subseq	r0, ip, #0, 8
    f438:	000000ce 	andeq	r0, r0, lr, asr #1
    f43c:	2a811000 	bcs	fe053444 <_estack+0xde04e444>
    f440:	40030000 	andmi	r0, r3, r0
    f444:	650f0301 	strvs	r0, [pc, #-769]	; f14b <__exidx_end+0xa3f7>
    f448:	04000036 	streq	r0, [r0], #-54	; 0xffffffca
    f44c:	042b023e 	strteq	r0, [fp], #-574	; 0xfffffdc2
    f450:	03030000 	movweq	r0, #12288	; 0x3000
    f454:	0c6f0201 	sfmeq	f0, 2, [pc], #-4	; f458 <__exidx_end+0xa704>
    f458:	b5140000 	ldrlt	r0, [r4, #-0]
    f45c:	0a000036 	beq	f53c <__exidx_end+0xa7e8>
    f460:	0000009e 	muleq	r0, lr, r0
    f464:	0000f400 	andeq	pc, r0, r0, lsl #8
    f468:	cd9c0100 	ldfgts	f0, [ip]
    f46c:	15000005 	strne	r0, [r0, #-5]
    f470:	00003611 	andeq	r3, r0, r1, lsl r6
    f474:	00ce7b01 	sbceq	r7, lr, r1, lsl #22
    f478:	455a0000 	ldrbmi	r0, [sl, #-0]
    f47c:	d3160000 	tstle	r6, #0
    f480:	01000035 	tsteq	r0, r5, lsr r0
    f484:	0000ce7c 	andeq	ip, r0, ip, ror lr
    f488:	1707ff00 	strne	pc, [r7, -r0, lsl #30]
    f48c:	000003a4 	andeq	r0, r0, r4, lsr #7
    f490:	00000000 	andeq	r0, r0, r0
    f494:	000011b8 			; <UNDEFINED> instruction: 0x000011b8
    f498:	047d8101 	ldrbteq	r8, [sp], #-257	; 0xfffffeff
    f49c:	b1180000 	tstlt	r8, r0
    f4a0:	01000003 	tsteq	r0, r3
    f4a4:	03be1900 			; <UNDEFINED> instruction: 0x03be1900
    f4a8:	00000000 	andeq	r0, r0, r0
    f4ac:	00040000 	andeq	r0, r4, r0
    f4b0:	82010000 	andhi	r0, r1, #0
    f4b4:	0004151a 	andeq	r1, r4, sl, lsl r5
    f4b8:	00000000 	andeq	r0, r0, r0
    f4bc:	00000800 	andeq	r0, r0, r0, lsl #16
    f4c0:	a9a10100 	stmibge	r1!, {r8}
    f4c4:	1b000004 	blne	f4dc <__exidx_end+0xa788>
    f4c8:	00000000 	andeq	r0, r0, r0
    f4cc:	000008de 	ldrdeq	r0, [r0], -lr
    f4d0:	03cb1900 	biceq	r1, fp, #0, 18
    f4d4:	00000000 	andeq	r0, r0, r0
    f4d8:	00060000 	andeq	r0, r6, r0
    f4dc:	b1010000 	mrslt	r0, (UNDEF: 1)
    f4e0:	00041e19 	andeq	r1, r4, r9, lsl lr
    f4e4:	00000000 	andeq	r0, r0, r0
    f4e8:	00000400 	andeq	r0, r0, r0, lsl #8
    f4ec:	1ab20100 	bne	fec8f8f4 <_estack+0xdec8a8f4>
    f4f0:	000003fb 	strdeq	r0, [r0], -fp
    f4f4:	00000000 	andeq	r0, r0, r0
    f4f8:	0000000a 	andeq	r0, r0, sl
    f4fc:	04e1b801 	strbteq	fp, [r1], #2049	; 0x801
    f500:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    f504:	11000004 	tstne	r0, r4
    f508:	03cb1900 	biceq	r1, fp, #0, 18
    f50c:	00000000 	andeq	r0, r0, r0
    f510:	00040000 	andeq	r0, r4, r0
    f514:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    f518:	00041e19 	andeq	r1, r4, r9, lsl lr
    f51c:	00000000 	andeq	r0, r0, r0
    f520:	00000200 	andeq	r0, r0, r0, lsl #4
    f524:	19ba0100 	ldmibne	sl!, {r8}
    f528:	000003cb 	andeq	r0, r0, fp, asr #7
    f52c:	00000000 	andeq	r0, r0, r0
    f530:	00000006 	andeq	r0, r0, r6
    f534:	1e19cf01 	cdpne	15, 1, cr12, cr9, cr1, {0}
    f538:	00000004 	andeq	r0, r0, r4
    f53c:	02000000 	andeq	r0, r0, #0
    f540:	01000000 	mrseq	r0, (UNDEF: 0)
    f544:	00001cd0 	ldrdeq	r1, [r0], -r0
    f548:	052e0000 	streq	r0, [lr, #-0]!
    f54c:	011d0000 	tsteq	sp, r0
    f550:	ff0a0350 			; <UNDEFINED> instruction: 0xff0a0350
    f554:	001c0007 	andseq	r0, ip, r7
    f558:	3f000000 	svccc	0x00000000
    f55c:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    f560:	0a035001 	beq	e356c <__ccfg+0xc35c4>
    f564:	1e0007ff 	mcrne	7, 0, r0, cr0, cr15, {7}
    f568:	00000000 	andeq	r0, r0, r0
    f56c:	000008ef 	andeq	r0, r0, pc, ror #17
    f570:	00000557 	andeq	r0, r0, r7, asr r5
    f574:	0151011d 	cmpeq	r1, sp, lsl r1
    f578:	50011d31 	andpl	r1, r1, r1, lsr sp
    f57c:	1e003301 	cdpne	3, 0, cr3, cr0, cr1, {0}
    f580:	00000000 	andeq	r0, r0, r0
    f584:	000008ef 	andeq	r0, r0, pc, ror #17
    f588:	0000056f 	andeq	r0, r0, pc, ror #10
    f58c:	0151011d 	cmpeq	r1, sp, lsl r1
    f590:	50011d33 	andpl	r1, r1, r3, lsr sp
    f594:	1e003401 	cdpne	4, 0, cr3, cr0, cr1, {0}
    f598:	00000000 	andeq	r0, r0, r0
    f59c:	00000905 	andeq	r0, r0, r5, lsl #18
    f5a0:	00000582 	andeq	r0, r0, r2, lsl #11
    f5a4:	0150011d 	cmpeq	r0, sp, lsl r1
    f5a8:	001c0031 	andseq	r0, ip, r1, lsr r0
    f5ac:	91000000 	mrsls	r0, (UNDEF: 0)
    f5b0:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    f5b4:	37015001 	strcc	r5, [r1, -r1]
    f5b8:	00001c00 	andeq	r1, r0, r0, lsl #24
    f5bc:	05a00000 	streq	r0, [r0, #0]!
    f5c0:	011d0000 	tsteq	sp, r0
    f5c4:	00370150 	eorseq	r0, r7, r0, asr r1
    f5c8:	0000001c 	andeq	r0, r0, ip, lsl r0
    f5cc:	0005b000 	andeq	fp, r5, r0
    f5d0:	50011d00 	andpl	r1, r1, r0, lsl #26
    f5d4:	00007602 	andeq	r7, r0, r2, lsl #12
    f5d8:	0000001c 	andeq	r0, r0, ip, lsl r0
    f5dc:	0005c000 	andeq	ip, r5, r0
    f5e0:	50011d00 	andpl	r1, r1, r0, lsl #26
    f5e4:	00007602 	andeq	r7, r0, r2, lsl #12
    f5e8:	0000001f 	andeq	r0, r0, pc, lsl r0
    f5ec:	50011d00 	andpl	r1, r1, r0, lsl #26
    f5f0:	00007602 	andeq	r7, r0, r2, lsl #12
    f5f4:	35572000 	ldrbcc	r2, [r7, #-0]
    f5f8:	010a0000 	mrseq	r0, (UNDEF: 10)
    f5fc:	003c7001 	eorseq	r7, ip, r1
    f600:	00022000 	andeq	r2, r2, r0
    f604:	c89c0100 	ldmgt	ip, {r8}
    f608:	21000007 	tstcs	r0, r7
    f60c:	00003657 	andeq	r3, r0, r7, asr r6
    f610:	00ceda01 	sbceq	sp, lr, r1, lsl #20
    f614:	45850000 	strmi	r0, [r5]
    f618:	00150000 	andseq	r0, r5, r0
    f61c:	01000035 	tsteq	r0, r5, lsr r0
    f620:	0000c3dc 	ldrdeq	ip, [r0], -ip	; <UNPREDICTABLE>
    f624:	0045b100 	subeq	fp, r5, r0, lsl #2
    f628:	36711500 	ldrbtcc	r1, [r1], -r0, lsl #10
    f62c:	dd010000 	stcle	0, cr0, [r1, #-0]
    f630:	000000c3 	andeq	r0, r0, r3, asr #1
    f634:	000045cf 	andeq	r4, r0, pc, asr #11
    f638:	00363715 	eorseq	r3, r6, r5, lsl r7
    f63c:	c3de0100 	bicsgt	r0, lr, #0, 2
    f640:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    f644:	15000046 	strne	r0, [r0, #-70]	; 0xffffffba
    f648:	000036fd 	strdeq	r3, [r0], -sp
    f64c:	00c3df01 	sbceq	sp, r3, r1, lsl #30
    f650:	46470000 	strbmi	r0, [r7], -r0
    f654:	f2150000 	vhadd.s16	d0, d5, d0
    f658:	01000034 	tsteq	r0, r4, lsr r0
    f65c:	0000c3e0 	andeq	ip, r0, r0, ror #7
    f660:	00466500 	subeq	r6, r6, r0, lsl #10
    f664:	35082200 	strcc	r2, [r8, #-512]	; 0xfffffe00
    f668:	e1010000 	mrs	r0, (UNDEF: 1)
    f66c:	000000c3 	andeq	r0, r0, r3, asr #1
    f670:	aa155301 	bge	56427c <__ccfg+0x5442d4>
    f674:	0100002f 	tsteq	r0, pc, lsr #32
    f678:	0000cee2 	andeq	ip, r0, r2, ror #29
    f67c:	00467800 	subeq	r7, r6, r0, lsl #16
    f680:	36951500 	ldrcc	r1, [r5], r0, lsl #10
    f684:	e3010000 	movw	r0, #4096	; 0x1000
    f688:	000000ce 	andeq	r0, r0, lr, asr #1
    f68c:	0000468b 	andeq	r4, r0, fp, lsl #13
    f690:	00351c15 	eorseq	r1, r5, r5, lsl ip
    f694:	cee40100 	cdpgt	1, 14, cr0, cr4, cr0, {0}
    f698:	aa000000 	bge	f6a0 <__exidx_end+0xa94c>
    f69c:	23000046 	movwcs	r0, #70	; 0x46
    f6a0:	01006964 	tsteq	r0, r4, ror #18
    f6a4:	0000cee5 	andeq	ip, r0, r5, ror #29
    f6a8:	0046bd00 	subeq	fp, r6, r0, lsl #26
    f6ac:	69642300 	stmdbvs	r4!, {r8, r9, sp}^
    f6b0:	e6010069 	str	r0, [r1], -r9, rrx
    f6b4:	000000ce 	andeq	r0, r0, lr, asr #1
    f6b8:	000046f3 	strdeq	r4, [r0], -r3
    f6bc:	00697423 	rsbeq	r7, r9, r3, lsr #8
    f6c0:	00cee701 	sbceq	lr, lr, r1, lsl #14
    f6c4:	47290000 	strmi	r0, [r9, -r0]!
    f6c8:	63230000 			; <UNDEFINED> instruction: 0x63230000
    f6cc:	e8010064 	stmda	r1, {r2, r5, r6}
    f6d0:	000000ce 	andeq	r0, r0, lr, asr #1
    f6d4:	00004799 	muleq	r0, r9, r7
    f6d8:	006c6323 	rsbeq	r6, ip, r3, lsr #6
    f6dc:	00cee901 	sbceq	lr, lr, r1, lsl #18
    f6e0:	47ac0000 	strmi	r0, [ip, r0]!
    f6e4:	7e150000 	cdpvc	0, 1, cr0, cr5, cr0, {0}
    f6e8:	01000003 	tsteq	r0, r3
    f6ec:	0000ceea 	andeq	ip, r0, sl, ror #29
    f6f0:	0047bf00 	subeq	fp, r7, r0, lsl #30
    f6f4:	006b2400 	rsbeq	r2, fp, r0, lsl #8
    f6f8:	00ceeb01 	sbceq	lr, lr, r1, lsl #22
    f6fc:	09130000 	ldmdbeq	r3, {}	; <UNPREDICTABLE>
    f700:	01000036 	tsteq	r0, r6, lsr r0
    f704:	0000ceec 	andeq	ip, r0, ip, ror #29
    f708:	35f71500 	ldrbcc	r1, [r7, #1280]!	; 0x500
    f70c:	ed010000 	stc	0, cr0, [r1, #-0]
    f710:	000000ce 	andeq	r0, r0, lr, asr #1
    f714:	000047dd 	ldrdeq	r4, [r0], -sp
    f718:	0035c715 	eorseq	ip, r5, r5, lsl r7
    f71c:	ceee0100 	cdpgt	1, 14, cr0, cr14, cr0, {0}
    f720:	06000000 	streq	r0, [r0], -r0
    f724:	15000048 	strne	r0, [r0, #-72]	; 0xffffffb8
    f728:	000035f2 	strdeq	r3, [r0], -r2
    f72c:	00ceef01 	sbceq	lr, lr, r1, lsl #30
    f730:	48250000 	stmdami	r5!, {}	; <UNPREDICTABLE>
    f734:	d2150000 	andsle	r0, r5, #0
    f738:	01000036 	tsteq	r0, r6, lsr r0
    f73c:	0007c8f0 	strdeq	ip, [r7], -r0
    f740:	00486900 	subeq	r6, r8, r0, lsl #18
    f744:	3c9e2500 	cfldr32cc	mvfx2, [lr], {0}
    f748:	00120000 	andseq	r0, r2, r0
    f74c:	073b0000 	ldreq	r0, [fp, -r0]!
    f750:	7d260000 	stcvc	0, cr0, [r6, #-0]
    f754:	01000036 	tsteq	r0, r6, lsr r0
    f758:	00c3010a 	sbceq	r0, r3, sl, lsl #2
    f75c:	48810000 	stmmi	r1, {}	; <UNPREDICTABLE>
    f760:	27000000 	strcs	r0, [r0, -r0]
    f764:	000003d4 	ldrdeq	r0, [r0], -r4
    f768:	00003cc4 	andeq	r3, r0, r4, asr #25
    f76c:	00000006 	andeq	r0, r0, r6
    f770:	68011101 	stmdavs	r1, {r0, r8, ip}
    f774:	28000007 	stmdacs	r0, {r0, r1, r2}
    f778:	000003e4 	andeq	r0, r0, r4, ror #7
    f77c:	003cc429 	eorseq	ip, ip, r9, lsr #8
    f780:	00000600 	andeq	r0, r0, r0, lsl #12
    f784:	03ef2a00 	mvneq	r2, #0, 20
    f788:	48940000 	ldmmi	r4, {}	; <UNPREDICTABLE>
    f78c:	00000000 	andeq	r0, r0, r0
    f790:	0003d427 	andeq	sp, r3, r7, lsr #8
    f794:	003cdc00 	eorseq	sp, ip, r0, lsl #24
    f798:	00000600 	andeq	r0, r0, r0, lsl #12
    f79c:	011b0100 	tsteq	fp, r0, lsl #2
    f7a0:	00000795 	muleq	r0, r5, r7
    f7a4:	0003e428 	andeq	lr, r3, r8, lsr #8
    f7a8:	3cdc2900 			; <UNDEFINED> instruction: 0x3cdc2900
    f7ac:	00060000 	andeq	r0, r6, r0
    f7b0:	ef2a0000 	svc	0x002a0000
    f7b4:	a7000003 	strge	r0, [r0, -r3]
    f7b8:	00000048 	andeq	r0, r0, r8, asr #32
    f7bc:	03d42b00 	bicseq	r2, r4, #0, 22
    f7c0:	3ce60000 	stclcc	0, cr0, [r6]
    f7c4:	11d00000 	bicsne	r0, r0, r0
    f7c8:	1f010000 	svcne	0x00010000
    f7cc:	0007be01 	andeq	fp, r7, r1, lsl #28
    f7d0:	03e42800 	mvneq	r2, #0, 16
    f7d4:	d02c0000 	eorle	r0, ip, r0
    f7d8:	2a000011 	bcs	f824 <__exidx_end+0xaad0>
    f7dc:	000003ef 	andeq	r0, r0, pc, ror #7
    f7e0:	000048ba 			; <UNDEFINED> instruction: 0x000048ba
    f7e4:	901b0000 	andsls	r0, fp, r0
    f7e8:	1b00003c 	blne	f8e0 <__exidx_end+0xab8c>
    f7ec:	00000009 	andeq	r0, r0, r9
    f7f0:	07ce0405 	strbeq	r0, [lr, r5, lsl #8]
    f7f4:	ce2d0000 	cdpgt	0, 2, cr0, cr13, cr0, {0}
    f7f8:	20000000 	andcs	r0, r0, r0
    f7fc:	0000352d 	andeq	r3, r0, sp, lsr #10
    f800:	9001170a 	andls	r1, r1, sl, lsl #14
    f804:	6000003e 	andvs	r0, r0, lr, lsr r0
    f808:	01000000 	mrseq	r0, (UNDEF: 0)
    f80c:	0008339c 	muleq	r8, ip, r3
    f810:	35002600 	strcc	r2, [r0, #-1536]	; 0xfffffa00
    f814:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    f818:	0000c301 	andeq	ip, r0, r1, lsl #6
    f81c:	0048cd00 	subeq	ip, r8, r0, lsl #26
    f820:	36212600 	strtcc	r2, [r1], -r0, lsl #12
    f824:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    f828:	0000ce01 	andeq	ip, r0, r1, lsl #28
    f82c:	0048f800 	subeq	pc, r8, r0, lsl #16
    f830:	28bf2600 	ldmcs	pc!, {r9, sl, sp}	; <UNPREDICTABLE>
    f834:	ba010000 	blt	4f83c <__ccfg+0x2f894>
    f838:	0000ce01 	andeq	ip, r0, r1, lsl #28
    f83c:	00490b00 	subeq	r0, r9, r0, lsl #22
    f840:	35f72600 	ldrbcc	r2, [r7, #1536]!	; 0x600
    f844:	bb010000 	bllt	4f84c <__ccfg+0x2f8a4>
    f848:	0000ce01 	andeq	ip, r0, r1, lsl #28
    f84c:	00493200 	subeq	r3, r9, r0, lsl #4
    f850:	3e9e1b00 	vfnmscc.f64	d1, d14, d0
    f854:	091b0000 	ldmdbeq	fp, {}	; <UNPREDICTABLE>
    f858:	20000000 	andcs	r0, r0, r0
    f85c:	0000371e 	andeq	r3, r0, lr, lsl r7
    f860:	0001290a 	andeq	r2, r1, sl, lsl #18
    f864:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    f868:	01000000 	mrseq	r0, (UNDEF: 0)
    f86c:	00088a9c 	muleq	r8, ip, sl
    f870:	364a2600 	strbcc	r2, [sl], -r0, lsl #12
    f874:	e7010000 	str	r0, [r1, -r0]
    f878:	0000ce01 	andeq	ip, r0, r1, lsl #28
    f87c:	00495b00 	subeq	r5, r9, r0, lsl #22
    f880:	36f02600 	ldrbtcc	r2, [r0], r0, lsl #12
    f884:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    f888:	0000ce01 	andeq	ip, r0, r1, lsl #28
    f88c:	00496e00 	subeq	r6, r9, r0, lsl #28
    f890:	2faa2600 	svccs	0x00aa2600
    f894:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    f898:	0000ce01 	andeq	ip, r0, r1, lsl #28
    f89c:	00498100 	subeq	r8, r9, r0, lsl #2
    f8a0:	369e2600 	ldrcc	r2, [lr], r0, lsl #12
    f8a4:	ea010000 	b	4f8ac <__ccfg+0x2f904>
    f8a8:	0000ce01 	andeq	ip, r0, r1, lsl #28
    f8ac:	00499400 	subeq	r9, r9, r0, lsl #8
    f8b0:	9f2e0000 	svcls	0x002e0000
    f8b4:	0a000035 	beq	f990 <__exidx_end+0xac3c>
    f8b8:	00ce0142 	sbceq	r0, lr, r2, asr #2
    f8bc:	3ef00000 	cdpcc	0, 15, cr0, cr0, cr0, {0}
    f8c0:	00180000 	andseq	r0, r8, r0
    f8c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    f8c8:	00374b22 	eorseq	r4, r7, r2, lsr #22
    f8cc:	99550100 	ldmdbls	r5, {r8}^
    f8d0:	05000003 	streq	r0, [r0, #-3]
    f8d4:	0001f403 	andeq	pc, r1, r3, lsl #8
    f8d8:	00ce2f20 	sbceq	r2, lr, r0, lsr #30
    f8dc:	08c10000 	stmiaeq	r1, {}^	; <UNPREDICTABLE>
    f8e0:	c1300000 	teqgt	r0, r0
    f8e4:	0c000008 	stceq	0, cr0, [r0], {8}
    f8e8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    f8ec:	00002632 	andeq	r2, r0, r2, lsr r6
    f8f0:	00368522 	eorseq	r8, r6, r2, lsr #10
    f8f4:	d9610100 	stmdble	r1!, {r8}^
    f8f8:	05000008 	streq	r0, [r0, #-8]
    f8fc:	00000003 	andeq	r0, r0, r3
    f900:	08b12d00 	ldmeq	r1!, {r8, sl, fp, sp}
    f904:	8c310000 	ldchi	0, cr0, [r1], #-0
    f908:	09000023 	stmdbeq	r0, {r0, r1, r5}
    f90c:	0008ef99 	muleq	r8, r9, pc	; <UNPREDICTABLE>
    f910:	00d90800 	sbcseq	r0, r9, r0, lsl #16
    f914:	31000000 	mrscc	r0, (UNDEF: 0)
    f918:	0000269c 	muleq	r0, ip, r6
    f91c:	0905f903 	stmdbeq	r5, {r0, r1, r8, fp, ip, sp, lr, pc}
    f920:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    f924:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f928:	000000ce 	andeq	r0, r0, lr, asr #1
    f92c:	26d53200 	ldrbcs	r3, [r5], r0, lsl #4
    f930:	10030000 	andne	r0, r3, r0
    f934:	0000ce01 	andeq	ip, r0, r1, lsl #28
    f938:	00091b00 	andeq	r1, r9, r0, lsl #22
    f93c:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    f940:	33000000 	movwcc	r0, #0
    f944:	000024ef 	andeq	r2, r0, pc, ror #9
    f948:	00c3aa0b 	sbceq	sl, r3, fp, lsl #20
    f94c:	cc000000 	stcgt	0, cr0, [r0], {-0}
    f950:	04000003 	streq	r0, [r0], #-3
    f954:	003b3000 	eorseq	r3, fp, r0
    f958:	be010400 	cfcpyslt	mvf0, mvf1
    f95c:	01000023 	tsteq	r0, r3, lsr #32
    f960:	00003a32 	andeq	r3, r0, r2, lsr sl
    f964:	00002485 	andeq	r2, r0, r5, lsl #9
    f968:	00001248 	andeq	r1, r0, r8, asr #4
    f96c:	00000000 	andeq	r0, r0, r0
    f970:	00007f0e 	andeq	r7, r0, lr, lsl #30
    f974:	e5060102 	str	r0, [r6, #-258]	; 0xfffffefe
    f978:	02000003 	andeq	r0, r0, #3
    f97c:	03e30801 	mvneq	r0, #65536	; 0x10000
    f980:	02020000 	andeq	r0, r2, #0
    f984:	00044605 	andeq	r4, r4, r5, lsl #12
    f988:	07020200 	streq	r0, [r2, -r0, lsl #4]
    f98c:	0000028a 	andeq	r0, r0, sl, lsl #5
    f990:	b4050402 	strlt	r0, [r5], #-1026	; 0xfffffbfe
    f994:	03000000 	movweq	r0, #0
    f998:	00002331 	andeq	r2, r0, r1, lsr r3
    f99c:	00534103 	subseq	r4, r3, r3, lsl #2
    f9a0:	04020000 	streq	r0, [r2], #-0
    f9a4:	00007e07 	andeq	r7, r0, r7, lsl #28
    f9a8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    f9ac:	000000af 	andeq	r0, r0, pc, lsr #1
    f9b0:	79070802 	stmdbvc	r7, {r1, fp}
    f9b4:	04000000 	streq	r0, [r0], #-0
    f9b8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    f9bc:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    f9c0:	00008307 	andeq	r8, r0, r7, lsl #6
    f9c4:	23330300 	teqcs	r3, #0, 6
    f9c8:	20040000 	andcs	r0, r4, r0
    f9cc:	00000048 	andeq	r0, r0, r8, asr #32
    f9d0:	63020105 	movwvs	r0, #8453	; 0x2105
    f9d4:	000000a2 	andeq	r0, r0, r2, lsr #1
    f9d8:	00396c06 	eorseq	r6, r9, r6, lsl #24
    f9dc:	ac060000 	stcge	0, cr0, [r6], {-0}
    f9e0:	02000039 	andeq	r0, r0, #57	; 0x39
    f9e4:	00391c06 	eorseq	r1, r9, r6, lsl #24
    f9e8:	5c060400 	cfstrspl	mvf0, [r6], {-0}
    f9ec:	08000037 	stmdaeq	r0, {r0, r1, r2, r4, r5}
    f9f0:	39080300 	stmdbcc	r8, {r8, r9}
    f9f4:	68020000 	stmdavs	r2, {}	; <UNPREDICTABLE>
    f9f8:	00000081 	andeq	r0, r0, r1, lsl #1
    f9fc:	a5020105 	strge	r0, [r2, #-261]	; 0xfffffefb
    fa00:	000000da 	ldrdeq	r0, [r0], -sl
    fa04:	003a2206 	eorseq	r2, sl, r6, lsl #4
    fa08:	74067f00 	strvc	r7, [r6], #-3840	; 0xfffff100
    fa0c:	00000037 	andeq	r0, r0, r7, lsr r0
    fa10:	003ad306 	eorseq	sp, sl, r6, lsl #6
    fa14:	60060100 	andvs	r0, r6, r0, lsl #2
    fa18:	02000039 	andeq	r0, r0, #57	; 0x39
    fa1c:	003ac506 	eorseq	ip, sl, r6, lsl #10
    fa20:	59060300 	stmdbpl	r6, {r8, r9}
    fa24:	04000038 	streq	r0, [r0], #-56	; 0xffffffc8
    fa28:	3adf0300 	bcc	ff7d0630 <_estack+0xdf7cb630>
    fa2c:	ac020000 	stcge	0, cr0, [r2], {-0}
    fa30:	000000ad 	andeq	r0, r0, sp, lsr #1
    fa34:	3d020107 	stfccs	f0, [r2, #-28]	; 0xffffffe4
    fa38:	00012501 	andeq	r2, r1, r1, lsl #10
    fa3c:	39360600 	ldmdbcc	r6!, {r9, sl}
    fa40:	067f0000 	ldrbteq	r0, [pc], -r0
    fa44:	00003824 	andeq	r3, r0, r4, lsr #16
    fa48:	38800600 	stmcc	r0, {r9, sl}
    fa4c:	06010000 	streq	r0, [r1], -r0
    fa50:	000038bc 			; <UNDEFINED> instruction: 0x000038bc
    fa54:	3a070602 	bcc	1d1264 <__ccfg+0x1b12bc>
    fa58:	06030000 	streq	r0, [r3], -r0
    fa5c:	00003780 	andeq	r3, r0, r0, lsl #15
    fa60:	38480604 	stmdacc	r8, {r2, r9, sl}^
    fa64:	06050000 	streq	r0, [r5], -r0
    fa68:	000039e1 	andeq	r3, r0, r1, ror #19
    fa6c:	39f40606 	ldmibcc	r4!, {r1, r2, r9, sl}^
    fa70:	00070000 	andeq	r0, r7, r0
    fa74:	00380c08 	eorseq	r0, r8, r8, lsl #24
    fa78:	01470200 	mrseq	r0, (UNDEF: 103)
    fa7c:	000000e5 	andeq	r0, r0, r5, ror #1
    fa80:	59020107 	stmdbpl	r2, {r0, r1, r2, r8}
    fa84:	00015f01 	andeq	r5, r1, r1, lsl #30
    fa88:	38ad0600 	stmiacc	sp!, {r9, sl}
    fa8c:	067f0000 	ldrbteq	r0, [pc], -r0
    fa90:	000038d6 	ldrdeq	r3, [r0], -r6
    fa94:	39520600 	ldmdbcc	r2, {r9, sl}^
    fa98:	06010000 	streq	r0, [r1], -r0
    fa9c:	00003799 	muleq	r0, r9, r7
    faa0:	39bc0602 	ldmibcc	ip!, {r1, r9, sl}
    faa4:	06030000 	streq	r0, [r3], -r0
    faa8:	0000386f 	andeq	r3, r0, pc, ror #16
    faac:	35080004 	strcc	r0, [r8, #-4]
    fab0:	02000038 	andeq	r0, r0, #56	; 0x38
    fab4:	01310160 	teqeq	r1, r0, ror #2
    fab8:	01070000 	mrseq	r0, (UNDEF: 7)
    fabc:	9901b802 	stmdbls	r1, {r1, fp, ip, sp, pc}
    fac0:	06000001 	streq	r0, [r0], -r1
    fac4:	000038ec 	andeq	r3, r0, ip, ror #17
    fac8:	3a18067f 	bcc	6114cc <__ccfg+0x5f1524>
    facc:	060a0000 	streq	r0, [sl], -r0
    fad0:	0000397d 	andeq	r3, r0, sp, ror r9
    fad4:	39a20614 	stmibcc	r2!, {r2, r4, r9, sl}
    fad8:	06150000 	ldreq	r0, [r5], -r0
    fadc:	00003948 	andeq	r3, r0, r8, asr #18
    fae0:	39ce0616 	stmibcc	lr, {r1, r2, r4, r9, sl}^
    fae4:	00170000 	andseq	r0, r7, r0
    fae8:	00381708 	eorseq	r1, r8, r8, lsl #14
    faec:	01bf0200 			; <UNDEFINED> instruction: 0x01bf0200
    faf0:	0000016b 	andeq	r0, r0, fp, ror #2
    faf4:	003a5e09 	eorseq	r5, sl, r9, lsl #28
    faf8:	01070200 	mrseq	r0, (UNDEF: 39)
    fafc:	00000076 	andeq	r0, r0, r6, ror r0
    fb00:	37ab0a03 	strcc	r0, [fp, r3, lsl #20]!
    fb04:	6a020000 	bvs	8fb0c <__ccfg+0x6fb64>
    fb08:	00015f01 	andeq	r5, r1, r1, lsl #30
    fb0c:	01da0100 	bicseq	r0, sl, r0, lsl #2
    fb10:	e40b0000 	str	r0, [fp], #-0
    fb14:	01000038 	tsteq	r0, r8, lsr r0
    fb18:	00015f68 	andeq	r5, r1, r8, ror #30
    fb1c:	37910b00 	ldrcc	r0, [r1, r0, lsl #22]
    fb20:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    fb24:	00000076 	andeq	r0, r0, r6, ror r0
    fb28:	3b0c0900 	blcc	311f30 <__ccfg+0x2f1f88>
    fb2c:	32020000 	andcc	r0, r2, #0
    fb30:	00007601 	andeq	r7, r0, r1, lsl #12
    fb34:	9e0c0300 	cdpls	3, 0, cr0, cr12, cr0, {0}
    fb38:	0200003a 	andeq	r0, r0, #58	; 0x3a
    fb3c:	0000a272 	andeq	sl, r0, r2, ror r2
    fb40:	00000000 	andeq	r0, r0, r0
    fb44:	00001000 	andeq	r1, r0, r0
    fb48:	0d9c0100 	ldfeqs	f0, [ip]
    fb4c:	000037c8 	andeq	r3, r0, r8, asr #15
    fb50:	00dab602 	sbcseq	fp, sl, r2, lsl #12
    fb54:	00000000 	andeq	r0, r0, r0
    fb58:	00180000 	andseq	r0, r8, r0
    fb5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    fb60:	00000225 	andeq	r0, r0, r5, lsr #4
    fb64:	0038030e 	eorseq	r0, r8, lr, lsl #6
    fb68:	da520100 	ble	148ff70 <__ccfg+0x146ffc8>
    fb6c:	a7000000 	strge	r0, [r0, -r0]
    fb70:	00000049 	andeq	r0, r0, r9, asr #32
    fb74:	0001b20f 	andeq	fp, r1, pc, lsl #4
    fb78:	003f0800 	eorseq	r0, pc, r0, lsl #16
    fb7c:	00004c00 	andeq	r4, r0, r0, lsl #24
    fb80:	6e9c0100 	fmlvse	f0, f4, f0
    fb84:	10000002 	andne	r0, r0, r2
    fb88:	000001c3 	andeq	r0, r0, r3, asr #3
    fb8c:	000049cf 	andeq	r4, r0, pc, asr #19
    fb90:	0001ce10 	andeq	ip, r1, r0, lsl lr
    fb94:	0049ef00 	subeq	lr, r9, r0, lsl #30
    fb98:	3f181100 	svccc	0x00181100
    fb9c:	000e0000 	andeq	r0, lr, r0
    fba0:	c3120000 	tstgt	r2, #0
    fba4:	12000001 	andne	r0, r0, #1
    fba8:	000001ce 	andeq	r0, r0, lr, asr #3
    fbac:	0001a513 	andeq	sl, r1, r3, lsl r5
    fbb0:	003f1800 	eorseq	r1, pc, r0, lsl #16
    fbb4:	00000400 	andeq	r0, r0, r0, lsl #8
    fbb8:	00700100 	rsbseq	r0, r0, r0, lsl #2
    fbbc:	39871400 	stmibcc	r7, {sl, ip}
    fbc0:	51020000 	mrspl	r0, (UNDEF: 2)
    fbc4:	00012501 	andeq	r2, r1, r1, lsl #10
    fbc8:	00000000 	andeq	r0, r0, r0
    fbcc:	00003000 	andeq	r3, r0, r0
    fbd0:	ca9c0100 	bgt	fe70ffd8 <_estack+0xde70afd8>
    fbd4:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    fbd8:	000039d8 	ldrdeq	r3, [r0], -r8
    fbdc:	01258501 			; <UNDEFINED> instruction: 0x01258501
    fbe0:	4a230000 	bmi	8cfbe8 <__ccfg+0x8afc40>
    fbe4:	520b0000 	andpl	r0, fp, #0
    fbe8:	0100003a 	tsteq	r0, sl, lsr r0
    fbec:	00007686 	andeq	r7, r0, r6, lsl #13
    fbf0:	38fa0e00 	ldmcc	sl!, {r9, sl, fp}^
    fbf4:	87010000 	strhi	r0, [r1, -r0]
    fbf8:	00000076 	andeq	r0, r0, r6, ror r0
    fbfc:	00004a43 	andeq	r4, r0, r3, asr #20
    fc00:	0001da13 	andeq	sp, r1, r3, lsl sl
    fc04:	00000000 	andeq	r0, r0, r0
    fc08:	00000400 	andeq	r0, r0, r0, lsl #8
    fc0c:	15860100 	strne	r0, [r6, #256]	; 0x100
    fc10:	00000000 	andeq	r0, r0, r0
    fc14:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    fc18:	3a7c1600 	bcc	1f15420 <__ccfg+0x1ef5478>
    fc1c:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
    fc20:	00007601 	andeq	r7, r0, r1, lsl #12
    fc24:	02e80300 	rsceq	r0, r8, #0, 6
    fc28:	66170000 	ldrvs	r0, [r7], -r0
    fc2c:	02000038 	andeq	r0, r0, #56	; 0x38
    fc30:	0076011b 	rsbseq	r0, r6, fp, lsl r1
    fc34:	14000000 	strne	r0, [r0], #-0
    fc38:	000037e6 	andeq	r3, r0, r6, ror #15
    fc3c:	9901c902 	stmdbls	r1, {r1, r8, fp, lr, pc}
    fc40:	54000001 	strpl	r0, [r0], #-1
    fc44:	6c00003f 	stcvs	0, cr0, [r0], {63}	; 0x3f
    fc48:	01000000 	mrseq	r0, (UNDEF: 0)
    fc4c:	0003659c 	muleq	r3, ip, r5
    fc50:	38420e00 	stmdacc	r2, {r9, sl, fp}^
    fc54:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    fc58:	00000199 	muleq	r0, r9, r1
    fc5c:	00004a56 	andeq	r4, r0, r6, asr sl
    fc60:	0038cd0b 	eorseq	ip, r8, fp, lsl #26
    fc64:	76a90100 	strtvc	r0, [r9], r0, lsl #2
    fc68:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    fc6c:	00003a93 	muleq	r0, r3, sl
    fc70:	0076aa01 	rsbseq	sl, r6, r1, lsl #20
    fc74:	54010000 	strpl	r0, [r1], #-0
    fc78:	0001a519 	andeq	sl, r1, r9, lsl r5
    fc7c:	003f5600 	eorseq	r5, pc, r0, lsl #12
    fc80:	00121800 	andseq	r1, r2, r0, lsl #16
    fc84:	1aa90100 	bne	fea5008c <_estack+0xdea4b08c>
    fc88:	000002ca 	andeq	r0, r0, sl, asr #5
    fc8c:	00003f5a 	andeq	r3, r0, sl, asr pc
    fc90:	00001230 	andeq	r1, r0, r0, lsr r2
    fc94:	035baa01 	cmpeq	fp, #4096	; 0x1000
    fc98:	301b0000 	andscc	r0, fp, r0
    fc9c:	10000012 	andne	r0, r0, r2, lsl r0
    fca0:	000002db 	ldrdeq	r0, [r0], -fp
    fca4:	00004ab3 			; <UNDEFINED> instruction: 0x00004ab3
    fca8:	6e150000 	cdpvs	0, 1, cr0, cr5, cr0, {0}
    fcac:	b200003f 	andlt	r0, r0, #63	; 0x3f
    fcb0:	00000001 	andeq	r0, r0, r1
    fcb4:	00389109 	eorseq	r9, r8, r9, lsl #2
    fcb8:	01830200 	orreq	r0, r3, r0, lsl #4
    fcbc:	00000372 	andeq	r0, r0, r2, ror r3
    fcc0:	02010203 	andeq	r0, r1, #805306368	; 0x30000000
    fcc4:	00000c6f 	andeq	r0, r0, pc, ror #24
    fcc8:	003aed09 	eorseq	lr, sl, r9, lsl #26
    fccc:	01f00200 	mvnseq	r0, r0, lsl #4
    fcd0:	00000372 	andeq	r0, r0, r2, ror r3
    fcd4:	2ff31c03 	svccs	0x00f31c03
    fcd8:	43020000 	movwmi	r0, #8192	; 0x2000
    fcdc:	003fc002 	eorseq	ip, pc, r2
    fce0:	00001600 	andeq	r1, r0, r0, lsl #12
    fce4:	1d9c0100 	ldfnes	f0, [ip]
    fce8:	00000365 	andeq	r0, r0, r5, ror #6
    fcec:	00003fc2 	andeq	r3, r0, r2, asr #31
    fcf0:	00000004 	andeq	r0, r0, r4
    fcf4:	03b5e201 			; <UNDEFINED> instruction: 0x03b5e201
    fcf8:	c6150000 	ldrgt	r0, [r5], -r0
    fcfc:	b200003f 	andlt	r0, r0, #63	; 0x3f
    fd00:	00000001 	andeq	r0, r0, r1
    fd04:	0003791e 	andeq	r7, r3, lr, lsl r9
    fd08:	003fca00 	eorseq	ip, pc, r0, lsl #20
    fd0c:	00000400 	andeq	r0, r0, r0, lsl #8
    fd10:	15e30100 	strbne	r0, [r3, #256]!	; 0x100
    fd14:	00003fce 	andeq	r3, r0, lr, asr #31
    fd18:	000002e8 	andeq	r0, r0, r8, ror #5
    fd1c:	a7000000 	strge	r0, [r0, -r0]
    fd20:	04000005 	streq	r0, [r0], #-5
    fd24:	003cfe00 	eorseq	pc, ip, r0, lsl #28
    fd28:	be010400 	cfcpyslt	mvf0, mvf1
    fd2c:	01000023 	tsteq	r0, r3, lsr #32
    fd30:	00003be4 	andeq	r3, r0, r4, ror #23
    fd34:	00002485 	andeq	r2, r0, r5, lsl #9
    fd38:	00001280 	andeq	r1, r0, r0, lsl #5
    fd3c:	00000000 	andeq	r0, r0, r0
    fd40:	0000813d 	andeq	r8, r0, sp, lsr r1
    fd44:	e5060102 	str	r0, [r6, #-258]	; 0xfffffefe
    fd48:	03000003 	movweq	r0, #3
    fd4c:	00002399 	muleq	r0, r9, r3
    fd50:	00371d03 	eorseq	r1, r7, r3, lsl #26
    fd54:	01020000 	mrseq	r0, (UNDEF: 2)
    fd58:	0003e308 	andeq	lr, r3, r8, lsl #6
    fd5c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    fd60:	00000446 	andeq	r0, r0, r6, asr #8
    fd64:	00278f03 	eoreq	r8, r7, r3, lsl #30
    fd68:	502b0300 	eorpl	r0, fp, r0, lsl #6
    fd6c:	02000000 	andeq	r0, r0, #0
    fd70:	028a0702 	addeq	r0, sl, #524288	; 0x80000
    fd74:	04020000 	streq	r0, [r2], #-0
    fd78:	0000b405 	andeq	fp, r0, r5, lsl #8
    fd7c:	23310300 	teqcs	r1, #0, 6
    fd80:	41030000 	mrsmi	r0, (UNDEF: 3)
    fd84:	00000069 	andeq	r0, r0, r9, rrx
    fd88:	7e070402 	cdpvc	4, 0, cr0, cr7, cr2, {0}
    fd8c:	02000000 	andeq	r0, r0, #0
    fd90:	00af0508 	adceq	r0, pc, r8, lsl #10
    fd94:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    fd98:	00007907 	andeq	r7, r0, r7, lsl #18
    fd9c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    fda0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    fda4:	83070402 	movwhi	r0, #29698	; 0x7402
    fda8:	03000000 	movweq	r0, #0
    fdac:	0000239b 	muleq	r0, fp, r3
    fdb0:	002c1404 	eoreq	r1, ip, r4, lsl #8
    fdb4:	91030000 	mrsls	r0, (UNDEF: 3)
    fdb8:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    fdbc:	0000451a 	andeq	r4, r0, sl, lsl r5
    fdc0:	23330300 	teqcs	r3, #0, 6
    fdc4:	20040000 	andcs	r0, r4, r0
    fdc8:	0000005e 	andeq	r0, r0, lr, asr r0
    fdcc:	003b5d05 	eorseq	r5, fp, r5, lsl #26
    fdd0:	03890100 	orreq	r0, r9, #0, 2
    fdd4:	000000e6 	andeq	r0, r0, r6, ror #1
    fdd8:	003b3f06 	eorseq	r3, fp, r6, lsl #30
    fddc:	a2890100 	addge	r0, r9, #0, 2
    fde0:	06000000 	streq	r0, [r0], -r0
    fde4:	00003bb0 			; <UNDEFINED> instruction: 0x00003bb0
    fde8:	00a28901 	adceq	r8, r2, r1, lsl #18
    fdec:	0b060000 	bleq	18fdf4 <__ccfg+0x16fe4c>
    fdf0:	0100003c 	tsteq	r0, ip, lsr r0
    fdf4:	0000a289 	andeq	sl, r0, r9, lsl #5
    fdf8:	233c0700 	teqcs	ip, #0, 14
    fdfc:	8c010000 	stchi	0, cr0, [r1], {-0}
    fe00:	000000e6 	andeq	r0, r0, r6, ror #1
    fe04:	02010200 	andeq	r0, r1, #0, 4
    fe08:	00000c6f 	andeq	r0, r0, pc, ror #24
    fe0c:	003bbe08 	eorseq	fp, fp, r8, lsl #28
    fe10:	a2a90100 	adcge	r0, r9, #0, 2
    fe14:	03000000 	movweq	r0, #0
    fe18:	0000012a 	andeq	r0, r0, sl, lsr #2
    fe1c:	003b3f06 	eorseq	r3, fp, r6, lsl #30
    fe20:	a2a90100 	adcge	r0, r9, #0, 2
    fe24:	06000000 	streq	r0, [r0], -r0
    fe28:	00003c0b 	andeq	r3, r0, fp, lsl #24
    fe2c:	00a2a901 	adceq	sl, r2, r1, lsl #18
    fe30:	58070000 	stmdapl	r7, {}	; <UNPREDICTABLE>
    fe34:	0100003b 	tsteq	r0, fp, lsr r0
    fe38:	0000a2ab 	andeq	sl, r0, fp, lsr #5
    fe3c:	233c0700 	teqcs	ip, #0, 14
    fe40:	ad010000 	stcge	0, cr0, [r1, #-0]
    fe44:	000000e6 	andeq	r0, r0, r6, ror #1
    fe48:	00ad0900 	adceq	r0, sp, r0, lsl #18
    fe4c:	3fd80000 	svccc	0x00d80000
    fe50:	00280000 	eoreq	r0, r8, r0
    fe54:	9c010000 	stcls	0, cr0, [r1], {-0}
    fe58:	00000171 	andeq	r0, r0, r1, ror r1
    fe5c:	0000b90a 	andeq	fp, r0, sl, lsl #18
    fe60:	004ac600 	subeq	ip, sl, r0, lsl #12
    fe64:	00c40a00 	sbceq	r0, r4, r0, lsl #20
    fe68:	4b0b0000 	blmi	2cfe70 <__ccfg+0x2afec8>
    fe6c:	da0b0000 	ble	2cfe74 <__ccfg+0x2afecc>
    fe70:	50000000 	andpl	r0, r0, r0
    fe74:	0c00004b 	stceq	0, cr0, [r0], {75}	; 0x4b
    fe78:	000000cf 	andeq	r0, r0, pc, asr #1
    fe7c:	3fe20d04 	svccc	0x00e20d04
    fe80:	05940000 	ldreq	r0, [r4]
    fe84:	fa0e0000 	blx	38fe8c <__ccfg+0x36fee4>
    fe88:	9f00003f 	svcls	0x0000003f
    fe8c:	00000005 	andeq	r0, r0, r5
    fe90:	00320d0f 	eorseq	r0, r2, pc, lsl #26
    fe94:	01ca0100 	biceq	r0, sl, r0, lsl #2
    fe98:	00004000 	andeq	r4, r0, r0
    fe9c:	00000008 	andeq	r0, r0, r8
    fea0:	01d19c01 	bicseq	r9, r1, r1, lsl #24
    fea4:	f8100000 			; <UNDEFINED> instruction: 0xf8100000
    fea8:	02000007 	andeq	r0, r0, #7
    feac:	0000a242 	andeq	sl, r0, r2, asr #4
    feb0:	004b7600 	subeq	r7, fp, r0, lsl #12
    feb4:	3b1f1000 	blcc	7d3ebc <__ccfg+0x7b3f14>
    feb8:	42020000 	andmi	r0, r2, #0
    febc:	000000a2 	andeq	r0, r0, r2, lsr #1
    fec0:	00004b97 	muleq	r0, r7, fp
    fec4:	003bb610 	eorseq	fp, fp, r0, lsl r6
    fec8:	a2430200 	subge	r0, r3, #0, 4
    fecc:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    fed0:	1100004b 	tstne	r0, fp, asr #32
    fed4:	00004008 	andeq	r4, r0, r8
    fed8:	0000012a 	andeq	r0, r0, sl, lsr #2
    fedc:	03510112 	cmpeq	r1, #-2147483644	; 0x80000004
    fee0:	125201f3 	subsne	r0, r2, #-1073741764	; 0xc000003c
    fee4:	f3075001 	vhadd.u8	d5, d7, d1
    fee8:	01f35001 	mvnseq	r5, r1
    feec:	00002251 	andeq	r2, r0, r1, asr r2
    fef0:	003bd00f 	eorseq	sp, fp, pc
    fef4:	01df0100 	bicseq	r0, pc, r0, lsl #2
    fef8:	00000000 	andeq	r0, r0, r0
    fefc:	00000022 	andeq	r0, r0, r2, lsr #32
    ff00:	02ea9c01 	rsceq	r9, sl, #256	; 0x100
    ff04:	f8100000 			; <UNDEFINED> instruction: 0xf8100000
    ff08:	02000007 	andeq	r0, r0, #7
    ff0c:	0000a257 	andeq	sl, r0, r7, asr r2
    ff10:	004bd900 	subeq	sp, fp, r0, lsl #18
    ff14:	3b1f1000 	blcc	7d3f1c <__ccfg+0x7b3f74>
    ff18:	57020000 	strpl	r0, [r2, -r0]
    ff1c:	000000a2 	andeq	r0, r0, r2, lsr #1
    ff20:	00004bfa 	strdeq	r4, [r0], -sl
    ff24:	0019d010 	andseq	sp, r9, r0, lsl r0
    ff28:	a2580200 	subsge	r0, r8, #0, 4
    ff2c:	1b000000 	blne	ff34 <__exidx_end+0xb1e0>
    ff30:	1000004c 	andne	r0, r0, ip, asr #32
    ff34:	00003b79 	andeq	r3, r0, r9, ror fp
    ff38:	00a25802 	adceq	r5, r2, r2, lsl #16
    ff3c:	4c660000 	stclmi	0, cr0, [r6], #-0
    ff40:	ff130000 			; <UNDEFINED> instruction: 0xff130000
    ff44:	0200003b 	andeq	r0, r0, #59	; 0x3b
    ff48:	0000a25a 	andeq	sl, r0, sl, asr r2
    ff4c:	004c8700 	subeq	r8, ip, r0, lsl #14
    ff50:	3b841300 	blcc	fe114b58 <_estack+0xde10fb58>
    ff54:	5b020000 	blpl	8ff5c <__ccfg+0x6ffb4>
    ff58:	000000a2 	andeq	r0, r0, r2, lsr #1
    ff5c:	00004d1b 	andeq	r4, r0, fp, lsl sp
    ff60:	00000011 	andeq	r0, r0, r1, lsl r0
    ff64:	00012a00 	andeq	r2, r1, r0, lsl #20
    ff68:	51011200 	mrspl	r1, R9_usr
    ff6c:	5201f345 	andpl	pc, r1, #335544321	; 0x14000001
    ff70:	01f32540 	mvnseq	r2, r0, asr #10
    ff74:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
    ff78:	2e302540 	cfneg32cs	mvfx2, mvfx0
    ff7c:	16000128 	strne	r0, [r0], -r8, lsr #2
    ff80:	30244013 	eorcc	r4, r4, r3, lsl r0
    ff84:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    ff88:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    ff8c:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    ff90:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    ff94:	13160001 	tstne	r6, #1
    ff98:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    ff9c:	5301f325 	movwpl	pc, #4901	; 0x1325	; <UNPREDICTABLE>
    ffa0:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    ffa4:	f3131600 	vmax.u16	d1, d3, d0
    ffa8:	29305301 	ldmdbcs	r0!, {r0, r8, r9, ip, lr}
    ffac:	16000128 	strne	r0, [r0], -r8, lsr #2
    ffb0:	01122113 	tsteq	r2, r3, lsl r1
    ffb4:	01f35150 	mvnseq	r5, r0, asr r1
    ffb8:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    ffbc:	23225001 			; <UNDEFINED> instruction: 0x23225001
    ffc0:	01f30480 	mvnseq	r0, r0, lsl #9
    ffc4:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    ffc8:	f3225001 	vhadd.u32	d5, d2, d1
    ffcc:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    ffd0:	01282930 			; <UNDEFINED> instruction: 0x01282930
    ffd4:	23131600 	tstcs	r3, #0, 12
    ffd8:	01f30484 	mvnseq	r0, r4, lsl #9
    ffdc:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    ffe0:	23225001 			; <UNDEFINED> instruction: 0x23225001
    ffe4:	01f30480 	mvnseq	r0, r0, lsl #9
    ffe8:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    ffec:	f3225001 	vhadd.u32	d5, d2, d1
    fff0:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    fff4:	01282930 			; <UNDEFINED> instruction: 0x01282930
    fff8:	f3131600 	vmax.u16	d1, d3, d0
    fffc:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   10000:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
   10004:	00131600 	andseq	r1, r3, r0, lsl #12
   10008:	3b970f00 	blcc	fe5d3c10 <_estack+0xde5cec10>
   1000c:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
   10010:	00000001 	andeq	r0, r0, r1
   10014:	00002e00 	andeq	r2, r0, r0, lsl #28
   10018:	1f9c0100 	svcne	0x009c0100
   1001c:	10000004 	andne	r0, r0, r4
   10020:	000007f8 	strdeq	r0, [r0], -r8
   10024:	00a28302 	adceq	r8, r2, r2, lsl #6
   10028:	4d670000 	stclmi	0, cr0, [r7, #-0]
   1002c:	1f100000 	svcne	0x00100000
   10030:	0200003b 	andeq	r0, r0, #59	; 0x3b
   10034:	0000a283 	andeq	sl, r0, r3, lsl #5
   10038:	004d8800 	subeq	r8, sp, r0, lsl #16
   1003c:	19d01000 	ldmibne	r0, {ip}^
   10040:	84020000 	strhi	r0, [r2], #-0
   10044:	000000a2 	andeq	r0, r0, r2, lsr #1
   10048:	00004da9 	andeq	r4, r0, r9, lsr #27
   1004c:	003b8d10 	eorseq	r8, fp, r0, lsl sp
   10050:	a2840200 	addge	r0, r4, #0, 4
   10054:	fa000000 	blx	1005c <__exidx_end+0xb308>
   10058:	1000004d 	andne	r0, r0, sp, asr #32
   1005c:	00003b84 	andeq	r3, r0, r4, lsl #23
   10060:	00978502 	addseq	r8, r7, r2, lsl #10
   10064:	4e4b0000 	cdpmi	0, 4, cr0, cr11, cr0, {0}
   10068:	ff130000 			; <UNDEFINED> instruction: 0xff130000
   1006c:	0200003b 	andeq	r0, r0, #59	; 0x3b
   10070:	0000a287 	andeq	sl, r0, r7, lsl #5
   10074:	004e6b00 	subeq	r6, lr, r0, lsl #22
   10078:	3b791300 	blcc	1e54c80 <__ccfg+0x1e34cd8>
   1007c:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
   10080:	000000a2 	andeq	r0, r0, r2, lsr #1
   10084:	00004f11 	andeq	r4, r0, r1, lsl pc
   10088:	00000011 	andeq	r0, r0, r1, lsl r0
   1008c:	00012a00 	andeq	r2, r1, r0, lsl #20
   10090:	51011200 	mrspl	r1, R9_usr
   10094:	5201f340 	andpl	pc, r1, #64, 6
   10098:	01f32540 	mvnseq	r2, r0, asr #10
   1009c:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
   100a0:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
   100a4:	00000f0c 	andeq	r0, r0, ip, lsl #30
   100a8:	01282b80 	smlawbeq	r8, r0, fp, r2
   100ac:	40131600 	andsmi	r1, r3, r0, lsl #12
   100b0:	94007d24 	strls	r7, [r0], #-3364	; 0xfffff2dc
   100b4:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
   100b8:	5301f31a 	movwpl	pc, #4890	; 0x131a	; <UNPREDICTABLE>
   100bc:	01f31c40 	mvnseq	r1, r0, asr #24
   100c0:	5301f353 	movwpl	pc, #4947	; 0x1353	; <UNPREDICTABLE>
   100c4:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
   100c8:	00000f0c 	andeq	r0, r0, ip, lsl #30
   100cc:	01282b80 	smlawbeq	r8, r0, fp, r2
   100d0:	24131600 	ldrcs	r1, [r3], #-1536	; 0xfffffa00
   100d4:	50011221 	andpl	r1, r1, r1, lsr #4
   100d8:	5101f363 	tstpl	r1, r3, ror #6	; <UNPREDICTABLE>
   100dc:	01f32431 	mvnseq	r2, r1, lsr r4
   100e0:	80232250 	eorhi	r2, r3, r0, asr r2
   100e4:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
   100e8:	01f32431 	mvnseq	r2, r1, lsr r4
   100ec:	01f32250 	mvnseq	r2, r0, asr r2
   100f0:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
   100f4:	000f0c22 	andeq	r0, pc, r2, lsr #24
   100f8:	282c8000 	stmdacs	ip!, {pc}
   100fc:	13160001 	tstne	r6, #1
   10100:	f3048423 	vshl.u8	d8, d19, d4
   10104:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
   10108:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
   1010c:	f3048023 	vhadd.u8	d8, d4, d19
   10110:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
   10114:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
   10118:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
   1011c:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
   10120:	8000000f 	andhi	r0, r0, pc
   10124:	0001282c 	andeq	r2, r1, ip, lsr #16
   10128:	01f31316 	mvnseq	r1, r6, lsl r3
   1012c:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
   10130:	000f0c22 	andeq	r0, pc, r2, lsr #24
   10134:	282b8000 	stmdacs	fp!, {pc}
   10138:	13160001 	tstne	r6, #1
   1013c:	45140000 	ldrmi	r0, [r4, #-0]
   10140:	0100003b 	tsteq	r0, fp, lsr r0
   10144:	00970208 	addseq	r0, r7, r8, lsl #4
   10148:	00000000 	andeq	r0, r0, r0
   1014c:	00340000 	eorseq	r0, r4, r0
   10150:	9c010000 	stcls	0, cr0, [r1], {-0}
   10154:	000004d2 	ldrdeq	r0, [r0], -r2
   10158:	0007f810 	andeq	pc, r7, r0, lsl r8	; <UNPREDICTABLE>
   1015c:	a2af0200 	adcge	r0, pc, #0, 4
   10160:	71000000 	mrsvc	r0, (UNDEF: 0)
   10164:	1000004f 	andne	r0, r0, pc, asr #32
   10168:	00003b1f 	andeq	r3, r0, pc, lsl fp
   1016c:	00a2af02 	adceq	sl, r2, r2, lsl #30
   10170:	4f920000 	svcmi	0x00920000
   10174:	d0100000 	andsle	r0, r0, r0
   10178:	02000019 	andeq	r0, r0, #25
   1017c:	0000a2af 	andeq	sl, r0, pc, lsr #5
   10180:	004fb300 	subeq	fp, pc, r0, lsl #6
   10184:	3bff1300 	blcc	fffd4d8c <_estack+0xdffcfd8c>
   10188:	b1020000 	mrslt	r0, (UNDEF: 2)
   1018c:	000000a2 	andeq	r0, r0, r2, lsr #1
   10190:	00004ff0 	strdeq	r4, [r0], -r0
   10194:	003b7013 	eorseq	r7, fp, r3, lsl r0
   10198:	97b20200 	ldrls	r0, [r2, r0, lsl #4]!
   1019c:	2a000000 	bcs	101a4 <__exidx_end+0xb450>
   101a0:	15000050 	strne	r0, [r0, #-80]	; 0xffffffb0
   101a4:	000000ed 	andeq	r0, r0, sp, ror #1
   101a8:	00000000 	andeq	r0, r0, r0
   101ac:	0000001a 	andeq	r0, r0, sl, lsl r0
   101b0:	080cca02 	stmdaeq	ip, {r1, r9, fp, lr, pc}
   101b4:	02000001 	andeq	r0, r0, #1
   101b8:	0000fd0a 	andeq	pc, r0, sl, lsl #26
   101bc:	00504200 	subseq	r4, r0, r0, lsl #4
   101c0:	00001600 	andeq	r1, r0, r0, lsl #12
   101c4:	001a0000 	andseq	r0, sl, r0
   101c8:	130b0000 	movwne	r0, #45056	; 0xb000
   101cc:	7c000001 	stcvc	0, cr0, [r0], {1}
   101d0:	0b000050 	bleq	10318 <__exidx_end+0xb5c4>
   101d4:	0000011e 	andeq	r0, r0, lr, lsl r1
   101d8:	00005095 	muleq	r0, r5, r0
   101dc:	0000000d 	andeq	r0, r0, sp
   101e0:	00059400 	andeq	r9, r5, r0, lsl #8
   101e4:	00000d00 	andeq	r0, r0, r0, lsl #26
   101e8:	059f0000 	ldreq	r0, [pc]	; 101f0 <__exidx_end+0xb49c>
   101ec:	00000000 	andeq	r0, r0, r0
   101f0:	3b271400 	blcc	9d51f8 <__ccfg+0x9b5250>
   101f4:	1d010000 	stcne	0, cr0, [r1, #-0]
   101f8:	00009702 	andeq	r9, r0, r2, lsl #14
   101fc:	00000000 	andeq	r0, r0, r0
   10200:	00004000 	andeq	r4, r0, r0
   10204:	949c0100 	ldrls	r0, [ip], #256	; 0x100
   10208:	10000005 	andne	r0, r0, r5
   1020c:	000007f8 	strdeq	r0, [r0], -r8
   10210:	00a2dd02 	adceq	sp, r2, r2, lsl #26
   10214:	50ac0000 	adcpl	r0, ip, r0
   10218:	1f100000 	svcne	0x00100000
   1021c:	0200003b 	andeq	r0, r0, #59	; 0x3b
   10220:	0000a2dd 	ldrdeq	sl, [r0], -sp
   10224:	0050cd00 	subseq	ip, r0, r0, lsl #26
   10228:	19d01000 	ldmibne	r0, {ip}^
   1022c:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
   10230:	000000a2 	andeq	r0, r0, r2, lsr #1
   10234:	000050ee 	andeq	r5, r0, lr, ror #1
   10238:	003b8d10 	eorseq	r8, fp, r0, lsl sp
   1023c:	a2de0200 	sbcsge	r0, lr, #0, 4
   10240:	31000000 	mrscc	r0, (UNDEF: 0)
   10244:	13000051 	movwne	r0, #81	; 0x51
   10248:	00003bff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   1024c:	00a2e002 	adceq	lr, r2, r2
   10250:	51740000 	cmnpl	r4, r0
   10254:	70130000 	andsvc	r0, r3, r0
   10258:	0200003b 	andeq	r0, r0, #59	; 0x3b
   1025c:	000097e1 	andeq	r9, r0, r1, ror #15
   10260:	0051cf00 	subseq	ip, r1, r0, lsl #30
   10264:	00ed1500 	rsceq	r1, sp, r0, lsl #10
   10268:	00000000 	andeq	r0, r0, r0
   1026c:	001a0000 	andseq	r0, sl, r0
   10270:	fa020000 	blx	90278 <__ccfg+0x702d0>
   10274:	0001080c 	andeq	r0, r1, ip, lsl #16
   10278:	fd0a0200 	stc2	2, cr0, [sl, #-0]
   1027c:	f2000000 	vhadd.s8	d0, d0, d0
   10280:	16000051 			; <UNDEFINED> instruction: 0x16000051
   10284:	00000000 	andeq	r0, r0, r0
   10288:	0000001a 	andeq	r0, r0, sl, lsl r0
   1028c:	0001130b 	andeq	r1, r1, fp, lsl #6
   10290:	00523200 	subseq	r3, r2, r0, lsl #4
   10294:	011e0b00 	tsteq	lr, r0, lsl #22
   10298:	524b0000 	subpl	r0, fp, #0
   1029c:	000d0000 	andeq	r0, sp, r0
   102a0:	94000000 	strls	r0, [r0], #-0
   102a4:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
   102a8:	00000000 	andeq	r0, r0, r0
   102ac:	0000059f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
   102b0:	17000000 	strne	r0, [r0, -r0]
   102b4:	0000236e 	andeq	r2, r0, lr, ror #6
   102b8:	00a26a05 	adceq	r6, r2, r5, lsl #20
   102bc:	7d170000 	ldcvc	0, cr0, [r7, #-0]
   102c0:	05000023 	streq	r0, [r0, #-35]	; 0xffffffdd
   102c4:	0000a284 	andeq	sl, r0, r4, lsl #5
   102c8:	0f310000 	svceq	0x00310000
   102cc:	00040000 	andeq	r0, r4, r0
   102d0:	00003e52 	andeq	r3, r0, r2, asr lr
   102d4:	3ed30104 	cdpcc	1, 13, cr0, cr3, cr4, {0}
   102d8:	ec0c0000 	stc	0, cr0, [ip], {-0}
   102dc:	6e00003d 	mcrvs	0, 0, r0, cr0, cr13, {1}
   102e0:	0800003f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5}
   102e4:	aa000040 	bge	103ec <__exidx_end+0xb698>
   102e8:	5f000000 	svcpl	0x00000000
   102ec:	02000083 	andeq	r0, r0, #131	; 0x83
   102f0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   102f4:	93030074 	movwls	r0, #12404	; 0x3074
   102f8:	0200002c 	andeq	r0, r0, #44	; 0x2c
   102fc:	003817d8 	ldrsbteq	r1, [r8], -r8
   10300:	04040000 	streq	r0, [r4], #-0
   10304:	00008307 	andeq	r8, r0, r7, lsl #6
   10308:	3d800500 	cfstr32cc	mvfx0, [r0]
   1030c:	48020000 	stmdami	r2, {}	; <UNPREDICTABLE>
   10310:	00381801 	eorseq	r1, r8, r1, lsl #16
   10314:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
   10318:	0000af05 	andeq	sl, r0, r5, lsl #30
   1031c:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
   10320:	00003da4 	andeq	r3, r0, r4, lsr #27
   10324:	001e2405 	andseq	r2, lr, r5, lsl #8
   10328:	01650200 	cmneq	r5, r0, lsl #4
   1032c:	00003817 	andeq	r3, r0, r7, lsl r8
   10330:	06010400 	streq	r0, [r1], -r0, lsl #8
   10334:	000003e5 	andeq	r0, r0, r5, ror #7
   10338:	e3080104 	movw	r0, #33028	; 0x8104
   1033c:	04000003 	streq	r0, [r0], #-3
   10340:	04460502 	strbeq	r0, [r6], #-1282	; 0xfffffafe
   10344:	02040000 	andeq	r0, r4, #0
   10348:	00028a07 	andeq	r8, r2, r7, lsl #20
   1034c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
   10350:	000000b4 	strheq	r0, [r0], -r4
   10354:	00008306 	andeq	r8, r0, r6, lsl #6
   10358:	07040400 	streq	r0, [r4, -r0, lsl #8]
   1035c:	0000007e 	andeq	r0, r0, lr, ror r0
   10360:	79070804 	stmdbvc	r7, {r2, fp}
   10364:	03000000 	movweq	r0, #0
   10368:	00002053 	andeq	r2, r0, r3, asr r0
   1036c:	830e2e03 	movwhi	r2, #60931	; 0xee03
   10370:	03000000 	movweq	r0, #0
   10374:	00001640 	andeq	r1, r0, r0, asr #12
   10378:	830e7403 	movwhi	r7, #58371	; 0xe403
   1037c:	07000000 	streq	r0, [r0, -r0]
   10380:	03a50304 			; <UNDEFINED> instruction: 0x03a50304
   10384:	000000d7 	ldrdeq	r0, [r0], -r7
   10388:	00196a08 	andseq	r6, r9, r8, lsl #20
   1038c:	0ca70300 	stceq	3, cr0, [r7]
   10390:	0000005a 	andeq	r0, r0, sl, asr r0
   10394:	001cea08 	andseq	lr, ip, r8, lsl #20
   10398:	13a80300 			; <UNDEFINED> instruction: 0x13a80300
   1039c:	000000d7 	ldrdeq	r0, [r0], -r7
   103a0:	006e0900 	rsbeq	r0, lr, r0, lsl #18
   103a4:	00e70000 	rsceq	r0, r7, r0
   103a8:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   103ac:	03000000 	movweq	r0, #0
   103b0:	03080b00 	movweq	r0, #35584	; 0x8b00
   103b4:	010b09a2 	smlatbeq	fp, r2, r9, r0
   103b8:	c40c0000 	strgt	r0, [ip], #-0
   103bc:	03000016 	movweq	r0, #22
   103c0:	002507a4 	eoreq	r0, r5, r4, lsr #15
   103c4:	0c000000 	stceq	0, cr0, [r0], {-0}
   103c8:	0000188e 	andeq	r1, r0, lr, lsl #17
   103cc:	b505a903 	strlt	sl, [r5, #-2307]	; 0xfffff6fd
   103d0:	04000000 	streq	r0, [r0], #-0
   103d4:	1a960300 	bne	fe590fdc <_estack+0xde58bfdc>
   103d8:	aa030000 	bge	d03e0 <__ccfg+0xb0438>
   103dc:	0000e703 	andeq	lr, r0, r3, lsl #14
   103e0:	0e040d00 	cdpeq	13, 0, cr0, cr4, cr0, {0}
   103e4:	00000117 	andeq	r0, r0, r7, lsl r1
   103e8:	001a1203 	andseq	r1, sl, r3, lsl #4
   103ec:	19160400 	ldmdbne	r6, {sl}
   103f0:	0000008f 	andeq	r0, r0, pc, lsl #1
   103f4:	0015f003 	andseq	pc, r5, r3
   103f8:	0d0c0500 	cfstr32eq	mvfx0, [ip, #-0]
   103fc:	00000025 	andeq	r0, r0, r5, lsr #32
   10400:	00195503 	andseq	r5, r9, r3, lsl #10
   10404:	1b230400 	blne	8d140c <__ccfg+0x8b1464>
   10408:	0000012a 	andeq	r0, r0, sl, lsr #2
   1040c:	00166f0f 	andseq	r6, r6, pc, lsl #30
   10410:	34041800 	strcc	r1, [r4], #-2048	; 0xfffff800
   10414:	00019c08 	andeq	r9, r1, r8, lsl #24
   10418:	20bf0c00 	adcscs	r0, pc, r0, lsl #24
   1041c:	36040000 	strcc	r0, [r4], -r0
   10420:	00019c13 	andeq	r9, r1, r3, lsl ip
   10424:	5f100000 	svcpl	0x00100000
   10428:	3704006b 	strcc	r0, [r4, -fp, rrx]
   1042c:	00002507 	andeq	r2, r0, r7, lsl #10
   10430:	7b0c0400 	blvc	311438 <__ccfg+0x2f1490>
   10434:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
   10438:	00250b37 	eoreq	r0, r5, r7, lsr fp
   1043c:	0c080000 	stceq	0, cr0, [r8], {-0}
   10440:	00003d6f 	andeq	r3, r0, pc, ror #26
   10444:	25143704 	ldrcs	r3, [r4, #-1796]	; 0xfffff8fc
   10448:	0c000000 	stceq	0, cr0, [r0], {-0}
   1044c:	0017420c 	andseq	r4, r7, ip, lsl #4
   10450:	1b370400 	blne	dd1458 <__ccfg+0xdb14b0>
   10454:	00000025 	andeq	r0, r0, r5, lsr #32
   10458:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
   1045c:	0b380400 	bleq	e11464 <__ccfg+0xdf14bc>
   10460:	000001a2 	andeq	r0, r0, r2, lsr #3
   10464:	04110014 	ldreq	r0, [r1], #-20	; 0xffffffec
   10468:	00000142 	andeq	r0, r0, r2, asr #2
   1046c:	00011e09 	andeq	r1, r1, r9, lsl #28
   10470:	0001b200 	andeq	fp, r1, r0, lsl #4
   10474:	00380a00 	eorseq	r0, r8, r0, lsl #20
   10478:	00000000 	andeq	r0, r0, r0
   1047c:	001dbc0f 	andseq	fp, sp, pc, lsl #24
   10480:	3c042400 	cfstrscc	mvf2, [r4], {-0}
   10484:	00023508 	andeq	r3, r2, r8, lsl #10
   10488:	159a0c00 	ldrne	r0, [sl, #3072]	; 0xc00
   1048c:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
   10490:	00002509 	andeq	r2, r0, r9, lsl #10
   10494:	eb0c0000 	bl	31049c <__ccfg+0x2f04f4>
   10498:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
   1049c:	0025093f 	eoreq	r0, r5, pc, lsr r9
   104a0:	0c040000 	stceq	0, cr0, [r4], {-0}
   104a4:	0000169e 	muleq	r0, lr, r6
   104a8:	25094004 	strcs	r4, [r9, #-4]
   104ac:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   104b0:	0019010c 	andseq	r0, r9, ip, lsl #2
   104b4:	09410400 	stmdbeq	r1, {sl}^
   104b8:	00000025 	andeq	r0, r0, r5, lsr #32
   104bc:	1b780c0c 	blne	1e134f4 <__ccfg+0x1df354c>
   104c0:	42040000 	andmi	r0, r4, #0
   104c4:	00002509 	andeq	r2, r0, r9, lsl #10
   104c8:	040c1000 	streq	r1, [ip], #-0
   104cc:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
   104d0:	00250943 	eoreq	r0, r5, r3, asr #18
   104d4:	0c140000 	ldceq	0, cr0, [r4], {-0}
   104d8:	00001677 	andeq	r1, r0, r7, ror r6
   104dc:	25094404 	strcs	r4, [r9, #-1028]	; 0xfffffbfc
   104e0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   104e4:	0018040c 	andseq	r0, r8, ip, lsl #8
   104e8:	09450400 	stmdbeq	r5, {sl}^
   104ec:	00000025 	andeq	r0, r0, r5, lsr #32
   104f0:	1ac60c1c 	bne	ff193568 <_estack+0xdf18e568>
   104f4:	46040000 	strmi	r0, [r4], -r0
   104f8:	00002509 	andeq	r2, r0, r9, lsl #10
   104fc:	12002000 	andne	r2, r0, #0
   10500:	00001526 	andeq	r1, r0, r6, lsr #10
   10504:	4f040108 	svcmi	0x00040108
   10508:	00027a08 	andeq	r7, r2, r8, lsl #20
   1050c:	20120c00 	andscs	r0, r2, r0, lsl #24
   10510:	50040000 	andpl	r0, r4, r0
   10514:	00027a0a 	andeq	r7, r2, sl, lsl #20
   10518:	4a0c0000 	bmi	310520 <__ccfg+0x2f0578>
   1051c:	0400001e 	streq	r0, [r0], #-30	; 0xffffffe2
   10520:	027a0951 	rsbseq	r0, sl, #1327104	; 0x144000
   10524:	13800000 	orrne	r0, r0, #0
   10528:	00002034 	andeq	r2, r0, r4, lsr r0
   1052c:	1e0a5304 	cdpne	3, 0, cr5, cr10, cr4, {0}
   10530:	00000001 	andeq	r0, r0, r1
   10534:	20a31301 	adccs	r1, r3, r1, lsl #6
   10538:	56040000 	strpl	r0, [r4], -r0
   1053c:	00011e0a 	andeq	r1, r1, sl, lsl #28
   10540:	00010400 	andeq	r0, r1, r0, lsl #8
   10544:	00011709 	andeq	r1, r1, r9, lsl #14
   10548:	00028a00 	andeq	r8, r2, r0, lsl #20
   1054c:	00380a00 	eorseq	r0, r8, r0, lsl #20
   10550:	001f0000 	andseq	r0, pc, r0
   10554:	001be412 	andseq	lr, fp, r2, lsl r4
   10558:	04019000 	streq	r9, [r1], #-0
   1055c:	02cd0862 	sbceq	r0, sp, #6422528	; 0x620000
   10560:	bf0c0000 	svclt	0x000c0000
   10564:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
   10568:	02cd1263 	sbceq	r1, sp, #805306374	; 0x30000006
   1056c:	0c000000 	stceq	0, cr0, [r0], {-0}
   10570:	00001813 	andeq	r1, r0, r3, lsl r8
   10574:	25066404 	strcs	r6, [r6, #-1028]	; 0xfffffbfc
   10578:	04000000 	streq	r0, [r0], #-0
   1057c:	0016510c 	andseq	r5, r6, ip, lsl #2
   10580:	09660400 	stmdbeq	r6!, {sl}^
   10584:	000002d3 	ldrdeq	r0, [r0], -r3
   10588:	15260c08 	strne	r0, [r6, #-3080]!	; 0xfffff3f8
   1058c:	67040000 	strvs	r0, [r4, -r0]
   10590:	0002351e 	andeq	r3, r2, lr, lsl r5
   10594:	11008800 	tstne	r0, r0, lsl #16
   10598:	00028a04 	andeq	r8, r2, r4, lsl #20
   1059c:	02e30900 	rsceq	r0, r3, #0, 18
   105a0:	02e30000 	rsceq	r0, r3, #0
   105a4:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   105a8:	1f000000 	svcne	0x00000000
   105ac:	e9041100 	stmdb	r4, {r8, ip}
   105b0:	14000002 	strne	r0, [r0], #-2
   105b4:	001f190f 	andseq	r1, pc, pc, lsl #18
   105b8:	7a040800 	bvc	1125c0 <__ccfg+0xf2618>
   105bc:	00031208 	andeq	r1, r3, r8, lsl #4
   105c0:	19fc0c00 	ldmibne	ip!, {sl, fp}^
   105c4:	7b040000 	blvc	1105cc <__ccfg+0xf0624>
   105c8:	00031211 	andeq	r1, r3, r1, lsl r2
   105cc:	da0c0000 	ble	3105d4 <__ccfg+0x2f062c>
   105d0:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
   105d4:	0025067c 	eoreq	r0, r5, ip, ror r6
   105d8:	00040000 	andeq	r0, r4, r0
   105dc:	006e0411 	rsbeq	r0, lr, r1, lsl r4
   105e0:	3a0f0000 	bcc	3d05e8 <__ccfg+0x3b0640>
   105e4:	68000017 	stmdavs	r0, {r0, r1, r2, r4}
   105e8:	5b08ba04 	blpl	23ee00 <__ccfg+0x21ee58>
   105ec:	10000004 	andne	r0, r0, r4
   105f0:	0400705f 	streq	r7, [r0], #-95	; 0xffffffa1
   105f4:	031212bb 	tsteq	r2, #-1342177269	; 0xb000000b
   105f8:	10000000 	andne	r0, r0, r0
   105fc:	0400725f 	streq	r7, [r0], #-607	; 0xfffffda1
   10600:	002507bc 	strhteq	r0, [r5], -ip
   10604:	10040000 	andne	r0, r4, r0
   10608:	0400775f 	streq	r7, [r0], #-1887	; 0xfffff8a1
   1060c:	002507bd 	strhteq	r0, [r5], -sp
   10610:	0c080000 	stceq	0, cr0, [r8], {-0}
   10614:	000015bd 			; <UNDEFINED> instruction: 0x000015bd
   10618:	7509be04 	strvc	fp, [r9, #-3588]	; 0xfffff1fc
   1061c:	0c000000 	stceq	0, cr0, [r0], {-0}
   10620:	001a3f0c 	andseq	r3, sl, ip, lsl #30
   10624:	09bf0400 	ldmibeq	pc!, {sl}	; <UNPREDICTABLE>
   10628:	00000075 	andeq	r0, r0, r5, ror r0
   1062c:	625f100e 	subsvs	r1, pc, #14
   10630:	c0040066 	andgt	r0, r4, r6, rrx
   10634:	0002ea11 	andeq	lr, r2, r1, lsl sl
   10638:	b40c1000 	strlt	r1, [ip], #-0
   1063c:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
   10640:	002507c1 	eoreq	r0, r5, r1, asr #15
   10644:	0c180000 	ldceq	0, cr0, [r8], {-0}
   10648:	00001656 	andeq	r1, r0, r6, asr r6
   1064c:	170ac804 	strne	ip, [sl, -r4, lsl #16]
   10650:	1c000001 	stcne	0, cr0, [r0], {1}
   10654:	00136a0c 	andseq	r6, r3, ip, lsl #20
   10658:	1dca0400 	cfstrdne	mvd0, [sl]
   1065c:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   10660:	13310c20 	teqne	r1, #32, 24	; 0x2000
   10664:	cc040000 	stcgt	0, cr0, [r4], {-0}
   10668:	0006091d 	andeq	r0, r6, sp, lsl r9
   1066c:	d00c2400 	andle	r2, ip, r0, lsl #8
   10670:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
   10674:	062d0dcf 	strteq	r0, [sp], -pc, asr #27
   10678:	0c280000 	stceq	0, cr0, [r8], #-0
   1067c:	0000131f 	andeq	r1, r0, pc, lsl r3
   10680:	4709d004 	strmi	sp, [r9, -r4]
   10684:	2c000006 	stccs	0, cr0, [r0], {6}
   10688:	62755f10 	rsbsvs	r5, r5, #16, 30	; 0x40
   1068c:	11d30400 	bicsne	r0, r3, r0, lsl #8
   10690:	000002ea 	andeq	r0, r0, sl, ror #5
   10694:	755f1030 	ldrbvc	r1, [pc, #-48]	; 1066c <__exidx_end+0xb918>
   10698:	d4040070 	strle	r0, [r4], #-112	; 0xffffff90
   1069c:	00031212 	andeq	r1, r3, r2, lsl r2
   106a0:	5f103800 	svcpl	0x00103800
   106a4:	04007275 	streq	r7, [r0], #-629	; 0xfffffd8b
   106a8:	002507d5 	ldrdeq	r0, [r5], -r5	; <UNPREDICTABLE>
   106ac:	0c3c0000 	ldceq	0, cr0, [ip], #-0
   106b0:	000020e7 	andeq	r2, r0, r7, ror #1
   106b4:	4d11d804 	ldcmi	8, cr13, [r1, #-16]
   106b8:	40000006 	andmi	r0, r0, r6
   106bc:	00205a0c 	eoreq	r5, r0, ip, lsl #20
   106c0:	11d90400 	bicsne	r0, r9, r0, lsl #8
   106c4:	0000065d 	andeq	r0, r0, sp, asr r6
   106c8:	6c5f1043 	mrrcvs	0, 4, r1, pc, cr3	; <UNPREDICTABLE>
   106cc:	dc040062 	stcle	0, cr0, [r4], {98}	; 0x62
   106d0:	0002ea11 	andeq	lr, r2, r1, lsl sl
   106d4:	b30c4400 	movwlt	r4, #50176	; 0xc400
   106d8:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
   106dc:	002507df 	ldrdeq	r0, [r5], -pc	; <UNPREDICTABLE>
   106e0:	0c4c0000 	mareq	acc0, r0, ip
   106e4:	00001783 	andeq	r1, r0, r3, lsl #15
   106e8:	9d0ae004 	stcls	0, cr14, [sl, #-16]
   106ec:	50000000 	andpl	r0, r0, r0
   106f0:	000f870c 	andeq	r8, pc, ip, lsl #14
   106f4:	12e30400 	rscne	r0, r3, #0, 8
   106f8:	00000479 	andeq	r0, r0, r9, ror r4
   106fc:	1dd50c54 	ldclne	12, cr0, [r5, #336]	; 0x150
   10700:	e7040000 	str	r0, [r4, -r0]
   10704:	0001360c 	andeq	r3, r1, ip, lsl #12
   10708:	ec0c5800 	stc	8, cr5, [ip], {-0}
   1070c:	0400001b 	streq	r0, [r0], #-27	; 0xffffffe5
   10710:	010b0ee9 	smlatteq	fp, r9, lr, r0
   10714:	0c5c0000 	mraeq	r0, ip, acc0
   10718:	0000209b 	muleq	r0, fp, r0
   1071c:	2509ea04 	strcs	lr, [r9, #-2564]	; 0xfffff5fc
   10720:	64000000 	strvs	r0, [r0], #-0
   10724:	00251500 	eoreq	r1, r5, r0, lsl #10
   10728:	04790000 	ldrbteq	r0, [r9], #-0
   1072c:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
   10730:	16000004 	strne	r0, [r0], -r4
   10734:	00000117 	andeq	r0, r0, r7, lsl r1
   10738:	0005cd16 	andeq	ip, r5, r6, lsl sp
   1073c:	00251600 	eoreq	r1, r5, r0, lsl #12
   10740:	11000000 	mrsne	r0, (UNDEF: 0)
   10744:	00048404 	andeq	r8, r4, r4, lsl #8
   10748:	04790600 	ldrbteq	r0, [r9], #-1536	; 0xfffffa00
   1074c:	21170000 	tstcs	r7, r0
   10750:	28000020 	stmdacs	r0, {r5}
   10754:	02650404 	rsbeq	r0, r5, #4, 8	; 0x4000000
   10758:	0005cd08 	andeq	ip, r5, r8, lsl #26
   1075c:	1adc1800 	bne	ff716764 <_estack+0xdf711764>
   10760:	67040000 	strvs	r0, [r4, -r0]
   10764:	00250702 	eoreq	r0, r5, r2, lsl #14
   10768:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   1076c:	000019d9 	ldrdeq	r1, [r0], -r9
   10770:	0b026c04 	bleq	ab788 <__ccfg+0x8b7e0>
   10774:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
   10778:	162e1804 	strtne	r1, [lr], -r4, lsl #16
   1077c:	6c040000 	stcvs	0, cr0, [r4], {-0}
   10780:	06b91402 	ldrteq	r1, [r9], r2, lsl #8
   10784:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
   10788:	000020d6 	ldrdeq	r2, [r0], -r6
   1078c:	1e026c04 	cdpne	12, 0, cr6, cr2, cr4, {0}
   10790:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
   10794:	180e180c 	stmdane	lr, {r2, r3, fp, ip}
   10798:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
   1079c:	00250802 	eoreq	r0, r5, r2, lsl #16
   107a0:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
   107a4:	000017ae 	andeq	r1, r0, lr, lsr #15
   107a8:	08026f04 	stmdaeq	r2, {r2, r8, r9, sl, fp, sp, lr}
   107ac:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
   107b0:	207a1814 	rsbscs	r1, sl, r4, lsl r8
   107b4:	72040000 	andvc	r0, r4, #0
   107b8:	00250702 	eoreq	r0, r5, r2, lsl #14
   107bc:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
   107c0:	00003c1b 	andeq	r3, r0, fp, lsl ip
   107c4:	16027304 	strne	r7, [r2], -r4, lsl #6
   107c8:	00000950 	andeq	r0, r0, r0, asr r9
   107cc:	19a11834 	stmibne	r1!, {r2, r4, r5, fp, ip}
   107d0:	75040000 	strvc	r0, [r4, #-0]
   107d4:	00250702 	eoreq	r0, r5, r2, lsl #14
   107d8:	18380000 	ldmdane	r8!, {}	; <UNPREDICTABLE>
   107dc:	00001a6c 	andeq	r1, r0, ip, ror #20
   107e0:	0a027704 	beq	ae3f8 <__ccfg+0x8e450>
   107e4:	00000961 	andeq	r0, r0, r1, ror #18
   107e8:	168c183c 			; <UNDEFINED> instruction: 0x168c183c
   107ec:	7a040000 	bvc	1107f4 <__ccfg+0xf084c>
   107f0:	019c1302 	orrseq	r1, ip, r2, lsl #6
   107f4:	18400000 	stmdane	r0, {}^	; <UNPREDICTABLE>
   107f8:	00001717 	andeq	r1, r0, r7, lsl r7
   107fc:	07027b04 	streq	r7, [r2, -r4, lsl #22]
   10800:	00000025 	andeq	r0, r0, r5, lsr #32
   10804:	18a21844 	stmiane	r2!, {r2, r6, fp, ip}
   10808:	7c040000 	stcvc	0, cr0, [r4], {-0}
   1080c:	019c1302 	orrseq	r1, ip, r2, lsl #6
   10810:	18480000 	stmdane	r8, {}^	; <UNPREDICTABLE>
   10814:	00001a02 	andeq	r1, r0, r2, lsl #20
   10818:	14027d04 	strne	r7, [r2], #-3332	; 0xfffff2fc
   1081c:	00000967 	andeq	r0, r0, r7, ror #18
   10820:	1d73184c 	ldclne	8, cr1, [r3, #-304]!	; 0xfffffed0
   10824:	80040000 	andhi	r0, r4, r0
   10828:	00250702 	eoreq	r0, r5, r2, lsl #14
   1082c:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
   10830:	00001ea8 	andeq	r1, r0, r8, lsr #29
   10834:	09028104 	stmdbeq	r2, {r2, r8, pc}
   10838:	000005cd 	andeq	r0, r0, sp, asr #11
   1083c:	04c41854 	strbeq	r1, [r4], #2132	; 0x854
   10840:	a4040000 	strge	r0, [r4], #-0
   10844:	08940702 	ldmeq	r4, {r1, r8, r9, sl}
   10848:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
   1084c:	00001be4 	andeq	r1, r0, r4, ror #23
   10850:	1302a804 	movwne	sl, #10244	; 0x2804
   10854:	000002cd 	andeq	r0, r0, sp, asr #5
   10858:	24190148 	ldrcs	r0, [r9], #-328	; 0xfffffeb8
   1085c:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
   10860:	8a1202a9 	bhi	49130c <__ccfg+0x471364>
   10864:	4c000002 	stcmi	0, cr0, [r0], {2}
   10868:	190b1901 	stmdbne	fp, {r0, r8, fp, ip}
   1086c:	ad040000 	stcge	0, cr0, [r4, #-0]
   10870:	09780c02 	ldmdbeq	r8!, {r1, sl, fp}^
   10874:	02dc0000 	sbcseq	r0, ip, #0
   10878:	001fc319 	andseq	ip, pc, r9, lsl r3	; <UNPREDICTABLE>
   1087c:	02b20400 	adcseq	r0, r2, #0, 8
   10880:	00067a10 	andeq	r7, r6, r0, lsl sl
   10884:	1902e000 	stmdbne	r2, {sp, lr, pc}
   10888:	00001cab 	andeq	r1, r0, fp, lsr #25
   1088c:	0a02b404 	beq	bd8a4 <__ccfg+0x9d8fc>
   10890:	00000984 	andeq	r0, r0, r4, lsl #19
   10894:	110002ec 	smlattne	r0, ip, r2, r0
   10898:	0005d304 	andeq	sp, r5, r4, lsl #6
   1089c:	08010400 	stmdaeq	r1, {sl}
   108a0:	000003ec 	andeq	r0, r0, ip, ror #7
   108a4:	0005d306 	andeq	sp, r5, r6, lsl #6
   108a8:	5b041100 	blpl	114cb0 <__ccfg+0xf4d08>
   108ac:	15000004 	strne	r0, [r0, #-4]
   108b0:	00000025 	andeq	r0, r0, r5, lsr #32
   108b4:	00000603 	andeq	r0, r0, r3, lsl #12
   108b8:	00047916 	andeq	r7, r4, r6, lsl r9
   108bc:	01171600 	tsteq	r7, r0, lsl #12
   108c0:	03160000 	tsteq	r6, #0
   108c4:	16000006 	strne	r0, [r0], -r6
   108c8:	00000025 	andeq	r0, r0, r5, lsr #32
   108cc:	da041100 	ble	114cd4 <__ccfg+0xf4d2c>
   108d0:	11000005 	tstne	r0, r5
   108d4:	0005e504 	andeq	lr, r5, r4, lsl #10
   108d8:	00a91500 	adceq	r1, r9, r0, lsl #10
   108dc:	062d0000 	strteq	r0, [sp], -r0
   108e0:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
   108e4:	16000004 	strne	r0, [r0], -r4
   108e8:	00000117 	andeq	r0, r0, r7, lsl r1
   108ec:	0000a916 	andeq	sl, r0, r6, lsl r9
   108f0:	00251600 	eoreq	r1, r5, r0, lsl #12
   108f4:	11000000 	mrsne	r0, (UNDEF: 0)
   108f8:	00060f04 	andeq	r0, r6, r4, lsl #30
   108fc:	00251500 	eoreq	r1, r5, r0, lsl #10
   10900:	06470000 	strbeq	r0, [r7], -r0
   10904:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
   10908:	16000004 	strne	r0, [r0], -r4
   1090c:	00000117 	andeq	r0, r0, r7, lsl r1
   10910:	33041100 	movwcc	r1, #16640	; 0x4100
   10914:	09000006 	stmdbeq	r0, {r1, r2}
   10918:	0000006e 	andeq	r0, r0, lr, rrx
   1091c:	0000065d 	andeq	r0, r0, sp, asr r6
   10920:	0000380a 	andeq	r3, r0, sl, lsl #16
   10924:	09000200 	stmdbeq	r0, {r9}
   10928:	0000006e 	andeq	r0, r0, lr, rrx
   1092c:	0000066d 	andeq	r0, r0, sp, ror #12
   10930:	0000380a 	andeq	r3, r0, sl, lsl #16
   10934:	05000000 	streq	r0, [r0, #-0]
   10938:	00001777 	andeq	r1, r0, r7, ror r7
   1093c:	1a012404 	bne	59954 <__ccfg+0x399ac>
   10940:	00000318 	andeq	r0, r0, r8, lsl r3
   10944:	001f501a 	andseq	r5, pc, sl, lsl r0	; <UNPREDICTABLE>
   10948:	28040c00 	stmdacs	r4, {sl, fp}
   1094c:	06b30801 	ldrteq	r0, [r3], r1, lsl #16
   10950:	bf180000 	svclt	0x00180000
   10954:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
   10958:	b311012a 	tstlt	r1, #-2147483638	; 0x8000000a
   1095c:	00000006 	andeq	r0, r0, r6
   10960:	001e1d18 	andseq	r1, lr, r8, lsl sp
   10964:	012b0400 			; <UNDEFINED> instruction: 0x012b0400
   10968:	00002507 	andeq	r2, r0, r7, lsl #10
   1096c:	70180400 	andsvc	r0, r8, r0, lsl #8
   10970:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
   10974:	b90b012c 	stmdblt	fp, {r2, r3, r5, r8}
   10978:	08000006 	stmdaeq	r0, {r1, r2}
   1097c:	7a041100 	bvc	114d84 <__ccfg+0xf4ddc>
   10980:	11000006 	tstne	r0, r6
   10984:	00066d04 	andeq	r6, r6, r4, lsl #26
   10988:	17031a00 	strne	r1, [r3, -r0, lsl #20]
   1098c:	040e0000 	streq	r0, [lr], #-0
   10990:	f8080144 			; <UNDEFINED> instruction: 0xf8080144
   10994:	18000006 	stmdane	r0, {r1, r2}
   10998:	00000c8d 	andeq	r0, r0, sp, lsl #25
   1099c:	12014504 	andne	r4, r1, #4, 10	; 0x1000000
   109a0:	000006f8 	strdeq	r0, [r0], -r8
   109a4:	1a0c1800 	bne	3169ac <__ccfg+0x2f6a04>
   109a8:	46040000 	strmi	r0, [r4], -r0
   109ac:	06f81201 	ldrbteq	r1, [r8], r1, lsl #4
   109b0:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
   109b4:	00000b32 	andeq	r0, r0, r2, lsr fp
   109b8:	12014704 	andne	r4, r1, #4, 14	; 0x100000
   109bc:	0000007c 	andeq	r0, r0, ip, ror r0
   109c0:	7c09000c 	stcvc	0, cr0, [r9], {12}
   109c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   109c8:	0a000007 	beq	109ec <__exidx_end+0xbc98>
   109cc:	00000038 	andeq	r0, r0, r8, lsr r0
   109d0:	d01b0002 	andsle	r0, fp, r2
   109d4:	07028504 	streq	r8, [r2, -r4, lsl #10]
   109d8:	0000081d 	andeq	r0, r0, sp, lsl r8
   109dc:	00206018 	eoreq	r6, r0, r8, lsl r0
   109e0:	02870400 	addeq	r0, r7, #0, 8
   109e4:	00003818 	andeq	r3, r0, r8, lsl r8
   109e8:	d1180000 	tstle	r8, r0
   109ec:	0400001f 	streq	r0, [r0], #-31	; 0xffffffe1
   109f0:	cd120288 	lfmgt	f0, 4, [r2, #-544]	; 0xfffffde0
   109f4:	04000005 	streq	r0, [r0], #-5
   109f8:	00172d18 	andseq	r2, r7, r8, lsl sp
   109fc:	02890400 	addeq	r0, r9, #0, 8
   10a00:	00081d10 	andeq	r1, r8, r0, lsl sp
   10a04:	2a180800 	bcs	612a0c <__ccfg+0x5f2a64>
   10a08:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
   10a0c:	b217028a 	andslt	r0, r7, #-1610612728	; 0xa0000008
   10a10:	24000001 	strcs	r0, [r0], #-1
   10a14:	0019e018 	andseq	lr, r9, r8, lsl r0
   10a18:	028b0400 	addeq	r0, fp, #0, 8
   10a1c:	0000250f 	andeq	r2, r0, pc, lsl #10
   10a20:	ba184800 	blt	622a28 <__ccfg+0x602a80>
   10a24:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
   10a28:	962c028c 	strtls	r0, [ip], -ip, lsl #5
   10a2c:	50000000 	andpl	r0, r0, r0
   10a30:	00156f18 	andseq	r6, r5, r8, lsl pc
   10a34:	028d0400 	addeq	r0, sp, #0, 8
   10a38:	0006bf1a 	andeq	fp, r6, sl, lsl pc
   10a3c:	d5185800 	ldrle	r5, [r8, #-2048]	; 0xfffff800
   10a40:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
   10a44:	0b16028e 	bleq	591484 <__ccfg+0x5714dc>
   10a48:	68000001 	stmdavs	r0, {r0}
   10a4c:	001fde18 	andseq	sp, pc, r8, lsl lr	; <UNPREDICTABLE>
   10a50:	028f0400 	addeq	r0, pc, #0, 8
   10a54:	00010b16 	andeq	r0, r1, r6, lsl fp
   10a58:	41187000 	tstmi	r8, r0
   10a5c:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
   10a60:	0b160290 	bleq	5914a8 <__ccfg+0x571500>
   10a64:	78000001 	stmdavc	r0, {r0}
   10a68:	001d8318 	andseq	r8, sp, r8, lsl r3
   10a6c:	02910400 	addseq	r0, r1, #0, 8
   10a70:	00082d10 	andeq	r2, r8, r0, lsl sp
   10a74:	21188000 	tstcs	r8, r0
   10a78:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
   10a7c:	3d100292 	lfmcc	f0, 4, [r0, #-584]	; 0xfffffdb8
   10a80:	88000008 	stmdahi	r0, {r3}
   10a84:	001eb818 	andseq	fp, lr, r8, lsl r8
   10a88:	02930400 	addseq	r0, r3, #0, 8
   10a8c:	0000250f 	andeq	r2, r0, pc, lsl #10
   10a90:	1518a000 	ldrne	sl, [r8, #-0]
   10a94:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
   10a98:	0b160294 	bleq	5914f0 <__ccfg+0x571548>
   10a9c:	a4000001 	strge	r0, [r0], #-1
   10aa0:	00191518 	andseq	r1, r9, r8, lsl r5
   10aa4:	02950400 	addseq	r0, r5, #0, 8
   10aa8:	00010b16 	andeq	r0, r1, r6, lsl fp
   10aac:	4718ac00 	ldrmi	sl, [r8, -r0, lsl #24]
   10ab0:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
   10ab4:	0b160296 	bleq	591514 <__ccfg+0x57156c>
   10ab8:	b4000001 	strlt	r0, [r0], #-1
   10abc:	001a2718 	andseq	r2, sl, r8, lsl r7
   10ac0:	02970400 	addseq	r0, r7, #0, 8
   10ac4:	00010b16 	andeq	r0, r1, r6, lsl fp
   10ac8:	c418bc00 	ldrgt	fp, [r8], #-3072	; 0xfffff400
   10acc:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
   10ad0:	0b160298 	bleq	591538 <__ccfg+0x571590>
   10ad4:	c4000001 	strgt	r0, [r0], #-1
   10ad8:	001ada18 	andseq	sp, sl, r8, lsl sl
   10adc:	02990400 	addseq	r0, r9, #0, 8
   10ae0:	00002508 	andeq	r2, r0, r8, lsl #10
   10ae4:	0900cc00 	stmdbeq	r0, {sl, fp, lr, pc}
   10ae8:	000005d3 	ldrdeq	r0, [r0], -r3
   10aec:	0000082d 	andeq	r0, r0, sp, lsr #16
   10af0:	0000380a 	andeq	r3, r0, sl, lsl #16
   10af4:	09001900 	stmdbeq	r0, {r8, fp, ip}
   10af8:	000005d3 	ldrdeq	r0, [r0], -r3
   10afc:	0000083d 	andeq	r0, r0, sp, lsr r8
   10b00:	0000380a 	andeq	r3, r0, sl, lsl #16
   10b04:	09000700 	stmdbeq	r0, {r8, r9, sl}
   10b08:	000005d3 	ldrdeq	r0, [r0], -r3
   10b0c:	0000084d 	andeq	r0, r0, sp, asr #16
   10b10:	0000380a 	andeq	r3, r0, sl, lsl #16
   10b14:	1b001700 	blne	1671c <__exidx_end+0x119c8>
   10b18:	029e04f0 	addseq	r0, lr, #240, 8	; 0xf0000000
   10b1c:	00087407 	andeq	r7, r8, r7, lsl #8
   10b20:	16f41800 	ldrbtne	r1, [r4], r0, lsl #16
   10b24:	a1040000 	mrsge	r0, (UNDEF: 4)
   10b28:	08741b02 	ldmdaeq	r4!, {r1, r8, r9, fp, ip}^
   10b2c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   10b30:	000020de 	ldrdeq	r2, [r0], -lr
   10b34:	1802a204 	stmdane	r2, {r2, r9, sp, pc}
   10b38:	00000884 	andeq	r0, r0, r4, lsl #17
   10b3c:	12090078 	andne	r0, r9, #120	; 0x78
   10b40:	84000003 	strhi	r0, [r0], #-3
   10b44:	0a000008 	beq	10b6c <__exidx_end+0xbe18>
   10b48:	00000038 	andeq	r0, r0, r8, lsr r0
   10b4c:	3809001d 	stmdacc	r9, {r0, r2, r3, r4}
   10b50:	94000000 	strls	r0, [r0], #-0
   10b54:	0a000008 	beq	10b7c <__exidx_end+0xbe28>
   10b58:	00000038 	andeq	r0, r0, r8, lsr r0
   10b5c:	f01c001d 			; <UNDEFINED> instruction: 0xf01c001d
   10b60:	03028304 	movweq	r8, #8964	; 0x2304
   10b64:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
   10b68:	0020211d 	eoreq	r2, r0, sp, lsl r1
   10b6c:	029a0400 	addseq	r0, sl, #0, 8
   10b70:	0007080b 	andeq	r0, r7, fp, lsl #16
   10b74:	1d451d00 	stclne	13, cr1, [r5, #-0]
   10b78:	a3040000 	movwge	r0, #16384	; 0x4000
   10b7c:	084d0b02 	stmdaeq	sp, {r1, r8, r9, fp}^
   10b80:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   10b84:	000005d3 	ldrdeq	r0, [r0], -r3
   10b88:	000008c9 	andeq	r0, r0, r9, asr #17
   10b8c:	0000380a 	andeq	r3, r0, sl, lsl #16
   10b90:	12001800 	andne	r1, r0, #0, 16
   10b94:	000020c5 	andeq	r2, r0, r5, asr #1
   10b98:	b206016c 	andlt	r0, r6, #108, 2
   10b9c:	00095008 	andeq	r5, r9, r8
   10ba0:	3eac0c00 	cdpcc	12, 10, cr0, cr12, cr0, {0}
   10ba4:	b4060000 	strlt	r0, [r6], #-0
   10ba8:	000df80b 	andeq	pc, sp, fp, lsl #16
   10bac:	610c0000 	mrsvs	r0, (UNDEF: 12)
   10bb0:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
   10bb4:	0e320bb5 	vmoveq.s16	r0, d18[2]
   10bb8:	0ce00000 	stcleq	0, cr0, [r0]
   10bbc:	00003cf7 	strdeq	r3, [r0], -r7
   10bc0:	610bb706 	tstvs	fp, r6, lsl #14
   10bc4:	e400000e 	str	r0, [r0], #-14
   10bc8:	003c670c 	eorseq	r6, ip, ip, lsl #14
   10bcc:	0ab90600 	beq	fee523d4 <_estack+0xdee4d3d4>
   10bd0:	00000025 	andeq	r0, r0, r5, lsr #32
   10bd4:	3c330ce8 	ldccc	12, cr0, [r3], #-928	; 0xfffffc60
   10bd8:	ba060000 	blt	190be0 <__ccfg+0x170c38>
   10bdc:	0005cd0b 	andeq	ip, r5, fp, lsl #26
   10be0:	610cec00 	tstvs	ip, r0, lsl #24
   10be4:	0600003c 			; <UNDEFINED> instruction: 0x0600003c
   10be8:	09d212bb 	ldmibeq	r2, {r0, r1, r3, r4, r5, r7, r9, ip}^
   10bec:	13f00000 	mvnsne	r0, #0
   10bf0:	00003d75 	andeq	r3, r0, r5, ror sp
   10bf4:	670bbd06 	strvs	fp, [fp, -r6, lsl #26]
   10bf8:	2800000e 	stmdacs	r0, {r1, r2, r3}
   10bfc:	3d961301 	ldccc	3, cr1, [r6, #4]
   10c00:	be060000 	cdplt	0, 0, cr0, cr6, cr0, {0}
   10c04:	000e770b 	andeq	r7, lr, fp, lsl #14
   10c08:	13012a00 	movwne	r2, #6656	; 0x1a00
   10c0c:	00003ce7 	andeq	r3, r0, r7, ror #25
   10c10:	770bbf06 	strvc	fp, [fp, -r6, lsl #30]
   10c14:	4a00000e 	bmi	10c54 <__exidx_end+0xbf00>
   10c18:	04110001 	ldreq	r0, [r1], #-1
   10c1c:	000008c9 	andeq	r0, r0, r9, asr #17
   10c20:	0009611e 	andeq	r6, r9, lr, lsl r1
   10c24:	04791600 	ldrbteq	r1, [r9], #-1536	; 0xfffffa00
   10c28:	11000000 	mrsne	r0, (UNDEF: 0)
   10c2c:	00095604 	andeq	r5, r9, r4, lsl #12
   10c30:	9c041100 	stflss	f1, [r4], {-0}
   10c34:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
   10c38:	00000978 	andeq	r0, r0, r8, ror r9
   10c3c:	00002516 	andeq	r2, r0, r6, lsl r5
   10c40:	04110000 	ldreq	r0, [r1], #-0
   10c44:	0000097e 	andeq	r0, r0, lr, ror r9
   10c48:	096d0411 	stmdbeq	sp!, {r0, r4, sl}^
   10c4c:	6d090000 	stcvs	0, cr0, [r9, #-0]
   10c50:	94000006 	strls	r0, [r0], #-6
   10c54:	0a000009 	beq	10c80 <__exidx_end+0xbf2c>
   10c58:	00000038 	andeq	r0, r0, r8, lsr r0
   10c5c:	f81f0002 			; <UNDEFINED> instruction: 0xf81f0002
   10c60:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
   10c64:	79170333 	ldmdbvc	r7, {r0, r1, r4, r5, r8, r9}
   10c68:	1f000004 	svcne	0x00000004
   10c6c:	00001cf1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
   10c70:	1d033404 	cfstrsne	mvf3, [r3, #-16]
   10c74:	0000047f 	andeq	r0, r0, pc, ror r4
   10c78:	09b90411 	ldmibeq	r9!, {r0, r4, sl}
   10c7c:	ae0e0000 	cdpge	0, 0, cr0, cr14, cr0, {0}
   10c80:	20000009 	andcs	r0, r0, r9
   10c84:	003dbd21 	eorseq	fp, sp, r1, lsr #26
   10c88:	0e670700 	cdpeq	7, 6, cr0, cr7, cr0, {0}
   10c8c:	000005cd 	andeq	r0, r0, sp, asr #11
   10c90:	001a9703 	andseq	r9, sl, r3, lsl #14
   10c94:	14560800 	ldrbne	r0, [r6], #-2048	; 0xfffff800
   10c98:	0000010b 	andeq	r0, r0, fp, lsl #2
   10c9c:	003c610f 	eorseq	r6, ip, pc, lsl #2
   10ca0:	2a093800 	bcs	25eca8 <__ccfg+0x23ed00>
   10ca4:	000b1808 	andeq	r1, fp, r8, lsl #16
   10ca8:	3d4a0c00 	stclcc	12, cr0, [sl, #-0]
   10cac:	2c090000 	stccs	0, cr0, [r9], {-0}
   10cb0:	0005cd09 	andeq	ip, r5, r9, lsl #26
   10cb4:	6c0c0000 	stcvs	0, cr0, [ip], {-0}
   10cb8:	0900003e 	stmdbeq	r0, {r1, r2, r3, r4, r5}
   10cbc:	05cd092d 	strbeq	r0, [sp, #2349]	; 0x92d
   10cc0:	0c040000 	stceq	0, cr0, [r4], {-0}
   10cc4:	00003d25 	andeq	r3, r0, r5, lsr #26
   10cc8:	cd092e09 	stcgt	14, cr2, [r9, #-36]	; 0xffffffdc
   10ccc:	08000005 	stmdaeq	r0, {r0, r2}
   10cd0:	003c8c0c 	eorseq	r8, ip, ip, lsl #24
   10cd4:	092f0900 	stmdbeq	pc!, {r8, fp}	; <UNPREDICTABLE>
   10cd8:	000005cd 	andeq	r0, r0, sp, asr #11
   10cdc:	3c230c0c 	stccc	12, cr0, [r3], #-48	; 0xffffffd0
   10ce0:	30090000 	andcc	r0, r9, r0
   10ce4:	0005cd09 	andeq	ip, r5, r9, lsl #26
   10ce8:	460c1000 	strmi	r1, [ip], -r0
   10cec:	0900003d 	stmdbeq	r0, {r0, r2, r3, r4, r5}
   10cf0:	05cd0931 	strbeq	r0, [sp, #2353]	; 0x931
   10cf4:	0c140000 	ldceq	0, cr0, [r4], {-0}
   10cf8:	00003e68 	andeq	r3, r0, r8, ror #28
   10cfc:	cd093209 	sfmgt	f3, 4, [r9, #-36]	; 0xffffffdc
   10d00:	18000005 	stmdane	r0, {r0, r2}
   10d04:	003d210c 	eorseq	r2, sp, ip, lsl #2
   10d08:	09330900 	ldmdbeq	r3!, {r8, fp}
   10d0c:	000005cd 	andeq	r0, r0, sp, asr #11
   10d10:	3d880c1c 	stccc	12, cr0, [r8, #112]	; 0x70
   10d14:	34090000 	strcc	r0, [r9], #-0
   10d18:	0005cd09 	andeq	ip, r5, r9, lsl #26
   10d1c:	670c2000 	strvs	r2, [ip, -r0]
   10d20:	0900003d 	stmdbeq	r0, {r0, r2, r3, r4, r5}
   10d24:	05cd0935 	strbeq	r0, [sp, #2357]	; 0x935
   10d28:	0c240000 	stceq	0, cr0, [r4], #-0
   10d2c:	00003fcc 	andeq	r3, r0, ip, asr #31
   10d30:	d3083609 	movwle	r3, #34313	; 0x8609
   10d34:	28000005 	stmdacs	r0, {r0, r2}
   10d38:	003fd00c 	eorseq	sp, pc, ip
   10d3c:	08370900 	ldmdaeq	r7!, {r8, fp}
   10d40:	000005d3 	ldrdeq	r0, [r0], -r3
   10d44:	3d380c29 	ldccc	12, cr0, [r8, #-164]!	; 0xffffff5c
   10d48:	38090000 	stmdacc	r9, {}	; <UNPREDICTABLE>
   10d4c:	0005d308 	andeq	sp, r5, r8, lsl #6
   10d50:	cb0c2a00 	blgt	31b558 <__ccfg+0x2fb5b0>
   10d54:	0900003d 	stmdbeq	r0, {r0, r2, r3, r4, r5}
   10d58:	05d30839 	ldrbeq	r0, [r3, #2105]	; 0x839
   10d5c:	0c2b0000 	stceq	0, cr0, [fp], #-0
   10d60:	00003dde 	ldrdeq	r3, [r0], -lr
   10d64:	d3083a09 	movwle	r3, #35337	; 0x8a09
   10d68:	2c000005 	stccs	0, cr0, [r0], {5}
   10d6c:	003c520c 	eorseq	r5, ip, ip, lsl #4
   10d70:	083b0900 	ldmdaeq	fp!, {r8, fp}
   10d74:	000005d3 	ldrdeq	r0, [r0], -r3
   10d78:	3d150c2d 	ldccc	12, cr0, [r5, #-180]	; 0xffffff4c
   10d7c:	3c090000 	stccc	0, cr0, [r9], {-0}
   10d80:	0005d308 	andeq	sp, r5, r8, lsl #6
   10d84:	bb0c2e00 	bllt	31c58c <__ccfg+0x2fc5e4>
   10d88:	0900003e 	stmdbeq	r0, {r1, r2, r3, r4, r5}
   10d8c:	05d3083d 	ldrbeq	r0, [r3, #2109]	; 0x83d
   10d90:	0c2f0000 	stceq	0, cr0, [pc], #-0	; 10d98 <__exidx_end+0xc044>
   10d94:	00003dda 	ldrdeq	r3, [r0], -sl
   10d98:	d3083e09 	movwle	r3, #36361	; 0x8e09
   10d9c:	30000005 	andcc	r0, r0, r5
   10da0:	003c4e0c 	eorseq	r4, ip, ip, lsl #28
   10da4:	083f0900 	ldmdaeq	pc!, {r8, fp}	; <UNPREDICTABLE>
   10da8:	000005d3 	ldrdeq	r0, [r0], -r3
   10dac:	3eb70c31 	mrccc	12, 5, r0, cr7, cr1, {1}
   10db0:	40090000 	andmi	r0, r9, r0
   10db4:	0005d308 	andeq	sp, r5, r8, lsl #6
   10db8:	340c3200 	strcc	r3, [ip], #-512	; 0xfffffe00
   10dbc:	0900003d 	stmdbeq	r0, {r0, r2, r3, r4, r5}
   10dc0:	05d30841 	ldrbeq	r0, [r3, #2113]	; 0x841
   10dc4:	0c330000 	ldceq	0, cr0, [r3], #-0
   10dc8:	00003dc7 	andeq	r3, r0, r7, asr #27
   10dcc:	d3084209 	movwle	r4, #33289	; 0x8209
   10dd0:	34000005 	strcc	r0, [r0], #-5
   10dd4:	003d110c 	eorseq	r1, sp, ip, lsl #2
   10dd8:	08430900 	stmdaeq	r3, {r8, fp}^
   10ddc:	000005d3 	ldrdeq	r0, [r0], -r3
   10de0:	4c0f0035 	stcmi	0, cr0, [pc], {53}	; 0x35
   10de4:	0800003e 	stmdaeq	r0, {r1, r2, r3, r4, r5}
   10de8:	40083906 	andmi	r3, r8, r6, lsl #18
   10dec:	0c00000b 	stceq	0, cr0, [r0], {11}
   10df0:	00003cef 	andeq	r3, r0, pc, ror #25
   10df4:	030f3b06 	movweq	r3, #64262	; 0xfb06
   10df8:	00000006 	andeq	r0, r0, r6
   10dfc:	003d750c 	eorseq	r7, sp, ip, lsl #10
   10e00:	0f3c0600 	svceq	0x003c0600
   10e04:	00000603 	andeq	r0, r0, r3, lsl #12
   10e08:	18060004 	stmdane	r6, {r2}
   10e0c:	2100000b 	tstcs	r0, fp
   10e10:	00003cb1 			; <UNDEFINED> instruction: 0x00003cb1
   10e14:	40204206 	eormi	r4, r0, r6, lsl #4
   10e18:	0f00000b 	svceq	0x0000000b
   10e1c:	00003cd9 	ldrdeq	r3, [r0], -r9
   10e20:	0844063c 	stmdaeq	r4, {r2, r3, r4, r5, r9, sl}^
   10e24:	00000c22 	andeq	r0, r0, r2, lsr #24
   10e28:	003c8c0c 	eorseq	r8, ip, ip, lsl #24
   10e2c:	0f460600 	svceq	0x00460600
   10e30:	00000603 	andeq	r0, r0, r3, lsl #12
   10e34:	3c230c00 	stccc	12, cr0, [r3], #-0
   10e38:	47060000 	strmi	r0, [r6, -r0]
   10e3c:	0006030f 	andeq	r0, r6, pc, lsl #6
   10e40:	460c0400 	strmi	r0, [ip], -r0, lsl #8
   10e44:	0600003d 			; <UNDEFINED> instruction: 0x0600003d
   10e48:	06030f48 	streq	r0, [r3], -r8, asr #30
   10e4c:	0c080000 	stceq	0, cr0, [r8], {-0}
   10e50:	00003e68 	andeq	r3, r0, r8, ror #28
   10e54:	030f4906 	movweq	r4, #63750	; 0xf906
   10e58:	0c000006 	stceq	0, cr0, [r0], {6}
   10e5c:	003d210c 	eorseq	r2, sp, ip, lsl #2
   10e60:	0f4a0600 	svceq	0x004a0600
   10e64:	00000603 	andeq	r0, r0, r3, lsl #12
   10e68:	3d880c10 	stccc	12, cr0, [r8, #64]	; 0x40
   10e6c:	4b060000 	blmi	190e74 <__ccfg+0x170ecc>
   10e70:	0006030f 	andeq	r0, r6, pc, lsl #6
   10e74:	670c1400 	strvs	r1, [ip, -r0, lsl #8]
   10e78:	0600003d 			; <UNDEFINED> instruction: 0x0600003d
   10e7c:	06030f4c 	streq	r0, [r3], -ip, asr #30
   10e80:	0c180000 	ldceq	0, cr0, [r8], {-0}
   10e84:	00003fcc 	andeq	r3, r0, ip, asr #31
   10e88:	030f4d06 	movweq	r4, #64774	; 0xfd06
   10e8c:	1c000006 	stcne	0, cr0, [r0], {6}
   10e90:	003fd00c 	eorseq	sp, pc, ip
   10e94:	0f4e0600 	svceq	0x004e0600
   10e98:	00000603 	andeq	r0, r0, r3, lsl #12
   10e9c:	3d380c20 	ldccc	12, cr0, [r8, #-128]!	; 0xffffff80
   10ea0:	4f060000 	svcmi	0x00060000
   10ea4:	0006030f 	andeq	r0, r6, pc, lsl #6
   10ea8:	cb0c2400 	blgt	319eb0 <__ccfg+0x2f9f08>
   10eac:	0600003d 			; <UNDEFINED> instruction: 0x0600003d
   10eb0:	06030f50 			; <UNDEFINED> instruction: 0x06030f50
   10eb4:	0c280000 	stceq	0, cr0, [r8], #-0
   10eb8:	00003dde 	ldrdeq	r3, [r0], -lr
   10ebc:	030f5106 	movweq	r5, #61702	; 0xf106
   10ec0:	2c000006 	stccs	0, cr0, [r0], {6}
   10ec4:	003c520c 	eorseq	r5, ip, ip, lsl #4
   10ec8:	0f520600 	svceq	0x00520600
   10ecc:	00000603 	andeq	r0, r0, r3, lsl #12
   10ed0:	3d150c30 	ldccc	12, cr0, [r5, #-192]	; 0xffffff40
   10ed4:	53060000 	movwpl	r0, #24576	; 0x6000
   10ed8:	0006030f 	andeq	r0, r6, pc, lsl #6
   10edc:	bb0c3400 	bllt	31dee4 <__ccfg+0x2fdf3c>
   10ee0:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
   10ee4:	06030f54 			; <UNDEFINED> instruction: 0x06030f54
   10ee8:	00380000 	eorseq	r0, r8, r0
   10eec:	000b5106 	andeq	r5, fp, r6, lsl #2
   10ef0:	3e992100 	fmlcce	f2, f1, f0
   10ef4:	65060000 	strvs	r0, [r6, #-0]
   10ef8:	000c2223 	andeq	r2, ip, r3, lsr #4
   10efc:	3c700f00 	ldclcc	15, cr0, [r0], #-0
   10f00:	060c0000 	streq	r0, [ip], -r0
   10f04:	0c680867 	stcleq	8, cr0, [r8], #-412	; 0xfffffe64
   10f08:	4a0c0000 	bmi	310f10 <__ccfg+0x2f0f68>
   10f0c:	0600003d 			; <UNDEFINED> instruction: 0x0600003d
   10f10:	06030f69 	streq	r0, [r3], -r9, ror #30
   10f14:	0c000000 	stceq	0, cr0, [r0], {-0}
   10f18:	00003e6c 	andeq	r3, r0, ip, ror #28
   10f1c:	030f6a06 	movweq	r6, #64006	; 0xfa06
   10f20:	04000006 	streq	r0, [r0], #-6
   10f24:	003d250c 	eorseq	r2, sp, ip, lsl #10
   10f28:	0f6b0600 	svceq	0x006b0600
   10f2c:	00000603 	andeq	r0, r0, r3, lsl #12
   10f30:	33060008 	movwcc	r0, #24584	; 0x6008
   10f34:	2100000c 	tstcs	r0, ip
   10f38:	00003c11 	andeq	r3, r0, r1, lsl ip
   10f3c:	68227206 	stmdavs	r2!, {r1, r2, r9, ip, sp, lr}
   10f40:	0f00000c 	svceq	0x0000000c
   10f44:	00003c9c 	muleq	r0, ip, ip
   10f48:	087406fc 	ldmdaeq	r4!, {r2, r3, r4, r5, r6, r7, r9, sl}^
   10f4c:	00000d64 	andeq	r0, r0, r4, ror #26
   10f50:	6e6f6d10 	mcrvs	13, 3, r6, cr15, cr0, {0}
   10f54:	0f760600 	svceq	0x00760600
   10f58:	00000d69 	andeq	r0, r0, r9, ror #26
   10f5c:	3fe50c00 	svccc	0x00e50c00
   10f60:	77060000 	strvc	r0, [r6, -r0]
   10f64:	000d690f 	andeq	r6, sp, pc, lsl #18
   10f68:	7c0c3000 	stcvc	0, cr3, [ip], {-0}
   10f6c:	06000016 			; <UNDEFINED> instruction: 0x06000016
   10f70:	0d790f78 	ldcleq	15, cr0, [r9, #-480]!	; 0xfffffe20
   10f74:	0c600000 	stcleq	0, cr0, [r0], #-0
   10f78:	00003e91 	muleq	r0, r1, lr
   10f7c:	790f7906 	stmdbvc	pc, {r1, r2, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
   10f80:	7c00000d 	stcvc	0, cr0, [r0], {13}
   10f84:	003d2e0c 	eorseq	r2, sp, ip, lsl #28
   10f88:	0f7a0600 	svceq	0x007a0600
   10f8c:	00000603 	andeq	r0, r0, r3, lsl #12
   10f90:	3db70c98 	ldccc	12, cr0, [r7, #608]!	; 0x260
   10f94:	7b060000 	blvc	190f9c <__ccfg+0x170ff4>
   10f98:	0006030f 	andeq	r0, r6, pc, lsl #6
   10f9c:	580c9c00 	stmdapl	ip, {sl, fp, ip, pc}
   10fa0:	0600003d 			; <UNDEFINED> instruction: 0x0600003d
   10fa4:	06030f7c 			; <UNDEFINED> instruction: 0x06030f7c
   10fa8:	0ca00000 	stceq	0, cr0, [r0]
   10fac:	00003cc1 	andeq	r3, r0, r1, asr #25
   10fb0:	890f7d06 	stmdbhi	pc, {r1, r2, r8, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
   10fb4:	a400000d 	strge	r0, [r0], #-13
   10fb8:	003d5e0c 	eorseq	r5, sp, ip, lsl #28
   10fbc:	0f7e0600 	svceq	0x007e0600
   10fc0:	00000603 	andeq	r0, r0, r3, lsl #12
   10fc4:	3fe10cac 	svccc	0x00e10cac
   10fc8:	7f060000 	svcvc	0x00060000
   10fcc:	000d690f 	andeq	r6, sp, pc, lsl #18
   10fd0:	2a0cb000 	bcs	33cfd8 <__ccfg+0x31d030>
   10fd4:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
   10fd8:	06030f80 	streq	r0, [r3], -r0, lsl #31
   10fdc:	0ce00000 	stcleq	0, cr0, [r0]
   10fe0:	00003e7a 	andeq	r3, r0, sl, ror lr
   10fe4:	030f8106 	movweq	r8, #61702	; 0xf106
   10fe8:	e4000006 	str	r0, [r0], #-6
   10fec:	61726510 	cmnvs	r2, r0, lsl r5
   10ff0:	0f820600 	svceq	0x00820600
   10ff4:	00000603 	andeq	r0, r0, r3, lsl #12
   10ff8:	3e420ce8 	cdpcc	12, 4, cr0, cr2, cr8, {7}
   10ffc:	83060000 	movwhi	r0, #24576	; 0x6000
   11000:	0006030f 	andeq	r0, r6, pc, lsl #6
   11004:	c70cec00 	strgt	lr, [ip, -r0, lsl #24]
   11008:	0600003c 			; <UNDEFINED> instruction: 0x0600003c
   1100c:	06030f84 	streq	r0, [r3], -r4, lsl #31
   11010:	0cf00000 	ldcleq	0, cr0, [r0]
   11014:	00003e57 	andeq	r3, r0, r7, asr lr
   11018:	030f8506 	movweq	r8, #62726	; 0xf506
   1101c:	f4000006 	vst4.8	{d0-d3}, [r0], r6
   11020:	003ca60c 	eorseq	sl, ip, ip, lsl #12
   11024:	0f860600 	svceq	0x00860600
   11028:	00000603 	andeq	r0, r0, r3, lsl #12
   1102c:	790600f8 	stmdbvc	r6, {r3, r4, r5, r6, r7}
   11030:	0900000c 	stmdbeq	r0, {r2, r3}
   11034:	00000603 	andeq	r0, r0, r3, lsl #12
   11038:	00000d79 	andeq	r0, r0, r9, ror sp
   1103c:	0000380a 	andeq	r3, r0, sl, lsl #16
   11040:	09000b00 	stmdbeq	r0, {r8, r9, fp}
   11044:	00000603 	andeq	r0, r0, r3, lsl #12
   11048:	00000d89 	andeq	r0, r0, r9, lsl #27
   1104c:	0000380a 	andeq	r3, r0, sl, lsl #16
   11050:	09000600 	stmdbeq	r0, {r9, sl}
   11054:	00000603 	andeq	r0, r0, r3, lsl #12
   11058:	00000d99 	muleq	r0, r9, sp
   1105c:	0000380a 	andeq	r3, r0, sl, lsl #16
   11060:	21000100 	mrscs	r0, (UNDEF: 16)
   11064:	00003c7d 	andeq	r3, r0, sp, ror ip
   11068:	641f9a06 	ldrvs	r9, [pc], #-2566	; 11070 <__exidx_end+0xc31c>
   1106c:	0f00000d 	svceq	0x0000000d
   11070:	00003e83 	andeq	r3, r0, r3, lsl #29
   11074:	089c0610 	ldmeq	ip, {r4, r9, sl}
   11078:	00000de7 	andeq	r0, r0, r7, ror #27
   1107c:	003e3a0c 	eorseq	r3, lr, ip, lsl #20
   11080:	0f9e0600 	svceq	0x009e0600
   11084:	00000603 	andeq	r0, r0, r3, lsl #12
   11088:	3db00c00 	ldccc	12, cr0, [r0]
   1108c:	9f060000 	svcls	0x00060000
   11090:	0006030f 	andeq	r0, r6, pc, lsl #6
   11094:	330c0400 	movwcc	r0, #50176	; 0xc400
   11098:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
   1109c:	06030fa0 	streq	r0, [r3], -r0, lsr #31
   110a0:	0c080000 	stceq	0, cr0, [r8], {-0}
   110a4:	00003cd3 	ldrdeq	r3, [r0], -r3	; <UNPREDICTABLE>
   110a8:	030fa106 	movweq	sl, #61702	; 0xf106
   110ac:	0c000006 	stceq	0, cr0, [r0], {6}
   110b0:	0da50600 	stceq	6, cr0, [r5]
   110b4:	fe210000 	cdp2	0, 2, cr0, cr1, cr0, {0}
   110b8:	0600003c 			; <UNDEFINED> instruction: 0x0600003c
   110bc:	0de723aa 	stcleq	3, cr2, [r7, #680]!	; 0x2a8
   110c0:	d3090000 	movwle	r0, #36864	; 0x9000
   110c4:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
   110c8:	0a00000e 	beq	11108 <__exidx_end+0xc3b4>
   110cc:	00000038 	andeq	r0, r0, r8, lsr r0
   110d0:	00380a06 	eorseq	r0, r8, r6, lsl #20
   110d4:	001f0000 	andseq	r0, pc, r0
   110d8:	00002515 	andeq	r2, r0, r5, lsl r5
   110dc:	000e2c00 	andeq	r2, lr, r0, lsl #24
   110e0:	04791600 	ldrbteq	r1, [r9], #-1536	; 0xfffffa00
   110e4:	cd160000 	ldcgt	0, cr0, [r6, #-0]
   110e8:	16000005 	strne	r0, [r0], -r5
   110ec:	0000003f 	andeq	r0, r0, pc, lsr r0
   110f0:	000e2c16 	andeq	r2, lr, r6, lsl ip
   110f4:	04110000 	ldreq	r0, [r1], #-0
   110f8:	000009c6 	andeq	r0, r0, r6, asr #19
   110fc:	0e0e0411 	cfmvdlreq	mvd14, r0
   11100:	25150000 	ldrcs	r0, [r5, #-0]
   11104:	5b000000 	blpl	1110c <__exidx_end+0xc3b8>
   11108:	1600000e 	strne	r0, [r0], -lr
   1110c:	00000479 	andeq	r0, r0, r9, ror r4
   11110:	000e5b16 	andeq	r5, lr, r6, lsl fp
   11114:	06031600 	streq	r1, [r3], -r0, lsl #12
   11118:	2c160000 	ldccs	0, cr0, [r6], {-0}
   1111c:	16000000 	strne	r0, [r0], -r0
   11120:	00000e2c 	andeq	r0, r0, ip, lsr #28
   11124:	3f041100 	svccc	0x00041100
   11128:	11000000 	mrsne	r0, (UNDEF: 0)
   1112c:	000e3804 	andeq	r3, lr, r4, lsl #16
   11130:	05d30900 	ldrbeq	r0, [r3, #2304]	; 0x900
   11134:	0e770000 	cdpeq	0, 7, cr0, cr7, cr0, {0}
   11138:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   1113c:	01000000 	mrseq	r0, (UNDEF: 0)
   11140:	05d30900 	ldrbeq	r0, [r3, #2304]	; 0x900
   11144:	0e870000 	cdpeq	0, 8, cr0, cr7, cr0, {0}
   11148:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   1114c:	1f000000 	svcne	0x00000000
   11150:	0ca62200 	sfmeq	f2, 4, [r6]
   11154:	1f0a0000 	svcne	0x000a0000
   11158:	00011709 	andeq	r1, r1, r9, lsl #14
   1115c:	00400800 	subeq	r0, r0, r0, lsl #16
   11160:	0000aa00 	andeq	sl, r0, r0, lsl #20
   11164:	289c0100 	ldmcs	ip, {r8}
   11168:	2300000f 	movwcs	r0, #15
   1116c:	00003c3d 	andeq	r3, r0, sp, lsr ip
   11170:	191a3101 	ldmdbne	sl, {r0, r8, ip, sp}
   11174:	01000001 	tsteq	r0, r1
   11178:	3fdc2450 	svccc	0x00dc2450
   1117c:	32010000 	andcc	r0, r1, #0
   11180:	0009b419 	andeq	fp, r9, r9, lsl r4
   11184:	00526e00 	subseq	r6, r2, r0, lsl #28
   11188:	00526200 	subseq	r6, r2, r0, lsl #4
   1118c:	3fc72400 	svccc	0x00c72400
   11190:	33010000 	movwcc	r0, #4096	; 0x1000
   11194:	00002c09 	andeq	r2, r0, r9, lsl #24
   11198:	0052e900 	subseq	lr, r2, r0, lsl #18
   1119c:	0052c100 	subseq	ip, r2, r0, lsl #2
   111a0:	73642500 	cmnvc	r4, #0, 10
   111a4:	42010074 	andmi	r0, r1, #116	; 0x74
   111a8:	0005cd09 	andeq	ip, r5, r9, lsl #26
   111ac:	00542800 	subseq	r2, r4, r0, lsl #16
   111b0:	00541800 	subseq	r1, r4, r0, lsl #16
   111b4:	72732500 	rsbsvc	r2, r3, #0, 10
   111b8:	43010063 	movwmi	r0, #4195	; 0x1063
   111bc:	0006030f 	andeq	r0, r6, pc, lsl #6
   111c0:	0054ab00 	subseq	sl, r4, r0, lsl #22
   111c4:	00549b00 	subseq	r9, r4, r0, lsl #22
   111c8:	3c422600 	mcrrcc	6, 0, r2, r2, cr0
   111cc:	44010000 	strmi	r0, [r1], #-0
   111d0:	000f2809 	andeq	r2, pc, r9, lsl #16
   111d4:	00553c00 	subseq	r3, r5, r0, lsl #24
   111d8:	00552400 	subseq	r2, r5, r0, lsl #8
   111dc:	3ec72600 	cdpcc	6, 12, cr2, cr7, cr0, {0}
   111e0:	45010000 	strmi	r0, [r1, #-0]
   111e4:	000f2e0f 	andeq	r2, pc, pc, lsl #28
   111e8:	00563300 	subseq	r3, r6, r0, lsl #6
   111ec:	00561b00 	subseq	r1, r6, r0, lsl #22
   111f0:	04110000 	ldreq	r0, [r1], #-0
   111f4:	00000083 	andeq	r0, r0, r3, lsl #1
   111f8:	008a0411 	addeq	r0, sl, r1, lsl r4
   111fc:	Address 0x00000000000111fc is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
}
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
       c:	10011106 	andne	r1, r1, r6, lsl #2
      10:	02000006 	andeq	r0, r0, #6
      14:	0b0b0024 	bleq	2c00ac <__ccfg+0x2a0104>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	16030000 	strne	r0, [r3], -r0
      20:	3a0e0300 	bcc	380c28 <__ccfg+0x360c80>
      24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	0013490b 	andseq	r4, r3, fp, lsl #18
      2c:	00240400 	eoreq	r0, r4, r0, lsl #8
      30:	0b3e0b0b 	bleq	f82c64 <__ccfg+0xf62cbc>
      34:	00000803 	andeq	r0, r0, r3, lsl #16
      38:	03011305 	movweq	r1, #4869	; 0x1305
      3c:	3a0b0b0e 	bcc	2c2c7c <__ccfg+0x2a2cd4>
			i = k;
      40:	010b3b0b 	tsteq	fp, fp, lsl #22
				j->Next = k;
      44:	06000013 			; <UNDEFINED> instruction: 0x06000013
      48:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
}
      4c:	0b381349 	bleq	e04d78 <__ccfg+0xde4dd0>
      50:	00000c34 	andeq	r0, r0, r4, lsr ip
      54:	0b000f07 	bleq	3c78 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8>
		release;
      58:	0800000b 	stmdaeq	r0, {r0, r1, r3}
      5c:	13490026 	movtne	r0, #36902	; 0x9026
			nq++;
      60:	35090000 	strcc	r0, [r9, #-0]
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	00134900 	andseq	r4, r3, r0, lsl #18
      68:	000f0a00 	andeq	r0, pc, r0, lsl #20
      6c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
      70:	130b0000 	movwne	r0, #45056	; 0xb000
      74:	3a0b0b01 	bcc	2c2c80 <__ccfg+0x2a2cd8>
      78:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      7c:	0013010b 	andseq	r0, r3, fp, lsl #2
      80:	000d0c00 	andeq	r0, sp, r0, lsl #24
      84:	0b3a0e03 	bleq	e83898 <__ccfg+0xe638f0>
      88:	0b390b3b 	bleq	e42d7c <__ccfg+0xe22dd4>
      8c:	0b0b1349 	bleq	2c4db8 <__ccfg+0x2a4e10>
	if (!button_still_pressed (__button_list [pbutton]))
      90:	0b0c0b0d 	bleq	302ccc <__ccfg+0x2e2d24>
      94:	00000b38 	andeq	r0, r0, r8, lsr fp
      98:	03000d0d 	movweq	r0, #3341	; 0xd0d
	if (baction == NULL)
      9c:	3b0b3a0e 	blcc	2ce8dc <__ccfg+0x2ae934>
      a0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	(*baction) (pbutton);
      a4:	000b3813 	andeq	r3, fp, r3, lsl r8
endthread
      a8:	00340e00 	eorseq	r0, r4, r0, lsl #28
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	0b3a0e03 	bleq	e838c0 <__ccfg+0xe63918>
      b0:	0b390b3b 	bleq	e42da4 <__ccfg+0xe22dfc>
endthread
      b4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; ffffff98 <_estack+0xdfffaf98>
      b8:	00000c3c 	andeq	r0, r0, ip, lsr ip
      bc:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
      c0:	00130113 	andseq	r0, r3, r3, lsl r1
      c4:	00211000 	eoreq	r1, r1, r0
fsm receiver {
      c8:	16110000 	ldrne	r0, [r1], -r0
      cc:	3a0e0300 	bcc	380cd4 <__ccfg+0x360d2c>
      d0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      d4:	0013490b 	andseq	r4, r3, fp, lsl #18
        packet = tcv_rnp(Receiving, sfd);
      d8:	01151200 	tsteq	r5, r0, lsl #4
      dc:	13010c27 	movwne	r0, #7207	; 0x1c27
      e0:	05130000 	ldreq	r0, [r3, #-0]
      e4:	00134900 	andseq	r4, r3, r0, lsl #18
        receivedMessage = (message *)(packet + 1);
      e8:	00341400 	eorseq	r1, r4, r0, lsl #8
      ec:	0b3a0e03 	bleq	e83900 <__ccfg+0xe63958>
        if(receivedMessage->receiverId == nodeId) {
      f0:	0b39053b 	bleq	e415e4 <__ccfg+0xe2163c>
      f4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; ffffffd8 <_estack+0xdfffafd8>
      f8:	00000c3c 	andeq	r0, r0, ip, lsr ip
            proceed From_Broadcast;
      fc:	27011515 	smladcs	r1, r5, r5, r1
        proceed Receiving;
     100:	0113490c 	tsteq	r3, ip, lsl #18
     104:	16000013 			; <UNDEFINED> instruction: 0x16000013
        ser_outf(Get_Message, "Message ");
     108:	0b0b0113 	bleq	2c055c <__ccfg+0x2a05b4>
     10c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
        proceed Show_Message;
     110:	13010b39 	movwne	r0, #6969	; 0x1b39
        ser_outf(From_Broadcast, "Broadcast ");
     114:	0d170000 	ldceq	0, cr0, [r7, #-0]
     118:	3a0e0300 	bcc	380d20 <__ccfg+0x360d78>
        ser_outf(Show_Message, "from node %d (Seq %d): %s\n\r", receivedMessage->senderId, receivedMessage->sequenceNumber, receivedMessage->payload);
     11c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     120:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     124:	1800000b 	stmdane	r0, {r0, r1, r3}
     128:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     12c:	0b3a0b0b 	bleq	e82d60 <__ccfg+0xe62db8>
        tcv_endp(packet);
     130:	0b39053b 	bleq	e41624 <__ccfg+0xe2167c>
     134:	00001301 	andeq	r1, r0, r1, lsl #6
        proceed Receiving;
     138:	49002119 	stmdbmi	r0, {r0, r3, r4, r8, sp}
}
     13c:	000b2f13 	andeq	r2, fp, r3, lsl pc
        proceed Receiving;
     140:	00341a00 	eorseq	r1, r4, r0, lsl #20
        } else if (receivedMessage->receiverId == '0' || receivedMessage->receiverId == 0) {
     144:	0b3a0e03 	bleq	e83958 <__ccfg+0xe639b0>
     148:	0b390b3b 	bleq	e42e3c <__ccfg+0xe22e94>
            proceed From_Broadcast;
     14c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 30 <g_pfnVectors+0x30>
}
     150:	00000a02 	andeq	r0, r0, r2, lsl #20
     154:	0300341b 	movweq	r3, #1051	; 0x41b
     158:	3b0b3a08 	blcc	2ce980 <__ccfg+0x2ae9d8>
     15c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     160:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
     164:	1c00000a 	stcne	0, cr0, [r0], {10}
     168:	0c3f012e 	ldfeqs	f0, [pc], #-184	; b8 <g_pfnVectors+0xb8>
     16c:	0b3a0e03 	bleq	e83980 <__ccfg+0xe639d8>
     170:	0b390b3b 	bleq	e42e64 <__ccfg+0xe22ebc>
     174:	01110c27 	tsteq	r1, r7, lsr #24
fsm transmitter (message * messagePtr) {
     178:	0a400112 	beq	10005c8 <__ccfg+0xfe0620>
     17c:	00001301 	andeq	r1, r0, r1, lsl #6
     180:	0300051d 	movweq	r0, #1309	; 0x51d
}
     184:	3b0b3a0e 	blcc	2ce9c4 <__ccfg+0x2aea1c>
     188:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
     18c:	00060213 	andeq	r0, r6, r3, lsl r2
     190:	000a1e00 	andeq	r1, sl, r0, lsl #28
     194:	0b3a0e03 	bleq	e839a8 <__ccfg+0xe63a00>
     198:	0b390b3b 	bleq	e42e8c <__ccfg+0xe22ee4>
     19c:	00000111 	andeq	r0, r0, r1, lsl r1
        *p = messagePtr->senderId; p++;
     1a0:	11010b1f 	tstne	r1, pc, lsl fp
     1a4:	00011201 	andeq	r1, r1, r1, lsl #4
        strcpy(p, messagePtr->payload);
     1a8:	00342000 	eorseq	r2, r4, r0
        *p = messagePtr->receiverId; p++;
     1ac:	0b3a0e03 	bleq	e839c0 <__ccfg+0xe63a18>
        *p = messagePtr->sequenceNumber; p++;
     1b0:	0b390b3b 	bleq	e42ea4 <__ccfg+0xe22efc>
        strcpy(p, messagePtr->payload);
     1b4:	0a021349 	beq	84ee0 <__ccfg+0x64f38>
        tcv_endp (spkt);
     1b8:	34210000 	strtcc	r0, [r1], #-0
     1bc:	3a0e0300 	bcc	380dc4 <__ccfg+0x360e1c>
        sequence++;
     1c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1c4:	0013490b 	andseq	r4, r3, fp, lsl #18
        ser_outf(Transmit_Message, "Message Sent\n\r");
     1c8:	010b2200 	mrseq	r2, R11_fiq
     1cc:	13010655 	movwne	r0, #5717	; 0x1655
}
     1d0:	1d230000 	stcne	0, cr0, [r3, #-0]
        finish;
     1d4:	11133101 	tstne	r3, r1, lsl #2
     1d8:	58011201 	stmdapl	r1, {r0, r9, ip}
     1dc:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     1e0:	0013010b 	andseq	r0, r3, fp, lsl #2
     1e4:	00052400 	andeq	r2, r5, r0, lsl #8
fsm root {
     1e8:	06021331 			; <UNDEFINED> instruction: 0x06021331
     1ec:	1d250000 	stcne	0, cr0, [r5, #-0]
     1f0:	11133101 	tstne	r3, r1, lsl #2
     1f4:	58011201 	stmdapl	r1, {r0, r9, ip}
     1f8:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     1fc:	2600000b 	strcs	r0, [r0], -fp
        nodeId = 1;
     200:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 150 <_Min_Stack_Size+0x50>
     204:	0b3a0e03 	bleq	e83a18 <__ccfg+0xe63a70>
     208:	0b390b3b 	bleq	e42efc <__ccfg+0xe22f54>
        sfd = tcv_open(WNONE, 0, 0);
     20c:	13490c27 	movtne	r0, #39975	; 0x9c27
        messagePtr = (message *) umalloc(sizeof(message));
     210:	13010b20 	movwne	r0, #6944	; 0x1b20
     214:	05270000 	streq	r0, [r7, #-0]!
     218:	3a0e0300 	bcc	380e20 <__ccfg+0x360e78>
        phys_cc1350(0, MAX_PACKET_LENGTH);
     21c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
        tcv_plug(0, &plug_null);
     220:	0013490b 	andseq	r4, r3, fp, lsl #18
     224:	012e2800 			; <UNDEFINED> instruction: 0x012e2800
        sfd = tcv_open(WNONE, 0, 0);
     228:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     22c:	0b3b0b3a 	bleq	ec2f1c <__ccfg+0xea2f74>
     230:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		tcv_control(sfd, PHYSOPT_ON, NULL);
     234:	13010b20 	movwne	r0, #6944	; 0x1b20
        sfd = tcv_open(WNONE, 0, 0);
     238:	0b290000 	bleq	a40240 <__ccfg+0xa20298>
		tcv_control(sfd, PHYSOPT_ON, NULL);
     23c:	2a000001 	bcs	248 <root+0x60>
		if (sfd < 0) {
     240:	08030034 	stmdaeq	r3, {r2, r4, r5}
			diag("Cannot open tcv interface");
     244:	0b3b0b3a 	bleq	ec2f34 <__ccfg+0xea2f8c>
     248:	13490b39 	movtne	r0, #39737	; 0x9b39
			halt();
     24c:	0b2b0000 	bleq	ac0254 <__ccfg+0xaa02ac>
        runfsm receiver;
     250:	00065501 	andeq	r5, r6, r1, lsl #10
     254:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
        receiverId = 0;
     258:	01111331 	tsteq	r1, r1, lsr r3
     25c:	0a400112 	beq	10006ac <__ccfg+0xfe0704>
        ser_outf(Menu_Start, "P2P Chat (Node #%d)\n\r", nodeId);
     260:	00001301 	andeq	r1, r0, r1, lsl #6
     264:	3100342d 	tstcc	r0, sp, lsr #8
        ser_outf(Menu_Choices, menuText);
     268:	00060213 	andeq	r0, r6, r3, lsl r2
     26c:	010b2e00 	tsteq	fp, r0, lsl #28
        ser_inf(Choice, "%c", &choice);
     270:	06551331 			; <UNDEFINED> instruction: 0x06551331
     274:	00001301 	andeq	r1, r0, r1, lsl #6
     278:	3100342f 	tstcc	r0, pc, lsr #8
        switch (choice)
     27c:	30000013 	andcc	r0, r0, r3, lsl r0
     280:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     284:	06550152 			; <UNDEFINED> instruction: 0x06550152
     288:	0b590b58 	bleq	1642ff0 <__ccfg+0x1623048>
     28c:	00000b57 	andeq	r0, r0, r7, asr fp
     290:	31000a31 	tstcc	r0, r1, lsr sl
                proceed Menu_Start;
     294:	32000013 	andcc	r0, r0, #19
     298:	1331000a 	teqne	r1, #10
     29c:	00000111 	andeq	r0, r0, r1, lsl r1
                proceed Direct_Transmission;
     2a0:	31012e33 	tstcc	r1, r3, lsr lr
                proceed Menu_Start;
     2a4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
        ser_outf(Change_ID, "New node ID (1-25):");
     2a8:	000a4001 	andeq	r4, sl, r1
     2ac:	11010000 	mrsne	r0, (UNDEF: 1)
        ser_inf(Get_New_ID, "%d", &nodeId);
     2b0:	130e2501 	movwne	r2, #58625	; 0xe501
     2b4:	1b0e030b 	blne	380ee8 <__ccfg+0x360f40>
     2b8:	1106550e 	tstne	r6, lr, lsl #10
    if (node < 1 || node > 25) {
     2bc:	00061001 	andeq	r1, r6, r1
     2c0:	00240200 	eoreq	r0, r4, r0, lsl #4
            proceed Change_ID;
     2c4:	0b3e0b0b 	bleq	f82ef8 <__ccfg+0xf62f50>
     2c8:	00000e03 	andeq	r0, r0, r3, lsl #28
        proceed Menu_Start;
     2cc:	03001603 	movweq	r1, #1539	; 0x603
        ser_outf(Direct_Transmission, "Receiver node ID (1-25):");
     2d0:	3b0b3a0e 	blcc	2ceb10 <__ccfg+0x2aeb68>
     2d4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     2d8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     2dc:	0b0b0024 	bleq	2c0374 <__ccfg+0x2a03cc>
     2e0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    if (node < 1 || node > 25) {
     2e4:	26050000 	strcs	r0, [r5], -r0
     2e8:	00134900 	andseq	r4, r3, r0, lsl #18
            proceed Direct_Transmission;
     2ec:	00350600 	eorseq	r0, r5, r0, lsl #12
     2f0:	00001349 	andeq	r1, r0, r9, asr #6
        ser_outf(Broadcast_Transmission, "Message: ");
     2f4:	0b000f07 	bleq	3f18 <NOROM_ChipInfo_GetChipFamily+0x10>
     2f8:	0013490b 	andseq	r4, r3, fp, lsl #18
        ser_in(Get_Message, messagePtr->payload, PAYLOAD_LENGTH);
     2fc:	01130800 	tsteq	r3, r0, lsl #16
     300:	0b3a0b0b 	bleq	e82f34 <__ccfg+0xe62f8c>
     304:	0b390b3b 	bleq	e42ff8 <__ccfg+0xe23050>
        if(strlen(messagePtr->payload) > PAYLOAD_LENGTH) {
     308:	00001301 	andeq	r1, r0, r1, lsl #6
     30c:	03000d09 	movweq	r0, #3337	; 0xd09
     310:	3b0b3a0e 	blcc	2ceb50 <__ccfg+0x2aeba8>
            messagePtr->payload[PAYLOAD_LENGTH - 1] = '/0';
     314:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     318:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
        call transmitter(messagePtr, Menu_Start);
     31c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
        messagePtr->senderId = nodeId;
     320:	0a00000b 	beq	354 <root+0x16c>
     324:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
        messagePtr->receiverId = receiverId;
     328:	0b3b0b3a 	bleq	ec3018 <__ccfg+0xea3070>
        messagePtr->sequenceNumber = sequence;
     32c:	13490b39 	movtne	r0, #39737	; 0x9b39
     330:	00000b38 	andeq	r0, r0, r8, lsr fp
        call transmitter(messagePtr, Menu_Start);
     334:	0300340b 	movweq	r3, #1035	; 0x40b
     338:	3b0b3a0e 	blcc	2ceb78 <__ccfg+0x2aebd0>
     33c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     340:	3c0c3f13 	stccc	15, cr3, [ip], {19}
                proceed Broadcast_Transmission;
     344:	0c00000c 	stceq	0, cr0, [r0], {12}
     348:	13490101 	movtne	r0, #37121	; 0x9101
     34c:	00001301 	andeq	r1, r0, r1, lsl #6
     350:	0000210d 	andeq	r2, r0, sp, lsl #2
     354:	00160e00 	andseq	r0, r6, r0, lsl #28
     358:	0b3a0e03 	bleq	e83b6c <__ccfg+0xe63bc4>
     35c:	0b39053b 	bleq	e41850 <__ccfg+0xe218a8>
     360:	00001349 	andeq	r1, r0, r9, asr #6
     364:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
     368:	0013010c 	andseq	r0, r3, ip, lsl #2
     36c:	00051000 	andeq	r1, r5, r0
     370:	00001349 	andeq	r1, r0, r9, asr #6
     374:	03003411 	movweq	r3, #1041	; 0x411
     378:	3b0b3a0e 	blcc	2cebb8 <__ccfg+0x2aec10>
     37c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     380:	3c0c3f13 	stccc	15, cr3, [ip], {19}
     384:	1200000c 	andne	r0, r0, #12
     388:	0b0b0113 	bleq	2c07dc <__ccfg+0x2a0834>
     38c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
static void devinit_uart (int devnum) {
     390:	13010b39 	movwne	r0, #6969	; 0x1b39
	adddevfunc (ioreq_uart_a, devnum);
     394:	0d130000 	ldceq	0, cr0, [r3, #-0]
     398:	3a0e0300 	bcc	380fa0 <__ccfg+0x360ff8>
void udelay (volatile word n) {
     39c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     3a0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
	while (n) {
     3a4:	1400000b 	strne	r0, [r0], #-11
     3a8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
}
     3ac:	0b3a0b0b 	bleq	e82fe0 <__ccfg+0xe63038>
	while (n--);
     3b0:	0b39053b 	bleq	e418a4 <__ccfg+0xe218fc>
     3b4:	00001301 	andeq	r1, r0, r1, lsl #6
     3b8:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
		n--;
     3bc:	000b2f13 	andeq	r2, fp, r3, lsl pc
     3c0:	00341600 	eorseq	r1, r4, r0, lsl #12
     3c4:	0b3a0e03 	bleq	e83bd8 <__ccfg+0xe63c30>
void mdelay (volatile word n) {
     3c8:	0b390b3b 	bleq	e430bc <__ccfg+0xe23114>
     3cc:	00001349 	andeq	r1, r0, r9, asr #6
	while (n) {
     3d0:	03003417 	movweq	r3, #1047	; 0x417
     3d4:	3b0b3a0e 	blcc	2cec14 <__ccfg+0x2aec6c>
}
     3d8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		udelay (999);
     3dc:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
     3e0:	1800000a 	stmdane	r0, {r1, r3}
		n--;
     3e4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     3e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     3ec:	13490b39 	movtne	r0, #39737	; 0x9b39
     3f0:	00000a02 	andeq	r0, r0, r2, lsl #20
void __pi_ondomain (lword d) {
     3f4:	47003419 	smladmi	r0, r9, r4, r3
     3f8:	3b0b3a13 	blcc	2cec4c <__ccfg+0x2aeca4>
		if (__pi_systat.effpdm > 1)
     3fc:	020b3905 	andeq	r3, fp, #81920	; 0x14000
     400:	1a00000a 	bne	430 <__pi_offdomain>
			__pi_systat.effpdm = 1;
     404:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 354 <root+0x16c>
	PRCMPowerDomainOn (d);
     408:	0b3a0e03 	bleq	e83c1c <__ccfg+0xe63c74>
     40c:	0b39053b 	bleq	e41900 <__ccfg+0xe21958>
     410:	13490c27 	movtne	r0, #39975	; 0x9c27
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     414:	01120111 	tsteq	r2, r1, lsl r1
     418:	13010a40 	movwne	r0, #6720	; 0x1a40
     41c:	0b1b0000 	bleq	6c0424 <__ccfg+0x6a047c>
	__pi_systat.ondmns |= d;
     420:	01065501 	tsteq	r6, r1, lsl #10
     424:	1c000013 	stcne	0, cr0, [r0], {19}
}
     428:	08030034 	stmdaeq	r3, {r2, r4, r5}
     42c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
void __pi_offdomain (lword d) {
     430:	13490b39 	movtne	r0, #39737	; 0x9b39
     434:	1d1d0000 	ldcne	0, cr0, [sp, #-0]
	PRCMPowerDomainOff (d);
     438:	11133100 	tstne	r3, r0, lsl #2
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     43c:	58011201 	stmdapl	r1, {r0, r9, ip}
     440:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     444:	1e00000b 	cdpne	0, 0, cr0, cr0, cr11, {0}
	if (d & PRCM_DOMAIN_RFCORE) {
     448:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 398 <devinit_uart+0x8>
     44c:	0b3a0e03 	bleq	e83c60 <__ccfg+0xe63cb8>
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     450:	0b39053b 	bleq	e41944 <__ccfg+0xe2199c>
     454:	01120111 	tsteq	r2, r1, lsl r1
			__pi_systat.effpdm = __pi_systat.reqpdm;
     458:	13010a40 	movwne	r0, #6720	; 0x1a40
     45c:	0a1f0000 	beq	7c0464 <__ccfg+0x7a04bc>
	__pi_systat.ondmns &= ~d;
     460:	3a0e0300 	bcc	381068 <__ccfg+0x3610c0>
     464:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
     468:	2000000b 	andcs	r0, r0, fp
     46c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
void __pi_syserror (word ec, const char *m) {
     470:	06550152 			; <UNDEFINED> instruction: 0x06550152
	diag ("SYSERR: %x, %s", ec, m);
     474:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     478:	13010b57 	movwne	r0, #6999	; 0x1b57
  __ASM volatile ("cpsid i" : : : "memory");
     47c:	05210000 	streq	r0, [r1, #-0]!
     480:	00133100 	andseq	r3, r3, r0, lsl #2
     484:	011d2200 	tsteq	sp, r0, lsl #4
     488:	01521331 	cmpeq	r2, r1, lsr r3
		all_leds_blink;
     48c:	0b580655 	bleq	1601de8 <__ccfg+0x15e1e40>
     490:	0b570b59 	bleq	15c31fc <__ccfg+0x15a3254>
     494:	00001301 	andeq	r1, r0, r1, lsl #6
     498:	55010b23 	strpl	r0, [r1, #-2851]	; 0xfffff4dd
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     49c:	24000006 	strcs	r0, [r0], #-6
     4a0:	1331000a 	teqne	r1, #10
     4a4:	00000111 	andeq	r0, r0, r1, lsl r1
     4a8:	31001d25 	tstcc	r0, r5, lsr #26
     4ac:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     4b0:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
	while (1) {
     4b4:	000b5705 	andeq	r5, fp, r5, lsl #14
     4b8:	011d2600 	tsteq	sp, r0, lsl #12
     4bc:	01111331 	tsteq	r1, r1, lsr r3
     4c0:	0b580112 	bleq	1600910 <__ccfg+0x15e0968>
void tci_run_delay_timer () {
     4c4:	0b570559 	bleq	15c1a30 <__ccfg+0x15a1a88>
	setdel = __pi_mintk - __pi_old;
     4c8:	00001301 	andeq	r1, r0, r1, lsl #6
     4cc:	31011d27 	tstcc	r1, r7, lsr #26
     4d0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     4d4:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4d8:	000b5705 	andeq	r5, fp, r5, lsl #14
     4dc:	001d2800 	andseq	r2, sp, r0, lsl #16
     4e0:	01111331 	tsteq	r1, r1, lsr r3
     4e4:	0b580112 	bleq	1600934 <__ccfg+0x15e098c>
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     4e8:	0b570b59 	bleq	15c3254 <__ccfg+0x15a32ac>
	sti_tim;
     4ec:	34290000 	strtcc	r0, [r9], #-0
}
     4f0:	3a080300 	bcc	2010f8 <__ccfg+0x1e1150>
     4f4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     4f8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     4fc:	2a000006 	bcs	51c <tci_run_auxiliary_timer+0x18>
     500:	0e03012e 	adfeqsp	f0, f3, #0.5
	cli_aux;
     504:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     508:	0b200b39 	bleq	8031f4 <__ccfg+0x7e324c>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     50c:	00001301 	andeq	r1, r0, r1, lsl #6
     510:	03000a2b 	movweq	r0, #2603	; 0xa2b
     514:	3b0b3a0e 	blcc	2ced54 <__ccfg+0x2aedac>
     518:	000b3905 	andeq	r3, fp, r5, lsl #18
	sti_aux;
     51c:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
}
     520:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     524:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     528:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
void AONRTCIntHandler () {
     52c:	01120111 	tsteq	r2, r1, lsl r1
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     530:	13010a40 	movwne	r0, #6720	; 0x1a40
     534:	052d0000 	streq	r0, [sp, #-0]!
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     538:	3a0e0300 	bcc	381140 <__ccfg+0x361198>
		if (__pi_utims [0] == 0)
     53c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     540:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		if (*(__pi_utims [0])) {
     544:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
     548:	0111010b 	tsteq	r1, fp, lsl #2
			(*(__pi_utims [0]))--;
     54c:	13010112 	movwne	r0, #4370	; 0x1112
		if (__pi_utims [1] == 0)
     550:	342f0000 	strtcc	r0, [pc], #-0	; 558 <AONRTCIntHandler+0x2c>
		if (*(__pi_utims [1])) {
     554:	00133100 	andseq	r3, r3, r0, lsl #2
			aux_timer_inactive = 0;
     558:	010b3000 	mrseq	r3, (UNDEF: 11)
			(*(__pi_utims [1]))--;
     55c:	06551331 			; <UNDEFINED> instruction: 0x06551331
		if (__pi_utims [2] == 0)
     560:	34310000 	ldrtcc	r0, [r1], #-0
		if (*(__pi_utims [2])) {
     564:	02133100 	andseq	r3, r3, #0, 2
			(*(__pi_utims [2]))--;
     568:	32000006 	andcc	r0, r0, #6
		if (__pi_utims [3] != 0) {
     56c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
			if (*(__pi_utims [3])) {
     570:	06550152 			; <UNDEFINED> instruction: 0x06550152
				aux_timer_inactive = 0;
     574:	0b590b58 	bleq	16432dc <__ccfg+0x1623334>
				(*(__pi_utims [3]))--;
     578:	00000b57 	andeq	r0, r0, r7, asr fp
	if (__pi_systat.ledsts) {
     57c:	31011d33 	tstcc	r1, r3, lsr sp
     580:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
		if (__pi_systat.ledblc++ == 0) {
     584:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     588:	000b5705 	andeq	r5, fp, r5, lsl #14
			if (__pi_systat.ledblk) {
     58c:	00053400 	andeq	r3, r5, r0, lsl #8
     590:	0b3a0803 	bleq	e825a4 <__ccfg+0xe625fc>
     594:	0b39053b 	bleq	e41a88 <__ccfg+0xe21ae0>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     598:	0a021349 	beq	852c4 <__ccfg+0x6531c>
     59c:	05350000 	ldreq	r0, [r5, #-0]!
				if (__pi_systat.ledsts & 0x2)
     5a0:	02133100 	andseq	r3, r3, #0, 2
     5a4:	36000006 	strcc	r0, [r0], -r6
     5a8:	08030034 	stmdaeq	r3, {r2, r4, r5}
				if (__pi_systat.ledsts & 0x4)
     5ac:	0b3b0b3a 	bleq	ec329c <__ccfg+0xea32f4>
				__pi_systat.ledblk = 0;
     5b0:	13490b39 	movtne	r0, #39737	; 0x9b39
     5b4:	00000602 	andeq	r0, r0, r2, lsl #12
			if (__pi_systat.fstblk)
     5b8:	11010b37 	tstne	r1, r7, lsr fp
     5bc:	00011201 	andeq	r1, r1, r1, lsl #4
				__pi_systat.ledblc = 200;
     5c0:	002e3800 	eoreq	r3, lr, r0, lsl #16
	if (events & AON_RTC_EVFLAGS_CH0) {
     5c4:	0b3a0e03 	bleq	e83dd8 <__ccfg+0xe63e30>
		cli_tim;
     5c8:	0b39053b 	bleq	e41abc <__ccfg+0xe21b14>
		__pi_new += setdel;
     5cc:	00000b20 	andeq	r0, r0, r0, lsr #22
     5d0:	03012e39 	movweq	r2, #7737	; 0x1e39
		setdel = 0;
     5d4:	3b0b3a0e 	blcc	2cee14 <__ccfg+0x2aee6c>
		RISE_N_SHINE;
     5d8:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
		__pi_new += setdel;
     5dc:	1201110c 	andne	r1, r1, #12, 2
		RISE_N_SHINE;
     5e0:	010a4001 	tsteq	sl, r1
     5e4:	3a000013 	bcc	638 <AONRTCIntHandler+0x10c>
		aux_timer_inactive = 1;
     5e8:	0e03012e 	adfeqsp	f0, f3, #0.5
     5ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				if (__pi_systat.ledsts & 0x1)
     5f0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     5f4:	01111349 	tsteq	r1, r9, asr #6
     5f8:	0a400112 	beq	1000a48 <__ccfg+0xfe0aa0>
				if (__pi_systat.ledsts & 0x2)
     5fc:	00001301 	andeq	r1, r0, r1, lsl #6
     600:	0300053b 	movweq	r0, #1339	; 0x53b
     604:	3b0b3a08 	blcc	2cee2c <__ccfg+0x2aee84>
				if (__pi_systat.ledsts & 0x8)
     608:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				__pi_systat.ledblk = 1;
     60c:	00060213 	andeq	r0, r6, r3, lsl r2
     610:	012e3c00 			; <UNDEFINED> instruction: 0x012e3c00
		if (aux_timer_inactive) {
     614:	0b3a0e03 	bleq	e83e28 <__ccfg+0xe63e80>
			cli_aux;
     618:	0b39053b 	bleq	e41b0c <__ccfg+0xe21b64>
     61c:	01120111 	tsteq	r2, r1, lsl r1
     620:	13010a40 	movwne	r0, #6720	; 0x1a40
     624:	2e3d0000 	cdpcs	0, 3, cr0, cr13, cr0, {0}
     628:	030c3f01 	movweq	r3, #52993	; 0xcf01
     62c:	3b0b3a0e 	blcc	2cee6c <__ccfg+0x2aeec4>
     630:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     634:	2013490c 	andscs	r4, r3, ip, lsl #18
     638:	0013010b 	andseq	r0, r3, fp, lsl #2
     63c:	00053e00 	andeq	r3, r5, r0, lsl #28
word tci_update_delay_ticks (Boolean force) {
     640:	0b3a0803 	bleq	e82654 <__ccfg+0xe626ac>
	cli_tim;
     644:	0b39053b 	bleq	e41b38 <__ccfg+0xe21b90>
     648:	00001349 	andeq	r1, r0, r9, asr #6
	if (setdel) {
     64c:	03000a3f 	movweq	r0, #2623	; 0xa3f
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     650:	3b0b3a08 	blcc	2cee78 <__ccfg+0x2aeed0>
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     654:	000b3905 	andeq	r3, fp, r5, lsl #18
     658:	00344000 	eorseq	r4, r4, r0
     65c:	0b3a0e03 	bleq	e83e70 <__ccfg+0xe63ec8>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     660:	0b39053b 	bleq	e41b54 <__ccfg+0xe21bac>
				AON_RTC_O_CH0CMP)) - gettav ());
     664:	06021349 	streq	r1, [r2], -r9, asr #6
	return NO;
     668:	0a410000 	beq	1040670 <__ccfg+0x10206c8>
			setdel = 0;
     66c:	3a080300 	bcc	201274 <__ccfg+0x1e12cc>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     670:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     674:	0001110b 	andeq	r1, r1, fp, lsl #2
}
     678:	011d4200 	tsteq	sp, r0, lsl #4
		sti_tim;
     67c:	01111331 	tsteq	r1, r1, lsr r3
		return YES;
     680:	0b580112 	bleq	1600ad0 <__ccfg+0x15e0b28>
     684:	0b570b59 	bleq	15c33f0 <__ccfg+0x15a3448>
     688:	00001301 	andeq	r1, r0, r1, lsl #6
     68c:	31011d43 	tstcc	r1, r3, asr #26
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     690:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	UARTDisable (UART0_BASE);
     694:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     698:	000b570b 	andeq	r5, fp, fp, lsl #14
	UARTDisable (UART0_BASE);
     69c:	012e4400 			; <UNDEFINED> instruction: 0x012e4400
	UARTConfigSetExpClk (UART0_BASE,
     6a0:	0b3a0e03 	bleq	e83eb4 <__ccfg+0xe63f0c>
     6a4:	0b39053b 	bleq	e41b98 <__ccfg+0xe21bf0>
     6a8:	13490c27 	movtne	r0, #39975	; 0x9c27
     6ac:	13010b20 	movwne	r0, #6944	; 0x1b20
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6b0:	2e450000 	cdpcs	0, 4, cr0, cr5, cr0, {0}
     6b4:	3a0e0300 	bcc	3812bc <__ccfg+0x361314>
     6b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     6bc:	2013490b 	andscs	r4, r3, fp, lsl #18
     6c0:	4600000b 	strmi	r0, [r0], -fp
     6c4:	0e03012e 	adfeqsp	f0, f3, #0.5
	urates [0] = rate;
     6c8:	0b3b0b3a 	bleq	ec33b8 <__ccfg+0xea3410>
}
     6cc:	0b200b39 	bleq	8033b8 <__ccfg+0x7e3410>
     6d0:	00001301 	andeq	r1, r0, r1, lsl #6
     6d4:	03003447 	movweq	r3, #1095	; 0x447
     6d8:	3b0b3a08 	blcc	2cef00 <__ccfg+0x2aef58>
     6dc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     6e0:	48000013 	stmdami	r0, {r0, r1, r4}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6e4:	0000010b 	andeq	r0, r0, fp, lsl #2
     6e8:	3f012e49 	svccc	0x00012e49
     6ec:	3a0e030c 	bcc	381324 <__ccfg+0x36137c>
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     6f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6f4:	110c270b 	tstne	ip, fp, lsl #14
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     6f8:	40011201 	andmi	r1, r1, r1, lsl #4
     6fc:	0013010a 	andseq	r0, r3, sl, lsl #2
	__pi_uart_setrate (urates [0], __pi_uart);
     700:	00054a00 	andeq	r4, r5, r0, lsl #20
     704:	0b3a0803 	bleq	e82718 <__ccfg+0xe62770>
     708:	0b390b3b 	bleq	e433fc <__ccfg+0xe23454>
     70c:	06021349 	streq	r1, [r2], -r9, asr #6
     710:	344b0000 	strbcc	r0, [fp], #-0
     714:	3a0e0300 	bcc	38131c <__ccfg+0x361374>
     718:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	switch (operation) {
     71c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
static int ioreq_uart_a (int operation, char *buf, int len) {
     720:	4c00000a 	stcmi	0, cr0, [r0], {10}
     724:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     728:	0b3b0b3a 	bleq	ec3418 <__ccfg+0xea3470>
     72c:	01110b39 	tsteq	r1, r9, lsr fp
     730:	1d4d0000 	stclne	0, cr0, [sp, #-0]
				*buf++ = uart_a_read;
     734:	52133100 	andspl	r3, r3, #0, 2
     738:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
			while (len && uart_a_char_available) {
     73c:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     740:	4e00000b 	cdpmi	0, 0, cr0, cr0, cr11, {0}
     744:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 694 <__pi_uart_setrate+0x4>
			if (len != operation) {
     748:	0b3a0e03 	bleq	e83f5c <__ccfg+0xe63fb4>
}
     74c:	0b390b3b 	bleq	e43440 <__ccfg+0xe23498>
     750:	01110c27 	tsteq	r1, r7, lsr #24
			uart_a_disable_int;
     754:	0a400112 	beq	1000ba4 <__ccfg+0xfe0bfc>
			if (uart_a_char_available) {
     758:	054f0000 	strbeq	r0, [pc, #-0]	; 760 <ioreq_uart_a+0x44>
				*buf++ = uart_a_read;
     75c:	3a080300 	bcc	201364 <__ccfg+0x1e13bc>
			uart_a_disable_int;
     760:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     764:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			if (uart_a_char_available) {
     768:	5000000a 	andpl	r0, r0, sl
     76c:	0e03012e 	adfeqsp	f0, f3, #0.5
				uart_a_enable_int;
     770:	0b3b0b3a 	bleq	ec3460 <__ccfg+0xea34b8>
     774:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
				goto Redo_rx;
     778:	13010b20 	movwne	r0, #6944	; 0x1b20
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     77c:	05510000 	ldrbeq	r0, [r1, #-0]
     780:	3a080300 	bcc	201388 <__ccfg+0x1e13e0>
			return -2;
     784:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     788:	0013490b 	andseq	r4, r3, fp, lsl #18
				uart_a_write (*buf);
     78c:	012e5200 			; <UNDEFINED> instruction: 0x012e5200
     790:	0b3a0e03 	bleq	e83fa4 <__ccfg+0xe63ffc>
			while (len && uart_a_room_in_tx) {
     794:	0b39053b 	bleq	e41c88 <__ccfg+0xe21ce0>
     798:	0b200c27 	bleq	80383c <__ccfg+0x7e3894>
     79c:	00001301 	andeq	r1, r0, r1, lsl #6
			if (len != operation) {
     7a0:	03000553 	movweq	r0, #1363	; 0x553
			uart_a_disable_int;
     7a4:	3b0b3a0e 	blcc	2cefe4 <__ccfg+0x2af03c>
     7a8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			if (uart_a_room_in_tx) {
     7ac:	54000013 	strpl	r0, [r0], #-19	; 0xffffffed
     7b0:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
				uart_a_enable_int;
     7b4:	0b3b0b3a 	bleq	ec34a4 <__ccfg+0xea34fc>
     7b8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
				*buf++ = uart_a_read;
     7bc:	00000b20 	andeq	r0, r0, r0, lsr #22
			if (uart_a_room_in_tx) {
     7c0:	03012e55 	movweq	r2, #7765	; 0x1e55
				uart_a_write (*buf);
     7c4:	3b0b3a0e 	blcc	2cf004 <__ccfg+0x2af05c>
     7c8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7cc:	2013490c 	andscs	r4, r3, ip, lsl #18
     7d0:	0013010b 	andseq	r0, r3, fp, lsl #2
			uart_a_enable_int;
     7d4:	002e5600 	eoreq	r5, lr, r0, lsl #12
     7d8:	0b3a0e03 	bleq	e83fec <__ccfg+0xe64044>
     7dc:	0b39053b 	bleq	e41cd0 <__ccfg+0xe21d28>
			return 0;
     7e0:	0b200c27 	bleq	803884 <__ccfg+0x7e38dc>
			if (len == UART_CNTRL_SETRATE) {
     7e4:	2e570000 	cdpcs	0, 5, cr0, cr7, cr0, {0}
				if (__pi_uart_setrate (*((word*)buf),
     7e8:	3a0e0300 	bcc	3813f0 <__ccfg+0x361448>
     7ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     7f0:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
				syserror (EREQPAR, "uar");
     7f4:	000b2013 	andeq	r2, fp, r3, lsl r0
			syserror (ENOOPER, "uai");
     7f8:	002e5800 	eoreq	r5, lr, r0, lsl #16
			if (len == UART_CNTRL_GETRATE) {
     7fc:	0b3a0e03 	bleq	e84010 <__ccfg+0xe64068>
				return 1;
     800:	0b39053b 	bleq	e41cf4 <__ccfg+0xe21d4c>
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     804:	13490c27 	movtne	r0, #39975	; 0x9c27
			syserror (ENOOPER, "uai");
     808:	00000b20 	andeq	r0, r0, r0, lsr #22
     80c:	31012e59 	tstcc	r1, r9, asr lr
     810:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     814:	000a4001 	andeq	r4, sl, r1
     818:	11010000 	mrsne	r0, (UNDEF: 1)
     81c:	130e2501 	movwne	r2, #58625	; 0xe501
     820:	1b0e030b 	blne	381454 <__ccfg+0x3614ac>
     824:	1106550e 	tstne	r6, lr, lsl #10
     828:	00061001 	andeq	r1, r6, r1
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     82c:	00240200 	eoreq	r0, r4, r0, lsl #4
void UART0IntHandler () {
     830:	0b3e0b0b 	bleq	f83464 <__ccfg+0xf634bc>
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     834:	00000e03 	andeq	r0, r0, r3, lsl #28
     838:	03001603 	movweq	r1, #1539	; 0x603
     83c:	3b0b3a0e 	blcc	2cf07c <__ccfg+0x2af0d4>
     840:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     844:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     848:	0b0b0024 	bleq	2c08e0 <__ccfg+0x2a0938>
     84c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
		RISE_N_SHINE;
     850:	13050000 	movwne	r0, #20480	; 0x5000
     854:	0b0e0301 	bleq	381460 <__ccfg+0x3614b8>
		i_trigger (devevent (UART_A, READ));
     858:	3b0b3a0b 	blcc	2cf08c <__ccfg+0x2af0e4>
     85c:	0013010b 	andseq	r0, r3, fp, lsl #2
     860:	000d0600 	andeq	r0, sp, r0, lsl #12
     864:	13490e03 	movtne	r0, #40451	; 0x9e03
     868:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
     86c:	0f070000 	svceq	0x00070000
     870:	000b0b00 	andeq	r0, fp, r0, lsl #22
     874:	00260800 	eoreq	r0, r6, r0, lsl #16
     878:	00001349 	andeq	r1, r0, r9, asr #6
     87c:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
     880:	0a000013 	beq	8d4 <UART0IntHandler+0xa8>
     884:	0b0b000f 	bleq	2c08c8 <__ccfg+0x2a0920>
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     888:	00001349 	andeq	r1, r0, r9, asr #6
     88c:	0b01130b 	bleq	454c0 <__ccfg+0x25518>
     890:	3b0b3a0b 	blcc	2cf0c4 <__ccfg+0x2af11c>
		i_trigger (devevent (UART_A, WRITE));
     894:	010b390b 	tsteq	fp, fp, lsl #18
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     898:	0c000013 	stceq	0, cr0, [r0], {19}
     89c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		RISE_N_SHINE;
     8a0:	0b3b0b3a 	bleq	ec3590 <__ccfg+0xea35e8>
     8a4:	13490b39 	movtne	r0, #39737	; 0x9b39
     8a8:	0b0d0b0b 	bleq	3434dc <__ccfg+0x323534>
		i_trigger (devevent (UART_A, WRITE));
     8ac:	0b380b0c 	bleq	e034e4 <__ccfg+0xde353c>
     8b0:	0d0d0000 	stceq	0, cr0, [sp, #-0]
     8b4:	3a0e0300 	bcc	3814bc <__ccfg+0x361514>
     8b8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8bc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     8c0:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
     8c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     8c8:	0b3b0b3a 	bleq	ec35b8 <__ccfg+0xea3610>
     8cc:	13490b39 	movtne	r0, #39737	; 0x9b39
     8d0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
     8d4:	010f0000 	mrseq	r0, CPSR
}
     8d8:	01134901 	tsteq	r3, r1, lsl #18
     8dc:	10000013 	andne	r0, r0, r3, lsl r0
     8e0:	00000021 	andeq	r0, r0, r1, lsr #32
     8e4:	03001611 	movweq	r1, #1553	; 0x611
     8e8:	3b0b3a0e 	blcc	2cf128 <__ccfg+0x2af180>
void __buttons_setirq (int val) {
     8ec:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     8f0:	12000013 	andne	r0, r0, #19
     8f4:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8f8:	00001301 	andeq	r1, r0, r1, lsl #6
     8fc:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
     900:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
		bn = BUTTON_GPIO (__button_list [i]);
     904:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     908:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     90c:	13490b39 	movtne	r0, #39737	; 0x9b39
     910:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
     914:	13150000 	tstne	r5, #0
     918:	3a0b0b01 	bcc	2c3524 <__ccfg+0x2a357c>
     91c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
     920:	0013010b 	andseq	r0, r3, fp, lsl #2
     924:	000d1600 	andeq	r1, sp, r0, lsl #12
     928:	0b3a0e03 	bleq	e8413c <__ccfg+0xe64194>
     92c:	0b39053b 	bleq	e41e20 <__ccfg+0xe21e78>
void __pinlist_setirq (int val) {
     930:	0b381349 	bleq	e0565c <__ccfg+0xde56b4>
	for (i = 0; i < N_PINLIST; i++) {
     934:	13170000 	tstne	r7, #0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     938:	0b0e0301 	bleq	381544 <__ccfg+0x36159c>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     93c:	3b0b3a0b 	blcc	2cf170 <__ccfg+0x2af1c8>
	for (i = 0; i < N_PINLIST; i++) {
     940:	010b3905 	tsteq	fp, r5, lsl #18
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     944:	18000013 	stmdane	r0, {r0, r1, r4}
     948:	13490021 	movtne	r0, #36897	; 0x9021
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     94c:	00000b2f 	andeq	r0, r0, pc, lsr #22
     950:	27011519 	smladcs	r1, r9, r5, r1
     954:	0113490c 	tsteq	r3, ip, lsl #18
	for (i = 0; i < N_PINLIST; i++) {
     958:	1a000013 	bne	9ac <GPIOIntHandler+0x40>
}
     95c:	13470034 	movtne	r0, #28724	; 0x7034
     960:	0b3b0b3a 	bleq	ec3650 <__ccfg+0xea36a8>
     964:	0a020b39 	beq	83650 <__ccfg+0x636a8>
     968:	341b0000 	ldrcc	r0, [fp], #-0
void GPIOIntHandler () {
     96c:	3a0e0300 	bcc	381574 <__ccfg+0x3615cc>
if (buttons_int) {
     970:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     974:	3f13490b 	svccc	0x0013490b
	buttons_disable ();
     978:	000a020c 	andeq	r0, sl, ip, lsl #4
     97c:	00341c00 	eorseq	r1, r4, r0, lsl #24
	i_trigger ((aword)&__button_list);
     980:	0b3a0e03 	bleq	e84194 <__ccfg+0xe641ec>
     984:	0b390b3b 	bleq	e43678 <__ccfg+0xe236d0>
     988:	0a021349 	beq	856b4 <__ccfg+0x6570c>
     98c:	341d0000 	ldrcc	r0, [sp], #-0
     990:	3a0e0300 	bcc	381598 <__ccfg+0x3615f0>
     994:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     998:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     99c:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
     9a0:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 8f0 <__buttons_setirq+0x4>
     9a4:	0b3a0e03 	bleq	e841b8 <__ccfg+0xe64210>
     9a8:	0b39053b 	bleq	e41e9c <__ccfg+0xe21ef4>
	RISE_N_SHINE;
     9ac:	13490c27 	movtne	r0, #39975	; 0x9c27
     9b0:	01120111 	tsteq	r2, r1, lsl r1
     9b4:	00000a40 	andeq	r0, r0, r0, asr #20
if (pin_sensor_int) {
     9b8:	3f012e1f 	svccc	0x00012e1f
     9bc:	3a0e030c 	bcc	3815f4 <__ccfg+0x36164c>
	i_trigger ((aword)(&__input_pins));
     9c0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9c4:	110c270b 	tstne	ip, fp, lsl #14
     9c8:	40011201 	andmi	r1, r1, r1, lsl #4
     9cc:	0013010a 	andseq	r0, r3, sl, lsl #2
     9d0:	00052000 	andeq	r2, r5, r0
     9d4:	0b3a0e03 	bleq	e841e8 <__ccfg+0xe64240>
     9d8:	0b39053b 	bleq	e41ecc <__ccfg+0xe21f24>
     9dc:	06021349 	streq	r1, [r2], -r9, asr #6
     9e0:	18210000 	stmdane	r1!, {}	; <UNPREDICTABLE>
     9e4:	22000000 	andcs	r0, r0, #0
     9e8:	08030034 	stmdaeq	r3, {r2, r4, r5}
	__pinsen_disable_and_clear;
     9ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	RISE_N_SHINE;
     9f0:	13490b39 	movtne	r0, #39737	; 0x9b39
     9f4:	00000602 	andeq	r0, r0, r2, lsl #12
     9f8:	03003423 	movweq	r3, #1059	; 0x423
}
     9fc:	3b0b3a08 	blcc	2cf224 <__ccfg+0x2af27c>
     a00:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     a04:	000a0213 	andeq	r0, sl, r3, lsl r2
     a08:	00342400 	eorseq	r2, r4, r0, lsl #8
     a0c:	0b3a0803 	bleq	e82a20 <__ccfg+0xe62a78>
void system_init () {
     a10:	0b39053b 	bleq	e41f04 <__ccfg+0xe21f5c>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a14:	00001349 	andeq	r1, r0, r9, asr #6
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a18:	03000a25 	movweq	r0, #2597	; 0xa25
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a1c:	3b0b3a0e 	blcc	2cf25c <__ccfg+0x2af2b4>
     a20:	110b3905 	tstne	fp, r5, lsl #18
     a24:	26000001 	strcs	r0, [r0], -r1
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a28:	0111010b 	tsteq	r1, fp, lsl #2
     a2c:	13010112 	movwne	r0, #4370	; 0x1112
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a30:	0b270000 	bleq	9c0a38 <__ccfg+0x9a0a90>
     a34:	01065501 	tsteq	r6, r1, lsl #10
     a38:	28000013 	stmdacs	r0, {r0, r1, r4}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a3c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a40:	06550152 			; <UNDEFINED> instruction: 0x06550152
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a44:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a48:	00000b57 	andeq	r0, r0, r7, asr fp
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a4c:	31000529 	tstcc	r0, r9, lsr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a50:	2a000013 	bcs	aa4 <system_init+0x94>
		pin = (port_confs [i] >> 19) & 0x1f;
     a54:	0e03012e 	adfeqsp	f0, f3, #0.5
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a58:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		pin = (port_confs [i] >> 19) & 0x1f;
     a5c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a60:	01120111 	tsteq	r2, r1, lsl r1
     a64:	13010a40 	movwne	r0, #6720	; 0x1a40
     a68:	052b0000 	streq	r0, [fp, #-0]!
     a6c:	3a080300 	bcc	201674 <__ccfg+0x1e16cc>
		if (port_confs [i] & 0x80)
     a70:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a74:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     a78:	2c000006 	stccs	0, cr0, [r0], {6}
		if (port_confs [i] & 0x40)
     a7c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 9cc <GPIOIntHandler+0x60>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a80:	0b3a0e03 	bleq	e84294 <__ccfg+0xe642ec>
     a84:	0b39053b 	bleq	e41f78 <__ccfg+0xe21fd0>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a88:	13490c27 	movtne	r0, #39975	; 0x9c27
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a8c:	01120111 	tsteq	r2, r1, lsl r1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a90:	13010a40 	movwne	r0, #6720	; 0x1a40
	all_leds_blink;
     a94:	342d0000 	strtcc	r0, [sp], #-0
     a98:	3a0e0300 	bcc	3816a0 <__ccfg+0x3616f8>
     a9c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     aa0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     aa4:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
     aa8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 9f8 <GPIOIntHandler+0x8c>
     aac:	0b3a0e03 	bleq	e842c0 <__ccfg+0xe64318>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ab0:	0b39053b 	bleq	e41fa4 <__ccfg+0xe21ffc>
     ab4:	0b200c27 	bleq	803b58 <__ccfg+0x7e3bb0>
     ab8:	00001301 	andeq	r1, r0, r1, lsl #6
     abc:	0300052f 	movweq	r0, #1327	; 0x52f
     ac0:	3b0b3a08 	blcc	2cf2e8 <__ccfg+0x2af340>
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     ac4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ac8:	30000013 	andcc	r0, r0, r3, lsl r0
     acc:	0c3f012e 	ldfeqs	f0, [pc], #-184	; a1c <system_init+0xc>
	IntEnable (INT_AON_RTC_COMB);
     ad0:	0b3a0e03 	bleq	e842e4 <__ccfg+0xe6433c>
     ad4:	0b39053b 	bleq	e41fc8 <__ccfg+0xe22020>
     ad8:	01120111 	tsteq	r2, r1, lsl r1
	__pi_malloc_init ();
     adc:	13010a40 	movwne	r0, #6720	; 0x1a40
	IntEnable (INT_AON_GPIO_EDGE);
     ae0:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
     ae4:	030c3f01 	movweq	r3, #52993	; 0xcf01
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     ae8:	3b0b3a08 	blcc	2cf310 <__ccfg+0x2af368>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     aec:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     af0:	1113490c 	tstne	r3, ip, lsl #18
     af4:	40011201 	andmi	r1, r1, r1, lsl #4
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     af8:	0013010a 	andseq	r0, r3, sl, lsl #2
     afc:	00053200 	andeq	r3, r5, r0, lsl #4
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b00:	0b3a0803 	bleq	e82b14 <__ccfg+0xe62b6c>
     b04:	0b39053b 	bleq	e41ff8 <__ccfg+0xe22050>
     b08:	0a021349 	beq	85834 <__ccfg+0x6588c>
	urates [0] = UART_RATE / 100;
     b0c:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
     b10:	030c3f00 	movweq	r3, #52992	; 0xcf00
	reinit_uart ();
     b14:	3b0b3a0e 	blcc	2cf354 <__ccfg+0x2af3ac>
	EXTRA_INITIALIZERS;
     b18:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     b1c:	1201110c 	andne	r1, r1, #12, 2
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b20:	000a4001 	andeq	r4, sl, r1
     b24:	00053400 	andeq	r3, r5, r0, lsl #8
     b28:	0b3a0e03 	bleq	e8433c <__ccfg+0xe64394>
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b2c:	0b39053b 	bleq	e42020 <__ccfg+0xe22078>
     b30:	0a021349 	beq	8585c <__ccfg+0x658b4>
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b34:	05350000 	ldreq	r0, [r5, #-0]!
     b38:	3a0e0300 	bcc	381740 <__ccfg+0x361798>
			devinit [i] . init (devinit [i] . param);
     b3c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b40:	0013490b 	andseq	r4, r3, fp, lsl #18
     b44:	010b3600 	tsteq	fp, r0, lsl #12
     b48:	00000655 	andeq	r0, r0, r5, asr r6
	IntEnable (INT_UART0_COMB);
     b4c:	3f012e37 	svccc	0x00012e37
     b50:	3a0e030c 	bcc	381788 <__ccfg+0x3617e0>
}
     b54:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	tci_run_auxiliary_timer ();
     b58:	200c270b 	andcs	r2, ip, fp, lsl #14
		diag ("");
     b5c:	0013010b 	andseq	r0, r3, fp, lsl #2
     b60:	00053800 	andeq	r3, r5, r0, lsl #16
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     b64:	0b3a0803 	bleq	e82b78 <__ccfg+0xe62bd0>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     b68:	0b390b3b 	bleq	e4385c <__ccfg+0xe238b4>
		diag ("Leftover RAM: %d bytes",
     b6c:	00001349 	andeq	r1, r0, r9, asr #6
     b70:	03000539 	movweq	r0, #1337	; 0x539
     b74:	3b0b3a0e 	blcc	2cf3b4 <__ccfg+0x2af40c>
     b78:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     b7c:	3a000013 	bcc	bd0 <setpowermode+0x8>
     b80:	08030034 	stmdaeq	r3, {r2, r4, r5}
     b84:	0b3b0b3a 	bleq	ec3874 <__ccfg+0xea38cc>
     b88:	13490b39 	movtne	r0, #39737	; 0x9b39
     b8c:	0a3b0000 	beq	ec0b94 <__ccfg+0xea0bec>
     b90:	3a080300 	bcc	201798 <__ccfg+0x1e17f0>
     b94:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b98:	3c00000b 	stccc	0, cr0, [r0], {11}
     b9c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; aec <system_init+0xdc>
     ba0:	0b3a0e03 	bleq	e843b4 <__ccfg+0xe6440c>
     ba4:	0b390b3b 	bleq	e43898 <__ccfg+0xe238f0>
     ba8:	01110c27 	tsteq	r1, r7, lsr #24
     bac:	0a400112 	beq	1000ffc <__ccfg+0xfe1054>
     bb0:	00001301 	andeq	r1, r0, r1, lsl #6
     bb4:	0300053d 	movweq	r0, #1341	; 0x53d
     bb8:	3b0b3a08 	blcc	2cf3e0 <__ccfg+0x2af438>
     bbc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     bc0:	00060213 	andeq	r0, r6, r3, lsl r2
     bc4:	00343e00 	eorseq	r3, r4, r0, lsl #28
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     bc8:	0b3a0803 	bleq	e82bdc <__ccfg+0xe62c34>
     bcc:	0b390b3b 	bleq	e438c0 <__ccfg+0xe23918>
     bd0:	06021349 	streq	r1, [r2], -r9, asr #6
     bd4:	2e3f0000 	cdpcs	0, 3, cr0, cr15, cr0, {0}
     bd8:	030c3f00 	movweq	r3, #52992	; 0xcf00
     bdc:	3b0b3a0e 	blcc	2cf41c <__ccfg+0x2af474>
     be0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     be4:	1201110c 	andne	r1, r1, #12, 2
}
     be8:	000a4001 	andeq	r4, sl, r1
__attribute__ ((noreturn)) void __pi_release () {
     bec:	012e4000 			; <UNDEFINED> instruction: 0x012e4000
     bf0:	0b3a0e03 	bleq	e84404 <__ccfg+0xe6445c>
     bf4:	0b390b3b 	bleq	e438e8 <__ccfg+0xe23940>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     bf8:	13490c27 	movtne	r0, #39975	; 0x9c27
	check_stack_overflow;
     bfc:	13010b20 	movwne	r0, #6944	; 0x1b20
     c00:	2e410000 	cdpcs	0, 4, cr0, cr1, cr0, {0}
     c04:	3a0e0301 	bcc	381810 <__ccfg+0x361868>
	update_n_wake (MAX_WORD, NO);
     c08:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c0c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     c10:	010b2013 	tsteq	fp, r3, lsl r0
	for_all_tasks (__pi_curr) {
     c14:	42000013 	andmi	r0, r0, #19
     c18:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
     c1c:	01120111 	tsteq	r2, r1, lsl r1
  __ASM volatile ("cpsid i" : : : "memory");
     c20:	13010a40 	movwne	r0, #6720	; 0x1a40
	__SLEEP;
     c24:	05430000 	strbeq	r0, [r3, #-0]
     c28:	02133100 	andseq	r3, r3, #0, 2
     c2c:	44000006 	strmi	r0, [r0], #-6
     c30:	13310034 	teqne	r1, #52	; 0x34
	system_event_count ++;
     c34:	00000602 	andeq	r0, r0, r2, lsl #12
     c38:	31011d45 	tstcc	r1, r5, asr #26
	switch (__pi_systat.effpdm) {
     c3c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     c40:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     c44:	000b570b 	andeq	r5, fp, fp, lsl #14
     c48:	00344600 	eorseq	r4, r4, r0, lsl #12
			__WFI ();
     c4c:	00001331 	andeq	r1, r0, r1, lsr r3
     c50:	31011d47 	tstcc	r1, r7, asr #26
     c54:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
	check_stack_overflow;
     c58:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     c5c:	000b570b 	andeq	r5, fp, fp, lsl #14
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c60:	000a4800 	andeq	r4, sl, r0, lsl #16
     c64:	01111331 	tsteq	r1, r1, lsr r3
			(__pi_curr->code) (tstate (__pi_curr));
     c68:	1d490000 	stclne	0, cr0, [r9, #-0]
			goto Redo;
     c6c:	11133101 	tstne	r3, r1, lsl #2
	for_all_tasks (__pi_curr) {
     c70:	58011201 	stmdapl	r1, {r0, r9, ip}
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c74:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c78:	4a00000b 	bmi	cac <__pi_release+0xc0>
     c7c:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c80:	01120111 	tsteq	r2, r1, lsl r1
     c84:	00000a40 	andeq	r0, r0, r0, asr #20
     c88:	01110100 	tsteq	r1, r0, lsl #2
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c8c:	0b130e25 	bleq	4c4528 <__ccfg+0x4a4580>
     c90:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c94:	01110655 	tsteq	r1, r5, asr r6
     c98:	00000610 	andeq	r0, r0, r0, lsl r6
			__WFI ();
     c9c:	0b002402 	bleq	9cac <__exidx_end+0x4f58>
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ca0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     ca4:	0300000e 	movweq	r0, #14
}
     ca8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cac:	0b3b0b3a 	bleq	ec399c <__ccfg+0xea39f4>
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cb0:	13490b39 	movtne	r0, #39737	; 0x9b39
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cb4:	24040000 	strcs	r0, [r4], #-0
     cb8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cbc:	0008030b 	andeq	r0, r8, fp, lsl #6
     cc0:	01130500 	tsteq	r3, r0, lsl #10
     cc4:	0b0b0e03 	bleq	2c44d8 <__ccfg+0x2a4530>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cc8:	0b3b0b3a 	bleq	ec39b8 <__ccfg+0xea3a10>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ccc:	00001301 	andeq	r1, r0, r1, lsl #6
     cd0:	03000d06 	movweq	r0, #3334	; 0xd06
     cd4:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
     cd8:	000c340b 	andeq	r3, ip, fp, lsl #8
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     cdc:	000f0700 	andeq	r0, pc, r0, lsl #14
     ce0:	00000b0b 	andeq	r0, r0, fp, lsl #22
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ce4:	49002608 	stmdbmi	r0, {r3, r9, sl, sp}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     ce8:	09000013 	stmdbeq	r0, {r0, r1, r4}
     cec:	13490035 	movtne	r0, #36917	; 0x9035
     cf0:	0f0a0000 	svceq	0x000a0000
     cf4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     cf8:	0b000013 	bleq	d4c <__pi_release+0x160>
			SysCtrlSetRechargeBeforePowerDown
     cfc:	0b0b0113 	bleq	2c1150 <__ccfg+0x2a11a8>
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d00:	0b3b0b3a 	bleq	ec39f0 <__ccfg+0xea3a48>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d04:	13010b39 	movwne	r0, #6969	; 0x1b39
     d08:	0d0c0000 	stceq	0, cr0, [ip, #-0]
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d0c:	3a0e0300 	bcc	381914 <__ccfg+0x36196c>
     d10:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d14:	0b13490b 	bleq	4d3148 <__ccfg+0x4b31a0>
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d18:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
     d1c:	000b380b 	andeq	r3, fp, fp, lsl #16
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d20:	000d0d00 	andeq	r0, sp, r0, lsl #26
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d24:	0b3a0e03 	bleq	e84538 <__ccfg+0xe64590>
     d28:	0b390b3b 	bleq	e43a1c <__ccfg+0xe23a74>
     d2c:	0b381349 	bleq	e05a58 <__ccfg+0xde5ab0>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d30:	340e0000 	strcc	r0, [lr], #-0
			while (!(AONWUCPowerStatusGet () &
     d34:	3a0e0300 	bcc	38193c <__ccfg+0x361994>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d38:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d3c:	3f13490b 	svccc	0x0013490b
     d40:	000c3c0c 	andeq	r3, ip, ip, lsl #24
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d44:	01010f00 	tsteq	r1, r0, lsl #30
     d48:	13011349 	movwne	r1, #4937	; 0x1349
     d4c:	21100000 	tstcs	r0, r0
     d50:	11000000 	mrsne	r0, (UNDEF: 0)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d54:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     d58:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d5c:	13490b39 	movtne	r0, #39737	; 0x9b39
     d60:	15120000 	ldrne	r0, [r2, #-0]
			SysCtrlAdjustRechargeAfterPowerDown ();
     d64:	010c2701 	tsteq	ip, r1, lsl #14
			reinit_uart ();
     d68:	13000013 	movwne	r0, #19
     d6c:	13490005 	movtne	r0, #36869	; 0x9005
     d70:	34140000 	ldrcc	r0, [r4], #-0
}
     d74:	3a0e0300 	bcc	38197c <__ccfg+0x3619d4>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d78:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d7c:	3f13490b 	svccc	0x0013490b
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d80:	000c3c0c 	andeq	r3, ip, ip, lsl #24
     d84:	01151500 	tsteq	r5, r0, lsl #10
     d88:	13490c27 	movtne	r0, #39975	; 0x9c27
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     d8c:	00001301 	andeq	r1, r0, r1, lsl #6
     d90:	03011316 	movweq	r1, #4886	; 0x1316
     d94:	3a0b0b0e 	bcc	2c39d4 <__ccfg+0x2a3a2c>
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     d98:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     d9c:	0013010b 	andseq	r0, r3, fp, lsl #2
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     da0:	01171700 	tsteq	r7, r0, lsl #14
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     da4:	0b3a0b0b 	bleq	e839d8 <__ccfg+0xe63a30>
     da8:	0b390b3b 	bleq	e43a9c <__ccfg+0xe23af4>
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     dac:	00001301 	andeq	r1, r0, r1, lsl #6
     db0:	03000d18 	movweq	r0, #3352	; 0xd18
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     db4:	3b0b3a0e 	blcc	2cf5f4 <__ccfg+0x2af64c>
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     db8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     dbc:	19000013 	stmdbne	r0, {r0, r1, r4}
     dc0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
			PRCMPowerDomainOff (
     dc4:	0b3b0b3a 	bleq	ec3ab4 <__ccfg+0xea3b0c>
     dc8:	13490b39 	movtne	r0, #39737	; 0x9b39
	__SLEEP;
     dcc:	0d1a0000 	ldceq	0, cr0, [sl, #-0]
     dd0:	3a080300 	bcc	2019d8 <__ccfg+0x1e1a30>
  __ASM volatile ("cpsie i" : : : "memory");
     dd4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	goto Redo;
     dd8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     ddc:	1b00000b 	blne	e10 <__pi_release+0x224>
     de0:	0b0b0113 	bleq	2c1234 <__ccfg+0x2a128c>
     de4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     de8:	13010b39 	movwne	r0, #6969	; 0x1b39
     dec:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
     df0:	3a0e0300 	bcc	3819f8 <__ccfg+0x361a50>
     df4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     df8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     dfc:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
     e00:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     e04:	0b3a0b0b 	bleq	e83a38 <__ccfg+0xe63a90>
     e08:	0b39053b 	bleq	e422fc <__ccfg+0xe22354>
     e0c:	00001301 	andeq	r1, r0, r1, lsl #6
     e10:	4900211e 	stmdbmi	r0, {r1, r2, r3, r4, r8, sp}
     e14:	000b2f13 	andeq	r2, fp, r3, lsl pc
     e18:	00341f00 	eorseq	r1, r4, r0, lsl #30
     e1c:	0b3a0e03 	bleq	e84630 <__ccfg+0xe64688>
     e20:	0b390b3b 	bleq	e43b14 <__ccfg+0xe23b6c>
     e24:	0a021349 	beq	85b50 <__ccfg+0x65ba8>
     e28:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
     e2c:	030c3f00 	movweq	r3, #52992	; 0xcf00
     e30:	3b0b3a0e 	blcc	2cf670 <__ccfg+0x2af6c8>
     e34:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     e38:	1201110c 	andne	r1, r1, #12, 2
     e3c:	000a4001 	andeq	r4, sl, r1
     e40:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
	cli_tim;
     e44:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     e48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     e4c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	diag ("PicOS halted");
     e50:	01111349 	tsteq	r1, r9, asr #6
	mdelay (500);
     e54:	0a400112 	beq	10012a4 <__ccfg+0xfe12fc>
     e58:	00001301 	andeq	r1, r0, r1, lsl #6
	setpowermode (2);
     e5c:	03000522 	movweq	r0, #1314	; 0x522
	__PCB = NULL;
     e60:	3b0b3a08 	blcc	2cf688 <__ccfg+0x2af6e0>
	release;
     e64:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     e68:	00060213 	andeq	r0, r6, r3, lsl r2
     e6c:	011d2300 	tsteq	sp, r0, lsl #6
     e70:	01521331 	cmpeq	r2, r1, lsr r3
int main (void) {
     e74:	0b580655 	bleq	16027d0 <__ccfg+0x15e2828>
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e78:	0b570559 	bleq	15c23e4 <__ccfg+0x15a243c>
     e7c:	05240000 	streq	r0, [r4, #-0]!
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e80:	02133100 	andseq	r3, r3, #0, 2
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e84:	25000006 	strcs	r0, [r0, #-6]
	system_init ();
     e88:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
	tcv_init ();
     e8c:	34260000 	strtcc	r0, [r6], #-0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e90:	02133100 	andseq	r3, r3, #0, 2
     e94:	27000006 	strcs	r0, [r0, -r6]
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e98:	0c3f012e 	ldfeqs	f0, [pc], #-184	; de8 <__pi_release+0x1fc>
     e9c:	0b3a0e03 	bleq	e846b0 <__ccfg+0xe64708>
     ea0:	0b39053b 	bleq	e42394 <__ccfg+0xe223ec>
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     ea4:	01110c27 	tsteq	r1, r7, lsr #24
     ea8:	0a400112 	beq	10012f8 <__ccfg+0xfe1350>
	delay (16, 0);
     eac:	00001301 	andeq	r1, r0, r1, lsl #6
     eb0:	03003428 	movweq	r3, #1064	; 0x428
     eb4:	3b0b3a08 	blcc	2cf6dc <__ccfg+0x2af734>
	__pi_release ();
     eb8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     ebc:	00060213 	andeq	r0, r6, r3, lsl r2
     ec0:	00342900 	eorseq	r2, r4, r0, lsl #18
     ec4:	0b3a0803 	bleq	e82ed8 <__ccfg+0xe62f30>
     ec8:	0b39053b 	bleq	e423bc <__ccfg+0xe22414>
     ecc:	00001349 	andeq	r1, r0, r9, asr #6
     ed0:	0300342a 	movweq	r3, #1066	; 0x42a
static void killev (__pi_pcb_t *pid) {
     ed4:	3b0b3a08 	blcc	2cf6fc <__ccfg+0x2af754>
	wfun = (aword)(pid->code);
     ed8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	for_all_tasks (i) {
     edc:	000a0213 	andeq	r0, sl, r3, lsl r2
		for (j = 0; j < nevents (i); j++) {
     ee0:	00052b00 	andeq	r2, r5, r0, lsl #22
     ee4:	0b3a0e03 	bleq	e846f8 <__ccfg+0xe64750>
     ee8:	0b39053b 	bleq	e423dc <__ccfg+0xe22434>
			    || i->Events [j] . Event == wfun
     eec:	06021349 	streq	r1, [r2], -r9, asr #6
		for (j = 0; j < nevents (i); j++) {
     ef0:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
			if (i->Events [j] . Event == (aword)pid
     ef4:	030c3f01 	movweq	r3, #52993	; 0xcf01
     ef8:	3b0b3a0e 	blcc	2cf738 <__ccfg+0x2af790>
     efc:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
				wakeupev (i, j);
     f00:	2013490c 	andscs	r4, r3, ip, lsl #18
     f04:	0013010b 	andseq	r0, r3, fp, lsl #2
	for_all_tasks (i) {
     f08:	00052d00 	andeq	r2, r5, r0, lsl #26
}
     f0c:	0b3a0e03 	bleq	e84720 <__ccfg+0xe64778>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f10:	0b39053b 	bleq	e42404 <__ccfg+0xe2245c>
static void qfree (aword *ch) {
     f14:	00001349 	andeq	r1, r0, r9, asr #6
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f18:	0300052e 	movweq	r0, #1326	; 0x52e
	cc = (aword*)(mpools + MA_NP);
     f1c:	3b0b3a08 	blcc	2cf744 <__ccfg+0x2af79c>
	m_setnextp (ch, chunk);
     f20:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	m_setnextp (cc, ch);
     f24:	2f000013 	svccs	0x00000013
}
     f28:	0111010b 	tsteq	r1, fp, lsl #2
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f2c:	00000112 	andeq	r0, r0, r2, lsl r1
     f30:	03003430 	movweq	r3, #1072	; 0x430
     f34:	3b0b3a0e 	blcc	2cf774 <__ccfg+0x2af7cc>
			m_setnextp (cc, m_nextp (chunk));
     f38:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			m_size (chunk) += m_hdrlen + m_size (ch);
     f3c:	000a0213 	andeq	r0, sl, r3, lsl r2
     f40:	000a3100 	andeq	r3, sl, r0, lsl #2
     f44:	0b3a0e03 	bleq	e84758 <__ccfg+0xe647b0>
     f48:	0b39053b 	bleq	e4243c <__ccfg+0xe22494>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f4c:	00000111 	andeq	r0, r0, r1, lsl r1
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f50:	31011d32 	tstcc	r1, r2, lsr sp
     f54:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     f58:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
			m_setnextp (cc, m_nextp (chunk));
     f5c:	000b5705 	andeq	r5, fp, r5, lsl #14
			m_size (ch) += m_hdrlen + m_size (chunk);
     f60:	00053300 	andeq	r3, r5, r0, lsl #6
     f64:	00001331 	andeq	r1, r0, r1, lsr r3
     f68:	03000534 	movweq	r0, #1332	; 0x534
     f6c:	3b0b3a08 	blcc	2cf794 <__ccfg+0x2af7ec>
     f70:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     f74:	000a0213 	andeq	r0, sl, r3, lsl r2
			if (m_size (chunk) >= m_size (ch))
     f78:	00183500 	andseq	r3, r8, r0, lsl #10
     f7c:	34360000 	ldrtcc	r0, [r6], #-0
     f80:	3a0e0300 	bcc	381b88 <__ccfg+0x361be0>
		chunk = m_nextp (chunk))
     f84:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f88:	0013490b 	andseq	r4, r3, fp, lsl #18
     f8c:	012e3700 			; <UNDEFINED> instruction: 0x012e3700
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f90:	0b3a0803 	bleq	e82fa4 <__ccfg+0xe62ffc>
	diag_wait (a);
     f94:	0b39053b 	bleq	e42488 <__ccfg+0xe224e0>
	diag_wchar (c, a);
     f98:	13490c27 	movtne	r0, #39975	; 0x9c27
     f9c:	01120111 	tsteq	r2, r1, lsl r1
}
     fa0:	13010a40 	movwne	r0, #6720	; 0x1a40
     fa4:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
	syserror (ESTATE, "state");
     fa8:	3a080301 	bcc	201bb4 <__ccfg+0x1e1c0c>
     fac:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     fb0:	110c270b 	tstne	ip, fp, lsl #14
     fb4:	40011201 	andmi	r1, r1, r1, lsl #4
	for (i = 0; i < MAX_UTIMERS; i++)
     fb8:	0013010a 	andseq	r0, r3, sl, lsl #2
void utimer_add (address ut) {
     fbc:	012e3900 			; <UNDEFINED> instruction: 0x012e3900
     fc0:	0b3a0e03 	bleq	e847d4 <__ccfg+0xe6482c>
		if (__pi_utims [i] == NULL)
     fc4:	0b390b3b 	bleq	e43cb8 <__ccfg+0xe23d10>
	for (i = 0; i < MAX_UTIMERS; i++)
     fc8:	0b200c27 	bleq	80406c <__ccfg+0x7e40c4>
     fcc:	00001301 	andeq	r1, r0, r1, lsl #6
		syserror (ERESOURCE, "ut a");
     fd0:	0300053a 	movweq	r0, #1338	; 0x53a
	__pi_utims [i] = ut;
     fd4:	3b0b3a08 	blcc	2cf7fc <__ccfg+0x2af854>
}
     fd8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     fdc:	3b000013 	blcc	1030 <update_n_wake+0x44>
     fe0:	0e03012e 	adfeqsp	f0, f3, #0.5
	*t = v;
     fe4:	0b3b0b3a 	bleq	ec3cd4 <__ccfg+0xea3d2c>
	TCI_RUN_AUXILIARY_TIMER;
     fe8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
void update_n_wake (word min, Boolean force) {
     fec:	0b201349 	bleq	805d18 <__ccfg+0x7e5d70>
	if (TCI_UPDATE_DELAY_TICKS (force))
     ff0:	00001301 	andeq	r1, r0, r1, lsl #6
     ff4:	0300343c 	movweq	r3, #1084	; 0x43c
     ff8:	3b0b3a08 	blcc	2cf820 <__ccfg+0x2af878>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     ffc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1000:	3d000013 	stccc	0, cr0, [r0, #-76]	; 0xffffffb4
    1004:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
    1008:	0b3b0b3a 	bleq	ec3cf8 <__ccfg+0xea3d50>
    100c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1010:	13010b20 	movwne	r0, #6944	; 0x1b20
    1014:	2e3e0000 	cdpcs	0, 3, cr0, cr14, cr0, {0}
    1018:	11133101 	tstne	r3, r1, lsl #2
    101c:	40011201 	andmi	r1, r1, r1, lsl #4
    1020:	0013010a 	andseq	r0, r3, sl, lsl #2
    1024:	00053f00 	andeq	r3, r5, r0, lsl #30
    1028:	0a021331 	beq	85cf4 <__ccfg+0x65d4c>
    102c:	1d400000 	stclne	0, cr0, [r0, #-0]
		for_all_tasks (i) {
    1030:	11133101 	tstne	r3, r1, lsl #2
	__pi_mintk = znew + min;
    1034:	58011201 	stmdapl	r1, {r0, r9, ip}
    1038:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
			if (!twaiting (i))
    103c:	4100000b 	tstmi	r0, fp
    1040:	1331011d 	teqne	r1, #1073741831	; 0x40000007
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1044:	06550152 			; <UNDEFINED> instruction: 0x06550152
    1048:	0b590b58 	bleq	1643db0 <__ccfg+0x1623e08>
    104c:	00000b57 	andeq	r0, r0, r7, asr fp
    1050:	31012e42 	tstcc	r1, r2, asr #28
    1054:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1058:	000a4001 	andeq	r4, sl, r1
    105c:	00344300 	eorseq	r4, r4, r0, lsl #6
    1060:	00001331 	andeq	r1, r0, r1, lsr r3
    1064:	01110100 	tsteq	r1, r0, lsl #2
    1068:	0b130e25 	bleq	4c4904 <__ccfg+0x4a495c>
    106c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1070:	01110655 	tsteq	r1, r5, asr r6
				wakeuptm (i);
    1074:	00000610 	andeq	r0, r0, r0, lsl r6
    1078:	0b002402 	bleq	a088 <__exidx_end+0x5334>
		for_all_tasks (i) {
    107c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
				d = i->Timer - znew;
    1080:	0300000e 	movweq	r0, #14
    1084:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1088:	0b3b0b3a 	bleq	ec3d78 <__ccfg+0xea3dd0>
		if ((word)(__pi_mintk - znew) < min) 
    108c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1090:	24040000 	strcs	r0, [r4], #-0
    1094:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	__pi_old = znew;
    1098:	0008030b 	andeq	r0, r8, fp, lsl #6
}
    109c:	000f0500 	andeq	r0, pc, r0, lsl #10
	TCI_RUN_DELAY_TIMER;
    10a0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
}
    10a4:	26060000 	strcs	r0, [r6], -r0
    10a8:	00134900 	andseq	r4, r3, r0, lsl #18
    10ac:	00150700 	andseq	r0, r5, r0, lsl #14
    10b0:	00000c27 	andeq	r0, r0, r7, lsr #24
    10b4:	03003408 	movweq	r3, #1032	; 0x408
void proceed (word state) {
    10b8:	3b0b3a0e 	blcc	2cf8f8 <__ccfg+0x2af950>
	prcdstate (__pi_curr, state);
    10bc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    10c0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
	release;
    10c4:	0900000c 	stmdbeq	r0, {r2, r3}
    10c8:	13490101 	movtne	r0, #37121	; 0x9101
void __pi_wait (aword event, word state) {
    10cc:	00001301 	andeq	r1, r0, r1, lsl #6
	sint j = nevents (__pi_curr);
    10d0:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
	if (j >= MAX_EVENTS_PER_TASK)
    10d4:	000b2f13 	andeq	r2, fp, r3, lsl pc
    10d8:	00340b00 	eorseq	r0, r4, r0, lsl #22
    10dc:	0b3a0e03 	bleq	e848f0 <__ccfg+0xe64948>
		syserror (ENEVENTS, "sw");
    10e0:	0b390b3b 	bleq	e43dd4 <__ccfg+0xe23e2c>
    10e4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; fc8 <utimer_add+0x10>
	setestate (__pi_curr->Events [j], state, event);
    10e8:	00000a02 	andeq	r0, r0, r2, lsl #20
	incwait (__pi_curr);
    10ec:	03002e0c 	movweq	r2, #3596	; 0xe0c
	setestate (__pi_curr->Events [j], state, event);
    10f0:	3b0b3a0e 	blcc	2cf930 <__ccfg+0x2af988>
}
    10f4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    10f8:	1201110c 	andne	r1, r1, #12, 2
    10fc:	000a4001 	andeq	r4, sl, r1
void __pi_trigger (aword event) {
    1100:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
	for_all_tasks (i) {
    1104:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
		for (j = 0; j < nevents (i); j++) {
    1108:	0b3b0b3a 	bleq	ec3df8 <__ccfg+0xea3e50>
    110c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1110:	01120111 	tsteq	r2, r1, lsl r1
    1114:	00000a40 	andeq	r0, r0, r0, asr #20
			if (i->Events [j] . Event == event) {
    1118:	0300340e 	movweq	r3, #1038	; 0x40e
    111c:	3b0b3a0e 	blcc	2cf95c <__ccfg+0x2af9b4>
    1120:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				wakeupev (i, j);
    1124:	00060213 	andeq	r0, r6, r3, lsl r2
    1128:	11010000 	mrsne	r0, (UNDEF: 1)
	for_all_tasks (i) {
    112c:	130e2501 	movwne	r2, #58625	; 0xe501
}
    1130:	1b0e030b 	blne	381d64 <__ccfg+0x361dbc>
aword __pi_join (aword pid, word st) {
    1134:	0006100e 	andeq	r1, r6, lr
	for_all_tasks (i) {
    1138:	00240200 	eoreq	r0, r4, r0, lsl #4
    113c:	0b3e0b0b 	bleq	f83d70 <__ccfg+0xf63dc8>
	return 0;
    1140:	00000e03 	andeq	r0, r0, r3, lsl #28
		if ((aword)i == pid) {
    1144:	03001603 	movweq	r1, #1539	; 0x603
			__pi_wait (pid, st);
    1148:	3b0b3a0e 	blcc	2cf988 <__ccfg+0x2af9e0>
}
    114c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	for_all_tasks (i) {
    1150:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1154:	0b0b0024 	bleq	2c11ec <__ccfg+0x2a1244>
void delay (word d, word state) {
    1158:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
	settstate (__pi_curr, state);
    115c:	13050000 	movwne	r0, #20480	; 0x5000
    1160:	3a0b0b01 	bcc	2c3d6c <__ccfg+0x2a3dc4>
    1164:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1168:	0013010b 	andseq	r0, r3, fp, lsl #2
	update_n_wake (d, YES);
    116c:	000d0600 	andeq	r0, sp, r0, lsl #12
    1170:	0b3a0e03 	bleq	e84984 <__ccfg+0xe649dc>
	__pi_curr->Timer = __pi_old + d;
    1174:	0b390b3b 	bleq	e43e68 <__ccfg+0xe23ec0>
    1178:	0b381349 	bleq	e05ea4 <__ccfg+0xde5efc>
	inctimer (__pi_curr);
    117c:	26070000 	strcs	r0, [r7], -r0
    1180:	00134900 	andseq	r4, r3, r0, lsl #18
    1184:	00340800 	eorseq	r0, r4, r0, lsl #16
}
    1188:	0b3a0e03 	bleq	e8499c <__ccfg+0xe649f4>
    118c:	0b390b3b 	bleq	e43e80 <__ccfg+0xe23ed8>
	if (fun == NULL)
    1190:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1074 <update_n_wake+0x88>
		return (int) __pi_curr;
    1194:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1198:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
	for_all_tasks (i)
    119c:	0a000013 	beq	11f0 <__pi_memset+0xa>
}
    11a0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		if (i->code == fun)
    11a4:	0b3b0b3a 	bleq	ec3e94 <__ccfg+0xea3eec>
	for_all_tasks (i)
    11a8:	13490b39 	movtne	r0, #39737	; 0x9b39
    11ac:	0b0d0b0b 	bleq	343de0 <__ccfg+0x323e38>
    11b0:	0b380b0c 	bleq	e03de8 <__ccfg+0xde3e40>
int __pi_strlen (const char *s) {
    11b4:	0f0b0000 	svceq	0x000b0000
	for (i = 0; *(s+i) != '\0'; i++);
    11b8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
}
    11bc:	0c000013 	stceq	0, cr0, [r0], {19}
	for (i = 0; *(s+i) != '\0'; i++);
    11c0:	13490101 	movtne	r0, #37121	; 0x9101
	while ((Boolean)(*d++ = *s++));
    11c4:	00001301 	andeq	r1, r0, r1, lsl #6
    11c8:	0000210d 	andeq	r2, r0, sp, lsl #2
    11cc:	00160e00 	andseq	r0, r6, r0, lsl #28
}
    11d0:	0b3a0e03 	bleq	e849e4 <__ccfg+0xe64a3c>
	while (n--)
    11d4:	0b39053b 	bleq	e426c8 <__ccfg+0xe22720>
    11d8:	00001349 	andeq	r1, r0, r9, asr #6
		*dest++ = *src++;
    11dc:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    11e0:	0013010c 	andseq	r0, r3, ip, lsl #2
    11e4:	00051000 	andeq	r1, r5, r0
	while (n--)
    11e8:	00001349 	andeq	r1, r0, r9, asr #6
}
    11ec:	03003411 	movweq	r3, #1041	; 0x411
		*dest++ = c;
    11f0:	3b0b3a0e 	blcc	2cfa30 <__ccfg+0x2afa88>
void adddevfunc (devreqfun_t rf, int loc) {
    11f4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		syserror (EREQPAR, "addv");
    11f8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
		syserror (ERESOURCE, "addv");
    11fc:	1200000c 	andne	r0, r0, #12
	if (ioreq [loc] != NULL)
    1200:	0b0b0113 	bleq	2c1654 <__ccfg+0x2a16ac>
    1204:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		syserror (ERESOURCE, "addv");
    1208:	13010b39 	movwne	r0, #6969	; 0x1b39
	ioreq [loc] = rf;
    120c:	0d130000 	ldceq	0, cr0, [r3, #-0]
}
    1210:	3a0e0300 	bcc	381e18 <__ccfg+0x361e70>
    1214:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
sint io (word retry, word dev, word operation, char *buf, word len) {
    1218:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    121c:	1400000b 	strne	r0, [r0], #-11
    1220:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1224:	0b3a0b0b 	bleq	e83e58 <__ccfg+0xe63eb0>
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1228:	0b39053b 	bleq	e4271c <__ccfg+0xe22774>
    122c:	00001301 	andeq	r1, r0, r1, lsl #6
    1230:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
		syserror (ENODEVICE, "io");
    1234:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1238:	00341600 	eorseq	r1, r4, r0, lsl #12
	if (len == 0)
    123c:	0b3a1347 	bleq	e85f60 <__ccfg+0xe65fb8>
	ret = (ioreq [dev]) (operation, buf, len);
    1240:	0b39053b 	bleq	e42734 <__ccfg+0xe2278c>
    1244:	00000a02 	andeq	r0, r0, r2, lsl #20
	if (ret >= 0)
    1248:	01110100 	tsteq	r1, r0, lsl #2
	if (ret == -1) {
    124c:	0b130e25 	bleq	4c4ae8 <__ccfg+0x4a4b40>
    1250:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
		if (retry == WNONE)
    1254:	01110655 	tsteq	r1, r5, asr r6
		iowait (dev, operation, retry);
    1258:	00000610 	andeq	r0, r0, r0, lsl r6
    125c:	0b002402 	bleq	a26c <__exidx_end+0x5518>
    1260:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
			release;
    1264:	0300000e 	movweq	r0, #14
	if (ret == -2) {
    1268:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
		if (retry != WNONE) {
    126c:	0b3b0b3a 	bleq	ec3f5c <__ccfg+0xea3fb4>
    1270:	13490b39 	movtne	r0, #39737	; 0x9b39
			iowait (dev, operation, retry);
    1274:	24040000 	strcs	r0, [r4], #-0
    1278:	3e0b0b00 	vmlacc.f64	d0, d11, d0
			(ioreq [dev]) (NONE, buf, len);
    127c:	0008030b 	andeq	r0, r8, fp, lsl #6
    1280:	00260500 	eoreq	r0, r6, r0, lsl #10
    1284:	00001349 	andeq	r1, r0, r9, asr #6
		(ioreq [dev]) (NONE, buf, len);
    1288:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
    128c:	07000013 	smladeq	r0, r3, r0, r0
    1290:	0b0b000f 	bleq	2c12d4 <__ccfg+0x2a132c>
}
    1294:	00001349 	andeq	r1, r0, r9, asr #6
	if (retry != WNONE) {
    1298:	0b011308 	bleq	45ec0 <__ccfg+0x25f18>
		delay (-ret - 2, retry);
    129c:	3b0b3a0b 	blcc	2cfad0 <__ccfg+0x2afb28>
    12a0:	010b390b 	tsteq	fp, fp, lsl #18
    12a4:	09000013 	stmdbeq	r0, {r0, r1, r4}
    12a8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		release;
    12ac:	0b3b0b3a 	bleq	ec3f9c <__ccfg+0xea3ff4>
    12b0:	13490b39 	movtne	r0, #39737	; 0x9b39
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    12b4:	0b0d0b0b 	bleq	343ee8 <__ccfg+0x323f40>
    12b8:	0b380b0c 	bleq	e03ef0 <__ccfg+0xde3f48>
    12bc:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    12c0:	3a0e0300 	bcc	381ec8 <__ccfg+0x361f20>
    12c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		syserror (ERESOURCE, "mal1");
    12c8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    12cc:	0b00000b 	bleq	1300 <__pi_malloc_init+0x4c>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    12d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    12d4:	0b3b0b3a 	bleq	ec3fc4 <__ccfg+0xea401c>
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12d8:	13490b39 	movtne	r0, #39737	; 0x9b39
	m_size (mpools [0]) = mlen - m_hdrlen;
    12dc:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12e0:	010c0000 	mrseq	r0, (UNDEF: 12)
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12e4:	01134901 	tsteq	r3, r1, lsl #18
    12e8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
}
    12ec:	00000021 	andeq	r0, r0, r1, lsr #32
    12f0:	0300160e 	movweq	r1, #1550	; 0x60e
    12f4:	3b0b3a0e 	blcc	2cfb34 <__ccfg+0x2afb8c>
    12f8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    12fc:	0f000013 	svceq	0x00000013
    1300:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
void __pi_free (aword *ch) {
    1304:	00001301 	andeq	r1, r0, r1, lsl #6
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1308:	49000510 	stmdbmi	r0, {r4, r8, sl}
    130c:	11000013 	tstne	r0, r3, lsl r0
		syserror (EMALLOC, "malg");
    1310:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1314:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	mcfree [MA_NP] += m_size (ch);
    1318:	13490b39 	movtne	r0, #39737	; 0x9b39
		m_size (ch) ^= MALLOC_UMASK;
    131c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1320:	13120000 	tstne	r2, #0
	mcfree [MA_NP] += m_size (ch);
    1324:	3a0b0b01 	bcc	2c3f30 <__ccfg+0x2a3f88>
	QFREE;
    1328:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (mevent [MA_NP] . nwait) {
    132c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1330:	000d1300 	andeq	r1, sp, r0, lsl #6
		trigger ((aword)(&(mevent [MA_NP])));
    1334:	0b3a0e03 	bleq	e84b48 <__ccfg+0xe64ba0>
		mevent [MA_NP] . nwait --;
    1338:	0b39053b 	bleq	e4282c <__ccfg+0xe22884>
}
    133c:	0b381349 	bleq	e06068 <__ccfg+0xde60c0>
    1340:	13140000 	tstne	r4, #0
    1344:	0b0e0301 	bleq	381f50 <__ccfg+0x361fa8>
    1348:	3b0b3a0b 	blcc	2cfb7c <__ccfg+0x2afbd4>
void kill (aword pid) {
    134c:	010b3905 	tsteq	fp, r5, lsl #18
		pid = (aword) __pi_curr;
    1350:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
	j = NULL;
    1354:	13490021 	movtne	r0, #36897	; 0x9021
	for_all_tasks (i) {
    1358:	00000b2f 	andeq	r0, r0, pc, lsr #22
	syserror (EREQPAR, "kpi");
    135c:	47003416 	smladmi	r0, r6, r4, r3
    1360:	3b0b3a13 	blcc	2cfbb4 <__ccfg+0x2afc0c>
		if ((aword)i == pid) {
    1364:	020b390b 	andeq	r3, fp, #180224	; 0x2c000
    1368:	1700000a 	strne	r0, [r0, -sl]
				__PCB = i->Next;
    136c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 12bc <__pi_malloc_init+0x8>
			killev (i);
    1370:	0b3a0e03 	bleq	e84b84 <__ccfg+0xe64bdc>
			ufree (i);
    1374:	0b390b3b 	bleq	e44068 <__ccfg+0xe240c0>
			if (i == __pi_curr)
    1378:	01110c27 	tsteq	r1, r7, lsr #24
    137c:	0a400112 	beq	10017cc <__ccfg+0xfe1824>
				release;
    1380:	00001301 	andeq	r1, r0, r1, lsl #6
				j->Next = i->Next;
    1384:	03000518 	movweq	r0, #1304	; 0x518
    1388:	3b0b3a08 	blcc	2cfbb0 <__ccfg+0x2afc08>
    138c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
}
    1390:	00060213 	andeq	r0, r6, r3, lsl r2
    1394:	00051900 	andeq	r1, r5, r0, lsl #18
    1398:	0b3a0e03 	bleq	e84bac <__ccfg+0xe64c04>
	if (size < 8)
    139c:	0b390b3b 	bleq	e44090 <__ccfg+0xe240e8>
		_size = 2;
    13a0:	06021349 	streq	r1, [r2], -r9, asr #6
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13a4:	341a0000 	ldrcc	r0, [sl], #-0
		_size = (((aword)size) + 3) >> 2;
    13a8:	3a080300 	bcc	201fb0 <__ccfg+0x1e2008>
		if (m_magic (chunk) != MALLOC_MAGIC)
    13ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		_size = (((aword)size) + 3) >> 2;
    13b0:	0013490b 	andseq	r4, r3, fp, lsl #18
		if (mevent [MA_NP] . nfail != 255)
    13b4:	00341b00 	eorseq	r1, r4, r0, lsl #22
    13b8:	0b3a0803 	bleq	e833cc <__ccfg+0xe63424>
			mevent [MA_NP] . nfail ++;
    13bc:	0b390b3b 	bleq	e440b0 <__ccfg+0xe24108>
		mnfree [MA_NP] = 0;
    13c0:	06021349 	streq	r1, [r2], -r9, asr #6
    13c4:	1d1c0000 	ldcne	0, cr0, [ip, #-0]
		if (m_magic (chunk) != MALLOC_MAGIC)
    13c8:	11133100 	tstne	r3, r0, lsl #2
    13cc:	58011201 	stmdapl	r1, {r0, r9, ip}
			syserror (EMALLOC, "malc");
    13d0:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    13d4:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
		if (m_size (chunk) >= _size)
    13d8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    13dc:	06550152 			; <UNDEFINED> instruction: 0x06550152
		chunk = m_nextp (chunk)) {
    13e0:	0b590b58 	bleq	1644148 <__ccfg+0x16241a0>
		m_setnextp (cc, m_nextp (chunk));
    13e4:	00000b57 	andeq	r0, r0, r7, asr fp
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    13e8:	3100051e 	tstcc	r0, lr, lsl r5
    13ec:	00060213 	andeq	r0, r6, r3, lsl r2
			m_size (chunk) = _size;
    13f0:	002e1f00 	eoreq	r1, lr, r0, lsl #30
			cc = chunk + _size + m_hdrlen;
    13f4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    13f8:	0b3b0b3a 	bleq	ec40e8 <__ccfg+0xea4140>
			m_size (cc) = waste - m_hdrlen;
    13fc:	01110b39 	tsteq	r1, r9, lsr fp
			QFREE;
    1400:	0a400112 	beq	1001850 <__ccfg+0xfe18a8>
		mevent [MA_NP] . nfail = 0;
    1404:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
		mcfree [MA_NP] -= m_size (chunk);
    1408:	3a0e0300 	bcc	382010 <__ccfg+0x362068>
    140c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1410:	200c270b 	andcs	r2, ip, fp, lsl #14
    1414:	2100000b 	tstcs	r0, fp
		m_size (chunk) |= MALLOC_UMASK;
    1418:	0e03012e 	adfeqsp	f0, f3, #0.5
		if (mnfree [MA_NP] > mcfree [MA_NP])
    141c:	0b3b0b3a 	bleq	ec410c <__ccfg+0xea4164>
		m_size (chunk) |= MALLOC_UMASK;
    1420:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			mnfree [MA_NP] = mcfree [MA_NP];
    1424:	0b201349 	bleq	806150 <__ccfg+0x7e61a8>
}
    1428:	05220000 	streq	r0, [r2, #-0]!
    142c:	3a0e0300 	bcc	382034 <__ccfg+0x36208c>
    1430:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1434:	0013490b 	andseq	r4, r3, fp, lsl #18
    1438:	11010000 	mrsne	r0, (UNDEF: 1)
    143c:	130e2501 	movwne	r2, #58625	; 0xe501
    1440:	1b0e030b 	blne	382074 <__ccfg+0x3620cc>
aword __pi_fork (fsmcode func, aword data) {
    1444:	1106550e 	tstne	r6, lr, lsl #10
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1448:	00061001 	andeq	r1, r6, r1
    144c:	00240200 	eoreq	r0, r4, r0, lsl #4
    1450:	0b3e0b0b 	bleq	f84084 <__ccfg+0xf640dc>
		if ((j = __PCB) == NULL)
    1454:	00000e03 	andeq	r0, r0, r3, lsl #28
	i->Next = NULL;
    1458:	03001603 	movweq	r1, #1539	; 0x603
	i->data = data;
    145c:	3b0b3a0e 	blcc	2cfc9c <__ccfg+0x2afcf4>
		if ((j = __PCB) == NULL)
    1460:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
}
    1464:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
			for (; j->Next != NULL; j = j->Next);
    1468:	0b0b0024 	bleq	2c1500 <__ccfg+0x2a1558>
    146c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
	return (aword) i;
    1470:	26050000 	strcs	r0, [r5], -r0
    1474:	00134900 	andseq	r4, r3, r0, lsl #18
	if (mevent [MA_NP] . nwait != 255)
    1478:	00350600 	eorseq	r0, r5, r0, lsl #12
    147c:	00001349 	andeq	r1, r0, r9, asr #6
    1480:	0b011307 	bleq	460a4 <__ccfg+0x260fc>
		mevent [MA_NP] . nwait ++;
    1484:	3b0b3a0b 	blcc	2cfcb8 <__ccfg+0x2afd10>
	wait ((aword)(&(mevent [MA_NP])), state);
    1488:	010b390b 	tsteq	fp, fp, lsl #18
    148c:	08000013 	stmdaeq	r0, {r0, r1, r4}
void diag (const char *mess, ...) {
    1490:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1494:	0b3b0b3a 	bleq	ec4184 <__ccfg+0xea41dc>
    1498:	13490b39 	movtne	r0, #39737	; 0x9b39
	diag_disable_int (a, is);
    149c:	0b0d0b0b 	bleq	3440d0 <__ccfg+0x324128>
    14a0:	0b380b0c 	bleq	e040d8 <__ccfg+0xde4130>
    14a4:	0d090000 	stceq	0, cr0, [r9, #-0]
				d = (bc == 16) ? 10000 : 1000000000;
    14a8:	3a0e0300 	bcc	3820b0 <__ccfg+0x362108>
	diag_disable_int (a, is);
    14ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	while (*mess != '\0') {
    14b0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
	dgout ('\r');
    14b4:	0a00000b 	beq	14e8 <diag+0x58>
	dgout ('\n');
    14b8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    14bc:	0b3b0b3a 	bleq	ec41ac <__ccfg+0xea4204>
    14c0:	13490b39 	movtne	r0, #39737	; 0x9b39
	diag_wait (a);
    14c4:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	diag_enable_int (a, is);
    14c8:	0f0b0000 	svceq	0x000b0000
    14cc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
}
    14d0:	0c000013 	stceq	0, cr0, [r0], {19}
    14d4:	13490101 	movtne	r0, #37121	; 0x9101
    14d8:	00001301 	andeq	r1, r0, r1, lsl #6
		if (*mess == '%') {
    14dc:	0000210d 	andeq	r2, r0, sp, lsl #2
    14e0:	00160e00 	andseq	r0, r6, r0, lsl #28
			if (*mess == 'l') {
    14e4:	0b3a0e03 	bleq	e84cf8 <__ccfg+0xe64d50>
    14e8:	0b39053b 	bleq	e429dc <__ccfg+0xe22a34>
				mess++;
    14ec:	00001349 	andeq	r1, r0, r9, asr #6
				val = va_arg (ap, lword);
    14f0:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
				bc = 32;
    14f4:	0013010c 	andseq	r0, r3, ip, lsl #2
				bc = 16;
    14f8:	00051000 	andeq	r1, r5, r0
			switch (*mess) {
    14fc:	00001349 	andeq	r1, r0, r9, asr #6
    1500:	03003411 	movweq	r3, #1041	; 0x411
    1504:	3b0b3a0e 	blcc	2cfd44 <__ccfg+0x2afd9c>
				dgout ('%');
    1508:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    150c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
				dgout (*mess);
    1510:	1200000c 	andne	r0, r0, #12
    1514:	0b0b0113 	bleq	2c1968 <__ccfg+0x2a19c0>
			switch (*mess) {
    1518:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
					v = __pi_hex_enc_table [
    151c:	13010b39 	movwne	r0, #6969	; 0x1b39
					i += 4;
    1520:	0d130000 	ldceq	0, cr0, [r3, #-0]
					(val >> (bc - i)) & 0xf];
    1524:	3a0e0300 	bcc	38212c <__ccfg+0x362184>
    1528:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
					dgout (v);
    152c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1530:	1400000b 	strne	r0, [r0], #-11
				while (i < bc) {
    1534:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
			mess++;
    1538:	0b3a0b0b 	bleq	e8416c <__ccfg+0xe641c4>
					d /= 10;
    153c:	0b39053b 	bleq	e42a30 <__ccfg+0xe22a88>
				if ((val >> (bc - 1)) & 1) {
    1540:	00001301 	andeq	r1, r0, r1, lsl #6
    1544:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
					dgout ('-');
    1548:	000b2f13 	andeq	r2, fp, r3, lsl pc
    154c:	00341600 	eorseq	r1, r4, r0, lsl #12
						val |= 0xffff0000;
    1550:	0b3a0e03 	bleq	e84d64 <__ccfg+0xe64dbc>
    1554:	0b390b3b 	bleq	e44248 <__ccfg+0xe242a0>
    1558:	0a021349 	beq	86284 <__ccfg+0x662dc>
				d = (bc == 16) ? 10000 : 1000000000;
    155c:	34170000 	ldrcc	r0, [r7], #-0
    1560:	3a134700 	bcc	4d3168 <__ccfg+0x4b31c0>
    1564:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					v = (word) (val / d);
    1568:	000a020b 	andeq	r0, sl, fp, lsl #4
					if (v || d == 1) break;
    156c:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
    1570:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
					d /= 10;
    1574:	0b3b0b3a 	bleq	ec4264 <__ccfg+0xea42bc>
				d = (bc == 16) ? 10000 : 1000000000;
    1578:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
					dgout (v + '0');
    157c:	01120111 	tsteq	r2, r1, lsl r1
    1580:	13010a40 	movwne	r0, #6720	; 0x1a40
    1584:	05190000 	ldreq	r0, [r9, #-0]
					d /= 10;
    1588:	3a080300 	bcc	202190 <__ccfg+0x1e21e8>
					val = val - (v * d);
    158c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					if (d == 0) break;
    1590:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
					v = (word) (val / d);
    1594:	1a000006 	bne	15b4 <diag+0x124>
    1598:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
				if (bc == 16)
    159c:	0b3b0b3a 	bleq	ec428c <__ccfg+0xea42e4>
				d = (bc == 16) ? 10000 : 1000000000;
    15a0:	13490b39 	movtne	r0, #39737	; 0x9b39
					val &= 0xffff;
    15a4:	00000602 	andeq	r0, r0, r2, lsl #12
					dgout (*s);
    15a8:	03000a1b 	movweq	r0, #2587	; 0xa1b
					s++;
    15ac:	3b0b3a0e 	blcc	2cfdec <__ccfg+0x2afe44>
				while (*s != '\0') {
    15b0:	110b390b 	tstne	fp, fp, lsl #18
    15b4:	1c000001 	stcne	0, cr0, [r0], {1}
			dgout (*mess++);
    15b8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    15bc:	06550152 			; <UNDEFINED> instruction: 0x06550152
    15c0:	0b590b58 	bleq	1644328 <__ccfg+0x1624380>
    15c4:	13010b57 	movwne	r0, #6999	; 0x1b57
    15c8:	051d0000 	ldreq	r0, [sp, #-0]
	__pi_seed = __pi_seed * 1103515245 + 12345;
    15cc:	00133100 	andseq	r3, r3, r0, lsl #2
    15d0:	011d1e00 	tsteq	sp, r0, lsl #28
    15d4:	01521331 	cmpeq	r2, r1, lsr r3
    15d8:	0b580655 	bleq	1602f34 <__ccfg+0x15e2f8c>
	^ entropy
    15dc:	0b570b59 	bleq	15c4348 <__ccfg+0x15a43a0>
}
    15e0:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    15e4:	3a0e0301 	bcc	3821f0 <__ccfg+0x362248>
    15e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15ec:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    15f0:	000b2013 	andeq	r2, fp, r3, lsl r0
	word cs = size + hblenb;
    15f4:	00052000 	andeq	r2, r5, r0
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    15f8:	0b3a0e03 	bleq	e84e0c <__ccfg+0xe64e64>
    15fc:	0b390b3b 	bleq	e442f0 <__ccfg+0xe24348>
	p -> length = size;
    1600:	00001349 	andeq	r1, r0, r9, asr #6
}
    1604:	01110100 	tsteq	r1, r0, lsl #2
	if (p->attributes.b.queued) {
    1608:	0b130e25 	bleq	4c4ea4 <__ccfg+0x4a4efc>
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    160c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1610:	01110655 	tsteq	r1, r5, asr r6
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1614:	00000610 	andeq	r0, r0, r0, lsl r6
		p->attributes.b.queued = 0;
    1618:	0b002402 	bleq	a628 <__exidx_end+0x58d4>
    161c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1620:	0300000e 	movweq	r0, #14
	deq (p);	// Remove from queue
    1624:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
}
    1628:	0b3b0b3a 	bleq	ec4318 <__ccfg+0xea4370>
	tfree ((address)p);
    162c:	13490b39 	movtne	r0, #39737	; 0x9b39
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1630:	24040000 	strcs	r0, [r4], #-0
    1634:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1638:	0008030b 	andeq	r0, r8, fp, lsl #6
	sysassert (p->attributes.b.queued == 0, "tcv01");
    163c:	00260500 	eoreq	r0, r6, r0, lsl #10
    1640:	00001349 	andeq	r1, r0, r9, asr #6
	if (q_empty (q))
    1644:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
    1648:	07000013 	smladeq	r0, r3, r0, r0
		trigger (q);
    164c:	0b0b0113 	bleq	2c1aa0 <__ccfg+0x2a1af8>
	if (p->attributes.b.urgent) {
    1650:	0b3b0b3a 	bleq	ec4340 <__ccfg+0xea4398>
		p->u.bqueue.next = q->next;
    1654:	13010b39 	movwne	r0, #6969	; 0x1b39
		p->u.bqueue.prev = q;
    1658:	0d080000 	stceq	0, cr0, [r8, #-0]
		q->next->prev = (qitem_t*) p;
    165c:	3a0e0300 	bcc	382264 <__ccfg+0x3622bc>
	p->attributes.b.queued = 1;
    1660:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1664:	0b13490b 	bleq	4d3a98 <__ccfg+0x4b3af0>
}
    1668:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
		p->u.bqueue.prev = q->prev;
    166c:	000b380b 	andeq	r3, fp, fp, lsl #16
		q->prev->next = (qitem_t*) p;
    1670:	000d0900 	andeq	r0, sp, r0, lsl #18
		q->prev = (qitem_t*) p;
    1674:	0b3a0e03 	bleq	e84e88 <__ccfg+0xe64ee0>
    1678:	0b390b3b 	bleq	e4436c <__ccfg+0xe243c4>
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    167c:	0b381349 	bleq	e063a8 <__ccfg+0xde6400>
	deq (p);	// Soft dequeue, timer and hook left intact
    1680:	340a0000 	strcc	r0, [sl], #-0
	switch (dv) {
    1684:	3a0e0300 	bcc	38228c <__ccfg+0x3622e4>
    1688:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    168c:	3f13490b 	svccc	0x0013490b
    1690:	000c3c0c 	andeq	r3, ip, ip, lsl #24
			p->attributes.b.urgent = 1;
    1694:	000f0b00 	andeq	r0, pc, r0, lsl #22
    1698:	13490b0b 	movtne	r0, #39691	; 0x9b0b
			verify_ses (p, "dispose ses");
    169c:	010c0000 	mrseq	r0, (UNDEF: 12)
    16a0:	01134901 	tsteq	r3, r1, lsl #18
    16a4:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    16a8:	00000021 	andeq	r0, r0, r1, lsr #32
    16ac:	0300160e 	movweq	r1, #1550	; 0x60e
			verify_phy (p, "dispose phy");
    16b0:	3b0b3a0e 	blcc	2cfef0 <__ccfg+0x2aff48>
    16b4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
}
    16b8:	0f000013 	svceq	0x00000013
			enq (oqueues [p->attributes.b.phys], p);
    16bc:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
			p->attributes.b.urgent = 1;
    16c0:	00001301 	andeq	r1, r0, r1, lsl #6
    16c4:	49000510 	stmdbmi	r0, {r4, r8, sl}
			verify_phy (p, "dispose phy");
    16c8:	11000013 	tstne	r0, r3, lsl r0
    16cc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    16d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    16d4:	13490b39 	movtne	r0, #39737	; 0x9b39
    16d8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    16dc:	13120000 	tstne	r2, #0
			enq (oqueues [p->attributes.b.phys], p);
    16e0:	3a0b0b01 	bcc	2c42ec <__ccfg+0x2a4344>
    16e4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    16e8:	0013010b 	andseq	r0, r3, fp, lsl #2
			rlp (p);
    16ec:	000d1300 	andeq	r1, sp, r0, lsl #6
}
    16f0:	0b3a0e03 	bleq	e84f04 <__ccfg+0xe64f5c>
    16f4:	0b39053b 	bleq	e42be8 <__ccfg+0xe22c40>
    16f8:	0b381349 	bleq	e06424 <__ccfg+0xde647c>
    16fc:	13140000 	tstne	r4, #0
    1700:	0b0e0301 	bleq	38230c <__ccfg+0x362364>
    1704:	3b0b3a0b 	blcc	2cff38 <__ccfg+0x2aff90>
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1708:	010b3905 	tsteq	fp, r5, lsl #18
	if (b->attributes.b.outgoing) {
    170c:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
	b = header (p);
    1710:	13490021 	movtne	r0, #36897	; 0x9021
	if (b->attributes.b.outgoing) {
    1714:	00000b2f 	andeq	r0, r0, pc, lsr #22
		verify_ses (b, "tcv02");
    1718:	03003416 	movweq	r3, #1046	; 0x416
    171c:	3b0b3a0e 	blcc	2cff5c <__ccfg+0x2affb4>
    1720:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1724:	000a0213 	andeq	r0, sl, r3, lsl r2
    1728:	002e1700 	eoreq	r1, lr, r0, lsl #14
		verify_plg (b, tcv_out, "tcv03");
    172c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1730:	0b3b0b3a 	bleq	ec4420 <__ccfg+0xea4478>
    1734:	01110b39 	tsteq	r1, r9, lsr fp
    1738:	0a400112 	beq	1001b88 <__ccfg+0xfe1be0>
    173c:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
    1740:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1744:	3b0b3a0e 	blcc	2cff84 <__ccfg+0x2affdc>
    1748:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    174c:	1113490c 	tstne	r3, ip, lsl #18
		dispose (b, plugins [b->attributes.b.plugin] ->
    1750:	40011201 	andmi	r1, r1, r1, lsl #4
}
    1754:	0013010a 	andseq	r0, r3, sl, lsl #2
		dispose (b, plugins [b->attributes.b.plugin] ->
    1758:	00051900 	andeq	r1, r5, r0, lsl #18
		rlp (b);
    175c:	0b3a0803 	bleq	e83770 <__ccfg+0xe637c8>
}
    1760:	0b390b3b 	bleq	e44454 <__ccfg+0xe244ac>
		rlp (b);
    1764:	06021349 	streq	r1, [r2], -r9, asr #6
    1768:	051a0000 	ldreq	r0, [sl, #-0]
    176c:	3a080300 	bcc	202374 <__ccfg+0x1e23cc>
    1770:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1774:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1778:	1b00000a 	blne	17a8 <tcv_open+0x30>
    177c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 16cc <dispose+0x50>
    1780:	0b3a0e03 	bleq	e84f94 <__ccfg+0xe64fec>
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1784:	0b39053b 	bleq	e42c78 <__ccfg+0xe22cd0>
	va_start (ap, plid);
    1788:	13490c27 	movtne	r0, #39975	; 0x9c27
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    178c:	01120111 	tsteq	r2, r1, lsl r1
    1790:	13010a40 	movwne	r0, #6720	; 0x1a40
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1794:	051c0000 	ldreq	r0, [ip, #-0]
    1798:	3a080300 	bcc	2023a0 <__ccfg+0x1e23f8>
    179c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    17a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			syserror (ENODEVICE, "tcv04");
    17a4:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
		syserror (EMALLOC, "tcv05");
    17a8:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 16f8 <dispose+0x7c>
	attp.b.outgoing = 1;
    17ac:	0b3a0e03 	bleq	e84fc0 <__ccfg+0xe65018>
    17b0:	0b39053b 	bleq	e42ca4 <__ccfg+0xe22cfc>
    17b4:	01120111 	tsteq	r2, r1, lsl r1
    17b8:	00000a40 	andeq	r0, r0, r0, asr #20
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    17bc:	0300341e 	movweq	r3, #1054	; 0x41e
		if (descriptors [fd] == NULL)
    17c0:	3b0b3a08 	blcc	2cffe8 <__ccfg+0x2b0040>
    17c4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    17c8:	00060213 	andeq	r0, r6, r3, lsl r2
		return ERROR;
    17cc:	000a1f00 	andeq	r1, sl, r0, lsl #30
}
    17d0:	0b3a0e03 	bleq	e84fe4 <__ccfg+0xe6503c>
    17d4:	0b39053b 	bleq	e42cc8 <__ccfg+0xe22d20>
    17d8:	00000111 	andeq	r0, r0, r1, lsl r1
	s->attpattern.b.session = fd;
    17dc:	31011d20 	tstcc	r1, r0, lsr #26
    17e0:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
	descriptors [fd] = s;
    17e4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
	q_init (&(s->rqueue));
    17e8:	010b5705 	tsteq	fp, r5, lsl #14
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    17ec:	21000013 	tstcs	r0, r3, lsl r0
    17f0:	13310005 	teqne	r1, #5
    17f4:	1d220000 	stcne	0, cr0, [r2, #-0]
    17f8:	11133101 	tstne	r3, r1, lsl #2
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    17fc:	58011201 	stmdapl	r1, {r0, r9, ip}
    1800:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    1804:	2300000b 	movwcs	r0, #11
	descriptors [fd] = s;
    1808:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    180c:	0b3b0b3a 	bleq	ec44fc <__ccfg+0xea4554>
    1810:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (s == NULL)
    1814:	00000602 	andeq	r0, r0, r2, lsl #12
		syserror (EMALLOC, "tcv05");
    1818:	03000a24 	movweq	r0, #2596	; 0xa24
    181c:	3b0b3a0e 	blcc	2d005c <__ccfg+0x2b00b4>
    1820:	110b390b 	tstne	fp, fp, lsl #18
    1824:	25000001 	strcs	r0, [r0, #-1]
    1828:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    182c:	06550152 			; <UNDEFINED> instruction: 0x06550152
    1830:	0b590b58 	bleq	1644598 <__ccfg+0x16245f0>
    1834:	00000b57 	andeq	r0, r0, r7, asr fp
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1838:	31000526 	tstcc	r0, r6, lsr #10
	    (plugins [ord] != NULL && plugins [ord] != pl))
    183c:	00060213 	andeq	r0, r6, r3, lsl r2
    1840:	011d2700 	tsteq	sp, r0, lsl #14
    1844:	01521331 	cmpeq	r2, r1, lsr r3
	plugins [ord] = pl;
    1848:	0b580655 	bleq	16031a4 <__ccfg+0x15e31fc>
	return 0;
    184c:	0b570b59 	bleq	15c45b8 <__ccfg+0x15a4610>
		return ERROR;
    1850:	00001301 	andeq	r1, r0, r1, lsl #6
}
    1854:	31011d28 	tstcc	r1, r8, lsr #26
    1858:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	verify_fds (fd, "tcv10");
    185c:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    1860:	000b570b 	andeq	r5, fp, fp, lsl #14
	verify_fds (fd, "tcv10");
    1864:	002e2900 	eoreq	r2, lr, r0, lsl #18
    1868:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    186c:	0b3b0b3a 	bleq	ec455c <__ccfg+0xea45b4>
	verify_plg (b, tcv_frm, "tcv11");
    1870:	13490b39 	movtne	r0, #39737	; 0x9b39
	b = q_first (rq);
    1874:	01120111 	tsteq	r2, r1, lsl r1
	if (q_end (b, rq)) {
    1878:	00000a40 	andeq	r0, r0, r0, asr #20
		if (state != WNONE) {
    187c:	03012e2a 	movweq	r2, #7722	; 0x1e2a
    1880:	3b0b3a0e 	blcc	2d00c0 <__ccfg+0x2b0118>
			when (rq, state);
    1884:	110b390b 	tstne	fp, fp, lsl #18
			release;
    1888:	40011201 	andmi	r1, r1, r1, lsl #4
	deq (b);	// Dequeue the packet ...
    188c:	0013010a 	andseq	r0, r3, sl, lsl #2
    1890:	002e2b00 	eoreq	r2, lr, r0, lsl #22
	p = ((address)(b + 1));
    1894:	0b3a0e03 	bleq	e850a8 <__ccfg+0xe65100>
	verify_plg (b, tcv_frm, "tcv11");
    1898:	0b390b3b 	bleq	e4458c <__ccfg+0xe245e4>
    189c:	00000b20 	andeq	r0, r0, r0, lsr #22
    18a0:	03012e2c 	movweq	r2, #7724	; 0x1e2c
    18a4:	3b0b3a0e 	blcc	2d00e4 <__ccfg+0x2b013c>
    18a8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    18ac:	1201110c 	andne	r1, r1, #12, 2
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    18b0:	010a4001 	tsteq	sl, r1
    18b4:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
		b->length - b->u.pointers.head - b->u.pointers.tail;
    18b8:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    18bc:	342e0000 	strtcc	r0, [lr], #-0
	b->u.pointers.tail =
    18c0:	02133100 	andseq	r3, r3, #0, 2
}
    18c4:	2f000006 	svccs	0x00000006
		return NULL;
    18c8:	0e03012e 	adfeqsp	f0, f3, #0.5
    18cc:	0b3b0b3a 	bleq	ec45bc <__ccfg+0xea4614>
    18d0:	13490b39 	movtne	r0, #39737	; 0x9b39
    18d4:	13010b20 	movwne	r0, #6944	; 0x1b20
    18d8:	34300000 	ldrtcc	r0, [r0], #-0
	verify_fds (fd, "tcv16");
    18dc:	3a080300 	bcc	2024e4 <__ccfg+0x1e253c>
								Boolean urg) {
    18e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    18e4:	0013490b 	andseq	r4, r3, fp, lsl #18
	verify_fds (fd, "tcv16");
    18e8:	012e3100 			; <UNDEFINED> instruction: 0x012e3100
    18ec:	0b3a0e03 	bleq	e85100 <__ccfg+0xe65158>
    18f0:	0b390b3b 	bleq	e445e4 <__ccfg+0xe2463c>
	verify_pld (s, tcv_frm, "tcv17");
    18f4:	0b200c27 	bleq	804998 <__ccfg+0x7e49f0>
    18f8:	00001301 	andeq	r1, r0, r1, lsl #6
    18fc:	03000532 	movweq	r0, #1330	; 0x532
    1900:	3b0b3a08 	blcc	2d0128 <__ccfg+0x2b0180>
    1904:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1908:	33000013 	movwcc	r0, #19
    190c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1910:	01120111 	tsteq	r2, r1, lsl r1
	ptrs.head = (word) fd;
    1914:	0b590b58 	bleq	164467c <__ccfg+0x16246d4>
	ptrs.tail = (word) urg;
    1918:	13010b57 	movwne	r0, #6999	; 0x1b57
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    191c:	2e340000 	cdpcs	0, 3, cr0, cr4, cr0, {0}
    1920:	3a0e0301 	bcc	38252c <__ccfg+0x362584>
		if (state != WNONE) {
    1924:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1928:	1113490b 	tstne	r3, fp, lsl #18
}
    192c:	40011201 	andmi	r1, r1, r1, lsl #4
			when (eid, state);
    1930:	0013010a 	andseq	r0, r3, sl, lsl #2
    1934:	00343500 	eorseq	r3, r4, r0, lsl #10
			release;
    1938:	0b3a0803 	bleq	e8394c <__ccfg+0xe639a4>
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    193c:	0b390b3b 	bleq	e44630 <__ccfg+0xe24688>
    1940:	06021349 	streq	r1, [r2], -r9, asr #6
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    1944:	2e360000 	cdpcs	0, 3, cr0, cr6, cr0, {0}
    1948:	3a0e0301 	bcc	382554 <__ccfg+0x3625ac>
    194c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1950:	200c270b 	andcs	r2, ip, fp, lsl #14
    1954:	0013010b 	andseq	r0, r3, fp, lsl #2
    1958:	00053700 	andeq	r3, r5, r0, lsl #14
		if (state != WNONE) {
    195c:	0b3a0e03 	bleq	e85170 <__ccfg+0xe651c8>
    1960:	0b39053b 	bleq	e42e54 <__ccfg+0xe22eac>
			tmwait (state);
    1964:	00001349 	andeq	r1, r0, r9, asr #6
    1968:	03012e38 	movweq	r2, #7736	; 0x1e38
	b->attributes = s->attpattern;
    196c:	3b0b3a0e 	blcc	2d01ac <__ccfg+0x2b0204>
		b->attributes.b.urgent = 1;
    1970:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1974:	2013490c 	andscs	r4, r3, ip, lsl #18
	b->u.pointers.head = ptrs.head;
    1978:	0013010b 	andseq	r0, r3, fp, lsl #2
	b->u.pointers.tail = length;
    197c:	00053900 	andeq	r3, r5, r0, lsl #18
	return (address) (b + 1);
    1980:	0b3a0e03 	bleq	e85194 <__ccfg+0xe651ec>
    1984:	0b390b3b 	bleq	e44678 <__ccfg+0xe246d0>
    1988:	00001349 	andeq	r1, r0, r9, asr #6
    198c:	31012e3a 	tstcc	r1, sl, lsr lr
    1990:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1994:	000a4001 	andeq	r4, sl, r1
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1998:	001d3b00 	andseq	r3, sp, r0, lsl #22
    199c:	01111331 	tsteq	r1, r1, lsr r3
    19a0:	0b580112 	bleq	1601df0 <__ccfg+0x15e1e48>
	verify_fph (phy, "tcv23");
    19a4:	0b570b59 	bleq	15c4710 <__ccfg+0x15a4768>
    19a8:	01000000 	mrseq	r0, (UNDEF: 0)
    19ac:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    19b0:	0e030b13 	vmoveq.32	d3[0], r0
}
    19b4:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
	return (physical [phy]) (opt, arg);
    19b8:	06100111 			; <UNDEFINED> instruction: 0x06100111
    19bc:	24020000 	strcs	r0, [r2], #-0
    19c0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    19c4:	000e030b 	andeq	r0, lr, fp, lsl #6
	if (opt < 0) {
    19c8:	00160300 	andseq	r0, r6, r0, lsl #6
		if (fd < 0)
    19cc:	0b3a0e03 	bleq	e851e0 <__ccfg+0xe65238>
		if (opt == PHYSOPT_PLUGINFO) {
    19d0:	0b390b3b 	bleq	e446c4 <__ccfg+0xe2471c>
			if (fd >= TCV_MAX_PLUGS)
    19d4:	00001349 	andeq	r1, r0, r9, asr #6
			if ((p = plugins [fd]) == NULL)
    19d8:	0b002404 	bleq	a9f0 <__exidx_end+0x5c9c>
    19dc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
}
    19e0:	05000008 	streq	r0, [r0, #-8]
		if (fd >= TCV_MAX_PHYS)
    19e4:	13490026 	movtne	r0, #36902	; 0x9026
		return physinfo [fd];
    19e8:	35060000 	strcc	r0, [r6, #-0]
    19ec:	00134900 	andseq	r4, r3, r0, lsl #18
	verify_fds (fd, "tcv22");
    19f0:	01130700 	tsteq	r3, r0, lsl #14
    19f4:	0b3a0b0b 	bleq	e84628 <__ccfg+0xe64680>
    19f8:	0b390b3b 	bleq	e446ec <__ccfg+0xe24744>
    19fc:	00001301 	andeq	r1, r0, r1, lsl #6
    1a00:	03000d08 	movweq	r0, #3336	; 0xd08
}
    1a04:	3b0b3a0e 	blcc	2d0244 <__ccfg+0x2b029c>
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    1a08:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1a0c:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
			return 0;
    1a10:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    1a14:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    1a18:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1a1c:	0b3b0b3a 	bleq	ec470c <__ccfg+0xea4764>
    1a20:	13490b39 	movtne	r0, #39737	; 0x9b39
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    1a24:	00000b38 	andeq	r0, r0, r8, lsr fp
    1a28:	0300340a 	movweq	r3, #1034	; 0x40a
	if (dsp != TCV_DSP_PASS) {
    1a2c:	3b0b3a0e 	blcc	2d026c <__ccfg+0x2b02c4>
		if (ses == NONE)
    1a30:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			syserror (EREQPAR, "tcv26");
    1a34:	3c0c3f13 	stccc	15, cr3, [ip], {19}
		verify_fds (ses, "tcv27");
    1a38:	0b00000c 	bleq	1a70 <tcvp_new+0x4c>
    1a3c:	0b0b000f 	bleq	2c1a80 <__ccfg+0x2a1ad8>
    1a40:	00001349 	andeq	r1, r0, r9, asr #6
    1a44:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    1a48:	00130113 	andseq	r0, r3, r3, lsl r1
		if ((p = apb (size)) != NULL) {
    1a4c:	00210d00 	eoreq	r0, r1, r0, lsl #26
    1a50:	160e0000 	strne	r0, [lr], -r0
		return NULL;
    1a54:	3a0e0300 	bcc	38265c <__ccfg+0x3626b4>
			p->attributes = descriptors [ses] -> attpattern;
    1a58:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			dispose (p, dsp);
    1a5c:	0013490b 	andseq	r4, r3, fp, lsl #18
			p->attributes = descriptors [ses] -> attpattern;
    1a60:	01150f00 	tsteq	r5, r0, lsl #30
			p->attributes.b.outgoing = 0;
    1a64:	13010c27 	movwne	r0, #7207	; 0x1c27
			dispose (p, dsp);
    1a68:	05100000 	ldreq	r0, [r0, #-0]
			return (address)(p + 1);
    1a6c:	00134900 	andseq	r4, r3, r0, lsl #18
    1a70:	00341100 	eorseq	r1, r4, r0, lsl #2
	if ((p = apb (size)) != NULL)
    1a74:	0b3a0e03 	bleq	e85288 <__ccfg+0xe652e0>
    1a78:	0b39053b 	bleq	e42f6c <__ccfg+0xe22fc4>
		return (address)(p + 1);
    1a7c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1960 <tcv_wnps+0x84>
    1a80:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1a84:	0b011312 	bleq	466d4 <__ccfg+0x2672c>
    1a88:	3b0b3a0b 	blcc	2d02bc <__ccfg+0x2b0314>
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a8c:	010b3905 	tsteq	fp, r5, lsl #18
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1a90:	13000013 	movwne	r0, #19
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a94:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1a98:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		syserror (EREQPAR, "tcv28");
    1a9c:	13490b39 	movtne	r0, #39737	; 0x9b39
		syserror (EMALLOC, "tcv29");
    1aa0:	00000b38 	andeq	r0, r0, r8, lsr fp
	physical [phy] = ps;
    1aa4:	03011314 	movweq	r1, #4884	; 0x1314
	physinfo [phy] = info;
    1aa8:	3a0b0b0e 	bcc	2c46e8 <__ccfg+0x2a4740>
    1aac:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1ab0:	0013010b 	andseq	r0, r3, fp, lsl #2
    1ab4:	00211500 	eoreq	r1, r1, r0, lsl #10
    1ab8:	0b2f1349 	bleq	bc67e4 <__ccfg+0xba683c>
		syserror (EMALLOC, "tcv29");
    1abc:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    1ac0:	030c3f01 	movweq	r3, #52993	; 0xcf01
	q_init (q);
    1ac4:	3b0b3a0e 	blcc	2d0304 <__ccfg+0x2b035c>
}
    1ac8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1acc:	1113490c 	tstne	r3, ip, lsl #18
    1ad0:	40011201 	andmi	r1, r1, r1, lsl #4
    1ad4:	1700000a 	strne	r0, [r0, -sl]
    1ad8:	08030005 	stmdaeq	r3, {r0, r2}
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1adc:	0b3b0b3a 	bleq	ec47cc <__ccfg+0xea4824>
	verify_fph (phy, "tcv30");
    1ae0:	13490b39 	movtne	r0, #39737	; 0x9b39
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ae4:	00000602 	andeq	r0, r0, r2, lsl #12
    1ae8:	03003418 	movweq	r3, #1048	; 0x418
	verify_fph (phy, "tcv30");
    1aec:	3b0b3a0e 	blcc	2d032c <__ccfg+0x2b0384>
    1af0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1af4:	00060213 	andeq	r0, r6, r3, lsl r2
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1af8:	11010000 	mrsne	r0, (UNDEF: 1)
    1afc:	130e2501 	movwne	r2, #58625	; 0xe501
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1b00:	1b0e030b 	blne	382734 <__ccfg+0x36278c>
    1b04:	1106550e 	tstne	r6, lr, lsl #10
		if (plugins [plg] == NULL)
    1b08:	00061001 	andeq	r1, r6, r1
    1b0c:	00240200 	eoreq	r0, r4, r0, lsl #4
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1b10:	0b3e0b0b 	bleq	f84744 <__ccfg+0xf6479c>
}
    1b14:	00000e03 	andeq	r0, r0, r3, lsl #28
    1b18:	03001603 	movweq	r1, #1539	; 0x603
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1b1c:	3b0b3a0e 	blcc	2d035c <__ccfg+0x2b03b4>
    1b20:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1b24:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1b28:	0b0b0024 	bleq	2c1bc0 <__ccfg+0x2a1c18>
    1b2c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1b30:	13050000 	movwne	r0, #20480	; 0x5000
    1b34:	0b0e0301 	bleq	382740 <__ccfg+0x362798>
    1b38:	3b0b3a0b 	blcc	2d036c <__ccfg+0x2b03c4>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1b3c:	0013010b 	andseq	r0, r3, fp, lsl #2
	len -= (ap.head + ap.tail);
    1b40:	000d0600 	andeq	r0, sp, r0, lsl #12
    1b44:	13490e03 	movtne	r0, #40451	; 0x9e03
    1b48:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1b4c:	0f070000 	svceq	0x00070000
    1b50:	000b0b00 	andeq	r0, fp, r0, lsl #22
    1b54:	00260800 	eoreq	r0, r6, r0, lsl #16
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1b58:	00001349 	andeq	r1, r0, r9, asr #6
    1b5c:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
    1b60:	0a000013 	beq	1bb4 <tcvphy_get+0x3c>
	return 1;
    1b64:	0b0b0113 	bleq	2c1fb8 <__ccfg+0x2a2010>
    1b68:	0b3b0b3a 	bleq	ec4858 <__ccfg+0xea48b0>
    1b6c:	13010b39 	movwne	r0, #6969	; 0x1b39
    1b70:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    1b74:	3a0e0300 	bcc	38277c <__ccfg+0x3627d4>
	verify_fph (phy, "tcv32");
    1b78:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b7c:	0b13490b 	bleq	4d3fb0 <__ccfg+0x4b4008>
    1b80:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    1b84:	000b380b 	andeq	r3, fp, fp, lsl #16
    1b88:	000d0c00 	andeq	r0, sp, r0, lsl #24
    1b8c:	0b3a0e03 	bleq	e853a0 <__ccfg+0xe653f8>
	oq = oqueues [phy];
    1b90:	0b390b3b 	bleq	e44884 <__ccfg+0xe248dc>
	b = q_first (oq);
    1b94:	0b381349 	bleq	e068c0 <__ccfg+0xde6918>
	if (q_end (b, oq)) {
    1b98:	340d0000 	strcc	r0, [sp], #-0
	*len = b->length;
    1b9c:	3a0e0300 	bcc	3827a4 <__ccfg+0x3627fc>
	deq (b);	// Dequeue the packet ...
    1ba0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    1ba4:	3f13490b 	svccc	0x0013490b
		return NULL;
    1ba8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1bac:	000f0e00 	andeq	r0, pc, r0, lsl #28
    1bb0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1bb4:	010f0000 	mrseq	r0, CPSR
	verify_fph (phy, "tcv33");
    1bb8:	01134901 	tsteq	r3, r1, lsl #18
    1bbc:	10000013 	andne	r0, r0, r3, lsl r0
    1bc0:	00000021 	andeq	r0, r0, r1, lsr #32
    1bc4:	03001611 	movweq	r1, #1553	; 0x611
    1bc8:	3b0b3a0e 	blcc	2d0408 <__ccfg+0x2b0460>
    1bcc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	oq = oqueues [phy];
    1bd0:	12000013 	andne	r0, r0, #19
	b = q_first (oq);
    1bd4:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
		return NULL;
    1bd8:	00001301 	andeq	r1, r0, r1, lsl #6
	return (address)(b + 1);
    1bdc:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
}
    1be0:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    1be4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1be8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1bec:	13490b39 	movtne	r0, #39737	; 0x9b39
	verify_plg (b, tcv_xmt, "tcv34");
    1bf0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	hblock_t *b = header (pkt);
    1bf4:	13150000 	tstne	r5, #0
	verify_plg (b, tcv_xmt, "tcv34");
    1bf8:	3a0b0b01 	bcc	2c4804 <__ccfg+0x2a485c>
    1bfc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c00:	0013010b 	andseq	r0, r3, fp, lsl #2
    1c04:	000d1600 	andeq	r1, sp, r0, lsl #12
    1c08:	0b3a0e03 	bleq	e8541c <__ccfg+0xe65474>
    1c0c:	0b39053b 	bleq	e43100 <__ccfg+0xe23158>
    1c10:	0b381349 	bleq	e0693c <__ccfg+0xde6994>
	dispose (b, plugins [b->attributes.b.plugin] ->
    1c14:	13170000 	tstne	r7, #0
}
    1c18:	0b0e0301 	bleq	382824 <__ccfg+0x36287c>
	dispose (b, plugins [b->attributes.b.plugin] ->
    1c1c:	3b0b3a0b 	blcc	2d0450 <__ccfg+0x2b04a8>
    1c20:	010b3905 	tsteq	fp, r5, lsl #18
    1c24:	18000013 	stmdane	r0, {r0, r1, r4}
}
    1c28:	13490021 	movtne	r0, #36897	; 0x9021
    while(1)
    1c2c:	00000b2f 	andeq	r0, r0, pc, lsr #22
{
    1c30:	3f012e19 	svccc	0x00012e19
    SetupTrimDevice();
    1c34:	3a0e030c 	bcc	38286c <__ccfg+0x3628c4>
    pui32Src = &_etext;
    1c38:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1c3c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    __asm("    ldr     r0, =_bss\n"
    1c40:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1c44:	010a4001 	tsteq	sl, r1
    1c48:	1a000013 	bne	1c9c <get_byte+0x20>
    1c4c:	08030005 	stmdaeq	r3, {r0, r2}
    1c50:	0b3b0b3a 	bleq	ec4940 <__ccfg+0xea4998>
   main();
    1c54:	13490b39 	movtne	r0, #39737	; 0x9b39
    FaultISR();
    1c58:	00000602 	andeq	r0, r0, r2, lsl #12
        *pui32Dest++ = *pui32Src++;
    1c5c:	0300051b 	movweq	r0, #1307	; 0x51b
    1c60:	3b0b3a08 	blcc	2d0488 <__ccfg+0x2b04e0>
    1c64:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1c68:	000a0213 	andeq	r0, sl, r3, lsl r2
    1c6c:	00181c00 	andseq	r1, r8, r0, lsl #24
    1c70:	341d0000 	ldrcc	r0, [sp], #-0
    1c74:	3a0e0300 	bcc	38287c <__ccfg+0x3628d4>
    1c78:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
static byte get_byte () {
    1c7c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c80:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    1c84:	08030034 	stmdaeq	r3, {r2, r4, r5}
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c88:	0b3b0b3a 	bleq	ec4978 <__ccfg+0xea49d0>
    1c8c:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (ee_inp)
    1c90:	00000602 	andeq	r0, r0, r2, lsl #12
			b |= 1;
    1c94:	0300341f 	movweq	r3, #1055	; 0x41f
    1c98:	3b0b3a08 	blcc	2d04c0 <__ccfg+0x2b0518>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c9c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	for (b = 0, i = 0; i < 8; i++) {
    1ca0:	000a0213 	andeq	r0, sl, r3, lsl r2
}
    1ca4:	11010000 	mrsne	r0, (UNDEF: 1)
    1ca8:	130e2501 	movwne	r2, #58625	; 0xe501
    1cac:	1b0e030b 	blne	3828e0 <__ccfg+0x362938>
static void put_byte (byte b) {
    1cb0:	1106550e 	tstne	r6, lr, lsl #10
    1cb4:	00061001 	andeq	r1, r6, r1
    1cb8:	00240200 	eoreq	r0, r4, r0, lsl #4
    1cbc:	0b3e0b0b 	bleq	f848f0 <__ccfg+0xf64948>
		if (b & 0x80)
    1cc0:	00000e03 	andeq	r0, r0, r3, lsl #28
    1cc4:	03001603 	movweq	r1, #1539	; 0x603
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cc8:	3b0b3a0e 	blcc	2d0508 <__ccfg+0x2b0560>
	for (i = 0; i < 8; i++) {
    1ccc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		b <<= 1;
    1cd0:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
	for (i = 0; i < 8; i++) {
    1cd4:	0b0b0024 	bleq	2c1d6c <__ccfg+0x2a1dc4>
}
    1cd8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1cdc:	13050000 	movwne	r0, #20480	; 0x5000
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1ce0:	0b0e0301 	bleq	3828ec <__ccfg+0x362944>
    1ce4:	3b0b3a0b 	blcc	2d0518 <__ccfg+0x2b0570>
	put_byte (cmd);
    1ce8:	0013010b 	andseq	r0, r3, fp, lsl #2
    1cec:	000d0600 	andeq	r0, sp, r0, lsl #12
}
    1cf0:	13490e03 	movtne	r0, #40451	; 0x9e03
    1cf4:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
static void wwait (word st, word del) {
    1cf8:	0f070000 	svceq	0x00070000
    1cfc:	000b0b00 	andeq	r0, fp, r0, lsl #22
    1d00:	00260800 	eoreq	r0, r6, r0, lsl #16
	while (dopen && (rdsr () & 1)) {
    1d04:	00001349 	andeq	r1, r0, r9, asr #6
    1d08:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
    1d0c:	0a000013 	beq	1d60 <ready+0x14>
    1d10:	0b0b0113 	bleq	2c2164 <__ccfg+0x2a21bc>
	put_byte (CMD_RDSR);
    1d14:	0b3b0b3a 	bleq	ec4a04 <__ccfg+0xea4a5c>
	r = get_byte ();
    1d18:	13010b39 	movwne	r0, #6969	; 0x1b39
    1d1c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
	while (dopen && (rdsr () & 1)) {
    1d20:	3a0e0300 	bcc	382928 <__ccfg+0x362980>
}
    1d24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (st == WNONE)
    1d28:	0b13490b 	bleq	4d415c <__ccfg+0x4b41b4>
    1d2c:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
			mdelay (1);
    1d30:	000b380b 	andeq	r3, fp, fp, lsl #16
    1d34:	000d0c00 	andeq	r0, sp, r0, lsl #24
			delay (del, st);
    1d38:	0b3a0e03 	bleq	e8554c <__ccfg+0xe655a4>
    1d3c:	0b390b3b 	bleq	e44a30 <__ccfg+0xe24a88>
			release;
    1d40:	0b381349 	bleq	e06a6c <__ccfg+0xde6ac4>
    1d44:	340d0000 	strcc	r0, [sp], #-0
    1d48:	3a0e0300 	bcc	382950 <__ccfg+0x3629a8>
static void ready () {
    1d4c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (dopen) {
    1d50:	3f13490b 	svccc	0x0013490b
		wwait (WNONE, 1);
    1d54:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1d58:	000f0e00 	andeq	r0, pc, r0, lsl #28
    1d5c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
	dstat = 0;
    1d60:	010f0000 	mrseq	r0, CPSR
}
    1d64:	01134901 	tsteq	r3, r1, lsl #18
    1d68:	10000013 	andne	r0, r0, r3, lsl r0
    1d6c:	00000021 	andeq	r0, r0, r1, lsr #32
	udelay (1);
    1d70:	03001611 	movweq	r1, #1553	; 0x611
    1d74:	3b0b3a0e 	blcc	2d05b4 <__ccfg+0x2b060c>
	udelay (1);
    1d78:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		dopen = DOPEN_TEMP;
    1d7c:	12000013 	andne	r0, r0, #19
    1d80:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    1d84:	00001301 	andeq	r1, r0, r1, lsl #6
    1d88:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
static void cclose () {
    1d8c:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
	if (dopen == DOPEN_TEMP) {
    1d90:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1d94:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		wwait (WNONE, 1);
    1d98:	13490b39 	movtne	r0, #39737	; 0x9b39
    1d9c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	cmd_0 (CMD_DP);
    1da0:	13150000 	tstne	r5, #0
    1da4:	3a0b0b01 	bcc	2c49b0 <__ccfg+0x2a4a08>
		dopen = 0;
    1da8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    1dac:	0013010b 	andseq	r0, r3, fp, lsl #2
word ee_open () {
    1db0:	000d1600 	andeq	r1, sp, r0, lsl #12
	ready ();
    1db4:	0b3a0e03 	bleq	e855c8 <__ccfg+0xe65620>
	dopen = DOPEN_PERM;
    1db8:	0b39053b 	bleq	e432ac <__ccfg+0xe23304>
    1dbc:	0b381349 	bleq	e06ae8 <__ccfg+0xde6b40>
}
    1dc0:	13170000 	tstne	r7, #0
	if (dopen) {
    1dc4:	0b0e0301 	bleq	3829d0 <__ccfg+0x362a28>
    1dc8:	3b0b3a0b 	blcc	2d05fc <__ccfg+0x2b0654>
		dopen = DOPEN_TEMP;
    1dcc:	010b3905 	tsteq	fp, r5, lsl #18
		cclose ();
    1dd0:	18000013 	stmdane	r0, {r0, r1, r4}
}
    1dd4:	13490021 	movtne	r0, #36897	; 0x9021
int ser_in (word st, char *buf, int len) {
    1dd8:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1ddc:	3f012e19 	svccc	0x00012e19
	if (len == 0)
    1de0:	3a0e030c 	bcc	382a18 <__ccfg+0x362a70>
	if (__inpline == NULL) {
    1de4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if ((prcs = running (__inserial)) == 0) {
    1de8:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1dec:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
			prcs = runthread (__inserial);
    1df0:	010a4001 	tsteq	sl, r1
    1df4:	1a000013 	bne	1e48 <ser_in+0x70>
			if (prcs == 0) {
    1df8:	08030005 	stmdaeq	r3, {r0, r2}
				npwait (st);
    1dfc:	0b3b0b3a 	bleq	ec4aec <__ccfg+0xea4b44>
		release;
    1e00:	13490b39 	movtne	r0, #39737	; 0x9b39
		join (prcs, st);
    1e04:	00000602 	andeq	r0, r0, r2, lsl #12
    1e08:	0300051b 	movweq	r0, #1307	; 0x51b
	if (*__inpline == NULL) // bin cmd
    1e0c:	3b0b3a08 	blcc	2d0634 <__ccfg+0x2b068c>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1e10:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if (prcs >= len)
    1e14:	000a0213 	andeq	r0, sl, r3, lsl r2
		prcs = len-1;
    1e18:	00181c00 	andseq	r1, r8, r0, lsl #24
	memcpy (buf, __inpline, prcs);
    1e1c:	341d0000 	ldrcc	r0, [sp], #-0
    1e20:	3a0e0300 	bcc	382a28 <__ccfg+0x362a80>
    1e24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	ufree (__inpline);
    1e28:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	__inpline = NULL;
    1e2c:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
	if (*buf) // if it's NULL, it's a bin cmd
    1e30:	08030034 	stmdaeq	r3, {r2, r4, r5}
		buf [prcs] = '\0';
    1e34:	0b3b0b3a 	bleq	ec4b24 <__ccfg+0xea4b7c>
}
    1e38:	13490b39 	movtne	r0, #39737	; 0x9b39
		prcs = strlen (__inpline);
    1e3c:	00000a02 	andeq	r0, r0, r2, lsl #20
    1e40:	01110100 	tsteq	r1, r0, lsl #2
		return 0;
    1e44:	0b130e25 	bleq	4c56e0 <__ccfg+0x4a5738>
    1e48:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1e4c:	01110655 	tsteq	r1, r5, asr r6
int ser_outf (word st, const char *m, ...) {
    1e50:	00000610 	andeq	r0, r0, r0, lsl r6
    1e54:	03001602 	movweq	r1, #1538	; 0x602
	if ((prcs = running (__outserial)) != 0) {
    1e58:	3b0b3a0e 	blcc	2d0698 <__ccfg+0x2b06f0>
    1e5c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		join (prcs, st);
    1e60:	03000013 	movweq	r0, #19
    1e64:	0b0b0024 	bleq	2c1efc <__ccfg+0x2a1f54>
		release;
    1e68:	0e030b3e 	vmoveq.16	d3[0], r0
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1e6c:	26040000 	strcs	r0, [r4], -r0
    1e70:	00134900 	andseq	r4, r3, r0, lsl #18
    1e74:	00350500 	eorseq	r0, r5, r0, lsl #10
		umwait (st);
    1e78:	00001349 	andeq	r1, r0, r9, asr #6
    1e7c:	0b002406 	bleq	ae9c <__exidx_end+0x6148>
	if (runstrand (__outserial, buf) == 0) {
    1e80:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1e84:	07000008 	streq	r0, [r0, -r8]
    1e88:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
		ufree (buf);
    1e8c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		npwait (st);
    1e90:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    1e94:	17080000 	strne	r0, [r8, -r0]
    1e98:	3a0b0b01 	bcc	2c4aa4 <__ccfg+0x2a4afc>
    1e9c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ea0:	0013010b 	andseq	r0, r3, fp, lsl #2
int ser_inf (word st, const char *fmt, ...) {
    1ea4:	000d0900 	andeq	r0, sp, r0, lsl #18
    1ea8:	0b3a0e03 	bleq	e856bc <__ccfg+0xe65714>
	if (fmt == NULL)
    1eac:	0b390b3b 	bleq	e44ba0 <__ccfg+0xe24bf8>
	if (__inpline == NULL) {
    1eb0:	00001349 	andeq	r1, r0, r9, asr #6
		if ((prcs = running (__inserial)) == 0) {
    1eb4:	4901010a 	stmdbmi	r1, {r1, r3, r8}
    1eb8:	00130113 	andseq	r0, r3, r3, lsl r1
			prcs = runthread (__inserial);
    1ebc:	00210b00 	eoreq	r0, r1, r0, lsl #22
    1ec0:	0b2f1349 	bleq	bc6bec <__ccfg+0xba6c44>
			if (prcs == 0) {
    1ec4:	130c0000 	movwne	r0, #49152	; 0xc000
				npwait (st);
    1ec8:	3a0b0b01 	bcc	2c4ad4 <__ccfg+0x2a4b2c>
		release;
    1ecc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		join (prcs, st);
    1ed0:	0013010b 	andseq	r0, r3, fp, lsl #2
    1ed4:	000d0d00 	andeq	r0, sp, r0, lsl #26
	va_start (ap, fmt);
    1ed8:	0b3a0e03 	bleq	e856ec <__ccfg+0xe65744>
	prcs = vscan (__inpline, fmt, ap);
    1edc:	0b390b3b 	bleq	e44bd0 <__ccfg+0xe24c28>
    1ee0:	0b381349 	bleq	e06c0c <__ccfg+0xde6c64>
	ufree (__inpline);
    1ee4:	0f0e0000 	svceq	0x000e0000
	__inpline = NULL;
    1ee8:	000b0b00 	andeq	r0, fp, r0, lsl #22
}
    1eec:	01130f00 	tsteq	r3, r0, lsl #30
    1ef0:	0b0b0e03 	bleq	2c5704 <__ccfg+0x2a575c>
    1ef4:	0b3b0b3a 	bleq	ec4be4 <__ccfg+0xea4c3c>
		return 0;
    1ef8:	13010b39 	movwne	r0, #6969	; 0x1b39
    1efc:	0d100000 	ldceq	0, cr0, [r0, #-0]
    1f00:	3a080300 	bcc	202b08 <__ccfg+0x1e2b60>
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    1f04:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f08:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1f0c:	1100000b 	tstne	r0, fp
	RF_cmdFs.frequency = 
    1f10:	0b0b000f 	bleq	2c1f54 <__ccfg+0x2a1fac>
}
    1f14:	00001349 	andeq	r1, r0, r9, asr #6
    1f18:	03011312 	movweq	r1, #4882	; 0x1312
    1f1c:	3a050b0e 	bcc	144b5c <__ccfg+0x124bb4>
    1f20:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
static int option (int opt, address val) {
    1f24:	0013010b 	andseq	r0, r3, fp, lsl #2
    1f28:	000d1300 	andeq	r1, sp, r0, lsl #6
    1f2c:	0b3a0e03 	bleq	e85740 <__ccfg+0xe65798>
    1f30:	0b390b3b 	bleq	e44c24 <__ccfg+0xe24c7c>
    1f34:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    1f38:	15140000 	ldrne	r0, [r4, #-0]
    1f3c:	000c2700 	andeq	r2, ip, r0, lsl #14
    1f40:	01151500 	tsteq	r5, r0, lsl #10
    1f44:	13490c27 	movtne	r0, #39975	; 0x9c27
    1f48:	00001301 	andeq	r1, r0, r1, lsl #6
    1f4c:	49000516 	stmdbmi	r0, {r1, r2, r4, r8, sl}
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    1f50:	17000013 	smladne	r0, r3, r0, r0
    1f54:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
			goto RVal;
    1f58:	0b3a050b 	bleq	e8338c <__ccfg+0xe633e4>
			_BIS (dstate, DSTATE_RXON);
    1f5c:	0b39053b 	bleq	e43450 <__ccfg+0xe234a8>
    1f60:	00001301 	andeq	r1, r0, r1, lsl #6
	int ret = 0;
    1f64:	03000d18 	movweq	r0, #3352	; 0xd18
			p_trigger (drvprcs, qevent);
    1f68:	3b0b3a0e 	blcc	2d07a8 <__ccfg+0x2b0800>
    1f6c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1f70:	000b3813 	andeq	r3, fp, r3, lsl r8
    1f74:	000d1900 	andeq	r1, sp, r0, lsl #18
    1f78:	0b3a0e03 	bleq	e8578c <__ccfg+0xe657e4>
    1f7c:	0b39053b 	bleq	e43470 <__ccfg+0xe234c8>
    1f80:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    1f84:	131a0000 	tstne	sl, #0
    1f88:	0b0e0301 	bleq	382b94 <__ccfg+0x362bec>
    1f8c:	3b0b3a0b 	blcc	2d07c0 <__ccfg+0x2b0818>
}
    1f90:	010b3905 	tsteq	fp, r5, lsl #18
			_BIC (dstate, DSTATE_RXON);
    1f94:	1b000013 	blne	1fe8 <option+0xc4>
    1f98:	0b0b0113 	bleq	2c23ec <__ccfg+0x2a2444>
			statid = (val == NULL) ? 0 : *val;
    1f9c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1fa0:	13010b39 	movwne	r0, #6969	; 0x1b39
	int ret = 0;
    1fa4:	171c0000 	ldrne	r0, [ip, -r0]
			ret = (int) statid;
    1fa8:	3a0b0b01 	bcc	2c4bb4 <__ccfg+0x2a4c0c>
	if (val != NULL)
    1fac:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		*val = ret;
    1fb0:	0013010b 	andseq	r0, r3, fp, lsl #2
			ret = rbuffl + 2;
    1fb4:	000d1d00 	andeq	r1, sp, r0, lsl #26
    1fb8:	0b3a0e03 	bleq	e857cc <__ccfg+0xe65824>
			if (val != NULL) {
    1fbc:	0b39053b 	bleq	e434b0 <__ccfg+0xe23508>
				memcpy (val, &rxstat,
    1fc0:	00001349 	andeq	r1, r0, r9, asr #6
    1fc4:	0300131e 	movweq	r1, #798	; 0x31e
				memset (&rxstat, 0, 
    1fc8:	000c3c0e 	andeq	r3, ip, lr, lsl #24
    1fcc:	01151f00 	tsteq	r5, r0, lsl #30
			if (val == NULL)
    1fd0:	13010c27 	movwne	r0, #7207	; 0x1c27
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    1fd4:	34200000 	strtcc	r0, [r0], #-0
    1fd8:	3a0e0300 	bcc	382be0 <__ccfg+0x362c38>
				utimer_set (bckf_timer, *val);
    1fdc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1fe0:	3f13490b 	svccc	0x0013490b
    1fe4:	000c3c0c 	andeq	r3, ip, ip, lsl #24
			for (ret = 0; ret < 8; ret++)
    1fe8:	000d2100 	andeq	r2, sp, r0, lsl #2
				if (RF_cmdPropRadioDivSetup.txPower
    1fec:	0b3a0e03 	bleq	e85800 <__ccfg+0xe65858>
					== patable [ret])
    1ff0:	0b390b3b 	bleq	e44ce4 <__ccfg+0xe24d3c>
				if (RF_cmdPropRadioDivSetup.txPower
    1ff4:	0b0b1349 	bleq	2c6d20 <__ccfg+0x2a6d78>
			for (ret = 0; ret < 8; ret++)
    1ff8:	0b0c0b0d 	bleq	304c34 <__ccfg+0x2e4c8c>
    1ffc:	00000b38 	andeq	r0, r0, r8, lsr fp
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2000:	03000d22 	movweq	r0, #3362	; 0xd22
    2004:	3b0b3a0e 	blcc	2d0844 <__ccfg+0x2b089c>
    2008:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    200c:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    2010:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
			_BIS (dstate, DSTATE_IRST);
    2014:	2300000b 	movwcs	r0, #11
    2018:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    201c:	0b3b0b3a 	bleq	ec4d0c <__ccfg+0xea4d64>
			ret = (int) channel;
    2020:	13490b39 	movtne	r0, #39737	; 0x9b39
			goto RVal;
    2024:	00000a02 	andeq	r0, r0, r2, lsl #20
				(*val > 7) ? 7 : *val;
    2028:	49002124 	stmdbmi	r0, {r2, r5, r8, sp}
    202c:	00052f13 	andeq	r2, r5, r3, lsl pc
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2030:	00342500 	eorseq	r2, r4, r0, lsl #10
    2034:	0b3a0e03 	bleq	e85848 <__ccfg+0xe658a0>
			plugch ();
    2038:	0b390b3b 	bleq	e44d2c <__ccfg+0xe24d84>
			_BIS (dstate, DSTATE_IRST);
    203c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1f20 <plugch+0x1c>
    2040:	00000c3c 	andeq	r0, r0, ip, lsr ip
			ret = (int) vrate;
    2044:	00002126 	andeq	r2, r0, r6, lsr #2
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2048:	00342700 	eorseq	r2, r4, r0, lsl #14
    204c:	0b3a0e03 	bleq	e85860 <__ccfg+0xe658b8>
    2050:	0b39053b 	bleq	e43544 <__ccfg+0xe2359c>
    2054:	00001349 	andeq	r1, r0, r9, asr #6
    2058:	3f012e28 	svccc	0x00012e28
    205c:	3a0e030c 	bcc	382c94 <__ccfg+0x362cec>
    2060:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2064:	110c270b 	tstne	ip, fp, lsl #14
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2068:	40011201 	andmi	r1, r1, r1, lsl #4
    206c:	0013010a 	andseq	r0, r3, sl, lsl #2
    2070:	00052900 	andeq	r2, r5, r0, lsl #18
    2074:	0b3a0803 	bleq	e84088 <__ccfg+0xe640e0>
			syserror (EREQPAR, "cc13 op");
    2078:	0b39053b 	bleq	e4356c <__ccfg+0xe235c4>
    207c:	06021349 	streq	r1, [r2], -r9, asr #6
    2080:	1d2a0000 	stcne	0, cr0, [sl, #-0]
    2084:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    2088:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    208c:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    2090:	0013010b 	andseq	r0, r3, fp, lsl #2
    2094:	010b2b00 	tsteq	fp, r0, lsl #22
    2098:	00000655 	andeq	r0, r0, r5, asr r6
    209c:	3100342c 	tstcc	r0, ip, lsr #8
    20a0:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
    20a4:	13310034 	teqne	r1, #52	; 0x34
    20a8:	00000602 	andeq	r0, r0, r2, lsl #12
    20ac:	31001d2e 	tstcc	r0, lr, lsr #26
    20b0:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
static void issue_cmd (lword cmd) {
    20b4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    20b8:	000b5705 	andeq	r5, fp, r5, lsl #14
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20bc:	012e2f00 			; <UNDEFINED> instruction: 0x012e2f00
    20c0:	0b3a0e03 	bleq	e858d4 <__ccfg+0xe6592c>
    20c4:	0b39053b 	bleq	e435b8 <__ccfg+0xe23610>
		if (res != 0x86)
    20c8:	13490c27 	movtne	r0, #39975	; 0x9c27
			syserror (EHARDWARE, "hang ic0");
    20cc:	01120111 	tsteq	r2, r1, lsl r1
    20d0:	13010a40 	movwne	r0, #6720	; 0x1a40
		if (cnt-- == 0) {
    20d4:	34300000 	ldrtcc	r0, [r0], #-0
			diag ("HUP %lx %lx", cmd, res);
    20d8:	3a080300 	bcc	202ce0 <__ccfg+0x1e2d38>
    20dc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			syserror (EHARDWARE, "hang ic0");
    20e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		udelay (1);
    20e4:	31000006 	tstcc	r0, r6
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20e8:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
}
    20ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    20f0:	01110b39 	tsteq	r1, r9, lsr fp
    20f4:	0b320000 	bleq	c820fc <__ccfg+0xc62154>
    20f8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
static void rx_de () {
    20fc:	33000001 	movwcc	r0, #1
	if ((dstate & DSTATE_RXAC) == 0)
    2100:	0e03012e 	adfeqsp	f0, f3, #0.5
    2104:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2108:	0b200b39 	bleq	804df4 <__ccfg+0x7e4e4c>
	_BIC (dstate, DSTATE_RXAC);
    210c:	00001301 	andeq	r1, r0, r1, lsl #6
    2110:	03003434 	movweq	r3, #1076	; 0x434
}
    2114:	3b0b3a08 	blcc	2d093c <__ccfg+0x2b0994>
    2118:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    211c:	35000013 	strcc	r0, [r0, #-19]	; 0xffffffed
static void rf_off () {
    2120:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
	if ((dstate & DSTATE_RFON) == 0)
    2124:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2128:	13490b39 	movtne	r0, #39737	; 0x9b39
	IntDisable (INT_RFC_CPE_0);
    212c:	00000602 	andeq	r0, r0, r2, lsl #12
    2130:	31001d36 	tstcc	r0, r6, lsr sp
    2134:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	RFCAdi3VcoLdoVoltageMode (false);
    2138:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
	RFCSynthPowerDown ();
    213c:	000b5705 	andeq	r5, fp, r5, lsl #14
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2140:	010b3700 	tsteq	fp, r0, lsl #14
    2144:	13010655 	movwne	r0, #5717	; 0x1655
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2148:	1d380000 	ldcne	0, cr0, [r8, #-0]
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    214c:	11133101 	tstne	r3, r1, lsl #2
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2150:	58011201 	stmdapl	r1, {r0, r9, ip}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2154:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    2158:	0013010b 	andseq	r0, r3, fp, lsl #2
    215c:	00053900 	andeq	r3, r5, r0, lsl #18
	_BIC (dstate, DSTATE_RFON);
    2160:	00001331 	andeq	r1, r0, r1, lsr r3
    2164:	31011d3a 	tstcc	r1, sl, lsr sp
}
    2168:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    216c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2170:	000b5705 	andeq	r5, fp, r5, lsl #14
    2174:	012e3b00 			; <UNDEFINED> instruction: 0x012e3b00
    2178:	0b3a0e03 	bleq	e8598c <__ccfg+0xe659e4>
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    217c:	0b39053b 	bleq	e43670 <__ccfg+0xe236c8>
    2180:	01120111 	tsteq	r2, r1, lsl r1
    2184:	13010a40 	movwne	r0, #6720	; 0x1a40
		if (cmd->status == tstat)
    2188:	2e3c0000 	cdpcs	0, 3, cr0, cr12, cr0, {0}
		if (timeout-- == 0) {
    218c:	3a0e0300 	bcc	382d94 <__ccfg+0x362dec>
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2190:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2194:	000b200b 	andeq	r2, fp, fp
    2198:	002e3d00 	eoreq	r3, lr, r0, lsl #26
			syserror (EHARDWARE, "rt2");
    219c:	0b3a0e03 	bleq	e859b0 <__ccfg+0xe65a08>
    21a0:	0b39053b 	bleq	e43694 <__ccfg+0xe236ec>
		udelay (1);
    21a4:	01120111 	tsteq	r2, r1, lsl r1
		if (cmd->status == tstat)
    21a8:	00000a40 	andeq	r0, r0, r0, asr #20
}
    21ac:	03002e3e 	movweq	r2, #3646	; 0xe3e
    21b0:	3b0b3a0e 	blcc	2d09f0 <__ccfg+0x2b0a48>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    21b4:	200b390b 	andcs	r3, fp, fp, lsl #18
    21b8:	3f00000b 	svccc	0x0000000b
static void rf_on () {
    21bc:	0e03012e 	adfeqsp	f0, f3, #0.5
    21c0:	0b3b0b3a 	bleq	ec4eb0 <__ccfg+0xea4f08>
	OSCHF_TurnOnXosc();
    21c4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    21c8:	13010b20 	movwne	r0, #6944	; 0x1b20
    21cc:	05400000 	strbeq	r0, [r0, #-0]
    21d0:	3a080300 	bcc	202dd8 <__ccfg+0x1e2e30>
    21d4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21d8:	0013490b 	andseq	r4, r3, fp, lsl #18
    21dc:	00054100 	andeq	r4, r5, r0, lsl #2
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21e0:	0b3a0e03 	bleq	e859f4 <__ccfg+0xe65a4c>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    21e4:	0b390b3b 	bleq	e44ed8 <__ccfg+0xe24f30>
	issue_cmd (
    21e8:	00001349 	andeq	r1, r0, r9, asr #6
    21ec:	03003442 	movweq	r3, #1090	; 0x442
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    21f0:	3b0b3a08 	blcc	2d0a18 <__ccfg+0x2b0a70>
    21f4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    21f8:	43000013 	movwmi	r0, #19
   pPatchTab[80] = 0;
    21fc:	0e03012e 	adfeqsp	f0, f3, #0.5
   } while (--nIterations);
    2200:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
   pPatchTab[53] = 2;
    2204:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    2208:	13010b20 	movwne	r0, #6944	; 0x1b20
   pPatchTab[55] = 3;
    220c:	05440000 	strbeq	r0, [r4, #-0]
   pPatchTab[110] = 4;
    2210:	3a0e0300 	bcc	382e18 <__ccfg+0x362e70>
   pPatchTab[107] = 5;
    2214:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
   pPatchTab[65] = 6;
    2218:	0013490b 	andseq	r4, r3, fp, lsl #18
    221c:	002e4500 	eoreq	r4, lr, r0, lsl #10
   pPatchTab[57] = 1;
    2220:	0b3a0e03 	bleq	e85a34 <__ccfg+0xe65a8c>
   pIrqPatch[1] = _IRQ_PATCH_0;
    2224:	0b39053b 	bleq	e43718 <__ccfg+0xe23770>
   const uint32_t *pS = patchGenfskRfe;
    2228:	0b200c27 	bleq	8052cc <__ccfg+0x7e5324>
      t2 = *pS++;
    222c:	2e460000 	cdpcs	0, 4, cr0, cr6, cr0, {0}
      t4 = *pS++;
    2230:	3a0e0300 	bcc	382e38 <__ccfg+0x362e90>
      t6 = *pS++;
    2234:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      t8 = *pS++;
    2238:	200c270b 	andcs	r2, ip, fp, lsl #14
      *pD++ = t1;
    223c:	4700000b 	strmi	r0, [r0, -fp]
      *pD++ = t2;
    2240:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
      *pD++ = t3;
    2244:	01120111 	tsteq	r2, r1, lsl r1
      *pD++ = t5;
    2248:	13010a40 	movwne	r0, #6720	; 0x1a40
      *pD++ = t7;
    224c:	05480000 	strbeq	r0, [r8, #-0]
   } while (--nIterations);
    2250:	02133100 	andseq	r3, r3, #0, 2
    2254:	49000006 	stmdbmi	r0, {r1, r2}
      *pD++ = t8;
    2258:	1331011d 	teqne	r1, #1073741831	; 0x40000007
   } while (--nIterations);
    225c:	01120111 	tsteq	r2, r1, lsl r1
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2260:	0b590b58 	bleq	1644fc8 <__ccfg+0x1625020>
   *pD++ = t2;
    2264:	00000b57 	andeq	r0, r0, r7, asr fp
   *pD++ = t3;
    2268:	31011d4a 	tstcc	r1, sl, asr #26
   *pD++ = t4;
    226c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
   *pD++ = t5;
    2270:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    2274:	000b5705 	andeq	r5, fp, r5, lsl #14
	RFCAdi3VcoLdoVoltageMode (true);
    2278:	012e4b00 			; <UNDEFINED> instruction: 0x012e4b00
    227c:	01111331 	tsteq	r1, r1, lsr r3
       	RFCRfTrimSet (&rfTrim);
    2280:	0a400112 	beq	10026d0 <__ccfg+0xfe2728>
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2284:	344c0000 	strbcc	r0, [ip], #-0
    2288:	1c133100 	ldfnes	f3, [r3], {-0}
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    228c:	00000006 	andeq	r0, r0, r6
    2290:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
	issue_cmd ((lword)&cmd_srt);
    2294:	030b130e 	movweq	r1, #45838	; 0xb30e
    2298:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
	issue_cmd ((lword)&RF_cmdFs);
    229c:	10011106 	andne	r1, r1, r6, lsl #2
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    22a0:	02000006 	andeq	r0, r0, #6
    22a4:	0b0b0024 	bleq	2c233c <__ccfg+0x2a2394>
    22a8:	0e030b3e 	vmoveq.16	d3[0], r0
	IntEnable (INT_RFC_CPE_0);
    22ac:	16030000 	strne	r0, [r3], -r0
	_BIC (dstate, DSTATE_IRST);
    22b0:	3a0e0300 	bcc	382eb8 <__ccfg+0x362f10>
    22b4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    22b8:	0013490b 	andseq	r4, r3, fp, lsl #18
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22bc:	00240400 	eoreq	r0, r4, r0, lsl #8
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22c0:	0b3e0b0b 	bleq	f84ef4 <__ccfg+0xf64f4c>
	IntEnable (INT_RFC_CPE_0);
    22c4:	00000803 	andeq	r0, r0, r3, lsl #16
    22c8:	03011305 	movweq	r1, #4869	; 0x1305
}
    22cc:	3a0b0b0e 	bcc	2c4f0c <__ccfg+0x2a4f64>
	IntEnable (INT_RFC_CPE_0);
    22d0:	010b3b0b 	tsteq	fp, fp, lsl #22
    22d4:	06000013 			; <UNDEFINED> instruction: 0x06000013
    22d8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    22dc:	0b381349 	bleq	e07008 <__ccfg+0xde7060>
    22e0:	00000c34 	andeq	r0, r0, r4, lsr ip
    22e4:	0b000f07 	bleq	5f08 <__exidx_end+0x11b4>
    22e8:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    22ec:	13490026 	movtne	r0, #36902	; 0x9026
    22f0:	35090000 	strcc	r0, [r9, #-0]
    22f4:	00134900 	andseq	r4, r3, r0, lsl #18
    22f8:	000f0a00 	andeq	r0, pc, r0, lsl #20
    22fc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2300:	130b0000 	movwne	r0, #45056	; 0xb000
    2304:	3a0b0b01 	bcc	2c4f10 <__ccfg+0x2a4f68>
    2308:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    230c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2310:	000d0c00 	andeq	r0, sp, r0, lsl #24
    2314:	0b3a0e03 	bleq	e85b28 <__ccfg+0xe65b80>
    2318:	0b390b3b 	bleq	e4500c <__ccfg+0xe25064>
    231c:	0b0b1349 	bleq	2c7048 <__ccfg+0x2a70a0>
    2320:	0b0c0b0d 	bleq	304f5c <__ccfg+0x2e4fb4>
    2324:	00000b38 	andeq	r0, r0, r8, lsr fp
    2328:	03000d0d 	movweq	r0, #3341	; 0xd0d
    232c:	3b0b3a0e 	blcc	2d0b6c <__ccfg+0x2b0bc4>
    2330:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
static void rx_int_enable () {
    2334:	000b3813 	andeq	r3, fp, r3, lsl r8
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2338:	00340e00 	eorseq	r0, r4, r0, lsl #28
    233c:	0b3a0e03 	bleq	e85b50 <__ccfg+0xe65ba8>
    2340:	0b390b3b 	bleq	e45034 <__ccfg+0xe2508c>
    2344:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2228 <rf_on.part.0+0x74>
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2348:	00000c3c 	andeq	r0, r0, ip, lsr ip
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    234c:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
    2350:	00130113 	andseq	r0, r3, r3, lsl r1
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2354:	00211000 	eoreq	r1, r1, r0
    2358:	16110000 	ldrne	r0, [r1], -r0
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    235c:	3a0e0300 	bcc	382f64 <__ccfg+0x362fbc>
    2360:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2364:	0013490b 	andseq	r4, r3, fp, lsl #18
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2368:	01151200 	tsteq	r5, r0, lsl #4
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    236c:	13010c27 	movwne	r0, #7207	; 0x1c27
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2370:	05130000 	ldreq	r0, [r3, #-0]
		if (db->status == DATA_ENTRY_FINISHED) {
    2374:	00134900 	andseq	r4, r3, r0, lsl #18
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2378:	00341400 	eorseq	r1, r4, r0, lsl #8
    237c:	0b3a0e03 	bleq	e85b90 <__ccfg+0xe65be8>
			nr++;
    2380:	0b39053b 	bleq	e43874 <__ccfg+0xe238cc>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2384:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2268 <rf_on.part.0+0xb4>
    2388:	00000c3c 	andeq	r0, r0, ip, lsr ip
    238c:	27011515 	smladcs	r1, r5, r5, r1
    2390:	0113490c 	tsteq	r3, ip, lsl #18
				__dp [pl + 1] = __dp [pl] - 128;
    2394:	16000013 			; <UNDEFINED> instruction: 0x16000013
				pl = __dp [1] + 2;
    2398:	0b0b0113 	bleq	2c27ec <__ccfg+0x2a2844>
				__dp [pl + 1] = __dp [pl] - 128;
    239c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    23a0:	13010b39 	movwne	r0, #6969	; 0x1b39
				__dp [pl] = 0;
    23a4:	0d170000 	ldceq	0, cr0, [r7, #-0]
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    23a8:	3a0e0300 	bcc	382fb0 <__ccfg+0x363008>
    23ac:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    23b0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
			db->status = DATA_ENTRY_PENDING;
    23b4:	1800000b 	stmdane	r0, {r0, r1, r3}
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    23b8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    23bc:	0b3a0b0b 	bleq	e84ff0 <__ccfg+0xe65048>
				diag ("BAD RX");
    23c0:	0b39053b 	bleq	e438b4 <__ccfg+0xe2390c>
    23c4:	00001301 	andeq	r1, r0, r1, lsl #6
	if (nr) {
    23c8:	49002119 	stmdbmi	r0, {r0, r3, r4, r8, sp}
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23cc:	000b2f13 	andeq	r2, fp, r3, lsl pc
}
    23d0:	00341a00 	eorseq	r1, r4, r0, lsl #20
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23d4:	0b3a0e03 	bleq	e85be8 <__ccfg+0xe65c40>
    23d8:	0b390b3b 	bleq	e450cc <__ccfg+0xe25124>
    23dc:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 22c0 <rf_on.part.0+0x10c>
}
    23e0:	00000a02 	andeq	r0, r0, r2, lsl #20
    23e4:	0300341b 	movweq	r3, #1051	; 0x41b
    23e8:	3b0b3a0e 	blcc	2d0c28 <__ccfg+0x2b0c80>
    23ec:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    23f0:	000a0213 	andeq	r0, sl, r3, lsl r2
    23f4:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
    23f8:	0b3a0e03 	bleq	e85c0c <__ccfg+0xe65c64>
    23fc:	0b390b3b 	bleq	e450f0 <__ccfg+0xe25148>
    2400:	13490c27 	movtne	r0, #39975	; 0x9c27
thread (cc1350_driver)
    2404:	01120111 	tsteq	r2, r1, lsl r1
    2408:	13010a40 	movwne	r0, #6720	; 0x1a40
    240c:	051d0000 	ldreq	r0, [sp, #-0]
    2410:	3a080300 	bcc	203018 <__ccfg+0x1e3070>
    2414:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (dstate & DSTATE_IRST) {
    2418:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    241c:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    2420:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
			rf_off ();
    2424:	0b3b0b3a 	bleq	ec5114 <__ccfg+0xea516c>
			_BIC (dstate,
    2428:	13490b39 	movtne	r0, #39737	; 0x9b39
    242c:	00000a02 	andeq	r0, r0, r2, lsl #20
		if (dstate & DSTATE_RXAC) {
    2430:	0300051f 	movweq	r0, #1311	; 0x51f
    2434:	3b0b3a08 	blcc	2d0c5c <__ccfg+0x2b0cb4>
			if ((dstate & DSTATE_RXON) == 0)
    2438:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				rx_de ();
    243c:	000a0213 	andeq	r0, sl, r3, lsl r2
		if (paylen == 0) {
    2440:	012e2000 			; <UNDEFINED> instruction: 0x012e2000
    2444:	0b3a0e03 	bleq	e85c58 <__ccfg+0xe65cb0>
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2448:	0b390b3b 	bleq	e4513c <__ccfg+0xe25194>
    244c:	13490c27 	movtne	r0, #39975	; 0x9c27
    2450:	13010b20 	movwne	r0, #6944	; 0x1b20
    2454:	05210000 	streq	r0, [r1, #-0]!
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2458:	3a080300 	bcc	203060 <__ccfg+0x1e30b8>
    245c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2460:	0013490b 	andseq	r4, r3, fp, lsl #18
    2464:	00052200 	andeq	r2, r5, r0, lsl #4
    2468:	0b3a0e03 	bleq	e85c7c <__ccfg+0xe65cd4>
    246c:	0b390b3b 	bleq	e45160 <__ccfg+0xe251b8>
    2470:	00001349 	andeq	r1, r0, r9, asr #6
    2474:	03003423 	movweq	r3, #1059	; 0x423
		} else if (dstate & DSTATE_RXON) {
    2478:	3b0b3a08 	blcc	2d0ca0 <__ccfg+0x2b0cf8>
	if (dstate & DSTATE_RFON)
    247c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2480:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
		re->status = DATA_ENTRY_PENDING;
    2484:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2488:	01120111 	tsteq	r2, r1, lsl r1
	issue_cmd ((lword)&RF_cmdPropRx);
    248c:	00000a40 	andeq	r0, r0, r0, asr #20
	_BIS (dstate, DSTATE_RXAC);
    2490:	31000525 	tstcc	r0, r5, lsr #10
    2494:	00060213 	andeq	r0, r6, r3, lsl r2
    2498:	00342600 	eorseq	r2, r4, r0, lsl #12
    249c:	00001331 	andeq	r1, r0, r1, lsr r3
	if (dstate & DSTATE_RXAC)
    24a0:	31011d27 	tstcc	r1, r7, lsr #26
    24a4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
				if (statid != 0xffff)
    24a8:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    24ac:	000b570b 	andeq	r5, fp, fp, lsl #14
					((address)(RF_cmdPropTx.pPkt)) [0] =
    24b0:	00052800 	andeq	r2, r5, r0, lsl #16
				RF_cmdPropTx.pktLen = (byte) paylen;
    24b4:	0a021331 	beq	87180 <__ccfg+0x671d8>
		if (paylen == 0) {
    24b8:	05290000 	streq	r0, [r9, #-0]!
			wait (qevent, DR_LOOP);
    24bc:	00133100 	andseq	r3, r3, r0, lsl #2
    24c0:	11010000 	mrsne	r0, (UNDEF: 1)
			if (dstate & DSTATE_RXAC) {
    24c4:	130e2501 	movwne	r2, #58625	; 0xe501
    24c8:	1b0e030b 	blne	3830fc <__ccfg+0x363154>
				rx_int_enable ();
    24cc:	1106550e 	tstne	r6, lr, lsl #10
			release;
    24d0:	00061001 	andeq	r1, r6, r1
			} else if (dstate & DSTATE_RFON) {
    24d4:	00240200 	eoreq	r0, r4, r0, lsl #4
				delay (offdelay, DR_GOOF);
    24d8:	0b3e0b0b 	bleq	f8510c <__ccfg+0xf65164>
    24dc:	00000e03 	andeq	r0, r0, r3, lsl #28
    24e0:	03001603 	movweq	r1, #1539	; 0x603
		if (bckf_timer) {
    24e4:	3b0b3a0e 	blcc	2d0d24 <__ccfg+0x2b0d7c>
			wait (qevent, DR_LOOP);
    24e8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    24ec:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    24f0:	0b0b0024 	bleq	2c2588 <__ccfg+0x2a25e0>
			delay (bckf_timer, DR_LOOP);
    24f4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    24f8:	26050000 	strcs	r0, [r5], -r0
			if (dstate & DSTATE_RXAC)
    24fc:	00134900 	andseq	r4, r3, r0, lsl #18
    2500:	00350600 	eorseq	r0, r5, r0, lsl #12
	if (dstate & DSTATE_RFON)
    2504:	00001349 	andeq	r1, r0, r9, asr #6
    2508:	0b011307 	bleq	4712c <__ccfg+0x27184>
		rx_de ();
    250c:	3b0b3a0b 	blcc	2d0d40 <__ccfg+0x2b0d98>
		RF_cmdPropTx . status = 0;
    2510:	010b390b 	tsteq	fp, fp, lsl #18
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2514:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2518:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    251c:	0b3b0b3a 	bleq	ec520c <__ccfg+0xea5264>
		issue_cmd ((lword)&cmd_cs);
    2520:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (dstate & DSTATE_IRST)
    2524:	0b0d0b0b 	bleq	345158 <__ccfg+0x3251b0>
    2528:	0b380b0c 	bleq	e05160 <__ccfg+0xde51b8>
    252c:	0d090000 	stceq	0, cr0, [r9, #-0]
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2530:	3a0e0300 	bcc	383138 <__ccfg+0x363190>
    2534:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			delay (1, DR_XMIT);
    2538:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    253c:	0a00000b 	beq	2570 <cc1350_driver+0x16c>
    2540:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2544:	0b3b0b3a 	bleq	ec5234 <__ccfg+0xea528c>
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2548:	13490b39 	movtne	r0, #39737	; 0x9b39
    254c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
				RF_cmdPropTx . status = 0;
    2550:	0f0b0000 	svceq	0x000b0000
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2554:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
				issue_cmd ((lword)&RF_cmdPropTx);
    2558:	0c000013 	stceq	0, cr0, [r0], {19}
				proceed (DR_XMIT);
    255c:	13490101 	movtne	r0, #37121	; 0x9101
    2560:	00001301 	andeq	r1, r0, r1, lsl #6
			txtries++;
    2564:	0000210d 	andeq	r2, r0, sp, lsl #2
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2568:	00160e00 	andseq	r0, r6, r0, lsl #28
    256c:	0b3a0e03 	bleq	e85d80 <__ccfg+0xe65dd8>
    2570:	0b39053b 	bleq	e43a64 <__ccfg+0xe23abc>
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2574:	00001349 	andeq	r1, r0, r9, asr #6
		goto DR_LOOP__;
    2578:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    257c:	0013010c 	andseq	r0, r3, ip, lsl #2
		paylen = 0;
    2580:	00051000 	andeq	r1, r5, r0
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2584:	00001349 	andeq	r1, r0, r9, asr #6
		txtries = 0;
    2588:	03003411 	movweq	r3, #1041	; 0x411
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    258c:	3b0b3a0e 	blcc	2d0dcc <__ccfg+0x2b0e24>
    2590:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2594:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    2598:	1200000c 	andne	r0, r0, #12
    259c:	0b0b0113 	bleq	2c29f0 <__ccfg+0x2a2a48>
		    tcvphy_top (physid) == NULL)
    25a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    25a4:	13010b39 	movwne	r0, #6969	; 0x1b39
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    25a8:	0d130000 	ldceq	0, cr0, [r3, #-0]
    25ac:	3a0e0300 	bcc	3831b4 <__ccfg+0x36320c>
			rf_off ();
    25b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
endthread
    25b4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    25b8:	1400000b 	strne	r0, [r0], #-11
    25bc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    25c0:	0b3a0b0b 	bleq	e851f4 <__ccfg+0xe6524c>
    25c4:	0b39053b 	bleq	e43ab8 <__ccfg+0xe23b10>
    25c8:	00001301 	andeq	r1, r0, r1, lsl #6
    25cc:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    25d0:	000b2f13 	andeq	r2, fp, r3, lsl pc
    25d4:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
    25d8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    25dc:	0b3b0b3a 	bleq	ec52cc <__ccfg+0xea5324>
    25e0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    25e4:	01120111 	tsteq	r2, r1, lsl r1
    25e8:	13010a40 	movwne	r0, #6720	; 0x1a40
    25ec:	05170000 	ldreq	r0, [r7, #-0]
    25f0:	3a0e0300 	bcc	3831f8 <__ccfg+0x363250>
void RFCCPE0IntHandler (void) {
    25f4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    25f8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		_BIS (dstate, DSTATE_IRST);
    25fc:	18000006 	stmdane	r0, {r1, r2}
    2600:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2604:	0b3b0b3a 	bleq	ec52f4 <__ccfg+0xea534c>
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2608:	13490b39 	movtne	r0, #39737	; 0x9b39
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    260c:	00000602 	andeq	r0, r0, r2, lsl #12
    2610:	03000a19 	movweq	r0, #2585	; 0xa19
	p_trigger (drvprcs, qevent);
    2614:	3b0b3a0e 	blcc	2d0e54 <__ccfg+0x2b0eac>
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2618:	000b390b 	andeq	r3, fp, fp, lsl #18
    261c:	010b1a00 	tsteq	fp, r0, lsl #20
    2620:	00000655 	andeq	r0, r0, r5, asr r6
    2624:	0300341b 	movweq	r3, #1051	; 0x41b
    2628:	3b0b3a08 	blcc	2d0e50 <__ccfg+0x2b0ea8>
    262c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2630:	000a0213 	andeq	r0, sl, r3, lsl r2
    2634:	11010000 	mrsne	r0, (UNDEF: 1)
    2638:	130e2501 	movwne	r2, #58625	; 0xe501
    263c:	1b0e030b 	blne	383270 <__ccfg+0x3632c8>
	RISE_N_SHINE;
    2640:	1106550e 	tstne	r6, lr, lsl #10
    2644:	00061001 	andeq	r1, r6, r1
    2648:	00240200 	eoreq	r0, r4, r0, lsl #4
}
    264c:	0b3e0b0b 	bleq	f85280 <__ccfg+0xf652d8>
    2650:	00000e03 	andeq	r0, r0, r3, lsl #28
    2654:	03001603 	movweq	r1, #1539	; 0x603
    2658:	3b0b3a0e 	blcc	2d0e98 <__ccfg+0x2b0ef0>
    265c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2660:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
void phys_cc1350 (int phy, int mbs) {
    2664:	0b0b0024 	bleq	2c26fc <__ccfg+0x2a2754>
	if (rbuffl != 0)
    2668:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    266c:	26050000 	strcs	r0, [r5], -r0
		syserror (ETOOMANY, "cc13");
    2670:	00134900 	andseq	r4, r3, r0, lsl #18
		syserror (EREQPAR, "cc13 mb");
    2674:	00350600 	eorseq	r0, r5, r0, lsl #12
	if (mbs == 0)
    2678:	00001349 	andeq	r1, r0, r9, asr #6
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    267c:	0b000f07 	bleq	62a0 <__exidx_end+0x154c>
		syserror (EREQPAR, "cc13 mb");
    2680:	0013490b 	andseq	r4, r3, fp, lsl #18
    2684:	01130800 	tsteq	r3, r0, lsl #16
	i = 0;
    2688:	0b3a0b0b 	bleq	e852bc <__ccfg+0xe65314>
	rbuffl = (byte) mbs;
    268c:	0b390b3b 	bleq	e45380 <__ccfg+0xe253d8>
		db->config.type = 0;	// General (data in structure)
    2690:	00001301 	andeq	r1, r0, r1, lsl #6
	rbuffl = (byte) mbs;
    2694:	03000d09 	movweq	r0, #3337	; 0xd09
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2698:	3b0b3a0e 	blcc	2d0ed8 <__ccfg+0x2b0f30>
    269c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		if (db == NULL)
    26a0:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
			syserror (EMALLOC, "cc13");
    26a4:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    26a8:	0a00000b 	beq	26dc <phys_cc1350+0x78>
    26ac:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		db->status = DATA_ENTRY_PENDING;
    26b0:	0b3b0b3a 	bleq	ec53a0 <__ccfg+0xea53f8>
		if (i)
    26b4:	13490b39 	movtne	r0, #39737	; 0x9b39
			da->pNextEntry = (byte*) db;
    26b8:	00000b38 	andeq	r0, r0, r8, lsr fp
		db->length = rbuffl + 2;
    26bc:	0300340b 	movweq	r3, #1035	; 0x40b
    26c0:	3b0b3a0e 	blcc	2d0f00 <__ccfg+0x2b0f58>
		db->config.type = 0;	// General (data in structure)
    26c4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		db->length = rbuffl + 2;
    26c8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
	db->pNextEntry = (byte*) re;
    26cc:	0c00000c 	stceq	0, cr0, [r0], {12}
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    26d0:	13490101 	movtne	r0, #37121	; 0x9101
    26d4:	00001301 	andeq	r1, r0, r1, lsl #6
	if (rbuffs == NULL)
    26d8:	0000210d 	andeq	r2, r0, sp, lsl #2
	rbuffs->pCurrEntry = (byte*) re;
    26dc:	00160e00 	andseq	r0, r6, r0, lsl #28
	rbuffs->pLastEntry = NULL;
    26e0:	0b3a0e03 	bleq	e85ef4 <__ccfg+0xe65f4c>
    26e4:	0b39053b 	bleq	e43bd8 <__ccfg+0xe23c30>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26e8:	00001349 	andeq	r1, r0, r9, asr #6
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    26ec:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    26f0:	0013010c 	andseq	r0, r3, ip, lsl #2
    26f4:	00051000 	andeq	r1, r5, r0
	rbuffl -= 2;
    26f8:	00001349 	andeq	r1, r0, r9, asr #6
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26fc:	03003411 	movweq	r3, #1041	; 0x411
	rbuffl -= 2;
    2700:	3b0b3a0e 	blcc	2d0f40 <__ccfg+0x2b0f98>
	physid = phy;
    2704:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2708:	3c0c3f13 	stccc	15, cr3, [ip], {19}
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    270c:	1200000c 	andne	r0, r0, #12
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2710:	0b0b0113 	bleq	2c2b64 <__ccfg+0x2a2bbc>
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2714:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2718:	13010b39 	movwne	r0, #6969	; 0x1b39
	utimer_add (&bckf_timer);
    271c:	0d130000 	ldceq	0, cr0, [r3, #-0]
	drvprcs = runthread (cc1350_driver);
    2720:	3a0e0300 	bcc	383328 <__ccfg+0x363380>
    2724:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2728:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
	if (drvprcs == 0)
    272c:	1400000b 	strne	r0, [r0], #-11
		syserror (ERESOURCE, "cc13");
    2730:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2734:	0b3a0b0b 	bleq	e85368 <__ccfg+0xe653c0>
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2738:	0b39053b 	bleq	e43c2c <__ccfg+0xe23c84>
    273c:	00001301 	andeq	r1, r0, r1, lsl #6
    2740:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2744:	000b2f13 	andeq	r2, fp, r3, lsl pc
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2748:	00341600 	eorseq	r1, r4, r0, lsl #12
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    274c:	0b3a0e03 	bleq	e85f60 <__ccfg+0xe65fb8>
    2750:	0b390b3b 	bleq	e45444 <__ccfg+0xe2549c>
    2754:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2638 <RFCCPE0IntHandler+0x44>
    2758:	00000a02 	andeq	r0, r0, r2, lsl #20
    275c:	3f012e17 	svccc	0x00012e17
    2760:	3a0e030c 	bcc	383398 <__ccfg+0x3633f0>
    2764:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2768:	110c270b 	tstne	ip, fp, lsl #14
    276c:	40011201 	andmi	r1, r1, r1, lsl #4
	plugch ();
    2770:	1800000a 	stmdane	r0, {r1, r3}
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2774:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2778:	0b3b0b3a 	bleq	ec5468 <__ccfg+0xea54c0>
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    277c:	13490b39 	movtne	r0, #39737	; 0x9b39
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2780:	00000602 	andeq	r0, r0, r2, lsl #12
    2784:	03003419 	movweq	r3, #1049	; 0x419
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2788:	3b0b3a0e 	blcc	2d0fc8 <__ccfg+0x2b1020>
}
    278c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2790:	00060213 	andeq	r0, r6, r3, lsl r2
    2794:	010b1a00 	tsteq	fp, r0, lsl #20
    2798:	00000655 	andeq	r0, r0, r5, asr r6
    279c:	0300341b 	movweq	r3, #1051	; 0x41b
    27a0:	3b0b3a08 	blcc	2d0fc8 <__ccfg+0x2b1020>
    27a4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    27a8:	000a0213 	andeq	r0, sl, r3, lsl r2
    27ac:	11010000 	mrsne	r0, (UNDEF: 1)
    27b0:	130e2501 	movwne	r2, #58625	; 0xe501
    27b4:	1b0e030b 	blne	3833e8 <__ccfg+0x363440>
    27b8:	1106550e 	tstne	r6, lr, lsl #10
    27bc:	00061001 	andeq	r1, r6, r1
    27c0:	00240200 	eoreq	r0, r4, r0, lsl #4
    27c4:	0b3e0b0b 	bleq	f853f8 <__ccfg+0xf65450>
    27c8:	00000e03 	andeq	r0, r0, r3, lsl #28
    27cc:	03001603 	movweq	r1, #1539	; 0x603
    27d0:	3b0b3a0e 	blcc	2d1010 <__ccfg+0x2b1068>
    27d4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    27d8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    27dc:	0b0b0024 	bleq	2c2874 <__ccfg+0x2a28cc>
    27e0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    27e4:	13050000 	movwne	r0, #20480	; 0x5000
    27e8:	0b0e0301 	bleq	3833f4 <__ccfg+0x36344c>
    27ec:	3b0b3a0b 	blcc	2d1020 <__ccfg+0x2b1078>
    27f0:	0013010b 	andseq	r0, r3, fp, lsl #2
    27f4:	000d0600 	andeq	r0, sp, r0, lsl #12
    27f8:	13490e03 	movtne	r0, #40451	; 0x9e03
    27fc:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
    2800:	0f070000 	svceq	0x00070000
    2804:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2808:	00260800 	eoreq	r0, r6, r0, lsl #16
    280c:	00001349 	andeq	r1, r0, r9, asr #6
    2810:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
    2814:	0a000013 	beq	2868 <tcv_ope_null+0x38>
    2818:	0b0b000f 	bleq	2c285c <__ccfg+0x2a28b4>
    281c:	00001349 	andeq	r1, r0, r9, asr #6
    2820:	0b01130b 	bleq	47454 <__ccfg+0x274ac>
    2824:	3b0b3a0b 	blcc	2d1058 <__ccfg+0x2b10b0>
    2828:	010b390b 	tsteq	fp, fp, lsl #18
    282c:	0c000013 	stceq	0, cr0, [r0], {19}
    2830:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2834:	0b3b0b3a 	bleq	ec5524 <__ccfg+0xea557c>
    2838:	13490b39 	movtne	r0, #39737	; 0x9b39
    283c:	0b0d0b0b 	bleq	345470 <__ccfg+0x3254c8>
    2840:	0b380b0c 	bleq	e05478 <__ccfg+0xde54d0>
    2844:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    2848:	3a0e0300 	bcc	383450 <__ccfg+0x3634a8>
    284c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2850:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2854:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    2858:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    285c:	0b3b0b3a 	bleq	ec554c <__ccfg+0xea55a4>
    2860:	13490b39 	movtne	r0, #39737	; 0x9b39
    2864:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    2868:	010f0000 	mrseq	r0, CPSR
    286c:	01134901 	tsteq	r3, r1, lsl #18
    2870:	10000013 	andne	r0, r0, r3, lsl r0
    2874:	00000021 	andeq	r0, r0, r1, lsr #32
strand (__outserial, const char*)
    2878:	03001611 	movweq	r1, #1553	; 0x611
    287c:	3b0b3a0e 	blcc	2d10bc <__ccfg+0x2b1114>
    2880:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2884:	12000013 	andne	r0, r0, #19
endstrand
    2888:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    288c:	00001301 	andeq	r1, r0, r1, lsl #6
	ptr = data;
    2890:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
    2894:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
	if (*ptr)
    2898:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		len = strlen (ptr);
    289c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    28a0:	13490b39 	movtne	r0, #39737	; 0x9b39
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    28a4:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    28a8:	13150000 	tstne	r5, #0
    28ac:	3a0b0b01 	bcc	2c54b8 <__ccfg+0x2a5510>
    28b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    28b4:	0013010b 	andseq	r0, r3, fp, lsl #2
	len -= quant;
    28b8:	000d1600 	andeq	r1, sp, r0, lsl #12
    28bc:	0b3a0e03 	bleq	e860d0 <__ccfg+0xe66128>
    28c0:	0b39053b 	bleq	e43db4 <__ccfg+0xe23e0c>
	if (len == 0) {
    28c4:	0b381349 	bleq	e075f0 <__ccfg+0xde7648>
		ufree (data);
    28c8:	13170000 	tstne	r7, #0
		finish;
    28cc:	0b0e0301 	bleq	3834d8 <__ccfg+0x363530>
    28d0:	3b0b3a0b 	blcc	2d1104 <__ccfg+0x2b115c>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    28d4:	010b3905 	tsteq	fp, r5, lsl #18
    28d8:	18000013 	stmdane	r0, {r0, r1, r4}
    28dc:	13490021 	movtne	r0, #36897	; 0x9021
    28e0:	00000b2f 	andeq	r0, r0, pc, lsr #22
    28e4:	3f012e19 	svccc	0x00012e19
strand (__inserial, address)
    28e8:	3a0e030c 	bcc	383520 <__ccfg+0x363578>
    28ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    28f0:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    28f4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    28f8:	010a4001 	tsteq	sl, r1
	if (__inpline != NULL)
    28fc:	1a000013 	bne	2950 <__inserial+0x68>
    2900:	08030005 	stmdaeq	r3, {r0, r2}
		finish;
    2904:	0b3b0b3a 	bleq	ec55f4 <__ccfg+0xea564c>
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    2908:	13490b39 	movtne	r0, #39737	; 0x9b39
    290c:	00000602 	andeq	r0, r0, r2, lsl #12
    2910:	0300341b 	movweq	r3, #1051	; 0x41b
    2914:	3b0b3a08 	blcc	2d113c <__ccfg+0x2b1194>
		umwait (IM_INIT);
    2918:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		release;
    291c:	00060213 	andeq	r0, r6, r3, lsl r2
	savedata (data);
    2920:	000a1c00 	andeq	r1, sl, r0, lsl #24
	len = MAX_LINE_LENGTH;
    2924:	0b3a0e03 	bleq	e86138 <__ccfg+0xe66190>
	io (IM_READ, __cport, READ, ptr, 1);
    2928:	0b390b3b 	bleq	e4561c <__ccfg+0xe25674>
    292c:	00000111 	andeq	r0, r0, r1, lsl r1
    2930:	3f012e1d 	svccc	0x00012e1d
    2934:	3a0e030c 	bcc	38356c <__ccfg+0x3635c4>
	if (ptr == (char*) data) { // new line
    2938:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    293c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
		if (*ptr == '\0') { // bin cmd
    2940:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
			proceed (IM_BIN);
    2944:	000a4001 	andeq	r4, sl, r1
    2948:	00341e00 	eorseq	r1, r4, r0, lsl #28
		if (*ptr < 0x20)
    294c:	0b3a0803 	bleq	e84960 <__ccfg+0xe649b8>
    2950:	0b390b3b 	bleq	e45644 <__ccfg+0xe2569c>
			proceed (IM_READ);
    2954:	0a021349 	beq	87680 <__ccfg+0x676d8>
    2958:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
	if (*ptr == '\n' || *ptr == '\r') {
    295c:	3a0e0301 	bcc	383568 <__ccfg+0x3635c0>
    2960:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2964:	110c270b 	tstne	ip, fp, lsl #14
		*ptr = '\0';
    2968:	40011201 	andmi	r1, r1, r1, lsl #4
		__inpline = (char*)data;
    296c:	010a480a 	tsteq	sl, sl, lsl #16
		finish;
    2970:	20000013 	andcs	r0, r0, r3, lsl r0
	if (len) {
    2974:	08030005 	stmdaeq	r3, {r0, r2}
		ptr++;
    2978:	0b3b0b3a 	bleq	ec5668 <__ccfg+0xea56c0>
    297c:	13490b39 	movtne	r0, #39737	; 0x9b39
		len--;
    2980:	00000a02 	andeq	r0, r0, r2, lsl #20
	proceed (IM_READ);
    2984:	03000a21 	movweq	r0, #2593	; 0xa21
	io (IM_BIN, __cport, READ, ptr, 1);
    2988:	3b0b3a08 	blcc	2d11b0 <__ccfg+0x2b1208>
    298c:	110b390b 	tstne	fp, fp, lsl #18
    2990:	22000001 	andcs	r0, r0, #1
    2994:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    2998:	00001301 	andeq	r1, r0, r1, lsl #6
	len -= 2;
    299c:	03003423 	movweq	r3, #1059	; 0x423
	if (len > *ptr + 1) // 1 for 0x04
    29a0:	3b0b3a08 	blcc	2d11c8 <__ccfg+0x2b1220>
    29a4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		len = *ptr + 1;
    29a8:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    29ac:	0111010b 	tsteq	r1, fp, lsl #2
	ptr++;
    29b0:	13010112 	movwne	r0, #4370	; 0x1112
	quant = io (IM_BINL, __cport, READ, ptr, len);
    29b4:	0b250000 	bleq	9429bc <__ccfg+0x922a14>
    29b8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    29bc:	00000001 	andeq	r0, r0, r1
    29c0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    29c4:	030b130e 	movweq	r1, #45838	; 0xb30e
    29c8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
	len -= quant;
    29cc:	10011106 	andne	r1, r1, r6, lsl #2
		__inpline = (char*)data;
    29d0:	02000006 	andeq	r0, r0, #6
		finish;
    29d4:	0b0b0024 	bleq	2c2a6c <__ccfg+0x2a2ac4>
	ptr += quant;
    29d8:	0e030b3e 	vmoveq.16	d3[0], r0
    29dc:	16030000 	strne	r0, [r3], -r0
endstrand
    29e0:	3a0e0300 	bcc	3835e8 <__ccfg+0x363640>
    29e4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	proceed (IM_BINL);
    29e8:	0013490b 	andseq	r4, r3, fp, lsl #18
endstrand
    29ec:	00240400 	eoreq	r0, r4, r0, lsl #8
    29f0:	0b3e0b0b 	bleq	f85624 <__ccfg+0xf6567c>
    29f4:	00000803 	andeq	r0, r0, r3, lsl #16
    29f8:	03011305 	movweq	r1, #4869	; 0x1305
    29fc:	3a0b0b0e 	bcc	2c563c <__ccfg+0x2a5694>
    2a00:	010b3b0b 	tsteq	fp, fp, lsl #22
		if (res && (d < n))
    2a04:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2a08:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2a0c:	0b381349 	bleq	e07738 <__ccfg+0xde7790>
    2a10:	00000c34 	andeq	r0, r0, r4, lsr ip
			res [d] = (char) c;
    2a14:	0b000f07 	bleq	6638 <__exidx_end+0x18e4>
		d++;
    2a18:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    2a1c:	13490026 	movtne	r0, #36902	; 0x9026
    2a20:	35090000 	strcc	r0, [r9, #-0]
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a24:	00134900 	andseq	r4, r3, r0, lsl #18
    2a28:	000f0a00 	andeq	r0, pc, r0, lsl #20
    2a2c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
				enci (10000);
    2a30:	130b0000 	movwne	r0, #45056	; 0xb000
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a34:	3a0b0b01 	bcc	2c5640 <__ccfg+0x2a5698>
    2a38:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	d = 0;
    2a3c:	0013010b 	andseq	r0, r3, fp, lsl #2
		c = *fm++;
    2a40:	000d0c00 	andeq	r0, sp, r0, lsl #24
		if (c == '\\') {
    2a44:	0b3a0e03 	bleq	e86258 <__ccfg+0xe662b0>
			if ((c = *fm++) == '\0') {
    2a48:	0b390b3b 	bleq	e4573c <__ccfg+0xe25794>
    2a4c:	0b0b1349 	bleq	2c7778 <__ccfg+0x2a77d0>
				outc ('\\');
    2a50:	0b0c0b0d 	bleq	30568c <__ccfg+0x2e56e4>
			if ((c = *fm++) == '\0') {
    2a54:	00000b38 	andeq	r0, r0, r8, lsr fp
				outc ('\\');
    2a58:	03000d0d 	movweq	r0, #3341	; 0xd0d
    2a5c:	3b0b3a0e 	blcc	2d129c <__ccfg+0x2b12f4>
			outc (c);
    2a60:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2a64:	000b3813 	andeq	r3, fp, r3, lsl r8
			if (c == '\0')
    2a68:	00340e00 	eorseq	r0, r4, r0, lsl #28
    2a6c:	0b3a0e03 	bleq	e86280 <__ccfg+0xe662d8>
			outc (c);
    2a70:	0b390b3b 	bleq	e45764 <__ccfg+0xe257bc>
				outc (val);
    2a74:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2958 <__inserial+0x70>
				val = (word) va_arg (ap, aword);
    2a78:	00000c3c 	andeq	r0, r0, ip, lsr ip
		if (c == '%') {
    2a7c:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
    2a80:	00130113 	andseq	r0, r3, r3, lsl r1
			c = *fm++;
    2a84:	00211000 	eoreq	r1, r1, r0
			switch (c) {
    2a88:	16110000 	ldrne	r0, [r1], -r0
    2a8c:	3a0e0300 	bcc	383694 <__ccfg+0x3636ec>
    2a90:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a94:	0013490b 	andseq	r4, r3, fp, lsl #18
    2a98:	01151200 	tsteq	r5, r0, lsl #4
    2a9c:	13010c27 	movwne	r0, #7207	; 0x1c27
    2aa0:	05130000 	ldreq	r0, [r3, #-0]
    2aa4:	00134900 	andseq	r4, r3, r0, lsl #18
				outc ('%');
    2aa8:	00341400 	eorseq	r1, r4, r0, lsl #8
    2aac:	0b3a0e03 	bleq	e862c0 <__ccfg+0xe66318>
				outc (c);
    2ab0:	0b39053b 	bleq	e43fa4 <__ccfg+0xe23ffc>
    2ab4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2998 <__inserial+0xb0>
    2ab8:	00000c3c 	andeq	r0, r0, ip, lsr ip
				if (c == '\0')
    2abc:	0b011315 	bleq	47718 <__ccfg+0x27770>
				return d;
    2ac0:	3b0b3a0b 	blcc	2d12f4 <__ccfg+0x2b134c>
}
    2ac4:	010b3905 	tsteq	fp, r5, lsl #18
    2ac8:	16000013 			; <UNDEFINED> instruction: 0x16000013
			switch (c) {
    2acc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2ad0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2ad4:	13490b39 	movtne	r0, #39737	; 0x9b39
				for (i = 12; ; i -= 4) {
    2ad8:	00000b38 	andeq	r0, r0, r8, lsr fp
				val = (word) va_arg (ap, aword);
    2adc:	03011317 	movweq	r1, #4887	; 0x1317
						[ (val >> i) & 0xf ]);
    2ae0:	3a0b0b0e 	bcc	2c5720 <__ccfg+0x2a5778>
    2ae4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ae8:	0013010b 	andseq	r0, r3, fp, lsl #2
					outc (__pi_hex_enc_table
    2aec:	00211800 	eoreq	r1, r1, r0, lsl #16
    2af0:	0b2f1349 	bleq	bc781c <__ccfg+0xba7874>
					if (i == 0)
    2af4:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    2af8:	030c3f01 	movweq	r3, #52993	; 0xcf01
				for (i = 12; ; i -= 4) {
    2afc:	3b0b3a0e 	blcc	2d133c <__ccfg+0x2b1394>
				val = (word) va_arg (ap, aword);
    2b00:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
				if (c == 'd' && (val & 0x8000) != 0) {
    2b04:	1113490c 	tstne	r3, ip, lsl #18
				val = (word) va_arg (ap, aword);
    2b08:	40011201 	andmi	r1, r1, r1, lsl #4
				if (c == 'd' && (val & 0x8000) != 0) {
    2b0c:	0013010a 	andseq	r0, r3, sl, lsl #2
    2b10:	00051a00 	andeq	r1, r5, r0, lsl #20
					outc ('-');
    2b14:	0b3a0803 	bleq	e84b28 <__ccfg+0xe64b80>
    2b18:	0b390b3b 	bleq	e4580c <__ccfg+0xe25864>
					val = (~val) + 1;
    2b1c:	06021349 	streq	r1, [r2], -r9, asr #6
    2b20:	341b0000 	ldrcc	r0, [fp], #-0
				for (i = 12; ; i -= 4) {
    2b24:	3a080300 	bcc	20372c <__ccfg+0x1e3784>
				enci (10000);
    2b28:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b2c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2b30:	1c000006 	stcne	0, cr0, [r0], {6}
    2b34:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    2b38:	0b3b0b3a 	bleq	ec5828 <__ccfg+0xea5880>
    2b3c:	00000b39 	andeq	r0, r0, r9, lsr fp
    2b40:	11010b1d 	tstne	r1, sp, lsl fp
    2b44:	01011201 	tsteq	r1, r1, lsl #4
    2b48:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    2b4c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2b50:	0b3b0b3a 	bleq	ec5840 <__ccfg+0xea5898>
    2b54:	13490b39 	movtne	r0, #39737	; 0x9b39
    2b58:	00000a02 	andeq	r0, r0, r2, lsl #20
    2b5c:	55010b1f 	strpl	r0, [r1, #-2847]	; 0xfffff4e1
    2b60:	00130106 	andseq	r0, r3, r6, lsl #2
    2b64:	00342000 	eorseq	r2, r4, r0
    2b68:	0b3a0803 	bleq	e84b7c <__ccfg+0xe64bd4>
    2b6c:	0b390b3b 	bleq	e45860 <__ccfg+0xe258b8>
				if (c == 'd' || c == 'u') {
    2b70:	00001349 	andeq	r1, r0, r9, asr #6
    2b74:	55010b21 	strpl	r0, [r1, #-2849]	; 0xfffff4df
					if (c == 'd' &&
    2b78:	00000006 	andeq	r0, r0, r6
					val = va_arg (ap, lword);
    2b7c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
					fm++;
    2b80:	030b130e 	movweq	r1, #45838	; 0xb30e
					if (c == 'd' &&
    2b84:	100e1b0e 	andne	r1, lr, lr, lsl #22
    2b88:	02000006 	andeq	r0, r0, #6
						outc ('-');
    2b8c:	0b0b0024 	bleq	2c2c24 <__ccfg+0x2a2c7c>
    2b90:	0e030b3e 	vmoveq.16	d3[0], r0
						val = (~val) + 1;
    2b94:	16030000 	strne	r0, [r3], -r0
				enci (10000);
    2b98:	3a0e0300 	bcc	3837a0 <__ccfg+0x3637f8>
					enci (1000000000UL);
    2b9c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ba0:	0013490b 	andseq	r4, r3, fp, lsl #18
    2ba4:	00260400 	eoreq	r0, r6, r0, lsl #8
    2ba8:	00001349 	andeq	r1, r0, r9, asr #6
    2bac:	0b002405 	bleq	bbc8 <__exidx_end+0x6e74>
    2bb0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2bb4:	06000008 	streq	r0, [r0], -r8
    2bb8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2bbc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2bc0:	13490b39 	movtne	r0, #39737	; 0x9b39
    2bc4:	17070000 	strne	r0, [r7, -r0]
    2bc8:	3a0b0b01 	bcc	2c57d4 <__ccfg+0x2a582c>
    2bcc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2bd0:	0013010b 	andseq	r0, r3, fp, lsl #2
    2bd4:	000d0800 	andeq	r0, sp, r0, lsl #16
    2bd8:	0b3a0e03 	bleq	e863ec <__ccfg+0xe66444>
    2bdc:	0b390b3b 	bleq	e458d0 <__ccfg+0xe25928>
				} else if (c == 'x') {
    2be0:	00001349 	andeq	r1, r0, r9, asr #6
					for (i = 28; ; i -= 4) {
    2be4:	49010109 	stmdbmi	r1, {r0, r3, r8}
					val = va_arg (ap, lword);
    2be8:	00130113 	andseq	r0, r3, r3, lsl r1
							[ (val >> i) & 0xf ]);
    2bec:	00210a00 	eoreq	r0, r1, r0, lsl #20
    2bf0:	0b2f1349 	bleq	bc791c <__ccfg+0xba7974>
						outc (__pi_hex_enc_table
    2bf4:	130b0000 	movwne	r0, #45056	; 0xb000
    2bf8:	3a0b0b01 	bcc	2c5804 <__ccfg+0x2a585c>
    2bfc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
						if (i == 0)
    2c00:	0013010b 	andseq	r0, r3, fp, lsl #2
    2c04:	000d0c00 	andeq	r0, sp, r0, lsl #24
					for (i = 28; ; i -= 4) {
    2c08:	0b3a0e03 	bleq	e8641c <__ccfg+0xe66474>
					outc ('%');
    2c0c:	0b390b3b 	bleq	e45900 <__ccfg+0xe25958>
    2c10:	0b381349 	bleq	e0793c <__ccfg+0xde7994>
    2c14:	0f0d0000 	svceq	0x000d0000
					outc ('l');
    2c18:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2c1c:	01130e00 	tsteq	r3, r0, lsl #28
				val = (word) va_arg (ap, aword);
    2c20:	0b0b0e03 	bleq	2c6434 <__ccfg+0x2a648c>
				outc (val);
    2c24:	0b3b0b3a 	bleq	ec5914 <__ccfg+0xea596c>
    2c28:	13010b39 	movwne	r0, #6969	; 0x1b39
				while (*st != '\0') {
    2c2c:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 2c34 <__pi_vfparse+0x210>
    2c30:	3a080300 	bcc	203838 <__ccfg+0x1e3890>
    2c34:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c38:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
					outc (*st);
    2c3c:	1000000b 	andne	r0, r0, fp
    2c40:	0b0b000f 	bleq	2c2c84 <__ccfg+0x2a2cdc>
					st++;
    2c44:	00001349 	andeq	r1, r0, r9, asr #6
		c = *fm++;
    2c48:	03011311 	movweq	r1, #4881	; 0x1311
    2c4c:	3a050b0e 	bcc	14588c <__ccfg+0x1258e4>
    2c50:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
char *vform (char *res, const char *fm, va_list aq) {
    2c54:	0013010b 	andseq	r0, r3, fp, lsl #2
    2c58:	000d1200 	andeq	r1, sp, r0, lsl #4
	if (res != NULL) {
    2c5c:	0b3a0e03 	bleq	e86470 <__ccfg+0xe664c8>
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2c60:	0b390b3b 	bleq	e45954 <__ccfg+0xe259ac>
    2c64:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    2c68:	15130000 	ldrne	r0, [r3, #-0]
}
    2c6c:	000c2700 	andeq	r2, ip, r0, lsl #14
    2c70:	01151400 	tsteq	r5, r0, lsl #8
	fml = strlen (fm) + 17;
    2c74:	13490c27 	movtne	r0, #39975	; 0x9c27
    2c78:	00001301 	andeq	r1, r0, r1, lsl #6
    2c7c:	49000515 	stmdbmi	r0, {r0, r2, r4, r8, sl}
	if ((res = (char*) umalloc (fml)) == NULL)
    2c80:	16000013 			; <UNDEFINED> instruction: 0x16000013
    2c84:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2c88:	0b3a050b 	bleq	e840bc <__ccfg+0xe64114>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2c8c:	0b39053b 	bleq	e44180 <__ccfg+0xe241d8>
    2c90:	00001301 	andeq	r1, r0, r1, lsl #6
    2c94:	03000d17 	movweq	r0, #3351	; 0xd17
    2c98:	3b0b3a0e 	blcc	2d14d8 <__ccfg+0x2b1530>
		ufree (res);
    2c9c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		goto Again;
    2ca0:	000b3813 	andeq	r3, fp, r3, lsl r8
	if (buf == NULL || fmt == NULL)
    2ca4:	000d1800 	andeq	r1, sp, r0, lsl #16
int vscan (const char *buf, const char *fmt, va_list ap) {
    2ca8:	0b3a0e03 	bleq	e864bc <__ccfg+0xe66514>
	if (buf == NULL || fmt == NULL)
    2cac:	0b39053b 	bleq	e441a0 <__ccfg+0xe241f8>
    2cb0:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    2cb4:	13190000 	tstne	r9, #0
		    	    case 'u': scanu (lword); break;
    2cb8:	0b0e0301 	bleq	3838c4 <__ccfg+0x36391c>
			while (isspace (*buf)) buf++;
    2cbc:	3b0b3a0b 	blcc	2d14f0 <__ccfg+0x2b1548>
    2cc0:	010b3905 	tsteq	fp, r5, lsl #18
	while (*fmt != '\0') {
    2cc4:	1a000013 	bne	2d18 <vscan+0x74>
		if (*fmt++ != '%')
    2cc8:	0b0b0113 	bleq	2c311c <__ccfg+0x2a3174>
		switch (*fmt++) {
    2ccc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2cd0:	13010b39 	movwne	r0, #6969	; 0x1b39
    2cd4:	171b0000 	ldrne	r0, [fp, -r0]
    2cd8:	3a0b0b01 	bcc	2c58e4 <__ccfg+0x2a593c>
    2cdc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ce0:	0013010b 	andseq	r0, r3, fp, lsl #2
    2ce4:	000d1c00 	andeq	r1, sp, r0, lsl #24
}
    2ce8:	0b3a0e03 	bleq	e864fc <__ccfg+0xe66554>
		switch (*fmt++) {
    2cec:	0b39053b 	bleq	e441e0 <__ccfg+0xe24238>
    2cf0:	00001349 	andeq	r1, r0, r9, asr #6
    2cf4:	0300131d 	movweq	r1, #797	; 0x31d
    2cf8:	000c3c0e 	andeq	r3, ip, lr, lsl #24
			while (isspace (*buf)) buf++;
    2cfc:	01151e00 	tsteq	r5, r0, lsl #28
    2d00:	13010c27 	movwne	r0, #7207	; 0x1c27
    2d04:	341f0000 	ldrcc	r0, [pc], #-0	; 2d0c <vscan+0x68>
    2d08:	3a0e0300 	bcc	383910 <__ccfg+0x363968>
    2d0c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2d10:	3f13490b 	svccc	0x0013490b
			if (*buf == '\0')
    2d14:	000c3c0c 	andeq	r3, ip, ip, lsl #24
			if (*buf != ',') {
    2d18:	000d2000 	andeq	r2, sp, r0
			sap = va_arg (ap, char*);
    2d1c:	0b3a0e03 	bleq	e86530 <__ccfg+0xe66588>
			nc++;
    2d20:	0b390b3b 	bleq	e45a14 <__ccfg+0xe25a6c>
			if (*buf != ',') {
    2d24:	0b0b1349 	bleq	2c7a50 <__ccfg+0x2a7aa8>
				while (!isspace (*buf) && *buf != ',' &&
    2d28:	0b0c0b0d 	bleq	305964 <__ccfg+0x2e59bc>
    2d2c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2d30:	03000d21 	movweq	r0, #3361	; 0xd21
    2d34:	3b0b3a0e 	blcc	2d1574 <__ccfg+0x2b15cc>
    2d38:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2d3c:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    2d40:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
			while (isspace (*buf)) buf++;
    2d44:	2200000b 	andcs	r0, r0, #11
    2d48:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2d4c:	0b3b0b3a 	bleq	ec5a3c <__ccfg+0xea5a94>
    2d50:	13490b39 	movtne	r0, #39737	; 0x9b39
    2d54:	0000031c 	andeq	r0, r0, ip, lsl r3
			if (*buf == ',') buf++;
    2d58:	49002123 	stmdbmi	r0, {r0, r1, r5, r8, sp}
    2d5c:	00052f13 	andeq	r2, r5, r3, lsl pc
			*sap = '\0';
    2d60:	00352400 	eorseq	r2, r5, r0, lsl #8
			break;
    2d64:	00001349 	andeq	r1, r0, r9, asr #6
		    case 'd': scani (word); break;
    2d68:	03003425 	movweq	r3, #1061	; 0x425
    2d6c:	3b0b3a0e 	blcc	2d15ac <__ccfg+0x2b1604>
    2d70:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2d74:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    2d78:	2600000c 	strcs	r0, [r0], -ip
    2d7c:	00000021 	andeq	r0, r0, r1, lsr #32
    2d80:	03003427 	movweq	r3, #1063	; 0x427
    2d84:	3b0b3a0e 	blcc	2d15c4 <__ccfg+0x2b161c>
    2d88:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2d8c:	000a0213 	andeq	r0, sl, r3, lsl r2
    2d90:	00342800 	eorseq	r2, r4, r0, lsl #16
    2d94:	0b3a1347 	bleq	e87ab8 <__ccfg+0xe67b10>
    2d98:	0b390b3b 	bleq	e45a8c <__ccfg+0xe25ae4>
    2d9c:	00000a02 	andeq	r0, r0, r2, lsl #20
    2da0:	01110100 	tsteq	r1, r0, lsl #2
    2da4:	0b130e25 	bleq	4c6640 <__ccfg+0x4a6698>
    2da8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2dac:	01111755 	tsteq	r1, r5, asr r7
    2db0:	00001710 	andeq	r1, r0, r0, lsl r7
    2db4:	0b002402 	bleq	bdc4 <__exidx_end+0x7070>
    2db8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2dbc:	0300000e 	movweq	r0, #14
    2dc0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2dc4:	0b3b0b3a 	bleq	ec5ab4 <__ccfg+0xea5b0c>
    2dc8:	00001349 	andeq	r1, r0, r9, asr #6
    2dcc:	0b002404 	bleq	bde4 <__exidx_end+0x7090>
    2dd0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2dd4:	05000008 	streq	r0, [r0, #-8]
		    case 'u': scanu (word); break;
    2dd8:	0b0b000f 	bleq	2c2e1c <__ccfg+0x2a2e74>
    2ddc:	00001349 	andeq	r1, r0, r9, asr #6
    2de0:	27001506 	strcs	r1, [r0, -r6, lsl #10]
    2de4:	07000019 	smladeq	r0, r9, r0, r0
    2de8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    2dec:	00001301 	andeq	r1, r0, r1, lsl #6
    2df0:	49000508 	stmdbmi	r0, {r3, r8, sl}
    2df4:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2df8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2dfc:	0b3a0e03 	bleq	e86610 <__ccfg+0xe66668>
    2e00:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2e04:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2e08:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    2e0c:	00130119 	andseq	r0, r3, r9, lsl r1
    2e10:	00050a00 	andeq	r0, r5, r0, lsl #20
    2e14:	0b3a0e03 	bleq	e86628 <__ccfg+0xe66680>
    2e18:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2e1c:	00001702 	andeq	r1, r0, r2, lsl #14
		    case 'x': scanx (word); break;
    2e20:	0300340b 	movweq	r3, #1035	; 0x40b
    2e24:	3b0b3a0e 	blcc	2d1664 <__ccfg+0x2b16bc>
    2e28:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2e2c:	0c000017 	stceq	0, cr0, [r0], {23}
    2e30:	00018289 	andeq	r8, r1, r9, lsl #5
    2e34:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2e38:	890d0000 	stmdbhi	sp, {}	; <UNPREDICTABLE>
    2e3c:	11000182 	smlabbne	r0, r2, r1, r0
    2e40:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    2e44:	00001331 	andeq	r1, r0, r1, lsr r3
    2e48:	3f012e0e 	svccc	0x00012e0e
    2e4c:	3a0e0319 	bcc	383ab8 <__ccfg+0x363b10>
    2e50:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2e54:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2e58:	97184006 	ldrls	r4, [r8, -r6]
    2e5c:	13011942 	movwne	r1, #6466	; 0x1942
    2e60:	890f0000 	stmdbhi	pc, {}	; <UNPREDICTABLE>
    2e64:	11010182 	smlabbne	r1, r2, r1, r0
    2e68:	00130101 	andseq	r0, r3, r1, lsl #2
    2e6c:	828a1000 	addhi	r1, sl, #0
    2e70:	18020001 	stmdane	r2, {r0}
    2e74:	00184291 	mulseq	r8, r1, r2
    2e78:	002e1100 	eoreq	r1, lr, r0, lsl #2
    2e7c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2e80:	0b3b0b3a 	bleq	ec5b70 <__ccfg+0xea5bc8>
    2e84:	13491927 	movtne	r1, #39207	; 0x9927
    2e88:	0000193c 	andeq	r1, r0, ip, lsr r9
    2e8c:	01110100 	tsteq	r1, r0, lsl #2
    2e90:	0b130e25 	bleq	4c672c <__ccfg+0x4a6784>
    2e94:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
			switch (*fmt++) {
    2e98:	01111755 	tsteq	r1, r5, asr r7
    2e9c:	00001710 	andeq	r1, r0, r0, lsl r7
    2ea0:	03001602 	movweq	r1, #1538	; 0x602
    2ea4:	3b0b3a0e 	blcc	2d16e4 <__ccfg+0x2b173c>
    2ea8:	0013490b 	andseq	r4, r3, fp, lsl #18
    2eac:	00240300 	eoreq	r0, r4, r0, lsl #6
		    	    case 'd': scani (lword); break;
    2eb0:	0b3e0b0b 	bleq	f85ae4 <__ccfg+0xf65b3c>
    2eb4:	00000e03 	andeq	r0, r0, r3, lsl #28
    2eb8:	0b002404 	bleq	bed0 <__exidx_end+0x717c>
    2ebc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2ec0:	05000008 	streq	r0, [r0, #-8]
    2ec4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2ec8:	0b3a0e03 	bleq	e866dc <__ccfg+0xe66734>
    2ecc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2ed0:	01111349 	tsteq	r1, r9, asr #6
    2ed4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2ed8:	00194297 	mulseq	r9, r7, r2
    2edc:	00340600 	eorseq	r0, r4, r0, lsl #12
    2ee0:	0b3a0e03 	bleq	e866f4 <__ccfg+0xe6674c>
    2ee4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2ee8:	00001702 	andeq	r1, r0, r2, lsl #14
    2eec:	03003407 	movweq	r3, #1031	; 0x407
    2ef0:	3b0b3a0e 	blcc	2d1730 <__ccfg+0x2b1788>
    2ef4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2ef8:	00000018 	andeq	r0, r0, r8, lsl r0
    2efc:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2f00:	030b130e 	movweq	r1, #45838	; 0xb30e
    2f04:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2f08:	10011117 	andne	r1, r1, r7, lsl r1
		    	    case 'x': scanx (lword); break;
    2f0c:	02000017 	andeq	r0, r0, #23
    2f10:	0b0b0024 	bleq	2c2fa8 <__ccfg+0x2a3000>
    2f14:	0e030b3e 	vmoveq.16	d3[0], r0
    2f18:	16030000 	strne	r0, [r3], -r0
    2f1c:	3a0e0300 	bcc	383b24 <__ccfg+0x363b7c>
    2f20:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2f24:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2f28:	0b0b0024 	bleq	2c2fc0 <__ccfg+0x2a3018>
    2f2c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2f30:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    2f34:	03193f01 	tsteq	r9, #1, 30
    2f38:	3b0b3a0e 	blcc	2d1778 <__ccfg+0x2b17d0>
    2f3c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2f40:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2f44:	97184006 	ldrls	r4, [r8, -r6]
    2f48:	13011942 	movwne	r1, #6466	; 0x1942
    2f4c:	34060000 	strcc	r0, [r6], #-0
    2f50:	3a0e0300 	bcc	383b58 <__ccfg+0x363bb0>
    2f54:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2f58:	00170213 	andseq	r0, r7, r3, lsl r2
    2f5c:	00340700 	eorseq	r0, r4, r0, lsl #14
    2f60:	0b3a0e03 	bleq	e86774 <__ccfg+0xe667cc>
    2f64:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2f68:	00001802 	andeq	r1, r0, r2, lsl #16
    2f6c:	0b011708 	bleq	48b94 <__ccfg+0x28bec>
    2f70:	3b0b3a0b 	blcc	2d17a4 <__ccfg+0x2b17fc>
    2f74:	0013010b 	andseq	r0, r3, fp, lsl #2
    2f78:	000d0900 	andeq	r0, sp, r0, lsl #18
		    	    case 'd': scani (lword); break;
    2f7c:	0b3a0e03 	bleq	e86790 <__ccfg+0xe667e8>
    2f80:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2f84:	340a0000 	strcc	r0, [sl], #-0
    2f88:	3a0e0300 	bcc	383b90 <__ccfg+0x363be8>
    2f8c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2f90:	0b000013 	bleq	2fe4 <vscan+0x340>
    2f94:	13490101 	movtne	r0, #37121	; 0x9101
		    	    case 'u': scanu (lword); break;
    2f98:	00001301 	andeq	r1, r0, r1, lsl #6
    2f9c:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
    2fa0:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2fa4:	11010000 	mrsne	r0, (UNDEF: 1)
    2fa8:	130e2501 	movwne	r2, #58625	; 0xe501
    2fac:	1b0e030b 	blne	383be0 <__ccfg+0x363c38>
    2fb0:	1117550e 	tstne	r7, lr, lsl #10
    2fb4:	00171001 	andseq	r1, r7, r1
    2fb8:	00240200 	eoreq	r0, r4, r0, lsl #4
    2fbc:	0b3e0b0b 	bleq	f85bf0 <__ccfg+0xf65c48>
    2fc0:	00000e03 	andeq	r0, r0, r3, lsl #28
    2fc4:	03001603 	movweq	r1, #1539	; 0x603
    2fc8:	3b0b3a0e 	blcc	2d1808 <__ccfg+0x2b1860>
    2fcc:	0013490b 	andseq	r4, r3, fp, lsl #18
    2fd0:	00240400 	eoreq	r0, r4, r0, lsl #8
    2fd4:	0b3e0b0b 	bleq	f85c08 <__ccfg+0xf65c60>
    2fd8:	00000803 	andeq	r0, r0, r3, lsl #16
    2fdc:	3f012e05 	svccc	0x00012e05
		    	    case 'x': scanx (lword); break;
    2fe0:	3a0e0319 	bcc	383c4c <__ccfg+0x363ca4>
    2fe4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
			if ((c = *buf++) == '\0')
    2fe8:	11134919 	tstne	r3, r9, lsl r9
    2fec:	40061201 	andmi	r1, r6, r1, lsl #4
			sap = va_arg (ap, char*);
    2ff0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
			nc++;
    2ff4:	00001301 	andeq	r1, r0, r1, lsl #6
			break;
    2ff8:	03003406 	movweq	r3, #1030	; 0x406
			while (isspace (*buf)) buf++;
    2ffc:	3b0b3a0e 	blcc	2d183c <__ccfg+0x2b1894>
    3000:	0013490b 	andseq	r4, r3, fp, lsl #18
    3004:	00340700 	eorseq	r0, r4, r0, lsl #14
						*sap++ = *buf++;
    3008:	0b3a0e03 	bleq	e8681c <__ccfg+0xe66874>
    300c:	1349053b 	movtne	r0, #38203	; 0x953b
			while (isspace (*buf)) buf++;
    3010:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    3014:	03193f01 	tsteq	r9, #1, 30
    3018:	3b0b3a0e 	blcc	2d1858 <__ccfg+0x2b18b0>
		return 0;
    301c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3020:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		    case 'x': scanx (word); break;
    3024:	97184006 	ldrls	r4, [r8, -r6]
    3028:	13011942 	movwne	r1, #6466	; 0x1942
		    	    case 'x': scanx (lword); break;
    302c:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
    3030:	03193f01 	tsteq	r9, #1, 30
    3034:	3b0b3a0e 	blcc	2d1874 <__ccfg+0x2b18cc>
    3038:	11192705 	tstne	r9, r5, lsl #14
    303c:	40061201 	andmi	r1, r6, r1, lsl #4
    3040:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3044:	050a0000 	streq	r0, [sl, #-0]
    3048:	3a0e0300 	bcc	383c50 <__ccfg+0x363ca8>
    304c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3050:	00180213 	andseq	r0, r8, r3, lsl r2
    3054:	11010000 	mrsne	r0, (UNDEF: 1)
    3058:	130e2501 	movwne	r2, #58625	; 0xe501
    305c:	1b0e030b 	blne	383c90 <__ccfg+0x363ce8>
    3060:	1117550e 	tstne	r7, lr, lsl #10
    3064:	00171001 	andseq	r1, r7, r1
    3068:	00240200 	eoreq	r0, r4, r0, lsl #4
    306c:	0b3e0b0b 	bleq	f85ca0 <__ccfg+0xf65cf8>
    3070:	00000e03 	andeq	r0, r0, r3, lsl #28
    3074:	03001603 	movweq	r1, #1539	; 0x603
    3078:	3b0b3a0e 	blcc	2d18b8 <__ccfg+0x2b1910>
    307c:	0013490b 	andseq	r4, r3, fp, lsl #18
    3080:	00240400 	eoreq	r0, r4, r0, lsl #8
    3084:	0b3e0b0b 	bleq	f85cb8 <__ccfg+0xf65d10>
    3088:	00000803 	andeq	r0, r0, r3, lsl #16
    308c:	0b000f05 	bleq	6ca8 <__exidx_end+0x1f54>
    3090:	0013490b 	andseq	r4, r3, fp, lsl #18
    3094:	00150600 	andseq	r0, r5, r0, lsl #12
    3098:	00001927 	andeq	r1, r0, r7, lsr #18
    309c:	27011507 	strcs	r1, [r1, -r7, lsl #10]
    30a0:	00130119 	andseq	r0, r3, r9, lsl r1
    30a4:	00050800 	andeq	r0, r5, r0, lsl #16
    30a8:	00001349 	andeq	r1, r0, r9, asr #6
    30ac:	27011509 	strcs	r1, [r1, -r9, lsl #10]
    30b0:	01134919 	tsteq	r3, r9, lsl r9
    30b4:	0a000013 	beq	3108 <NOROM_OSCClockSourceSet+0x34>
    30b8:	19270015 	stmdbne	r7!, {r0, r2, r4}
    30bc:	00001349 	andeq	r1, r0, r9, asr #6
    30c0:	0b01130b 	bleq	47cf4 <__ccfg+0x27d4c>
    30c4:	3b0b3a0b 	blcc	2d18f8 <__ccfg+0x2b1950>
    30c8:	0013010b 	andseq	r0, r3, fp, lsl #2
    30cc:	000d0c00 	andeq	r0, sp, r0, lsl #24
    30d0:	0b3a0e03 	bleq	e868e4 <__ccfg+0xe6693c>
    30d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    30d8:	00000b38 	andeq	r0, r0, r8, lsr fp
    30dc:	3f012e0d 	svccc	0x00012e0d
    30e0:	3a0e0319 	bcc	383d4c <__ccfg+0x363da4>
    30e4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    30e8:	010b2019 	tsteq	fp, r9, lsl r0
    30ec:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    30f0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    30f4:	0b3b0b3a 	bleq	ec5de4 <__ccfg+0xea5e3c>
    30f8:	00001349 	andeq	r1, r0, r9, asr #6
    30fc:	3f012e0f 	svccc	0x00012e0f
    3100:	3a0e0319 	bcc	383d6c <__ccfg+0x363dc4>
    3104:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3108:	20134919 	andscs	r4, r3, r9, lsl r9
    310c:	0013010b 	andseq	r0, r3, fp, lsl #2
    3110:	00341000 	eorseq	r1, r4, r0
    3114:	0b3a0e03 	bleq	e86928 <__ccfg+0xe66980>
    3118:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    311c:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
    3120:	11133101 	tstne	r3, r1, lsl #2
    3124:	40061201 	andmi	r1, r6, r1, lsl #4
    3128:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    312c:	00001301 	andeq	r1, r0, r1, lsl #6
    3130:	31000512 	tstcc	r0, r2, lsl r5
    3134:	00170213 	andseq	r0, r7, r3, lsl r2
    3138:	010b1300 	mrseq	r1, (UNDEF: 59)
    313c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3140:	00001301 	andeq	r1, r0, r1, lsl #6
    3144:	01828914 	orreq	r8, r2, r4, lsl r9
    3148:	93011101 	movwls	r1, #4353	; 0x1101
    314c:	00001842 	andeq	r1, r0, r2, asr #16
    3150:	01828a15 	orreq	r8, r2, r5, lsl sl
    3154:	91180200 	tstls	r8, r0, lsl #4
    3158:	00001842 	andeq	r1, r0, r2, asr #16
    315c:	01828916 	orreq	r8, r2, r6, lsl r9
    3160:	93011101 	movwls	r1, #4353	; 0x1101
    3164:	13011842 	movwne	r1, #6210	; 0x1842
    3168:	34170000 	ldrcc	r0, [r7], #-0
    316c:	02133100 	andseq	r3, r3, #0, 2
    3170:	18000018 	stmdane	r0, {r3, r4}
    3174:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    3178:	00001301 	andeq	r1, r0, r1, lsl #6
    317c:	31000519 	tstcc	r0, r9, lsl r5
    3180:	000b1c13 	andeq	r1, fp, r3, lsl ip
    3184:	010b1a00 	tsteq	fp, r0, lsl #20
    3188:	00001755 	andeq	r1, r0, r5, asr r7
    318c:	3100341b 	tstcc	r0, fp, lsl r4
    3190:	1c000013 	stcne	0, cr0, [r0], {19}
    3194:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3198:	0b3a0e03 	bleq	e869ac <__ccfg+0xe66a04>
    319c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    31a0:	01111349 	tsteq	r1, r9, asr #6
    31a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    31a8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    31ac:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    31b0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    31b4:	0b3b0b3a 	bleq	ec5ea4 <__ccfg+0xea5efc>
    31b8:	17021349 	strne	r1, [r2, -r9, asr #6]
    31bc:	341e0000 	ldrcc	r0, [lr], #-0
    31c0:	3a0e0300 	bcc	383dc8 <__ccfg+0x363e20>
    31c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    31c8:	00170213 	andseq	r0, r7, r3, lsl r2
    31cc:	82891f00 	addhi	r1, r9, #0, 30
    31d0:	01110001 	tsteq	r1, r1
    31d4:	00001331 	andeq	r1, r0, r1, lsr r3
    31d8:	3f012e20 	svccc	0x00012e20
    31dc:	3a0e0319 	bcc	383e48 <__ccfg+0x363ea0>
    31e0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    31e4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    31e8:	97184006 	ldrls	r4, [r8, -r6]
    31ec:	13011942 	movwne	r1, #6466	; 0x1942
    31f0:	89210000 	stmdbhi	r1!, {}	; <UNPREDICTABLE>
    31f4:	11010182 	smlabbne	r1, r2, r1, r0
    31f8:	01133101 	tsteq	r3, r1, lsl #2
    31fc:	22000013 	andcs	r0, r0, #19
    3200:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    3204:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3208:	13491927 	movtne	r1, #39207	; 0x9927
    320c:	00000b20 	andeq	r0, r0, r0, lsr #22
    3210:	03002e23 	movweq	r2, #3619	; 0xe23
    3214:	3b0b3a0e 	blcc	2d1a54 <__ccfg+0x2b1aac>
    3218:	20192705 	andscs	r2, r9, r5, lsl #14
    321c:	2400000b 	strcs	r0, [r0], #-11
    3220:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3224:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3228:	17021349 	strne	r1, [r2, -r9, asr #6]
    322c:	1d250000 	stcne	0, cr0, [r5, #-0]
    3230:	11133101 	tstne	r3, r1, lsl #2
    3234:	58061201 	stmdapl	r6, {r0, r9, ip}
    3238:	0105590b 	tsteq	r5, fp, lsl #18
    323c:	26000013 			; <UNDEFINED> instruction: 0x26000013
    3240:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3244:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3248:	17021349 	strne	r1, [r2, -r9, asr #6]
    324c:	34270000 	strtcc	r0, [r7], #-0
    3250:	3a0e0300 	bcc	383e58 <__ccfg+0x363eb0>
    3254:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3258:	00180213 	andseq	r0, r8, r3, lsl r2
    325c:	00342800 	eorseq	r2, r4, r0, lsl #16
    3260:	0b3a0803 	bleq	e85274 <__ccfg+0xe652cc>
    3264:	1349053b 	movtne	r0, #38203	; 0x953b
    3268:	00001702 	andeq	r1, r0, r2, lsl #14
    326c:	03003429 	movweq	r3, #1065	; 0x429
    3270:	3b0b3a0e 	blcc	2d1ab0 <__ccfg+0x2b1b08>
    3274:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3278:	2a000018 	bcs	32e0 <NOROM_RFCRfTrimRead+0x64>
    327c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3280:	0b3a0e03 	bleq	e86a94 <__ccfg+0xe66aec>
    3284:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3288:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    328c:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
    3290:	03193f00 	tsteq	r9, #0, 30
    3294:	3b0b3a0e 	blcc	2d1ad4 <__ccfg+0x2b1b2c>
    3298:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    329c:	00193c13 	andseq	r3, r9, r3, lsl ip
    32a0:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
    32a4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    32a8:	0b3b0b3a 	bleq	ec5f98 <__ccfg+0xea5ff0>
    32ac:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    32b0:	01000000 	mrseq	r0, (UNDEF: 0)
    32b4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    32b8:	0e030b13 	vmoveq.32	d3[0], r0
    32bc:	17550e1b 	smmlane	r5, fp, lr, r0
    32c0:	17100111 			; <UNDEFINED> instruction: 0x17100111
    32c4:	24020000 	strcs	r0, [r2], #-0
    32c8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    32cc:	000e030b 	andeq	r0, lr, fp, lsl #6
    32d0:	00160300 	andseq	r0, r6, r0, lsl #6
    32d4:	0b3a0e03 	bleq	e86ae8 <__ccfg+0xe66b40>
    32d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    32dc:	24040000 	strcs	r0, [r4], #-0
    32e0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    32e4:	0008030b 	andeq	r0, r8, fp, lsl #6
    32e8:	000f0500 	andeq	r0, pc, r0, lsl #10
    32ec:	00000b0b 	andeq	r0, r0, fp, lsl #22
    32f0:	0b000f06 	bleq	6f10 <__exidx_end+0x21bc>
    32f4:	0013490b 	andseq	r4, r3, fp, lsl #18
    32f8:	01130700 	tsteq	r3, r0, lsl #14
    32fc:	0b0b0e03 	bleq	2c6b10 <__ccfg+0x2a6b68>
    3300:	0b3b0b3a 	bleq	ec5ff0 <__ccfg+0xea6048>
    3304:	00001301 	andeq	r1, r0, r1, lsl #6
    3308:	03000d08 	movweq	r0, #3336	; 0xd08
    330c:	3b0b3a0e 	blcc	2d1b4c <__ccfg+0x2b1ba4>
    3310:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    3314:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    3318:	0b0b0113 	bleq	2c376c <__ccfg+0x2a37c4>
    331c:	0b3b0b3a 	bleq	ec600c <__ccfg+0xea6064>
    3320:	00001301 	andeq	r1, r0, r1, lsl #6
    3324:	03000d0a 	movweq	r0, #3338	; 0xd0a
    3328:	3b0b3a0e 	blcc	2d1b68 <__ccfg+0x2b1bc0>
    332c:	0b13490b 	bleq	4d5760 <__ccfg+0x4b57b8>
    3330:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    3334:	000b380b 	andeq	r3, fp, fp, lsl #16
    3338:	01130b00 	tsteq	r3, r0, lsl #22
    333c:	0b0b0e03 	bleq	2c6b50 <__ccfg+0x2a6ba8>
    3340:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3344:	00001301 	andeq	r1, r0, r1, lsl #6
    3348:	03000d0c 	movweq	r0, #3340	; 0xd0c
    334c:	3b0b3a0e 	blcc	2d1b8c <__ccfg+0x2b1be4>
    3350:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    3354:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    3358:	0b0b0113 	bleq	2c37ac <__ccfg+0x2a3804>
    335c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3360:	00001301 	andeq	r1, r0, r1, lsl #6
    3364:	03000d0e 	movweq	r0, #3342	; 0xd0e
    3368:	3b0b3a0e 	blcc	2d1ba8 <__ccfg+0x2b1c00>
    336c:	0b134905 	bleq	4d5788 <__ccfg+0x4b57e0>
    3370:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    3374:	000b380b 	andeq	r3, fp, fp, lsl #16
    3378:	002e0f00 	eoreq	r0, lr, r0, lsl #30
    337c:	0b3a0e03 	bleq	e86b90 <__ccfg+0xe66be8>
    3380:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3384:	00000b20 	andeq	r0, r0, r0, lsr #22
    3388:	3f012e10 	svccc	0x00012e10
    338c:	3a0e0319 	bcc	383ff8 <__ccfg+0x364050>
    3390:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3394:	11134919 	tstne	r3, r9, lsl r9
    3398:	40061201 	andmi	r1, r6, r1, lsl #4
    339c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    33a0:	00001301 	andeq	r1, r0, r1, lsl #6
    33a4:	03003411 	movweq	r3, #1041	; 0x411
    33a8:	3b0b3a0e 	blcc	2d1be8 <__ccfg+0x2b1c40>
    33ac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    33b0:	12000018 	andne	r0, r0, #24
    33b4:	08030005 	stmdaeq	r3, {r0, r2}
    33b8:	0b3b0b3a 	bleq	ec60a8 <__ccfg+0xea6100>
    33bc:	17021349 	strne	r1, [r2, -r9, asr #6]
    33c0:	1d130000 	ldcne	0, cr0, [r3, #-0]
    33c4:	11133100 	tstne	r3, r0, lsl #2
    33c8:	58061201 	stmdapl	r6, {r0, r9, ip}
    33cc:	000b590b 	andeq	r5, fp, fp, lsl #18
    33d0:	002e1400 	eoreq	r1, lr, r0, lsl #8
    33d4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    33d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    33dc:	01111927 	tsteq	r1, r7, lsr #18
    33e0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    33e4:	00194297 	mulseq	r9, r7, r2
    33e8:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
    33ec:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    33f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    33f4:	01111927 	tsteq	r1, r7, lsr #18
    33f8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    33fc:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3400:	16000013 			; <UNDEFINED> instruction: 0x16000013
    3404:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3408:	0b3b0b3a 	bleq	ec60f8 <__ccfg+0xea6150>
    340c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    3410:	34170000 	ldrcc	r0, [r7], #-0
    3414:	3a0e0300 	bcc	38401c <__ccfg+0x364074>
    3418:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    341c:	00170213 	andseq	r0, r7, r3, lsl r2
    3420:	00051800 	andeq	r1, r5, r0, lsl #16
    3424:	0b3a0e03 	bleq	e86c38 <__ccfg+0xe66c90>
    3428:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    342c:	00001702 	andeq	r1, r0, r2, lsl #14
    3430:	03003419 	movweq	r3, #1049	; 0x419
    3434:	3b0b3a0e 	blcc	2d1c74 <__ccfg+0x2b1ccc>
    3438:	0013490b 	andseq	r4, r3, fp, lsl #18
    343c:	00051a00 	andeq	r1, r5, r0, lsl #20
    3440:	0b3a0e03 	bleq	e86c54 <__ccfg+0xe66cac>
    3444:	1349053b 	movtne	r0, #38203	; 0x953b
    3448:	00001702 	andeq	r1, r0, r2, lsl #14
    344c:	0300341b 	movweq	r3, #1051	; 0x41b
    3450:	3b0b3a0e 	blcc	2d1c90 <__ccfg+0x2b1ce8>
    3454:	1c134905 			; <UNDEFINED> instruction: 0x1c134905
    3458:	1c000006 	stcne	0, cr0, [r0], {6}
    345c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    3460:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3464:	17021349 	strne	r1, [r2, -r9, asr #6]
    3468:	891d0000 	ldmdbhi	sp, {}	; <UNPREDICTABLE>
    346c:	11010182 	smlabbne	r1, r2, r1, r0
    3470:	00133101 	andseq	r3, r3, r1, lsl #2
    3474:	828a1e00 	addhi	r1, sl, #0, 28
    3478:	18020001 	stmdane	r2, {r0}
    347c:	00184291 	mulseq	r8, r1, r2
    3480:	00051f00 	andeq	r1, r5, r0, lsl #30
    3484:	0b3a0e03 	bleq	e86c98 <__ccfg+0xe66cf0>
    3488:	1349053b 	movtne	r0, #38203	; 0x953b
    348c:	00001802 	andeq	r1, r0, r2, lsl #16
    3490:	49010120 	stmdbmi	r1, {r5, r8}
    3494:	00130113 	andseq	r0, r3, r3, lsl r1
    3498:	00212100 	eoreq	r2, r1, r0, lsl #2
    349c:	0b2f1349 	bleq	bc81c8 <__ccfg+0xba8220>
    34a0:	34220000 	strtcc	r0, [r2], #-0
    34a4:	3a0e0300 	bcc	3840ac <__ccfg+0x364104>
    34a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    34ac:	000a1c13 	andeq	r1, sl, r3, lsl ip
    34b0:	00262300 	eoreq	r2, r6, r0, lsl #6
    34b4:	00001349 	andeq	r1, r0, r9, asr #6
    34b8:	3f012e24 	svccc	0x00012e24
    34bc:	3a0e0319 	bcc	384128 <__ccfg+0x364180>
    34c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    34c4:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    34c8:	25000019 	strcs	r0, [r0, #-25]	; 0xffffffe7
    34cc:	13490005 	movtne	r0, #36869	; 0x9005
    34d0:	01000000 	mrseq	r0, (UNDEF: 0)
    34d4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    34d8:	0e030b13 	vmoveq.32	d3[0], r0
    34dc:	17550e1b 	smmlane	r5, fp, lr, r0
    34e0:	17100111 			; <UNDEFINED> instruction: 0x17100111
    34e4:	24020000 	strcs	r0, [r2], #-0
    34e8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    34ec:	000e030b 	andeq	r0, lr, fp, lsl #6
    34f0:	00160300 	andseq	r0, r6, r0, lsl #6
    34f4:	0b3a0e03 	bleq	e86d08 <__ccfg+0xe66d60>
    34f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    34fc:	24040000 	strcs	r0, [r4], #-0
    3500:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3504:	0008030b 	andeq	r0, r8, fp, lsl #6
    3508:	002e0500 	eoreq	r0, lr, r0, lsl #10
    350c:	0b3a0e03 	bleq	e86d20 <__ccfg+0xe66d78>
    3510:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3514:	00000b20 	andeq	r0, r0, r0, lsr #22
    3518:	03002e06 	movweq	r2, #3590	; 0xe06
    351c:	3b0b3a0e 	blcc	2d1d5c <__ccfg+0x2b1db4>
    3520:	2019270b 	andscs	r2, r9, fp, lsl #14
    3524:	0700000b 	streq	r0, [r0, -fp]
    3528:	0e03012e 	adfeqsp	f0, f3, #0.5
    352c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3530:	01111927 	tsteq	r1, r7, lsr #18
    3534:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3538:	01194297 			; <UNDEFINED> instruction: 0x01194297
    353c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3540:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3544:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3548:	17021349 	strne	r1, [r2, -r9, asr #6]
    354c:	34090000 	strcc	r0, [r9], #-0
    3550:	3a0e0300 	bcc	384158 <__ccfg+0x3641b0>
    3554:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3558:	00170213 	andseq	r0, r7, r3, lsl r2
    355c:	001d0a00 	andseq	r0, sp, r0, lsl #20
    3560:	01111331 	tsteq	r1, r1, lsr r3
    3564:	0b580612 	bleq	1604db4 <__ccfg+0x15e4e0c>
    3568:	00000559 	andeq	r0, r0, r9, asr r5
    356c:	11010b0b 	tstne	r1, fp, lsl #22
    3570:	01061201 	tsteq	r6, r1, lsl #4
    3574:	0c000013 	stceq	0, cr0, [r0], {19}
    3578:	01018289 	smlabbeq	r1, r9, r2, r8
    357c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3580:	00001301 	andeq	r1, r0, r1, lsl #6
    3584:	01828a0d 	orreq	r8, r2, sp, lsl #20
    3588:	91180200 	tstls	r8, r0, lsl #4
    358c:	00001842 	andeq	r1, r0, r2, asr #16
    3590:	0182890e 	orreq	r8, r2, lr, lsl #18
    3594:	00011101 	andeq	r1, r1, r1, lsl #2
    3598:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
    359c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    35a0:	0b3b0b3a 	bleq	ec6290 <__ccfg+0xea62e8>
    35a4:	01111927 	tsteq	r1, r7, lsr #18
    35a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    35ac:	01194297 			; <UNDEFINED> instruction: 0x01194297
    35b0:	10000013 	andne	r0, r0, r3, lsl r0
    35b4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    35b8:	0b3b0b3a 	bleq	ec62a8 <__ccfg+0xea6300>
    35bc:	17021349 	strne	r1, [r2, -r9, asr #6]
    35c0:	89110000 	ldmdbhi	r1, {}	; <UNPREDICTABLE>
    35c4:	11000182 	smlabbne	r0, r2, r1, r0
    35c8:	00133101 	andseq	r3, r3, r1, lsl #2
    35cc:	82891200 	addhi	r1, r9, #0, 4
    35d0:	01110101 	tsteq	r1, r1, lsl #2
    35d4:	00001331 	andeq	r1, r0, r1, lsr r3
    35d8:	3f012e13 	svccc	0x00012e13
    35dc:	3a0e0319 	bcc	384248 <__ccfg+0x3642a0>
    35e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    35e4:	01193c19 	tsteq	r9, r9, lsl ip
    35e8:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    35ec:	13490005 	movtne	r0, #36869	; 0x9005
    35f0:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
    35f4:	03193f00 	tsteq	r9, #0, 30
    35f8:	3b0b3a0e 	blcc	2d1e38 <__ccfg+0x2b1e90>
    35fc:	3c192705 	ldccc	7, cr2, [r9], {5}
    3600:	16000019 			; <UNDEFINED> instruction: 0x16000019
    3604:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3608:	0b3a0e03 	bleq	e86e1c <__ccfg+0xe66e74>
    360c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3610:	0000193c 	andeq	r1, r0, ip, lsr r9
    3614:	01110100 	tsteq	r1, r0, lsl #2
    3618:	0b130e25 	bleq	4c6eb4 <__ccfg+0x4a6f0c>
    361c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    3620:	01111755 	tsteq	r1, r5, asr r7
    3624:	00001710 	andeq	r1, r0, r0, lsl r7
    3628:	0b002402 	bleq	c638 <__exidx_end+0x78e4>
    362c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3630:	0300000e 	movweq	r0, #14
    3634:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3638:	0b3b0b3a 	bleq	ec6328 <__ccfg+0xea6380>
    363c:	00001349 	andeq	r1, r0, r9, asr #6
    3640:	0b002404 	bleq	c658 <__exidx_end+0x7904>
    3644:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3648:	05000008 	streq	r0, [r0, #-8]
    364c:	0e03012e 	adfeqsp	f0, f3, #0.5
    3650:	0b3b0b3a 	bleq	ec6340 <__ccfg+0xea6398>
    3654:	13491927 	movtne	r1, #39207	; 0x9927
    3658:	13010b20 	movwne	r0, #6944	; 0x1b20
    365c:	05060000 	streq	r0, [r6, #-0]
    3660:	3a0e0300 	bcc	384268 <__ccfg+0x3642c0>
    3664:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3668:	07000013 	smladeq	r0, r3, r0, r0
    366c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3670:	0b3b0b3a 	bleq	ec6360 <__ccfg+0xea63b8>
    3674:	00001349 	andeq	r1, r0, r9, asr #6
    3678:	3f012e08 	svccc	0x00012e08
    367c:	3a0e0319 	bcc	3842e8 <__ccfg+0x364340>
    3680:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3684:	20134919 	andscs	r4, r3, r9, lsl r9
    3688:	0013010b 	andseq	r0, r3, fp, lsl #2
    368c:	00050900 	andeq	r0, r5, r0, lsl #18
    3690:	0b3a0e03 	bleq	e86ea4 <__ccfg+0xe66efc>
    3694:	1349053b 	movtne	r0, #38203	; 0x953b
    3698:	340a0000 	strcc	r0, [sl], #-0
    369c:	3a0e0300 	bcc	3842a4 <__ccfg+0x3642fc>
    36a0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    36a4:	0b000013 	bleq	36f8 <NOROM_SetupSetVddrLevel+0x60>
    36a8:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    36ac:	0b3b0b3a 	bleq	ec639c <__ccfg+0xea63f4>
    36b0:	0b201927 	bleq	809b54 <__ccfg+0x7e9bac>
    36b4:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
    36b8:	03193f01 	tsteq	r9, #1, 30
    36bc:	3b0b3a0e 	blcc	2d1efc <__ccfg+0x2b1f54>
    36c0:	11192705 	tstne	r9, r5, lsl #14
    36c4:	40061201 	andmi	r1, r6, r1, lsl #4
    36c8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    36cc:	00001301 	andeq	r1, r0, r1, lsl #6
    36d0:	0300050d 	movweq	r0, #1293	; 0x50d
    36d4:	3b0b3a0e 	blcc	2d1f14 <__ccfg+0x2b1f6c>
    36d8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    36dc:	0e000017 	mcreq	0, 0, r0, cr0, cr7, {0}
    36e0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    36e4:	0b3b0b3a 	bleq	ec63d4 <__ccfg+0xea642c>
    36e8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    36ec:	340f0000 	strcc	r0, [pc], #-0	; 36f4 <NOROM_SetupSetVddrLevel+0x5c>
    36f0:	3a0e0300 	bcc	3842f8 <__ccfg+0x364350>
    36f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    36f8:	00170213 	andseq	r0, r7, r3, lsl r2
    36fc:	011d1000 	tsteq	sp, r0
    3700:	01521331 	cmpeq	r2, r1, lsr r3
    3704:	0b581755 	bleq	1609460 <__ccfg+0x15e94b8>
    3708:	13010b59 	movwne	r0, #7001	; 0x1b59
    370c:	05110000 	ldreq	r0, [r1, #-0]
    3710:	00133100 	andseq	r3, r3, r0, lsl #2
    3714:	010b1200 	mrseq	r1, R11_fiq
    3718:	00001755 	andeq	r1, r0, r5, asr r7
    371c:	31003413 	tstcc	r0, r3, lsl r4
    3720:	00180213 	andseq	r0, r8, r3, lsl r2
    3724:	011d1400 	tsteq	sp, r0, lsl #8
    3728:	01111331 	tsteq	r1, r1, lsr r3
    372c:	0b580612 	bleq	1604f7c <__ccfg+0x15e4fd4>
    3730:	00000b59 	andeq	r0, r0, r9, asr fp
    3734:	11010b15 	tstne	r1, r5, lsl fp
    3738:	00061201 	andeq	r1, r6, r1, lsl #4
    373c:	00341600 	eorseq	r1, r4, r0, lsl #12
    3740:	17021331 	smladxne	r2, r1, r3, r1
    3744:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    3748:	03193f01 	tsteq	r9, #1, 30
    374c:	3b0b3a0e 	blcc	2d1f8c <__ccfg+0x2b1fe4>
    3750:	1119270b 	tstne	r9, fp, lsl #14
    3754:	40061201 	andmi	r1, r6, r1, lsl #4
    3758:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    375c:	00001301 	andeq	r1, r0, r1, lsl #6
    3760:	31011d18 	tstcc	r1, r8, lsl sp
    3764:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3768:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    376c:	0013010b 	andseq	r0, r3, fp, lsl #2
    3770:	82891900 	addhi	r1, r9, #0, 18
    3774:	01110101 	tsteq	r1, r1, lsl #2
    3778:	00001331 	andeq	r1, r0, r1, lsr r3
    377c:	01828a1a 	orreq	r8, r2, sl, lsl sl
    3780:	91180200 	tstls	r8, r0, lsl #4
    3784:	00001842 	andeq	r1, r0, r2, asr #16
    3788:	3f012e1b 	svccc	0x00012e1b
    378c:	3a0e0319 	bcc	3843f8 <__ccfg+0x364450>
    3790:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3794:	11134919 	tstne	r3, r9, lsl r9
    3798:	40061201 	andmi	r1, r6, r1, lsl #4
    379c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    37a0:	00001301 	andeq	r1, r0, r1, lsl #6
    37a4:	0300051c 	movweq	r0, #1308	; 0x51c
    37a8:	3b0b3a0e 	blcc	2d1fe8 <__ccfg+0x2b2040>
    37ac:	02134905 	andseq	r4, r3, #81920	; 0x14000
    37b0:	1d000017 	stcne	0, cr0, [r0, #-92]	; 0xffffffa4
    37b4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    37b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    37bc:	17021349 	strne	r1, [r2, -r9, asr #6]
    37c0:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
    37c4:	11133101 	tstne	r3, r1, lsl #2
    37c8:	40061201 	andmi	r1, r6, r1, lsl #4
    37cc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    37d0:	00001301 	andeq	r1, r0, r1, lsl #6
    37d4:	3100051f 	tstcc	r0, pc, lsl r5
    37d8:	00170213 	andseq	r0, r7, r3, lsl r2
    37dc:	00342000 	eorseq	r2, r4, r0
    37e0:	00001331 	andeq	r1, r0, r1, lsr r3
    37e4:	31011d21 	tstcc	r1, r1, lsr #26
    37e8:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    37ec:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    37f0:	00130105 	andseq	r0, r3, r5, lsl #2
    37f4:	82892200 	addhi	r2, r9, #0, 4
    37f8:	01110101 	tsteq	r1, r1, lsl #2
    37fc:	13011331 	movwne	r1, #4913	; 0x1331
    3800:	89230000 	stmdbhi	r3!, {}	; <UNPREDICTABLE>
    3804:	11000182 	smlabbne	r0, r2, r1, r0
    3808:	00133101 	andseq	r3, r3, r1, lsl #2
    380c:	82892400 	addhi	r2, r9, #0, 8
    3810:	01110101 	tsteq	r1, r1, lsl #2
    3814:	01184293 			; <UNDEFINED> instruction: 0x01184293
    3818:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    381c:	1331001d 	teqne	r1, #29
    3820:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3824:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    3828:	89260000 	stmdbhi	r6!, {}	; <UNPREDICTABLE>
    382c:	11010182 	smlabbne	r1, r2, r1, r0
    3830:	00130101 	andseq	r0, r3, r1, lsl #2
    3834:	012e2700 			; <UNDEFINED> instruction: 0x012e2700
    3838:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    383c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3840:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    3844:	00001301 	andeq	r1, r0, r1, lsl #6
    3848:	49000528 	stmdbmi	r0, {r3, r5, r8, sl}
    384c:	29000013 	stmdbcs	r0, {r0, r1, r4}
    3850:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3854:	0b3a0e03 	bleq	e87068 <__ccfg+0xe670c0>
    3858:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    385c:	1301193c 	movwne	r1, #6460	; 0x193c
    3860:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
    3864:	03193f01 	tsteq	r9, #1, 30
    3868:	3b0b3a0e 	blcc	2d20a8 <__ccfg+0x2b2100>
    386c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3870:	00193c13 	andseq	r3, r9, r3, lsl ip
    3874:	11010000 	mrsne	r0, (UNDEF: 1)
    3878:	130e2501 	movwne	r2, #58625	; 0xe501
    387c:	1b0e030b 	blne	3844b0 <__ccfg+0x364508>
    3880:	1117550e 	tstne	r7, lr, lsl #10
    3884:	00171001 	andseq	r1, r7, r1
    3888:	00160200 	andseq	r0, r6, r0, lsl #4
    388c:	0b3a0e03 	bleq	e870a0 <__ccfg+0xe670f8>
    3890:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3894:	24030000 	strcs	r0, [r3], #-0
    3898:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    389c:	000e030b 	andeq	r0, lr, fp, lsl #6
    38a0:	00240400 	eoreq	r0, r4, r0, lsl #8
    38a4:	0b3e0b0b 	bleq	f864d8 <__ccfg+0xf66530>
    38a8:	00000803 	andeq	r0, r0, r3, lsl #16
    38ac:	0b000f05 	bleq	74c8 <__exidx_end+0x2774>
    38b0:	0013490b 	andseq	r4, r3, fp, lsl #18
    38b4:	00150600 	andseq	r0, r5, r0, lsl #12
    38b8:	00001927 	andeq	r1, r0, r7, lsr #18
    38bc:	27011507 	strcs	r1, [r1, -r7, lsl #10]
    38c0:	00130119 	andseq	r0, r3, r9, lsl r1
    38c4:	00050800 	andeq	r0, r5, r0, lsl #16
    38c8:	00001349 	andeq	r1, r0, r9, asr #6
    38cc:	27011509 	strcs	r1, [r1, -r9, lsl #10]
    38d0:	01134919 	tsteq	r3, r9, lsl r9
    38d4:	0a000013 	beq	3928 <NOROM_SetupGetTrimForXoscHfFastStart+0x8>
    38d8:	19270015 	stmdbne	r7!, {r0, r2, r4}
    38dc:	00001349 	andeq	r1, r0, r9, asr #6
    38e0:	0b01130b 	bleq	48514 <__ccfg+0x2856c>
    38e4:	3b0b3a0b 	blcc	2d2118 <__ccfg+0x2b2170>
    38e8:	0013010b 	andseq	r0, r3, fp, lsl #2
    38ec:	000d0c00 	andeq	r0, sp, r0, lsl #24
    38f0:	0b3a0e03 	bleq	e87104 <__ccfg+0xe6715c>
    38f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    38f8:	00000b38 	andeq	r0, r0, r8, lsr fp
    38fc:	03012e0d 	movweq	r2, #7693	; 0x1e0d
    3900:	3b0b3a0e 	blcc	2d2140 <__ccfg+0x2b2198>
    3904:	20192705 	andscs	r2, r9, r5, lsl #14
    3908:	0013010b 	andseq	r0, r3, fp, lsl #2
    390c:	00050e00 	andeq	r0, r5, r0, lsl #28
    3910:	0b3a0e03 	bleq	e87124 <__ccfg+0xe6717c>
    3914:	1349053b 	movtne	r0, #38203	; 0x953b
    3918:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    391c:	3a0e0300 	bcc	384524 <__ccfg+0x36457c>
    3920:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3924:	20134919 	andscs	r4, r3, r9, lsl r9
    3928:	1000000b 	andne	r0, r0, fp
    392c:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    3930:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3934:	0b201927 	bleq	809dd8 <__ccfg+0x7e9e30>
    3938:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
    393c:	3a0e0301 	bcc	384548 <__ccfg+0x3645a0>
    3940:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3944:	20134919 	andscs	r4, r3, r9, lsl r9
    3948:	0013010b 	andseq	r0, r3, fp, lsl #2
    394c:	00051200 	andeq	r1, r5, r0, lsl #4
    3950:	0b3a0e03 	bleq	e87164 <__ccfg+0xe671bc>
    3954:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3958:	34130000 	ldrcc	r0, [r3], #-0
    395c:	3a0e0300 	bcc	384564 <__ccfg+0x3645bc>
    3960:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3964:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    3968:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    396c:	0b3a0e03 	bleq	e87180 <__ccfg+0xe671d8>
    3970:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3974:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3978:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    397c:	00130119 	andseq	r0, r3, r9, lsl r1
    3980:	00341500 	eorseq	r1, r4, r0, lsl #10
    3984:	0b3a0e03 	bleq	e87198 <__ccfg+0xe671f0>
    3988:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    398c:	00001702 	andeq	r1, r0, r2, lsl #14
    3990:	03003416 	movweq	r3, #1046	; 0x416
    3994:	3b0b3a0e 	blcc	2d21d4 <__ccfg+0x2b222c>
    3998:	1c13490b 			; <UNDEFINED> instruction: 0x1c13490b
    399c:	17000005 	strne	r0, [r0, -r5]
    39a0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    39a4:	17550152 			; <UNDEFINED> instruction: 0x17550152
    39a8:	0b590b58 	bleq	1646710 <__ccfg+0x1626768>
    39ac:	00001301 	andeq	r1, r0, r1, lsl #6
    39b0:	31000518 	tstcc	r0, r8, lsl r5
    39b4:	000b1c13 	andeq	r1, fp, r3, lsl ip
    39b8:	001d1900 	andseq	r1, sp, r0, lsl #18
    39bc:	01111331 	tsteq	r1, r1, lsr r3
    39c0:	0b580612 	bleq	1605210 <__ccfg+0x15e5268>
    39c4:	00000b59 	andeq	r0, r0, r9, asr fp
    39c8:	31011d1a 	tstcc	r1, sl, lsl sp
    39cc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    39d0:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    39d4:	0013010b 	andseq	r0, r3, fp, lsl #2
    39d8:	82891b00 	addhi	r1, r9, #0, 22
    39dc:	01110001 	tsteq	r1, r1
    39e0:	00001331 	andeq	r1, r0, r1, lsr r3
    39e4:	0182891c 	orreq	r8, r2, ip, lsl r9
    39e8:	01011101 	tsteq	r1, r1, lsl #2
    39ec:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    39f0:	0001828a 	andeq	r8, r1, sl, lsl #5
    39f4:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    39f8:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
    39fc:	01018289 	smlabbeq	r1, r9, r2, r8
    3a00:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3a04:	00001301 	andeq	r1, r0, r1, lsl #6
    3a08:	0182891f 	orreq	r8, r2, pc, lsl r9
    3a0c:	00011101 	andeq	r1, r1, r1, lsl #2
    3a10:	012e2000 			; <UNDEFINED> instruction: 0x012e2000
    3a14:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3a18:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3a1c:	01111927 	tsteq	r1, r7, lsr #18
    3a20:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3a24:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3a28:	21000013 	tstcs	r0, r3, lsl r0
    3a2c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3a30:	0b3b0b3a 	bleq	ec6720 <__ccfg+0xea6778>
    3a34:	17021349 	strne	r1, [r2, -r9, asr #6]
    3a38:	34220000 	strtcc	r0, [r2], #-0
    3a3c:	3a0e0300 	bcc	384644 <__ccfg+0x36469c>
    3a40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3a44:	00180213 	andseq	r0, r8, r3, lsl r2
    3a48:	00342300 	eorseq	r2, r4, r0, lsl #6
    3a4c:	0b3a0803 	bleq	e85a60 <__ccfg+0xe65ab8>
    3a50:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3a54:	00001702 	andeq	r1, r0, r2, lsl #14
    3a58:	03003424 	movweq	r3, #1060	; 0x424
    3a5c:	3b0b3a08 	blcc	2d2284 <__ccfg+0x2b22dc>
    3a60:	0013490b 	andseq	r4, r3, fp, lsl #18
    3a64:	010b2500 	tsteq	fp, r0, lsl #10
    3a68:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3a6c:	00001301 	andeq	r1, r0, r1, lsl #6
    3a70:	03003426 	movweq	r3, #1062	; 0x426
    3a74:	3b0b3a0e 	blcc	2d22b4 <__ccfg+0x2b230c>
    3a78:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3a7c:	27000017 	smladcs	r0, r7, r0, r0
    3a80:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3a84:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3a88:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    3a8c:	00001301 	andeq	r1, r0, r1, lsl #6
    3a90:	31000528 	tstcc	r0, r8, lsr #10
    3a94:	29000013 	stmdbcs	r0, {r0, r1, r4}
    3a98:	0111010b 	tsteq	r1, fp, lsl #2
    3a9c:	00000612 	andeq	r0, r0, r2, lsl r6
    3aa0:	3100342a 	tstcc	r0, sl, lsr #8
    3aa4:	00170213 	andseq	r0, r7, r3, lsl r2
    3aa8:	011d2b00 	tsteq	sp, r0, lsl #22
    3aac:	01521331 	cmpeq	r2, r1, lsr r3
    3ab0:	0b581755 	bleq	160980c <__ccfg+0x15e9864>
    3ab4:	13010559 	movwne	r0, #5465	; 0x1559
    3ab8:	0b2c0000 	bleq	b03ac0 <__ccfg+0xae3b18>
    3abc:	00175501 	andseq	r5, r7, r1, lsl #10
    3ac0:	00262d00 	eoreq	r2, r6, r0, lsl #26
    3ac4:	00001349 	andeq	r1, r0, r9, asr #6
    3ac8:	3f002e2e 	svccc	0x00002e2e
    3acc:	3a0e0319 	bcc	384738 <__ccfg+0x364790>
    3ad0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3ad4:	11134919 	tstne	r3, r9, lsl r9
    3ad8:	40061201 	andmi	r1, r6, r1, lsl #4
    3adc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3ae0:	012f0000 			; <UNDEFINED> instruction: 0x012f0000
    3ae4:	01134901 	tsteq	r3, r1, lsl #18
    3ae8:	30000013 	andcc	r0, r0, r3, lsl r0
    3aec:	13490021 	movtne	r0, #36897	; 0x9021
    3af0:	00000b2f 	andeq	r0, r0, pc, lsr #22
    3af4:	3f012e31 	svccc	0x00012e31
    3af8:	3a0e0319 	bcc	384764 <__ccfg+0x3647bc>
    3afc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3b00:	01193c19 	tsteq	r9, r9, lsl ip
    3b04:	32000013 	andcc	r0, r0, #19
    3b08:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3b0c:	0b3a0e03 	bleq	e87320 <__ccfg+0xe67378>
    3b10:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3b14:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    3b18:	00001301 	andeq	r1, r0, r1, lsl #6
    3b1c:	3f002e33 	svccc	0x00002e33
    3b20:	3a0e0319 	bcc	38478c <__ccfg+0x3647e4>
    3b24:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3b28:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    3b2c:	00000019 	andeq	r0, r0, r9, lsl r0
    3b30:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3b34:	030b130e 	movweq	r1, #45838	; 0xb30e
    3b38:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    3b3c:	10011117 	andne	r1, r1, r7, lsl r1
    3b40:	02000017 	andeq	r0, r0, #23
    3b44:	0b0b0024 	bleq	2c3bdc <__ccfg+0x2a3c34>
    3b48:	0e030b3e 	vmoveq.16	d3[0], r0
    3b4c:	16030000 	strne	r0, [r3], -r0
    3b50:	3a0e0300 	bcc	384758 <__ccfg+0x3647b0>
    3b54:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3b58:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    3b5c:	0b0b0024 	bleq	2c3bf4 <__ccfg+0x2a3c4c>
    3b60:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3b64:	04050000 	streq	r0, [r5], #-0
    3b68:	3a0b0b01 	bcc	2c6774 <__ccfg+0x2a67cc>
    3b6c:	010b3b0b 	tsteq	fp, fp, lsl #22
    3b70:	06000013 			; <UNDEFINED> instruction: 0x06000013
    3b74:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    3b78:	00000d1c 	andeq	r0, r0, ip, lsl sp
    3b7c:	0b010407 	bleq	44ba0 <__ccfg+0x24bf8>
    3b80:	3b0b3a0b 	blcc	2d23b4 <__ccfg+0x2b240c>
    3b84:	00130105 	andseq	r0, r3, r5, lsl #2
    3b88:	00160800 	andseq	r0, r6, r0, lsl #16
    3b8c:	0b3a0e03 	bleq	e873a0 <__ccfg+0xe673f8>
    3b90:	1349053b 	movtne	r0, #38203	; 0x953b
    3b94:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
    3b98:	3a0e0300 	bcc	3847a0 <__ccfg+0x3647f8>
    3b9c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3ba0:	20134919 	andscs	r4, r3, r9, lsl r9
    3ba4:	0a00000b 	beq	3bd8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb8>
    3ba8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3bac:	0b3a0e03 	bleq	e873c0 <__ccfg+0xe67418>
    3bb0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3bb4:	0b201349 	bleq	8088e0 <__ccfg+0x7e8938>
    3bb8:	00001301 	andeq	r1, r0, r1, lsl #6
    3bbc:	0300340b 	movweq	r3, #1035	; 0x40b
    3bc0:	3b0b3a0e 	blcc	2d2400 <__ccfg+0x2b2458>
    3bc4:	0013490b 	andseq	r4, r3, fp, lsl #18
    3bc8:	002e0c00 	eoreq	r0, lr, r0, lsl #24
    3bcc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3bd0:	0b3b0b3a 	bleq	ec68c0 <__ccfg+0xea6918>
    3bd4:	13491927 	movtne	r1, #39207	; 0x9927
    3bd8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3bdc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3be0:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    3be4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3be8:	0b3a0e03 	bleq	e873fc <__ccfg+0xe67454>
    3bec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3bf0:	01111349 	tsteq	r1, r9, asr #6
    3bf4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3bf8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3bfc:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    3c00:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3c04:	0b3b0b3a 	bleq	ec68f4 <__ccfg+0xea694c>
    3c08:	17021349 	strne	r1, [r2, -r9, asr #6]
    3c0c:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    3c10:	11133101 	tstne	r3, r1, lsl #2
    3c14:	40061201 	andmi	r1, r6, r1, lsl #4
    3c18:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3c1c:	00001301 	andeq	r1, r0, r1, lsl #6
    3c20:	31003410 	tstcc	r0, r0, lsl r4
    3c24:	00170213 	andseq	r0, r7, r3, lsl r2
    3c28:	010b1100 	mrseq	r1, (UNDEF: 27)
    3c2c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3c30:	34120000 	ldrcc	r0, [r2], #-0
    3c34:	00133100 	andseq	r3, r3, r0, lsl #2
    3c38:	001d1300 	andseq	r1, sp, r0, lsl #6
    3c3c:	01111331 	tsteq	r1, r1, lsr r3
    3c40:	0b580612 	bleq	1605490 <__ccfg+0x15e54e8>
    3c44:	00000b59 	andeq	r0, r0, r9, asr fp
    3c48:	3f012e14 	svccc	0x00012e14
    3c4c:	3a0e0319 	bcc	3848b8 <__ccfg+0x364910>
    3c50:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3c54:	11134919 	tstne	r3, r9, lsl r9
    3c58:	40061201 	andmi	r1, r6, r1, lsl #4
    3c5c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3c60:	00001301 	andeq	r1, r0, r1, lsl #6
    3c64:	01828915 	orreq	r8, r2, r5, lsl r9
    3c68:	31011100 	mrscc	r1, (UNDEF: 17)
    3c6c:	16000013 			; <UNDEFINED> instruction: 0x16000013
    3c70:	0e03012e 	adfeqsp	f0, f3, #0.5
    3c74:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3c78:	13491927 	movtne	r1, #39207	; 0x9927
    3c7c:	13010b20 	movwne	r0, #6944	; 0x1b20
    3c80:	34170000 	ldrcc	r0, [r7], #-0
    3c84:	3a0e0300 	bcc	38488c <__ccfg+0x3648e4>
    3c88:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3c8c:	18000013 	stmdane	r0, {r0, r1, r4}
    3c90:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3c94:	0b3b0b3a 	bleq	ec6984 <__ccfg+0xea69dc>
    3c98:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    3c9c:	1d190000 	ldcne	0, cr0, [r9, #-0]
    3ca0:	52133100 	andspl	r3, r3, #0, 2
    3ca4:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    3ca8:	000b590b 	andeq	r5, fp, fp, lsl #18
    3cac:	011d1a00 	tsteq	sp, r0, lsl #20
    3cb0:	01521331 	cmpeq	r2, r1, lsr r3
    3cb4:	0b581755 	bleq	1609a10 <__ccfg+0x15e9a68>
    3cb8:	13010b59 	movwne	r0, #7001	; 0x1b59
    3cbc:	0b1b0000 	bleq	6c3cc4 <__ccfg+0x6a3d1c>
    3cc0:	00175501 	andseq	r5, r7, r1, lsl #10
    3cc4:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
    3cc8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3ccc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3cd0:	01111927 	tsteq	r1, r7, lsr #18
    3cd4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3cd8:	00194297 	mulseq	r9, r7, r2
    3cdc:	011d1d00 	tsteq	sp, r0, lsl #26
    3ce0:	01111331 	tsteq	r1, r1, lsr r3
    3ce4:	0b580612 	bleq	1605534 <__ccfg+0x15e558c>
    3ce8:	13010b59 	movwne	r0, #7001	; 0x1b59
    3cec:	1d1e0000 	ldcne	0, cr0, [lr, #-0]
    3cf0:	11133101 	tstne	r3, r1, lsl #2
    3cf4:	58061201 	stmdapl	r6, {r0, r9, ip}
    3cf8:	000b590b 	andeq	r5, fp, fp, lsl #18
    3cfc:	11010000 	mrsne	r0, (UNDEF: 1)
    3d00:	130e2501 	movwne	r2, #58625	; 0xe501
    3d04:	1b0e030b 	blne	384938 <__ccfg+0x364990>
    3d08:	1117550e 	tstne	r7, lr, lsl #10
    3d0c:	00171001 	andseq	r1, r7, r1
    3d10:	00240200 	eoreq	r0, r4, r0, lsl #4
    3d14:	0b3e0b0b 	bleq	f86948 <__ccfg+0xf669a0>
    3d18:	00000e03 	andeq	r0, r0, r3, lsl #28
    3d1c:	03001603 	movweq	r1, #1539	; 0x603
    3d20:	3b0b3a0e 	blcc	2d2560 <__ccfg+0x2b25b8>
    3d24:	0013490b 	andseq	r4, r3, fp, lsl #18
    3d28:	00240400 	eoreq	r0, r4, r0, lsl #8
    3d2c:	0b3e0b0b 	bleq	f86960 <__ccfg+0xf669b8>
    3d30:	00000803 	andeq	r0, r0, r3, lsl #16
    3d34:	03012e05 	movweq	r2, #7685	; 0x1e05
    3d38:	3b0b3a0e 	blcc	2d2578 <__ccfg+0x2b25d0>
    3d3c:	2019270b 	andscs	r2, r9, fp, lsl #14
    3d40:	0013010b 	andseq	r0, r3, fp, lsl #2
    3d44:	00050600 	andeq	r0, r5, r0, lsl #12
    3d48:	0b3a0e03 	bleq	e8755c <__ccfg+0xe675b4>
    3d4c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3d50:	34070000 	strcc	r0, [r7], #-0
    3d54:	3a0e0300 	bcc	38495c <__ccfg+0x3649b4>
    3d58:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3d5c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3d60:	0e03012e 	adfeqsp	f0, f3, #0.5
    3d64:	0b3b0b3a 	bleq	ec6a54 <__ccfg+0xea6aac>
    3d68:	13491927 	movtne	r1, #39207	; 0x9927
    3d6c:	13010b20 	movwne	r0, #6944	; 0x1b20
    3d70:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
    3d74:	11133101 	tstne	r3, r1, lsl #2
    3d78:	40061201 	andmi	r1, r6, r1, lsl #4
    3d7c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3d80:	00001301 	andeq	r1, r0, r1, lsl #6
    3d84:	3100050a 	tstcc	r0, sl, lsl #10
    3d88:	00170213 	andseq	r0, r7, r3, lsl r2
    3d8c:	00340b00 	eorseq	r0, r4, r0, lsl #22
    3d90:	17021331 	smladxne	r2, r1, r3, r1
    3d94:	050c0000 	streq	r0, [ip, #-0]
    3d98:	1c133100 	ldfnes	f3, [r3], {-0}
    3d9c:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    3da0:	00018289 	andeq	r8, r1, r9, lsl #5
    3da4:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3da8:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
    3dac:	11000182 	smlabbne	r0, r2, r1, r0
    3db0:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    3db4:	00001331 	andeq	r1, r0, r1, lsr r3
    3db8:	3f012e0f 	svccc	0x00012e0f
    3dbc:	3a0e0319 	bcc	384a28 <__ccfg+0x364a80>
    3dc0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3dc4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3dc8:	97184006 	ldrls	r4, [r8, -r6]
    3dcc:	13011942 	movwne	r1, #6466	; 0x1942
    3dd0:	05100000 	ldreq	r0, [r0, #-0]
    3dd4:	3a0e0300 	bcc	3849dc <__ccfg+0x364a34>
    3dd8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3ddc:	00170213 	andseq	r0, r7, r3, lsl r2
    3de0:	82891100 	addhi	r1, r9, #0, 2
    3de4:	01110101 	tsteq	r1, r1, lsl #2
    3de8:	31194295 			; <UNDEFINED> instruction: 0x31194295
    3dec:	12000013 	andne	r0, r0, #19
    3df0:	0001828a 	andeq	r8, r1, sl, lsl #5
    3df4:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    3df8:	13000018 	movwne	r0, #24
    3dfc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3e00:	0b3b0b3a 	bleq	ec6af0 <__ccfg+0xea6b48>
    3e04:	17021349 	strne	r1, [r2, -r9, asr #6]
    3e08:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    3e0c:	03193f01 	tsteq	r9, #1, 30
    3e10:	3b0b3a0e 	blcc	2d2650 <__ccfg+0x2b26a8>
    3e14:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3e18:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3e1c:	97184006 	ldrls	r4, [r8, -r6]
    3e20:	13011942 	movwne	r1, #6466	; 0x1942
    3e24:	1d150000 	ldcne	0, cr0, [r5, #-0]
    3e28:	11133101 	tstne	r3, r1, lsl #2
    3e2c:	58061201 	stmdapl	r6, {r0, r9, ip}
    3e30:	000b590b 	andeq	r5, fp, fp, lsl #18
    3e34:	010b1600 	tsteq	fp, r0, lsl #12
    3e38:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3e3c:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    3e40:	03193f00 	tsteq	r9, #0, 30
    3e44:	3b0b3a0e 	blcc	2d2684 <__ccfg+0x2b26dc>
    3e48:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3e4c:	00193c13 	andseq	r3, r9, r3, lsl ip
    3e50:	11010000 	mrsne	r0, (UNDEF: 1)
    3e54:	130e2501 	movwne	r2, #58625	; 0xe501
    3e58:	1b0e030b 	blne	384a8c <__ccfg+0x364ae4>
    3e5c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    3e60:	00171006 	andseq	r1, r7, r6
    3e64:	00240200 	eoreq	r0, r4, r0, lsl #4
    3e68:	0b3e0b0b 	bleq	f86a9c <__ccfg+0xf66af4>
    3e6c:	00000803 	andeq	r0, r0, r3, lsl #16
    3e70:	03001603 	movweq	r1, #1539	; 0x603
    3e74:	3b0b3a0e 	blcc	2d26b4 <__ccfg+0x2b270c>
    3e78:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    3e7c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    3e80:	0b0b0024 	bleq	2c3f18 <__ccfg+0x2a3f70>
    3e84:	0e030b3e 	vmoveq.16	d3[0], r0
    3e88:	16050000 	strne	r0, [r5], -r0
    3e8c:	3a0e0300 	bcc	384a94 <__ccfg+0x364aec>
    3e90:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3e94:	0013490b 	andseq	r4, r3, fp, lsl #18
    3e98:	00260600 	eoreq	r0, r6, r0, lsl #12
    3e9c:	00001349 	andeq	r1, r0, r9, asr #6
    3ea0:	0b011707 	bleq	49ac4 <__ccfg+0x29b1c>
    3ea4:	3b0b3a0b 	blcc	2d26d8 <__ccfg+0x2b2730>
    3ea8:	010b390b 	tsteq	fp, fp, lsl #18
    3eac:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3eb0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3eb4:	0b3b0b3a 	bleq	ec6ba4 <__ccfg+0xea6bfc>
    3eb8:	13490b39 	movtne	r0, #39737	; 0x9b39
    3ebc:	01090000 	mrseq	r0, (UNDEF: 9)
    3ec0:	01134901 	tsteq	r3, r1, lsl #18
    3ec4:	0a000013 	beq	3f18 <NOROM_ChipInfo_GetChipFamily+0x10>
    3ec8:	13490021 	movtne	r0, #36897	; 0x9021
    3ecc:	00000b2f 	andeq	r0, r0, pc, lsr #22
    3ed0:	0b01130b 	bleq	48b04 <__ccfg+0x28b5c>
    3ed4:	3b0b3a0b 	blcc	2d2708 <__ccfg+0x2b2760>
    3ed8:	010b390b 	tsteq	fp, fp, lsl #18
    3edc:	0c000013 	stceq	0, cr0, [r0], {19}
    3ee0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3ee4:	0b3b0b3a 	bleq	ec6bd4 <__ccfg+0xea6c2c>
    3ee8:	13490b39 	movtne	r0, #39737	; 0x9b39
    3eec:	00000b38 	andeq	r0, r0, r8, lsr fp
    3ef0:	0b000f0d 	bleq	7b2c <__exidx_end+0x2dd8>
    3ef4:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    3ef8:	13490037 	movtne	r0, #36919	; 0x9037
    3efc:	130f0000 	movwne	r0, #61440	; 0xf000
    3f00:	0b0e0301 	bleq	384b0c <__ccfg+0x364b64>
    3f04:	3b0b3a0b 	blcc	2d2738 <__ccfg+0x2b2790>
    3f08:	010b390b 	tsteq	fp, fp, lsl #18
    3f0c:	10000013 	andne	r0, r0, r3, lsl r0
    3f10:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    3f14:	0b3b0b3a 	bleq	ec6c04 <__ccfg+0xea6c5c>
    3f18:	13490b39 	movtne	r0, #39737	; 0x9b39
    3f1c:	00000b38 	andeq	r0, r0, r8, lsr fp
    3f20:	0b000f11 	bleq	7b6c <__exidx_end+0x2e18>
    3f24:	0013490b 	andseq	r4, r3, fp, lsl #18
    3f28:	01131200 	tsteq	r3, r0, lsl #4
    3f2c:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    3f30:	0b3b0b3a 	bleq	ec6c20 <__ccfg+0xea6c78>
    3f34:	13010b39 	movwne	r0, #6969	; 0x1b39
    3f38:	0d130000 	ldceq	0, cr0, [r3, #-0]
    3f3c:	3a0e0300 	bcc	384b44 <__ccfg+0x364b9c>
    3f40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3f44:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    3f48:	14000005 	strne	r0, [r0], #-5
    3f4c:	19270015 	stmdbne	r7!, {r0, r2, r4}
    3f50:	15150000 	ldrne	r0, [r5, #-0]
    3f54:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    3f58:	00130113 	andseq	r0, r3, r3, lsl r1
    3f5c:	00051600 	andeq	r1, r5, r0, lsl #12
    3f60:	00001349 	andeq	r1, r0, r9, asr #6
    3f64:	03011317 	movweq	r1, #4887	; 0x1317
    3f68:	3a050b0e 	bcc	146ba8 <__ccfg+0x126c00>
    3f6c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3f70:	0013010b 	andseq	r0, r3, fp, lsl #2
    3f74:	000d1800 	andeq	r1, sp, r0, lsl #16
    3f78:	0b3a0e03 	bleq	e8778c <__ccfg+0xe677e4>
    3f7c:	0b39053b 	bleq	e45470 <__ccfg+0xe254c8>
    3f80:	0b381349 	bleq	e08cac <__ccfg+0xde8d04>
    3f84:	0d190000 	ldceq	0, cr0, [r9, #-0]
    3f88:	3a0e0300 	bcc	384b90 <__ccfg+0x364be8>
    3f8c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3f90:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    3f94:	1a000005 	bne	3fb0 <NOROM_ChipInfo_GetHwRevision+0x5c>
    3f98:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    3f9c:	0b3a0b0b 	bleq	e86bd0 <__ccfg+0xe66c28>
    3fa0:	0b39053b 	bleq	e45494 <__ccfg+0xe254ec>
    3fa4:	00001301 	andeq	r1, r0, r1, lsl #6
    3fa8:	0b01131b 	bleq	48c1c <__ccfg+0x28c74>
    3fac:	3b0b3a0b 	blcc	2d27e0 <__ccfg+0x2b2838>
    3fb0:	010b3905 	tsteq	fp, r5, lsl #18
    3fb4:	1c000013 	stcne	0, cr0, [r0], {19}
    3fb8:	0b0b0117 	bleq	2c441c <__ccfg+0x2a4474>
    3fbc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3fc0:	13010b39 	movwne	r0, #6969	; 0x1b39
    3fc4:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
    3fc8:	3a0e0300 	bcc	384bd0 <__ccfg+0x364c28>
    3fcc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3fd0:	0013490b 	andseq	r4, r3, fp, lsl #18
    3fd4:	01151e00 	tsteq	r5, r0, lsl #28
    3fd8:	13011927 	movwne	r1, #6439	; 0x1927
    3fdc:	341f0000 	ldrcc	r0, [pc], #-0	; 3fe4 <AuxAdiDdiSafeWrite.constprop.1+0xc>
    3fe0:	3a0e0300 	bcc	384be8 <__ccfg+0x364c40>
    3fe4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3fe8:	3f13490b 	svccc	0x0013490b
    3fec:	00193c19 	andseq	r3, r9, r9, lsl ip
    3ff0:	00262000 	eoreq	r2, r6, r0
    3ff4:	34210000 	strtcc	r0, [r1], #-0
    3ff8:	3a0e0300 	bcc	384c00 <__ccfg+0x364c58>
    3ffc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4000:	3f13490b 	svccc	0x0013490b
    4004:	00193c19 	andseq	r3, r9, r9, lsl ip
    4008:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
    400c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    4010:	0b3b0b3a 	bleq	ec6d00 <__ccfg+0xea6d58>
    4014:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    4018:	01111349 	tsteq	r1, r9, asr #6
    401c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    4020:	01194297 			; <UNDEFINED> instruction: 0x01194297
    4024:	23000013 	movwcs	r0, #19
    4028:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    402c:	0b3b0b3a 	bleq	ec6d1c <__ccfg+0xea6d74>
    4030:	13490b39 	movtne	r0, #39737	; 0x9b39
    4034:	00001802 	andeq	r1, r0, r2, lsl #16
    4038:	03000524 	movweq	r0, #1316	; 0x524
    403c:	3b0b3a0e 	blcc	2d287c <__ccfg+0x2b28d4>
    4040:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4044:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
    4048:	00001742 	andeq	r1, r0, r2, asr #14
    404c:	03003425 	movweq	r3, #1061	; 0x425
    4050:	3b0b3a08 	blcc	2d2878 <__ccfg+0x2b28d0>
    4054:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4058:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
    405c:	00001742 	andeq	r1, r0, r2, asr #14
    4060:	03003426 	movweq	r3, #1062	; 0x426
    4064:	3b0b3a0e 	blcc	2d28a4 <__ccfg+0x2b28fc>
    4068:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    406c:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
    4070:	00001742 	andeq	r1, r0, r2, asr #14
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	000001e8 	andeq	r0, r0, r8, ror #3
       4:	00000208 	andeq	r0, r0, r8, lsl #4
}
       8:	46500001 	ldrbmi	r0, [r0], -r1
       c:	49000003 	stmdbmi	r0, {r0, r1}
      10:	01000003 	tsteq	r0, r3
      14:	00005000 	andeq	r5, r0, r0
      18:	00000000 	andeq	r0, r0, r0
      1c:	02bc0000 	adcseq	r0, ip, #0
      20:	02c40000 	sbceq	r0, r4, #0
      24:	00050000 	andeq	r0, r5, r0
      28:	0001fc03 	andeq	pc, r1, r3, lsl #24
      2c:	00000020 	andeq	r0, r0, r0, lsr #32
      30:	00000000 	andeq	r0, r0, r0
      34:	0002e400 	andeq	lr, r2, r0, lsl #8
      38:	0002ec00 	andeq	lr, r2, r0, lsl #24
      3c:	03000500 	movweq	r0, #1280	; 0x500
			i = k;
      40:	20000118 	andcs	r0, r0, r8, lsl r1
	...
}
      4c:	000000c8 	andeq	r0, r0, r8, asr #1
      50:	000000dc 	ldrdeq	r0, [r0], -ip
      54:	50500001 	subspl	r0, r0, r1
		release;
      58:	59000001 	stmdbpl	r0, {r0}
      5c:	01000001 	tsteq	r0, r1
			nq++;
      60:	00005000 	andeq	r5, r0, r0
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	00000000 	andeq	r0, r0, r0
      68:	01780000 	cmneq	r8, r0
      6c:	01890000 	orreq	r0, r9, r0
      70:	00010000 	andeq	r0, r1, r0
      74:	00018a50 	andeq	r8, r1, r0, asr sl
      78:	00019b00 	andeq	r9, r1, r0, lsl #22
      7c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      88:	0000018c 	andeq	r0, r0, ip, lsl #3
      8c:	00000190 	muleq	r0, r0, r1
	if (!button_still_pressed (__button_list [pbutton]))
      90:	00730005 	rsbseq	r0, r3, r5
      94:	00082306 	andeq	r2, r8, r6, lsl #6
      98:	00000000 	andeq	r0, r0, r0
	if (baction == NULL)
      9c:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
      a0:	aa000001 	bge	ac <g_pfnVectors+0xac>
	(*baction) (pbutton);
      a4:	01000001 	tsteq	r0, r1
endthread
      a8:	01aa5000 			; <UNDEFINED> instruction: 0x01aa5000
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	01c60000 	biceq	r0, r6, r0
      b0:	00010000 	andeq	r0, r1, r0
endthread
      b4:	00000054 	andeq	r0, r0, r4, asr r0
      b8:	00000000 	andeq	r0, r0, r0
      bc:	0001c600 	andeq	ip, r1, r0, lsl #12
      c0:	0001d200 	andeq	sp, r1, r0, lsl #4
      c4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
        packet = tcv_rnp(Receiving, sfd);
      d8:	00500001 	subseq	r0, r0, r1
	...
        receivedMessage = (message *)(packet + 1);
      e8:	01000000 	mrseq	r0, (UNDEF: 0)
      ec:	00005000 	andeq	r5, r0, r0
        if(receivedMessage->receiverId == nodeId) {
      f0:	00000000 	andeq	r0, r0, r0
      f4:	0bc80000 	bleq	ff2000fc <_estack+0xdf1fb0fc>
      f8:	0bc80000 	bleq	ff200100 <_estack+0xdf1fb100>
            proceed From_Broadcast;
      fc:	00010000 	andeq	r0, r1, r0
        proceed Receiving;
     100:	00000050 	andeq	r0, r0, r0, asr r0
     104:	00000000 	andeq	r0, r0, r0
        ser_outf(Get_Message, "Message ");
     108:	000a5400 	andeq	r5, sl, r0, lsl #8
     10c:	000a5a00 	andeq	r5, sl, r0, lsl #20
        proceed Show_Message;
     110:	56000100 	strpl	r0, [r0], -r0, lsl #2
        ser_outf(From_Broadcast, "Broadcast ");
     114:	00000a8a 	andeq	r0, r0, sl, lsl #21
     118:	00000a8e 	andeq	r0, r0, lr, lsl #21
        ser_outf(Show_Message, "from node %d (Seq %d): %s\n\r", receivedMessage->senderId, receivedMessage->sequenceNumber, receivedMessage->payload);
     11c:	00560001 	subseq	r0, r6, r1
     120:	00000000 	andeq	r0, r0, r0
     124:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
     128:	42000009 	andmi	r0, r0, #9
     12c:	01000009 	tsteq	r0, r9
        tcv_endp(packet);
     130:	09585200 	ldmdbeq	r8, {r9, ip, lr}^
     134:	096c0000 	stmdbeq	ip!, {}^	; <UNPREDICTABLE>
        proceed Receiving;
     138:	00010000 	andeq	r0, r1, r0
}
     13c:	00000052 	andeq	r0, r0, r2, asr r0
        proceed Receiving;
     140:	00000000 	andeq	r0, r0, r0
        } else if (receivedMessage->receiverId == '0' || receivedMessage->receiverId == 0) {
     144:	00094600 	andeq	r4, r9, r0, lsl #12
     148:	00094c00 	andeq	r4, r9, r0, lsl #24
            proceed From_Broadcast;
     14c:	53000100 	movwpl	r0, #256	; 0x100
	...
}
     158:	000008fc 	strdeq	r0, [r0], -ip
     15c:	00000906 	andeq	r0, r0, r6, lsl #18
     160:	00530001 	subseq	r0, r3, r1
     164:	00000000 	andeq	r0, r0, r0
     168:	fc000000 	stc2	0, cr0, [r0], {-0}
     16c:	02000008 	andeq	r0, r0, #8
     170:	01000009 	tsteq	r0, r9
     174:	00005300 	andeq	r5, r0, r0, lsl #6
fsm transmitter (message * messagePtr) {
     178:	00000000 	andeq	r0, r0, r0
     17c:	09920000 	ldmibeq	r2, {}	; <UNPREDICTABLE>
     180:	099c0000 	ldmibeq	ip, {}	; <UNPREDICTABLE>
}
     184:	00010000 	andeq	r0, r1, r0
     188:	00000053 	andeq	r0, r0, r3, asr r0
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
     18c:	00000000 	andeq	r0, r0, r0
     190:	00098400 	andeq	r8, r9, r0, lsl #8
     194:	0009ae00 	andeq	sl, r9, r0, lsl #28
     198:	52000100 	andpl	r0, r0, #0, 2
	...
        *p = messagePtr->senderId; p++;
     1a4:	000009d2 	ldrdeq	r0, [r0], -r2
        strcpy(p, messagePtr->payload);
     1a8:	000009dc 	ldrdeq	r0, [r0], -ip
        *p = messagePtr->receiverId; p++;
     1ac:	00530001 	subseq	r0, r3, r1
        *p = messagePtr->sequenceNumber; p++;
     1b0:	00000000 	andeq	r0, r0, r0
        strcpy(p, messagePtr->payload);
     1b4:	c4000000 	strgt	r0, [r0], #-0
        tcv_endp (spkt);
     1b8:	fa000009 	blx	1e4 <transmitter+0x6c>
     1bc:	01000009 	tsteq	r0, r9
        sequence++;
     1c0:	00005000 	andeq	r5, r0, r0
     1c4:	00000000 	andeq	r0, r0, r0
        ser_outf(Transmit_Message, "Message Sent\n\r");
     1c8:	086a0000 	stmdaeq	sl!, {}^	; <UNPREDICTABLE>
     1cc:	08740000 	ldmdaeq	r4!, {}^	; <UNPREDICTABLE>
}
     1d0:	00010000 	andeq	r0, r1, r0
        finish;
     1d4:	00000053 	andeq	r0, r0, r3, asr r0
     1d8:	00000000 	andeq	r0, r0, r0
     1dc:	00085c00 	andeq	r5, r8, r0, lsl #24
     1e0:	00088600 	andeq	r8, r8, r0, lsl #12
     1e4:	52000100 	andpl	r0, r0, #0, 2
	...
fsm root {
     1f0:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
     1f4:	000008c6 	andeq	r0, r0, r6, asr #17
     1f8:	00530001 	subseq	r0, r3, r1
     1fc:	00000000 	andeq	r0, r0, r0
        nodeId = 1;
     200:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
     204:	d6000008 	strle	r0, [r0], -r8
     208:	01000008 	tsteq	r0, r8
        sfd = tcv_open(WNONE, 0, 0);
     20c:	00005200 	andeq	r5, r0, r0, lsl #4
        messagePtr = (message *) umalloc(sizeof(message));
     210:	00000000 	andeq	r0, r0, r0
     214:	03900000 	orrseq	r0, r0, #0
     218:	03940000 	orrseq	r0, r4, #0
        phys_cc1350(0, MAX_PACKET_LENGTH);
     21c:	00010000 	andeq	r0, r1, r0
        tcv_plug(0, &plug_null);
     220:	00039450 	andeq	r9, r3, r0, asr r4
     224:	00039700 	andeq	r9, r3, r0, lsl #14
        sfd = tcv_open(WNONE, 0, 0);
     228:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		tcv_control(sfd, PHYSOPT_ON, NULL);
     234:	0000071c 	andeq	r0, r0, ip, lsl r7
        sfd = tcv_open(WNONE, 0, 0);
     238:	0000071e 	andeq	r0, r0, lr, lsl r7
		tcv_control(sfd, PHYSOPT_ON, NULL);
     23c:	00500001 	subseq	r0, r0, r1
		if (sfd < 0) {
     240:	00000000 	andeq	r0, r0, r0
			diag("Cannot open tcv interface");
     244:	1c000000 	stcne	0, cr0, [r0], {-0}
     248:	32000007 	andcc	r0, r0, #7
			halt();
     24c:	01000007 	tsteq	r0, r7
        runfsm receiver;
     250:	07325100 	ldreq	r5, [r2, -r0, lsl #2]!
     254:	07360000 	ldreq	r0, [r6, -r0]!
        receiverId = 0;
     258:	00010000 	andeq	r0, r1, r0
     25c:	00073c55 	andeq	r3, r7, r5, asr ip
        ser_outf(Menu_Start, "P2P Chat (Node #%d)\n\r", nodeId);
     260:	00075200 	andeq	r5, r7, r0, lsl #4
     264:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
        ser_outf(Menu_Choices, menuText);
     268:	00000752 	andeq	r0, r0, r2, asr r7
     26c:	00000760 	andeq	r0, r0, r0, ror #14
        ser_inf(Choice, "%c", &choice);
     270:	60510001 	subsvs	r0, r1, r1
     274:	8e000007 	cdphi	0, 0, cr0, cr0, cr7, {0}
     278:	01000007 	tsteq	r0, r7
        switch (choice)
     27c:	07945500 	ldreq	r5, [r4, r0, lsl #10]
     280:	07bc0000 	ldreq	r0, [ip, r0]!
     284:	00010000 	andeq	r0, r1, r0
     288:	0007bc55 	andeq	fp, r7, r5, asr ip
     28c:	0007ca00 	andeq	ip, r7, r0, lsl #20
     290:	51000100 	mrspl	r0, (UNDEF: 16)
                proceed Menu_Start;
     294:	000007ca 	andeq	r0, r0, sl, asr #15
     298:	000007d4 	ldrdeq	r0, [r0], -r4
     29c:	d4550001 	ldrble	r0, [r5], #-1
                proceed Direct_Transmission;
     2a0:	df000007 	svcle	0x00000007
                proceed Menu_Start;
     2a4:	01000007 	tsteq	r0, r7
        ser_outf(Change_ID, "New node ID (1-25):");
     2a8:	07df5100 	ldrbeq	r5, [pc, r0, lsl #2]
     2ac:	07e20000 	strbeq	r0, [r2, r0]!
        ser_inf(Get_New_ID, "%d", &nodeId);
     2b0:	00010000 	andeq	r0, r1, r0
     2b4:	0007e255 	andeq	lr, r7, r5, asr r2
     2b8:	0007e800 	andeq	lr, r7, r0, lsl #16
    if (node < 1 || node > 25) {
     2bc:	51000100 	mrspl	r0, (UNDEF: 16)
     2c0:	000007e8 	andeq	r0, r0, r8, ror #15
            proceed Change_ID;
     2c4:	000007fa 	strdeq	r0, [r0], -sl
     2c8:	fa550001 	blx	15402d4 <__ccfg+0x152032c>
        proceed Menu_Start;
     2cc:	0c000007 	stceq	0, cr0, [r0], {7}
        ser_outf(Direct_Transmission, "Receiver node ID (1-25):");
     2d0:	01000008 	tsteq	r0, r8
     2d4:	080c5100 	stmdaeq	ip, {r8, ip, lr}
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     2d8:	082c0000 	stmdaeq	ip!, {}	; <UNPREDICTABLE>
     2dc:	00010000 	andeq	r0, r1, r0
     2e0:	00000055 	andeq	r0, r0, r5, asr r0
    if (node < 1 || node > 25) {
     2e4:	00000000 	andeq	r0, r0, r0
     2e8:	00071c00 	andeq	r1, r7, r0, lsl #24
            proceed Direct_Transmission;
     2ec:	00073200 	andeq	r3, r7, r0, lsl #4
     2f0:	52000100 	andpl	r0, r0, #0, 2
        ser_outf(Broadcast_Transmission, "Message: ");
     2f4:	00000732 	andeq	r0, r0, r2, lsr r7
     2f8:	00000738 	andeq	r0, r0, r8, lsr r7
        ser_in(Get_Message, messagePtr->payload, PAYLOAD_LENGTH);
     2fc:	3c560001 	mrrccc	0, 0, r0, r6, cr1
     300:	4c000007 	stcmi	0, cr0, [r0], {7}
     304:	01000007 	tsteq	r0, r7
        if(strlen(messagePtr->payload) > PAYLOAD_LENGTH) {
     308:	07525600 	ldrbeq	r5, [r2, -r0, lsl #12]
     30c:	07600000 	strbeq	r0, [r0, -r0]!
     310:	00010000 	andeq	r0, r1, r0
            messagePtr->payload[PAYLOAD_LENGTH - 1] = '/0';
     314:	00076052 	andeq	r6, r7, r2, asr r0
     318:	00079000 	andeq	r9, r7, r0
        call transmitter(messagePtr, Menu_Start);
     31c:	56000100 	strpl	r0, [r0], -r0, lsl #2
        messagePtr->senderId = nodeId;
     320:	00000794 	muleq	r0, r4, r7
     324:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
        messagePtr->receiverId = receiverId;
     328:	bc560001 	mrrclt	0, 0, r0, r6, cr1
        messagePtr->sequenceNumber = sequence;
     32c:	ca000007 	bgt	350 <root+0x168>
     330:	01000007 	tsteq	r0, r7
        call transmitter(messagePtr, Menu_Start);
     334:	07ca5200 	strbeq	r5, [sl, r0, lsl #4]
     338:	07d40000 	ldrbeq	r0, [r4, r0]
     33c:	00010000 	andeq	r0, r1, r0
     340:	0007d456 	andeq	sp, r7, r6, asr r4
                proceed Broadcast_Transmission;
     344:	0007df00 	andeq	sp, r7, r0, lsl #30
     348:	52000100 	andpl	r0, r0, #0, 2
     34c:	000007e2 	andeq	r0, r0, r2, ror #15
     350:	000007ed 	andeq	r0, r0, sp, ror #15
     354:	ed520001 	ldcl	0, cr0, [r2, #-4]
     358:	fa000007 	blx	37c <root+0x194>
     35c:	01000007 	tsteq	r0, r7
     360:	07fa5400 	ldrbeq	r5, [sl, r0, lsl #8]!
     364:	082c0000 	stmdaeq	ip!, {}	; <UNPREDICTABLE>
     368:	00010000 	andeq	r0, r1, r0
     36c:	00000052 	andeq	r0, r0, r2, asr r0
     370:	00000000 	andeq	r0, r0, r0
     374:	00069000 	andeq	r9, r6, r0
     378:	00069e00 	andeq	r9, r6, r0, lsl #28
     37c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     388:	00000690 	muleq	r0, r0, r6
     38c:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
static void devinit_uart (int devnum) {
     390:	00510001 	subseq	r0, r1, r1
	adddevfunc (ioreq_uart_a, devnum);
     394:	00000000 	andeq	r0, r0, r0
     398:	40000000 	andmi	r0, r0, r0
void udelay (volatile word n) {
     39c:	57000006 	strpl	r0, [r0, -r6]
     3a0:	01000006 	tsteq	r0, r6
	while (n) {
     3a4:	067a5000 	ldrbteq	r5, [sl], -r0
     3a8:	06900000 	ldreq	r0, [r0], r0
}
     3ac:	00010000 	andeq	r0, r1, r0
	while (n--);
     3b0:	00000050 	andeq	r0, r0, r0, asr r0
     3b4:	00000000 	andeq	r0, r0, r0
     3b8:	00053600 	andeq	r3, r5, r0, lsl #12
		n--;
     3bc:	00054600 	andeq	r4, r5, r0, lsl #12
     3c0:	52000100 	andpl	r0, r0, #0, 2
     3c4:	00000546 	andeq	r0, r0, r6, asr #10
void mdelay (volatile word n) {
     3c8:	0000054e 	andeq	r0, r0, lr, asr #10
     3cc:	040c0005 	streq	r0, [ip], #-5
	while (n) {
     3d0:	e8400920 	stmda	r0, {r5, r8, fp}^
     3d4:	ec000005 	stc	0, cr0, [r0], {5}
}
     3d8:	05000005 	streq	r0, [r0, #-5]
		udelay (999);
     3dc:	20040c00 	andcs	r0, r4, r0, lsl #24
     3e0:	05ec4009 	strbeq	r4, [ip, #9]!
		n--;
     3e4:	05ee0000 	strbeq	r0, [lr, #0]!
     3e8:	00010000 	andeq	r0, r1, r0
     3ec:	0005ee52 	andeq	lr, r5, r2, asr lr
     3f0:	0005f000 	andeq	pc, r5, r0
void __pi_ondomain (lword d) {
     3f4:	0c000500 	cfstr32eq	mvfx0, [r0], {-0}
     3f8:	40092004 	andmi	r2, r9, r4
	...
			__pi_systat.effpdm = 1;
     404:	00000550 	andeq	r0, r0, r0, asr r5
	PRCMPowerDomainOn (d);
     408:	0000055a 	andeq	r0, r0, sl, asr r5
     40c:	5e520001 	cdppl	0, 5, cr0, cr2, cr1, {0}
     410:	68000005 	stmdavs	r0, {r0, r2}
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     414:	01000005 	tsteq	r0, r5
     418:	056c5200 	strbeq	r5, [ip, #-512]!	; 0xfffffe00
     41c:	05760000 	ldrbeq	r0, [r6, #-0]!
	__pi_systat.ondmns |= d;
     420:	00010000 	andeq	r0, r1, r0
     424:	00057a52 	andeq	r7, r5, r2, asr sl
}
     428:	00058600 	andeq	r8, r5, r0, lsl #12
     42c:	52000100 	andpl	r0, r0, #0, 2
void __pi_offdomain (lword d) {
     430:	00000612 	andeq	r0, r0, r2, lsl r6
     434:	00000616 	andeq	r0, r0, r6, lsl r6
	PRCMPowerDomainOff (d);
     438:	00520001 	subseq	r0, r2, r1
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     43c:	00000000 	andeq	r0, r0, r0
     440:	d6000000 	strle	r0, [r0], -r0
     444:	e8000004 	stmda	r0, {r2}
	if (d & PRCM_DOMAIN_RFCORE) {
     448:	01000004 	tsteq	r0, r4
     44c:	00005400 	andeq	r5, r0, r0, lsl #8
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     450:	00000000 	andeq	r0, r0, r0
     454:	04700000 	ldrbteq	r0, [r0], #-0
			__pi_systat.effpdm = __pi_systat.reqpdm;
     458:	04780000 	ldrbteq	r0, [r8], #-0
     45c:	00010000 	andeq	r0, r1, r0
	__pi_systat.ondmns &= ~d;
     460:	00000050 	andeq	r0, r0, r0, asr r0
     464:	00000000 	andeq	r0, r0, r0
}
     468:	00047000 	andeq	r7, r4, r0
     46c:	00047600 	andeq	r7, r4, r0, lsl #12
void __pi_syserror (word ec, const char *m) {
     470:	51000100 	mrspl	r0, (UNDEF: 16)
	diag ("SYSERR: %x, %s", ec, m);
     474:	00000476 	andeq	r0, r0, r6, ror r4
     478:	0000047b 	andeq	r0, r0, fp, ror r4
  __ASM volatile ("cpsid i" : : : "memory");
     47c:	00520001 	subseq	r0, r2, r1
	...
		all_leds_blink;
     48c:	01000000 	mrseq	r0, (UNDEF: 0)
     490:	00005000 	andeq	r5, r0, r0
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4a0:	00010000 	andeq	r0, r1, r0
     4a4:	00000051 	andeq	r0, r0, r1, asr r0
     4a8:	00000000 	andeq	r0, r0, r0
     4ac:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	while (1) {
     4c0:	00520001 	subseq	r0, r2, r1
void tci_run_delay_timer () {
     4c4:	00000000 	andeq	r0, r0, r0
	setdel = __pi_mintk - __pi_old;
     4c8:	01000000 	mrseq	r0, (UNDEF: 0)
     4cc:	00005400 	andeq	r5, r0, r0, lsl #8
     4d0:	00000000 	andeq	r0, r0, r0
     4d4:	04300000 	ldrteq	r0, [r0], #-0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4d8:	043b0000 	ldrteq	r0, [fp], #-0
     4dc:	00010000 	andeq	r0, r1, r0
     4e0:	00043b50 	andeq	r3, r4, r0, asr fp
     4e4:	00046400 	andeq	r6, r4, r0, lsl #8
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     4e8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
}
     4f4:	000003f4 	strdeq	r0, [r0], -r4
     4f8:	0000040c 	andeq	r0, r0, ip, lsl #8
     4fc:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     500:	24000004 	strcs	r0, [r0], #-4
	cli_aux;
     504:	01000004 	tsteq	r0, r4
     508:	00005400 	andeq	r5, r0, r0, lsl #8
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     50c:	00000000 	andeq	r0, r0, r0
     510:	03c80000 	biceq	r0, r8, #0
     514:	03ce0000 	biceq	r0, lr, #0
     518:	00010000 	andeq	r0, r1, r0
	sti_aux;
     51c:	00000050 	andeq	r0, r0, r0, asr r0
	...
void AONRTCIntHandler () {
     52c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     538:	00001490 	muleq	r0, r0, r4
		if (__pi_utims [0] == 0)
     53c:	000014ae 	andeq	r1, r0, lr, lsr #9
     540:	70910002 	addsvc	r0, r1, r2
		if (*(__pi_utims [0])) {
     544:	000014ae 	andeq	r1, r0, lr, lsr #9
     548:	000014d6 	ldrdeq	r1, [r0], -r6
			(*(__pi_utims [0]))--;
     54c:	da540001 	ble	1500558 <__ccfg+0x14e05b0>
		if (__pi_utims [1] == 0)
     550:	e2000014 	and	r0, r0, #20
		if (*(__pi_utims [1])) {
     554:	01000014 	tsteq	r0, r4, lsl r0
			aux_timer_inactive = 0;
     558:	14f05400 	ldrbtne	r5, [r0], #1024	; 0x400
			(*(__pi_utims [1]))--;
     55c:	153a0000 	ldrne	r0, [sl, #-0]!
		if (__pi_utims [2] == 0)
     560:	00010000 	andeq	r0, r1, r0
		if (*(__pi_utims [2])) {
     564:	00153e56 	andseq	r3, r5, r6, asr lr
			(*(__pi_utims [2]))--;
     568:	0015b600 	andseq	fp, r5, r0, lsl #12
		if (__pi_utims [3] != 0) {
     56c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
				(*(__pi_utims [3]))--;
     578:	000014fa 	strdeq	r1, [r0], -sl
	if (__pi_systat.ledsts) {
     57c:	00001538 	andeq	r1, r0, r8, lsr r5
     580:	3e510001 	cdpcc	0, 5, cr0, cr1, cr1, {0}
		if (__pi_systat.ledblc++ == 0) {
     584:	50000015 	andpl	r0, r0, r5, lsl r0
     588:	01000015 	tsteq	r0, r5, lsl r0
			if (__pi_systat.ledblk) {
     58c:	155c5100 	ldrbne	r5, [ip, #-256]	; 0xffffff00
     590:	15660000 	strbne	r0, [r6, #-0]!
     594:	00010000 	andeq	r0, r1, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     598:	00157851 	andseq	r7, r5, r1, asr r8
     59c:	00157c00 	andseq	r7, r5, r0, lsl #24
				if (__pi_systat.ledsts & 0x2)
     5a0:	51000100 	mrspl	r0, (UNDEF: 16)
     5a4:	0000159c 	muleq	r0, ip, r5
     5a8:	000015a0 	andeq	r1, r0, r0, lsr #11
				if (__pi_systat.ledsts & 0x4)
     5ac:	00510001 	subseq	r0, r1, r1
				__pi_systat.ledblk = 0;
     5b0:	00000000 	andeq	r0, r0, r0
     5b4:	fa000000 	blx	5bc <AONRTCIntHandler+0x90>
			if (__pi_systat.fstblk)
     5b8:	38000014 	stmdacc	r0, {r2, r4}
     5bc:	01000015 	tsteq	r0, r5, lsl r0
				__pi_systat.ledblc = 200;
     5c0:	153e5500 	ldrne	r5, [lr, #-1280]!	; 0xfffffb00
	if (events & AON_RTC_EVFLAGS_CH0) {
     5c4:	15660000 	strbne	r0, [r6, #-0]!
		cli_tim;
     5c8:	00010000 	andeq	r0, r1, r0
		__pi_new += setdel;
     5cc:	00157855 	andseq	r7, r5, r5, asr r8
     5d0:	00157c00 	andseq	r7, r5, r0, lsl #24
		setdel = 0;
     5d4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
		RISE_N_SHINE;
     5d8:	0000159c 	muleq	r0, ip, r5
		__pi_new += setdel;
     5dc:	000015b6 			; <UNDEFINED> instruction: 0x000015b6
		RISE_N_SHINE;
     5e0:	00550001 	subseq	r0, r5, r1
     5e4:	00000000 	andeq	r0, r0, r0
		aux_timer_inactive = 1;
     5e8:	6c000000 	stcvs	0, cr0, [r0], {-0}
     5ec:	78000015 	stmdavc	r0, {r0, r2, r4}
				if (__pi_systat.ledsts & 0x1)
     5f0:	01000015 	tsteq	r0, r5, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     5f4:	157c5500 	ldrbne	r5, [ip, #-1280]!	; 0xfffffb00
     5f8:	15960000 	ldrne	r0, [r6]
				if (__pi_systat.ledsts & 0x2)
     5fc:	00010000 	andeq	r0, r1, r0
     600:	00159a55 	andseq	r9, r5, r5, asr sl
     604:	00159c00 	andseq	r9, r5, r0, lsl #24
				if (__pi_systat.ledsts & 0x8)
     608:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		if (aux_timer_inactive) {
     614:	00001520 	andeq	r1, r0, r0, lsr #10
			cli_aux;
     618:	00001538 	andeq	r1, r0, r8, lsr r5
     61c:	00540001 	subseq	r0, r4, r1
     620:	00000000 	andeq	r0, r0, r0
     624:	66000000 	strvs	r0, [r0], -r0
     628:	78000015 	stmdavc	r0, {r0, r2, r4}
     62c:	01000015 	tsteq	r0, r5, lsl r0
     630:	157c5400 	ldrbne	r5, [ip, #-1024]!	; 0xfffffc00
     634:	15900000 	ldrne	r0, [r0]
     638:	00010000 	andeq	r0, r1, r0
     63c:	00159054 	andseq	r9, r5, r4, asr r0
word tci_update_delay_ticks (Boolean force) {
     640:	00159c00 	andseq	r9, r5, r0, lsl #24
	cli_tim;
     644:	53000100 	movwpl	r0, #256	; 0x100
	...
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     650:	000015a8 	andeq	r1, r0, r8, lsr #11
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     654:	000015b6 			; <UNDEFINED> instruction: 0x000015b6
     658:	00510001 	subseq	r0, r1, r1
     65c:	00000000 	andeq	r0, r0, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     660:	90000000 	andls	r0, r0, r0
				AON_RTC_O_CH0CMP)) - gettav ());
     664:	9c00000f 	stcls	0, cr0, [r0], {15}
	return NO;
     668:	0100000f 	tsteq	r0, pc
			setdel = 0;
     66c:	00005000 	andeq	r5, r0, r0
	...
		sti_tim;
     67c:	00010000 	andeq	r0, r1, r0
		return YES;
     680:	00000050 	andeq	r0, r0, r0, asr r0
     684:	00000000 	andeq	r0, r0, r0
     688:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	UARTDisable (UART0_BASE);
     69c:	00510001 	subseq	r0, r1, r1
	UARTConfigSetExpClk (UART0_BASE,
     6a0:	00000000 	andeq	r0, r0, r0
     6a4:	01000000 	mrseq	r0, (UNDEF: 0)
     6a8:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6b8:	00010000 	andeq	r0, r1, r0
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     6bc:	00000052 	andeq	r0, r0, r2, asr r0
     6c0:	00000000 	andeq	r0, r0, r0
     6c4:	52000100 	andpl	r0, r0, #0, 2
	...
}
     6d8:	00530001 	subseq	r0, r3, r1
     6dc:	00000000 	andeq	r0, r0, r0
     6e0:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6e4:	00005300 	andeq	r5, r0, r0, lsl #6
     6e8:	00000000 	andeq	r0, r0, r0
     6ec:	00010000 	andeq	r0, r1, r0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     6f0:	00000053 	andeq	r0, r0, r3, asr r0
	...
	__pi_uart_setrate (urates [0], __pi_uart);
     700:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     70c:	00001478 	andeq	r1, r0, r8, ror r4
     710:	00001480 	andeq	r1, r0, r0, lsl #9
     714:	00500001 	subseq	r0, r0, r1
     718:	00000000 	andeq	r0, r0, r0
	switch (operation) {
     71c:	9c000000 	stcls	0, cr0, [r0], {-0}
static int ioreq_uart_a (int operation, char *buf, int len) {
     720:	a2000013 	andge	r0, r0, #19
     724:	01000013 	tsteq	r0, r3, lsl r0
     728:	00005000 	andeq	r5, r0, r0
     72c:	00000000 	andeq	r0, r0, r0
     730:	13b20000 			; <UNDEFINED> instruction: 0x13b20000
				*buf++ = uart_a_read;
     734:	13de0000 	bicsne	r0, lr, #0
     738:	00010000 	andeq	r0, r1, r0
			while (len && uart_a_char_available) {
     73c:	0013de54 	andseq	sp, r3, r4, asr lr
     740:	0013e400 	andseq	lr, r3, r0, lsl #8
     744:	52000100 	andpl	r0, r0, #0, 2
			if (len != operation) {
     748:	000013e4 	andeq	r1, r0, r4, ror #7
}
     74c:	0000142c 	andeq	r1, r0, ip, lsr #8
     750:	2c540001 	mrrccs	0, 0, r0, r4, cr1
			uart_a_disable_int;
     754:	44000014 	strmi	r0, [r0], #-20	; 0xffffffec
			if (uart_a_char_available) {
     758:	01000014 	tsteq	r0, r4, lsl r0
				*buf++ = uart_a_read;
     75c:	00005000 	andeq	r5, r0, r0
			uart_a_disable_int;
     760:	00000000 	andeq	r0, r0, r0
     764:	13de0000 	bicsne	r0, lr, #0
			if (uart_a_char_available) {
     768:	13e20000 	mvnne	r0, #0
     76c:	00010000 	andeq	r0, r1, r0
				uart_a_enable_int;
     770:	0013e254 	andseq	lr, r3, r4, asr r2
     774:	0013e400 	andseq	lr, r3, r0, lsl #8
				goto Redo_rx;
     778:	53000100 	movwpl	r0, #256	; 0x100
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     77c:	000013fa 	strdeq	r1, [r0], -sl
     780:	00001403 	andeq	r1, r0, r3, lsl #8
			return -2;
     784:	00500001 	subseq	r0, r0, r1
     788:	00000000 	andeq	r0, r0, r0
				uart_a_write (*buf);
     78c:	ec000000 	stc	0, cr0, [r0], {-0}
     790:	fc000013 	stc2	0, cr0, [r0], {19}
			while (len && uart_a_room_in_tx) {
     794:	01000013 	tsteq	r0, r3, lsl r0
     798:	00005300 	andeq	r5, r0, r0, lsl #6
     79c:	00000000 	andeq	r0, r0, r0
			if (len != operation) {
     7a0:	13b20000 			; <UNDEFINED> instruction: 0x13b20000
			uart_a_disable_int;
     7a4:	13d00000 	bicsne	r0, r0, #0
     7a8:	00010000 	andeq	r0, r1, r0
			if (uart_a_room_in_tx) {
     7ac:	0013d650 	andseq	sp, r3, r0, asr r6
     7b0:	0013f600 	andseq	pc, r3, r0, lsl #12
				uart_a_enable_int;
     7b4:	50000100 	andpl	r0, r0, r0, lsl #2
     7b8:	000013f6 	strdeq	r1, [r0], -r6
				*buf++ = uart_a_read;
     7bc:	00001400 	andeq	r1, r0, r0, lsl #8
			if (uart_a_room_in_tx) {
     7c0:	7c740002 	ldclvc	0, cr0, [r4], #-8
	...
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7cc:	00000f10 	andeq	r0, r0, r0, lsl pc
     7d0:	00000f3e 	andeq	r0, r0, lr, lsr pc
			uart_a_enable_int;
     7d4:	4c500001 	mrrcmi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     7d8:	9000000f 	andls	r0, r0, pc
     7dc:	0100000f 	tsteq	r0, pc
			return 0;
     7e0:	00005000 	andeq	r5, r0, r0
			if (len == UART_CNTRL_SETRATE) {
     7e4:	00000000 	andeq	r0, r0, r0
				if (__pi_uart_setrate (*((word*)buf),
     7e8:	0f180000 	svceq	0x00180000
     7ec:	0f240000 	svceq	0x00240000
     7f0:	00010000 	andeq	r0, r1, r0
				syserror (EREQPAR, "uar");
     7f4:	000f2453 	andeq	r2, pc, r3, asr r4	; <UNPREDICTABLE>
			syserror (ENOOPER, "uai");
     7f8:	000f2600 	andeq	r2, pc, r0, lsl #12
			if (len == UART_CNTRL_GETRATE) {
     7fc:	70000200 	andvc	r0, r0, r0, lsl #4
				return 1;
     800:	000f2a00 	andeq	r2, pc, r0, lsl #20
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     804:	000f8200 	andeq	r8, pc, r0, lsl #4
			syserror (ENOOPER, "uai");
     808:	53000100 	movwpl	r0, #256	; 0x100
     80c:	00000f82 	andeq	r0, r0, r2, lsl #31
     810:	00000f86 	andeq	r0, r0, r6, lsl #31
     814:	00730002 	rsbseq	r0, r3, r2
     818:	00000f86 	andeq	r0, r0, r6, lsl #31
     81c:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
     820:	00530001 	subseq	r0, r3, r1
     824:	00000000 	andeq	r0, r0, r0
     828:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     82c:	1a00000f 	bne	870 <UART0IntHandler+0x44>
void UART0IntHandler () {
     830:	0100000f 	tsteq	r0, pc
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     834:	0f2a5200 	svceq	0x002a5200
     838:	0f6a0000 	svceq	0x006a0000
     83c:	00010000 	andeq	r0, r1, r0
     840:	000f8252 	andeq	r8, pc, r2, asr r2	; <UNPREDICTABLE>
     844:	000f8600 	andeq	r8, pc, r0, lsl #12
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     848:	53000100 	movwpl	r0, #256	; 0x100
     84c:	00000f86 	andeq	r0, r0, r6, lsl #31
		RISE_N_SHINE;
     850:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
     854:	00520001 	subseq	r0, r2, r1
		i_trigger (devevent (UART_A, READ));
     858:	00000000 	andeq	r0, r0, r0
     85c:	c4000000 	strgt	r0, [r0], #-0
     860:	cc000012 	stcgt	0, cr0, [r0], {18}
     864:	01000012 	tsteq	r0, r2, lsl r0
     868:	12d05100 	sbcsne	r5, r0, #0, 2
     86c:	12d20000 	sbcsne	r0, r2, #0
     870:	00010000 	andeq	r0, r1, r0
     874:	00000051 	andeq	r0, r0, r1, asr r0
     878:	00000000 	andeq	r0, r0, r0
     87c:	00121800 	andseq	r1, r2, r0, lsl #16
     880:	00123400 	andseq	r3, r2, r0, lsl #8
     884:	50000100 	andpl	r0, r0, r0, lsl #2
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     888:	0000123a 	andeq	r1, r0, sl, lsr r2
     88c:	00001246 	andeq	r1, r0, r6, asr #4
     890:	00500001 	subseq	r0, r0, r1
		i_trigger (devevent (UART_A, WRITE));
     894:	00000000 	andeq	r0, r0, r0
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     898:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     89c:	36000012 			; <UNDEFINED> instruction: 0x36000012
		RISE_N_SHINE;
     8a0:	01000012 	tsteq	r0, r2, lsl r0
     8a4:	123a5100 	eorsne	r5, sl, #0, 2
     8a8:	12440000 	subne	r0, r4, #0
		i_trigger (devevent (UART_A, WRITE));
     8ac:	00010000 	andeq	r0, r1, r0
     8b0:	00000051 	andeq	r0, r0, r1, asr r0
     8b4:	00000000 	andeq	r0, r0, r0
     8b8:	00121800 	andseq	r1, r2, r0, lsl #16
     8bc:	00123900 	andseq	r3, r2, r0, lsl #18
     8c0:	52000100 	andpl	r0, r0, #0, 2
     8c4:	0000123a 	andeq	r1, r0, sl, lsr r2
     8c8:	00001242 	andeq	r1, r0, r2, asr #4
     8cc:	00520001 	subseq	r0, r2, r1
     8d0:	00000000 	andeq	r0, r0, r0
     8d4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
}
     8d8:	30000012 	andcc	r0, r0, r2, lsl r0
     8dc:	01000012 	tsteq	r0, r2, lsl r0
     8e0:	12305300 	eorsne	r5, r0, #0, 6
     8e4:	12b40000 	adcsne	r0, r4, #0
     8e8:	00010000 	andeq	r0, r1, r0
void __buttons_setirq (int val) {
     8ec:	00000055 	andeq	r0, r0, r5, asr r0
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     8f0:	00000000 	andeq	r0, r0, r0
     8f4:	00121800 	andseq	r1, r2, r0, lsl #16
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8f8:	00129800 	andseq	r9, r2, r0, lsl #16
     8fc:	91000200 	mrsls	r0, R8_usr
     900:	00129800 	andseq	r9, r2, r0, lsl #16
		bn = BUTTON_GPIO (__button_list [i]);
     904:	0012b400 	andseq	fp, r2, r0, lsl #8
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     908:	91000200 	mrsls	r0, R8_usr
	...
     914:	00124800 	andseq	r4, r2, r0, lsl #16
     918:	00125e00 	andseq	r5, r2, r0, lsl #28
     91c:	50000100 	andpl	r0, r0, r0, lsl #2
}
     920:	00001266 	andeq	r1, r0, r6, ror #4
     924:	00001278 	andeq	r1, r0, r8, ror r2
     928:	88500001 	ldmdahi	r0, {r0}^
     92c:	90000012 	andls	r0, r0, r2, lsl r0
void __pinlist_setirq (int val) {
     930:	01000012 	tsteq	r0, r2, lsl r0
	for (i = 0; i < N_PINLIST; i++) {
     934:	12985000 	addsne	r5, r8, #0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     938:	12a00000 	adcne	r0, r0, #0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     93c:	00010000 	andeq	r0, r1, r0
	for (i = 0; i < N_PINLIST; i++) {
     940:	00000050 	andeq	r0, r0, r0, asr r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     944:	00000000 	andeq	r0, r0, r0
     948:	0011f400 	andseq	pc, r1, r0, lsl #8
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     94c:	0011fa00 	andseq	pc, r1, r0, lsl #20
     950:	50000100 	andpl	r0, r0, r0, lsl #2
     954:	00001200 	andeq	r1, r0, r0, lsl #4
	for (i = 0; i < N_PINLIST; i++) {
     958:	00001208 	andeq	r1, r0, r8, lsl #4
}
     95c:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     960:	18000012 	stmdane	r0, {r1, r4}
     964:	01000012 	tsteq	r0, r2, lsl r0
     968:	00005000 	andeq	r5, r0, r0
void GPIOIntHandler () {
     96c:	00000000 	andeq	r0, r0, r0
if (buttons_int) {
     970:	11f40000 	mvnsne	r0, r0
     974:	11fc0000 	mvnsne	r0, r0
	buttons_disable ();
     978:	00010000 	andeq	r0, r1, r0
     97c:	00120051 	andseq	r0, r2, r1, asr r0
	i_trigger ((aword)&__button_list);
     980:	00120a00 	andseq	r0, r2, r0, lsl #20
     984:	51000100 	mrspl	r0, (UNDEF: 16)
     988:	0000120c 	andeq	r1, r0, ip, lsl #4
     98c:	00001218 	andeq	r1, r0, r8, lsl r2
     990:	00510001 	subseq	r0, r1, r1
     994:	00000000 	andeq	r0, r0, r0
     998:	e6000000 	str	r0, [r0], -r0
     99c:	ee000011 	mcr	0, 0, r0, cr0, cr1, {0}
     9a0:	01000011 	tsteq	r0, r1, lsl r0
     9a4:	11f25000 	mvnsne	r5, r0
     9a8:	11f40000 	mvnsne	r0, r0
	RISE_N_SHINE;
     9ac:	00010000 	andeq	r0, r1, r0
     9b0:	00000050 	andeq	r0, r0, r0, asr r0
     9b4:	00000000 	andeq	r0, r0, r0
if (pin_sensor_int) {
     9b8:	0011e600 	andseq	lr, r1, r0, lsl #12
     9bc:	0011e800 	andseq	lr, r1, r0, lsl #16
	i_trigger ((aword)(&__input_pins));
     9c0:	52000100 	andpl	r0, r0, #0, 2
	...
     9cc:	000011d2 	ldrdeq	r1, [r0], -r2
     9d0:	000011d4 	ldrdeq	r1, [r0], -r4
     9d4:	00500001 	subseq	r0, r0, r1
     9d8:	00000000 	andeq	r0, r0, r0
     9dc:	d2000000 	andle	r0, r0, #0
     9e0:	dc000011 	stcle	0, cr0, [r0], {17}
     9e4:	01000011 	tsteq	r0, r1, lsl r0
     9e8:	11e05100 	mvnne	r5, r0, lsl #2
	__pinsen_disable_and_clear;
     9ec:	11e60000 	mvnne	r0, r0
	RISE_N_SHINE;
     9f0:	00010000 	andeq	r0, r1, r0
     9f4:	00000051 	andeq	r0, r0, r1, asr r0
     9f8:	00000000 	andeq	r0, r0, r0
}
     9fc:	0011d200 	andseq	sp, r1, r0, lsl #4
     a00:	0011d600 	andseq	sp, r1, r0, lsl #12
     a04:	52000100 	andpl	r0, r0, #0, 2
	...
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a18:	00500001 	subseq	r0, r0, r1
	...
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a28:	01000000 	mrseq	r0, (UNDEF: 0)
     a2c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a3c:	00010000 	andeq	r0, r1, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a40:	00000050 	andeq	r0, r0, r0, asr r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a44:	00000000 	andeq	r0, r0, r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a48:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		pin = (port_confs [i] >> 19) & 0x1f;
     a5c:	00510001 	subseq	r0, r1, r1
	...
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a6c:	01000000 	mrseq	r0, (UNDEF: 0)
		if (port_confs [i] & 0x80)
     a70:	00005000 	andeq	r5, r0, r0
     a74:	00000000 	andeq	r0, r0, r0
     a78:	00010000 	andeq	r0, r1, r0
		if (port_confs [i] & 0x40)
     a7c:	00000050 	andeq	r0, r0, r0, asr r0
	...
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a8c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	all_leds_blink;
     aa0:	00520001 	subseq	r0, r2, r1
     aa4:	00000000 	andeq	r0, r0, r0
     aa8:	c2000000 	andgt	r0, r0, #0
     aac:	c4000011 	strgt	r0, [r0], #-17	; 0xffffffef
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ab0:	01000011 	tsteq	r0, r1, lsl r0
     ab4:	00005000 	andeq	r5, r0, r0
     ab8:	00000000 	andeq	r0, r0, r0
     abc:	11c20000 	bicne	r0, r2, r0
     ac0:	11c40000 	bicne	r0, r4, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     ac4:	00010000 	andeq	r0, r1, r0
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ac8:	0011c851 	andseq	ip, r1, r1, asr r8
     acc:	0011d200 	andseq	sp, r1, r0, lsl #4
	IntEnable (INT_AON_RTC_COMB);
     ad0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	__pi_malloc_init ();
     adc:	000011b4 			; <UNDEFINED> instruction: 0x000011b4
	IntEnable (INT_AON_GPIO_EDGE);
     ae0:	000011b8 			; <UNDEFINED> instruction: 0x000011b8
     ae4:	b8500001 	ldmdalt	r0, {r0}^
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     ae8:	c2000011 	andgt	r0, r0, #17
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     aec:	01000011 	tsteq	r0, r1, lsl r0
     af0:	00005300 	andeq	r5, r0, r0, lsl #6
     af4:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     af8:	11b80000 			; <UNDEFINED> instruction: 0x11b80000
     afc:	11c20000 	bicne	r0, r2, r0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b00:	00010000 	andeq	r0, r1, r0
     b04:	00000050 	andeq	r0, r0, r0, asr r0
	...
	reinit_uart ();
     b14:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b20:	00510001 	subseq	r0, r1, r1
	...
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b30:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b34:	00005200 	andeq	r5, r0, r0, lsl #4
     b38:	00000000 	andeq	r0, r0, r0
			devinit [i] . init (devinit [i] . param);
     b3c:	00010000 	andeq	r0, r1, r0
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b40:	00000052 	andeq	r0, r0, r2, asr r0
	...
	IntEnable (INT_UART0_COMB);
     b50:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		diag ("");
     b5c:	00001190 	muleq	r0, r0, r1
     b60:	00001198 	muleq	r0, r8, r1
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     b64:	9a500001 	bls	1400b70 <__ccfg+0x13e0bc8>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     b68:	9e000011 	mcrls	0, 0, r0, cr0, cr1, {0}
		diag ("Leftover RAM: %d bytes",
     b6c:	01000011 	tsteq	r0, r1, lsl r0
     b70:	119e5000 	orrsne	r5, lr, r0
     b74:	11b40000 			; <UNDEFINED> instruction: 0x11b40000
     b78:	00010000 	andeq	r0, r1, r0
     b7c:	00000053 	andeq	r0, r0, r3, asr r0
	...
     b8c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     b98:	00500001 	subseq	r0, r0, r1
	...
     ba8:	01000000 	mrseq	r0, (UNDEF: 0)
     bac:	00005000 	andeq	r5, r0, r0
     bb0:	00000000 	andeq	r0, r0, r0
     bb4:	00010000 	andeq	r0, r1, r0
     bb8:	00000050 	andeq	r0, r0, r0, asr r0
	...
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     bc8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     bd4:	00570001 	subseq	r0, r7, r1
	...
     be4:	01000000 	mrseq	r0, (UNDEF: 0)
}
     be8:	00005600 	andeq	r5, r0, r0, lsl #12
	...
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     bf8:	00010000 	andeq	r0, r1, r0
	check_stack_overflow;
     bfc:	00000050 	andeq	r0, r0, r0, asr r0
     c00:	00000000 	andeq	r0, r0, r0
     c04:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	update_n_wake (MAX_WORD, NO);
     c10:	00580001 	subseq	r0, r8, r1
	for_all_tasks (__pi_curr) {
     c14:	00000000 	andeq	r0, r0, r0
     c18:	01000000 	mrseq	r0, (UNDEF: 0)
     c1c:	00005000 	andeq	r5, r0, r0
	...
	__SLEEP;
     c2c:	00010000 	andeq	r0, r1, r0
     c30:	00000054 	andeq	r0, r0, r4, asr r0
	system_event_count ++;
     c34:	00000000 	andeq	r0, r0, r0
     c38:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
			__WFI ();
     c4c:	00580001 	subseq	r0, r8, r1
     c50:	00000000 	andeq	r0, r0, r0
     c54:	01000000 	mrseq	r0, (UNDEF: 0)
	check_stack_overflow;
     c58:	00005800 	andeq	r5, r0, r0, lsl #16
     c5c:	00000000 	andeq	r0, r0, r0
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c60:	134c0000 	movtne	r0, #49152	; 0xc000
     c64:	13540000 	cmpne	r4, #0
			(__pi_curr->code) (tstate (__pi_curr));
     c68:	00010000 	andeq	r0, r1, r0
			goto Redo;
     c6c:	00135450 	andseq	r5, r3, r0, asr r4
	for_all_tasks (__pi_curr) {
     c70:	00135e00 	andseq	r5, r3, r0, lsl #28
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c74:	50000100 	andpl	r0, r0, r0, lsl #2
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c78:	00001364 	andeq	r1, r0, r4, ror #6
     c7c:	00001370 	andeq	r1, r0, r0, ror r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c80:	84500001 	ldrbhi	r0, [r0], #-1
     c84:	8e000013 	mcrhi	0, 0, r0, cr0, cr3, {0}
     c88:	01000013 	tsteq	r0, r3, lsl r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c8c:	00005000 	andeq	r5, r0, r0
     c90:	00000000 	andeq	r0, r0, r0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c94:	135a0000 	cmpne	sl, #0
     c98:	138c0000 	orrne	r0, ip, #0
			__WFI ();
     c9c:	00010000 	andeq	r0, r1, r0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ca0:	00138c54 	andseq	r8, r3, r4, asr ip
     ca4:	00138e00 	andseq	r8, r3, r0, lsl #28
}
     ca8:	52000100 	andpl	r0, r0, #0, 2
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cac:	0000138e 	andeq	r1, r0, lr, lsl #7
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cb0:	00001390 	muleq	r0, r0, r3
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cb4:	00540001 	subseq	r0, r4, r1
     cb8:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cbc:	da000000 	ble	cc4 <__pi_release+0xd8>
     cc0:	0c00000e 	stceq	0, cr0, [r0], {14}
     cc4:	0100000f 	tsteq	r0, pc
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cc8:	00005600 	andeq	r5, r0, r0, lsl #12
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ccc:	00000000 	andeq	r0, r0, r0
     cd0:	0ef00000 	cdpeq	0, 15, cr0, cr0, cr0, {0}
     cd4:	0efa0000 	cdpeq	0, 15, cr0, cr10, cr0, {0}
     cd8:	00010000 	andeq	r0, r1, r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     cdc:	00000053 	andeq	r0, r0, r3, asr r0
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cec:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     cf8:	00540001 	subseq	r0, r4, r1
	...
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d08:	01000000 	mrseq	r0, (UNDEF: 0)
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d0c:	00005000 	andeq	r5, r0, r0
     d10:	00000000 	andeq	r0, r0, r0
     d14:	00010000 	andeq	r0, r1, r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d18:	00000050 	andeq	r0, r0, r0, asr r0
     d1c:	00000000 	andeq	r0, r0, r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d20:	00115800 	andseq	r5, r1, r0, lsl #16
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d24:	00117100 	andseq	r7, r1, r0, lsl #2
     d28:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			while (!(AONWUCPowerStatusGet () &
     d34:	00001158 	andeq	r1, r0, r8, asr r1
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d38:	0000116e 	andeq	r1, r0, lr, ror #2
     d3c:	00510001 	subseq	r0, r1, r1
     d40:	00000000 	andeq	r0, r0, r0
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d44:	34000000 	strcc	r0, [r0], #-0
     d48:	48000011 	stmdami	r0, {r0, r4}
     d4c:	01000011 	tsteq	r0, r1, lsl r0
     d50:	11485000 	mrsne	r5, (UNDEF: 72)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d54:	114c0000 	mrsne	r0, (UNDEF: 76)
     d58:	00010000 	andeq	r0, r1, r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d5c:	00115054 	andseq	r5, r1, r4, asr r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d60:	00115800 	andseq	r5, r1, r0, lsl #16
			SysCtrlAdjustRechargeAfterPowerDown ();
     d64:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     d70:	00001134 	andeq	r1, r0, r4, lsr r1
}
     d74:	0000114b 	andeq	r1, r0, fp, asr #2
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d78:	50510001 	subspl	r0, r1, r1
     d7c:	58000011 	stmdapl	r0, {r0, r4}
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d80:	01000011 	tsteq	r0, r1, lsl r0
     d84:	00005100 	andeq	r5, r0, r0, lsl #2
     d88:	00000000 	andeq	r0, r0, r0
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     d8c:	113c0000 	teqne	ip, r0
     d90:	114b0000 	mrsne	r0, (UNDEF: 75)
     d94:	00010000 	andeq	r0, r1, r0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     d98:	00115053 	andseq	r5, r1, r3, asr r0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     d9c:	00115800 	andseq	r5, r1, r0, lsl #16
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     da0:	53000100 	movwpl	r0, #256	; 0x100
	...
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     db4:	00500001 	subseq	r0, r0, r1
	...
			PRCMPowerDomainOff (
     dc4:	01000000 	mrseq	r0, (UNDEF: 0)
     dc8:	00005100 	andeq	r5, r0, r0, lsl #2
	__SLEEP;
     dcc:	00000000 	andeq	r0, r0, r0
     dd0:	00010000 	andeq	r0, r1, r0
  __ASM volatile ("cpsie i" : : : "memory");
     dd4:	00000055 	andeq	r0, r0, r5, asr r0
	...
	goto Redo;
     de4:	52000100 	andpl	r0, r0, #0, 2
	...
     df0:	00520001 	subseq	r0, r2, r1
     df4:	00000000 	andeq	r0, r0, r0
     df8:	14000000 	strne	r0, [r0], #-0
     dfc:	1e000011 	mcrne	0, 0, r0, cr0, cr1, {0}
     e00:	01000011 	tsteq	r0, r1, lsl r0
     e04:	00005300 	andeq	r5, r0, r0, lsl #6
     e08:	00000000 	andeq	r0, r0, r0
     e0c:	10b80000 	adcsne	r0, r8, r0
     e10:	10be0000 	adcsne	r0, lr, r0
     e14:	00010000 	andeq	r0, r1, r0
     e18:	00000050 	andeq	r0, r0, r0, asr r0
     e1c:	00000000 	andeq	r0, r0, r0
     e20:	00144400 	andseq	r4, r4, r0, lsl #8
     e24:	00144a00 	andseq	r4, r4, r0, lsl #20
     e28:	50000100 	andpl	r0, r0, r0, lsl #2
     e2c:	0000144a 	andeq	r1, r0, sl, asr #8
     e30:	00001478 	andeq	r1, r0, r8, ror r4
     e34:	00550001 	subseq	r0, r5, r1
     e38:	00000000 	andeq	r0, r0, r0
     e3c:	44000000 	strmi	r0, [r0], #-0
     e40:	4f000014 	svcmi	0x00000014
	cli_tim;
     e44:	01000014 	tsteq	r0, r4, lsl r0
     e48:	144f5100 	strbne	r5, [pc], #-256	; e50 <halt+0xc>
     e4c:	14780000 	ldrbtne	r0, [r8], #-0
	diag ("PicOS halted");
     e50:	00010000 	andeq	r0, r1, r0
	mdelay (500);
     e54:	00000054 	andeq	r0, r0, r4, asr r0
     e58:	00000000 	andeq	r0, r0, r0
	setpowermode (2);
     e5c:	00146000 	andseq	r6, r4, r0
	__PCB = NULL;
     e60:	00146400 	andseq	r6, r4, r0, lsl #8
	release;
     e64:	53000100 	movwpl	r0, #256	; 0x100
     e68:	00001466 	andeq	r1, r0, r6, ror #8
     e6c:	0000146a 	andeq	r1, r0, sl, ror #8
     e70:	6a530001 	bvs	14c0e7c <__ccfg+0x14a0ed4>
int main (void) {
     e74:	78000014 	stmdavc	r0, {r2, r4}
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e78:	01000014 	tsteq	r0, r4, lsl r0
     e7c:	00005200 	andeq	r5, r0, r0, lsl #4
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e80:	00000000 	andeq	r0, r0, r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e84:	0fe40000 	svceq	0x00e40000
	system_init ();
     e88:	0fe90000 	svceq	0x00e90000
	tcv_init ();
     e8c:	00010000 	andeq	r0, r1, r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e90:	00000050 	andeq	r0, r0, r0, asr r0
     e94:	00000000 	andeq	r0, r0, r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e98:	000fe400 	andeq	lr, pc, r0, lsl #8
     e9c:	000fe900 	andeq	lr, pc, r0, lsl #18
     ea0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	delay (16, 0);
     eb4:	00500001 	subseq	r0, r0, r1
	__pi_release ();
     eb8:	00000000 	andeq	r0, r0, r0
     ebc:	01000000 	mrseq	r0, (UNDEF: 0)
     ec0:	00005000 	andeq	r5, r0, r0
	...
     ed0:	00010000 	andeq	r0, r1, r0
static void killev (__pi_pcb_t *pid) {
     ed4:	00000053 	andeq	r0, r0, r3, asr r0
	wfun = (aword)(pid->code);
     ed8:	00000000 	andeq	r0, r0, r0
	for_all_tasks (i) {
     edc:	53000100 	movwpl	r0, #256	; 0x100
	...
		for (j = 0; j < nevents (i); j++) {
     ee8:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
			    || i->Events [j] . Event == wfun
     eec:	00000fc0 	andeq	r0, r0, r0, asr #31
		for (j = 0; j < nevents (i); j++) {
     ef0:	c0500001 	subsgt	r0, r0, r1
			if (i->Events [j] . Event == (aword)pid
     ef4:	d300000f 	movwle	r0, #15
     ef8:	0100000f 	tsteq	r0, pc
     efc:	0fd45300 	svceq	0x00d45300
				wakeupev (i, j);
     f00:	0fe40000 	svceq	0x00e40000
     f04:	00010000 	andeq	r0, r1, r0
	for_all_tasks (i) {
     f08:	00000053 	andeq	r0, r0, r3, asr r0
}
     f0c:	00000000 	andeq	r0, r0, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f10:	000fc200 	andeq	ip, pc, r0, lsl #4
static void qfree (aword *ch) {
     f14:	000fd300 	andeq	sp, pc, r0, lsl #6
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f18:	50000100 	andpl	r0, r0, r0, lsl #2
	cc = (aword*)(mpools + MA_NP);
     f1c:	00000fd4 	ldrdeq	r0, [r0], -r4
	m_setnextp (ch, chunk);
     f20:	00000fe4 	andeq	r0, r0, r4, ror #31
	m_setnextp (cc, ch);
     f24:	00500001 	subseq	r0, r0, r1
	...
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f34:	01000000 	mrseq	r0, (UNDEF: 0)
			m_setnextp (cc, m_nextp (chunk));
     f38:	00005000 	andeq	r5, r0, r0
			m_size (chunk) += m_hdrlen + m_size (ch);
     f3c:	00000000 	andeq	r0, r0, r0
     f40:	00010000 	andeq	r0, r1, r0
     f44:	00000053 	andeq	r0, r0, r3, asr r0
     f48:	00000000 	andeq	r0, r0, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f4c:	53000100 	movwpl	r0, #256	; 0x100
	...
			m_size (ch) += m_hdrlen + m_size (chunk);
     f60:	00500001 	subseq	r0, r0, r1
     f64:	00000000 	andeq	r0, r0, r0
     f68:	01000000 	mrseq	r0, (UNDEF: 0)
     f6c:	00005000 	andeq	r5, r0, r0
	...
			if (m_size (chunk) >= m_size (ch))
     f7c:	00010000 	andeq	r0, r1, r0
     f80:	00000053 	andeq	r0, r0, r3, asr r0
		chunk = m_nextp (chunk))
     f84:	00000000 	andeq	r0, r0, r0
     f88:	000fec00 	andeq	lr, pc, r0, lsl #24
     f8c:	000ff200 	andeq	pc, pc, r0, lsl #4
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f90:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	diag_wchar (c, a);
     f9c:	00000fec 	andeq	r0, r0, ip, ror #31
}
     fa0:	00000ff5 	strdeq	r0, [r0], -r5
     fa4:	00510001 	subseq	r0, r1, r1
	syserror (ESTATE, "state");
     fa8:	00000000 	andeq	r0, r0, r0
     fac:	fa000000 	blx	fb4 <__pi_badstate+0xc>
     fb0:	3800000f 	stmdacc	r0, {r0, r1, r2, r3}
     fb4:	01000010 	tsteq	r0, r0, lsl r0
	for (i = 0; i < MAX_UTIMERS; i++)
     fb8:	103c5400 	eorsne	r5, ip, r0, lsl #8
void utimer_add (address ut) {
     fbc:	108a0000 	addne	r0, sl, r0
     fc0:	00010000 	andeq	r0, r1, r0
		if (__pi_utims [i] == NULL)
     fc4:	00108c54 	andseq	r8, r0, r4, asr ip
	for (i = 0; i < MAX_UTIMERS; i++)
     fc8:	00109600 	andseq	r9, r0, r0, lsl #12
     fcc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
}
     fd8:	00001032 	andeq	r1, r0, r2, lsr r0
     fdc:	00001034 	andeq	r1, r0, r4, lsr r0
     fe0:	3c500001 	mrrccc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
	*t = v;
     fe4:	8c000010 	stchi	0, cr0, [r0], {16}
	TCI_RUN_AUXILIARY_TIMER;
     fe8:	01000010 	tsteq	r0, r0, lsl r0
void update_n_wake (word min, Boolean force) {
     fec:	00005000 	andeq	r5, r0, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
     ff0:	00000000 	andeq	r0, r0, r0
     ff4:	10cc0000 	sbcne	r0, ip, r0
     ff8:	10e00000 	rscne	r0, r0, r0
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     ffc:	00010000 	andeq	r0, r1, r0
    1000:	0010e650 	andseq	lr, r0, r0, asr r6
    1004:	00110000 	andseq	r0, r1, r0
    1008:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1014:	000010cc 	andeq	r1, r0, ip, asr #1
    1018:	000010e2 	andeq	r1, r0, r2, ror #1
    101c:	e6510001 	ldrb	r0, [r1], -r1
    1020:	ec000010 	stc	0, cr0, [r0], {16}
    1024:	01000010 	tsteq	r0, r0, lsl r0
    1028:	00005100 	andeq	r5, r0, r0, lsl #2
    102c:	00000000 	andeq	r0, r0, r0
		for_all_tasks (i) {
    1030:	10de0000 	sbcsne	r0, lr, r0
	__pi_mintk = znew + min;
    1034:	10e00000 	rscne	r0, r0, r0
    1038:	00010000 	andeq	r0, r1, r0
			if (!twaiting (i))
    103c:	00000050 	andeq	r0, r0, r0, asr r0
    1040:	00000000 	andeq	r0, r0, r0
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1044:	0010de00 	andseq	sp, r0, r0, lsl #28
    1048:	0010e200 	andseq	lr, r0, r0, lsl #4
    104c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1058:	00001304 	andeq	r1, r0, r4, lsl #6
    105c:	00001312 	andeq	r1, r0, r2, lsl r3
    1060:	18500001 	ldmdane	r0, {r0}^
    1064:	2b000013 	blcs	10b8 <proceed>
    1068:	01000013 	tsteq	r0, r3, lsl r0
    106c:	00005000 	andeq	r5, r0, r0
    1070:	00000000 	andeq	r0, r0, r0
				wakeuptm (i);
    1074:	13100000 	tstne	r0, #0
    1078:	13120000 	tstne	r2, #0
		for_all_tasks (i) {
    107c:	00010000 	andeq	r0, r1, r0
				d = i->Timer - znew;
    1080:	00000050 	andeq	r0, r0, r0, asr r0
	...
		if ((word)(__pi_mintk - znew) < min) 
    1090:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    109c:	00500001 	subseq	r0, r0, r1
	...
    10ac:	01000000 	mrseq	r0, (UNDEF: 0)
    10b0:	00005500 	andeq	r5, r0, r0, lsl #10
	...
	prcdstate (__pi_curr, state);
    10c0:	00010000 	andeq	r0, r1, r0
	release;
    10c4:	00000054 	andeq	r0, r0, r4, asr r0
    10c8:	00000000 	andeq	r0, r0, r0
void __pi_wait (aword event, word state) {
    10cc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		syserror (ENEVENTS, "sw");
    10e0:	00500001 	subseq	r0, r0, r1
    10e4:	00000000 	andeq	r0, r0, r0
	setestate (__pi_curr->Events [j], state, event);
    10e8:	01000000 	mrseq	r0, (UNDEF: 0)
	incwait (__pi_curr);
    10ec:	00005000 	andeq	r5, r0, r0
	setestate (__pi_curr->Events [j], state, event);
    10f0:	00000000 	andeq	r0, r0, r0
}
    10f4:	00020000 	andeq	r0, r2, r0
    10f8:	00000075 	andeq	r0, r0, r5, ror r0
    10fc:	00000000 	andeq	r0, r0, r0
void __pi_trigger (aword event) {
    1100:	1bec0000 	blne	ffb01108 <_estack+0xdfafc108>
	for_all_tasks (i) {
    1104:	1c0c0000 	stcne	0, cr0, [ip], {-0}
		for (j = 0; j < nevents (i); j++) {
    1108:	00010000 	andeq	r0, r1, r0
    110c:	001c1250 	andseq	r1, ip, r0, asr r2
    1110:	001c1300 	andseq	r1, ip, r0, lsl #6
    1114:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			if (i->Events [j] . Event == event) {
    1120:	00001bf6 	strdeq	r1, [r0], -r6
				wakeupev (i, j);
    1124:	00001c1c 	andeq	r1, r0, ip, lsl ip
    1128:	1c540001 	mrrcne	0, 0, r0, r4, cr1
	for_all_tasks (i) {
    112c:	1f00001c 	svcne	0x0000001c
}
    1130:	0100001c 	tsteq	r0, ip, lsl r0
aword __pi_join (aword pid, word st) {
    1134:	00005000 	andeq	r5, r0, r0
	for_all_tasks (i) {
    1138:	00000000 	andeq	r0, r0, r0
    113c:	1bb80000 	blne	fee01144 <_estack+0xdedfc144>
	return 0;
    1140:	1bc80000 	blne	ff201148 <_estack+0xdf1fc148>
		if ((aword)i == pid) {
    1144:	00010000 	andeq	r0, r1, r0
			__pi_wait (pid, st);
    1148:	001bce50 	andseq	ip, fp, r0, asr lr
}
    114c:	001bd600 	andseq	sp, fp, r0, lsl #12
	for_all_tasks (i) {
    1150:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	settstate (__pi_curr, state);
    115c:	00001bd4 	ldrdeq	r1, [r0], -r4
    1160:	00001be0 	andeq	r1, r0, r0, ror #23
    1164:	00530001 	subseq	r0, r3, r1
    1168:	00000000 	andeq	r0, r0, r0
	update_n_wake (d, YES);
    116c:	d6000000 	strle	r0, [r0], -r0
    1170:	dc00001b 	stcle	0, cr0, [r0], {27}
	__pi_curr->Timer = __pi_old + d;
    1174:	0100001b 	tsteq	r0, fp, lsl r0
    1178:	1bdc5000 	blne	ff715180 <_estack+0xdf710180>
	inctimer (__pi_curr);
    117c:	1be00000 	blne	ff801184 <_estack+0xdf7fc184>
    1180:	00020000 	andeq	r0, r2, r0
    1184:	00000073 	andeq	r0, r0, r3, ror r0
}
    1188:	00000000 	andeq	r0, r0, r0
    118c:	1b780000 	blne	1e01194 <__ccfg+0x1de11ec>
	if (fun == NULL)
    1190:	1b880000 	blne	fe201198 <_estack+0xde1fc198>
		return (int) __pi_curr;
    1194:	00010000 	andeq	r0, r1, r0
    1198:	001b8e50 	andseq	r8, fp, r0, asr lr
	for_all_tasks (i)
    119c:	001b9600 	andseq	r9, fp, r0, lsl #12
}
    11a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	for_all_tasks (i)
    11ac:	00001b78 	andeq	r1, r0, r8, ror fp
    11b0:	00001b8a 	andeq	r1, r0, sl, lsl #23
int __pi_strlen (const char *s) {
    11b4:	8e510001 	cdphi	0, 5, cr0, cr1, cr1, {0}
	for (i = 0; *(s+i) != '\0'; i++);
    11b8:	b800001b 	stmdalt	r0, {r0, r1, r3, r4}
}
    11bc:	0100001b 	tsteq	r0, fp, lsl r0
	for (i = 0; *(s+i) != '\0'; i++);
    11c0:	00005100 	andeq	r5, r0, r0, lsl #2
	while ((Boolean)(*d++ = *s++));
    11c4:	00000000 	andeq	r0, r0, r0
    11c8:	1b940000 	blne	fe5011d0 <_estack+0xde4fc1d0>
    11cc:	1b9c0000 	blne	fe7011d4 <_estack+0xde6fc1d4>
}
    11d0:	00010000 	andeq	r0, r1, r0
	while (n--)
    11d4:	001ba653 	andseq	sl, fp, r3, asr r6
    11d8:	001bb800 	andseq	fp, fp, r0, lsl #16
		*dest++ = *src++;
    11dc:	53000100 	movwpl	r0, #256	; 0x100
	...
	while (n--)
    11e8:	00001b96 	muleq	r0, r6, fp
}
    11ec:	00001ba4 	andeq	r1, r0, r4, lsr #23
		*dest++ = c;
    11f0:	a6500001 	ldrbge	r0, [r0], -r1
void adddevfunc (devreqfun_t rf, int loc) {
    11f4:	a800001b 	stmdage	r0, {r0, r1, r3, r4}
		syserror (EREQPAR, "addv");
    11f8:	0100001b 	tsteq	r0, fp, lsl r0
		syserror (ERESOURCE, "addv");
    11fc:	1ba85000 	blne	fea15204 <_estack+0xdea10204>
	if (ioreq [loc] != NULL)
    1200:	1bb80000 	blne	fee01208 <_estack+0xdedfc208>
    1204:	00020000 	andeq	r0, r2, r0
		syserror (ERESOURCE, "addv");
    1208:	00000073 	andeq	r0, r0, r3, ror r0
	ioreq [loc] = rf;
    120c:	00000000 	andeq	r0, r0, r0
}
    1210:	1adc0000 	bne	ff701218 <_estack+0xdf6fc218>
    1214:	1af60000 	bne	ffd8121c <_estack+0xdfd7c21c>
sint io (word retry, word dev, word operation, char *buf, word len) {
    1218:	00010000 	andeq	r0, r1, r0
    121c:	001af650 	andseq	pc, sl, r0, asr r6	; <UNPREDICTABLE>
    1220:	001afc00 	andseq	pc, sl, r0, lsl #24
    1224:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1228:	00001afc 	strdeq	r1, [r0], -ip
    122c:	00001b06 	andeq	r1, r0, r6, lsl #22
    1230:	06500001 	ldrbeq	r0, [r0], -r1
		syserror (ENODEVICE, "io");
    1234:	7800001b 	stmdavc	r0, {r0, r1, r3, r4}
    1238:	0100001b 	tsteq	r0, fp, lsl r0
	if (len == 0)
    123c:	00005500 	andeq	r5, r0, r0, lsl #10
	ret = (ioreq [dev]) (operation, buf, len);
    1240:	00000000 	andeq	r0, r0, r0
    1244:	1adc0000 	bne	ff70124c <_estack+0xdf6fc24c>
	if (ret >= 0)
    1248:	1af60000 	bne	ffd81250 <_estack+0xdfd7c250>
	if (ret == -1) {
    124c:	00010000 	andeq	r0, r1, r0
    1250:	001af651 	andseq	pc, sl, r1, asr r6	; <UNPREDICTABLE>
		if (retry == WNONE)
    1254:	001afc00 	andseq	pc, sl, r0, lsl #24
		iowait (dev, operation, retry);
    1258:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    125c:	00001afc 	strdeq	r1, [r0], -ip
    1260:	00001b06 	andeq	r1, r0, r6, lsl #22
			release;
    1264:	06510001 	ldrbeq	r0, [r1], -r1
	if (ret == -2) {
    1268:	7800001b 	stmdavc	r0, {r0, r1, r3, r4}
		if (retry != WNONE) {
    126c:	0100001b 	tsteq	r0, fp, lsl r0
    1270:	00005700 	andeq	r5, r0, r0, lsl #14
			iowait (dev, operation, retry);
    1274:	00000000 	andeq	r0, r0, r0
    1278:	1adc0000 	bne	ff701280 <_estack+0xdf6fc280>
			(ioreq [dev]) (NONE, buf, len);
    127c:	1af60000 	bne	ffd81284 <_estack+0xdfd7c284>
    1280:	00010000 	andeq	r0, r1, r0
    1284:	001af652 	andseq	pc, sl, r2, asr r6	; <UNPREDICTABLE>
		(ioreq [dev]) (NONE, buf, len);
    1288:	001afc00 	andseq	pc, sl, r0, lsl #24
    128c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1290:	00001afc 	strdeq	r1, [r0], -ip
}
    1294:	00001b06 	andeq	r1, r0, r6, lsl #22
	if (retry != WNONE) {
    1298:	06520001 	ldrbeq	r0, [r2], -r1
		delay (-ret - 2, retry);
    129c:	7800001b 	stmdavc	r0, {r0, r1, r3, r4}
    12a0:	0100001b 	tsteq	r0, fp, lsl r0
    12a4:	00005400 	andeq	r5, r0, r0, lsl #8
    12a8:	00000000 	andeq	r0, r0, r0
		release;
    12ac:	1b360000 	blne	d812b4 <__ccfg+0xd6130c>
    12b0:	1b4e0000 	blne	13812b8 <__ccfg+0x1361310>
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    12b4:	00010000 	andeq	r0, r1, r0
    12b8:	001b4e50 	andseq	r4, fp, r0, asr lr
    12bc:	001b5300 	andseq	r5, fp, r0, lsl #6
    12c0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		syserror (ERESOURCE, "mal1");
    12cc:	00001b54 	andeq	r1, r0, r4, asr fp
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    12d0:	00001b63 	andeq	r1, r0, r3, ror #22
    12d4:	00500001 	subseq	r0, r0, r1
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12d8:	00000000 	andeq	r0, r0, r0
	m_size (mpools [0]) = mlen - m_hdrlen;
    12dc:	8c000000 	stchi	0, cr0, [r0], {-0}
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12e0:	9a00001a 	bls	1350 <kill+0x4>
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12e4:	0100001a 	tsteq	r0, sl, lsl r0
    12e8:	1a9a5000 	bne	fe6952f0 <_estack+0xde6902f0>
}
    12ec:	1ac80000 	bne	ff2012f4 <_estack+0xdf1fc2f4>
    12f0:	00010000 	andeq	r0, r1, r0
    12f4:	00000054 	andeq	r0, r0, r4, asr r0
    12f8:	00000000 	andeq	r0, r0, r0
    12fc:	001a8c00 	andseq	r8, sl, r0, lsl #24
    1300:	001aa000 	andseq	sl, sl, r0
void __pi_free (aword *ch) {
    1304:	51000100 	mrspl	r0, (UNDEF: 16)
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1308:	00001aa4 	andeq	r1, r0, r4, lsr #21
    130c:	00001ab3 			; <UNDEFINED> instruction: 0x00001ab3
		syserror (EMALLOC, "malg");
    1310:	00510001 	subseq	r0, r1, r1
    1314:	00000000 	andeq	r0, r0, r0
	mcfree [MA_NP] += m_size (ch);
    1318:	8c000000 	stchi	0, cr0, [r0], {-0}
		m_size (ch) ^= MALLOC_UMASK;
    131c:	a000001a 	andge	r0, r0, sl, lsl r0
    1320:	0100001a 	tsteq	r0, sl, lsl r0
	mcfree [MA_NP] += m_size (ch);
    1324:	1aa45200 	bne	fe915b2c <_estack+0xde910b2c>
	QFREE;
    1328:	1ab30000 	bne	fecc1330 <_estack+0xdecbc330>
	if (mevent [MA_NP] . nwait) {
    132c:	00010000 	andeq	r0, r1, r0
    1330:	00000052 	andeq	r0, r0, r2, asr r0
		trigger ((aword)(&(mevent [MA_NP])));
    1334:	00000000 	andeq	r0, r0, r0
		mevent [MA_NP] . nwait --;
    1338:	001ab400 	andseq	fp, sl, r0, lsl #8
}
    133c:	001abe00 	andseq	fp, sl, r0, lsl #28
    1340:	50000100 	andpl	r0, r0, r0, lsl #2
    1344:	00001abe 			; <UNDEFINED> instruction: 0x00001abe
    1348:	00001ac2 	andeq	r1, r0, r2, asr #21
void kill (aword pid) {
    134c:	00740007 	rsbseq	r0, r4, r7
		pid = (aword) __pi_curr;
    1350:	00722432 	rsbseq	r2, r2, r2, lsr r4
	j = NULL;
    1354:	001ac222 	andseq	ip, sl, r2, lsr #4
	for_all_tasks (i) {
    1358:	001adc00 	andseq	sp, sl, r0, lsl #24
	syserror (EREQPAR, "kpi");
    135c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			killev (i);
    1370:	00500001 	subseq	r0, r0, r1
	...
				release;
    1380:	01000000 	mrseq	r0, (UNDEF: 0)
				j->Next = i->Next;
    1384:	00005100 	andeq	r5, r0, r0, lsl #2
	...
}
    1394:	00010000 	andeq	r0, r1, r0
    1398:	00000050 	andeq	r0, r0, r0, asr r0
	if (size < 8)
    139c:	00000000 	andeq	r0, r0, r0
		_size = 2;
    13a0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		if (mevent [MA_NP] . nfail != 255)
    13b4:	00510001 	subseq	r0, r1, r1
    13b8:	00000000 	andeq	r0, r0, r0
			mevent [MA_NP] . nfail ++;
    13bc:	01000000 	mrseq	r0, (UNDEF: 0)
		mnfree [MA_NP] = 0;
    13c0:	00005600 	andeq	r5, r0, r0, lsl #12
	...
			syserror (EMALLOC, "malc");
    13d0:	00010000 	andeq	r0, r1, r0
    13d4:	00000050 	andeq	r0, r0, r0, asr r0
		if (m_size (chunk) >= _size)
    13d8:	00000000 	andeq	r0, r0, r0
    13dc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
			m_size (chunk) = _size;
    13f0:	00500001 	subseq	r0, r0, r1
			cc = chunk + _size + m_hdrlen;
    13f4:	00000000 	andeq	r0, r0, r0
    13f8:	01000000 	mrseq	r0, (UNDEF: 0)
			m_size (cc) = waste - m_hdrlen;
    13fc:	00005000 	andeq	r5, r0, r0
	...
		mcfree [MA_NP] -= m_size (chunk);
    140c:	00010000 	andeq	r0, r1, r0
    1410:	00000051 	andeq	r0, r0, r1, asr r0
    1414:	00000000 	andeq	r0, r0, r0
		m_size (chunk) |= MALLOC_UMASK;
    1418:	51000100 	mrspl	r0, (UNDEF: 16)
	...
}
    142c:	00500001 	subseq	r0, r0, r1
    1430:	00000000 	andeq	r0, r0, r0
    1434:	01000000 	mrseq	r0, (UNDEF: 0)
    1438:	00005000 	andeq	r5, r0, r0
	...
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1448:	00010000 	andeq	r0, r1, r0
    144c:	00000051 	andeq	r0, r0, r1, asr r0
    1450:	00000000 	andeq	r0, r0, r0
		if ((j = __PCB) == NULL)
    1454:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1460:	000019c4 	andeq	r1, r0, r4, asr #19
}
    1464:	000019dc 	ldrdeq	r1, [r0], -ip
			for (; j->Next != NULL; j = j->Next);
    1468:	e2500001 	subs	r0, r0, #1
    146c:	ec000019 	stc	0, cr0, [r0], {25}
	return (aword) i;
    1470:	01000019 	tsteq	r0, r9, lsl r0
    1474:	19ee5000 	stmibne	lr!, {ip, lr}^
	if (mevent [MA_NP] . nwait != 255)
    1478:	19fc0000 	ldmibne	ip!, {}^	; <UNPREDICTABLE>
    147c:	00010000 	andeq	r0, r1, r0
    1480:	001a0250 	andseq	r0, sl, r0, asr r2
		mevent [MA_NP] . nwait ++;
    1484:	001a0400 	andseq	r0, sl, r0, lsl #8
	wait ((aword)(&(mevent [MA_NP])), state);
    1488:	50000100 	andpl	r0, r0, r0, lsl #2
    148c:	00001a0e 	andeq	r1, r0, lr, lsl #20
void diag (const char *mess, ...) {
    1490:	00001a10 	andeq	r1, r0, r0, lsl sl
    1494:	00500001 	subseq	r0, r0, r1
    1498:	00000000 	andeq	r0, r0, r0
	diag_disable_int (a, is);
    149c:	c4000000 	strgt	r0, [r0], #-0
    14a0:	fe000019 	mcr2	0, 0, r0, cr0, cr9, {0}
    14a4:	01000019 	tsteq	r0, r9, lsl r0
				d = (bc == 16) ? 10000 : 1000000000;
    14a8:	1a025100 	bne	958b0 <__ccfg+0x75908>
	diag_disable_int (a, is);
    14ac:	1a0d0000 	bne	3414b4 <__ccfg+0x32150c>
	while (*mess != '\0') {
    14b0:	00010000 	andeq	r0, r1, r0
	dgout ('\r');
    14b4:	001a0e51 	andseq	r0, sl, r1, asr lr
	dgout ('\n');
    14b8:	001a2400 	andseq	r2, sl, r0, lsl #8
    14bc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	diag_enable_int (a, is);
    14c8:	000019c4 	andeq	r1, r0, r4, asr #19
    14cc:	00001a01 	andeq	r1, r0, r1, lsl #20
}
    14d0:	02520001 	subseq	r0, r2, #1
    14d4:	0d00001a 	stceq	0, cr0, [r0, #-104]	; 0xffffff98
    14d8:	0100001a 	tsteq	r0, sl, lsl r0
		if (*mess == '%') {
    14dc:	1a0e5200 	bne	395ce4 <__ccfg+0x375d3c>
    14e0:	1a240000 	bne	9014e8 <__ccfg+0x8e1540>
			if (*mess == 'l') {
    14e4:	00010000 	andeq	r0, r1, r0
    14e8:	00000052 	andeq	r0, r0, r2, asr r0
				mess++;
    14ec:	00000000 	andeq	r0, r0, r0
				val = va_arg (ap, lword);
    14f0:	0019dc00 	andseq	sp, r9, r0, lsl #24
				bc = 32;
    14f4:	0019e000 	andseq	lr, r9, r0
				bc = 16;
    14f8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				dgout ('%');
    150c:	00500001 	subseq	r0, r0, r1
				dgout (*mess);
    1510:	00000000 	andeq	r0, r0, r0
    1514:	01000000 	mrseq	r0, (UNDEF: 0)
			switch (*mess) {
    1518:	00005000 	andeq	r5, r0, r0
	...
					(val >> (bc - i)) & 0xf];
    1528:	00010000 	andeq	r0, r1, r0
					dgout (v);
    152c:	00000050 	andeq	r0, r0, r0, asr r0
    1530:	00000000 	andeq	r0, r0, r0
				while (i < bc) {
    1534:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
					dgout ('-');
    1548:	00510001 	subseq	r0, r1, r1
	...
						val |= 0xffff0000;
    1558:	01000000 	mrseq	r0, (UNDEF: 0)
				d = (bc == 16) ? 10000 : 1000000000;
    155c:	00005200 	andeq	r5, r0, r0, lsl #4
    1560:	00000000 	andeq	r0, r0, r0
    1564:	00010000 	andeq	r0, r1, r0
					v = (word) (val / d);
    1568:	00000055 	andeq	r0, r0, r5, asr r0
	...
				d = (bc == 16) ? 10000 : 1000000000;
    1578:	50000100 	andpl	r0, r0, r0, lsl #2
	...
					dgout (v + '0');
    1584:	00540001 	subseq	r0, r4, r1
	...
					v = (word) (val / d);
    1594:	01000000 	mrseq	r0, (UNDEF: 0)
    1598:	00005100 	andeq	r5, r0, r0, lsl #2
				if (bc == 16)
    159c:	00000000 	andeq	r0, r0, r0
				d = (bc == 16) ? 10000 : 1000000000;
    15a0:	00010000 	andeq	r0, r1, r0
					val &= 0xffff;
    15a4:	00000050 	andeq	r0, r0, r0, asr r0
	...
				while (*s != '\0') {
    15b4:	52000100 	andpl	r0, r0, #0, 2
	...
			dgout (*mess++);
    15c0:	00550001 	subseq	r0, r5, r1
    15c4:	00000000 	andeq	r0, r0, r0
    15c8:	dc000000 	stcle	0, cr0, [r0], {-0}
	__pi_seed = __pi_seed * 1103515245 + 12345;
    15cc:	f2000018 	vqadd.s8	d0, d0, d8
    15d0:	01000018 	tsteq	r0, r8, lsl r0
    15d4:	18f85000 	ldmne	r8!, {ip, lr}^
    15d8:	19180000 	ldmdbne	r8, {}	; <UNPREDICTABLE>
	^ entropy
    15dc:	00010000 	andeq	r0, r1, r0
}
    15e0:	00000050 	andeq	r0, r0, r0, asr r0
    15e4:	00000000 	andeq	r0, r0, r0
    15e8:	0018dc00 	andseq	sp, r8, r0, lsl #24
    15ec:	0018f200 	andseq	pc, r8, r0, lsl #4
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    15f0:	51000100 	mrspl	r0, (UNDEF: 16)
	word cs = size + hblenb;
    15f4:	000018f8 	strdeq	r1, [r0], -r8
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    15f8:	00001910 	andeq	r1, r0, r0, lsl r9
    15fc:	12510001 	subsne	r0, r1, #1
	p -> length = size;
    1600:	1e000019 	mcrne	0, 0, r0, cr0, cr9, {0}
}
    1604:	01000019 	tsteq	r0, r9, lsl r0
	if (p->attributes.b.queued) {
    1608:	00005100 	andeq	r5, r0, r0, lsl #2
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    160c:	00000000 	andeq	r0, r0, r0
    1610:	18dc0000 	ldmne	ip, {}^	; <UNPREDICTABLE>
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1614:	18f20000 	ldmne	r2!, {}^	; <UNPREDICTABLE>
		p->attributes.b.queued = 0;
    1618:	00010000 	andeq	r0, r1, r0
    161c:	0018f252 	andseq	pc, r8, r2, asr r2	; <UNPREDICTABLE>
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1620:	0018f800 	andseq	pc, r8, r0, lsl #16
	deq (p);	// Remove from queue
    1624:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
}
    1628:	000018f8 	strdeq	r1, [r0], -r8
	tfree ((address)p);
    162c:	00001904 	andeq	r1, r0, r4, lsl #18
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1630:	04520001 	ldrbeq	r0, [r2], #-1
    1634:	2a000019 	bcs	16a0 <dispose+0x24>
    1638:	01000019 	tsteq	r0, r9, lsl r0
	sysassert (p->attributes.b.queued == 0, "tcv01");
    163c:	19305400 	ldmdbne	r0!, {sl, ip, lr}
    1640:	19360000 	ldmdbne	r6!, {}	; <UNPREDICTABLE>
	if (q_empty (q))
    1644:	00010000 	andeq	r0, r1, r0
    1648:	00193a54 	andseq	r3, r9, r4, asr sl
		trigger (q);
    164c:	00194e00 	andseq	r4, r9, r0, lsl #28
	if (p->attributes.b.urgent) {
    1650:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		q->next->prev = (qitem_t*) p;
    165c:	000018dc 	ldrdeq	r1, [r0], -ip
	p->attributes.b.queued = 1;
    1660:	000018ea 	andeq	r1, r0, sl, ror #17
    1664:	00530001 	subseq	r0, r3, r1
}
    1668:	00000000 	andeq	r0, r0, r0
		p->u.bqueue.prev = q->prev;
    166c:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
		q->prev->next = (qitem_t*) p;
    1670:	64000019 	strvs	r0, [r0], #-25	; 0xffffffe7
		q->prev = (qitem_t*) p;
    1674:	01000019 	tsteq	r0, r9, lsl r0
    1678:	196a5000 	stmdbne	sl!, {ip, lr}^
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    167c:	19820000 	stmibne	r2, {}	; <UNPREDICTABLE>
	deq (p);	// Soft dequeue, timer and hook left intact
    1680:	00010000 	andeq	r0, r1, r0
	switch (dv) {
    1684:	00000050 	andeq	r0, r0, r0, asr r0
    1688:	00000000 	andeq	r0, r0, r0
    168c:	00192000 	andseq	r2, r9, r0
    1690:	00192a00 	andseq	r2, r9, r0, lsl #20
			p->attributes.b.urgent = 1;
    1694:	50000100 	andpl	r0, r0, r0, lsl #2
    1698:	00001930 	andeq	r1, r0, r0, lsr r9
			verify_ses (p, "dispose ses");
    169c:	00001935 	andeq	r1, r0, r5, lsr r9
    16a0:	3a500001 	bcc	14016ac <__ccfg+0x13e1704>
    16a4:	48000019 	stmdami	r0, {r0, r3, r4}
    16a8:	01000019 	tsteq	r0, r9, lsl r0
    16ac:	00005000 	andeq	r5, r0, r0
	...
			enq (oqueues [p->attributes.b.phys], p);
    16bc:	00010000 	andeq	r0, r1, r0
			p->attributes.b.urgent = 1;
    16c0:	00000050 	andeq	r0, r0, r0, asr r0
    16c4:	00000000 	andeq	r0, r0, r0
			verify_phy (p, "dispose phy");
    16c8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    16d4:	00500001 	subseq	r0, r0, r1
    16d8:	00000000 	andeq	r0, r0, r0
    16dc:	01000000 	mrseq	r0, (UNDEF: 0)
			enq (oqueues [p->attributes.b.phys], p);
    16e0:	00005000 	andeq	r5, r0, r0
	...
}
    16f0:	00010000 	andeq	r0, r1, r0
    16f4:	00000051 	andeq	r0, r0, r1, asr r0
    16f8:	00000000 	andeq	r0, r0, r0
    16fc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1708:	00510001 	subseq	r0, r1, r1
	if (b->attributes.b.outgoing) {
    170c:	00000000 	andeq	r0, r0, r0
	b = header (p);
    1710:	01000000 	mrseq	r0, (UNDEF: 0)
	if (b->attributes.b.outgoing) {
    1714:	00005100 	andeq	r5, r0, r0, lsl #2
	...
		verify_ses (b, "tcv02");
    1724:	00010000 	andeq	r0, r1, r0
    1728:	00000054 	andeq	r0, r0, r4, asr r0
		verify_plg (b, tcv_out, "tcv03");
    172c:	00000000 	andeq	r0, r0, r0
    1730:	70000a00 	andvc	r0, r0, r0, lsl #20
    1734:	03243200 			; <UNDEFINED> instruction: 0x03243200
    1738:	20000138 	andcs	r0, r0, r8, lsr r1
    173c:	00000022 	andeq	r0, r0, r2, lsr #32
    1740:	00000000 	andeq	r0, r0, r0
    1744:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		dispose (b, plugins [b->attributes.b.plugin] ->
    1750:	0070000a 	rsbseq	r0, r0, sl
}
    1754:	38032432 	stmdacc	r3, {r1, r4, r5, sl, sp}
		dispose (b, plugins [b->attributes.b.plugin] ->
    1758:	22200001 	eorcs	r0, r0, #1
	...
		rlp (b);
    1764:	00540001 	subseq	r0, r4, r1
    1768:	00000000 	andeq	r0, r0, r0
    176c:	0a000000 	beq	1774 <tcv_endp+0x6c>
    1770:	32007000 	andcc	r7, r0, #0
    1774:	01380324 	teqeq	r8, r4, lsr #6
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1778:	00222000 	eoreq	r2, r2, r0
	...
	va_start (ap, plid);
    1788:	01000000 	mrseq	r0, (UNDEF: 0)
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    178c:	00005500 	andeq	r5, r0, r0, lsl #10
    1790:	00000000 	andeq	r0, r0, r0
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1794:	00010000 	andeq	r0, r1, r0
    1798:	00000055 	andeq	r0, r0, r5, asr r0
	...
		syserror (EMALLOC, "tcv05");
    17a8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	attp.b.outgoing = 1;
    17b4:	00540001 	subseq	r0, r4, r1
	...
		if (descriptors [fd] == NULL)
    17c4:	01000000 	mrseq	r0, (UNDEF: 0)
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    17c8:	00005000 	andeq	r5, r0, r0
		return ERROR;
    17cc:	00000000 	andeq	r0, r0, r0
}
    17d0:	00010000 	andeq	r0, r1, r0
    17d4:	00000050 	andeq	r0, r0, r0, asr r0
    17d8:	00000000 	andeq	r0, r0, r0
	s->attpattern.b.session = fd;
    17dc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    17f0:	00550001 	subseq	r0, r5, r1
	...
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1800:	01000000 	mrseq	r0, (UNDEF: 0)
    1804:	00005000 	andeq	r5, r0, r0
	...
	if (s == NULL)
    1814:	00010000 	andeq	r0, r1, r0
		syserror (EMALLOC, "tcv05");
    1818:	00000050 	andeq	r0, r0, r0, asr r0
    181c:	00000000 	andeq	r0, r0, r0
    1820:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    182c:	00500001 	subseq	r0, r0, r1
    1830:	00000000 	andeq	r0, r0, r0
    1834:	01000000 	mrseq	r0, (UNDEF: 0)
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1838:	00005000 	andeq	r5, r0, r0
	...
	plugins [ord] = pl;
    1848:	00010000 	andeq	r0, r1, r0
	return 0;
    184c:	00000051 	andeq	r0, r0, r1, asr r0
		return ERROR;
    1850:	00000000 	andeq	r0, r0, r0
}
    1854:	51000100 	mrspl	r0, (UNDEF: 16)
	...
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    1860:	00510001 	subseq	r0, r1, r1
	...
	verify_plg (b, tcv_frm, "tcv11");
    1870:	01000000 	mrseq	r0, (UNDEF: 0)
	b = q_first (rq);
    1874:	00005300 	andeq	r5, r0, r0, lsl #6
	if (q_end (b, rq)) {
    1878:	00000000 	andeq	r0, r0, r0
		if (state != WNONE) {
    187c:	000a0000 	andeq	r0, sl, r0
    1880:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
			when (rq, state);
    1884:	00013803 	andeq	r3, r1, r3, lsl #16
			release;
    1888:	00002220 	andeq	r2, r0, r0, lsr #4
	deq (b);	// Dequeue the packet ...
    188c:	00000000 	andeq	r0, r0, r0
    1890:	00010000 	andeq	r0, r1, r0
	p = ((address)(b + 1));
    1894:	00000053 	andeq	r0, r0, r3, asr r0
	verify_plg (b, tcv_frm, "tcv11");
    1898:	00000000 	andeq	r0, r0, r0
    189c:	70000a00 	andvc	r0, r0, r0, lsl #20
    18a0:	03243200 			; <UNDEFINED> instruction: 0x03243200
    18a4:	20000138 	andcs	r0, r0, r8, lsr r1
    18a8:	00000022 	andeq	r0, r0, r2, lsr #32
    18ac:	00000000 	andeq	r0, r0, r0
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    18b0:	53000100 	movwpl	r0, #256	; 0x100
	...
		b->length - b->u.pointers.head - b->u.pointers.tail;
    18bc:	0070000a 	rsbseq	r0, r0, sl
	b->u.pointers.tail =
    18c0:	38032432 	stmdacc	r3, {r1, r4, r5, sl, sp}
}
    18c4:	22200001 	eorcs	r0, r0, #1
	...
		return NULL;
    18d8:	00500001 	subseq	r0, r0, r1
	verify_fds (fd, "tcv16");
    18dc:	00000000 	andeq	r0, r0, r0
								Boolean urg) {
    18e0:	01000000 	mrseq	r0, (UNDEF: 0)
    18e4:	00005000 	andeq	r5, r0, r0
	...
	verify_pld (s, tcv_frm, "tcv17");
    18f4:	00010000 	andeq	r0, r1, r0
    18f8:	00000053 	andeq	r0, r0, r3, asr r0
    18fc:	00000000 	andeq	r0, r0, r0
    1900:	53000100 	movwpl	r0, #256	; 0x100
	...
    190c:	00530001 	subseq	r0, r3, r1
	...
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    191c:	01000000 	mrseq	r0, (UNDEF: 0)
    1920:	00005200 	andeq	r5, r0, r0, lsl #4
		if (state != WNONE) {
    1924:	00000000 	andeq	r0, r0, r0
    1928:	00010000 	andeq	r0, r1, r0
}
    192c:	00000052 	andeq	r0, r0, r2, asr r0
			when (eid, state);
    1930:	00000000 	andeq	r0, r0, r0
    1934:	52000100 	andpl	r0, r0, #0, 2
	...
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    1940:	00520001 	subseq	r0, r2, r1
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    1944:	00000000 	andeq	r0, r0, r0
    1948:	5c000000 	stcpl	0, cr0, [r0], {-0}
    194c:	6a000018 	bvs	19b4 <tcvp_control+0x1c>
    1950:	01000018 	tsteq	r0, r8, lsl r0
    1954:	00005000 	andeq	r5, r0, r0
    1958:	00000000 	andeq	r0, r0, r0
		if (state != WNONE) {
    195c:	185c0000 	ldmdane	ip, {}^	; <UNPREDICTABLE>
    1960:	186e0000 	stmdane	lr!, {}^	; <UNPREDICTABLE>
			tmwait (state);
    1964:	00010000 	andeq	r0, r1, r0
    1968:	00187451 	andseq	r7, r8, r1, asr r4
	b->attributes = s->attpattern;
    196c:	00188400 	andseq	r8, r8, r0, lsl #8
		b->attributes.b.urgent = 1;
    1970:	51000100 	mrspl	r0, (UNDEF: 16)
    1974:	0000188c 	andeq	r1, r0, ip, lsl #17
	b->u.pointers.head = ptrs.head;
    1978:	000018ae 	andeq	r1, r0, lr, lsr #17
	b->u.pointers.tail = length;
    197c:	b0510001 	subslt	r0, r1, r1
	return (address) (b + 1);
    1980:	b2000018 	andlt	r0, r0, #24
    1984:	01000018 	tsteq	r0, r8, lsl r0
    1988:	18c65100 	stmiane	r6, {r8, ip, lr}^
    198c:	18dc0000 	ldmne	ip, {}^	; <UNPREDICTABLE>
    1990:	00010000 	andeq	r0, r1, r0
    1994:	00000051 	andeq	r0, r0, r1, asr r0
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1998:	00000000 	andeq	r0, r0, r0
    199c:	00189800 	andseq	r9, r8, r0, lsl #16
    19a0:	0018c200 	andseq	ip, r8, r0, lsl #4
	verify_fph (phy, "tcv23");
    19a4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    19b0:	00001876 	andeq	r1, r0, r6, ror r8
}
    19b4:	000018a0 	andeq	r1, r0, r0, lsr #17
	return (physical [phy]) (opt, arg);
    19b8:	a0540001 	subsge	r0, r4, r1
    19bc:	b4000018 	strlt	r0, [r0], #-24	; 0xffffffe8
    19c0:	01000018 	tsteq	r0, r8, lsl r0
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    19c4:	18b45000 	ldmne	r4!, {ip, lr}
	if (opt < 0) {
    19c8:	18dc0000 	ldmne	ip, {}^	; <UNPREDICTABLE>
		if (fd < 0)
    19cc:	00010000 	andeq	r0, r1, r0
		if (opt == PHYSOPT_PLUGINFO) {
    19d0:	00000054 	andeq	r0, r0, r4, asr r0
			if (fd >= TCV_MAX_PLUGS)
    19d4:	00000000 	andeq	r0, r0, r0
			if ((p = plugins [fd]) == NULL)
    19d8:	00187400 	andseq	r7, r8, r0, lsl #8
    19dc:	00188700 	andseq	r8, r8, r0, lsl #14
}
    19e0:	50000100 	andpl	r0, r0, r0, lsl #2
		if (fd >= TCV_MAX_PHYS)
    19e4:	0000188c 	andeq	r1, r0, ip, lsl #17
		return physinfo [fd];
    19e8:	0000188e 	andeq	r1, r0, lr, lsl #17
    19ec:	8e500001 	cdphi	0, 5, cr0, cr0, cr1, {0}
	verify_fds (fd, "tcv22");
    19f0:	91000018 	tstls	r0, r8, lsl r0
    19f4:	07000018 	smladeq	r0, r8, r0, r0
    19f8:	32007100 	andcc	r7, r0, #0, 2
    19fc:	22007224 	andcs	r7, r0, #36, 4	; 0x40000002
    1a00:	000018c6 	andeq	r1, r0, r6, asr #17
}
    1a04:	000018dc 	ldrdeq	r1, [r0], -ip
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    1a08:	00500001 	subseq	r0, r0, r1
    1a0c:	00000000 	andeq	r0, r0, r0
			return 0;
    1a10:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    1a14:	4e000018 	mcrmi	0, 0, r0, cr0, cr8, {0}
    1a18:	01000018 	tsteq	r0, r8, lsl r0
    1a1c:	18505000 	ldmdane	r0, {ip, lr}^
    1a20:	18540000 	ldmdane	r4, {}^	; <UNPREDICTABLE>
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    1a24:	00010000 	andeq	r0, r1, r0
    1a28:	00000050 	andeq	r0, r0, r0, asr r0
	...
		verify_fds (ses, "tcv27");
    1a38:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1a44:	00500001 	subseq	r0, r0, r1
	...
		return NULL;
    1a54:	01000000 	mrseq	r0, (UNDEF: 0)
			p->attributes = descriptors [ses] -> attpattern;
    1a58:	00005100 	andeq	r5, r0, r0, lsl #2
			dispose (p, dsp);
    1a5c:	00000000 	andeq	r0, r0, r0
			p->attributes = descriptors [ses] -> attpattern;
    1a60:	00010000 	andeq	r0, r1, r0
			p->attributes.b.outgoing = 0;
    1a64:	00000055 	andeq	r0, r0, r5, asr r0
			dispose (p, dsp);
    1a68:	00000000 	andeq	r0, r0, r0
			return (address)(p + 1);
    1a6c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	if ((p = apb (size)) != NULL)
    1a78:	00550001 	subseq	r0, r5, r1
		return (address)(p + 1);
    1a7c:	00000000 	andeq	r0, r0, r0
    1a80:	01000000 	mrseq	r0, (UNDEF: 0)
    1a84:	00005100 	andeq	r5, r0, r0, lsl #2
    1a88:	00000000 	andeq	r0, r0, r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a8c:	00010000 	andeq	r0, r1, r0
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1a90:	00000055 	andeq	r0, r0, r5, asr r0
	...
		syserror (EMALLOC, "tcv29");
    1aa0:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1ab4:	00500001 	subseq	r0, r0, r1
    1ab8:	00000000 	andeq	r0, r0, r0
		syserror (EMALLOC, "tcv29");
    1abc:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    1ac0:	a6000017 			; <UNDEFINED> instruction: 0xa6000017
	q_init (q);
    1ac4:	01000017 	tsteq	r0, r7, lsl r0
}
    1ac8:	17ac5000 	strne	r5, [ip, r0]!
    1acc:	17cc0000 	strbne	r0, [ip, r0]
    1ad0:	00010000 	andeq	r0, r1, r0
    1ad4:	00180c50 	andseq	r0, r8, r0, asr ip
    1ad8:	00180e00 	andseq	r0, r8, r0, lsl #28
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1adc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1ae8:	00001778 	andeq	r1, r0, r8, ror r7
	verify_fph (phy, "tcv30");
    1aec:	000017a8 	andeq	r1, r0, r8, lsr #15
    1af0:	a8510001 	ldmdage	r1, {r0}^
    1af4:	ac000017 	stcge	0, cr0, [r0], {23}
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1af8:	01000017 	tsteq	r0, r7, lsl r0
    1afc:	17ac5700 	strne	r5, [ip, r0, lsl #14]!
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1b00:	17cc0000 	strbne	r0, [ip, r0]
    1b04:	00010000 	andeq	r0, r1, r0
		if (plugins [plg] == NULL)
    1b08:	0017cc51 	andseq	ip, r7, r1, asr ip
    1b0c:	0017d800 	andseq	sp, r7, r0, lsl #16
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1b10:	57000100 	strpl	r0, [r0, -r0, lsl #2]
}
    1b14:	000017dc 	ldrdeq	r1, [r0], -ip
    1b18:	0000180c 	andeq	r1, r0, ip, lsl #16
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1b1c:	0c570001 	mrrceq	0, 0, r0, r7, cr1
    1b20:	11000018 	tstne	r0, r8, lsl r0
    1b24:	01000018 	tsteq	r0, r8, lsl r0
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1b28:	18115100 	ldmdane	r1, {r8, ip, lr}
    1b2c:	18380000 	ldmdane	r8!, {}	; <UNPREDICTABLE>
    1b30:	00010000 	andeq	r0, r1, r0
    1b34:	00000057 	andeq	r0, r0, r7, asr r0
    1b38:	00000000 	andeq	r0, r0, r0
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1b3c:	00177800 	andseq	r7, r7, r0, lsl #16
	len -= (ap.head + ap.tail);
    1b40:	0017a800 	andseq	sl, r7, r0, lsl #16
    1b44:	91000200 	mrsls	r0, R8_usr
    1b48:	0017ac78 	andseq	sl, r7, r8, ror ip
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1b4c:	0017cc00 	andseq	ip, r7, r0, lsl #24
    1b50:	91000200 	mrsls	r0, R8_usr
    1b54:	0017dc78 	andseq	sp, r7, r8, ror ip
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1b58:	0017e800 	andseq	lr, r7, r0, lsl #16
    1b5c:	91000200 	mrsls	r0, R8_usr
    1b60:	00180c78 	andseq	r0, r8, r8, ror ip
	return 1;
    1b64:	00183800 	andseq	r3, r8, r0, lsl #16
    1b68:	91000200 	mrsls	r0, R8_usr
    1b6c:	00000078 	andeq	r0, r0, r8, ror r0
    1b70:	00000000 	andeq	r0, r0, r0
    1b74:	0017c000 	andseq	ip, r7, r0
	verify_fph (phy, "tcv32");
    1b78:	0017d000 	andseq	sp, r7, r0
    1b7c:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1b80:	000017dc 	ldrdeq	r1, [r0], -ip
    1b84:	00001838 	andeq	r1, r0, r8, lsr r8
    1b88:	00560001 	subseq	r0, r6, r1
    1b8c:	00000000 	andeq	r0, r0, r0
	oq = oqueues [phy];
    1b90:	dc000000 	stcle	0, cr0, [r0], {-0}
	b = q_first (oq);
    1b94:	f6000017 			; <UNDEFINED> instruction: 0xf6000017
	if (q_end (b, oq)) {
    1b98:	01000017 	tsteq	r0, r7, lsl r0
	*len = b->length;
    1b9c:	17f65000 	ldrbne	r5, [r6, r0]!
	deq (b);	// Dequeue the packet ...
    1ba0:	17fa0000 	ldrbne	r0, [sl, r0]!
}
    1ba4:	00010000 	andeq	r0, r1, r0
		return NULL;
    1ba8:	0017fa54 	andseq	pc, r7, r4, asr sl	; <UNPREDICTABLE>
    1bac:	0017fe00 	andseq	pc, r7, r0, lsl #28
    1bb0:	50000100 	andpl	r0, r0, r0, lsl #2
    1bb4:	000017fe 	strdeq	r1, [r0], -lr
	verify_fph (phy, "tcv33");
    1bb8:	0000180c 	andeq	r1, r0, ip, lsl #16
    1bbc:	12540001 	subsne	r0, r4, #1
    1bc0:	1a000018 	bne	1c28 <tcv_init>
    1bc4:	01000018 	tsteq	r0, r8, lsl r0
    1bc8:	181a5000 	ldmdane	sl, {ip, lr}
    1bcc:	18380000 	ldmdane	r8!, {}	; <UNPREDICTABLE>
	oq = oqueues [phy];
    1bd0:	00010000 	andeq	r0, r1, r0
	b = q_first (oq);
    1bd4:	00000054 	andeq	r0, r0, r4, asr r0
		return NULL;
    1bd8:	00000000 	andeq	r0, r0, r0
	return (address)(b + 1);
    1bdc:	00170800 	andseq	r0, r7, r0, lsl #16
}
    1be0:	00172e00 	andseq	r2, r7, r0, lsl #28
    1be4:	50000100 	andpl	r0, r0, r0, lsl #2
    1be8:	00001732 	andeq	r1, r0, r2, lsr r7
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1bec:	0000174f 	andeq	r1, r0, pc, asr #14
	verify_plg (b, tcv_xmt, "tcv34");
    1bf0:	5c500001 	mrrcpl	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
	hblock_t *b = header (pkt);
    1bf4:	5e000017 	mcrpl	0, 0, r0, cr0, cr7, {0}
	verify_plg (b, tcv_xmt, "tcv34");
    1bf8:	01000017 	tsteq	r0, r7, lsl r0
    1bfc:	00005000 	andeq	r5, r0, r0
    1c00:	00000000 	andeq	r0, r0, r0
    1c04:	17120000 	ldrne	r0, [r2, -r0]
    1c08:	17580000 	ldrbne	r0, [r8, -r0]
    1c0c:	00010000 	andeq	r0, r1, r0
    1c10:	00175854 	andseq	r5, r7, r4, asr r8
	dispose (b, plugins [b->attributes.b.plugin] ->
    1c14:	00175b00 	andseq	r5, r7, r0, lsl #22
}
    1c18:	50000100 	andpl	r0, r0, r0, lsl #2
	dispose (b, plugins [b->attributes.b.plugin] ->
    1c1c:	0000175c 	andeq	r1, r0, ip, asr r7
    1c20:	00001762 	andeq	r1, r0, r2, ror #14
    1c24:	62540001 	subsvs	r0, r4, #1
}
    1c28:	65000017 	strvs	r0, [r0, #-23]	; 0xffffffe9
    while(1)
    1c2c:	01000017 	tsteq	r0, r7, lsl r0
{
    1c30:	00005000 	andeq	r5, r0, r0
    SetupTrimDevice();
    1c34:	00000000 	andeq	r0, r0, r0
    pui32Src = &_etext;
    1c38:	15f00000 	ldrbne	r0, [r0, #0]!
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1c3c:	15f60000 	ldrbne	r0, [r6, #0]!
    __asm("    ldr     r0, =_bss\n"
    1c40:	00010000 	andeq	r0, r1, r0
    1c44:	00000050 	andeq	r0, r0, r0, asr r0
    1c48:	00000000 	andeq	r0, r0, r0
    1c4c:	00162000 	andseq	r2, r6, r0
    1c50:	00162d00 	andseq	r2, r6, r0, lsl #26
   main();
    1c54:	50000100 	andpl	r0, r0, r0, lsl #2
	...
        *pui32Dest++ = *pui32Src++;
    1c60:	0000160c 	andeq	r1, r0, ip, lsl #12
    1c64:	0000161e 	andeq	r1, r0, lr, lsl r6
    1c68:	00500001 	subseq	r0, r0, r1
    1c6c:	00000000 	andeq	r0, r0, r0
    1c70:	30000000 	andcc	r0, r0, r0
    1c74:	3e000016 	mcrcc	0, 0, r0, cr0, cr6, {0}
    1c78:	01000016 	tsteq	r0, r6, lsl r0
static byte get_byte () {
    1c7c:	163e5000 	ldrtne	r5, [lr], -r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c80:	16440000 	strbne	r0, [r4], -r0
    1c84:	00010000 	andeq	r0, r1, r0
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c88:	00164455 	andseq	r4, r6, r5, asr r4
    1c8c:	00164d00 	andseq	r4, r6, r0, lsl #26
		if (ee_inp)
    1c90:	50000100 	andpl	r0, r0, r0, lsl #2
			b |= 1;
    1c94:	0000164d 	andeq	r1, r0, sp, asr #12
    1c98:	0000167c 	andeq	r1, r0, ip, ror r6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c9c:	00550001 	subseq	r0, r5, r1
	for (b = 0, i = 0; i < 8; i++) {
    1ca0:	00000000 	andeq	r0, r0, r0
}
    1ca4:	30000000 	andcc	r0, r0, r0
    1ca8:	40000016 	andmi	r0, r0, r6, lsl r0
    1cac:	01000016 	tsteq	r0, r6, lsl r0
static void put_byte (byte b) {
    1cb0:	16405100 	strbne	r5, [r0], -r0, lsl #2
    1cb4:	16440000 	strbne	r0, [r4], -r0
    1cb8:	00010000 	andeq	r0, r1, r0
    1cbc:	00164454 	andseq	r4, r6, r4, asr r4
		if (b & 0x80)
    1cc0:	00164d00 	andseq	r4, r6, r0, lsl #26
    1cc4:	51000100 	mrspl	r0, (UNDEF: 16)
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cc8:	0000164d 	andeq	r1, r0, sp, asr #12
	for (i = 0; i < 8; i++) {
    1ccc:	0000167c 	andeq	r1, r0, ip, ror r6
		b <<= 1;
    1cd0:	00540001 	subseq	r0, r4, r1
	for (i = 0; i < 8; i++) {
    1cd4:	00000000 	andeq	r0, r0, r0
}
    1cd8:	3c000000 	stccc	0, cr0, [r0], {-0}
    1cdc:	3e000016 	mcrcc	0, 0, r0, cr0, cr6, {0}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1ce0:	01000016 	tsteq	r0, r6, lsl r0
    1ce4:	163e5000 	ldrtne	r5, [lr], -r0
	put_byte (cmd);
    1ce8:	16440000 	strbne	r0, [r4], -r0
    1cec:	00010000 	andeq	r0, r1, r0
}
    1cf0:	00000055 	andeq	r0, r0, r5, asr r0
    1cf4:	00000000 	andeq	r0, r0, r0
static void wwait (word st, word del) {
    1cf8:	00163c00 	andseq	r3, r6, r0, lsl #24
    1cfc:	00164000 	andseq	r4, r6, r0
    1d00:	51000100 	mrspl	r0, (UNDEF: 16)
	while (dopen && (rdsr () & 1)) {
    1d04:	00001640 	andeq	r1, r0, r0, asr #12
    1d08:	00001644 	andeq	r1, r0, r4, asr #12
    1d0c:	00540001 	subseq	r0, r4, r1
    1d10:	00000000 	andeq	r0, r0, r0
	put_byte (CMD_RDSR);
    1d14:	7c000000 	stcvc	0, cr0, [r0], {-0}
	r = get_byte ();
    1d18:	ac000016 	stcge	0, cr0, [r0], {22}
    1d1c:	01000016 	tsteq	r0, r6, lsl r0
	while (dopen && (rdsr () & 1)) {
    1d20:	16ac5000 	strtne	r5, [ip], r0
}
    1d24:	16b80000 	ldrtne	r0, [r8], r0
		if (st == WNONE)
    1d28:	00010000 	andeq	r0, r1, r0
    1d2c:	0016b854 	andseq	fp, r6, r4, asr r8
			mdelay (1);
    1d30:	0016bf00 	andseq	fp, r6, r0, lsl #30
    1d34:	51000100 	mrspl	r0, (UNDEF: 16)
			delay (del, st);
    1d38:	000016c0 	andeq	r1, r0, r0, asr #13
    1d3c:	000016e6 	andeq	r1, r0, r6, ror #13
			release;
    1d40:	e6500001 	ldrb	r0, [r0], -r1
    1d44:	e8000016 	stmda	r0, {r1, r2, r4}
    1d48:	01000016 	tsteq	r0, r6, lsl r0
static void ready () {
    1d4c:	16e85400 	strbtne	r5, [r8], r0, lsl #8
	if (dopen) {
    1d50:	16ef0000 	strbtne	r0, [pc], r0
		wwait (WNONE, 1);
    1d54:	00010000 	andeq	r0, r1, r0
    1d58:	0016f050 	andseq	pc, r6, r0, asr r0	; <UNPREDICTABLE>
    1d5c:	00170800 	andseq	r0, r7, r0, lsl #16
	dstat = 0;
    1d60:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1d6c:	0000167c 	andeq	r1, r0, ip, ror r6
	udelay (1);
    1d70:	00001686 	andeq	r1, r0, r6, lsl #13
    1d74:	00510001 	subseq	r0, r1, r1
	udelay (1);
    1d78:	00000000 	andeq	r0, r0, r0
		dopen = DOPEN_TEMP;
    1d7c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    1d80:	e6000016 			; <UNDEFINED> instruction: 0xe6000016
    1d84:	01000016 	tsteq	r0, r6, lsl r0
    1d88:	16e65000 	strbtne	r5, [r6], r0
static void cclose () {
    1d8c:	16e80000 	strbtne	r0, [r8], r0
	if (dopen == DOPEN_TEMP) {
    1d90:	00010000 	andeq	r0, r1, r0
    1d94:	00000054 	andeq	r0, r0, r4, asr r0
		wwait (WNONE, 1);
    1d98:	00000000 	andeq	r0, r0, r0
    1d9c:	00199800 	andseq	r9, r9, r0, lsl #16
	cmd_0 (CMD_DP);
    1da0:	00199e00 	andseq	r9, r9, r0, lsl #28
    1da4:	50000100 	andpl	r0, r0, r0, lsl #2
		dopen = 0;
    1da8:	0000199e 	muleq	r0, lr, r9
}
    1dac:	000019aa 	andeq	r1, r0, sl, lsr #19
word ee_open () {
    1db0:	00530001 	subseq	r0, r3, r1
	ready ();
    1db4:	00000000 	andeq	r0, r0, r0
	dopen = DOPEN_PERM;
    1db8:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    1dbc:	a2000019 	andge	r0, r0, #25
}
    1dc0:	01000019 	tsteq	r0, r9, lsl r0
	if (dopen) {
    1dc4:	19a25100 	stmibne	r2!, {r8, ip, lr}
    1dc8:	19ae0000 	stmibne	lr!, {}	; <UNPREDICTABLE>
		dopen = DOPEN_TEMP;
    1dcc:	00010000 	andeq	r0, r1, r0
		cclose ();
    1dd0:	0019b450 	andseq	fp, r9, r0, asr r4
}
    1dd4:	0019b900 	andseq	fp, r9, r0, lsl #18
int ser_in (word st, char *buf, int len) {
    1dd8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (__inpline == NULL) {
    1de4:	00001998 	muleq	r0, r8, r9
		if ((prcs = running (__inserial)) == 0) {
    1de8:	000019a6 	andeq	r1, r0, r6, lsr #19
    1dec:	a6520001 	ldrbge	r0, [r2], -r1
			prcs = runthread (__inserial);
    1df0:	b0000019 	andlt	r0, r0, r9, lsl r0
    1df4:	01000019 	tsteq	r0, r9, lsl r0
			if (prcs == 0) {
    1df8:	19b45100 	ldmibne	r4!, {r8, ip, lr}
				npwait (st);
    1dfc:	19b90000 	ldmibne	r9!, {}	; <UNPREDICTABLE>
		release;
    1e00:	00010000 	andeq	r0, r1, r0
		join (prcs, st);
    1e04:	00000051 	andeq	r0, r0, r1, asr r0
    1e08:	00000000 	andeq	r0, r0, r0
	if (*__inpline == NULL) // bin cmd
    1e0c:	0019ac00 	andseq	sl, r9, r0, lsl #24
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1e10:	0019ae00 	andseq	sl, r9, r0, lsl #28
	if (prcs >= len)
    1e14:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	memcpy (buf, __inpline, prcs);
    1e20:	000019ac 	andeq	r1, r0, ip, lsr #19
    1e24:	000019b0 			; <UNDEFINED> instruction: 0x000019b0
	ufree (__inpline);
    1e28:	00510001 	subseq	r0, r1, r1
	__inpline = NULL;
    1e2c:	00000000 	andeq	r0, r0, r0
	if (*buf) // if it's NULL, it's a bin cmd
    1e30:	24000000 	strcs	r0, [r0], #-0
		buf [prcs] = '\0';
    1e34:	2800001a 	stmdacs	r0, {r1, r3, r4}
}
    1e38:	0100001a 	tsteq	r0, sl, lsl r0
		prcs = strlen (__inpline);
    1e3c:	00005000 	andeq	r5, r0, r0
    1e40:	00000000 	andeq	r0, r0, r0
		return 0;
    1e44:	1a240000 	bne	901e4c <__ccfg+0x8e1ea4>
    1e48:	1a360000 	bne	d81e50 <__ccfg+0xd61ea8>
    1e4c:	00010000 	andeq	r0, r1, r0
int ser_outf (word st, const char *m, ...) {
    1e50:	001a3651 	andseq	r3, sl, r1, asr r6
    1e54:	001a3a00 	andseq	r3, sl, r0, lsl #20
	if ((prcs = running (__outserial)) != 0) {
    1e58:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1e5c:	00001a3a 	andeq	r1, r0, sl, lsr sl
		join (prcs, st);
    1e60:	00001a4a 	andeq	r1, r0, sl, asr #20
    1e64:	4a510001 	bmi	1441e70 <__ccfg+0x1421ec8>
		release;
    1e68:	4c00001a 	stcmi	0, cr0, [r0], {26}
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1e6c:	0100001a 	tsteq	r0, sl, lsl r0
    1e70:	1a4c5600 	bne	1317678 <__ccfg+0x12f76d0>
    1e74:	1a4f0000 	bne	13c1e7c <__ccfg+0x13a1ed4>
		umwait (st);
    1e78:	00010000 	andeq	r0, r1, r0
    1e7c:	001a4f51 	andseq	r4, sl, r1, asr pc
	if (runstrand (__outserial, buf) == 0) {
    1e80:	001a7200 	andseq	r7, sl, r0, lsl #4
    1e84:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1e88:	00001a72 	andeq	r1, r0, r2, ror sl
		ufree (buf);
    1e8c:	00001a75 	andeq	r1, r0, r5, ror sl
		npwait (st);
    1e90:	75510001 	ldrbvc	r0, [r1, #-1]
}
    1e94:	8c00001a 	stchi	0, cr0, [r0], {26}
    1e98:	0100001a 	tsteq	r0, sl, lsl r0
    1e9c:	00005600 	andeq	r5, r0, r0, lsl #12
    1ea0:	00000000 	andeq	r0, r0, r0
int ser_inf (word st, const char *fmt, ...) {
    1ea4:	1a240000 	bne	901eac <__ccfg+0x8e1f04>
    1ea8:	1a390000 	bne	e41eb0 <__ccfg+0xe21f08>
	if (fmt == NULL)
    1eac:	00010000 	andeq	r0, r1, r0
	if (__inpline == NULL) {
    1eb0:	001a3952 	andseq	r3, sl, r2, asr r9
		if ((prcs = running (__inserial)) == 0) {
    1eb4:	001a3a00 	andseq	r3, sl, r0, lsl #20
    1eb8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
			prcs = runthread (__inserial);
    1ebc:	00001a3a 	andeq	r1, r0, sl, lsr sl
    1ec0:	00001a4f 	andeq	r1, r0, pc, asr #20
			if (prcs == 0) {
    1ec4:	4f520001 	svcmi	0x00520001
				npwait (st);
    1ec8:	7200001a 	andvc	r0, r0, #26
		release;
    1ecc:	0100001a 	tsteq	r0, sl, lsl r0
		join (prcs, st);
    1ed0:	1a725500 	bne	1c972d8 <__ccfg+0x1c77330>
    1ed4:	1a750000 	bne	1d41edc <__ccfg+0x1d21f34>
	va_start (ap, fmt);
    1ed8:	00010000 	andeq	r0, r1, r0
	prcs = vscan (__inpline, fmt, ap);
    1edc:	001a7552 	andseq	r7, sl, r2, asr r5
    1ee0:	001a8c00 	andseq	r8, sl, r0, lsl #24
	ufree (__inpline);
    1ee4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
}
    1ef0:	00001a50 	andeq	r1, r0, r0, asr sl
    1ef4:	00001a56 	andeq	r1, r0, r6, asr sl
		return 0;
    1ef8:	58500001 	ldmdapl	r0, {r0}^
    1efc:	6b00001a 	blvs	1f6c <option+0x48>
    1f00:	0100001a 	tsteq	r0, sl, lsl r0
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    1f04:	1a6b5000 	bne	1ad5f0c <__ccfg+0x1ab5f64>
    1f08:	1a720000 	bne	1c81f10 <__ccfg+0x1c61f68>
    1f0c:	00010000 	andeq	r0, r1, r0
	RF_cmdFs.frequency = 
    1f10:	001a7654 	andseq	r7, sl, r4, asr r6
}
    1f14:	001a7c00 	andseq	r7, sl, r0, lsl #24
    1f18:	50000100 	andpl	r0, r0, r0, lsl #2
	...
static int option (int opt, address val) {
    1f24:	00001a32 	andeq	r1, r0, r2, lsr sl
    1f28:	00001a36 	andeq	r1, r0, r6, lsr sl
    1f2c:	00510001 	subseq	r0, r1, r1
    1f30:	00000000 	andeq	r0, r0, r0
    1f34:	3c000000 	stccc	0, cr0, [r0], {-0}
    1f38:	5500001c 	strpl	r0, [r0, #-28]	; 0xffffffe4
    1f3c:	0100001c 	tsteq	r0, ip, lsl r0
    1f40:	1c605200 	sfmne	f5, 2, [r0], #-0
    1f44:	1c740000 	ldclne	0, cr0, [r4], #-0
    1f48:	00010000 	andeq	r0, r1, r0
    1f4c:	00000052 	andeq	r0, r0, r2, asr r0
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    1f50:	00000000 	andeq	r0, r0, r0
    1f54:	001c3c00 	andseq	r3, ip, r0, lsl #24
			goto RVal;
    1f58:	001c5500 	andseq	r5, ip, r0, lsl #10
			_BIS (dstate, DSTATE_RXON);
    1f5c:	53000100 	movwpl	r0, #256	; 0x100
    1f60:	00001c64 	andeq	r1, r0, r4, ror #24
	int ret = 0;
    1f64:	00001c74 	andeq	r1, r0, r4, ror ip
			p_trigger (drvprcs, qevent);
    1f68:	00530001 	subseq	r0, r3, r1
	...
    1f78:	01000000 	mrseq	r0, (UNDEF: 0)
    1f7c:	00005000 	andeq	r5, r0, r0
    1f80:	00000000 	andeq	r0, r0, r0
    1f84:	00010000 	andeq	r0, r1, r0
    1f88:	00000050 	andeq	r0, r0, r0, asr r0
	...
			_BIC (dstate, DSTATE_RXON);
    1f98:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	int ret = 0;
    1fa4:	00510001 	subseq	r0, r1, r1
	...
			ret = rbuffl + 2;
    1fb4:	01000000 	mrseq	r0, (UNDEF: 0)
    1fb8:	00005200 	andeq	r5, r0, r0, lsl #4
			if (val != NULL) {
    1fbc:	00000000 	andeq	r0, r0, r0
				memcpy (val, &rxstat,
    1fc0:	00010000 	andeq	r0, r1, r0
    1fc4:	00000052 	andeq	r0, r0, r2, asr r0
	...
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    1fd4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			for (ret = 0; ret < 8; ret++)
    1fe8:	00500001 	subseq	r0, r0, r1
	...
    1ff8:	01000000 	mrseq	r0, (UNDEF: 0)
    1ffc:	00005000 	andeq	r5, r0, r0
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2000:	00000000 	andeq	r0, r0, r0
    2004:	00050000 	andeq	r0, r5, r0
    2008:	00000003 	andeq	r0, r0, r3
	...
			_BIS (dstate, DSTATE_IRST);
    2014:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			ret = (int) channel;
    2020:	00030005 	andeq	r0, r3, r5
	...
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2034:	01000000 	mrseq	r0, (UNDEF: 0)
			plugch ();
    2038:	00005000 	andeq	r5, r0, r0
			_BIS (dstate, DSTATE_IRST);
    203c:	00000000 	andeq	r0, r0, r0
    2040:	00010000 	andeq	r0, r1, r0
			ret = (int) vrate;
    2044:	00000050 	andeq	r0, r0, r0, asr r0
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2048:	00000000 	andeq	r0, r0, r0
    204c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2058:	00500001 	subseq	r0, r0, r1
	...
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2068:	01000000 	mrseq	r0, (UNDEF: 0)
    206c:	00005000 	andeq	r5, r0, r0
	...
			syserror (EREQPAR, "cc13 op");
    207c:	00010000 	andeq	r0, r1, r0
    2080:	00000050 	andeq	r0, r0, r0, asr r0
	...
    2090:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    20a4:	00510001 	subseq	r0, r1, r1
    20a8:	00000000 	andeq	r0, r0, r0
    20ac:	01000000 	mrseq	r0, (UNDEF: 0)
    20b0:	00005600 	andeq	r5, r0, r0, lsl #12
	...
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20c0:	00010000 	andeq	r0, r1, r0
    20c4:	00000052 	andeq	r0, r0, r2, asr r0
	...
		if (cnt-- == 0) {
    20d4:	53000100 	movwpl	r0, #256	; 0x100
	...
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20e8:	00540001 	subseq	r0, r4, r1
}
    20ec:	00000000 	andeq	r0, r0, r0
    20f0:	01000000 	mrseq	r0, (UNDEF: 0)
    20f4:	00005400 	andeq	r5, r0, r0, lsl #8
    20f8:	00000000 	andeq	r0, r0, r0
static void rx_de () {
    20fc:	00010000 	andeq	r0, r1, r0
	if ((dstate & DSTATE_RXAC) == 0)
    2100:	00000054 	andeq	r0, r0, r4, asr r0
	...
	_BIC (dstate, DSTATE_RXAC);
    2110:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    211c:	00500001 	subseq	r0, r0, r1
	...
	IntDisable (INT_RFC_CPE_0);
    212c:	01000000 	mrseq	r0, (UNDEF: 0)
    2130:	00005100 	andeq	r5, r0, r0, lsl #2
    2134:	00000000 	andeq	r0, r0, r0
	RFCAdi3VcoLdoVoltageMode (false);
    2138:	00010000 	andeq	r0, r1, r0
	RFCSynthPowerDown ();
    213c:	00000056 	andeq	r0, r0, r6, asr r0
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2140:	00000000 	andeq	r0, r0, r0
    2144:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2158:	00520001 	subseq	r0, r2, r1
    215c:	00000000 	andeq	r0, r0, r0
	_BIC (dstate, DSTATE_RFON);
    2160:	01000000 	mrseq	r0, (UNDEF: 0)
    2164:	00005400 	andeq	r5, r0, r0, lsl #8
	...
}
    2174:	00010000 	andeq	r0, r1, r0
    2178:	00000054 	andeq	r0, r0, r4, asr r0
	...
		if (cmd->status == tstat)
    2188:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			syserror (EHARDWARE, "rt2");
    219c:	00500001 	subseq	r0, r0, r1
    21a0:	00000000 	andeq	r0, r0, r0
		udelay (1);
    21a4:	01000000 	mrseq	r0, (UNDEF: 0)
		if (cmd->status == tstat)
    21a8:	00005500 	andeq	r5, r0, r0, lsl #10
}
    21ac:	00000000 	andeq	r0, r0, r0
    21b0:	00010000 	andeq	r0, r1, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    21b4:	00000050 	andeq	r0, r0, r0, asr r0
	...
	OSCHF_TurnOnXosc();
    21c4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    21d0:	00560001 	subseq	r0, r6, r1
    21d4:	00000000 	andeq	r0, r0, r0
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21d8:	01000000 	mrseq	r0, (UNDEF: 0)
    21dc:	00005600 	andeq	r5, r0, r0, lsl #12
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21e0:	00000000 	andeq	r0, r0, r0
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    21e4:	00010000 	andeq	r0, r1, r0
	issue_cmd (
    21e8:	00000051 	andeq	r0, r0, r1, asr r0
	...
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    21f8:	52000100 	andpl	r0, r0, #0, 2
	...
   pPatchTab[53] = 2;
    2204:	00520001 	subseq	r0, r2, r1
    2208:	00000000 	andeq	r0, r0, r0
   pPatchTab[55] = 3;
    220c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
   pPatchTab[110] = 4;
    2210:	0800001c 	stmdaeq	r0, {r2, r3, r4}
   pPatchTab[107] = 5;
    2214:	0100001d 	tsteq	r0, sp, lsl r0
   pPatchTab[65] = 6;
    2218:	00005000 	andeq	r5, r0, r0
    221c:	00000000 	andeq	r0, r0, r0
   pPatchTab[57] = 1;
    2220:	1cf80000 	ldclne	0, cr0, [r8]
   pIrqPatch[1] = _IRQ_PATCH_0;
    2224:	1d080000 	stcne	0, cr0, [r8, #-0]
   const uint32_t *pS = patchGenfskRfe;
    2228:	00010000 	andeq	r0, r1, r0
      t2 = *pS++;
    222c:	00000051 	andeq	r0, r0, r1, asr r0
      t4 = *pS++;
    2230:	00000000 	andeq	r0, r0, r0
      t6 = *pS++;
    2234:	001d1a00 	andseq	r1, sp, r0, lsl #20
      t8 = *pS++;
    2238:	001d1e00 	andseq	r1, sp, r0, lsl #28
      *pD++ = t1;
    223c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      *pD++ = t5;
    2248:	00001ce0 	andeq	r1, r0, r0, ror #25
      *pD++ = t7;
    224c:	00001ceb 	andeq	r1, r0, fp, ror #25
   } while (--nIterations);
    2250:	00500001 	subseq	r0, r0, r1
    2254:	00000000 	andeq	r0, r0, r0
      *pD++ = t8;
    2258:	b0000000 	andlt	r0, r0, r0
   } while (--nIterations);
    225c:	cc00001c 	stcgt	0, cr0, [r0], {28}
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2260:	0100001c 	tsteq	r0, ip, lsl r0
   *pD++ = t2;
    2264:	1cd45000 	ldclne	0, cr5, [r4], {0}
   *pD++ = t3;
    2268:	1ce00000 	stclne	0, cr0, [r0]
   *pD++ = t4;
    226c:	00010000 	andeq	r0, r1, r0
   *pD++ = t5;
    2270:	00000050 	andeq	r0, r0, r0, asr r0
    2274:	00000000 	andeq	r0, r0, r0
	RFCAdi3VcoLdoVoltageMode (true);
    2278:	001c8c00 	andseq	r8, ip, r0, lsl #24
    227c:	001c9000 	andseq	r9, ip, r0
       	RFCRfTrimSet (&rfTrim);
    2280:	50000100 	andpl	r0, r0, r0, lsl #2
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2284:	00001c94 	muleq	r0, r4, ip
    2288:	00001cb0 			; <UNDEFINED> instruction: 0x00001cb0
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    228c:	00500001 	subseq	r0, r0, r1
    2290:	00000000 	andeq	r0, r0, r0
	issue_cmd ((lword)&cmd_srt);
    2294:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    2298:	e600001d 			; <UNDEFINED> instruction: 0xe600001d
	issue_cmd ((lword)&RF_cmdFs);
    229c:	0100001d 	tsteq	r0, sp, lsl r0
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    22a0:	1e425000 	cdpne	0, 4, cr5, cr2, cr0, {0}
    22a4:	1e500000 	cdpne	0, 5, cr0, cr0, cr0, {0}
    22a8:	00010000 	andeq	r0, r1, r0
	IntEnable (INT_RFC_CPE_0);
    22ac:	00000050 	andeq	r0, r0, r0, asr r0
	_BIC (dstate, DSTATE_IRST);
    22b0:	00000000 	andeq	r0, r0, r0
    22b4:	001dd800 	andseq	sp, sp, r0, lsl #16
    22b8:	001ded00 	andseq	lr, sp, r0, lsl #26
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22bc:	51000100 	mrspl	r0, (UNDEF: 16)
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22c0:	00001ded 	andeq	r1, r0, sp, ror #27
	IntEnable (INT_RFC_CPE_0);
    22c4:	00001e0c 	andeq	r1, r0, ip, lsl #28
    22c8:	0c570001 	mrrceq	0, 0, r0, r7, cr1
}
    22cc:	1400001e 	strne	r0, [r0], #-30	; 0xffffffe2
	IntEnable (INT_RFC_CPE_0);
    22d0:	0100001e 	tsteq	r0, lr, lsl r0
    22d4:	1e145100 	mufnes	f5, f4, f0
    22d8:	1e3a0000 	cdpne	0, 3, cr0, cr10, cr0, {0}
    22dc:	00010000 	andeq	r0, r1, r0
    22e0:	001e3a57 	andseq	r3, lr, r7, asr sl
    22e4:	001e3d00 	andseq	r3, lr, r0, lsl #26
    22e8:	51000100 	mrspl	r0, (UNDEF: 16)
    22ec:	00001e3d 	andeq	r1, r0, sp, lsr lr
    22f0:	00001e42 	andeq	r1, r0, r2, asr #28
    22f4:	42570001 	subsmi	r0, r7, #1
    22f8:	5000001e 	andpl	r0, r0, lr, lsl r0
    22fc:	0100001e 	tsteq	r0, lr, lsl r0
    2300:	00005100 	andeq	r5, r0, r0, lsl #2
    2304:	00000000 	andeq	r0, r0, r0
    2308:	1dd80000 	ldclne	0, cr0, [r8]
    230c:	1ded0000 	stclne	0, cr0, [sp]
    2310:	00010000 	andeq	r0, r1, r0
    2314:	001ded52 	andseq	lr, sp, r2, asr sp
    2318:	001e0c00 	andseq	r0, lr, r0, lsl #24
    231c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    2320:	00001e0c 	andeq	r1, r0, ip, lsl #28
    2324:	00001e14 	andeq	r1, r0, r4, lsl lr
    2328:	14520001 	ldrbne	r0, [r2], #-1
    232c:	3a00001e 	bcc	23ac <rx_int_enable+0x78>
    2330:	0100001e 	tsteq	r0, lr, lsl r0
static void rx_int_enable () {
    2334:	1e3a5500 	cfabs32ne	mvfx5, mvfx10
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2338:	1e3d0000 	cdpne	0, 3, cr0, cr13, cr0, {0}
    233c:	00010000 	andeq	r0, r1, r0
    2340:	001e3d52 	andseq	r3, lr, r2, asr sp
    2344:	001e4200 	andseq	r4, lr, r0, lsl #4
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2348:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    234c:	00001e42 	andeq	r1, r0, r2, asr #28
    2350:	00001e50 	andeq	r1, r0, r0, asr lr
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2354:	00520001 	subseq	r0, r2, r1
    2358:	00000000 	andeq	r0, r0, r0
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    235c:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    2360:	f400001d 	vst4.8	{d0-d3}, [r0 :64]!
    2364:	0100001d 	tsteq	r0, sp, lsl r0
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2368:	1df45000 	ldclne	0, cr5, [r4]
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    236c:	1df70000 	ldclne	0, cr0, [r7]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2370:	00010000 	andeq	r0, r1, r0
		if (db->status == DATA_ENTRY_FINISHED) {
    2374:	001df851 	andseq	pc, sp, r1, asr r8	; <UNPREDICTABLE>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2378:	001dfc00 	andseq	pc, sp, r0, lsl #24
    237c:	50000100 	andpl	r0, r0, r0, lsl #2
			nr++;
    2380:	00001e04 	andeq	r1, r0, r4, lsl #28
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2384:	00001e09 	andeq	r1, r0, r9, lsl #28
    2388:	14500001 	ldrbne	r0, [r0], #-1
    238c:	3600001e 			; <UNDEFINED> instruction: 0x3600001e
    2390:	0100001e 	tsteq	r0, lr, lsl r0
				__dp [pl + 1] = __dp [pl] - 128;
    2394:	1e405400 	cdpne	4, 4, cr5, cr0, cr0, {0}
				pl = __dp [1] + 2;
    2398:	1e420000 	cdpne	0, 4, cr0, cr2, cr0, {0}
				__dp [pl + 1] = __dp [pl] - 128;
    239c:	00010000 	andeq	r0, r1, r0
    23a0:	00000050 	andeq	r0, r0, r0, asr r0
				__dp [pl] = 0;
    23a4:	00000000 	andeq	r0, r0, r0
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    23a8:	001e5000 	andseq	r5, lr, r0
    23ac:	001e5800 	andseq	r5, lr, r0, lsl #16
    23b0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    23bc:	00001e5c 	andeq	r1, r0, ip, asr lr
				diag ("BAD RX");
    23c0:	00001e65 	andeq	r1, r0, r5, ror #28
    23c4:	65500001 	ldrbvs	r0, [r0, #-1]
	if (nr) {
    23c8:	6a00001e 	bvs	2448 <cc1350_driver+0x44>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23cc:	0100001e 	tsteq	r0, lr, lsl r0
}
    23d0:	1e6a5600 	cdpne	6, 6, cr5, cr10, cr0, {0}
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23d4:	1e730000 	cdpne	0, 7, cr0, cr3, cr0, {0}
    23d8:	00010000 	andeq	r0, r1, r0
    23dc:	001e7350 	andseq	r7, lr, r0, asr r3
}
    23e0:	001e9a00 	andseq	r9, lr, r0, lsl #20
    23e4:	56000100 	strpl	r0, [r0], -r0, lsl #2
    23e8:	00001e9a 	muleq	r0, sl, lr
    23ec:	00001ea4 	andeq	r1, r0, r4, lsr #29
    23f0:	00500001 	subseq	r0, r0, r1
    23f4:	00000000 	andeq	r0, r0, r0
    23f8:	74000000 	strvc	r0, [r0], #-0
    23fc:	7800001e 	stmdavc	r0, {r1, r2, r3, r4}
    2400:	0100001e 	tsteq	r0, lr, lsl r0
thread (cc1350_driver)
    2404:	1e785000 	cdpne	0, 7, cr5, cr8, cr0, {0}
    2408:	1e800000 	cdpne	0, 8, cr0, cr0, cr0, {0}
    240c:	00010000 	andeq	r0, r1, r0
    2410:	001e8055 	andseq	r8, lr, r5, asr r0
    2414:	001e8400 	andseq	r8, lr, r0, lsl #8
		if (dstate & DSTATE_IRST) {
    2418:	50000100 	andpl	r0, r0, r0, lsl #2
    241c:	00001e84 	andeq	r1, r0, r4, lsl #29
    2420:	00001e9a 	muleq	r0, sl, lr
			rf_off ();
    2424:	00550001 	subseq	r0, r5, r1
			_BIC (dstate,
    2428:	00000000 	andeq	r0, r0, r0
    242c:	a4000000 	strge	r0, [r0], #-0
		if (dstate & DSTATE_RXAC) {
    2430:	b200001e 	andlt	r0, r0, #30
    2434:	0100001e 	tsteq	r0, lr, lsl r0
			if ((dstate & DSTATE_RXON) == 0)
    2438:	1ef85000 	cdpne	0, 15, cr5, cr8, cr0, {0}
				rx_de ();
    243c:	1f040000 	svcne	0x00040000
		if (paylen == 0) {
    2440:	00010000 	andeq	r0, r1, r0
    2444:	00000050 	andeq	r0, r0, r0, asr r0
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2448:	00000000 	andeq	r0, r0, r0
    244c:	001eba00 	andseq	fp, lr, r0, lsl #20
    2450:	001ec000 	andseq	ip, lr, r0
    2454:	50000100 	andpl	r0, r0, r0, lsl #2
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2458:	00001ec0 	andeq	r1, r0, r0, asr #29
    245c:	00001ec3 	andeq	r1, r0, r3, asr #29
    2460:	c4510001 	ldrbgt	r0, [r1], #-1
    2464:	c800001e 	stmdagt	r0, {r1, r2, r3, r4}
    2468:	0100001e 	tsteq	r0, lr, lsl r0
    246c:	1ed05000 	cdpne	0, 13, cr5, cr0, cr0, {0}
    2470:	1ed50000 	cdpne	0, 13, cr0, cr5, cr0, {0}
    2474:	00010000 	andeq	r0, r1, r0
		} else if (dstate & DSTATE_RXON) {
    2478:	001ee250 	andseq	lr, lr, r0, asr r2
	if (dstate & DSTATE_RFON)
    247c:	001ee400 	andseq	lr, lr, r0, lsl #8
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2480:	50000100 	andpl	r0, r0, r0, lsl #2
		re->status = DATA_ENTRY_PENDING;
    2484:	00001ee4 	andeq	r1, r0, r4, ror #29
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2488:	00001eec 	andeq	r1, r0, ip, ror #29
	issue_cmd ((lword)&RF_cmdPropRx);
    248c:	00540001 	subseq	r0, r4, r1
	_BIS (dstate, DSTATE_RXAC);
    2490:	00000000 	andeq	r0, r0, r0
    2494:	64000000 	strvs	r0, [r0], #-0
    2498:	72000026 	andvc	r0, r0, #38	; 0x26
    249c:	01000026 	tsteq	r0, r6, lsr #32
	if (dstate & DSTATE_RXAC)
    24a0:	26725000 	ldrbtcs	r5, [r2], -r0
    24a4:	26780000 	ldrbtcs	r0, [r8], -r0
				if (statid != 0xffff)
    24a8:	00010000 	andeq	r0, r1, r0
    24ac:	00267856 	eoreq	r7, r6, r6, asr r8
					((address)(RF_cmdPropTx.pPkt)) [0] =
    24b0:	00268200 	eoreq	r8, r6, r0, lsl #4
				RF_cmdPropTx.pktLen = (byte) paylen;
    24b4:	50000100 	andpl	r0, r0, r0, lsl #2
		if (paylen == 0) {
    24b8:	00002682 	andeq	r2, r0, r2, lsl #13
			wait (qevent, DR_LOOP);
    24bc:	00002686 	andeq	r2, r0, r6, lsl #13
    24c0:	86560001 	ldrbhi	r0, [r6], -r1
			if (dstate & DSTATE_RXAC) {
    24c4:	96000026 	strls	r0, [r0], -r6, lsr #32
    24c8:	01000026 	tsteq	r0, r6, lsr #32
				rx_int_enable ();
    24cc:	26965000 	ldrcs	r5, [r6], r0
			release;
    24d0:	278e0000 	strcs	r0, [lr, r0]
			} else if (dstate & DSTATE_RFON) {
    24d4:	00010000 	andeq	r0, r1, r0
				delay (offdelay, DR_GOOF);
    24d8:	00000056 	andeq	r0, r0, r6, asr r0
    24dc:	00000000 	andeq	r0, r0, r0
    24e0:	00266400 	eoreq	r6, r6, r0, lsl #8
		if (bckf_timer) {
    24e4:	00267400 	eoreq	r7, r6, r0, lsl #8
			wait (qevent, DR_LOOP);
    24e8:	51000100 	mrspl	r0, (UNDEF: 16)
    24ec:	00002678 	andeq	r2, r0, r8, ror r6
    24f0:	00002684 	andeq	r2, r0, r4, lsl #13
			delay (bckf_timer, DR_LOOP);
    24f4:	86510001 	ldrbhi	r0, [r1], -r1
    24f8:	96000026 	strls	r0, [r0], -r6, lsr #32
			if (dstate & DSTATE_RXAC)
    24fc:	01000026 	tsteq	r0, r6, lsr #32
    2500:	00005100 	andeq	r5, r0, r0, lsl #2
	if (dstate & DSTATE_RFON)
    2504:	00000000 	andeq	r0, r0, r0
    2508:	26cc0000 	strbcs	r0, [ip], r0
		rx_de ();
    250c:	26e00000 	strbtcs	r0, [r0], r0
		RF_cmdPropTx . status = 0;
    2510:	00010000 	andeq	r0, r1, r0
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2514:	0026e055 	eoreq	lr, r6, r5, asr r0
    2518:	0026e600 	eoreq	lr, r6, r0, lsl #12
    251c:	70000200 	andvc	r0, r0, r0, lsl #4
	...
		if (dstate & DSTATE_IRST)
    2528:	00269600 	eoreq	r9, r6, r0, lsl #12
    252c:	00269f00 	eoreq	r9, r6, r0, lsl #30
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2530:	53000100 	movwpl	r0, #256	; 0x100
    2534:	0000269f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
			delay (1, DR_XMIT);
    2538:	00002702 	andeq	r2, r0, r2, lsl #14
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    253c:	345b0001 	ldrbcc	r0, [fp], #-1
    2540:	38000027 	stmdacc	r0, {r0, r1, r2, r5}
    2544:	01000027 	tsteq	r0, r7, lsr #32
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2548:	00005b00 	andeq	r5, r0, r0, lsl #22
    254c:	00000000 	andeq	r0, r0, r0
				RF_cmdPropTx . status = 0;
    2550:	26a00000 	strtcs	r0, [r0], r0
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2554:	26a40000 	strtcs	r0, [r4], r0
				issue_cmd ((lword)&RF_cmdPropTx);
    2558:	00010000 	andeq	r0, r1, r0
				proceed (DR_XMIT);
    255c:	0026aa50 	eoreq	sl, r6, r0, asr sl
    2560:	0026d000 	eoreq	sp, r6, r0
			txtries++;
    2564:	50000100 	andpl	r0, r0, r0, lsl #2
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2568:	000026d0 	ldrdeq	r2, [r0], -r0
    256c:	000026d3 	ldrdeq	r2, [r0], -r3
    2570:	34530001 	ldrbcc	r0, [r3], #-1
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2574:	38000027 	stmdacc	r0, {r0, r1, r2, r5}
		goto DR_LOOP__;
    2578:	01000027 	tsteq	r0, r7, lsr #32
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    257c:	00005000 	andeq	r5, r0, r0
		paylen = 0;
    2580:	00000000 	andeq	r0, r0, r0
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2584:	1f240000 	svcne	0x00240000
		txtries = 0;
    2588:	1f520000 	svcne	0x00520000
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    258c:	00010000 	andeq	r0, r1, r0
    2590:	001f5a50 	andseq	r5, pc, r0, asr sl	; <UNPREDICTABLE>
    2594:	001f6400 	andseq	r6, pc, r0, lsl #8
    2598:	50000100 	andpl	r0, r0, r0, lsl #2
    259c:	00001f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
		    tcvphy_top (physid) == NULL)
    25a0:	00001fa4 	andeq	r1, r0, r4, lsr #31
    25a4:	a8500001 	ldmdage	r0, {r0}^
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    25a8:	ac00001f 	stcge	0, cr0, [r0], {31}
    25ac:	0100001f 	tsteq	r0, pc, lsl r0
			rf_off ();
    25b0:	1fb45000 	svcne	0x00b45000
endthread
    25b4:	1fb80000 	svcne	0x00b80000
    25b8:	00010000 	andeq	r0, r1, r0
    25bc:	001fba50 	andseq	fp, pc, r0, asr sl	; <UNPREDICTABLE>
    25c0:	001fc000 	andseq	ip, pc, r0
    25c4:	50000100 	andpl	r0, r0, r0, lsl #2
    25c8:	00001fc8 	andeq	r1, r0, r8, asr #31
    25cc:	00001fca 	andeq	r1, r0, sl, asr #31
    25d0:	d0500001 	subsle	r0, r0, r1
    25d4:	d500001f 	strle	r0, [r0, #-31]	; 0xffffffe1
    25d8:	0100001f 	tsteq	r0, pc, lsl r0
    25dc:	1fe45000 	svcne	0x00e45000
    25e0:	1fea0000 	svcne	0x00ea0000
    25e4:	00010000 	andeq	r0, r1, r0
    25e8:	00200050 	eoreq	r0, r0, r0, asr r0
    25ec:	00200400 	eoreq	r0, r0, r0, lsl #8
    25f0:	50000100 	andpl	r0, r0, r0, lsl #2
void RFCCPE0IntHandler (void) {
    25f4:	00002020 	andeq	r2, r0, r0, lsr #32
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    25f8:	00002024 	andeq	r2, r0, r4, lsr #32
		_BIS (dstate, DSTATE_IRST);
    25fc:	26500001 	ldrbcs	r0, [r0], -r1
    2600:	78000020 	stmdavc	r0, {r5}
    2604:	01000020 	tsteq	r0, r0, lsr #32
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2608:	00005000 	andeq	r5, r0, r0
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    260c:	00000000 	andeq	r0, r0, r0
    2610:	1f240000 	svcne	0x00240000
	p_trigger (drvprcs, qevent);
    2614:	1f640000 	svcne	0x00640000
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2618:	00010000 	andeq	r0, r1, r0
    261c:	001f9251 	andseq	r9, pc, r1, asr r2	; <UNPREDICTABLE>
    2620:	001fa400 	andseq	sl, pc, r0, lsl #8
    2624:	51000100 	mrspl	r0, (UNDEF: 16)
    2628:	00001fa8 	andeq	r1, r0, r8, lsr #31
    262c:	00001fac 	andeq	r1, r0, ip, lsr #31
    2630:	ac510001 	mrrcge	0, 0, r0, r1, cr1
    2634:	b400001f 	strlt	r0, [r0], #-31	; 0xffffffe1
    2638:	0100001f 	tsteq	r0, pc, lsl r0
    263c:	1fb45400 	svcne	0x00b45400
	RISE_N_SHINE;
    2640:	1fc20000 	svcne	0x00c20000
    2644:	00010000 	andeq	r0, r1, r0
    2648:	001fc251 	andseq	ip, pc, r1, asr r2	; <UNPREDICTABLE>
}
    264c:	001fc800 	andseq	ip, pc, r0, lsl #16
    2650:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2654:	00001fc8 	andeq	r1, r0, r8, asr #31
    2658:	00001fcd 	andeq	r1, r0, sp, asr #31
    265c:	cd510001 	ldclgt	0, cr0, [r1, #-4]
    2660:	d000001f 	andle	r0, r0, pc, lsl r0
void phys_cc1350 (int phy, int mbs) {
    2664:	0100001f 	tsteq	r0, pc, lsl r0
	if (rbuffl != 0)
    2668:	1fd05400 	svcne	0x00d05400
    266c:	1fd50000 	svcne	0x00d50000
		syserror (ETOOMANY, "cc13");
    2670:	00010000 	andeq	r0, r1, r0
		syserror (EREQPAR, "cc13 mb");
    2674:	001fd551 	andseq	sp, pc, r1, asr r5	; <UNPREDICTABLE>
	if (mbs == 0)
    2678:	001fe400 	andseq	lr, pc, r0, lsl #8
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    267c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
		syserror (EREQPAR, "cc13 mb");
    2680:	00001fe4 	andeq	r1, r0, r4, ror #31
    2684:	00001fe6 	andeq	r1, r0, r6, ror #31
	i = 0;
    2688:	e6510001 	ldrb	r0, [r1], -r1
	rbuffl = (byte) mbs;
    268c:	e800001f 	stmda	r0, {r0, r1, r2, r3, r4}
		db->config.type = 0;	// General (data in structure)
    2690:	0100001f 	tsteq	r0, pc, lsl r0
	rbuffl = (byte) mbs;
    2694:	1fe85400 	svcne	0x00e85400
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2698:	1ff00000 	svcne	0x00f00000	; IMB
    269c:	00010000 	andeq	r0, r1, r0
		if (db == NULL)
    26a0:	001ff051 	andseq	pc, pc, r1, asr r0	; <UNPREDICTABLE>
			syserror (EMALLOC, "cc13");
    26a4:	00200000 	eoreq	r0, r0, r0
    26a8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    26ac:	00002000 	andeq	r2, r0, r0
		db->status = DATA_ENTRY_PENDING;
    26b0:	0000207a 	andeq	r2, r0, sl, ror r0
		if (i)
    26b4:	7a510001 	bvc	14426c0 <__ccfg+0x1422718>
			da->pNextEntry = (byte*) db;
    26b8:	b4000020 	strlt	r0, [r0], #-32	; 0xffffffe0
		db->length = rbuffl + 2;
    26bc:	01000020 	tsteq	r0, r0, lsr #32
    26c0:	00005400 	andeq	r5, r0, r0, lsl #8
		db->config.type = 0;	// General (data in structure)
    26c4:	00000000 	andeq	r0, r0, r0
		db->length = rbuffl + 2;
    26c8:	1f580000 	svcne	0x00580000
	db->pNextEntry = (byte*) re;
    26cc:	1f5a0000 	svcne	0x005a0000
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    26d0:	00010000 	andeq	r0, r1, r0
    26d4:	001f6650 	andseq	r6, pc, r0, asr r6	; <UNPREDICTABLE>
	if (rbuffs == NULL)
    26d8:	001f9000 	andseq	r9, pc, r0
	rbuffs->pCurrEntry = (byte*) re;
    26dc:	50000100 	andpl	r0, r0, r0, lsl #2
	rbuffs->pLastEntry = NULL;
    26e0:	00001fac 	andeq	r1, r0, ip, lsr #31
    26e4:	00001fb4 			; <UNDEFINED> instruction: 0x00001fb4
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26e8:	f0500001 			; <UNDEFINED> instruction: 0xf0500001
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    26ec:	0000001f 	andeq	r0, r0, pc, lsl r0
    26f0:	01000020 	tsteq	r0, r0, lsr #32
    26f4:	200a5000 	andcs	r5, sl, r0
	rbuffl -= 2;
    26f8:	20200000 	eorcs	r0, r0, r0
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26fc:	00010000 	andeq	r0, r1, r0
	rbuffl -= 2;
    2700:	00202450 	eoreq	r2, r0, r0, asr r4
	physid = phy;
    2704:	00202600 	eoreq	r2, r0, r0, lsl #12
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2708:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2714:	00001f7a 	andeq	r1, r0, sl, ror pc
    2718:	00001f84 	andeq	r1, r0, r4, lsl #31
	utimer_add (&bckf_timer);
    271c:	00530001 	subseq	r0, r3, r1
	drvprcs = runthread (cc1350_driver);
    2720:	00000000 	andeq	r0, r0, r0
    2724:	04000000 	streq	r0, [r0], #-0
    2728:	18000024 	stmdane	r0, {r2, r5}
	if (drvprcs == 0)
    272c:	01000024 	tsteq	r0, r4, lsr #32
		syserror (ERESOURCE, "cc13");
    2730:	258c5000 	strcs	r5, [ip]
    2734:	25a40000 	strcs	r0, [r4, #0]!
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2738:	00010000 	andeq	r0, r1, r0
    273c:	0025b450 	eoreq	fp, r5, r0, asr r4
    2740:	0025bb00 	eoreq	fp, r5, r0, lsl #22
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2744:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2750:	00002484 	andeq	r2, r0, r4, lsl #9
    2754:	0000248c 	andeq	r2, r0, ip, lsl #9
    2758:	8c520001 	mrrchi	0, 0, r0, r2, cr1
    275c:	8f000024 	svchi	0x00000024
    2760:	02000024 	andeq	r0, r0, #36	; 0x24
    2764:	00007200 	andeq	r7, r0, r0, lsl #4
    2768:	00000000 	andeq	r0, r0, r0
    276c:	2a000000 	bcs	2774 <phys_cc1350+0x110>
	plugch ();
    2770:	34000026 	strcc	r0, [r0], #-38	; 0xffffffda
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2774:	01000026 	tsteq	r0, r6, lsr #32
    2778:	00005300 	andeq	r5, r0, r0, lsl #6
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    277c:	00000000 	andeq	r0, r0, r0
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2780:	23720000 	cmncs	r2, #0
    2784:	23b60000 			; <UNDEFINED> instruction: 0x23b60000
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2788:	00010000 	andeq	r0, r1, r0
}
    278c:	0023b654 	eoreq	fp, r3, r4, asr r6
    2790:	0023be00 	eoreq	fp, r3, r0, lsl #28
    2794:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
    2798:	0023be00 	eoreq	fp, r3, r0, lsl #28
    279c:	0023c800 	eoreq	ip, r3, r0, lsl #16
    27a0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    27a4:	000023c8 	andeq	r2, r0, r8, asr #7
    27a8:	000023cd 	andeq	r2, r0, sp, asr #7
    27ac:	00740002 	rsbseq	r0, r4, r2
    27b0:	000023de 	ldrdeq	r2, [r0], -lr
    27b4:	000023e2 	andeq	r2, r0, r2, ror #7
    27b8:	00740002 	rsbseq	r0, r4, r2
	...
    27c4:	0000239a 	muleq	r0, sl, r3
    27c8:	000023b1 			; <UNDEFINED> instruction: 0x000023b1
    27cc:	00520001 	subseq	r0, r2, r1
    27d0:	00000000 	andeq	r0, r0, r0
    27d4:	72000000 	andvc	r0, r0, #0
    27d8:	d2000023 	andle	r0, r0, #35	; 0x23
    27dc:	01000023 	tsteq	r0, r3, lsr #32
    27e0:	23de5500 	bicscs	r5, lr, #0, 10
    27e4:	23e20000 	mvncs	r0, #0
    27e8:	00010000 	andeq	r0, r1, r0
    27ec:	00000055 	andeq	r0, r0, r5, asr r0
    27f0:	00000000 	andeq	r0, r0, r0
    27f4:	0020b400 	eoreq	fp, r0, r0, lsl #8
    27f8:	0020ba00 	eoreq	fp, r0, r0, lsl #20
    27fc:	50000100 	andpl	r0, r0, r0, lsl #2
    2800:	000020ba 	strheq	r2, [r0], -sl
    2804:	000020ec 	andeq	r2, r0, ip, ror #1
    2808:	00540001 	subseq	r0, r4, r1
    280c:	00000000 	andeq	r0, r0, r0
    2810:	c2000000 	andgt	r0, r0, #0
    2814:	cc000020 	stcgt	0, cr0, [r0], {32}
    2818:	01000020 	tsteq	r0, r0, lsr #32
    281c:	20d25200 	sbcscs	r5, r2, r0, lsl #4
    2820:	20dd0000 	sbcscs	r0, sp, r0
    2824:	00010000 	andeq	r0, r1, r0
    2828:	0020e252 	eoreq	lr, r0, r2, asr r2
    282c:	0020e700 	eoreq	lr, r0, r0, lsl #14
    2830:	52000100 	andpl	r0, r0, #0, 2
    2834:	000020ea 	andeq	r2, r0, sl, ror #1
    2838:	000020fc 	strdeq	r2, [r0], -ip
    283c:	00520001 	subseq	r0, r2, r1
    2840:	00000000 	andeq	r0, r0, r0
    2844:	ca000000 	bgt	284c <tcv_ope_null+0x1c>
    2848:	cc000020 	stcgt	0, cr0, [r0], {32}
    284c:	01000020 	tsteq	r0, r0, lsr #32
    2850:	00005400 	andeq	r5, r0, r0, lsl #8
    2854:	00000000 	andeq	r0, r0, r0
    2858:	217c0000 	cmncs	ip, r0
    285c:	21860000 	orrcs	r0, r6, r0
    2860:	00010000 	andeq	r0, r1, r0
    2864:	00218650 	eoreq	r8, r1, r0, asr r6
    2868:	0021ac00 	eoreq	sl, r1, r0, lsl #24
    286c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
strand (__outserial, const char*)
    2878:	0000217c 	andeq	r2, r0, ip, ror r1
    287c:	00002186 	andeq	r2, r0, r6, lsl #3
    2880:	86510001 	ldrbhi	r0, [r1], -r1
    2884:	ac000021 	stcge	0, cr0, [r0], {33}	; 0x21
endstrand
    2888:	01000021 	tsteq	r0, r1, lsr #32
    288c:	00005500 	andeq	r5, r0, r0, lsl #10
	ptr = data;
    2890:	00000000 	andeq	r0, r0, r0
    2894:	22560000 	subscs	r0, r6, #0
	if (*ptr)
    2898:	225e0000 	subscs	r0, lr, #0
		len = strlen (ptr);
    289c:	00010000 	andeq	r0, r1, r0
    28a0:	00000052 	andeq	r0, r0, r2, asr r0
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    28a4:	00000000 	andeq	r0, r0, r0
    28a8:	00222a00 	eoreq	r2, r2, r0, lsl #20
    28ac:	00225600 	eoreq	r5, r2, r0, lsl #12
    28b0:	53000100 	movwpl	r0, #256	; 0x100
    28b4:	0000225a 	andeq	r2, r0, sl, asr r2
	len -= quant;
    28b8:	0000225e 	andeq	r2, r0, lr, asr r2
    28bc:	00530001 	subseq	r0, r3, r1
    28c0:	00000000 	andeq	r0, r0, r0
	if (len == 0) {
    28c4:	30000000 	andcc	r0, r0, r0
		ufree (data);
    28c8:	5e000022 	cdppl	0, 0, cr0, cr0, cr2, {1}
		finish;
    28cc:	01000022 	tsteq	r0, r2, lsr #32
    28d0:	00005e00 	andeq	r5, r0, r0, lsl #28
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    28d4:	00000000 	andeq	r0, r0, r0
    28d8:	22340000 	eorscs	r0, r4, #0
    28dc:	225e0000 	subscs	r0, lr, #0
    28e0:	00010000 	andeq	r0, r1, r0
    28e4:	00000057 	andeq	r0, r0, r7, asr r0
strand (__inserial, address)
    28e8:	00000000 	andeq	r0, r0, r0
    28ec:	00223800 	eoreq	r3, r2, r0, lsl #16
    28f0:	00227400 	eoreq	r7, r2, r0, lsl #8
    28f4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	if (__inpline != NULL)
    2900:	00002238 	andeq	r2, r0, r8, lsr r2
		finish;
    2904:	00002250 	andeq	r2, r0, r0, asr r2
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    2908:	50500001 	subspl	r0, r0, r1
    290c:	5a000022 	bpl	299c <__inserial+0xb4>
    2910:	02000022 	andeq	r0, r0, #34	; 0x22
    2914:	5a187300 	bpl	61f51c <__ccfg+0x5ff574>
		umwait (IM_INIT);
    2918:	5c000022 	stcpl	0, cr0, [r0], {34}	; 0x22
		release;
    291c:	02000022 	andeq	r0, r0, #34	; 0x22
	savedata (data);
    2920:	00187000 	andseq	r7, r8, r0
	len = MAX_LINE_LENGTH;
    2924:	00000000 	andeq	r0, r0, r0
	io (IM_READ, __cport, READ, ptr, 1);
    2928:	56000000 	strpl	r0, [r0], -r0
    292c:	74000022 	strvc	r0, [r0], #-34	; 0xffffffde
    2930:	01000022 	tsteq	r0, r2, lsr #32
    2934:	00005400 	andeq	r5, r0, r0, lsl #8
	if (ptr == (char*) data) { // new line
    2938:	00000000 	andeq	r0, r0, r0
    293c:	282c0000 	stmdacs	ip!, {}	; <UNPREDICTABLE>
		if (*ptr == '\0') { // bin cmd
    2940:	282e0000 	stmdacs	lr!, {}	; <UNPREDICTABLE>
			proceed (IM_BIN);
    2944:	00010000 	andeq	r0, r1, r0
    2948:	00000050 	andeq	r0, r0, r0, asr r0
		if (*ptr < 0x20)
    294c:	00000000 	andeq	r0, r0, r0
    2950:	00282800 	eoreq	r2, r8, r0, lsl #16
			proceed (IM_READ);
    2954:	00282a00 	eoreq	r2, r8, r0, lsl #20
    2958:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (*ptr == '\n' || *ptr == '\r') {
    2964:	00002820 	andeq	r2, r0, r0, lsr #16
		*ptr = '\0';
    2968:	00002822 	andeq	r2, r0, r2, lsr #16
		__inpline = (char*)data;
    296c:	00500001 	subseq	r0, r0, r1
		finish;
    2970:	00000000 	andeq	r0, r0, r0
	if (len) {
    2974:	fc000000 	stc2	0, cr0, [r0], {-0}
		ptr++;
    2978:	06000027 	streq	r0, [r0], -r7, lsr #32
    297c:	01000028 	tsteq	r0, r8, lsr #32
		len--;
    2980:	28085000 	stmdacs	r8, {ip, lr}
	proceed (IM_READ);
    2984:	28160000 	ldmdacs	r6, {}	; <UNPREDICTABLE>
	io (IM_BIN, __cport, READ, ptr, 1);
    2988:	00010000 	andeq	r0, r1, r0
    298c:	00000050 	andeq	r0, r0, r0, asr r0
    2990:	00000000 	andeq	r0, r0, r0
    2994:	0027fc00 	eoreq	pc, r7, r0, lsl #24
    2998:	0027fe00 	eoreq	pc, r7, r0, lsl #28
	len -= 2;
    299c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		len = *ptr + 1;
    29a8:	000027fc 	strdeq	r2, [r0], -ip
    29ac:	00002800 	andeq	r2, r0, r0, lsl #16
	ptr++;
    29b0:	00520001 	subseq	r0, r2, r1
	quant = io (IM_BINL, __cport, READ, ptr, len);
    29b4:	00000000 	andeq	r0, r0, r0
    29b8:	fc000000 	stc2	0, cr0, [r0], {-0}
    29bc:	14000027 	strne	r0, [r0], #-39	; 0xffffffd9
    29c0:	01000028 	tsteq	r0, r8, lsr #32
    29c4:	00005300 	andeq	r5, r0, r0, lsl #6
    29c8:	00000000 	andeq	r0, r0, r0
	len -= quant;
    29cc:	27d80000 	ldrbcs	r0, [r8, r0]
		__inpline = (char*)data;
    29d0:	27e40000 	strbcs	r0, [r4, r0]!
		finish;
    29d4:	00010000 	andeq	r0, r1, r0
	ptr += quant;
    29d8:	0027e450 	eoreq	lr, r7, r0, asr r4
    29dc:	0027fc00 	eoreq	pc, r7, r0, lsl #24
endstrand
    29e0:	53000100 	movwpl	r0, #256	; 0x100
	...
    29ec:	00002830 	andeq	r2, r0, r0, lsr r8
    29f0:	0000283e 	andeq	r2, r0, lr, lsr r8
    29f4:	3e500001 	cdpcc	0, 5, cr0, cr0, cr1, {0}
    29f8:	78000028 	stmdavc	r0, {r3, r5}
    29fc:	01000028 	tsteq	r0, r8, lsr #32
    2a00:	00005500 	andeq	r5, r0, r0, lsl #10
		if (res && (d < n))
    2a04:	00000000 	andeq	r0, r0, r0
    2a08:	28300000 	ldmdacs	r0!, {}	; <UNPREDICTABLE>
    2a0c:	28410000 	stmdacs	r1, {}^	; <UNPREDICTABLE>
    2a10:	00010000 	andeq	r0, r1, r0
			res [d] = (char) c;
    2a14:	00284151 	eoreq	r4, r8, r1, asr r1
		d++;
    2a18:	00287800 	eoreq	r7, r8, r0, lsl #16
    2a1c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a28:	00002830 	andeq	r2, r0, r0, lsr r8
    2a2c:	00002841 	andeq	r2, r0, r1, asr #16
				enci (10000);
    2a30:	50520001 	subspl	r0, r2, r1
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a34:	56000028 	strpl	r0, [r0], -r8, lsr #32
    2a38:	01000028 	tsteq	r0, r8, lsr #32
	d = 0;
    2a3c:	00005200 	andeq	r5, r0, r0, lsl #4
		c = *fm++;
    2a40:	00000000 	andeq	r0, r0, r0
		if (c == '\\') {
    2a44:	28780000 	ldmdacs	r8!, {}^	; <UNPREDICTABLE>
			if ((c = *fm++) == '\0') {
    2a48:	288f0000 	stmcs	pc, {}	; <UNPREDICTABLE>
    2a4c:	00010000 	andeq	r0, r1, r0
				outc ('\\');
    2a50:	00289050 	eoreq	r9, r8, r0, asr r0
			if ((c = *fm++) == '\0') {
    2a54:	00289c00 	eoreq	r9, r8, r0, lsl #24
				outc ('\\');
    2a58:	50000100 	andpl	r0, r0, r0, lsl #2
    2a5c:	000028d4 	ldrdeq	r2, [r0], -r4
			outc (c);
    2a60:	000028e8 	andeq	r2, r0, r8, ror #17
    2a64:	00500001 	subseq	r0, r0, r1
			if (c == '\0')
    2a68:	00000000 	andeq	r0, r0, r0
    2a6c:	80000000 	andhi	r0, r0, r0
			outc (c);
    2a70:	8c000028 	stchi	0, cr0, [r0], {40}	; 0x28
				outc (val);
    2a74:	01000028 	tsteq	r0, r8, lsr #32
				val = (word) va_arg (ap, aword);
    2a78:	288c5500 	stmcs	ip, {r8, sl, ip, lr}
		if (c == '%') {
    2a7c:	288f0000 	stmcs	pc, {}	; <UNPREDICTABLE>
    2a80:	00020000 	andeq	r0, r2, r0
			c = *fm++;
    2a84:	28900873 	ldmcs	r0, {r0, r1, r4, r5, r6, fp}
			switch (c) {
    2a88:	28e80000 	stmiacs	r8!, {}^	; <UNPREDICTABLE>
    2a8c:	00010000 	andeq	r0, r1, r0
    2a90:	00000055 	andeq	r0, r0, r5, asr r0
    2a94:	00000000 	andeq	r0, r0, r0
    2a98:	0028b600 	eoreq	fp, r8, r0, lsl #12
    2a9c:	0028c800 	eoreq	ip, r8, r0, lsl #16
    2aa0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				outc ('%');
    2aac:	000028e8 	andeq	r2, r0, r8, ror #17
				outc (c);
    2ab0:	00002904 	andeq	r2, r0, r4, lsl #18
    2ab4:	ea500001 	b	1402ac0 <__ccfg+0x13e2b18>
    2ab8:	f3000029 	vhadd.u8	d0, d0, d25
				if (c == '\0')
    2abc:	01000029 	tsteq	r0, r9, lsr #32
				return d;
    2ac0:	00005000 	andeq	r5, r0, r0
}
    2ac4:	00000000 	andeq	r0, r0, r0
    2ac8:	28f00000 	ldmcs	r0!, {}^	; <UNPREDICTABLE>
			switch (c) {
    2acc:	29120000 	ldmdbcs	r2, {}	; <UNPREDICTABLE>
    2ad0:	00010000 	andeq	r0, r1, r0
    2ad4:	00291254 	eoreq	r1, r9, r4, asr r2
				for (i = 12; ; i -= 4) {
    2ad8:	00291900 	eoreq	r1, r9, r0, lsl #18
				val = (word) va_arg (ap, aword);
    2adc:	50000100 	andpl	r0, r0, r0, lsl #2
						[ (val >> i) & 0xf ]);
    2ae0:	00002919 	andeq	r2, r0, r9, lsl r9
    2ae4:	0000291e 	andeq	r2, r0, lr, lsl r9
    2ae8:	1e540001 	cdpne	0, 5, cr0, cr4, cr1, {0}
					outc (__pi_hex_enc_table
    2aec:	28000029 	stmdacs	r0, {r0, r3, r5}
    2af0:	01000029 	tsteq	r0, r9, lsr #32
					if (i == 0)
    2af4:	29285000 	stmdbcs	r8!, {ip, lr}
    2af8:	29e60000 	stmibcs	r6!, {}^	; <UNPREDICTABLE>
				for (i = 12; ; i -= 4) {
    2afc:	00010000 	andeq	r0, r1, r0
				val = (word) va_arg (ap, aword);
    2b00:	0029ea54 	eoreq	lr, r9, r4, asr sl
				if (c == 'd' && (val & 0x8000) != 0) {
    2b04:	0029f000 	eoreq	pc, r9, r0
				val = (word) va_arg (ap, aword);
    2b08:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
				if (c == 'd' && (val & 0x8000) != 0) {
    2b0c:	000029f0 	strdeq	r2, [r0], -r0
    2b10:	000029f3 	strdeq	r2, [r0], -r3
					outc ('-');
    2b14:	08720002 	ldmdaeq	r2!, {r1}^
	...
					val = (~val) + 1;
    2b20:	000029ca 	andeq	r2, r0, sl, asr #19
				for (i = 12; ; i -= 4) {
    2b24:	000029cc 	andeq	r2, r0, ip, asr #19
				enci (10000);
    2b28:	cc500001 	mrrcgt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    2b2c:	e6000029 	str	r0, [r0], -r9, lsr #32
    2b30:	01000029 	tsteq	r0, r9, lsr #32
    2b34:	00005600 	andeq	r5, r0, r0, lsl #12
    2b38:	00000000 	andeq	r0, r0, r0
    2b3c:	2c540000 	mracs	r0, r4, acc0
    2b40:	2c6b0000 	stclcs	0, cr0, [fp], #-0
    2b44:	00010000 	andeq	r0, r1, r0
    2b48:	002c6b50 	eoreq	r6, ip, r0, asr fp
    2b4c:	002c7200 	eoreq	r7, ip, r0, lsl #4
    2b50:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2b54:	00002c72 	andeq	r2, r0, r2, ror ip
    2b58:	00002c74 	andeq	r2, r0, r4, ror ip
    2b5c:	74500001 	ldrbvc	r0, [r0], #-1
    2b60:	8400002c 	strhi	r0, [r0], #-44	; 0xffffffd4
    2b64:	0100002c 	tsteq	r0, ip, lsr #32
    2b68:	2c845400 	cfstrscs	mvf5, [r4], {0}
    2b6c:	2c930000 	ldccs	0, cr0, [r3], {0}
				if (c == 'd' || c == 'u') {
    2b70:	00010000 	andeq	r0, r1, r0
    2b74:	002c9350 	eoreq	r9, ip, r0, asr r3
					if (c == 'd' &&
    2b78:	002ca400 	eoreq	sl, ip, r0, lsl #8
					val = va_arg (ap, lword);
    2b7c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
					if (c == 'd' &&
    2b88:	00002c54 	andeq	r2, r0, r4, asr ip
						outc ('-');
    2b8c:	00002c68 	andeq	r2, r0, r8, ror #24
    2b90:	68510001 	ldmdavs	r1, {r0}^
						val = (~val) + 1;
    2b94:	6b00002c 	blvs	2c4c <__pi_vfparse+0x228>
				enci (10000);
    2b98:	0100002c 	tsteq	r0, ip, lsr #32
					enci (1000000000UL);
    2b9c:	2c6b5200 	sfmcs	f5, 2, [fp], #-0
    2ba0:	2c720000 	ldclcs	0, cr0, [r2], #-0
    2ba4:	00010000 	andeq	r0, r1, r0
    2ba8:	002c7256 	eoreq	r7, ip, r6, asr r2
    2bac:	002c7700 	eoreq	r7, ip, r0, lsl #14
    2bb0:	51000100 	mrspl	r0, (UNDEF: 16)
    2bb4:	00002c77 	andeq	r2, r0, r7, ror ip
    2bb8:	00002ca4 	andeq	r2, r0, r4, lsr #25
    2bbc:	00560001 	subseq	r0, r6, r1
    2bc0:	00000000 	andeq	r0, r0, r0
    2bc4:	54000000 	strpl	r0, [r0], #-0
    2bc8:	5c00002c 	stcpl	0, cr0, [r0], {44}	; 0x2c
    2bcc:	0100002c 	tsteq	r0, ip, lsr #32
    2bd0:	2c605200 	sfmcs	f5, 2, [r0], #-0
    2bd4:	2c640000 	stclcs	0, cr0, [r4], #-0
    2bd8:	00010000 	andeq	r0, r1, r0
    2bdc:	002c6c52 	eoreq	r6, ip, r2, asr ip
				} else if (c == 'x') {
    2be0:	002c7200 	eoreq	r7, ip, r0, lsl #4
					for (i = 28; ; i -= 4) {
    2be4:	57000100 	strpl	r0, [r0, -r0, lsl #2]
					val = va_arg (ap, lword);
    2be8:	00002c7e 	andeq	r2, r0, lr, ror ip
							[ (val >> i) & 0xf ]);
    2bec:	00002ca4 	andeq	r2, r0, r4, lsr #25
    2bf0:	00570001 	subseq	r0, r7, r1
						outc (__pi_hex_enc_table
    2bf4:	00000000 	andeq	r0, r0, r0
    2bf8:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    2bfc:	a000002c 	andge	r0, r0, ip, lsr #32
						if (i == 0)
    2c00:	0100002c 	tsteq	r0, ip, lsr #32
    2c04:	2ca05500 	cfstr32cs	mvfx5, [r0]
					for (i = 28; ; i -= 4) {
    2c08:	2ca40000 	stccs	0, cr0, [r4]
					outc ('%');
    2c0c:	00010000 	andeq	r0, r1, r0
    2c10:	00000058 	andeq	r0, r0, r8, asr r0
    2c14:	00000000 	andeq	r0, r0, r0
					outc ('l');
    2c18:	002c9800 	eoreq	r9, ip, r0, lsl #16
    2c1c:	002c9c00 	eoreq	r9, ip, r0, lsl #24
				val = (word) va_arg (ap, aword);
    2c20:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				while (*st != '\0') {
    2c2c:	00002a24 	andeq	r2, r0, r4, lsr #20
    2c30:	00002a3e 	andeq	r2, r0, lr, lsr sl
    2c34:	00500001 	subseq	r0, r0, r1
    2c38:	00000000 	andeq	r0, r0, r0
					outc (*st);
    2c3c:	24000000 	strcs	r0, [r0], #-0
    2c40:	3e00002a 	cdpcc	0, 0, cr0, cr0, cr10, {1}
					st++;
    2c44:	0100002a 	tsteq	r0, sl, lsr #32
		c = *fm++;
    2c48:	00005100 	andeq	r5, r0, r0, lsl #2
    2c4c:	00000000 	andeq	r0, r0, r0
    2c50:	2a240000 	bcs	902c58 <__ccfg+0x8e2cb0>
char *vform (char *res, const char *fm, va_list aq) {
    2c54:	2a3e0000 	bcs	f82c5c <__ccfg+0xf62cb4>
    2c58:	00010000 	andeq	r0, r1, r0
	if (res != NULL) {
    2c5c:	002a4e52 	eoreq	r4, sl, r2, asr lr
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2c60:	002a7a00 	eoreq	r7, sl, r0, lsl #20
    2c64:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    2c68:	00002a88 	andeq	r2, r0, r8, lsl #21
}
    2c6c:	00002c46 	andeq	r2, r0, r6, asr #24
    2c70:	00550001 	subseq	r0, r5, r1
	fml = strlen (fm) + 17;
    2c74:	00000000 	andeq	r0, r0, r0
    2c78:	24000000 	strcs	r0, [r0], #-0
    2c7c:	2800002a 	stmdacs	r0, {r1, r3, r5}
	if ((res = (char*) umalloc (fml)) == NULL)
    2c80:	0100002a 	tsteq	r0, sl, lsr #32
    2c84:	2a2a5300 	bcs	a9788c <__ccfg+0xa778e4>
    2c88:	2a2c0000 	bcs	b02c90 <__ccfg+0xae2ce8>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2c8c:	00030000 	andeq	r0, r3, r0
    2c90:	2c049353 	stccs	3, cr9, [r4], {83}	; 0x53
    2c94:	7600002a 	strvc	r0, [r0], -sl, lsr #32
    2c98:	0300002a 	movweq	r0, #42	; 0x2a
		ufree (res);
    2c9c:	04935400 	ldreq	r5, [r3], #1024	; 0x400
		goto Again;
    2ca0:	00002a76 	andeq	r2, r0, r6, ror sl
	if (buf == NULL || fmt == NULL)
    2ca4:	00002aca 	andeq	r2, r0, sl, asr #21
int vscan (const char *buf, const char *fmt, va_list ap) {
    2ca8:	93540003 	cmpls	r4, #3
	if (buf == NULL || fmt == NULL)
    2cac:	002aca04 	eoreq	ip, sl, r4, lsl #20
    2cb0:	002ad600 	eoreq	sp, sl, r0, lsl #12
    2cb4:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
		    	    case 'u': scanu (lword); break;
    2cb8:	2ade0493 	bcs	ff783f0c <_estack+0xdf77ef0c>
			while (isspace (*buf)) buf++;
    2cbc:	2b000000 	blcs	2cc4 <vscan+0x20>
    2cc0:	00030000 	andeq	r0, r3, r0
	while (*fmt != '\0') {
    2cc4:	04049354 	streq	r9, [r4], #-852	; 0xfffffcac
		if (*fmt++ != '%')
    2cc8:	7e00002b 	cdpvc	0, 0, cr0, cr0, cr11, {1}
		switch (*fmt++) {
    2ccc:	0300002b 	movweq	r0, #43	; 0x2b
    2cd0:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    2cd4:	00002b84 	andeq	r2, r0, r4, lsl #23
    2cd8:	00002b98 	muleq	r0, r8, fp
    2cdc:	93540003 	cmpls	r4, #3
    2ce0:	002bde04 	eoreq	sp, fp, r4, lsl #28
    2ce4:	002bea00 	eoreq	lr, fp, r0, lsl #20
}
    2ce8:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
		switch (*fmt++) {
    2cec:	2c0c0493 	cfstrscs	mvf0, [ip], {147}	; 0x93
    2cf0:	2c1e0000 	ldccs	0, cr0, [lr], {-0}
    2cf4:	00030000 	andeq	r0, r3, r0
    2cf8:	22049354 	andcs	r9, r4, #84, 6	; 0x50000001
			while (isspace (*buf)) buf++;
    2cfc:	2a00002c 	bcs	2db4 <vscan+0x110>
    2d00:	0300002c 	movweq	r0, #44	; 0x2c
    2d04:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    2d08:	00002c2e 	andeq	r2, r0, lr, lsr #24
    2d0c:	00002c54 	andeq	r2, r0, r4, asr ip
    2d10:	93540003 	cmpls	r4, #3
			if (*buf == '\0')
    2d14:	00000004 	andeq	r0, r0, r4
			if (*buf != ',') {
    2d18:	00000000 	andeq	r0, r0, r0
			sap = va_arg (ap, char*);
    2d1c:	002a4200 	eoreq	r4, sl, r0, lsl #4
			nc++;
    2d20:	002a4c00 	eoreq	r4, sl, r0, lsl #24
			if (*buf != ',') {
    2d24:	59000100 	stmdbpl	r0, {r8}
				while (!isspace (*buf) && *buf != ',' &&
    2d28:	00002a4c 	andeq	r2, r0, ip, asr #20
    2d2c:	00002a4e 	andeq	r2, r0, lr, asr #20
    2d30:	00720002 	rsbseq	r0, r2, r2
    2d34:	00002a4e 	andeq	r2, r0, lr, asr #20
    2d38:	00002a72 	andeq	r2, r0, r2, ror sl
    2d3c:	7a590001 	bvc	1642d48 <__ccfg+0x1622da0>
    2d40:	8800002a 	stmdahi	r0, {r1, r3, r5}
			while (isspace (*buf)) buf++;
    2d44:	0100002a 	tsteq	r0, sl, lsr #32
    2d48:	2a885900 	bcs	fe219150 <_estack+0xde214150>
    2d4c:	2ac00000 	bcs	ff002d54 <_estack+0xdeffdd54>
    2d50:	00010000 	andeq	r0, r1, r0
    2d54:	002aca58 	eoreq	ip, sl, r8, asr sl
			if (*buf == ',') buf++;
    2d58:	002ada00 	eoreq	sp, sl, r0, lsl #20
    2d5c:	58000100 	stmdapl	r0, {r8}
			*sap = '\0';
    2d60:	00002ada 	ldrdeq	r2, [r0], -sl
			break;
    2d64:	00002ae2 	andeq	r2, r0, r2, ror #21
		    case 'd': scani (word); break;
    2d68:	01720002 	cmneq	r2, r2
    2d6c:	00002b00 	andeq	r2, r0, r0, lsl #22
    2d70:	00002b2a 	andeq	r2, r0, sl, lsr #22
    2d74:	2e580001 	cdpcs	0, 5, cr0, cr8, cr1, {0}
    2d78:	3200002b 	andcc	r0, r0, #43	; 0x2b
    2d7c:	0100002b 	tsteq	r0, fp, lsr #32
    2d80:	2b3c5000 	blcs	f16d88 <__ccfg+0xef6de0>
    2d84:	2b460000 	blcs	1182d8c <__ccfg+0x1162de4>
    2d88:	00010000 	andeq	r0, r1, r0
    2d8c:	002b6650 	eoreq	r6, fp, r0, asr r6
    2d90:	002b6800 	eoreq	r6, fp, r0, lsl #16
    2d94:	50000100 	andpl	r0, r0, r0, lsl #2
    2d98:	00002b6e 	andeq	r2, r0, lr, ror #22
    2d9c:	00002b70 	andeq	r2, r0, r0, ror fp
    2da0:	70580001 	subsvc	r0, r8, r1
    2da4:	9300002b 	movwls	r0, #43	; 0x2b
    2da8:	0100002b 	tsteq	r0, fp, lsr #32
    2dac:	2ba25300 	blcs	fe8979b4 <_estack+0xde8929b4>
    2db0:	2ba60000 	blcs	fe982db8 <_estack+0xde97ddb8>
    2db4:	00010000 	andeq	r0, r1, r0
    2db8:	002bb059 	eoreq	fp, fp, r9, asr r0
    2dbc:	002bd000 	eoreq	sp, fp, r0
    2dc0:	59000100 	stmdbpl	r0, {r8}
    2dc4:	00002bd6 	ldrdeq	r2, [r0], -r6
    2dc8:	00002bd8 	ldrdeq	r2, [r0], -r8
    2dcc:	de590001 	cdple	0, 5, cr0, cr9, cr1, {0}
    2dd0:	ec00002b 	stc	0, cr0, [r0], {43}	; 0x2b
    2dd4:	0100002b 	tsteq	r0, fp, lsr #32
		    case 'u': scanu (word); break;
    2dd8:	2c0c5300 	stccs	3, cr5, [ip], {-0}
    2ddc:	2c150000 	ldccs	0, cr0, [r5], {-0}
    2de0:	00010000 	andeq	r0, r1, r0
    2de4:	002c1e53 	eoreq	r1, ip, r3, asr lr
    2de8:	002c3200 	eoreq	r3, ip, r0, lsl #4
    2dec:	58000100 	stmdapl	r0, {r8}
    2df0:	00002c46 	andeq	r2, r0, r6, asr #24
    2df4:	00002c54 	andeq	r2, r0, r4, asr ip
    2df8:	00590001 	subseq	r0, r9, r1
    2dfc:	00000000 	andeq	r0, r0, r0
    2e00:	e2000000 	and	r0, r0, #0
    2e04:	0000002a 	andeq	r0, r0, sl, lsr #32
    2e08:	0100002b 	tsteq	r0, fp, lsr #32
    2e0c:	00005800 	andeq	r5, r0, r0, lsl #16
    2e10:	00000000 	andeq	r0, r0, r0
    2e14:	2b0c0000 	blcs	302e1c <__ccfg+0x2e2e74>
    2e18:	2b200000 	blcs	802e20 <__ccfg+0x7e2e78>
    2e1c:	00010000 	andeq	r0, r1, r0
		    case 'x': scanx (word); break;
    2e20:	002b2459 	eoreq	r2, fp, r9, asr r4
    2e24:	002b5200 	eoreq	r5, fp, r0, lsl #4
    2e28:	59000100 	stmdbpl	r0, {r8}
    2e2c:	00002b5a 	andeq	r2, r0, sl, asr fp
    2e30:	00002b6e 	andeq	r2, r0, lr, ror #22
    2e34:	00590001 	subseq	r0, r9, r1
    2e38:	00000000 	andeq	r0, r0, r0
    2e3c:	2a000000 	bcs	2e44 <vscan+0x1a0>
    2e40:	5c00002b 	stcpl	0, cr0, [r0], {43}	; 0x2b
    2e44:	0100002b 	tsteq	r0, fp, lsr #32
    2e48:	2b5c5800 	blcs	1718e50 <__ccfg+0x16f8ea8>
    2e4c:	2b680000 	blcs	1a02e54 <__ccfg+0x19e2eac>
    2e50:	00010000 	andeq	r0, r1, r0
    2e54:	002b6853 	eoreq	r6, fp, r3, asr r8
    2e58:	002b6e00 	eoreq	r6, fp, r0, lsl #28
    2e5c:	58000100 	stmdapl	r0, {r8}
	...
    2e68:	00002b98 	muleq	r0, r8, fp
    2e6c:	00002bde 	ldrdeq	r2, [r0], -lr
    2e70:	005a0001 	subseq	r0, sl, r1
    2e74:	00000000 	andeq	r0, r0, r0
    2e78:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    2e7c:	c800002b 	stmdagt	r0, {r0, r1, r3, r5}
    2e80:	0100002b 	tsteq	r0, fp, lsr #32
    2e84:	2bc85800 	blcs	ff218e8c <_estack+0xdf213e8c>
    2e88:	2bd80000 	blcs	ff602e90 <_estack+0xdf5fde90>
    2e8c:	00010000 	andeq	r0, r1, r0
    2e90:	002bd853 	eoreq	sp, fp, r3, asr r8
    2e94:	002bde00 	eoreq	sp, fp, r0, lsl #28
			switch (*fmt++) {
    2e98:	58000100 	stmdapl	r0, {r8}
	...
    2ea4:	00002bec 	andeq	r2, r0, ip, ror #23
    2ea8:	00002c0c 	andeq	r2, r0, ip, lsl #24
    2eac:	00580001 	subseq	r0, r8, r1
		    	    case 'd': scani (lword); break;
    2eb0:	00000000 	andeq	r0, r0, r0
    2eb4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2eb8:	2200002c 	andcs	r0, r0, #44	; 0x2c
    2ebc:	0200002c 	andeq	r0, r0, #44	; 0x2c
    2ec0:	22007400 	andcs	r7, r0, #0, 8
    2ec4:	2a00002c 	bcs	2f7c <vscan+0x2d8>
    2ec8:	0200002c 	andeq	r0, r0, #44	; 0x2c
    2ecc:	007c7400 	rsbseq	r7, ip, r0, lsl #8
    2ed0:	00000000 	andeq	r0, r0, r0
    2ed4:	36000000 	strcc	r0, [r0], -r0
    2ed8:	4400002c 	strmi	r0, [r0], #-44	; 0xffffffd4
    2edc:	0100002c 	tsteq	r0, ip, lsr #32
    2ee0:	00005800 	andeq	r5, r0, r0, lsl #16
    2ee4:	00000000 	andeq	r0, r0, r0
    2ee8:	2ca40000 	stccs	0, cr0, [r4]
    2eec:	2cc00000 	stclcs	0, cr0, [r0], {0}
    2ef0:	00010000 	andeq	r0, r1, r0
    2ef4:	002cfe50 	eoreq	pc, ip, r0, asr lr	; <UNPREDICTABLE>
    2ef8:	002d1000 	eoreq	r1, sp, r0
    2efc:	53000100 	movwpl	r0, #256	; 0x100
    2f00:	00002d10 	andeq	r2, r0, r0, lsl sp
    2f04:	00002d24 	andeq	r2, r0, r4, lsr #26
    2f08:	26560001 	ldrbcs	r0, [r6], -r1
		    	    case 'x': scanx (lword); break;
    2f0c:	4200002d 	andmi	r0, r0, #45	; 0x2d
    2f10:	0100002d 	tsteq	r0, sp, lsr #32
    2f14:	2d545600 	ldclcs	6, cr5, [r4, #-0]
    2f18:	2d600000 	stclcs	0, cr0, [r0, #-0]
    2f1c:	00010000 	andeq	r0, r1, r0
    2f20:	002d6056 	eoreq	r6, sp, r6, asr r0
    2f24:	002d6600 	eoreq	r6, sp, r0, lsl #12
    2f28:	53000100 	movwpl	r0, #256	; 0x100
    2f2c:	00002d6c 	andeq	r2, r0, ip, ror #26
    2f30:	00002d70 	andeq	r2, r0, r0, ror sp
    2f34:	70530001 	subsvc	r0, r3, r1
    2f38:	8000002d 	andhi	r0, r0, sp, lsr #32
    2f3c:	0100002d 	tsteq	r0, sp, lsr #32
    2f40:	2d805e00 	stccs	14, cr5, [r0]
    2f44:	2d960000 	ldccs	0, cr0, [r6]
    2f48:	00010000 	andeq	r0, r1, r0
    2f4c:	002d9653 	eoreq	r9, sp, r3, asr r6
    2f50:	002d9e00 	eoreq	r9, sp, r0, lsl #28
    2f54:	5e000100 	adfpls	f0, f0, f0
    2f58:	00002da4 	andeq	r2, r0, r4, lsr #27
    2f5c:	00002dc0 	andeq	r2, r0, r0, asr #27
    2f60:	c0530001 	subsgt	r0, r3, r1
    2f64:	c600002d 	strgt	r0, [r0], -sp, lsr #32
    2f68:	0100002d 	tsteq	r0, sp, lsr #32
    2f6c:	2dc65e00 	stclcs	14, cr5, [r6]
    2f70:	2dc80000 	stclcs	0, cr0, [r8]
    2f74:	00010000 	andeq	r0, r1, r0
    2f78:	002dd453 	eoreq	sp, sp, r3, asr r4
		    	    case 'd': scani (lword); break;
    2f7c:	002dd600 	eoreq	sp, sp, r0, lsl #12
    2f80:	5e000100 	adfpls	f0, f0, f0
    2f84:	00002dd6 	ldrdeq	r2, [r0], -r6
    2f88:	00002dea 	andeq	r2, r0, sl, ror #27
    2f8c:	ea530001 	b	14c2f98 <__ccfg+0x14a2ff0>
    2f90:	fa00002d 	blx	304c <SafeHapiVoid+0x18>
    2f94:	0100002d 	tsteq	r0, sp, lsr #32
		    	    case 'u': scanu (lword); break;
    2f98:	2dfa5600 	ldclcs	6, cr5, [sl]
    2f9c:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
    2fa0:	00010000 	andeq	r0, r1, r0
    2fa4:	002e1c53 	eoreq	r1, lr, r3, asr ip
    2fa8:	002e1e00 	eoreq	r1, lr, r0, lsl #28
    2fac:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2fb0:	00002e1e 	andeq	r2, r0, lr, lsl lr
    2fb4:	00002e36 	andeq	r2, r0, r6, lsr lr
    2fb8:	36530001 	ldrbcc	r0, [r3], -r1
    2fbc:	5000002e 	andpl	r0, r0, lr, lsr #32
    2fc0:	0100002e 	tsteq	r0, lr, lsr #32
    2fc4:	2e565600 	cdpcs	6, 5, cr5, cr6, cr0, {0}
    2fc8:	2e780000 	cdpcs	0, 7, cr0, cr8, cr0, {0}
    2fcc:	00010000 	andeq	r0, r1, r0
    2fd0:	002e7853 	eoreq	r7, lr, r3, asr r8
    2fd4:	002e8a00 	eoreq	r8, lr, r0, lsl #20
    2fd8:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2fdc:	00002eb0 			; <UNDEFINED> instruction: 0x00002eb0
		    	    case 'x': scanx (lword); break;
    2fe0:	00002eb4 			; <UNDEFINED> instruction: 0x00002eb4
    2fe4:	b4530001 	ldrblt	r0, [r3], #-1
			if ((c = *buf++) == '\0')
    2fe8:	c400002e 	strgt	r0, [r0], #-46	; 0xffffffd2
    2fec:	0100002e 	tsteq	r0, lr, lsr #32
			sap = va_arg (ap, char*);
    2ff0:	2ec45800 	cdpcs	8, 12, cr5, cr4, cr0, {0}
			nc++;
    2ff4:	2ed40000 	cdpcs	0, 13, cr0, cr4, cr0, {0}
			break;
    2ff8:	00010000 	andeq	r0, r1, r0
			while (isspace (*buf)) buf++;
    2ffc:	002ed453 	eoreq	sp, lr, r3, asr r4
    3000:	002ede00 	eoreq	sp, lr, r0, lsl #28
    3004:	58000100 	stmdapl	r0, {r8}
						*sap++ = *buf++;
    3008:	00002ee4 	andeq	r2, r0, r4, ror #29
    300c:	00002f06 	andeq	r2, r0, r6, lsl #30
			while (isspace (*buf)) buf++;
    3010:	0c530001 	mrrceq	0, 0, r0, r3, cr1
    3014:	1c00002f 	stcne	0, cr0, [r0], {47}	; 0x2f
    3018:	0100002f 	tsteq	r0, pc, lsr #32
		return 0;
    301c:	2f1c5300 	svccs	0x001c5300
    3020:	2f360000 	svccs	0x00360000
		    case 'x': scanx (word); break;
    3024:	00010000 	andeq	r0, r1, r0
    3028:	002f3c56 	eoreq	r3, pc, r6, asr ip	; <UNPREDICTABLE>
		    	    case 'x': scanx (lword); break;
    302c:	002f5c00 	eoreq	r5, pc, r0, lsl #24
    3030:	53000100 	movwpl	r0, #256	; 0x100
    3034:	00002f5c 	andeq	r2, r0, ip, asr pc
    3038:	00002f6e 	andeq	r2, r0, lr, ror #30
    303c:	82560001 	subshi	r0, r6, #1
    3040:	8600002f 	strhi	r0, [r0], -pc, lsr #32
    3044:	0100002f 	tsteq	r0, pc, lsr #32
    3048:	2f865800 	svccs	0x00865800
    304c:	2f8a0000 	svccs	0x008a0000
    3050:	00010000 	andeq	r0, r1, r0
    3054:	002f9453 	eoreq	r9, pc, r3, asr r4	; <UNPREDICTABLE>
    3058:	002f9600 	eoreq	r9, pc, r0, lsl #12
    305c:	58000100 	stmdapl	r0, {r8}
    3060:	00002f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
    3064:	00002fac 	andeq	r2, r0, ip, lsr #31
    3068:	ac530001 	mrrcge	0, 0, r0, r3, cr1
    306c:	bc00002f 	stclt	0, cr0, [r0], {47}	; 0x2f
    3070:	0100002f 	tsteq	r0, pc, lsr #32
    3074:	2fbc5600 	svccs	0x00bc5600
    3078:	2fd20000 	svccs	0x00d20000
    307c:	00010000 	andeq	r0, r1, r0
    3080:	002fdc53 	eoreq	sp, pc, r3, asr ip	; <UNPREDICTABLE>
    3084:	002fde00 	eoreq	sp, pc, r0, lsl #28
    3088:	56000100 	strpl	r0, [r0], -r0, lsl #2
    308c:	00002fde 	ldrdeq	r2, [r0], -lr
    3090:	00002fe6 	andeq	r2, r0, r6, ror #31
    3094:	ea530001 	b	14c30a0 <__ccfg+0x14a30f8>
    3098:	fa00002f 	blx	315c <NOROM_OSCHF_TurnOnXosc>
    309c:	0100002f 	tsteq	r0, pc, lsr #32
    30a0:	2ffa5300 	svccs	0x00fa5300
    30a4:	30080000 	andcc	r0, r8, r0
    30a8:	00010000 	andeq	r0, r1, r0
    30ac:	00300856 	eorseq	r0, r0, r6, asr r8
    30b0:	00300e00 	eorseq	r0, r0, r0, lsl #28
    30b4:	58000100 	stmdapl	r0, {r8}
    30b8:	0000300e 	andeq	r3, r0, lr
    30bc:	0000301a 	andeq	r3, r0, sl, lsl r0
    30c0:	1a560001 	bne	15830cc <__ccfg+0x1563124>
    30c4:	22000030 	andcs	r0, r0, #48	; 0x30
    30c8:	01000030 	tsteq	r0, r0, lsr r0
    30cc:	30225000 	eorcc	r5, r2, r0
    30d0:	30340000 	eorscc	r0, r4, r0
    30d4:	00010000 	andeq	r0, r1, r0
    30d8:	00000053 	andeq	r0, r0, r3, asr r0
    30dc:	00000000 	andeq	r0, r0, r0
    30e0:	002ca400 	eoreq	sl, ip, r0, lsl #8
    30e4:	002cc200 	eoreq	ip, ip, r0, lsl #4
    30e8:	51000100 	mrspl	r0, (UNDEF: 16)
    30ec:	00002cc2 	andeq	r2, r0, r2, asr #25
    30f0:	00002cc8 	andeq	r2, r0, r8, asr #25
    30f4:	c8560001 	ldmdagt	r6, {r0}^
    30f8:	e600002c 	str	r0, [r0], -ip, lsr #32
    30fc:	0100002c 	tsteq	r0, ip, lsr #32
    3100:	2cec5100 	stfcse	f5, [ip]
    3104:	30340000 	eorscc	r0, r4, r0
    3108:	00010000 	andeq	r0, r1, r0
    310c:	00000051 	andeq	r0, r0, r1, asr r0
    3110:	00000000 	andeq	r0, r0, r0
    3114:	002ca400 	eoreq	sl, ip, r0, lsl #8
    3118:	002ca400 	eoreq	sl, ip, r0, lsl #8
    311c:	52000100 	andpl	r0, r0, #0, 2
    3120:	00002ca4 	andeq	r2, r0, r4, lsr #25
    3124:	00002cc0 	andeq	r2, r0, r0, asr #25
    3128:	93520003 	cmpls	r2, #3
    312c:	002d6604 	eoreq	r6, sp, r4, lsl #12
    3130:	002d9a00 	eoreq	r9, sp, r0, lsl #20
    3134:	52000100 	andpl	r0, r0, #0, 2
    3138:	00002dc0 	andeq	r2, r0, r0, asr #27
    313c:	00002dc6 	andeq	r2, r0, r6, asr #27
    3140:	d6520001 	ldrble	r0, [r2], -r1
    3144:	f000002d 			; <UNDEFINED> instruction: 0xf000002d
    3148:	0100002d 	tsteq	r0, sp, lsr #32
    314c:	2e1e5200 	cdpcs	2, 1, cr5, cr14, cr0, {0}
    3150:	2e460000 	cdpcs	0, 4, cr0, cr6, cr0, {0}
    3154:	00010000 	andeq	r0, r1, r0
    3158:	002e9852 	eoreq	r9, lr, r2, asr r8
    315c:	002ed800 	eoreq	sp, lr, r0, lsl #16
    3160:	52000100 	andpl	r0, r0, #0, 2
    3164:	00002f06 	andeq	r2, r0, r6, lsl #30
    3168:	00002f2c 	andeq	r2, r0, ip, lsr #30
    316c:	7c520001 	mrrcvc	0, 0, r0, r2, cr1
    3170:	8600002f 	strhi	r0, [r0], -pc, lsr #32
    3174:	0100002f 	tsteq	r0, pc, lsr #32
    3178:	2f965200 	svccs	0x00965200
    317c:	2fb20000 	svccs	0x00b20000
    3180:	00010000 	andeq	r0, r1, r0
    3184:	002fde52 	eoreq	sp, pc, r2, asr lr	; <UNPREDICTABLE>
    3188:	002ff400 	eoreq	pc, pc, r0, lsl #8
    318c:	52000100 	andpl	r0, r0, #0, 2
    3190:	00002ffa 	strdeq	r2, [r0], -sl
    3194:	00003008 	andeq	r3, r0, r8
    3198:	1a520001 	bne	14831a4 <__ccfg+0x14631fc>
    319c:	22000030 	andcs	r0, r0, #48	; 0x30
    31a0:	01000030 	tsteq	r0, r0, lsr r0
    31a4:	00005200 	andeq	r5, r0, r0, lsl #4
    31a8:	00000000 	andeq	r0, r0, r0
    31ac:	2d220000 	stccs	0, cr0, [r2, #-0]
    31b0:	2d240000 	stccs	0, cr0, [r4, #-0]
    31b4:	00010000 	andeq	r0, r1, r0
    31b8:	002d9c54 	eoreq	r9, sp, r4, asr ip
    31bc:	002dc000 	eoreq	ip, sp, r0
    31c0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    31c4:	00002dc6 	andeq	r2, r0, r6, asr #27
    31c8:	00002dd6 	ldrdeq	r2, [r0], -r6
    31cc:	f2540001 	vhadd.s16	d16, d4, d1
    31d0:	1e00002d 	cdpne	0, 0, cr0, cr0, cr13, {1}
    31d4:	0100002e 	tsteq	r0, lr, lsr #32
    31d8:	2e485400 	cdpcs	4, 4, cr5, cr8, cr0, {0}
    31dc:	2e980000 	cdpcs	0, 9, cr0, cr8, cr0, {0}
    31e0:	00010000 	andeq	r0, r1, r0
    31e4:	002eda54 	eoreq	sp, lr, r4, asr sl
    31e8:	002f0600 	eoreq	r0, pc, r0, lsl #12
    31ec:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    31f0:	00002f2e 	andeq	r2, r0, lr, lsr #30
    31f4:	00002f7c 	andeq	r2, r0, ip, ror pc
    31f8:	86540001 	ldrbhi	r0, [r4], -r1
    31fc:	9600002f 	strls	r0, [r0], -pc, lsr #32
    3200:	0100002f 	tsteq	r0, pc, lsr #32
    3204:	2fb45400 	svccs	0x00b45400
    3208:	2fde0000 	svccs	0x00de0000
    320c:	00010000 	andeq	r0, r1, r0
    3210:	002ff654 	eoreq	pc, pc, r4, asr r6	; <UNPREDICTABLE>
    3214:	002ffa00 	eoreq	pc, pc, r0, lsl #20
    3218:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    321c:	00003022 	andeq	r3, r0, r2, lsr #32
    3220:	00003034 	andeq	r3, r0, r4, lsr r0
    3224:	00540001 	subseq	r0, r4, r1
    3228:	00000000 	andeq	r0, r0, r0
    322c:	96000000 	strls	r0, [r0], -r0
    3230:	c000002d 	andgt	r0, r0, sp, lsr #32
    3234:	0100002d 	tsteq	r0, sp, lsr #32
    3238:	2dc65800 	stclcs	8, cr5, [r6]
    323c:	2dd60000 	ldclcs	0, cr0, [r6]
    3240:	00010000 	andeq	r0, r1, r0
    3244:	00000058 	andeq	r0, r0, r8, asr r0
    3248:	00000000 	andeq	r0, r0, r0
    324c:	002e7800 	eoreq	r7, lr, r0, lsl #16
    3250:	002e8a00 	eoreq	r8, lr, r0, lsl #20
    3254:	59000100 	stmdbpl	r0, {r8}
    3258:	00002e8a 	andeq	r2, r0, sl, lsl #29
    325c:	00002e92 	muleq	r0, r2, lr
    3260:	00500001 	subseq	r0, r0, r1
    3264:	00000000 	andeq	r0, r0, r0
    3268:	d4000000 	strle	r0, [r0], #-0
    326c:	fe00002e 	cdp2	0, 0, cr0, cr0, cr14, {1}
    3270:	0100002e 	tsteq	r0, lr, lsr #32
    3274:	2f865000 	svccs	0x00865000
    3278:	2f960000 	svccs	0x00960000
    327c:	00010000 	andeq	r0, r1, r0
    3280:	00000050 	andeq	r0, r0, r0, asr r0
    3284:	00000000 	andeq	r0, r0, r0
    3288:	002f5c00 	eoreq	r5, pc, r0, lsl #24
    328c:	002f6e00 	eoreq	r6, pc, r0, lsl #28
    3290:	59000100 	stmdbpl	r0, {r8}
    3294:	00002f6e 	andeq	r2, r0, lr, ror #30
    3298:	00002f76 	andeq	r2, r0, r6, ror pc
    329c:	00500001 	subseq	r0, r0, r1
    32a0:	00000000 	andeq	r0, r0, r0
    32a4:	ea000000 	b	32ac <NOROM_RFCRfTrimRead+0x30>
    32a8:	fa00002f 	blx	336c <NOROM_RFCRfTrimRead+0xf0>
    32ac:	0100002f 	tsteq	r0, pc, lsr #32
    32b0:	00005000 	andeq	r5, r0, r0
    32b4:	00000000 	andeq	r0, r0, r0
    32b8:	2d260000 	stccs	0, cr0, [r6, #-0]
    32bc:	2d420000 	stclcs	0, cr0, [r2, #-0]
    32c0:	00010000 	andeq	r0, r1, r0
    32c4:	00300c5e 	eorseq	r0, r0, lr, asr ip
    32c8:	00300e00 	eorseq	r0, r0, r0, lsl #28
    32cc:	5e000100 	adfpls	f0, f0, f0
	...
    32d8:	00003034 	andeq	r3, r0, r4, lsr r0
    32dc:	0000303b 	andeq	r3, r0, fp, lsr r0
    32e0:	3b500001 	blcc	14032ec <__ccfg+0x13e3344>
    32e4:	52000030 	andpl	r0, r0, #48	; 0x30
    32e8:	01000030 	tsteq	r0, r0, lsr r0
    32ec:	30525600 	subscc	r5, r2, r0, lsl #12
    32f0:	30560000 	subscc	r0, r6, r0
    32f4:	00040000 	andeq	r0, r4, r0
    32f8:	9f5001f3 	svcls	0x005001f3
    32fc:	00003056 	andeq	r3, r0, r6, asr r0
    3300:	00003058 	andeq	r3, r0, r8, asr r0
    3304:	58560001 	ldmdapl	r6, {r0}^
    3308:	5c000030 	stcpl	0, cr0, [r0], {48}	; 0x30
    330c:	04000030 	streq	r0, [r0], #-48	; 0xffffffd0
    3310:	5001f300 	andpl	pc, r1, r0, lsl #6
    3314:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3318:	00000000 	andeq	r0, r0, r0
    331c:	00303e00 	eorseq	r3, r0, r0, lsl #28
    3320:	00304700 	eorseq	r4, r0, r0, lsl #14
    3324:	70000500 	andvc	r0, r0, r0, lsl #10
    3328:	9f293000 	svcls	0x00293000
    332c:	00003047 	andeq	r3, r0, r7, asr #32
    3330:	00003052 	andeq	r3, r0, r2, asr r0
    3334:	00750005 	rsbseq	r0, r5, r5
    3338:	569f2930 			; <UNDEFINED> instruction: 0x569f2930
    333c:	58000030 	stmdapl	r0, {r4, r5}
    3340:	05000030 	streq	r0, [r0, #-48]	; 0xffffffd0
    3344:	30007500 	andcc	r7, r0, r0, lsl #10
    3348:	00009f29 	andeq	r9, r0, r9, lsr #30
	...
    3358:	00010000 	andeq	r0, r1, r0
    335c:	00000050 	andeq	r0, r0, r0, asr r0
    3360:	00000000 	andeq	r0, r0, r0
    3364:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    3370:	01f30004 	mvnseq	r0, r4
    3374:	00009f50 	andeq	r9, r0, r0, asr pc
    3378:	00000000 	andeq	r0, r0, r0
    337c:	00010000 	andeq	r0, r1, r0
    3380:	00000056 	andeq	r0, r0, r6, asr r0
    3384:	00000000 	andeq	r0, r0, r0
    3388:	f3000400 	vshl.u8	d0, d0, d0
    338c:	009f5001 	addseq	r5, pc, r1
	...
    339c:	01000000 	mrseq	r0, (UNDEF: 0)
    33a0:	00005100 	andeq	r5, r0, r0, lsl #2
    33a4:	00000000 	andeq	r0, r0, r0
    33a8:	00040000 	andeq	r0, r4, r0
    33ac:	9f5101f3 	svcls	0x005101f3
	...
    33c0:	00700005 	rsbseq	r0, r0, r5
    33c4:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
    33c8:	00000000 	andeq	r0, r0, r0
    33cc:	05000000 	streq	r0, [r0, #-0]
    33d0:	30007500 	andcc	r7, r0, r0, lsl #10
    33d4:	00009f29 	andeq	r9, r0, r9, lsr #30
    33d8:	00000000 	andeq	r0, r0, r0
    33dc:	00050000 	andeq	r0, r5, r0
    33e0:	29300075 	ldmdbcs	r0!, {r0, r2, r4, r5, r6}
    33e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    33e8:	00000000 	andeq	r0, r0, r0
    33ec:	00306000 	eorseq	r6, r0, r0
    33f0:	00307200 	eorseq	r7, r0, r0, lsl #4
    33f4:	70000700 	andvc	r0, r0, r0, lsl #14
    33f8:	3f243f00 	svccc	0x00243f00
    33fc:	00009f26 	andeq	r9, r0, r6, lsr #30
    3400:	00000000 	andeq	r0, r0, r0
    3404:	30680000 	rsbcc	r0, r8, r0
    3408:	30700000 	rsbscc	r0, r0, r0
    340c:	000d0000 	andeq	r0, sp, r0
    3410:	717a8072 	cmnvc	sl, r2, ror r0
    3414:	48244800 	stmdami	r4!, {fp, lr}
    3418:	26341e26 	ldrtcs	r1, [r4], -r6, lsr #28
    341c:	0030709f 	mlaseq	r0, pc, r0, r7	; <UNPREDICTABLE>
    3420:	00308c00 	eorseq	r8, r0, r0, lsl #24
    3424:	71000c00 	tstvc	r0, r0, lsl #24
    3428:	48244800 	stmdami	r4!, {fp, lr}
    342c:	1e007226 	cdpne	2, 0, cr7, cr0, cr6, {1}
    3430:	009f2634 	addseq	r2, pc, r4, lsr r6	; <UNPREDICTABLE>
    3434:	00000000 	andeq	r0, r0, r0
    3438:	92000000 	andls	r0, r0, #0
    343c:	9c000030 	stcls	0, cr0, [r0], {48}	; 0x30
    3440:	01000030 	tsteq	r0, r0, lsr r0
    3444:	00005300 	andeq	r5, r0, r0, lsl #6
    3448:	00000000 	andeq	r0, r0, r0
    344c:	30940000 	addscc	r0, r4, r0
    3450:	30a00000 	adccc	r0, r0, r0
    3454:	00010000 	andeq	r0, r1, r0
    3458:	00000050 	andeq	r0, r0, r0, asr r0
    345c:	00000000 	andeq	r0, r0, r0
    3460:	0030d400 	eorseq	sp, r0, r0, lsl #8
    3464:	0030ec00 	eorseq	lr, r0, r0, lsl #24
    3468:	50000100 	andpl	r0, r0, r0, lsl #2
    346c:	000030ec 	andeq	r3, r0, ip, ror #1
    3470:	00003126 	andeq	r3, r0, r6, lsr #2
    3474:	26550001 	ldrbcs	r0, [r5], -r1
    3478:	30000031 	andcc	r0, r0, r1, lsr r0
    347c:	04000031 	streq	r0, [r0], #-49	; 0xffffffcf
    3480:	5001f300 	andpl	pc, r1, r0, lsl #6
    3484:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3488:	00000000 	andeq	r0, r0, r0
    348c:	0030d400 	eorseq	sp, r0, r0, lsl #8
    3490:	0030da00 	eorseq	sp, r0, r0, lsl #20
    3494:	51000100 	mrspl	r0, (UNDEF: 16)
    3498:	000030da 	ldrdeq	r3, [r0], -sl
    349c:	00003112 	andeq	r3, r0, r2, lsl r1
    34a0:	12540001 	subsne	r0, r4, #1
    34a4:	30000031 	andcc	r0, r0, r1, lsr r0
    34a8:	04000031 	streq	r0, [r0], #-49	; 0xffffffcf
    34ac:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    34b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    34b4:	00000000 	andeq	r0, r0, r0
    34b8:	00310e00 	eorseq	r0, r1, r0, lsl #28
    34bc:	00312200 	eorseq	r2, r1, r0, lsl #4
    34c0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    34cc:	0000310e 	andeq	r3, r0, lr, lsl #2
    34d0:	00003112 	andeq	r3, r0, r2, lsl r1
    34d4:	12540001 	subsne	r0, r4, #1
    34d8:	22000031 	andcs	r0, r0, #49	; 0x31
    34dc:	04000031 	streq	r0, [r0], #-49	; 0xffffffcf
    34e0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    34e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    34e8:	00000000 	andeq	r0, r0, r0
    34ec:	00313000 	eorseq	r3, r1, r0
    34f0:	00314e00 	eorseq	r4, r1, r0, lsl #28
    34f4:	50000100 	andpl	r0, r0, r0, lsl #2
    34f8:	0000314e 	andeq	r3, r0, lr, asr #2
    34fc:	0000315c 	andeq	r3, r0, ip, asr r1
    3500:	01f30004 	mvnseq	r0, r4
    3504:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3514:	00010000 	andeq	r0, r1, r0
    3518:	00000050 	andeq	r0, r0, r0, asr r0
    351c:	00000000 	andeq	r0, r0, r0
    3520:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    352c:	01f30004 	mvnseq	r0, r4
    3530:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3540:	00010000 	andeq	r0, r1, r0
    3544:	00000055 	andeq	r0, r0, r5, asr r0
	...
    3554:	70000700 	andvc	r0, r0, r0, lsl #14
    3558:	1c007300 	stcne	3, cr7, [r0], {-0}
    355c:	00009f19 	andeq	r9, r0, r9, lsl pc
    3560:	00000000 	andeq	r0, r0, r0
    3564:	00040000 	andeq	r0, r4, r0
    3568:	9f190070 	svcls	0x00190070
	...
    357c:	d00a0004 	andle	r0, sl, r4
    3580:	00009f07 	andeq	r9, r0, r7, lsl #30
    3584:	00000000 	andeq	r0, r0, r0
    3588:	00010000 	andeq	r0, r1, r0
    358c:	00000050 	andeq	r0, r0, r0, asr r0
    3590:	00000000 	andeq	r0, r0, r0
    3594:	72000500 	andvc	r0, r0, #0, 10
    3598:	9f254000 	svcls	0x00254000
	...
    35a4:	00500001 	subseq	r0, r0, r1
    35a8:	00000000 	andeq	r0, r0, r0
    35ac:	04000000 	streq	r0, [r0], #-0
    35b0:	07d00a00 	ldrbeq	r0, [r0, r0, lsl #20]
    35b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    35b8:	00000000 	andeq	r0, r0, r0
    35bc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    35c8:	000031ae 	andeq	r3, r0, lr, lsr #3
    35cc:	000031ba 			; <UNDEFINED> instruction: 0x000031ba
    35d0:	00500001 	subseq	r0, r0, r1
    35d4:	00000000 	andeq	r0, r0, r0
    35d8:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    35dc:	ba000031 	blt	36a8 <NOROM_SetupSetVddrLevel+0x10>
    35e0:	01000031 	tsteq	r0, r1, lsr r0
    35e4:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    35f4:	00010000 	andeq	r0, r1, r0
    35f8:	00000050 	andeq	r0, r0, r0, asr r0
    35fc:	00000000 	andeq	r0, r0, r0
    3600:	70000300 	andvc	r0, r0, r0, lsl #6
    3604:	00009f1b 	andeq	r9, r0, fp, lsl pc
    3608:	00000000 	andeq	r0, r0, r0
    360c:	00040000 	andeq	r0, r4, r0
    3610:	9f5001f3 	svcls	0x005001f3
	...
    3624:	00740007 	rsbseq	r0, r4, r7
    3628:	26482448 	strbcs	r2, [r8], -r8, asr #8
    362c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    363c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3648:	01f30006 	mvnseq	r0, r6
    364c:	9f1c4b50 	svcls	0x001c4b50
	...
    3660:	00550001 	subseq	r0, r5, r1
    3664:	00000000 	andeq	r0, r0, r0
    3668:	0c000000 	stceq	0, cr0, [r0], {-0}
    366c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3670:	01f31c4b 	mvnseq	r1, fp, asr #24
    3674:	1e1c4b50 			; <UNDEFINED> instruction: 0x1e1c4b50
    3678:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3688:	71002c00 	tstvc	r0, r0, lsl #24
    368c:	71264000 			; <UNDEFINED> instruction: 0x71264000
    3690:	48244000 	stmdami	r4!, {lr}
    3694:	1e007026 	cdpne	0, 0, cr7, cr0, cr6, {1}
    3698:	71222633 			; <UNDEFINED> instruction: 0x71222633
    369c:	48244800 	stmdami	r4!, {fp, lr}
    36a0:	1e007526 	cfsh32ne	mvfx7, mvfx0, #22
    36a4:	7422263a 	strtvc	r2, [r2], #-1594	; 0xfffff9c6
    36a8:	48244800 	stmdami	r4!, {fp, lr}
    36ac:	1e007526 	cfsh32ne	mvfx7, mvfx0, #22
    36b0:	421e0070 	andsmi	r0, lr, #112	; 0x70
    36b4:	009f2226 	addseq	r2, pc, r6, lsr #4
    36b8:	00000000 	andeq	r0, r0, r0
    36bc:	32000000 	andcc	r0, r0, #0
    36c0:	40007100 	andmi	r7, r0, r0, lsl #2
    36c4:	5001f326 	andpl	pc, r1, r6, lsr #6
    36c8:	00711c4b 	rsbseq	r1, r1, fp, asr #24
    36cc:	26482440 	strbcs	r2, [r8], -r0, asr #8
    36d0:	2226331e 	eorcs	r3, r6, #2013265920	; 0x78000000
    36d4:	24480071 	strbcs	r0, [r8], #-113	; 0xffffff8f
    36d8:	00752648 	rsbseq	r2, r5, r8, asr #12
    36dc:	22263a1e 	eorcs	r3, r6, #122880	; 0x1e000
    36e0:	4b5001f3 	blmi	1403eb4 <__ccfg+0x13e3f0c>
    36e4:	4800741c 	stmdami	r0, {r2, r3, r4, sl, ip, sp, lr}
    36e8:	1e264824 	cdpne	8, 2, cr4, cr6, cr4, {1}
    36ec:	421e0075 	andsmi	r0, lr, #117	; 0x75
    36f0:	009f2226 	addseq	r2, pc, r6, lsr #4
	...
    3700:	01000000 	mrseq	r0, (UNDEF: 0)
    3704:	00005000 	andeq	r5, r0, r0
    3708:	00000000 	andeq	r0, r0, r0
    370c:	00040000 	andeq	r0, r4, r0
    3710:	9f5001f3 	svcls	0x005001f3
	...
    3724:	0070000b 	rsbseq	r0, r0, fp
    3728:	461e0070 			; <UNDEFINED> instruction: 0x461e0070
    372c:	1c007026 	stcne	0, cr7, [r0], {38}	; 0x26
    3730:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3734:	00000000 	andeq	r0, r0, r0
    3738:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3744:	01f3000e 	mvnseq	r0, lr
    3748:	5001f350 	andpl	pc, r1, r0, asr r3	; <UNPREDICTABLE>
    374c:	f326461e 	vmin.u32	d4, d6, d14
    3750:	9f1c5001 	svcls	0x001c5001
	...
    3764:	00550001 	subseq	r0, r5, r1
    3768:	00000000 	andeq	r0, r0, r0
    376c:	05000000 	streq	r0, [r0, #-0]
    3770:	10380c00 	eorsne	r0, r8, r0, lsl #24
    3774:	00004009 	andeq	r4, r0, r9
	...
    3784:	00010000 	andeq	r0, r1, r0
    3788:	00000056 	andeq	r0, r0, r6, asr r0
	...
    3798:	70000600 	andvc	r0, r0, r0, lsl #12
    379c:	1c007600 	stcne	6, cr7, [r0], {-0}
    37a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    37a4:	00000000 	andeq	r0, r0, r0
    37a8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    37bc:	0070000a 	rsbseq	r0, r0, sl
    37c0:	2444fc08 	strbcs	pc, [r4], #-3080	; 0xfffff3f8	; <UNPREDICTABLE>
    37c4:	9f25461a 	svcls	0x0025461a
	...
    37d8:	00530001 	subseq	r0, r3, r1
	...
    37e8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    37ec:	0a007300 	beq	203f4 <__ccfg+0x44c>
    37f0:	3a1afc00 	bcc	6c27f8 <__ccfg+0x6a2850>
    37f4:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    3804:	000a0000 	andeq	r0, sl, r0
    3808:	fc080073 	stc2	0, cr0, [r8], {115}	; 0x73
    380c:	421a2440 	andsmi	r2, sl, #64, 8	; 0x40000000
    3810:	00009f25 	andeq	r9, r0, r5, lsr #30
    3814:	00000000 	andeq	r0, r0, r0
    3818:	32080000 	andcc	r0, r8, #0
    381c:	32260000 	eorcc	r0, r6, #0
    3820:	00010000 	andeq	r0, r1, r0
    3824:	00322650 	eorseq	r2, r2, r0, asr r6
    3828:	00323000 	eorseq	r3, r2, r0
    382c:	f3000400 	vshl.u8	d0, d0, d0
    3830:	009f5001 	addseq	r5, pc, r1
    3834:	00000000 	andeq	r0, r0, r0
    3838:	92000000 	andls	r0, r0, #0
    383c:	94000032 	strls	r0, [r0], #-50	; 0xffffffce
    3840:	01000032 	tsteq	r0, r2, lsr r0
    3844:	32965300 	addscc	r5, r6, #0, 6
    3848:	32980000 	addscc	r0, r8, #0
    384c:	00010000 	andeq	r0, r1, r0
    3850:	00000053 	andeq	r0, r0, r3, asr r0
    3854:	00000000 	andeq	r0, r0, r0
    3858:	0033cc00 	eorseq	ip, r3, r0, lsl #24
    385c:	00340200 	eorseq	r0, r4, r0, lsl #4
    3860:	50000100 	andpl	r0, r0, r0, lsl #2
    3864:	00003402 	andeq	r3, r0, r2, lsl #8
    3868:	000034e4 	andeq	r3, r0, r4, ror #9
    386c:	01f30004 	mvnseq	r0, r4
    3870:	00009f50 	andeq	r9, r0, r0, asr pc
    3874:	00000000 	andeq	r0, r0, r0
    3878:	33ea0000 	mvncc	r0, #0
    387c:	33ee0000 	mvncc	r0, #0
    3880:	00010000 	andeq	r0, r1, r0
    3884:	0033ee51 	eorseq	lr, r3, r1, asr lr
    3888:	0033f400 	eorseq	pc, r3, r0, lsl #8
    388c:	32000200 	andcc	r0, r0, #0, 4
    3890:	0033f89f 	mlaseq	r3, pc, r8, pc	; <UNPREDICTABLE>
    3894:	00348200 	eorseq	r8, r4, r0, lsl #4
    3898:	51000100 	mrspl	r0, (UNDEF: 16)
    389c:	00003482 	andeq	r3, r0, r2, lsl #9
    38a0:	00003486 	andeq	r3, r0, r6, lsl #9
    38a4:	05710003 	ldrbeq	r0, [r1, #-3]!
    38a8:	0034a89f 	mlaseq	r4, pc, r8, sl	; <UNPREDICTABLE>
    38ac:	0034be00 	eorseq	fp, r4, r0, lsl #28
    38b0:	51000100 	mrspl	r0, (UNDEF: 16)
    38b4:	000034be 			; <UNDEFINED> instruction: 0x000034be
    38b8:	000034c0 	andeq	r3, r0, r0, asr #9
    38bc:	05710003 	ldrbeq	r0, [r1, #-3]!
    38c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    38c4:	00000000 	andeq	r0, r0, r0
    38c8:	00344e00 	eorseq	r4, r4, r0, lsl #28
    38cc:	00345400 	eorseq	r5, r4, r0, lsl #8
    38d0:	53000100 	movwpl	r0, #256	; 0x100
    38d4:	0000345c 	andeq	r3, r0, ip, asr r4
    38d8:	0000345e 	andeq	r3, r0, lr, asr r4
    38dc:	72530001 	subsvc	r0, r3, #1
    38e0:	74000034 	strvc	r0, [r0], #-52	; 0xffffffcc
    38e4:	01000034 	tsteq	r0, r4, lsr r0
    38e8:	347c5300 	ldrbtcc	r5, [ip], #-768	; 0xfffffd00
    38ec:	34880000 	strcc	r0, [r8], #0
    38f0:	00010000 	andeq	r0, r1, r0
    38f4:	0034a853 	eorseq	sl, r4, r3, asr r8
    38f8:	0034b400 	eorseq	fp, r4, r0, lsl #8
    38fc:	53000100 	movwpl	r0, #256	; 0x100
    3900:	000034b8 			; <UNDEFINED> instruction: 0x000034b8
    3904:	000034c0 	andeq	r3, r0, r0, asr #9
    3908:	00530001 	subseq	r0, r3, r1
    390c:	00000000 	andeq	r0, r0, r0
    3910:	ec000000 	stc	0, cr0, [r0], {-0}
    3914:	ee000033 	mcr	0, 0, r0, cr0, cr3, {1}
    3918:	01000033 	tsteq	r0, r3, lsr r0
    391c:	33f05300 	mvnscc	r5, #0, 6
    3920:	33f40000 	mvnscc	r0, #0
    3924:	00010000 	andeq	r0, r1, r0
    3928:	0033fa53 	eorseq	pc, r3, r3, asr sl	; <UNPREDICTABLE>
    392c:	00340200 	eorseq	r0, r4, r0, lsl #4
    3930:	53000100 	movwpl	r0, #256	; 0x100
    3934:	00003402 	andeq	r3, r0, r2, lsl #8
    3938:	00003418 	andeq	r3, r0, r8, lsl r4
    393c:	6c740003 	ldclvs	0, cr0, [r4], #-12
    3940:	00341c9f 	mlaseq	r4, pc, ip, r1	; <UNPREDICTABLE>
    3944:	00342200 	eorseq	r2, r4, r0, lsl #4
    3948:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
    394c:	00009f6c 	andeq	r9, r0, ip, ror #30
    3950:	00000000 	andeq	r0, r0, r0
    3954:	34120000 	ldrcc	r0, [r2], #-0
    3958:	34960000 	ldrcc	r0, [r6], #0
    395c:	00010000 	andeq	r0, r1, r0
    3960:	00349652 	eorseq	r9, r4, r2, asr r6
    3964:	00349c00 	eorseq	r9, r4, r0, lsl #24
    3968:	70000200 	andvc	r0, r0, r0, lsl #4
    396c:	00349c00 	eorseq	r9, r4, r0, lsl #24
    3970:	0034a000 	eorseq	sl, r4, r0
    3974:	52000100 	andpl	r0, r0, #0, 2
    3978:	000034a0 	andeq	r3, r0, r0, lsr #9
    397c:	000034a6 	andeq	r3, r0, r6, lsr #9
    3980:	00700002 	rsbseq	r0, r0, r2
    3984:	000034a8 	andeq	r3, r0, r8, lsr #9
    3988:	000034b0 			; <UNDEFINED> instruction: 0x000034b0
    398c:	b0520001 	subslt	r0, r2, r1
    3990:	b6000034 			; <UNDEFINED> instruction: 0xb6000034
    3994:	02000034 	andeq	r0, r0, #52	; 0x34
    3998:	b8007000 	stmdalt	r0, {ip, sp, lr}
    399c:	c0000034 	andgt	r0, r0, r4, lsr r0
    39a0:	01000034 	tsteq	r0, r4, lsr r0
    39a4:	00005200 	andeq	r5, r0, r0, lsl #4
    39a8:	00000000 	andeq	r0, r0, r0
    39ac:	33cc0000 	biccc	r0, ip, #0
    39b0:	34180000 	ldrcc	r0, [r8], #-0
    39b4:	00020000 	andeq	r0, r2, r0
    39b8:	34189f30 	ldrcc	r9, [r8], #-3888	; 0xfffff0d0
    39bc:	341c0000 	ldrcc	r0, [ip], #-0
    39c0:	00010000 	andeq	r0, r1, r0
    39c4:	00341c54 	eorseq	r1, r4, r4, asr ip
    39c8:	00342200 	eorseq	r2, r4, r0, lsl #4
    39cc:	30000200 	andcc	r0, r0, r0, lsl #4
    39d0:	0034229f 	mlaseq	r4, pc, r2, r2	; <UNPREDICTABLE>
    39d4:	0034c000 	eorseq	ip, r4, r0
    39d8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    39e4:	000034e4 	andeq	r3, r0, r4, ror #9
    39e8:	000034ee 	andeq	r3, r0, lr, ror #9
    39ec:	ee500001 	cdp	0, 5, cr0, cr0, cr1, {0}
    39f0:	00000034 	andeq	r0, r0, r4, lsr r0
    39f4:	03000035 	movweq	r0, #53	; 0x35
    39f8:	9f707500 	svcls	0x00707500
    39fc:	00003500 	andeq	r3, r0, r0, lsl #10
    3a00:	00003504 	andeq	r3, r0, r4, lsl #10
    3a04:	01f30004 	mvnseq	r0, r4
    3a08:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3a18:	00020000 	andeq	r0, r2, r0
    3a1c:	00009f30 	andeq	r9, r0, r0, lsr pc
    3a20:	00000000 	andeq	r0, r0, r0
    3a24:	00020000 	andeq	r0, r2, r0
    3a28:	00009f31 	andeq	r9, r0, r1, lsr pc
    3a2c:	00000000 	andeq	r0, r0, r0
    3a30:	00020000 	andeq	r0, r2, r0
    3a34:	00009f32 	andeq	r9, r0, r2, lsr pc
    3a38:	00000000 	andeq	r0, r0, r0
    3a3c:	00020000 	andeq	r0, r2, r0
    3a40:	00009f33 	andeq	r9, r0, r3, lsr pc
    3a44:	00000000 	andeq	r0, r0, r0
    3a48:	00020000 	andeq	r0, r2, r0
    3a4c:	00009f34 	andeq	r9, r0, r4, lsr pc
    3a50:	00000000 	andeq	r0, r0, r0
    3a54:	00020000 	andeq	r0, r2, r0
    3a58:	00009f35 	andeq	r9, r0, r5, lsr pc
    3a5c:	00000000 	andeq	r0, r0, r0
    3a60:	00020000 	andeq	r0, r2, r0
    3a64:	00009f36 	andeq	r9, r0, r6, lsr pc
    3a68:	00000000 	andeq	r0, r0, r0
    3a6c:	00020000 	andeq	r0, r2, r0
    3a70:	00009f37 	andeq	r9, r0, r7, lsr pc
    3a74:	00000000 	andeq	r0, r0, r0
    3a78:	00020000 	andeq	r0, r2, r0
    3a7c:	00009f38 	andeq	r9, r0, r8, lsr pc
    3a80:	00000000 	andeq	r0, r0, r0
    3a84:	00020000 	andeq	r0, r2, r0
    3a88:	00009f39 	andeq	r9, r0, r9, lsr pc
    3a8c:	00000000 	andeq	r0, r0, r0
    3a90:	00020000 	andeq	r0, r2, r0
    3a94:	00009f3a 	andeq	r9, r0, sl, lsr pc
    3a98:	00000000 	andeq	r0, r0, r0
    3a9c:	00020000 	andeq	r0, r2, r0
    3aa0:	00009f3b 	andeq	r9, r0, fp, lsr pc
    3aa4:	00000000 	andeq	r0, r0, r0
    3aa8:	00020000 	andeq	r0, r2, r0
    3aac:	00009f3c 	andeq	r9, r0, ip, lsr pc
    3ab0:	00000000 	andeq	r0, r0, r0
    3ab4:	35200000 	strcc	r0, [r0, #-0]!
    3ab8:	355e0000 	ldrbcc	r0, [lr, #-0]
    3abc:	00010000 	andeq	r0, r1, r0
    3ac0:	00355e50 	eorseq	r5, r5, r0, asr lr
    3ac4:	0035c000 	eorseq	ip, r5, r0
    3ac8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    3acc:	000035c0 	andeq	r3, r0, r0, asr #11
    3ad0:	000035f4 	strdeq	r3, [r0], -r4
    3ad4:	01f30004 	mvnseq	r0, r4
    3ad8:	00009f50 	andeq	r9, r0, r0, asr pc
    3adc:	00000000 	andeq	r0, r0, r0
    3ae0:	355c0000 	ldrbcc	r0, [ip, #-0]
    3ae4:	35c00000 	strbcc	r0, [r0]
    3ae8:	00010000 	andeq	r0, r1, r0
    3aec:	00000054 	andeq	r0, r0, r4, asr r0
    3af0:	00000000 	andeq	r0, r0, r0
    3af4:	00357200 	eorseq	r7, r5, r0, lsl #4
    3af8:	00357400 	eorseq	r7, r5, r0, lsl #8
    3afc:	73000700 	movwvc	r0, #1792	; 0x700
    3b00:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    3b04:	00009f1a 	andeq	r9, r0, sl, lsl pc
    3b08:	00000000 	andeq	r0, r0, r0
    3b0c:	35820000 	strcc	r0, [r2]
    3b10:	359c0000 	ldrcc	r0, [ip]
    3b14:	00010000 	andeq	r0, r1, r0
    3b18:	00000053 	andeq	r0, r0, r3, asr r0
    3b1c:	00000000 	andeq	r0, r0, r0
    3b20:	00358600 	eorseq	r8, r5, r0, lsl #12
    3b24:	00359200 	eorseq	r9, r5, r0, lsl #4
    3b28:	52000100 	andpl	r0, r0, #0, 2
    3b2c:	00003592 	muleq	r0, r2, r5
    3b30:	00003596 	muleq	r0, r6, r5
    3b34:	06710003 	ldrbteq	r0, [r1], -r3
    3b38:	0035969f 	mlaseq	r5, pc, r6, r9	; <UNPREDICTABLE>
    3b3c:	00359e00 	eorseq	r9, r5, r0, lsl #28
    3b40:	52000100 	andpl	r0, r0, #0, 2
	...
    3b4c:	000035fa 	strdeq	r3, [r0], -sl
    3b50:	00003674 	andeq	r3, r0, r4, ror r6
    3b54:	00540001 	subseq	r0, r4, r1
    3b58:	00000000 	andeq	r0, r0, r0
    3b5c:	60000000 	andvs	r0, r0, r0
    3b60:	6a000036 	bvs	3c40 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>
    3b64:	01000036 	tsteq	r0, r6, lsr r0
    3b68:	00005300 	andeq	r5, r0, r0, lsl #6
    3b6c:	00000000 	andeq	r0, r0, r0
    3b70:	36980000 	ldrcc	r0, [r8], r0
    3b74:	36be0000 	ldrtcc	r0, [lr], r0
    3b78:	00010000 	andeq	r0, r1, r0
    3b7c:	0036be50 	eorseq	fp, r6, r0, asr lr
    3b80:	00371400 	eorseq	r1, r7, r0, lsl #8
    3b84:	f3000400 	vshl.u8	d0, d0, d0
    3b88:	009f5001 	addseq	r5, pc, r1
    3b8c:	00000000 	andeq	r0, r0, r0
    3b90:	c0000000 	andgt	r0, r0, r0
    3b94:	f4000036 	vst4.8	{d0-d3}, [r0 :256], r6
    3b98:	01000036 	tsteq	r0, r6, lsr r0
    3b9c:	00005300 	andeq	r5, r0, r0, lsl #6
    3ba0:	00000000 	andeq	r0, r0, r0
    3ba4:	36c40000 	strbcc	r0, [r4], r0
    3ba8:	36d20000 	ldrbcc	r0, [r2], r0
    3bac:	00010000 	andeq	r0, r1, r0
    3bb0:	0036d251 	eorseq	sp, r6, r1, asr r2
    3bb4:	0036d400 	eorseq	sp, r6, r0, lsl #8
    3bb8:	72000600 	andvc	r0, r0, #0, 12
    3bbc:	1c007300 	stcne	3, cr7, [r0], {-0}
    3bc0:	0036d49f 	mlaseq	r6, pc, r4, sp	; <UNPREDICTABLE>
    3bc4:	0036da00 	eorseq	sp, r6, r0, lsl #20
    3bc8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3bd4:	000036b0 			; <UNDEFINED> instruction: 0x000036b0
    3bd8:	000036c2 	andeq	r3, r0, r2, asr #13
    3bdc:	00530001 	subseq	r0, r3, r1
    3be0:	00000000 	andeq	r0, r0, r0
    3be4:	14000000 	strne	r0, [r0], #-0
    3be8:	37000037 	smladxcc	r0, r7, r0, r0
    3bec:	01000037 	tsteq	r0, r7, lsr r0
    3bf0:	37375000 	ldrcc	r5, [r7, -r0]!
    3bf4:	37420000 	strbcc	r0, [r2, -r0]
    3bf8:	00010000 	andeq	r0, r1, r0
    3bfc:	00374254 	eorseq	r4, r7, r4, asr r2
    3c00:	00374a00 	eorseq	r4, r7, r0, lsl #20
    3c04:	50000100 	andpl	r0, r0, r0, lsl #2
    3c08:	0000374a 	andeq	r3, r0, sl, asr #14
    3c0c:	00003796 	muleq	r0, r6, r7
    3c10:	00540001 	subseq	r0, r4, r1
    3c14:	00000000 	andeq	r0, r0, r0
    3c18:	50000000 	andpl	r0, r0, r0
    3c1c:	54000037 	strpl	r0, [r0], #-55	; 0xffffffc9
    3c20:	01000037 	tsteq	r0, r7, lsr r0
    3c24:	37565300 	ldrbcc	r5, [r6, -r0, lsl #6]
    3c28:	37640000 	strbcc	r0, [r4, -r0]!
    3c2c:	00010000 	andeq	r0, r1, r0
    3c30:	00376653 	eorseq	r6, r7, r3, asr r6
    3c34:	00376e00 	eorseq	r6, r7, r0, lsl #28
    3c38:	53000100 	movwpl	r0, #256	; 0x100
	...
    3c44:	00003750 	andeq	r3, r0, r0, asr r7
    3c48:	00003784 	andeq	r3, r0, r4, lsl #15
    3c4c:	00740005 	rsbseq	r0, r4, r5
    3c50:	849f264c 	ldrhi	r2, [pc], #1612	; 3c58 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x138>
    3c54:	c0000037 	andgt	r0, r0, r7, lsr r0
    3c58:	06000037 			; <UNDEFINED> instruction: 0x06000037
    3c5c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3c60:	009f264c 	addseq	r2, pc, ip, asr #12
    3c64:	00000000 	andeq	r0, r0, r0
    3c68:	4a000000 	bmi	3c70 <NOROM_SysCtrlSetRechargeBeforePowerDown>
    3c6c:	54000037 	strpl	r0, [r0], #-55	; 0xffffffc9
    3c70:	01000037 	tsteq	r0, r7, lsr r0
    3c74:	00005300 	andeq	r5, r0, r0, lsl #6
    3c78:	00000000 	andeq	r0, r0, r0
    3c7c:	37c00000 	strbcc	r0, [r0, r0]
    3c80:	37d40000 	ldrbcc	r0, [r4, r0]
    3c84:	00010000 	andeq	r0, r1, r0
    3c88:	0037d450 	eorseq	sp, r7, r0, asr r4
    3c8c:	00381c00 	eorseq	r1, r8, r0, lsl #24
    3c90:	f3000400 	vshl.u8	d0, d0, d0
    3c94:	009f5001 	addseq	r5, pc, r1
    3c98:	00000000 	andeq	r0, r0, r0
    3c9c:	c6000000 	strgt	r0, [r0], -r0
    3ca0:	ce000037 	mcrgt	0, 0, r0, cr0, cr7, {1}
    3ca4:	01000037 	tsteq	r0, r7, lsr r0
    3ca8:	00005300 	andeq	r5, r0, r0, lsl #6
    3cac:	00000000 	andeq	r0, r0, r0
    3cb0:	37ca0000 	strbcc	r0, [sl, r0]
    3cb4:	37dc0000 	ldrbcc	r0, [ip, r0]
    3cb8:	00010000 	andeq	r0, r1, r0
    3cbc:	0037dc52 	eorseq	sp, r7, r2, asr ip
    3cc0:	0037de00 	eorseq	sp, r7, r0, lsl #28
    3cc4:	72000500 	andvc	r0, r0, #0, 10
    3cc8:	9f253100 	svcls	0x00253100
    3ccc:	000037de 	ldrdeq	r3, [r0], -lr
    3cd0:	000037e4 	andeq	r3, r0, r4, ror #15
    3cd4:	e8520001 	ldmda	r2, {r0}^
    3cd8:	fa000037 	blx	3dbc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x14c>
    3cdc:	01000037 	tsteq	r0, r7, lsr r0
    3ce0:	37fe5200 	ldrbcc	r5, [lr, r0, lsl #4]!
    3ce4:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
    3ce8:	00010000 	andeq	r0, r1, r0
    3cec:	00380a52 	eorseq	r0, r8, r2, asr sl
    3cf0:	00381c00 	eorseq	r1, r8, r0, lsl #24
    3cf4:	52000100 	andpl	r0, r0, #0, 2
	...
    3d00:	000037ce 	andeq	r3, r0, lr, asr #15
    3d04:	000037d8 	ldrdeq	r3, [r0], -r8
    3d08:	d8530001 	ldmdale	r3, {r0}^
    3d0c:	da000037 	ble	3df0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x180>
    3d10:	05000037 	streq	r0, [r0, #-55]	; 0xffffffc9
    3d14:	31007300 	mrscc	r7, LR_irq
    3d18:	37da9f25 	ldrbcc	r9, [sl, r5, lsr #30]
    3d1c:	37dc0000 	ldrbcc	r0, [ip, r0]
    3d20:	00010000 	andeq	r0, r1, r0
    3d24:	0037dc53 	eorseq	sp, r7, r3, asr ip
    3d28:	0037e800 	eorseq	lr, r7, r0, lsl #16
    3d2c:	0a000400 	beq	4d34 <plug_null>
    3d30:	e89fffff 	ldm	pc, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
    3d34:	ee000037 	mcr	0, 0, r0, cr0, cr7, {1}
    3d38:	01000037 	tsteq	r0, r7, lsr r0
    3d3c:	37f25300 	ldrbcc	r5, [r2, r0, lsl #6]!
    3d40:	37f80000 	ldrbcc	r0, [r8, r0]!
    3d44:	00010000 	andeq	r0, r1, r0
    3d48:	0037f853 	eorseq	pc, r7, r3, asr r8	; <UNPREDICTABLE>
    3d4c:	00380a00 	eorseq	r0, r8, r0, lsl #20
    3d50:	31000200 	mrscc	r0, R8_usr
    3d54:	00380a9f 	mlaseq	r8, pc, sl, r0	; <UNPREDICTABLE>
    3d58:	00381c00 	eorseq	r1, r8, r0, lsl #24
    3d5c:	53000100 	movwpl	r0, #256	; 0x100
	...
    3d68:	000037ce 	andeq	r3, r0, lr, asr #15
    3d6c:	000037d4 	ldrdeq	r3, [r0], -r4
    3d70:	9f300002 	svcls	0x00300002
    3d74:	000037d4 	ldrdeq	r3, [r0], -r4
    3d78:	00003810 	andeq	r3, r0, r0, lsl r8
    3d7c:	00500001 	subseq	r0, r0, r1
    3d80:	00000000 	andeq	r0, r0, r0
    3d84:	10000000 	andne	r0, r0, r0
    3d88:	14000038 	strne	r0, [r0], #-56	; 0xffffffc8
    3d8c:	08000038 	stmdaeq	r0, {r3, r4, r5}
    3d90:	40007200 	andmi	r7, r0, r0, lsl #4
    3d94:	21007324 	tstcs	r0, r4, lsr #6
    3d98:	0038149f 	mlaseq	r8, pc, r4, r1	; <UNPREDICTABLE>
    3d9c:	00381c00 	eorseq	r1, r8, r0, lsl #24
    3da0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3dac:	00003826 	andeq	r3, r0, r6, lsr #16
    3db0:	0000382a 	andeq	r3, r0, sl, lsr #16
    3db4:	0070000a 	rsbseq	r0, r0, sl
    3db8:	24381a33 	ldrtcs	r1, [r8], #-2611	; 0xfffff5cd
    3dbc:	9f210073 	svcls	0x00210073
    3dc0:	0000382e 	andeq	r3, r0, lr, lsr #16
    3dc4:	00003834 	andeq	r3, r0, r4, lsr r8
    3dc8:	00500001 	subseq	r0, r0, r1
	...
    3dd8:	07000000 	streq	r0, [r0, -r0]
    3ddc:	0a007000 	beq	1fde4 <__exidx_end+0x1b090>
    3de0:	9f1a3fff 	svcls	0x001a3fff
	...
    3dec:	00003838 	andeq	r3, r0, r8, lsr r8
    3df0:	0000383c 	andeq	r3, r0, ip, lsr r8
    3df4:	0070000f 	rsbseq	r0, r0, pc
    3df8:	701afc08 	andsvc	pc, sl, r8, lsl #24
    3dfc:	f8801100 			; <UNDEFINED> instruction: 0xf8801100
    3e00:	211a67f3 			; <UNDEFINED> instruction: 0x211a67f3
    3e04:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3e08:	00000000 	andeq	r0, r0, r0
    3e0c:	00383800 	eorseq	r3, r8, r0, lsl #16
    3e10:	00383c00 	eorseq	r3, r8, r0, lsl #24
    3e14:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3e20:	00003848 	andeq	r3, r0, r8, asr #16
    3e24:	0000384c 	andeq	r3, r0, ip, asr #16
    3e28:	0070000f 	rsbseq	r0, r0, pc
    3e2c:	701a3f08 	andsvc	r3, sl, r8, lsl #30
    3e30:	ffc00c00 			; <UNDEFINED> instruction: 0xffc00c00
    3e34:	211a00fc 	ldrshcs	r0, [sl, -ip]
    3e38:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3e3c:	00000000 	andeq	r0, r0, r0
    3e40:	00384800 	eorseq	r4, r8, r0, lsl #16
    3e44:	00384c00 	eorseq	r4, r8, r0, lsl #24
    3e48:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3e54:	00003858 	andeq	r3, r0, r8, asr r8
    3e58:	000038ae 	andeq	r3, r0, lr, lsr #17
    3e5c:	ae500001 	cdpge	0, 5, cr0, cr0, cr1, {0}
    3e60:	bc000038 	stclt	0, cr0, [r0], {56}	; 0x38
    3e64:	04000038 	streq	r0, [r0], #-56	; 0xffffffc8
    3e68:	5001f300 	andpl	pc, r1, r0, lsl #6
    3e6c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3e70:	00000000 	andeq	r0, r0, r0
    3e74:	00389800 	eorseq	r9, r8, r0, lsl #16
    3e78:	0038a000 	eorseq	sl, r8, r0
    3e7c:	74001700 	strvc	r1, [r0], #-1792	; 0xfffff900
    3e80:	ff000a00 			; <UNDEFINED> instruction: 0xff000a00
    3e84:	0800741a 	stmdaeq	r0, {r1, r3, r4, sl, ip, sp, lr}
    3e88:	72211af0 	eorvc	r1, r1, #240, 20	; 0xf0000
    3e8c:	21244400 			; <UNDEFINED> instruction: 0x21244400
    3e90:	24400073 	strbcs	r0, [r0], #-115	; 0xffffff8d
    3e94:	38a49f21 	stmiacc	r4!, {r0, r5, r8, r9, sl, fp, ip, pc}
    3e98:	38bc0000 	ldmcc	ip!, {}	; <UNPREDICTABLE>
    3e9c:	00010000 	andeq	r0, r1, r0
    3ea0:	00000053 	andeq	r0, r0, r3, asr r0
    3ea4:	00000000 	andeq	r0, r0, r0
    3ea8:	00386000 	eorseq	r6, r8, r0
    3eac:	0038aa00 	eorseq	sl, r8, r0, lsl #20
    3eb0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3ebc:	00003866 	andeq	r3, r0, r6, ror #16
    3ec0:	0000387a 	andeq	r3, r0, sl, ror r8
    3ec4:	7a520001 	bvc	1483ed0 <__ccfg+0x1463f28>
    3ec8:	86000038 			; <UNDEFINED> instruction: 0x86000038
    3ecc:	06000038 			; <UNDEFINED> instruction: 0x06000038
    3ed0:	09007400 	stmdbeq	r0, {sl, ip, sp, lr}
    3ed4:	989f24ec 	ldmls	pc, {r2, r3, r5, r6, r7, sl, sp}	; <UNPREDICTABLE>
    3ed8:	a0000038 	andge	r0, r0, r8, lsr r0
    3edc:	01000038 	tsteq	r0, r8, lsr r0
    3ee0:	00005200 	andeq	r5, r0, r0, lsl #4
    3ee4:	00000000 	andeq	r0, r0, r0
    3ee8:	386e0000 	stmdacc	lr!, {}^	; <UNPREDICTABLE>
    3eec:	388c0000 	stmcc	ip, {}	; <UNPREDICTABLE>
    3ef0:	00010000 	andeq	r0, r1, r0
    3ef4:	00388c53 	eorseq	r8, r8, r3, asr ip
    3ef8:	00389800 	eorseq	r9, r8, r0, lsl #16
    3efc:	74000600 	strvc	r0, [r0], #-1536	; 0xfffffa00
    3f00:	24f00900 	ldrbtcs	r0, [r0], #2304	; 0x900
    3f04:	0038989f 	mlaseq	r8, pc, r8, r9	; <UNPREDICTABLE>
    3f08:	0038a400 	eorseq	sl, r8, r0, lsl #8
    3f0c:	53000100 	movwpl	r0, #256	; 0x100
	...
    3f18:	00003878 	andeq	r3, r0, r8, ror r8
    3f1c:	0000387a 	andeq	r3, r0, sl, ror r8
    3f20:	00760006 	rsbseq	r0, r6, r6
    3f24:	9f220072 	svcls	0x00220072
    3f28:	0000387a 	andeq	r3, r0, sl, ror r8
    3f2c:	00003882 	andeq	r3, r0, r2, lsl #17
    3f30:	82520001 	subshi	r0, r2, #1
    3f34:	84000038 	strhi	r0, [r0], #-56	; 0xffffffc8
    3f38:	09000038 	stmdbeq	r0, {r3, r4, r5}
    3f3c:	09007400 	stmdbeq	r0, {sl, ip, sp, lr}
    3f40:	007624ec 	rsbseq	r2, r6, ip, ror #9
    3f44:	38849f22 	stmcc	r4, {r1, r5, r8, r9, sl, fp, ip, pc}
    3f48:	38860000 	stmcc	r6, {}	; <UNPREDICTABLE>
    3f4c:	00010000 	andeq	r0, r1, r0
    3f50:	00388a55 	eorseq	r8, r8, r5, asr sl
    3f54:	00388c00 	eorseq	r8, r8, r0, lsl #24
    3f58:	71000600 	tstvc	r0, r0, lsl #12
    3f5c:	22007300 	andcs	r7, r0, #0, 6
    3f60:	00388c9f 	mlaseq	r8, pc, ip, r8	; <UNPREDICTABLE>
    3f64:	00389400 	eorseq	r9, r8, r0, lsl #8
    3f68:	53000100 	movwpl	r0, #256	; 0x100
    3f6c:	00003894 	muleq	r0, r4, r8
    3f70:	00003896 	muleq	r0, r6, r8
    3f74:	00740009 	rsbseq	r0, r4, r9
    3f78:	7124f009 	msrvc	CPSR_s, r9
    3f7c:	969f2200 	ldrls	r2, [pc], r0, lsl #4
    3f80:	98000038 	stmdals	r0, {r3, r4, r5}
    3f84:	02000038 	andeq	r0, r0, #56	; 0x38
    3f88:	009f3000 	addseq	r3, pc, r0
    3f8c:	00000000 	andeq	r0, r0, r0
    3f90:	bc000000 	stclt	0, cr0, [r0], {-0}
    3f94:	c4000038 	strgt	r0, [r0], #-56	; 0xffffffc8
    3f98:	01000038 	tsteq	r0, r8, lsr r0
    3f9c:	38c45000 	stmiacc	r4, {ip, lr}^
    3fa0:	38d00000 	ldmcc	r0, {}^	; <UNPREDICTABLE>
    3fa4:	00040000 	andeq	r0, r4, r0
    3fa8:	9f5001f3 	svcls	0x005001f3
	...
    3fb4:	000038bc 			; <UNDEFINED> instruction: 0x000038bc
    3fb8:	000038ca 	andeq	r3, r0, sl, asr #17
    3fbc:	9f300002 	svcls	0x00300002
    3fc0:	000038ca 	andeq	r3, r0, sl, asr #17
    3fc4:	000038d0 	ldrdeq	r3, [r0], -r0
    3fc8:	00500001 	subseq	r0, r0, r1
    3fcc:	00000000 	andeq	r0, r0, r0
    3fd0:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    3fd4:	c4000038 	strgt	r0, [r0], #-56	; 0xffffffc8
    3fd8:	01000038 	tsteq	r0, r8, lsr r0
    3fdc:	38c45000 	stmiacc	r4, {ip, lr}^
    3fe0:	38d00000 	ldmcc	r0, {}^	; <UNPREDICTABLE>
    3fe4:	00040000 	andeq	r0, r4, r0
    3fe8:	9f5001f3 	svcls	0x005001f3
	...
    3ff4:	000038c8 	andeq	r3, r0, r8, asr #17
    3ff8:	000038ca 	andeq	r3, r0, sl, asr #17
    3ffc:	00500001 	subseq	r0, r0, r1
    4000:	00000000 	andeq	r0, r0, r0
    4004:	d0000000 	andle	r0, r0, r0
    4008:	d8000038 	stmdale	r0, {r3, r4, r5}
    400c:	01000038 	tsteq	r0, r8, lsr r0
    4010:	38d85000 	ldmcc	r8, {ip, lr}^
    4014:	38e40000 	stmiacc	r4!, {}^	; <UNPREDICTABLE>
    4018:	00040000 	andeq	r0, r4, r0
    401c:	9f5001f3 	svcls	0x005001f3
	...
    4028:	000038d0 	ldrdeq	r3, [r0], -r0
    402c:	000038de 	ldrdeq	r3, [r0], -lr
    4030:	9f310002 	svcls	0x00310002
    4034:	000038de 	ldrdeq	r3, [r0], -lr
    4038:	000038e4 	andeq	r3, r0, r4, ror #17
    403c:	00500001 	subseq	r0, r0, r1
    4040:	00000000 	andeq	r0, r0, r0
    4044:	d2000000 	andle	r0, r0, #0
    4048:	d8000038 	stmdale	r0, {r3, r4, r5}
    404c:	01000038 	tsteq	r0, r8, lsr r0
    4050:	38d85000 	ldmcc	r8, {ip, lr}^
    4054:	38e40000 	stmiacc	r4!, {}^	; <UNPREDICTABLE>
    4058:	00040000 	andeq	r0, r4, r0
    405c:	9f5001f3 	svcls	0x005001f3
	...
    4068:	000038dc 	ldrdeq	r3, [r0], -ip
    406c:	000038de 	ldrdeq	r3, [r0], -lr
    4070:	00500001 	subseq	r0, r0, r1
    4074:	00000000 	andeq	r0, r0, r0
    4078:	e4000000 	str	r0, [r0], #-0
    407c:	ec000038 	stc	0, cr0, [r0], {56}	; 0x38
    4080:	01000038 	tsteq	r0, r8, lsr r0
    4084:	38ec5000 	stmiacc	ip!, {ip, lr}^
    4088:	38f80000 	ldmcc	r8!, {}^	; <UNPREDICTABLE>
    408c:	00040000 	andeq	r0, r4, r0
    4090:	9f5001f3 	svcls	0x005001f3
	...
    409c:	000038e4 	andeq	r3, r0, r4, ror #17
    40a0:	000038f2 	strdeq	r3, [r0], -r2
    40a4:	9f310002 	svcls	0x00310002
    40a8:	000038f2 	strdeq	r3, [r0], -r2
    40ac:	000038f8 	strdeq	r3, [r0], -r8
    40b0:	00500001 	subseq	r0, r0, r1
    40b4:	00000000 	andeq	r0, r0, r0
    40b8:	e6000000 	str	r0, [r0], -r0
    40bc:	ec000038 	stc	0, cr0, [r0], {56}	; 0x38
    40c0:	01000038 	tsteq	r0, r8, lsr r0
    40c4:	38ec5000 	stmiacc	ip!, {ip, lr}^
    40c8:	38f80000 	ldmcc	r8!, {}^	; <UNPREDICTABLE>
    40cc:	00040000 	andeq	r0, r4, r0
    40d0:	9f5001f3 	svcls	0x005001f3
	...
    40dc:	000038f0 	strdeq	r3, [r0], -r0
    40e0:	000038f2 	strdeq	r3, [r0], -r2
    40e4:	00500001 	subseq	r0, r0, r1
    40e8:	00000000 	andeq	r0, r0, r0
    40ec:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    40f0:	04000038 	streq	r0, [r0], #-56	; 0xffffffc8
    40f4:	01000039 	tsteq	r0, r9, lsr r0
    40f8:	39045000 	stmdbcc	r4, {ip, lr}
    40fc:	39200000 	stmdbcc	r0!, {}	; <UNPREDICTABLE>
    4100:	00040000 	andeq	r0, r4, r0
    4104:	9f5001f3 	svcls	0x005001f3
	...
    4110:	000038f8 	strdeq	r3, [r0], -r8
    4114:	0000391a 	andeq	r3, r0, sl, lsl r9
    4118:	9f300002 	svcls	0x00300002
    411c:	0000391a 	andeq	r3, r0, sl, lsl r9
    4120:	00003920 	andeq	r3, r0, r0, lsr #18
    4124:	00500001 	subseq	r0, r0, r1
    4128:	00000000 	andeq	r0, r0, r0
    412c:	fa000000 	blx	4134 <memcpy+0x12c>
    4130:	04000038 	streq	r0, [r0], #-56	; 0xffffffc8
    4134:	01000039 	tsteq	r0, r9, lsr r0
    4138:	39045000 	stmdbcc	r4, {ip, lr}
    413c:	39200000 	stmdbcc	r0!, {}	; <UNPREDICTABLE>
    4140:	00040000 	andeq	r0, r4, r0
    4144:	9f5001f3 	svcls	0x005001f3
	...
    4150:	0000390c 	andeq	r3, r0, ip, lsl #18
    4154:	00003914 	andeq	r3, r0, r4, lsl r9
    4158:	00730010 	rsbseq	r0, r3, r0, lsl r0
    415c:	1a24464c 	bne	915a94 <__ccfg+0x8f5aec>
    4160:	24322548 	ldrtcs	r2, [r2], #-1352	; 0xfffffab8
    4164:	24380072 	ldrtcs	r0, [r8], #-114	; 0xffffff8e
    4168:	39169f21 	ldmdbcc	r6, {r0, r5, r8, r9, sl, fp, ip, pc}
    416c:	391a0000 	ldmdbcc	sl, {}	; <UNPREDICTABLE>
    4170:	00010000 	andeq	r0, r1, r0
    4174:	00000050 	andeq	r0, r0, r0, asr r0
    4178:	00000000 	andeq	r0, r0, r0
    417c:	00390000 	eorseq	r0, r9, r0
    4180:	00391400 	eorseq	r1, r9, r0, lsl #8
    4184:	53000100 	movwpl	r0, #256	; 0x100
	...
    4190:	00003924 	andeq	r3, r0, r4, lsr #18
    4194:	00003928 	andeq	r3, r0, r8, lsr #18
    4198:	00700009 	rsbseq	r0, r0, r9
    419c:	1a244048 	bne	9142c4 <__ccfg+0x8f431c>
    41a0:	009f2543 	addseq	r2, pc, r3, asr #10
    41a4:	00000000 	andeq	r0, r0, r0
    41a8:	30000000 	andcc	r0, r0, r0
    41ac:	3c000039 	stccc	0, cr0, [r0], {57}	; 0x39
    41b0:	01000039 	tsteq	r0, r9, lsr r0
    41b4:	393c5000 	ldmdbcc	ip!, {ip, lr}
    41b8:	395c0000 	ldmdbcc	ip, {}^	; <UNPREDICTABLE>
    41bc:	00040000 	andeq	r0, r4, r0
    41c0:	9f5001f3 	svcls	0x005001f3
	...
    41cc:	00003930 	andeq	r3, r0, r0, lsr r9
    41d0:	00003952 	andeq	r3, r0, r2, asr r9
    41d4:	000c0006 	andeq	r0, ip, r6
    41d8:	9f403f80 	svcls	0x00403f80
    41dc:	00003952 	andeq	r3, r0, r2, asr r9
    41e0:	0000395c 	andeq	r3, r0, ip, asr r9
    41e4:	00500001 	subseq	r0, r0, r1
    41e8:	00000000 	andeq	r0, r0, r0
    41ec:	32000000 	andcc	r0, r0, #0
    41f0:	3c000039 	stccc	0, cr0, [r0], {57}	; 0x39
    41f4:	01000039 	tsteq	r0, r9, lsr r0
    41f8:	393c5000 	ldmdbcc	ip!, {ip, lr}
    41fc:	395c0000 	ldmdbcc	ip, {}^	; <UNPREDICTABLE>
    4200:	00040000 	andeq	r0, r4, r0
    4204:	9f5001f3 	svcls	0x005001f3
	...
    4210:	00003940 	andeq	r3, r0, r0, asr #18
    4214:	00003946 	andeq	r3, r0, r6, asr #18
    4218:	00730010 	rsbseq	r0, r3, r0, lsl r0
    421c:	1a03f00a 	bne	10024c <__ccfg+0xe02a4>
    4220:	24402534 	strbcs	r2, [r0], #-1332	; 0xfffffacc
    4224:	24460072 	strbcs	r0, [r6], #-114	; 0xffffff8e
    4228:	39509f21 	ldmdbcc	r0, {r0, r5, r8, r9, sl, fp, ip, pc}^
    422c:	39520000 	ldmdbcc	r2, {}^	; <UNPREDICTABLE>
    4230:	00010000 	andeq	r0, r1, r0
    4234:	00000050 	andeq	r0, r0, r0, asr r0
    4238:	00000000 	andeq	r0, r0, r0
    423c:	00393800 	eorseq	r3, r9, r0, lsl #16
    4240:	00394600 	eorseq	r4, r9, r0, lsl #12
    4244:	53000100 	movwpl	r0, #256	; 0x100
	...
    4250:	0000395c 	andeq	r3, r0, ip, asr r9
    4254:	00003964 	andeq	r3, r0, r4, ror #18
    4258:	64500001 	ldrbvs	r0, [r0], #-1
    425c:	70000039 	andvc	r0, r0, r9, lsr r0
    4260:	04000039 	streq	r0, [r0], #-57	; 0xffffffc7
    4264:	5001f300 	andpl	pc, r1, r0, lsl #6
    4268:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    426c:	00000000 	andeq	r0, r0, r0
    4270:	00395c00 	eorseq	r5, r9, r0, lsl #24
    4274:	00396a00 	eorseq	r6, r9, r0, lsl #20
    4278:	30000200 	andcc	r0, r0, r0, lsl #4
    427c:	00396a9f 	mlaseq	r9, pc, sl, r6	; <UNPREDICTABLE>
    4280:	00397000 	eorseq	r7, r9, r0
    4284:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4290:	0000395e 	andeq	r3, r0, lr, asr r9
    4294:	00003964 	andeq	r3, r0, r4, ror #18
    4298:	64500001 	ldrbvs	r0, [r0], #-1
    429c:	70000039 	andvc	r0, r0, r9, lsr r0
    42a0:	04000039 	streq	r0, [r0], #-57	; 0xffffffc7
    42a4:	5001f300 	andpl	pc, r1, r0, lsl #6
    42a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    42ac:	00000000 	andeq	r0, r0, r0
    42b0:	00396800 	eorseq	r6, r9, r0, lsl #16
    42b4:	00396a00 	eorseq	r6, r9, r0, lsl #20
    42b8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    42c4:	00003970 	andeq	r3, r0, r0, ror r9
    42c8:	00003978 	andeq	r3, r0, r8, ror r9
    42cc:	78500001 	ldmdavc	r0, {r0}^
    42d0:	84000039 	strhi	r0, [r0], #-57	; 0xffffffc7
    42d4:	04000039 	streq	r0, [r0], #-57	; 0xffffffc7
    42d8:	5001f300 	andpl	pc, r1, r0, lsl #6
    42dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    42e0:	00000000 	andeq	r0, r0, r0
    42e4:	00397000 	eorseq	r7, r9, r0
    42e8:	00397e00 	eorseq	r7, r9, r0, lsl #28
    42ec:	30000200 	andcc	r0, r0, r0, lsl #4
    42f0:	00397e9f 	mlaseq	r9, pc, lr, r7	; <UNPREDICTABLE>
    42f4:	00398400 	eorseq	r8, r9, r0, lsl #8
    42f8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4304:	00003972 	andeq	r3, r0, r2, ror r9
    4308:	00003978 	andeq	r3, r0, r8, ror r9
    430c:	78500001 	ldmdavc	r0, {r0}^
    4310:	84000039 	strhi	r0, [r0], #-57	; 0xffffffc7
    4314:	04000039 	streq	r0, [r0], #-57	; 0xffffffc7
    4318:	5001f300 	andpl	pc, r1, r0, lsl #6
    431c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4320:	00000000 	andeq	r0, r0, r0
    4324:	00397c00 	eorseq	r7, r9, r0, lsl #24
    4328:	00397e00 	eorseq	r7, r9, r0, lsl #28
    432c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4338:	00003984 	andeq	r3, r0, r4, lsl #19
    433c:	0000398a 	andeq	r3, r0, sl, lsl #19
    4340:	8a500001 	bhi	140434c <__ccfg+0x13e43a4>
    4344:	74000039 	strvc	r0, [r0], #-57	; 0xffffffc7
    4348:	0100003a 	tsteq	r0, sl, lsr r0
    434c:	3a745500 	bcc	1d19754 <__ccfg+0x1cf97ac>
    4350:	3a940000 	bcc	fe504358 <_estack+0xde4ff358>
    4354:	00040000 	andeq	r0, r4, r0
    4358:	9f5001f3 	svcls	0x005001f3
	...
    4364:	00003984 	andeq	r3, r0, r4, lsl #19
    4368:	0000398d 	andeq	r3, r0, sp, lsl #19
    436c:	8d510001 	ldclhi	0, cr0, [r1, #-4]
    4370:	94000039 	strls	r0, [r0], #-57	; 0xffffffc7
    4374:	0400003a 	streq	r0, [r0], #-58	; 0xffffffc6
    4378:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    437c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4380:	00000000 	andeq	r0, r0, r0
    4384:	00399200 	eorseq	r9, r9, r0, lsl #4
    4388:	00399600 	eorseq	r9, r9, r0, lsl #12
    438c:	50000100 	andpl	r0, r0, r0, lsl #2
    4390:	00003996 	muleq	r0, r6, r9
    4394:	00003999 	muleq	r0, r9, r9
    4398:	9e520001 	cdpls	0, 5, cr0, cr2, cr1, {0}
    439c:	a2000039 	andge	r0, r0, #57	; 0x39
    43a0:	01000039 	tsteq	r0, r9, lsr r0
    43a4:	39cc5000 	stmibcc	ip, {ip, lr}^
    43a8:	39ce0000 	stmibcc	lr, {}^	; <UNPREDICTABLE>
    43ac:	00010000 	andeq	r0, r1, r0
    43b0:	0039ce50 	eorseq	ip, r9, r0, asr lr
    43b4:	0039d100 	eorseq	sp, r9, r0, lsl #2
    43b8:	52000100 	andpl	r0, r0, #0, 2
    43bc:	000039da 	ldrdeq	r3, [r0], -sl
    43c0:	000039dc 	ldrdeq	r3, [r0], -ip
    43c4:	dc500001 	mrrcle	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    43c8:	df000039 	svcle	0x00000039
    43cc:	01000039 	tsteq	r0, r9, lsr r0
    43d0:	39ea5200 	stmibcc	sl!, {r9, ip, lr}^
    43d4:	39ec0000 	stmibcc	ip!, {}^	; <UNPREDICTABLE>
    43d8:	00010000 	andeq	r0, r1, r0
    43dc:	0039ec50 	eorseq	lr, r9, r0, asr ip
    43e0:	0039ef00 	eorseq	lr, r9, r0, lsl #30
    43e4:	52000100 	andpl	r0, r0, #0, 2
    43e8:	000039f6 	strdeq	r3, [r0], -r6
    43ec:	000039f8 	strdeq	r3, [r0], -r8
    43f0:	08500001 	ldmdaeq	r0, {r0}^
    43f4:	0c00003a 	stceq	0, cr0, [r0], {58}	; 0x3a
    43f8:	0100003a 	tsteq	r0, sl, lsr r0
    43fc:	3a1a5000 	bcc	698404 <__ccfg+0x67845c>
    4400:	3a1c0000 	bcc	704408 <__ccfg+0x6e4460>
    4404:	00010000 	andeq	r0, r1, r0
    4408:	003a1c50 	eorseq	r1, sl, r0, asr ip
    440c:	003a1f00 	eorseq	r1, sl, r0, lsl #30
    4410:	52000100 	andpl	r0, r0, #0, 2
    4414:	00003a26 	andeq	r3, r0, r6, lsr #20
    4418:	00003a28 	andeq	r3, r0, r8, lsr #20
    441c:	38500001 	ldmdacc	r0, {r0}^
    4420:	3a00003a 	bcc	4510 <patchGenfskRfe+0x140>
    4424:	0100003a 	tsteq	r0, sl, lsr r0
    4428:	3a4a5000 	bcc	1298430 <__ccfg+0x1278488>
    442c:	3a4e0000 	bcc	1384434 <__ccfg+0x136448c>
    4430:	00010000 	andeq	r0, r1, r0
    4434:	003a6250 	eorseq	r6, sl, r0, asr r2
    4438:	003a6400 	eorseq	r6, sl, r0, lsl #8
    443c:	50000100 	andpl	r0, r0, r0, lsl #2
    4440:	00003a64 	andeq	r3, r0, r4, ror #20
    4444:	00003a67 	andeq	r3, r0, r7, ror #20
    4448:	00520001 	subseq	r0, r2, r1
    444c:	00000000 	andeq	r0, r0, r0
    4450:	ba000000 	blt	4458 <patchGenfskRfe+0x88>
    4454:	c0000039 	andgt	r0, r0, r9, lsr r0
    4458:	07000039 	smladxeq	r0, r9, r0, r0
    445c:	0a007200 	beq	20c64 <__ccfg+0xcbc>
    4460:	9f1a3fff 	svcls	0x001a3fff
	...
    446c:	00003aae 	andeq	r3, r0, lr, lsr #21
    4470:	00003ab8 			; <UNDEFINED> instruction: 0x00003ab8
    4474:	00730009 	rsbseq	r0, r3, r9
    4478:	0000040c 	andeq	r0, r0, ip, lsl #8
    447c:	009f2120 	addseq	r2, pc, r0, lsr #2
    4480:	00000000 	andeq	r0, r0, r0
    4484:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    4488:	0000003a 	andeq	r0, r0, sl, lsr r0
    448c:	0100003b 	tsteq	r0, fp, lsr r0
    4490:	3b005000 	blcc	18498 <__exidx_end+0x13744>
    4494:	3b200000 	blcc	80449c <__ccfg+0x7e44f4>
    4498:	00040000 	andeq	r0, r4, r0
    449c:	9f5001f3 	svcls	0x005001f3
	...
    44a8:	00003b20 	andeq	r3, r0, r0, lsr #22
    44ac:	00003b48 	andeq	r3, r0, r8, asr #22
    44b0:	48500001 	ldmdami	r0, {r0}^
    44b4:	8800003b 	stmdahi	r0, {r0, r1, r3, r4, r5}
    44b8:	0100003b 	tsteq	r0, fp, lsr r0
    44bc:	3b885400 	blcc	fe2194c4 <_estack+0xde2144c4>
    44c0:	3b900000 	blcc	fe4044c8 <_estack+0xde3ff4c8>
    44c4:	00010000 	andeq	r0, r1, r0
    44c8:	003b9050 	eorseq	r9, fp, r0, asr r0
    44cc:	003bda00 	eorseq	sp, fp, r0, lsl #20
    44d0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    44d4:	00003bda 	ldrdeq	r3, [r0], -sl
    44d8:	00003c16 	andeq	r3, r0, r6, lsl ip
    44dc:	01f30004 	mvnseq	r0, r4
    44e0:	3c169f50 	ldccc	15, cr9, [r6], {80}	; 0x50
    44e4:	3c1a0000 	ldccc	0, cr0, [sl], {-0}
    44e8:	00010000 	andeq	r0, r1, r0
    44ec:	003c1a54 	eorseq	r1, ip, r4, asr sl
    44f0:	003c7000 	eorseq	r7, ip, r0
    44f4:	f3000400 	vshl.u8	d0, d0, d0
    44f8:	009f5001 	addseq	r5, pc, r1
    44fc:	00000000 	andeq	r0, r0, r0
    4500:	36000000 	strcc	r0, [r0], -r0
    4504:	7800003b 	stmdavc	r0, {r0, r1, r3, r4, r5}
    4508:	0100003b 	tsteq	r0, fp, lsr r0
    450c:	00005300 	andeq	r5, r0, r0, lsl #6
    4510:	00000000 	andeq	r0, r0, r0
    4514:	3baa0000 	blcc	fea8451c <_estack+0xdea7f51c>
    4518:	3bb00000 	blcc	fec04520 <_estack+0xdebff520>
    451c:	00010000 	andeq	r0, r1, r0
    4520:	00000050 	andeq	r0, r0, r0, asr r0
    4524:	00000000 	andeq	r0, r0, r0
    4528:	003bda00 	eorseq	sp, fp, r0, lsl #20
    452c:	003bdc00 	eorseq	sp, fp, r0, lsl #24
    4530:	50000100 	andpl	r0, r0, r0, lsl #2
    4534:	00003bdc 	ldrdeq	r3, [r0], -ip
    4538:	00003bf0 	strdeq	r3, [r0], -r0
    453c:	00540001 	subseq	r0, r4, r1
    4540:	00000000 	andeq	r0, r0, r0
    4544:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    4548:	1000003b 	andne	r0, r0, fp, lsr r0
    454c:	0100003c 	tsteq	r0, ip, lsr r0
    4550:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    4560:	00010000 	andeq	r0, r1, r0
    4564:	00000055 	andeq	r0, r0, r5, asr r0
    4568:	00000000 	andeq	r0, r0, r0
    456c:	75000300 	strvc	r0, [r0, #-768]	; 0xfffffd00
    4570:	00009f7f 	andeq	r9, r0, pc, ror pc
    4574:	00000000 	andeq	r0, r0, r0
    4578:	00010000 	andeq	r0, r1, r0
    457c:	00000055 	andeq	r0, r0, r5, asr r0
    4580:	00000000 	andeq	r0, r0, r0
    4584:	003c7000 	eorseq	r7, ip, r0
    4588:	003c8f00 	eorseq	r8, ip, r0, lsl #30
    458c:	50000100 	andpl	r0, r0, r0, lsl #2
    4590:	00003c8f 	andeq	r3, r0, pc, lsl #25
    4594:	00003d50 	andeq	r3, r0, r0, asr sp
    4598:	50570001 	subspl	r0, r7, r1
    459c:	9000003d 	andls	r0, r0, sp, lsr r0
    45a0:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
    45a4:	5001f300 	andpl	pc, r1, r0, lsl #6
    45a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    45ac:	00000000 	andeq	r0, r0, r0
    45b0:	003c9000 	eorseq	r9, ip, r0
    45b4:	003e1000 	eorseq	r1, lr, r0
    45b8:	50000100 	andpl	r0, r0, r0, lsl #2
    45bc:	00003e12 	andeq	r3, r0, r2, lsl lr
    45c0:	00003e4c 	andeq	r3, r0, ip, asr #28
    45c4:	00500001 	subseq	r0, r0, r1
    45c8:	00000000 	andeq	r0, r0, r0
    45cc:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    45d0:	3c00003d 	stccc	0, cr0, [r0], {61}	; 0x3d
    45d4:	0300003d 	movweq	r0, #61	; 0x3d
    45d8:	9f717000 	svcls	0x00717000
    45dc:	00003d3c 	andeq	r3, r0, ip, lsr sp
    45e0:	00003d42 	andeq	r3, r0, r2, asr #26
    45e4:	42510001 	subsmi	r0, r1, #1
    45e8:	6200003d 	andvs	r0, r0, #61	; 0x3d
    45ec:	0200003d 	andeq	r0, r0, #61	; 0x3d
    45f0:	62549100 	subsvs	r9, r4, #0, 2
    45f4:	6e00003d 	mcrvs	0, 0, r0, cr0, cr13, {1}
    45f8:	0100003d 	tsteq	r0, sp, lsr r0
    45fc:	3d6e5100 	stfcce	f5, [lr, #-0]
    4600:	3d700000 	ldclcc	0, cr0, [r0, #-0]
    4604:	00020000 	andeq	r0, r2, r0
    4608:	3d705491 	cfldrdcc	mvd5, [r0, #-580]!	; 0xfffffdbc
    460c:	3d720000 	ldclcc	0, cr0, [r2, #-0]
    4610:	00010000 	andeq	r0, r1, r0
    4614:	003d7251 	eorseq	r7, sp, r1, asr r2
    4618:	003e1800 	eorseq	r1, lr, r0, lsl #16
    461c:	91000200 	mrsls	r0, R8_usr
    4620:	00000054 	andeq	r0, r0, r4, asr r0
    4624:	00000000 	andeq	r0, r0, r0
    4628:	003c9c00 	eorseq	r9, ip, r0, lsl #24
    462c:	003cf600 	eorseq	pc, ip, r0, lsl #12
    4630:	51000100 	mrspl	r0, (UNDEF: 16)
    4634:	00003cfe 	strdeq	r3, [r0], -lr
    4638:	00003d00 	andeq	r3, r0, r0, lsl #26
    463c:	00510001 	subseq	r0, r1, r1
    4640:	00000000 	andeq	r0, r0, r0
    4644:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    4648:	fc00003c 	stc2	0, cr0, [r0], {60}	; 0x3c
    464c:	0100003c 	tsteq	r0, ip, lsr r0
    4650:	3cfe5200 	lfmcc	f5, 2, [lr]
    4654:	3de00000 	stclcc	0, cr0, [r0]
    4658:	00010000 	andeq	r0, r1, r0
    465c:	00000052 	andeq	r0, r0, r2, asr r0
    4660:	00000000 	andeq	r0, r0, r0
    4664:	003cee00 	eorseq	lr, ip, r0, lsl #28
    4668:	003dd600 	eorseq	sp, sp, r0, lsl #12
    466c:	53000100 	movwpl	r0, #256	; 0x100
	...
    4678:	00003c94 	muleq	r0, r4, ip
    467c:	00003dea 	andeq	r3, r0, sl, ror #27
    4680:	00550001 	subseq	r0, r5, r1
    4684:	00000000 	andeq	r0, r0, r0
    4688:	90000000 	andls	r0, r0, r0
    468c:	1800003c 	stmdane	r0, {r2, r3, r4, r5}
    4690:	0200003d 	andeq	r0, r0, #61	; 0x3d
    4694:	189f3000 	ldmne	pc, {ip, sp}	; <UNPREDICTABLE>
    4698:	4c00003d 	stcmi	0, cr0, [r0], {61}	; 0x3d
    469c:	0100003e 	tsteq	r0, lr, lsr r0
    46a0:	00005400 	andeq	r5, r0, r0, lsl #8
    46a4:	00000000 	andeq	r0, r0, r0
    46a8:	3d100000 	ldccc	0, cr0, [r0, #-0]
    46ac:	3d1a0000 	ldccc	0, cr0, [sl, #-0]
    46b0:	00010000 	andeq	r0, r1, r0
    46b4:	00000051 	andeq	r0, r0, r1, asr r0
    46b8:	00000000 	andeq	r0, r0, r0
    46bc:	003d3800 	eorseq	r3, sp, r0, lsl #16
    46c0:	003d8800 	eorseq	r8, sp, r0, lsl #16
    46c4:	30000200 	andcc	r0, r0, r0, lsl #4
    46c8:	003d889f 	mlaseq	sp, pc, r8, r8	; <UNPREDICTABLE>
    46cc:	003da800 	eorseq	sl, sp, r0, lsl #16
    46d0:	51000100 	mrspl	r0, (UNDEF: 16)
    46d4:	00003da8 	andeq	r3, r0, r8, lsr #27
    46d8:	00003dae 	andeq	r3, r0, lr, lsr #27
    46dc:	9f300002 	svcls	0x00300002
    46e0:	00003dae 	andeq	r3, r0, lr, lsr #27
    46e4:	00003de8 	andeq	r3, r0, r8, ror #27
    46e8:	00510001 	subseq	r0, r1, r1
    46ec:	00000000 	andeq	r0, r0, r0
    46f0:	64000000 	strvs	r0, [r0], #-0
    46f4:	6800003d 	stmdavs	r0, {r0, r2, r3, r4, r5}
    46f8:	0100003d 	tsteq	r0, sp, lsr r0
    46fc:	3d705e00 	ldclcc	14, cr5, [r0, #-0]
    4700:	3d720000 	ldclcc	0, cr0, [r2, #-0]
    4704:	00010000 	andeq	r0, r1, r0
    4708:	003d725e 	eorseq	r7, sp, lr, asr r2
    470c:	003d7800 	eorseq	r7, sp, r0, lsl #16
    4710:	51000100 	mrspl	r0, (UNDEF: 16)
    4714:	00003d78 	andeq	r3, r0, r8, ror sp
    4718:	00003d80 	andeq	r3, r0, r0, lsl #27
    471c:	7f710003 	svcvc	0x00710003
    4720:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4724:	00000000 	andeq	r0, r0, r0
    4728:	003d3800 	eorseq	r3, sp, r0, lsl #16
    472c:	003d6200 	eorseq	r6, sp, r0, lsl #4
    4730:	30000200 	andcc	r0, r0, r0, lsl #4
    4734:	003d629f 	mlaseq	sp, pc, r2, r6	; <UNPREDICTABLE>
    4738:	003d6c00 	eorseq	r6, sp, r0, lsl #24
    473c:	5e000100 	adfpls	f0, f0, f0
    4740:	00003d6c 	andeq	r3, r0, ip, ror #26
    4744:	00003d6e 	andeq	r3, r0, lr, ror #26
    4748:	00710005 	rsbseq	r0, r1, r5
    474c:	6e9f2638 	mrcvs	6, 4, r2, cr15, cr8, {1}
    4750:	7000003d 	andvc	r0, r0, sp, lsr r0
    4754:	0600003d 			; <UNDEFINED> instruction: 0x0600003d
    4758:	06549100 	ldrbeq	r9, [r4], -r0, lsl #2
    475c:	709f2638 	addsvc	r2, pc, r8, lsr r6	; <UNPREDICTABLE>
    4760:	7200003d 	andvc	r0, r0, #61	; 0x3d
    4764:	0100003d 	tsteq	r0, sp, lsr r0
    4768:	3d725e00 	ldclcc	14, cr5, [r2, #-0]
    476c:	3da80000 	stccc	0, cr0, [r8]
    4770:	00060000 	andeq	r0, r6, r0
    4774:	38065491 	stmdacc	r6, {r0, r4, r7, sl, ip, lr}
    4778:	3da89f26 	stccc	15, cr9, [r8, #152]!	; 0x98
    477c:	3dae0000 	stccc	0, cr0, [lr]
    4780:	00020000 	andeq	r0, r2, r0
    4784:	3dae9f30 	stccc	15, cr9, [lr, #192]!	; 0xc0
    4788:	3e180000 	cdpcc	0, 1, cr0, cr8, cr0, {0}
    478c:	00010000 	andeq	r0, r1, r0
    4790:	0000005e 	andeq	r0, r0, lr, asr r0
    4794:	00000000 	andeq	r0, r0, r0
    4798:	003d8400 	eorseq	r8, sp, r0, lsl #8
    479c:	003da800 	eorseq	sl, sp, r0, lsl #16
    47a0:	5c000100 	stfpls	f0, [r0], {-0}
	...
    47ac:	00003db2 			; <UNDEFINED> instruction: 0x00003db2
    47b0:	00003e18 	andeq	r3, r0, r8, lsl lr
    47b4:	005a0001 	subseq	r0, sl, r1
    47b8:	00000000 	andeq	r0, r0, r0
    47bc:	b6000000 	strlt	r0, [r0], -r0
    47c0:	f200003d 	vqadd.s8	d0, d0, d29
    47c4:	0100003d 	tsteq	r0, sp, lsr r0
    47c8:	3df25c00 	ldclcc	12, cr5, [r2]
    47cc:	3df60000 	ldclcc	0, cr0, [r6]
    47d0:	00010000 	andeq	r0, r1, r0
    47d4:	00000051 	andeq	r0, r0, r1, asr r0
    47d8:	00000000 	andeq	r0, r0, r0
    47dc:	003df600 	eorseq	pc, sp, r0, lsl #12
    47e0:	003e0000 	eorseq	r0, lr, r0
    47e4:	71001700 	tstvc	r0, r0, lsl #14
    47e8:	4b401200 	blmi	1008ff0 <__ccfg+0xfe9048>
    47ec:	ff0a2224 			; <UNDEFINED> instruction: 0xff0a2224
    47f0:	401416ff 			; <UNDEFINED> instruction: 0x401416ff
    47f4:	2d22244b 	cfstrscs	mvf2, [r2, #-300]!	; 0xfffffed4
    47f8:	16000128 	strne	r0, [r0], -r8, lsr #2
    47fc:	00009f13 	andeq	r9, r0, r3, lsl pc
    4800:	00000000 	andeq	r0, r0, r0
    4804:	3e200000 	cdpcc	0, 2, cr0, cr0, cr0, {0}
    4808:	3e2c0000 	cdpcc	0, 2, cr0, cr12, cr0, {0}
    480c:	00020000 	andeq	r0, r2, r0
    4810:	3e2c9f30 	mcrcc	15, 1, r9, cr12, cr0, {1}
    4814:	3e4c0000 	cdpcc	0, 4, cr0, cr12, cr0, {0}
    4818:	00010000 	andeq	r0, r1, r0
    481c:	00000051 	andeq	r0, r0, r1, asr r0
    4820:	00000000 	andeq	r0, r0, r0
    4824:	003e2200 	eorseq	r2, lr, r0, lsl #4
    4828:	003e2400 	eorseq	r2, lr, r0, lsl #8
    482c:	53000100 	movwpl	r0, #256	; 0x100
    4830:	00003e24 	andeq	r3, r0, r4, lsr #28
    4834:	00003e2c 	andeq	r3, r0, ip, lsr #28
    4838:	9f4f0002 	svcls	0x004f0002
    483c:	00003e2c 	andeq	r3, r0, ip, lsr #28
    4840:	00003e3c 	andeq	r3, r0, ip, lsr lr
    4844:	3c530001 	mrrccc	0, 0, r0, r3, cr1
    4848:	4000003e 	andmi	r0, r0, lr, lsr r0
    484c:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
    4850:	34007300 	strcc	r7, [r0], #-768	; 0xfffffd00
    4854:	3e409f25 	cdpcc	15, 4, cr9, cr0, cr5, {1}
    4858:	3e440000 	cdpcc	0, 4, cr0, cr4, cr0, {0}
    485c:	00010000 	andeq	r0, r1, r0
    4860:	00000053 	andeq	r0, r0, r3, asr r0
    4864:	00000000 	andeq	r0, r0, r0
    4868:	003d3800 	eorseq	r3, sp, r0, lsl #16
    486c:	003e1800 	eorseq	r1, lr, r0, lsl #16
    4870:	0c000600 	stceq	6, cr0, [r0], {-0}
    4874:	5000139c 	mulpl	r0, ip, r3
    4878:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    487c:	00000000 	andeq	r0, r0, r0
    4880:	003ca400 	eorseq	sl, ip, r0, lsl #8
    4884:	003cb000 	eorseq	fp, ip, r0
    4888:	53000100 	movwpl	r0, #256	; 0x100
	...
    4894:	00003cc4 	andeq	r3, r0, r4, asr #25
    4898:	00003cd0 	ldrdeq	r3, [r0], -r0
    489c:	00520001 	subseq	r0, r2, r1
    48a0:	00000000 	andeq	r0, r0, r0
    48a4:	da000000 	ble	48ac <patchGenfskRfe+0x4dc>
    48a8:	e600003c 			; <UNDEFINED> instruction: 0xe600003c
    48ac:	0100003c 	tsteq	r0, ip, lsr r0
    48b0:	00005200 	andeq	r5, r0, r0, lsl #4
    48b4:	00000000 	andeq	r0, r0, r0
    48b8:	3ce60000 	stclcc	0, cr0, [r6]
    48bc:	3dd60000 	ldclcc	0, cr0, [r6]
    48c0:	00010000 	andeq	r0, r1, r0
    48c4:	00000053 	andeq	r0, r0, r3, asr r0
    48c8:	00000000 	andeq	r0, r0, r0
    48cc:	003e9e00 	eorseq	r9, lr, r0, lsl #28
    48d0:	003ea800 	eorseq	sl, lr, r0, lsl #16
    48d4:	50000100 	andpl	r0, r0, r0, lsl #2
    48d8:	00003ea8 	andeq	r3, r0, r8, lsr #29
    48dc:	00003eb2 			; <UNDEFINED> instruction: 0x00003eb2
    48e0:	0070000e 	rsbseq	r0, r0, lr
    48e4:	16800912 	pkhbtne	r0, r0, r2, lsl #18
    48e8:	01282b14 			; <UNDEFINED> instruction: 0x01282b14
    48ec:	9f131600 	svcls	0x00131600
	...
    48f8:	00003e98 	muleq	r0, r8, lr
    48fc:	00003ec4 	andeq	r3, r0, r4, asr #29
    4900:	00540001 	subseq	r0, r4, r1
    4904:	00000000 	andeq	r0, r0, r0
    4908:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    490c:	ce00003e 	mcrgt	0, 0, r0, cr0, cr14, {1}
    4910:	1500003e 	strne	r0, [r0, #-62]	; 0xffffffc2
    4914:	12007300 	andne	r7, r0, #0, 6
    4918:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    491c:	4014164f 	andsmi	r1, r4, pc, asr #12
    4920:	2d22244b 	cfstrscs	mvf2, [r2, #-300]!	; 0xfffffed4
    4924:	16000128 	strne	r0, [r0], -r8, lsr #2
    4928:	00009f13 	andeq	r9, r0, r3, lsl pc
    492c:	00000000 	andeq	r0, r0, r0
    4930:	3ed40000 	cdpcc	0, 13, cr0, cr4, cr0, {0}
    4934:	3ede0000 	cdpcc	0, 13, cr0, cr14, cr0, {0}
    4938:	00170000 	andseq	r0, r7, r0
    493c:	40120074 	andsmi	r0, r2, r4, ror r0
    4940:	0a22244b 	beq	88da74 <__ccfg+0x86dacc>
    4944:	1416ffff 	ldrne	pc, [r6], #-4095	; 0xfffff001
    4948:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    494c:	0001282d 	andeq	r2, r1, sp, lsr #16
    4950:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    4960:	01000000 	mrseq	r0, (UNDEF: 0)
    4964:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    4974:	00010000 	andeq	r0, r1, r0
    4978:	00000050 	andeq	r0, r0, r0, asr r0
	...
    4988:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    499c:	00530001 	subseq	r0, r3, r1
	...
    49ac:	16000000 	strne	r0, [r0], -r0
    49b0:	08007000 	stmdaeq	r0, {ip, sp, lr}
    49b4:	400070ff 	strdmi	r7, [r0], -pc	; <UNPREDICTABLE>
    49b8:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    49bc:	80000005 	andhi	r0, r0, r5
    49c0:	0001282d 	andeq	r2, r1, sp, lsr #16
    49c4:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
    49c8:	00000000 	andeq	r0, r0, r0
    49cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    49d0:	4a00003f 	bmi	4ad4 <patchImageGenfsk+0x50>
    49d4:	0300003f 	movweq	r0, #63	; 0x3f
    49d8:	9fff0900 	svcls	0x00ff0900
    49dc:	00003f4a 	andeq	r3, r0, sl, asr #30
    49e0:	00003f54 	andeq	r3, r0, r4, asr pc
    49e4:	00500001 	subseq	r0, r0, r1
    49e8:	00000000 	andeq	r0, r0, r0
    49ec:	14000000 	strne	r0, [r0], #-0
    49f0:	2200003f 	andcs	r0, r0, #63	; 0x3f
    49f4:	0100003f 	tsteq	r0, pc, lsr r0
    49f8:	3f265000 	svccc	0x00265000
    49fc:	3f420000 	svccc	0x00420000
    4a00:	00010000 	andeq	r0, r1, r0
    4a04:	003f4450 	eorseq	r4, pc, r0, asr r4	; <UNPREDICTABLE>
    4a08:	003f4600 	eorseq	r4, pc, r0, lsl #12
    4a0c:	50000100 	andpl	r0, r0, r0, lsl #2
    4a10:	00003f48 	andeq	r3, r0, r8, asr #30
    4a14:	00003f4a 	andeq	r3, r0, sl, asr #30
    4a18:	00500001 	subseq	r0, r0, r1
	...
    4a28:	03000000 	movweq	r0, #0
    4a2c:	9fff0900 	svcls	0x00ff0900
	...
    4a38:	00500001 	subseq	r0, r0, r1
	...
    4a48:	01000000 	mrseq	r0, (UNDEF: 0)
    4a4c:	00005400 	andeq	r5, r0, r0, lsl #8
    4a50:	00000000 	andeq	r0, r0, r0
    4a54:	3f540000 	svccc	0x00540000
    4a58:	3f8e0000 	svccc	0x008e0000
    4a5c:	00030000 	andeq	r0, r3, r0
    4a60:	8e9fff09 	cdphi	15, 9, cr15, cr15, cr9, {0}
    4a64:	9200003f 	andls	r0, r0, #63	; 0x3f
    4a68:	0200003f 	andeq	r0, r0, #63	; 0x3f
    4a6c:	929f4400 	addsls	r4, pc, #0, 8
    4a70:	9600003f 			; <UNDEFINED> instruction: 0x9600003f
    4a74:	0200003f 	andeq	r0, r0, #63	; 0x3f
    4a78:	969f4500 	ldrls	r4, [pc], r0, lsl #10
    4a7c:	b400003f 	strlt	r0, [r0], #-63	; 0xffffffc1
    4a80:	0300003f 	movweq	r0, #63	; 0x3f
    4a84:	9fff0900 	svcls	0x00ff0900
    4a88:	00003fb4 			; <UNDEFINED> instruction: 0x00003fb4
    4a8c:	00003fb6 			; <UNDEFINED> instruction: 0x00003fb6
    4a90:	b6500001 	ldrblt	r0, [r0], -r1
    4a94:	b800003f 	stmdalt	r0, {r0, r1, r2, r3, r4, r5}
    4a98:	0300003f 	movweq	r0, #63	; 0x3f
    4a9c:	9fff0900 	svcls	0x00ff0900
    4aa0:	00003fb8 			; <UNDEFINED> instruction: 0x00003fb8
    4aa4:	00003fc0 	andeq	r3, r0, r0, asr #31
    4aa8:	00500001 	subseq	r0, r0, r1
    4aac:	00000000 	andeq	r0, r0, r0
    4ab0:	64000000 	strvs	r0, [r0], #-0
    4ab4:	bc00003f 	stclt	0, cr0, [r0], {63}	; 0x3f
    4ab8:	0100003f 	tsteq	r0, pc, lsr r0
    4abc:	00005400 	andeq	r5, r0, r0, lsl #8
    4ac0:	00000000 	andeq	r0, r0, r0
    4ac4:	3fd80000 	svccc	0x00d80000
    4ac8:	3fe10000 	svccc	0x00e10000
    4acc:	00010000 	andeq	r0, r1, r0
    4ad0:	003fe150 	eorseq	lr, pc, r0, asr r1	; <UNPREDICTABLE>
    4ad4:	003ff600 	eorseq	pc, pc, r0, lsl #12
    4ad8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    4adc:	00003ff6 	strdeq	r3, [r0], -r6
    4ae0:	00003ffa 	strdeq	r3, [r0], -sl
    4ae4:	01f30004 	mvnseq	r0, r4
    4ae8:	3ffa9f50 	svccc	0x00fa9f50
    4aec:	3ffc0000 	svccc	0x00fc0000
    4af0:	00010000 	andeq	r0, r1, r0
    4af4:	003ffc54 	eorseq	pc, pc, r4, asr ip	; <UNPREDICTABLE>
    4af8:	00400000 	subeq	r0, r0, r0
    4afc:	f3000400 	vshl.u8	d0, d0, d0
    4b00:	009f5001 	addseq	r5, pc, r1
    4b04:	00000000 	andeq	r0, r0, r0
    4b08:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    4b0c:	e100003f 	tst	r0, pc, lsr r0
    4b10:	0100003f 	tsteq	r0, pc, lsr r0
    4b14:	3fe15100 	svccc	0x00e15100
    4b18:	3ff60000 	svccc	0x00f60000
    4b1c:	00010000 	andeq	r0, r1, r0
    4b20:	003ff655 	eorseq	pc, pc, r5, asr r6	; <UNPREDICTABLE>
    4b24:	003ffa00 	eorseq	pc, pc, r0, lsl #20
    4b28:	f3000400 	vshl.u8	d0, d0, d0
    4b2c:	fa9f5101 	blx	fe7d8f38 <_estack+0xde7d3f38>
    4b30:	fc00003f 	stc2	0, cr0, [r0], {63}	; 0x3f
    4b34:	0100003f 	tsteq	r0, pc, lsr r0
    4b38:	3ffc5500 	svccc	0x00fc5500
    4b3c:	40000000 	andmi	r0, r0, r0
    4b40:	00040000 	andeq	r0, r4, r0
    4b44:	9f5101f3 	svcls	0x005101f3
	...
    4b50:	00003fe2 	andeq	r3, r0, r2, ror #31
    4b54:	00003ff9 	strdeq	r3, [r0], -r9
    4b58:	00700005 	rsbseq	r0, r0, r5
    4b5c:	fa9f2930 	blx	fe7cf024 <_estack+0xde7ca024>
    4b60:	0000003f 	andeq	r0, r0, pc, lsr r0
    4b64:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    4b68:	30007000 	andcc	r7, r0, r0
    4b6c:	00009f29 	andeq	r9, r0, r9, lsr #30
    4b70:	00000000 	andeq	r0, r0, r0
    4b74:	40000000 	andmi	r0, r0, r0
    4b78:	40020000 	andmi	r0, r2, r0
    4b7c:	00010000 	andeq	r0, r1, r0
    4b80:	00400250 	subeq	r0, r0, r0, asr r2
    4b84:	00400800 	subeq	r0, r0, r0, lsl #16
    4b88:	f3000400 	vshl.u8	d0, d0, d0
    4b8c:	009f5001 	addseq	r5, pc, r1
	...
    4b98:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
    4b9c:	01000040 	tsteq	r0, r0, asr #32
    4ba0:	40045100 	andmi	r5, r4, r0, lsl #2
    4ba4:	40080000 	andmi	r0, r8, r0
    4ba8:	00040000 	andeq	r0, r4, r0
    4bac:	9f5101f3 	svcls	0x005101f3
	...
    4bb8:	00004000 	andeq	r4, r0, r0
    4bbc:	00004007 	andeq	r4, r0, r7
    4bc0:	07520001 	ldrbeq	r0, [r2, -r1]
    4bc4:	08000040 	stmdaeq	r0, {r6}
    4bc8:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
    4bcc:	5201f300 	andpl	pc, r1, #0, 6
    4bd0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4be0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4bec:	01f30004 	mvnseq	r0, r4
    4bf0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    4c00:	00010000 	andeq	r0, r1, r0
    4c04:	00000051 	andeq	r0, r0, r1, asr r0
    4c08:	00000000 	andeq	r0, r0, r0
    4c0c:	f3000400 	vshl.u8	d0, d0, d0
    4c10:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    4c20:	01000000 	mrseq	r0, (UNDEF: 0)
    4c24:	00005200 	andeq	r5, r0, r0, lsl #4
    4c28:	00000000 	andeq	r0, r0, r0
    4c2c:	00040000 	andeq	r0, r4, r0
    4c30:	9f5201f3 	svcls	0x005201f3
	...
    4c3c:	00520001 	subseq	r0, r2, r1
    4c40:	00000000 	andeq	r0, r0, r0
    4c44:	15000000 	strne	r0, [r0, #-0]
    4c48:	5201f300 	andpl	pc, r1, #0, 6
    4c4c:	01f32540 	mvnseq	r2, r0, asr #10
    4c50:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
    4c54:	2e302540 	cfneg32cs	mvfx2, mvfx0
    4c58:	16000128 	strne	r0, [r0], -r8, lsr #2
    4c5c:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4c6c:	00010000 	andeq	r0, r1, r0
    4c70:	00000053 	andeq	r0, r0, r3, asr r0
    4c74:	00000000 	andeq	r0, r0, r0
    4c78:	f3000400 	vshl.u8	d0, d0, d0
    4c7c:	009f5301 	addseq	r5, pc, r1, lsl #6
	...
    4c8c:	04000000 	streq	r0, [r0], #-0
    4c90:	04807000 	streq	r7, [r0], #0
    4c94:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4c98:	00000000 	andeq	r0, r0, r0
    4c9c:	f3000d00 	vpadd.f32	d0, d0, d0
    4ca0:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4ca4:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4ca8:	9f048023 	svcls	0x00048023
	...
    4cb4:	00500001 	subseq	r0, r0, r1
    4cb8:	00000000 	andeq	r0, r0, r0
    4cbc:	52000000 	andpl	r0, r0, #0
    4cc0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4cc4:	01f32431 	mvnseq	r2, r1, lsr r4
    4cc8:	80232250 	eorhi	r2, r3, r0, asr r2
    4ccc:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    4cd0:	01f32431 	mvnseq	r2, r1, lsr r4
    4cd4:	01f32250 	mvnseq	r2, r0, asr r2
    4cd8:	30254052 	eorcc	r4, r5, r2, asr r0
    4cdc:	00012829 	andeq	r2, r1, r9, lsr #16
    4ce0:	84231316 	strthi	r1, [r3], #-790	; 0xfffffcea
    4ce4:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    4ce8:	01f32431 	mvnseq	r2, r1, lsr r4
    4cec:	80232250 	eorhi	r2, r3, r0, asr r2
    4cf0:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    4cf4:	01f32431 	mvnseq	r2, r1, lsr r4
    4cf8:	01f32250 	mvnseq	r2, r0, asr r2
    4cfc:	30254052 	eorcc	r4, r5, r2, asr r0
    4d00:	00012829 	andeq	r2, r1, r9, lsr #16
    4d04:	01f31316 	mvnseq	r1, r6, lsl r3
    4d08:	30254052 	eorcc	r4, r5, r2, asr r0
    4d0c:	0001282e 	andeq	r2, r1, lr, lsr #16
    4d10:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    4d20:	01000000 	mrseq	r0, (UNDEF: 0)
    4d24:	00005100 	andeq	r5, r0, r0, lsl #2
    4d28:	00000000 	andeq	r0, r0, r0
    4d2c:	002f0000 	eoreq	r0, pc, r0
    4d30:	5201f330 	andpl	pc, r1, #48, 6	; 0xc0000000
    4d34:	01f32540 	mvnseq	r2, r0, asr #10
    4d38:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
    4d3c:	2e302540 	cfneg32cs	mvfx2, mvfx0
    4d40:	16000128 	strne	r0, [r0], -r8, lsr #2
    4d44:	5201f313 	andpl	pc, r1, #1275068416	; 0x4c000000
    4d48:	01f32540 	mvnseq	r2, r0, asr #10
    4d4c:	282e3053 	stmdacs	lr!, {r0, r1, r4, r6, ip, sp}
    4d50:	13160001 	tstne	r6, #1
    4d54:	305301f3 	ldrshcc	r0, [r3], #-19	; 0xffffffed
    4d58:	00012829 	andeq	r2, r1, r9, lsr #16
    4d5c:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    4d6c:	01000000 	mrseq	r0, (UNDEF: 0)
    4d70:	00005000 	andeq	r5, r0, r0
    4d74:	00000000 	andeq	r0, r0, r0
    4d78:	00040000 	andeq	r0, r4, r0
    4d7c:	9f5001f3 	svcls	0x005001f3
	...
    4d90:	00510001 	subseq	r0, r1, r1
    4d94:	00000000 	andeq	r0, r0, r0
    4d98:	04000000 	streq	r0, [r0], #-0
    4d9c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4da0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4db0:	52000100 	andpl	r0, r0, #0, 2
	...
    4dbc:	01f30004 	mvnseq	r0, r4
    4dc0:	00009f52 	andeq	r9, r0, r2, asr pc
    4dc4:	00000000 	andeq	r0, r0, r0
    4dc8:	00010000 	andeq	r0, r1, r0
    4dcc:	00000052 	andeq	r0, r0, r2, asr r0
    4dd0:	00000000 	andeq	r0, r0, r0
    4dd4:	f3001b00 	vqrdmulh.s<illegal width 8>	d1, d0, d0
    4dd8:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    4ddc:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    4de0:	4b405301 	blmi	10199ec <__ccfg+0xff9a44>
    4de4:	0f0c2224 	svceq	0x000c2224
    4de8:	2b800000 	blcs	fe004df0 <_estack+0xddfffdf0>
    4dec:	16000128 	strne	r0, [r0], -r8, lsr #2
    4df0:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4e00:	00010000 	andeq	r0, r1, r0
    4e04:	00000053 	andeq	r0, r0, r3, asr r0
    4e08:	00000000 	andeq	r0, r0, r0
    4e0c:	f3000400 	vshl.u8	d0, d0, d0
    4e10:	009f5301 	addseq	r5, pc, r1, lsl #6
    4e14:	00000000 	andeq	r0, r0, r0
    4e18:	01000000 	mrseq	r0, (UNDEF: 0)
    4e1c:	00005300 	andeq	r5, r0, r0, lsl #6
    4e20:	00000000 	andeq	r0, r0, r0
    4e24:	001b0000 	andseq	r0, fp, r0
    4e28:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    4e2c:	5301f31c 	movwpl	pc, #4892	; 0x131c	; <UNPREDICTABLE>
    4e30:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    4e34:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    4e38:	8000000f 	andhi	r0, r0, pc
    4e3c:	0001282b 	andeq	r2, r1, fp, lsr #16
    4e40:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    4e50:	02000000 	andeq	r0, r0, #0
    4e54:	00009100 	andeq	r9, r0, r0, lsl #2
    4e58:	00000000 	andeq	r0, r0, r0
    4e5c:	02000000 	andeq	r0, r0, #0
    4e60:	00007d00 	andeq	r7, r0, r0, lsl #26
	...
    4e70:	04000000 	streq	r0, [r0], #-0
    4e74:	04807000 	streq	r7, [r0], #0
    4e78:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4e7c:	00000000 	andeq	r0, r0, r0
    4e80:	f3000d00 	vpadd.f32	d0, d0, d0
    4e84:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4e88:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4e8c:	9f048023 	svcls	0x00048023
	...
    4e98:	00500001 	subseq	r0, r0, r1
    4e9c:	00000000 	andeq	r0, r0, r0
    4ea0:	64000000 	strvs	r0, [r0], #-0
    4ea4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4ea8:	01f32431 	mvnseq	r2, r1, lsr r4
    4eac:	80232250 	eorhi	r2, r3, r0, asr r2
    4eb0:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    4eb4:	01f32431 	mvnseq	r2, r1, lsr r4
    4eb8:	01f32250 	mvnseq	r2, r0, asr r2
    4ebc:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    4ec0:	000f0c22 	andeq	r0, pc, r2, lsr #24
    4ec4:	282c8000 	stmdacs	ip!, {pc}
    4ec8:	13160001 	tstne	r6, #1
    4ecc:	f3048423 	vshl.u8	d8, d19, d4
    4ed0:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4ed4:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4ed8:	f3048023 	vhadd.u8	d8, d4, d19
    4edc:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4ee0:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4ee4:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    4ee8:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    4eec:	8000000f 	andhi	r0, r0, pc
    4ef0:	0001282c 	andeq	r2, r1, ip, lsr #16
    4ef4:	01f31316 	mvnseq	r1, r6, lsl r3
    4ef8:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    4efc:	000f0c22 	andeq	r0, pc, r2, lsr #24
    4f00:	282b8000 	stmdacs	fp!, {pc}
    4f04:	13160001 	tstne	r6, #1
    4f08:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4f18:	74000a00 	strvc	r0, [r0], #-2560	; 0xfffff600
    4f1c:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    4f20:	2400731a 	strcs	r7, [r0], #-794	; 0xfffffce6
    4f24:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4f28:	00000000 	andeq	r0, r0, r0
    4f2c:	7d000c00 	stcvc	12, cr0, [r0, #-0]
    4f30:	0a029400 	beq	a9f38 <__ccfg+0x89f90>
    4f34:	731affff 	tstvc	sl, #1020	; 0x3fc	; <UNPREDICTABLE>
    4f38:	009f2400 	addseq	r2, pc, r0, lsl #8
    4f3c:	00000000 	andeq	r0, r0, r0
    4f40:	24000000 	strcs	r0, [r0], #-0
    4f44:	94007d00 	strls	r7, [r0], #-3328	; 0xfffff300
    4f48:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    4f4c:	5301f31a 	movwpl	pc, #4890	; 0x131a	; <UNPREDICTABLE>
    4f50:	01f31c40 	mvnseq	r1, r0, asr #24
    4f54:	5301f353 	movwpl	pc, #4947	; 0x1353	; <UNPREDICTABLE>
    4f58:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4f5c:	00000f0c 	andeq	r0, r0, ip, lsl #30
    4f60:	01282b80 	smlawbeq	r8, r0, fp, r2
    4f64:	24131600 	ldrcs	r1, [r3], #-1536	; 0xfffffa00
    4f68:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4f78:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4f84:	01f30004 	mvnseq	r0, r4
    4f88:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    4f98:	00010000 	andeq	r0, r1, r0
    4f9c:	00000051 	andeq	r0, r0, r1, asr r0
    4fa0:	00000000 	andeq	r0, r0, r0
    4fa4:	f3000400 	vshl.u8	d0, d0, d0
    4fa8:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    4fb8:	01000000 	mrseq	r0, (UNDEF: 0)
    4fbc:	00005200 	andeq	r5, r0, r0, lsl #4
    4fc0:	00000000 	andeq	r0, r0, r0
    4fc4:	00010000 	andeq	r0, r1, r0
    4fc8:	00000054 	andeq	r0, r0, r4, asr r0
    4fcc:	00000000 	andeq	r0, r0, r0
    4fd0:	f3001500 	vrshl.u8	d1, d0, d0
    4fd4:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    4fd8:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    4fdc:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    4fe0:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    4fe4:	9f131600 	svcls	0x00131600
	...
    4ff8:	00550001 	subseq	r0, r5, r1
    4ffc:	00000000 	andeq	r0, r0, r0
    5000:	1d000000 	stcne	0, cr0, [r0, #-0]
    5004:	5001f300 	andpl	pc, r1, r0, lsl #6
    5008:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    500c:	01f30223 	mvnseq	r0, r3, lsr #4
    5010:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    5014:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
    5018:	2e302540 	cfneg32cs	mvfx2, mvfx0
    501c:	16000128 	strne	r0, [r0], -r8, lsr #2
    5020:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    5030:	00060000 	andeq	r0, r6, r0
    5034:	00740075 	rsbseq	r0, r4, r5, ror r0
    5038:	00009f1a 	andeq	r9, r0, sl, lsl pc
	...
    5048:	00010000 	andeq	r0, r1, r0
    504c:	00000055 	andeq	r0, r0, r5, asr r0
    5050:	00000000 	andeq	r0, r0, r0
    5054:	f3001d00 	vpadd.f32	d1, d0, d0
    5058:	01f35001 	mvnseq	r5, r1
    505c:	02232251 	eoreq	r2, r3, #268435461	; 0x10000005
    5060:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    5064:	f3225101 	vrhadd.u32	d5, d2, d1
    5068:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    506c:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    5070:	9f131600 	svcls	0x00131600
	...
    5084:	00750007 	rsbseq	r0, r5, r7
    5088:	1affff0a 	bne	4cb8 <patchImageGenfsk+0x234>
    508c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    509c:	70000500 	andvc	r0, r0, r0, lsl #10
    50a0:	9f293000 	svcls	0x00293000
	...
    50b4:	00500001 	subseq	r0, r0, r1
    50b8:	00000000 	andeq	r0, r0, r0
    50bc:	04000000 	streq	r0, [r0], #-0
    50c0:	5001f300 	andpl	pc, r1, r0, lsl #6
    50c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    50d4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    50e0:	01f30004 	mvnseq	r0, r4
    50e4:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    50f4:	00010000 	andeq	r0, r1, r0
    50f8:	00000052 	andeq	r0, r0, r2, asr r0
    50fc:	00000000 	andeq	r0, r0, r0
    5100:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    510c:	01f3001b 	mvnseq	r0, fp, lsl r0
    5110:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    5114:	01f35201 	mvnseq	r5, r1, lsl #4
    5118:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    511c:	000f0c22 	andeq	r0, pc, r2, lsr #24
    5120:	282b8000 	stmdacs	fp!, {pc}
    5124:	13160001 	tstne	r6, #1
    5128:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5138:	53000100 	movwpl	r0, #256	; 0x100
	...
    5144:	00550001 	subseq	r0, r5, r1
    5148:	00000000 	andeq	r0, r0, r0
    514c:	1b000000 	blne	5154 <__exidx_end+0x400>
    5150:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    5154:	01f31c40 	mvnseq	r1, r0, asr #24
    5158:	5301f353 	movwpl	pc, #4947	; 0x1353	; <UNPREDICTABLE>
    515c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    5160:	00000f0c 	andeq	r0, r0, ip, lsl #30
    5164:	01282b80 	smlawbeq	r8, r0, fp, r2
    5168:	9f131600 	svcls	0x00131600
	...
    517c:	00560001 	subseq	r0, r6, r1
    5180:	00000000 	andeq	r0, r0, r0
    5184:	06000000 	streq	r0, [r0], -r0
    5188:	71007000 	mrsvc	r7, (UNDEF: 0)
    518c:	009f2200 	addseq	r2, pc, r0, lsl #4
    5190:	00000000 	andeq	r0, r0, r0
    5194:	01000000 	mrseq	r0, (UNDEF: 0)
    5198:	00005600 	andeq	r5, r0, r0, lsl #12
    519c:	00000000 	andeq	r0, r0, r0
    51a0:	00230000 	eoreq	r0, r3, r0
    51a4:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    51a8:	23225101 			; <UNDEFINED> instruction: 0x23225101
    51ac:	5001f302 	andpl	pc, r1, r2, lsl #6
    51b0:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    51b4:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    51b8:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    51bc:	8000000f 	andhi	r0, r0, pc
    51c0:	0001282b 	andeq	r2, r1, fp, lsr #16
    51c4:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    51d4:	06000000 	streq	r0, [r0], -r0
    51d8:	74007600 	strvc	r7, [r0], #-1536	; 0xfffffa00
    51dc:	009f1a00 	addseq	r1, pc, r0, lsl #20
    51e0:	00000000 	andeq	r0, r0, r0
    51e4:	01000000 	mrseq	r0, (UNDEF: 0)
    51e8:	00005000 	andeq	r5, r0, r0
	...
    51f8:	00010000 	andeq	r0, r1, r0
    51fc:	00000056 	andeq	r0, r0, r6, asr r0
    5200:	00000000 	andeq	r0, r0, r0
    5204:	f3002300 	vcgt.u8	d2, d0, d0
    5208:	01f35001 	mvnseq	r5, r1
    520c:	02232251 	eoreq	r2, r3, #268435461	; 0x10000005
    5210:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    5214:	f3225101 	vrhadd.u32	d5, d2, d1
    5218:	4b405301 	blmi	1019e24 <__ccfg+0xff9e7c>
    521c:	0f0c2224 	svceq	0x000c2224
    5220:	2b800000 	blcs	fe005228 <_estack+0xde000228>
    5224:	16000128 	strne	r0, [r0], -r8, lsr #2
    5228:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    5238:	00070000 	andeq	r0, r7, r0
    523c:	ff0a0076 			; <UNDEFINED> instruction: 0xff0a0076
    5240:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
	...
    5250:	05000000 	streq	r0, [r0, #-0]
    5254:	30007000 	andcc	r7, r0, r0
    5258:	00009f29 	andeq	r9, r0, r9, lsr #30
	...
    5270:	00520000 	subseq	r0, r2, r0
    5274:	00010000 	andeq	r0, r1, r0
    5278:	00005251 	andeq	r5, r0, r1, asr r2
    527c:	00009600 	andeq	r9, r0, r0, lsl #12
    5280:	f3000400 	vshl.u8	d0, d0, d0
    5284:	969f5101 	ldrls	r5, [pc], r1, lsl #2
    5288:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    528c:	01000000 	mrseq	r0, (UNDEF: 0)
    5290:	00985100 	addseq	r5, r8, r0, lsl #2
    5294:	00a00000 	adceq	r0, r0, r0
    5298:	00040000 	andeq	r0, r4, r0
    529c:	9f5101f3 	svcls	0x005101f3
    52a0:	000000a0 	andeq	r0, r0, r0, lsr #1
    52a4:	000000a6 	andeq	r0, r0, r6, lsr #1
    52a8:	a6510001 	ldrbge	r0, [r1], -r1
    52ac:	aa000000 	bge	52b4 <__exidx_end+0x560>
    52b0:	04000000 	streq	r0, [r0], #-0
    52b4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    52b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    52c4:	00000202 	andeq	r0, r0, r2, lsl #4
    52c8:	00000000 	andeq	r0, r0, r0
    52cc:	00000101 	andeq	r0, r0, r1, lsl #2
	...
    52ec:	00002a00 	andeq	r2, r0, r0, lsl #20
    52f0:	52000100 	andpl	r0, r0, #0, 2
    52f4:	0000002a 	andeq	r0, r0, sl, lsr #32
    52f8:	00000040 	andeq	r0, r0, r0, asr #32
    52fc:	00710009 	rsbseq	r0, r1, r9
    5300:	74220072 	strtvc	r0, [r2], #-114	; 0xffffff8e
    5304:	409f1c00 	addsmi	r1, pc, r0, lsl #24
    5308:	42000000 	andmi	r0, r0, #0
    530c:	0b000000 	bleq	5314 <__exidx_end+0x5c0>
    5310:	72007100 	andvc	r7, r0, #0, 2
    5314:	00742200 	rsbseq	r2, r4, r0, lsl #4
    5318:	9f1c401c 	svcls	0x001c401c
    531c:	00000042 	andeq	r0, r0, r2, asr #32
    5320:	0000004c 	andeq	r0, r0, ip, asr #32
    5324:	00710009 	rsbseq	r0, r1, r9
    5328:	74220072 	strtvc	r0, [r2], #-114	; 0xffffff8e
    532c:	569f1c00 	ldrpl	r1, [pc], r0, lsl #24
    5330:	5a000000 	bpl	5338 <__exidx_end+0x5e4>
    5334:	01000000 	mrseq	r0, (UNDEF: 0)
    5338:	005a5300 	subseq	r5, sl, r0, lsl #6
    533c:	005e0000 	subseq	r0, lr, r0
    5340:	00060000 	andeq	r0, r6, r0
    5344:	00760073 	rsbseq	r0, r6, r3, ror r0
    5348:	005e9f1c 	subseq	r9, lr, ip, lsl pc
    534c:	00600000 	rsbeq	r0, r0, r0
    5350:	00080000 	andeq	r0, r8, r0
    5354:	00760073 	rsbseq	r0, r6, r3, ror r0
    5358:	9f1c341c 	svcls	0x001c341c
    535c:	00000060 	andeq	r0, r0, r0, rrx
    5360:	0000006a 	andeq	r0, r0, sl, rrx
    5364:	00730006 	rsbseq	r0, r3, r6
    5368:	9f1c0076 	svcls	0x001c0076
    536c:	0000006a 	andeq	r0, r0, sl, rrx
    5370:	00000072 	andeq	r0, r0, r2, ror r0
    5374:	00720008 	rsbseq	r0, r2, r8
    5378:	00761a3f 	rsbseq	r1, r6, pc, lsr sl
    537c:	00729f1c 	rsbseq	r9, r2, ip, lsl pc
    5380:	00760000 	rsbseq	r0, r6, r0
    5384:	00090000 	andeq	r0, r9, r0
    5388:	3f5201f3 	svccc	0x005201f3
    538c:	1c00761a 	stcne	6, cr7, [r0], {26}
    5390:	0000769f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    5394:	00007800 	andeq	r7, r0, r0, lsl #16
    5398:	52000100 	andpl	r0, r0, #0, 2
    539c:	00000078 	andeq	r0, r0, r8, ror r0
    53a0:	00000080 	andeq	r0, r0, r0, lsl #1
    53a4:	80560001 	subshi	r0, r6, r1
    53a8:	82000000 	andhi	r0, r0, #0
    53ac:	07000000 	streq	r0, [r0, -r0]
    53b0:	20007300 	andcs	r7, r0, r0, lsl #6
    53b4:	9f220076 	svcls	0x00220076
    53b8:	00000082 	andeq	r0, r0, r2, lsl #1
    53bc:	00000088 	andeq	r0, r0, r8, lsl #1
    53c0:	00760006 	rsbseq	r0, r6, r6
    53c4:	9f1c0073 	svcls	0x001c0073
    53c8:	00000088 	andeq	r0, r0, r8, lsl #1
    53cc:	0000008c 	andeq	r0, r0, ip, lsl #1
    53d0:	00730007 	rsbseq	r0, r3, r7
    53d4:	22007620 	andcs	r7, r0, #32, 12	; 0x2000000
    53d8:	0000969f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    53dc:	00009a00 	andeq	r9, r0, r0, lsl #20
    53e0:	52000100 	andpl	r0, r0, #0, 2
    53e4:	0000009a 	muleq	r0, sl, r0
    53e8:	000000a0 	andeq	r0, r0, r0, lsr #1
    53ec:	a0560001 	subsge	r0, r6, r1
    53f0:	a2000000 	andge	r0, r0, #0
    53f4:	01000000 	mrseq	r0, (UNDEF: 0)
    53f8:	00a25200 	adceq	r5, r2, r0, lsl #4
    53fc:	00a60000 	adceq	r0, r6, r0
    5400:	00010000 	andeq	r0, r1, r0
    5404:	0000a656 	andeq	sl, r0, r6, asr r6
    5408:	0000aa00 	andeq	sl, r0, r0, lsl #20
    540c:	53000100 	movwpl	r0, #256	; 0x100
	...
    5418:	00000002 	andeq	r0, r0, r2
    541c:	01000000 	mrseq	r0, (UNDEF: 0)
    5420:	00000001 	andeq	r0, r0, r1
	...
    542c:	00000076 	andeq	r0, r0, r6, ror r0
    5430:	76500001 	ldrbvc	r0, [r0], -r1
    5434:	80000000 	andhi	r0, r0, r0
    5438:	01000000 	mrseq	r0, (UNDEF: 0)
    543c:	00805500 	addeq	r5, r0, r0, lsl #10
    5440:	00820000 	addeq	r0, r2, r0
    5444:	00080000 	andeq	r0, r8, r0
    5448:	00730075 	rsbseq	r0, r3, r5, ror r0
    544c:	9f012322 	svcls	0x00012322
    5450:	00000082 	andeq	r0, r0, r2, lsl #1
    5454:	00000082 	andeq	r0, r0, r2, lsl #1
    5458:	00750006 	rsbseq	r0, r5, r6
    545c:	9f220073 	svcls	0x00220073
    5460:	00000082 	andeq	r0, r0, r2, lsl #1
    5464:	0000008c 	andeq	r0, r0, ip, lsl #1
    5468:	00750008 	rsbseq	r0, r5, r8
    546c:	23220073 			; <UNDEFINED> instruction: 0x23220073
    5470:	00969f01 	addseq	r9, r6, r1, lsl #30
    5474:	00980000 	addseq	r0, r8, r0
    5478:	00010000 	andeq	r0, r1, r0
    547c:	00009850 	andeq	r9, r0, r0, asr r8
    5480:	0000a000 	andeq	sl, r0, r0
    5484:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    5488:	000000a0 	andeq	r0, r0, r0, lsr #1
    548c:	000000aa 	andeq	r0, r0, sl, lsr #1
    5490:	00500001 	subseq	r0, r0, r1
    5494:	00000000 	andeq	r0, r0, r0
    5498:	03000000 	movweq	r0, #0
	...
    54a4:	00000101 	andeq	r0, r0, r1, lsl #2
    54a8:	00000000 	andeq	r0, r0, r0
    54ac:	52000000 	andpl	r0, r0, #0
    54b0:	01000000 	mrseq	r0, (UNDEF: 0)
    54b4:	00525100 	subseq	r5, r2, r0, lsl #2
    54b8:	00760000 	rsbseq	r0, r6, r0
    54bc:	00040000 	andeq	r0, r4, r0
    54c0:	9f5101f3 	svcls	0x005101f3
    54c4:	00000076 	andeq	r0, r0, r6, ror r0
    54c8:	00000080 	andeq	r0, r0, r0, lsl #1
    54cc:	80510001 	subshi	r0, r1, r1
    54d0:	82000000 	andhi	r0, r0, #0
    54d4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    54d8:	73007100 	movwvc	r7, #256	; 0x100
    54dc:	01232200 			; <UNDEFINED> instruction: 0x01232200
    54e0:	0000829f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    54e4:	00008200 	andeq	r8, r0, r0, lsl #4
    54e8:	71000600 	tstvc	r0, r0, lsl #12
    54ec:	22007300 	andcs	r7, r0, #0, 6
    54f0:	0000829f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    54f4:	00008c00 	andeq	r8, r0, r0, lsl #24
    54f8:	71000800 	tstvc	r0, r0, lsl #16
    54fc:	22007300 	andcs	r7, r0, #0, 6
    5500:	969f0123 	ldrls	r0, [pc], r3, lsr #2
    5504:	a6000000 	strge	r0, [r0], -r0
    5508:	01000000 	mrseq	r0, (UNDEF: 0)
    550c:	00a65100 	adceq	r5, r6, r0, lsl #2
    5510:	00aa0000 	adceq	r0, sl, r0
    5514:	00040000 	andeq	r0, r4, r0
    5518:	9f5101f3 	svcls	0x005101f3
	...
    5524:	01010100 	mrseq	r0, (UNDEF: 17)
    5528:	01020201 	tsteq	r2, r1, lsl #4
    552c:	00000001 	andeq	r0, r0, r1
    5530:	01000000 	mrseq	r0, (UNDEF: 0)
    5534:	00000001 	andeq	r0, r0, r1
    5538:	00000000 	andeq	r0, r0, r0
    553c:	0000002a 	andeq	r0, r0, sl, lsr #32
    5540:	0000002c 	andeq	r0, r0, ip, lsr #32
    5544:	00700009 	rsbseq	r0, r0, r9
    5548:	741c0071 	ldrvc	r0, [ip], #-113	; 0xffffff8f
    554c:	2c9f2200 	lfmcs	f2, 4, [pc], {0}
    5550:	3a000000 	bcc	5558 <__exidx_end+0x804>
    5554:	0b000000 	bleq	555c <__exidx_end+0x808>
    5558:	71007000 	mrsvc	r7, (UNDEF: 0)
    555c:	00741c00 	rsbseq	r1, r4, r0, lsl #24
    5560:	9f042322 	svcls	0x00042322
    5564:	0000003a 	andeq	r0, r0, sl, lsr r0
    5568:	0000003a 	andeq	r0, r0, sl, lsr r0
    556c:	0070000b 	rsbseq	r0, r0, fp
    5570:	741c0071 	ldrvc	r0, [ip], #-113	; 0xffffff8f
    5574:	08232200 	stmdaeq	r3!, {r9, sp}
    5578:	00003a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    557c:	00004000 	andeq	r4, r0, r0
    5580:	70000b00 	andvc	r0, r0, r0, lsl #22
    5584:	1c007100 	stfnes	f7, [r0], {-0}
    5588:	23220074 			; <UNDEFINED> instruction: 0x23220074
    558c:	00409f0c 	subeq	r9, r0, ip, lsl #30
    5590:	00420000 	subeq	r0, r2, r0
    5594:	000b0000 	andeq	r0, fp, r0
    5598:	00710070 	rsbseq	r0, r1, r0, ror r0
    559c:	2200741c 	andcs	r7, r0, #28, 8	; 0x1c000000
    55a0:	429f1023 	addsmi	r1, pc, #35	; 0x23
    55a4:	4c000000 	stcmi	0, cr0, [r0], {-0}
    55a8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    55ac:	71007000 	mrsvc	r7, (UNDEF: 0)
    55b0:	00741c00 	rsbseq	r1, r4, r0, lsl #24
    55b4:	00569f22 	subseq	r9, r6, r2, lsr #30
    55b8:	005a0000 	subseq	r0, sl, r0
    55bc:	00010000 	andeq	r0, r1, r0
    55c0:	00005a55 	andeq	r5, r0, r5, asr sl
    55c4:	00005a00 	andeq	r5, r0, r0, lsl #20
    55c8:	75000600 	strvc	r0, [r0, #-1536]	; 0xfffffa00
    55cc:	22007600 	andcs	r7, r0, #0, 12
    55d0:	00005a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    55d4:	00006000 	andeq	r6, r0, r0
    55d8:	75000800 	strvc	r0, [r0, #-2048]	; 0xfffff800
    55dc:	22007600 	andcs	r7, r0, #0, 12
    55e0:	609f0423 	addsvs	r0, pc, r3, lsr #8
    55e4:	74000000 	strvc	r0, [r0], #-0
    55e8:	06000000 	streq	r0, [r0], -r0
    55ec:	76007500 	strvc	r7, [r0], -r0, lsl #10
    55f0:	749f2200 	ldrvc	r2, [pc], #512	; 55f8 <__exidx_end+0x8a4>
    55f4:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    55f8:	0b000000 	bleq	5600 <__exidx_end+0x8ac>
    55fc:	34017c00 	strcc	r7, [r1], #-3072	; 0xfffff400
    5600:	22007024 	andcs	r7, r0, #36	; 0x24
    5604:	9f220076 	svcls	0x00220076
    5608:	000000a6 	andeq	r0, r0, r6, lsr #1
    560c:	000000aa 	andeq	r0, r0, sl, lsr #1
    5610:	00550001 	subseq	r0, r5, r1
	...
    561c:	01010101 	tsteq	r1, r1, lsl #2
    5620:	01010202 	tsteq	r1, r2, lsl #4
    5624:	00000000 	andeq	r0, r0, r0
    5628:	01010000 	mrseq	r0, (UNDEF: 1)
    562c:	00000000 	andeq	r0, r0, r0
    5630:	2a000000 	bcs	5638 <__exidx_end+0x8e4>
    5634:	2c000000 	stccs	0, cr0, [r0], {-0}
    5638:	01000000 	mrseq	r0, (UNDEF: 0)
    563c:	002c5400 	eoreq	r5, ip, r0, lsl #8
    5640:	003a0000 	eorseq	r0, sl, r0
    5644:	00030000 	andeq	r0, r3, r0
    5648:	3a9f0474 	bcc	fe7c6820 <_estack+0xde7c1820>
    564c:	3a000000 	bcc	5654 <__exidx_end+0x900>
    5650:	03000000 	movweq	r0, #0
    5654:	9f087400 	svcls	0x00087400
    5658:	0000003a 	andeq	r0, r0, sl, lsr r0
    565c:	00000040 	andeq	r0, r0, r0, asr #32
    5660:	0c740003 	ldcleq	0, cr0, [r4], #-12
    5664:	0000409f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5668:	00004200 	andeq	r4, r0, r0, lsl #4
    566c:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
    5670:	00429f10 	subeq	r9, r2, r0, lsl pc
    5674:	004c0000 	subeq	r0, ip, r0
    5678:	00010000 	andeq	r0, r1, r0
    567c:	00005454 	andeq	r5, r0, r4, asr r4
    5680:	00005a00 	andeq	r5, r0, r0, lsl #20
    5684:	51000100 	mrspl	r0, (UNDEF: 16)
    5688:	0000005a 	andeq	r0, r0, sl, asr r0
    568c:	0000005a 	andeq	r0, r0, sl, asr r0
    5690:	00710006 	rsbseq	r0, r1, r6
    5694:	9f220076 	svcls	0x00220076
    5698:	0000005a 	andeq	r0, r0, sl, asr r0
    569c:	00000060 	andeq	r0, r0, r0, rrx
    56a0:	00710008 	rsbseq	r0, r1, r8
    56a4:	23220076 			; <UNDEFINED> instruction: 0x23220076
    56a8:	00609f04 	rsbeq	r9, r0, r4, lsl #30
    56ac:	00760000 	rsbseq	r0, r6, r0
    56b0:	00060000 	andeq	r0, r6, r0
    56b4:	00760071 	rsbseq	r0, r6, r1, ror r0
    56b8:	00769f22 	rsbseq	r9, r6, r2, lsr #30
    56bc:	00780000 	rsbseq	r0, r8, r0
    56c0:	000c0000 	andeq	r0, ip, r0
    56c4:	2434017c 	ldrtcs	r0, [r4], #-380	; 0xfffffe84
    56c8:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    56cc:	9f220076 	svcls	0x00220076
    56d0:	000000a6 	andeq	r0, r0, r6, lsr #1
    56d4:	000000aa 	andeq	r0, r0, sl, lsr #1
    56d8:	00510001 	subseq	r0, r1, r1
    56dc:	00000000 	andeq	r0, r0, r0
    56e0:	Address 0x00000000000056e0 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000034 	andeq	r0, r0, r4, lsr r0
   4:	00000002 	andeq	r0, r0, r2
}
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	000000c8 	andeq	r0, r0, r8, asr #1
  14:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  18:	00000178 	andeq	r0, r0, r8, ror r1
  1c:	00000070 	andeq	r0, r0, r0, ror r0
  20:	00000000 	andeq	r0, r0, r0
  24:	0000000c 	andeq	r0, r0, ip
  28:	000001e8 	andeq	r0, r0, r8, ror #3
  2c:	000001a8 	andeq	r0, r0, r8, lsr #3
	...
  38:	000000e4 	andeq	r0, r0, r4, ror #1
  3c:	090c0002 	stmdbeq	ip, {r1}
			i = k;
  40:	00040000 	andeq	r0, r4, r0
				j->Next = k;
  44:	00000000 	andeq	r0, r0, r0
  48:	00000390 	muleq	r0, r0, r3
}
  4c:	0000000c 	andeq	r0, r0, ip
  50:	0000039c 	muleq	r0, ip, r3
  54:	0000002c 	andeq	r0, r0, ip, lsr #32
		release;
  58:	000003c8 	andeq	r0, r0, r8, asr #7
  5c:	0000002a 	andeq	r0, r0, sl, lsr #32
			nq++;
  60:	000003f4 	strdeq	r0, [r0], -r4
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
  64:	0000003c 	andeq	r0, r0, ip, lsr r0
  68:	00000430 	andeq	r0, r0, r0, lsr r4
  6c:	00000040 	andeq	r0, r0, r0, asr #32
  70:	00000000 	andeq	r0, r0, r0
  74:	00000020 	andeq	r0, r0, r0, lsr #32
  78:	00000470 	andeq	r0, r0, r0, ror r4
  7c:	00000054 	andeq	r0, r0, r4, asr r0
  80:	000004c4 	andeq	r0, r0, r4, asr #9
  84:	00000040 	andeq	r0, r0, r0, asr #32
  88:	00000504 	andeq	r0, r0, r4, lsl #10
  8c:	00000028 	andeq	r0, r0, r8, lsr #32
	if (!button_still_pressed (__button_list [pbutton]))
  90:	0000052c 	andeq	r0, r0, ip, lsr #10
  94:	00000114 	andeq	r0, r0, r4, lsl r1
  98:	00000640 	andeq	r0, r0, r0, asr #12
	if (baction == NULL)
  9c:	00000050 	andeq	r0, r0, r0, asr r0
  a0:	00000690 	muleq	r0, r0, r6
	(*baction) (pbutton);
  a4:	00000054 	andeq	r0, r0, r4, asr r0
endthread
  a8:	000006e4 	andeq	r0, r0, r4, ror #13
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
  ac:	00000038 	andeq	r0, r0, r8, lsr r0
  b0:	0000071c 	andeq	r0, r0, ip, lsl r7
endthread
  b4:	00000110 	andeq	r0, r0, r0, lsl r1
  b8:	00000000 	andeq	r0, r0, r0
  bc:	0000000c 	andeq	r0, r0, ip
  c0:	0000082c 	andeq	r0, r0, ip, lsr #16
  c4:	000000c0 	andeq	r0, r0, r0, asr #1
fsm receiver {
  c8:	000008ec 	andeq	r0, r0, ip, ror #17
  cc:	00000044 	andeq	r0, r0, r4, asr #32
  d0:	00000930 	andeq	r0, r0, r0, lsr r9
  d4:	0000003c 	andeq	r0, r0, ip, lsr r0
        packet = tcv_rnp(Receiving, sfd);
  d8:	0000096c 	andeq	r0, r0, ip, ror #18
  dc:	000000a4 	andeq	r0, r0, r4, lsr #1
  e0:	00000a10 	andeq	r0, r0, r0, lsl sl
  e4:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
        receivedMessage = (message *)(packet + 1);
  e8:	00000bc8 	andeq	r0, r0, r8, asr #23
  ec:	00000024 	andeq	r0, r0, r4, lsr #32
        if(receivedMessage->receiverId == nodeId) {
  f0:	00000000 	andeq	r0, r0, r0
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
  f8:	00000bec 	andeq	r0, r0, ip, ror #23
            proceed From_Broadcast;
  fc:	00000258 	andeq	r0, r0, r8, asr r2
        proceed Receiving;
 100:	00000e44 	andeq	r0, r0, r4, asr #28
 104:	00000030 	andeq	r0, r0, r0, lsr r0
        ser_outf(Get_Message, "Message ");
 108:	00000000 	andeq	r0, r0, r0
 10c:	0000005c 	andeq	r0, r0, ip, asr r0
        proceed Show_Message;
 110:	00000e74 	andeq	r0, r0, r4, ror lr
        ser_outf(From_Broadcast, "Broadcast ");
 114:	00000060 	andeq	r0, r0, r0, rrx
	...
        ser_outf(Show_Message, "from node %d (Seq %d): %s\n\r", receivedMessage->senderId, receivedMessage->sequenceNumber, receivedMessage->payload);
 120:	00000154 	andeq	r0, r0, r4, asr r1
 124:	1d9c0002 	ldcne	0, cr0, [ip, #8]
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
        tcv_endp(packet);
 130:	00000ed4 	ldrdeq	r0, [r0], -r4
 134:	0000003c 	andeq	r0, r0, ip, lsr r0
        proceed Receiving;
 138:	00000f10 	andeq	r0, r0, r0, lsl pc
}
 13c:	00000080 	andeq	r0, r0, r0, lsl #1
        proceed Receiving;
 140:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
        } else if (receivedMessage->receiverId == '0' || receivedMessage->receiverId == 0) {
 144:	00000018 	andeq	r0, r0, r8, lsl r0
 148:	00000000 	andeq	r0, r0, r0
            proceed From_Broadcast;
 14c:	00000024 	andeq	r0, r0, r4, lsr #32
}
 150:	00000fa8 	andeq	r0, r0, r8, lsr #31
 154:	00000010 	andeq	r0, r0, r0, lsl r0
 158:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
 15c:	0000002c 	andeq	r0, r0, ip, lsr #32
 160:	00000000 	andeq	r0, r0, r0
 164:	0000004c 	andeq	r0, r0, ip, asr #32
 168:	00000fe4 	andeq	r0, r0, r4, ror #31
 16c:	00000006 	andeq	r0, r0, r6
 170:	00000fec 	andeq	r0, r0, ip, ror #31
 174:	000000cc 	andeq	r0, r0, ip, asr #1
fsm transmitter (message * messagePtr) {
 178:	000010b8 	strheq	r1, [r0], -r8
 17c:	00000014 	andeq	r0, r0, r4, lsl r0
 180:	000010cc 	andeq	r1, r0, ip, asr #1
}
 184:	00000034 	andeq	r0, r0, r4, lsr r0
 188:	00001100 	andeq	r1, r0, r0, lsl #2
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
 18c:	00000034 	andeq	r0, r0, r4, lsr r0
 190:	00000000 	andeq	r0, r0, r0
 194:	0000002c 	andeq	r0, r0, ip, lsr #32
 198:	00001134 	andeq	r1, r0, r4, lsr r1
 19c:	00000024 	andeq	r0, r0, r4, lsr #32
        *p = messagePtr->senderId; p++;
 1a0:	00001158 	andeq	r1, r0, r8, asr r1
 1a4:	00000038 	andeq	r0, r0, r8, lsr r0
        strcpy(p, messagePtr->payload);
 1a8:	00000000 	andeq	r0, r0, r0
        *p = messagePtr->receiverId; p++;
 1ac:	00000014 	andeq	r0, r0, r4, lsl r0
        *p = messagePtr->sequenceNumber; p++;
 1b0:	00000000 	andeq	r0, r0, r0
        strcpy(p, messagePtr->payload);
 1b4:	00000040 	andeq	r0, r0, r0, asr #32
        tcv_endp (spkt);
 1b8:	00000000 	andeq	r0, r0, r0
 1bc:	00000018 	andeq	r0, r0, r8, lsl r0
        sequence++;
 1c0:	00001190 	muleq	r0, r0, r1
 1c4:	00000024 	andeq	r0, r0, r4, lsr #32
        ser_outf(Transmit_Message, "Message Sent\n\r");
 1c8:	00000000 	andeq	r0, r0, r0
 1cc:	00000020 	andeq	r0, r0, r0, lsr #32
}
 1d0:	000011b4 			; <UNDEFINED> instruction: 0x000011b4
        finish;
 1d4:	0000000e 	andeq	r0, r0, lr
 1d8:	000011c2 	andeq	r1, r0, r2, asr #3
 1dc:	00000010 	andeq	r0, r0, r0, lsl r0
 1e0:	00000000 	andeq	r0, r0, r0
 1e4:	0000001c 	andeq	r0, r0, ip, lsl r0
fsm root {
 1e8:	00000000 	andeq	r0, r0, r0
 1ec:	00000010 	andeq	r0, r0, r0, lsl r0
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	00000006 	andeq	r0, r0, r6
 1f8:	000011d2 	ldrdeq	r1, [r0], -r2
 1fc:	00000014 	andeq	r0, r0, r4, lsl r0
        nodeId = 1;
 200:	000011e6 	andeq	r1, r0, r6, ror #3
 204:	0000000e 	andeq	r0, r0, lr
 208:	000011f4 	strdeq	r1, [r0], -r4
        sfd = tcv_open(WNONE, 0, 0);
 20c:	00000024 	andeq	r0, r0, r4, lsr #32
        messagePtr = (message *) umalloc(sizeof(message));
 210:	00001218 	andeq	r1, r0, r8, lsl r2
 214:	0000009c 	muleq	r0, ip, r0
 218:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
        phys_cc1350(0, MAX_PACKET_LENGTH);
 21c:	00000050 	andeq	r0, r0, r0, asr r0
        tcv_plug(0, &plug_null);
 220:	00001304 	andeq	r1, r0, r4, lsl #6
 224:	00000048 	andeq	r0, r0, r8, asr #32
        sfd = tcv_open(WNONE, 0, 0);
 228:	0000134c 	andeq	r1, r0, ip, asr #6
 22c:	00000050 	andeq	r0, r0, r0, asr r0
 230:	00000000 	andeq	r0, r0, r0
		tcv_control(sfd, PHYSOPT_ON, NULL);
 234:	00000058 	andeq	r0, r0, r8, asr r0
        sfd = tcv_open(WNONE, 0, 0);
 238:	0000139c 	muleq	r0, ip, r3
		tcv_control(sfd, PHYSOPT_ON, NULL);
 23c:	000000a8 	andeq	r0, r0, r8, lsr #1
		if (sfd < 0) {
 240:	00001444 	andeq	r1, r0, r4, asr #8
			diag("Cannot open tcv interface");
 244:	00000034 	andeq	r0, r0, r4, lsr r0
 248:	00001478 	andeq	r1, r0, r8, ror r4
			halt();
 24c:	00000018 	andeq	r0, r0, r8, lsl r0
        runfsm receiver;
 250:	00000000 	andeq	r0, r0, r0
 254:	00000030 	andeq	r0, r0, r0, lsr r0
        receiverId = 0;
 258:	00000000 	andeq	r0, r0, r0
 25c:	00000038 	andeq	r0, r0, r8, lsr r0
        ser_outf(Menu_Start, "P2P Chat (Node #%d)\n\r", nodeId);
 260:	00001490 	muleq	r0, r0, r4
 264:	0000013c 	andeq	r0, r0, ip, lsr r1
        ser_outf(Menu_Choices, menuText);
 268:	000015cc 	andeq	r1, r0, ip, asr #11
 26c:	00000024 	andeq	r0, r0, r4, lsr #32
	...
        ser_inf(Choice, "%c", &choice);
 278:	00000104 	andeq	r0, r0, r4, lsl #2
        switch (choice)
 27c:	2fbf0002 	svccs	0x00bf0002
 280:	00040000 	andeq	r0, r4, r0
 284:	00000000 	andeq	r0, r0, r0
 288:	000015f0 	strdeq	r1, [r0], -r0
 28c:	00000016 	andeq	r0, r0, r6, lsl r0
 290:	00001606 	andeq	r1, r0, r6, lsl #12
                proceed Menu_Start;
 294:	0000001a 	andeq	r0, r0, sl, lsl r0
 298:	00001620 	andeq	r1, r0, r0, lsr #12
 29c:	0000000e 	andeq	r0, r0, lr
                proceed Direct_Transmission;
 2a0:	00001630 	andeq	r1, r0, r0, lsr r6
                proceed Menu_Start;
 2a4:	0000004c 	andeq	r0, r0, ip, asr #32
        ser_outf(Change_ID, "New node ID (1-25):");
 2a8:	0000167c 	andeq	r1, r0, ip, ror r6
 2ac:	0000008c 	andeq	r0, r0, ip, lsl #1
        ser_inf(Get_New_ID, "%d", &nodeId);
 2b0:	00001708 	andeq	r1, r0, r8, lsl #14
 2b4:	00000070 	andeq	r0, r0, r0, ror r0
 2b8:	00001778 	andeq	r1, r0, r8, ror r7
    if (node < 1 || node > 25) {
 2bc:	000000c0 	andeq	r0, r0, r0, asr #1
 2c0:	00000000 	andeq	r0, r0, r0
            proceed Change_ID;
 2c4:	0000006c 	andeq	r0, r0, ip, rrx
 2c8:	00001838 	andeq	r1, r0, r8, lsr r8
        proceed Menu_Start;
 2cc:	00000024 	andeq	r0, r0, r4, lsr #32
        ser_outf(Direct_Transmission, "Receiver node ID (1-25):");
 2d0:	0000185c 	andeq	r1, r0, ip, asr r8
 2d4:	00000080 	andeq	r0, r0, r0, lsl #1
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
 2d8:	00000000 	andeq	r0, r0, r0
 2dc:	00000070 	andeq	r0, r0, r0, ror r0
 2e0:	00000000 	andeq	r0, r0, r0
    if (node < 1 || node > 25) {
 2e4:	00000078 	andeq	r0, r0, r8, ror r0
 2e8:	000018dc 	ldrdeq	r1, [r0], -ip
            proceed Direct_Transmission;
 2ec:	000000bc 	strheq	r0, [r0], -ip
 2f0:	00000000 	andeq	r0, r0, r0
        ser_outf(Broadcast_Transmission, "Message: ");
 2f4:	0000003a 	andeq	r0, r0, sl, lsr r0
 2f8:	00000000 	andeq	r0, r0, r0
        ser_in(Get_Message, messagePtr->payload, PAYLOAD_LENGTH);
 2fc:	00000038 	andeq	r0, r0, r8, lsr r0
 300:	00000000 	andeq	r0, r0, r0
 304:	0000000a 	andeq	r0, r0, sl
        if(strlen(messagePtr->payload) > PAYLOAD_LENGTH) {
 308:	00001998 	muleq	r0, r8, r9
 30c:	0000002c 	andeq	r0, r0, ip, lsr #32
 310:	000019c4 	andeq	r1, r0, r4, asr #19
            messagePtr->payload[PAYLOAD_LENGTH - 1] = '/0';
 314:	00000060 	andeq	r0, r0, r0, rrx
 318:	00000000 	andeq	r0, r0, r0
        call transmitter(messagePtr, Menu_Start);
 31c:	00000040 	andeq	r0, r0, r0, asr #32
        messagePtr->senderId = nodeId;
 320:	00000000 	andeq	r0, r0, r0
 324:	0000002c 	andeq	r0, r0, ip, lsr #32
        messagePtr->receiverId = receiverId;
 328:	00000000 	andeq	r0, r0, r0
        messagePtr->sequenceNumber = sequence;
 32c:	0000003c 	andeq	r0, r0, ip, lsr r0
 330:	00000000 	andeq	r0, r0, r0
        call transmitter(messagePtr, Menu_Start);
 334:	00000006 	andeq	r0, r0, r6
 338:	00001a24 	andeq	r1, r0, r4, lsr #20
 33c:	00000068 	andeq	r0, r0, r8, rrx
 340:	00001a8c 	andeq	r1, r0, ip, lsl #21
                proceed Broadcast_Transmission;
 344:	00000050 	andeq	r0, r0, r0, asr r0
 348:	00001adc 	ldrdeq	r1, [r0], -ip
 34c:	0000009c 	muleq	r0, ip, r0
 350:	00001b78 	andeq	r1, r0, r8, ror fp
 354:	00000040 	andeq	r0, r0, r0, asr #32
 358:	00001bb8 			; <UNDEFINED> instruction: 0x00001bb8
 35c:	00000034 	andeq	r0, r0, r4, lsr r0
 360:	00001bec 	andeq	r1, r0, ip, ror #23
 364:	0000003c 	andeq	r0, r0, ip, lsr r0
 368:	00000000 	andeq	r0, r0, r0
 36c:	0000003c 	andeq	r0, r0, ip, lsr r0
 370:	00001c28 	andeq	r1, r0, r8, lsr #24
 374:	00000002 	andeq	r0, r0, r2
	...
 380:	00000034 	andeq	r0, r0, r4, lsr r0
 384:	42f60002 	rscsmi	r0, r6, #2
 388:	00040000 	andeq	r0, r4, r0
 38c:	00000000 	andeq	r0, r0, r0
static void devinit_uart (int devnum) {
 390:	00001c2a 	andeq	r1, r0, sl, lsr #24
	adddevfunc (ioreq_uart_a, devnum);
 394:	00000002 	andeq	r0, r0, r2
 398:	00001c2c 	andeq	r1, r0, ip, lsr #24
void udelay (volatile word n) {
 39c:	00000002 	andeq	r0, r0, r2
 3a0:	00001c2e 	andeq	r1, r0, lr, lsr #24
	while (n) {
 3a4:	00000002 	andeq	r0, r0, r2
 3a8:	00001c30 	andeq	r1, r0, r0, lsr ip
}
 3ac:	00000044 	andeq	r0, r0, r4, asr #32
	...
	while (n--);
 3b8:	00000014 	andeq	r0, r0, r4, lsl r0
		n--;
 3bc:	446e0002 	strbtmi	r0, [lr], #-2
 3c0:	00040000 	andeq	r0, r4, r0
	...
	while (n) {
 3d0:	00000024 	andeq	r0, r0, r4, lsr #32
 3d4:	49a90002 	stmibmi	r9!, {r1}
}
 3d8:	00040000 	andeq	r0, r4, r0
	...
		n--;
 3e4:	00000002 	andeq	r0, r0, r2
 3e8:	00000000 	andeq	r0, r0, r0
 3ec:	00000058 	andeq	r0, r0, r8, asr r0
	...
void __pi_ondomain (lword d) {
 3f8:	00000024 	andeq	r0, r0, r4, lsr #32
		if (__pi_systat.effpdm > 1)
 3fc:	4ead0002 	cdpmi	0, 10, cr0, cr13, cr2, {0}
 400:	00040000 	andeq	r0, r4, r0
	...
	PRCMPowerDomainOn (d);
 40c:	000000cc 	andeq	r0, r0, ip, asr #1
 410:	00000000 	andeq	r0, r0, r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
 414:	00000038 	andeq	r0, r0, r8, lsr r0
	...
	__pi_systat.ondmns |= d;
 420:	0000008c 	andeq	r0, r0, ip, lsl #1
 424:	53a70002 			; <UNDEFINED> instruction: 0x53a70002
}
 428:	00040000 	andeq	r0, r4, r0
 42c:	00000000 	andeq	r0, r0, r0
void __pi_offdomain (lword d) {
 430:	00001c7c 	andeq	r1, r0, ip, ror ip
 434:	00000034 	andeq	r0, r0, r4, lsr r0
	PRCMPowerDomainOff (d);
 438:	00001cb0 			; <UNDEFINED> instruction: 0x00001cb0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
 43c:	00000030 	andeq	r0, r0, r0, lsr r0
 440:	00001ce0 	andeq	r1, r0, r0, ror #25
 444:	00000018 	andeq	r0, r0, r8, lsl r0
	if (d & PRCM_DOMAIN_RFCORE) {
 448:	00001cf8 	strdeq	r1, [r0], -r8
 44c:	00000054 	andeq	r0, r0, r4, asr r0
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
 450:	00001d4c 	andeq	r1, r0, ip, asr #26
 454:	00000040 	andeq	r0, r0, r0, asr #32
			__pi_systat.effpdm = __pi_systat.reqpdm;
 458:	00001d8c 	andeq	r1, r0, ip, lsl #27
 45c:	00000024 	andeq	r0, r0, r4, lsr #32
	__pi_systat.ondmns &= ~d;
 460:	00001db0 			; <UNDEFINED> instruction: 0x00001db0
 464:	00000014 	andeq	r0, r0, r4, lsl r0
}
 468:	00001dc4 	andeq	r1, r0, r4, asr #27
 46c:	00000014 	andeq	r0, r0, r4, lsl r0
void __pi_syserror (word ec, const char *m) {
 470:	00000000 	andeq	r0, r0, r0
	diag ("SYSERR: %x, %s", ec, m);
 474:	00000064 	andeq	r0, r0, r4, rrx
 478:	00000000 	andeq	r0, r0, r0
  __ASM volatile ("cpsid i" : : : "memory");
 47c:	00000128 	andeq	r0, r0, r8, lsr #2
 480:	00000000 	andeq	r0, r0, r0
 484:	000000ec 	andeq	r0, r0, ip, ror #1
 488:	00000000 	andeq	r0, r0, r0
		all_leds_blink;
 48c:	00000002 	andeq	r0, r0, r2
 490:	00000000 	andeq	r0, r0, r0
 494:	00000004 	andeq	r0, r0, r4
 498:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 49c:	00000014 	andeq	r0, r0, r4, lsl r0
 4a0:	00000000 	andeq	r0, r0, r0
 4a4:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
 4b0:	0000001c 	andeq	r0, r0, ip, lsl r0
	while (1) {
 4b4:	5e520002 	cdppl	0, 5, cr0, cr2, cr2, {0}
 4b8:	00040000 	andeq	r0, r4, r0
 4bc:	00000000 	andeq	r0, r0, r0
 4c0:	00001dd8 	ldrdeq	r1, [r0], -r8
void tci_run_delay_timer () {
 4c4:	00000078 	andeq	r0, r0, r8, ror r0
	...
	setdel = __pi_mintk - __pi_old;
 4d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d4:	62680002 	rsbvs	r0, r8, #2
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 4d8:	00040000 	andeq	r0, r4, r0
 4dc:	00000000 	andeq	r0, r0, r0
 4e0:	00001e50 	andeq	r1, r0, r0, asr lr
 4e4:	00000054 	andeq	r0, r0, r4, asr r0
	...
}
 4f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f4:	66b80002 	ldrtvs	r0, [r8], r2
 4f8:	00040000 	andeq	r0, r4, r0
 4fc:	00000000 	andeq	r0, r0, r0
 500:	00001ea4 	andeq	r1, r0, r4, lsr #29
	cli_aux;
 504:	00000060 	andeq	r0, r0, r0, rrx
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 510:	0000006c 	andeq	r0, r0, ip, rrx
 514:	6b080002 	blvs	200524 <__ccfg+0x1e057c>
 518:	00040000 	andeq	r0, r4, r0
	sti_aux;
 51c:	00000000 	andeq	r0, r0, r0
}
 520:	00001f04 	andeq	r1, r0, r4, lsl #30
 524:	00000020 	andeq	r0, r0, r0, lsr #32
 528:	00001f24 	andeq	r1, r0, r4, lsr #30
void AONRTCIntHandler () {
 52c:	00000190 	muleq	r0, r0, r1
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
 530:	000020b4 	strheq	r2, [r0], -r4
 534:	00000048 	andeq	r0, r0, r8, asr #32
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
 538:	000020fc 	strdeq	r2, [r0], -ip
		if (__pi_utims [0] == 0)
 53c:	00000024 	andeq	r0, r0, r4, lsr #32
 540:	00002120 	andeq	r2, r0, r0, lsr #2
		if (*(__pi_utims [0])) {
 544:	0000005c 	andeq	r0, r0, ip, asr r0
 548:	0000217c 	andeq	r2, r0, ip, ror r1
			(*(__pi_utims [0]))--;
 54c:	00000038 	andeq	r0, r0, r8, lsr r0
		if (__pi_utims [1] == 0)
 550:	000021b4 			; <UNDEFINED> instruction: 0x000021b4
		if (*(__pi_utims [1])) {
 554:	00000180 	andeq	r0, r0, r0, lsl #3
			aux_timer_inactive = 0;
 558:	00002334 	andeq	r2, r0, r4, lsr r3
			(*(__pi_utims [1]))--;
 55c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		if (__pi_utims [2] == 0)
 560:	00002404 	andeq	r2, r0, r4, lsl #8
		if (*(__pi_utims [2])) {
 564:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
			(*(__pi_utims [2]))--;
 568:	000025f4 	strdeq	r2, [r0], -r4
		if (__pi_utims [3] != 0) {
 56c:	00000070 	andeq	r0, r0, r0, ror r0
			if (*(__pi_utims [3])) {
 570:	00002664 	andeq	r2, r0, r4, ror #12
				aux_timer_inactive = 0;
 574:	00000174 	andeq	r0, r0, r4, ror r1
	...
	if (__pi_systat.ledsts) {
 580:	00000044 	andeq	r0, r0, r4, asr #32
		if (__pi_systat.ledblc++ == 0) {
 584:	8f800002 	svchi	0x00800002
 588:	00040000 	andeq	r0, r4, r0
			if (__pi_systat.ledblk) {
 58c:	00000000 	andeq	r0, r0, r0
 590:	000027d8 	ldrdeq	r2, [r0], -r8
 594:	00000024 	andeq	r0, r0, r4, lsr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 598:	000027fc 	strdeq	r2, [r0], -ip
 59c:	00000024 	andeq	r0, r0, r4, lsr #32
				if (__pi_systat.ledsts & 0x2)
 5a0:	00002820 	andeq	r2, r0, r0, lsr #16
 5a4:	00000008 	andeq	r0, r0, r8
 5a8:	00002828 	andeq	r2, r0, r8, lsr #16
				if (__pi_systat.ledsts & 0x4)
 5ac:	00000004 	andeq	r0, r0, r4
				__pi_systat.ledblk = 0;
 5b0:	0000282c 	andeq	r2, r0, ip, lsr #16
 5b4:	00000004 	andeq	r0, r0, r4
			if (__pi_systat.fstblk)
 5b8:	00002830 	andeq	r2, r0, r0, lsr r8
 5bc:	00000048 	andeq	r0, r0, r8, asr #32
	...
		cli_tim;
 5c8:	0000001c 	andeq	r0, r0, ip, lsl r0
		__pi_new += setdel;
 5cc:	96b50002 	ldrtls	r0, [r5], r2
 5d0:	00040000 	andeq	r0, r4, r0
		setdel = 0;
 5d4:	00000000 	andeq	r0, r0, r0
		RISE_N_SHINE;
 5d8:	00002878 	andeq	r2, r0, r8, ror r8
		__pi_new += setdel;
 5dc:	00000070 	andeq	r0, r0, r0, ror r0
	...
		aux_timer_inactive = 1;
 5e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5ec:	9ae60002 	bls	ff9805fc <_estack+0xdf97b5fc>
				if (__pi_systat.ledsts & 0x1)
 5f0:	00040000 	andeq	r0, r4, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 5f4:	00000000 	andeq	r0, r0, r0
 5f8:	000028e8 	andeq	r2, r0, r8, ror #17
				if (__pi_systat.ledsts & 0x2)
 5fc:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
				if (__pi_systat.ledsts & 0x8)
 608:	0000002c 	andeq	r0, r0, ip, lsr #32
				__pi_systat.ledblk = 1;
 60c:	9f2a0002 	svcls	0x002a0002
 610:	00040000 	andeq	r0, r4, r0
		if (aux_timer_inactive) {
 614:	00000000 	andeq	r0, r0, r0
			cli_aux;
 618:	00002a04 	andeq	r2, r0, r4, lsl #20
 61c:	00000020 	andeq	r0, r0, r0, lsr #32
 620:	00002a24 	andeq	r2, r0, r4, lsr #20
 624:	00000230 	andeq	r0, r0, r0, lsr r2
 628:	00002c54 	andeq	r2, r0, r4, asr ip
 62c:	00000050 	andeq	r0, r0, r0, asr r0
	...
 638:	0000001c 	andeq	r0, r0, ip, lsl r0
 63c:	a51e0002 	ldrge	r0, [lr, #-2]
word tci_update_delay_ticks (Boolean force) {
 640:	00040000 	andeq	r0, r4, r0
	cli_tim;
 644:	00000000 	andeq	r0, r0, r0
 648:	00002ca4 	andeq	r2, r0, r4, lsr #25
	if (setdel) {
 64c:	00000390 	muleq	r0, r0, r3
	...
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
 658:	00000014 	andeq	r0, r0, r4, lsl r0
 65c:	aab10002 	bge	fec4066c <_estack+0xdec3b66c>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 660:	00040000 	andeq	r0, r4, r0
	...
 670:	00000024 	andeq	r0, r0, r4, lsr #32
 674:	ca9f0002 	bgt	fe7c0684 <_estack+0xde7bb684>
}
 678:	00040000 	andeq	r0, r4, r0
		sti_tim;
 67c:	00000000 	andeq	r0, r0, r0
		return YES;
 680:	00003034 	andeq	r3, r0, r4, lsr r0
 684:	00000028 	andeq	r0, r0, r8, lsr #32
 688:	00000000 	andeq	r0, r0, r0
 68c:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
 698:	0000001c 	andeq	r0, r0, ip, lsl r0
	UARTDisable (UART0_BASE);
 69c:	cc2d0002 	stcgt	0, cr0, [sp], #-8
	UARTConfigSetExpClk (UART0_BASE,
 6a0:	00040000 	andeq	r0, r4, r0
 6a4:	00000000 	andeq	r0, r0, r0
 6a8:	0000305c 	andeq	r3, r0, ip, asr r0
 6ac:	00000030 	andeq	r0, r0, r0, lsr r0
	...
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 6b8:	00000024 	andeq	r0, r0, r4, lsr #32
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
 6bc:	cd060002 	stcgt	0, cr0, [r6, #-8]
 6c0:	00040000 	andeq	r0, r4, r0
 6c4:	00000000 	andeq	r0, r0, r0
	urates [0] = rate;
 6c8:	0000308c 	andeq	r3, r0, ip, lsl #1
}
 6cc:	00000020 	andeq	r0, r0, r0, lsr #32
 6d0:	000030ac 	andeq	r3, r0, ip, lsr #1
 6d4:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 6e0:	0000003c 	andeq	r0, r0, ip, lsr r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 6e4:	ce4d0002 	cdpgt	0, 4, cr0, cr13, cr2, {0}
 6e8:	00040000 	andeq	r0, r4, r0
 6ec:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
 6f0:	000030c4 	andeq	r3, r0, r4, asr #1
 6f4:	00000008 	andeq	r0, r0, r8
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
 6f8:	00000000 	andeq	r0, r0, r0
 6fc:	00000006 	andeq	r0, r0, r6
	__pi_uart_setrate (urates [0], __pi_uart);
 700:	000030cc 	andeq	r3, r0, ip, asr #1
 704:	00000008 	andeq	r0, r0, r8
 708:	00000000 	andeq	r0, r0, r0
 70c:	00000006 	andeq	r0, r0, r6
 710:	00000000 	andeq	r0, r0, r0
 714:	00000008 	andeq	r0, r0, r8
	...
static int ioreq_uart_a (int operation, char *buf, int len) {
 720:	00000064 	andeq	r0, r0, r4, rrx
 724:	cf870002 	svcgt	0x00870002
 728:	00040000 	andeq	r0, r4, r0
 72c:	00000000 	andeq	r0, r0, r0
 730:	000030d4 	ldrdeq	r3, [r0], -r4
				*buf++ = uart_a_read;
 734:	0000005c 	andeq	r0, r0, ip, asr r0
 738:	00003130 	andeq	r3, r0, r0, lsr r1
			while (len && uart_a_char_available) {
 73c:	0000002c 	andeq	r0, r0, ip, lsr #32
 740:	00000000 	andeq	r0, r0, r0
 744:	00000090 	muleq	r0, r0, r0
			if (len != operation) {
 748:	0000315c 	andeq	r3, r0, ip, asr r1
}
 74c:	00000018 	andeq	r0, r0, r8, lsl r0
 750:	00003174 	andeq	r3, r0, r4, ror r1
			uart_a_disable_int;
 754:	00000060 	andeq	r0, r0, r0, rrx
			if (uart_a_char_available) {
 758:	000031d4 	ldrdeq	r3, [r0], -r4
				*buf++ = uart_a_read;
 75c:	00000034 	andeq	r0, r0, r4, lsr r0
			uart_a_disable_int;
 760:	00000000 	andeq	r0, r0, r0
 764:	00000038 	andeq	r0, r0, r8, lsr r0
			if (uart_a_char_available) {
 768:	00000000 	andeq	r0, r0, r0
 76c:	0000000c 	andeq	r0, r0, ip
				uart_a_enable_int;
 770:	00000000 	andeq	r0, r0, r0
 774:	00000034 	andeq	r0, r0, r4, lsr r0
				goto Redo_rx;
 778:	00000000 	andeq	r0, r0, r0
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
 77c:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
			return -2;
 788:	00000054 	andeq	r0, r0, r4, asr r0
				uart_a_write (*buf);
 78c:	d84a0002 	stmdale	sl, {r1}^
 790:	00040000 	andeq	r0, r4, r0
	...
			while (len && uart_a_room_in_tx) {
 79c:	00000014 	andeq	r0, r0, r4, lsl r0
			if (len != operation) {
 7a0:	00003208 	andeq	r3, r0, r8, lsl #4
			uart_a_disable_int;
 7a4:	00000028 	andeq	r0, r0, r8, lsr #32
 7a8:	00003230 	andeq	r3, r0, r0, lsr r2
			if (uart_a_room_in_tx) {
 7ac:	0000004c 	andeq	r0, r0, ip, asr #32
 7b0:	0000327c 	andeq	r3, r0, ip, ror r2
				uart_a_enable_int;
 7b4:	00000150 	andeq	r0, r0, r0, asr r1
 7b8:	000033cc 	andeq	r3, r0, ip, asr #7
				*buf++ = uart_a_read;
 7bc:	00000118 	andeq	r0, r0, r8, lsl r1
			if (uart_a_room_in_tx) {
 7c0:	000034e4 	andeq	r3, r0, r4, ror #9
				uart_a_write (*buf);
 7c4:	00000020 	andeq	r0, r0, r0, lsr #32
 7c8:	00000000 	andeq	r0, r0, r0
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
 7cc:	00000060 	andeq	r0, r0, r0, rrx
 7d0:	00003504 	andeq	r3, r0, r4, lsl #10
			uart_a_enable_int;
 7d4:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
			return 0;
 7e0:	00000024 	andeq	r0, r0, r4, lsr #32
			if (len == UART_CNTRL_SETRATE) {
 7e4:	e3020002 	movw	r0, #8194	; 0x2002
				if (__pi_uart_setrate (*((word*)buf),
 7e8:	00040000 	andeq	r0, r4, r0
 7ec:	00000000 	andeq	r0, r0, r0
 7f0:	00003520 	andeq	r3, r0, r0, lsr #10
				syserror (EREQPAR, "uar");
 7f4:	000000d4 	ldrdeq	r0, [r0], -r4
			syserror (ENOOPER, "uai");
 7f8:	000035f4 	strdeq	r3, [r0], -r4
			if (len == UART_CNTRL_GETRATE) {
 7fc:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
			syserror (ENOOPER, "uai");
 808:	000000b4 	strheq	r0, [r0], -r4
 80c:	e50d0002 	str	r0, [sp, #-2]
 810:	00040000 	andeq	r0, r4, r0
 814:	00000000 	andeq	r0, r0, r0
 818:	00003698 	muleq	r0, r8, r6
 81c:	0000007c 	andeq	r0, r0, ip, ror r0
 820:	00003714 	andeq	r3, r0, r4, lsl r7
 824:	000000ac 	andeq	r0, r0, ip, lsr #1
 828:	000037c0 	andeq	r3, r0, r0, asr #15
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
 82c:	0000005c 	andeq	r0, r0, ip, asr r0
void UART0IntHandler () {
 830:	0000381c 	andeq	r3, r0, ip, lsl r8
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
 834:	00000018 	andeq	r0, r0, r8, lsl r0
 838:	00000000 	andeq	r0, r0, r0
 83c:	00000010 	andeq	r0, r0, r0, lsl r0
 840:	00003834 	andeq	r3, r0, r4, lsr r8
 844:	00000010 	andeq	r0, r0, r0, lsl r0
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
 848:	00003844 	andeq	r3, r0, r4, asr #16
 84c:	00000014 	andeq	r0, r0, r4, lsl r0
		RISE_N_SHINE;
 850:	00003858 	andeq	r3, r0, r8, asr r8
 854:	00000064 	andeq	r0, r0, r4, rrx
		i_trigger (devevent (UART_A, READ));
 858:	000038bc 			; <UNDEFINED> instruction: 0x000038bc
 85c:	00000014 	andeq	r0, r0, r4, lsl r0
 860:	000038d0 	ldrdeq	r3, [r0], -r0
 864:	00000014 	andeq	r0, r0, r4, lsl r0
 868:	000038e4 	andeq	r3, r0, r4, ror #17
 86c:	00000014 	andeq	r0, r0, r4, lsl r0
 870:	000038f8 	strdeq	r3, [r0], -r8
 874:	00000028 	andeq	r0, r0, r8, lsr #32
 878:	00003920 	andeq	r3, r0, r0, lsr #18
 87c:	00000010 	andeq	r0, r0, r0, lsl r0
 880:	00003930 	andeq	r3, r0, r0, lsr r9
 884:	0000002c 	andeq	r0, r0, ip, lsr #32
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
 888:	0000395c 	andeq	r3, r0, ip, asr r9
 88c:	00000014 	andeq	r0, r0, r4, lsl r0
 890:	00003970 	andeq	r3, r0, r0, ror r9
		i_trigger (devevent (UART_A, WRITE));
 894:	00000014 	andeq	r0, r0, r4, lsl r0
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
 898:	00003984 	andeq	r3, r0, r4, lsl #19
 89c:	00000110 	andeq	r0, r0, r0, lsl r1
		RISE_N_SHINE;
 8a0:	00003a94 	muleq	r0, r4, sl
 8a4:	00000064 	andeq	r0, r0, r4, rrx
 8a8:	00003af8 	strdeq	r3, [r0], -r8
		i_trigger (devevent (UART_A, WRITE));
 8ac:	00000028 	andeq	r0, r0, r8, lsr #32
 8b0:	00003b20 	andeq	r3, r0, r0, lsr #22
 8b4:	00000150 	andeq	r0, r0, r0, asr r1
	...
 8c0:	0000003c 	andeq	r0, r0, ip, lsr r0
 8c4:	f0280002 			; <UNDEFINED> instruction: 0xf0280002
 8c8:	00040000 	andeq	r0, r4, r0
	...
 8d4:	000000f4 	strdeq	r0, [r0], -r4
}
 8d8:	00003c70 	andeq	r3, r0, r0, ror ip
 8dc:	00000220 	andeq	r0, r0, r0, lsr #4
 8e0:	00003e90 	muleq	r0, r0, lr
 8e4:	00000060 	andeq	r0, r0, r0, rrx
 8e8:	00000000 	andeq	r0, r0, r0
void __buttons_setirq (int val) {
 8ec:	00000078 	andeq	r0, r0, r8, ror r0
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
 8f0:	00003ef0 	strdeq	r3, [r0], -r0
 8f4:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 900:	00000044 	andeq	r0, r0, r4, asr #32
		bn = BUTTON_GPIO (__button_list [i]);
 904:	f94f0002 			; <UNDEFINED> instruction: 0xf94f0002
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 908:	00040000 	andeq	r0, r4, r0
	...
 914:	00000010 	andeq	r0, r0, r0, lsl r0
 918:	00000000 	andeq	r0, r0, r0
 91c:	00000018 	andeq	r0, r0, r8, lsl r0
}
 920:	00003f08 	andeq	r3, r0, r8, lsl #30
 924:	0000004c 	andeq	r0, r0, ip, asr #32
 928:	00000000 	andeq	r0, r0, r0
 92c:	00000030 	andeq	r0, r0, r0, lsr r0
void __pinlist_setirq (int val) {
 930:	00003f54 	andeq	r3, r0, r4, asr pc
	for (i = 0; i < N_PINLIST; i++) {
 934:	0000006c 	andeq	r0, r0, ip, rrx
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
 938:	00003fc0 	andeq	r3, r0, r0, asr #31
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 93c:	00000016 	andeq	r0, r0, r6, lsl r0
	...
 948:	00000044 	andeq	r0, r0, r4, asr #32
 94c:	fd1f0002 	ldc2	0, cr0, [pc, #-8]	; 94c <__pinlist_setirq+0x1c>
 950:	00040000 	andeq	r0, r4, r0
 954:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < N_PINLIST; i++) {
 958:	00003fd8 	ldrdeq	r3, [r0], -r8
}
 95c:	00000028 	andeq	r0, r0, r8, lsr #32
 960:	00004000 	andeq	r4, r0, r0
 964:	00000008 	andeq	r0, r0, r8
 968:	00000000 	andeq	r0, r0, r0
void GPIOIntHandler () {
 96c:	00000022 	andeq	r0, r0, r2, lsr #32
if (buttons_int) {
 970:	00000000 	andeq	r0, r0, r0
 974:	0000002e 	andeq	r0, r0, lr, lsr #32
	buttons_disable ();
 978:	00000000 	andeq	r0, r0, r0
 97c:	00000034 	andeq	r0, r0, r4, lsr r0
	i_trigger ((aword)&__button_list);
 980:	00000000 	andeq	r0, r0, r0
 984:	00000040 	andeq	r0, r0, r0, asr #32
	...
 990:	0000001c 	andeq	r0, r0, ip, lsl r0
 994:	02ca0002 	sbceq	r0, sl, #2
 998:	00040001 	andeq	r0, r4, r1
 99c:	00000000 	andeq	r0, r0, r0
 9a0:	00004008 	andeq	r4, r0, r8
 9a4:	000000aa 	andeq	r0, r0, sl, lsr #1
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	000000d8 	ldrdeq	r0, [r0], -r8
       4:	0000013a 	andeq	r0, r0, sl, lsr r1
}
       8:	00000140 	andeq	r0, r0, r0, asr #2
       c:	00000150 	andeq	r0, r0, r0, asr r1
      10:	00000156 	andeq	r0, r0, r6, asr r1
      14:	00000178 	andeq	r0, r0, r8, ror r1
	...
      20:	0000018c 	andeq	r0, r0, ip, lsl #3
      24:	0000018e 	andeq	r0, r0, lr, lsl #3
      28:	00000190 	muleq	r0, r0, r1
      2c:	00000192 	muleq	r0, r2, r1
      30:	00000194 	muleq	r0, r4, r1
      34:	000001c6 	andeq	r0, r0, r6, asr #3
	...
			i = k;
      40:	000001c6 	andeq	r0, r0, r6, asr #3
				j->Next = k;
      44:	000001ce 	andeq	r0, r0, lr, asr #3
      48:	000001d2 	ldrdeq	r0, [r0], -r2
}
      4c:	000001e8 	andeq	r0, r0, r8, ror #3
	...
		release;
      58:	00000270 	andeq	r0, r0, r0, ror r2
      5c:	000002a8 	andeq	r0, r0, r8, lsr #5
			nq++;
      60:	00000342 	andeq	r0, r0, r2, asr #6
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	00000346 	andeq	r0, r0, r6, asr #6
	...
      70:	000000c8 	andeq	r0, r0, r8, asr #1
      74:	00000178 	andeq	r0, r0, r8, ror r1
      78:	00000178 	andeq	r0, r0, r8, ror r1
      7c:	000001e8 	andeq	r0, r0, r8, ror #3
      80:	00000001 	andeq	r0, r0, r1
      84:	00000001 	andeq	r0, r0, r1
      88:	000001e8 	andeq	r0, r0, r8, ror #3
      8c:	00000390 	muleq	r0, r0, r3
	...
	if (!button_still_pressed (__button_list [pbutton]))
      98:	0000047e 	andeq	r0, r0, lr, ror r4
	if (baction == NULL)
      9c:	00000484 	andeq	r0, r0, r4, lsl #9
      a0:	00000484 	andeq	r0, r0, r4, lsl #9
	(*baction) (pbutton);
      a4:	00000484 	andeq	r0, r0, r4, lsl #9
endthread
      a8:	00000488 	andeq	r0, r0, r8, lsl #9
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	0000048a 	andeq	r0, r0, sl, lsl #9
	...
endthread
      b8:	00000484 	andeq	r0, r0, r4, lsl #9
      bc:	00000486 	andeq	r0, r0, r6, lsl #9
      c0:	0000048a 	andeq	r0, r0, sl, lsl #9
      c4:	0000048c 	andeq	r0, r0, ip, lsl #9
	...
fsm receiver {
      d0:	0000049c 	muleq	r0, ip, r4
      d4:	0000049e 	muleq	r0, lr, r4
        packet = tcv_rnp(Receiving, sfd);
      d8:	000004a0 	andeq	r0, r0, r0, lsr #9
      dc:	000004a2 	andeq	r0, r0, r2, lsr #9
	...
        receivedMessage = (message *)(packet + 1);
      e8:	000004d6 	ldrdeq	r0, [r0], -r6
      ec:	000004da 	ldrdeq	r0, [r0], -sl
        if(receivedMessage->receiverId == nodeId) {
      f0:	000004dc 	ldrdeq	r0, [r0], -ip
      f4:	000004de 	ldrdeq	r0, [r0], -lr
      f8:	000004e0 	andeq	r0, r0, r0, ror #9
            proceed From_Broadcast;
      fc:	000004e8 	andeq	r0, r0, r8, ror #9
	...
        ser_outf(Get_Message, "Message ");
     108:	0000050c 	andeq	r0, r0, ip, lsl #10
     10c:	00000512 	andeq	r0, r0, r2, lsl r5
        proceed Show_Message;
     110:	00000514 	andeq	r0, r0, r4, lsl r5
        ser_outf(From_Broadcast, "Broadcast ");
     114:	0000051a 	andeq	r0, r0, sl, lsl r5
	...
        ser_outf(Show_Message, "from node %d (Seq %d): %s\n\r", receivedMessage->senderId, receivedMessage->sequenceNumber, receivedMessage->payload);
     120:	0000053c 	andeq	r0, r0, ip, lsr r5
     124:	000005c2 	andeq	r0, r0, r2, asr #11
     128:	000005e8 	andeq	r0, r0, r8, ror #11
     12c:	00000640 	andeq	r0, r0, r0, asr #12
	...
        proceed Receiving;
     138:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
}
     13c:	000006b2 			; <UNDEFINED> instruction: 0x000006b2
        proceed Receiving;
     140:	000006b4 			; <UNDEFINED> instruction: 0x000006b4
        } else if (receivedMessage->receiverId == '0' || receivedMessage->receiverId == 0) {
     144:	000006c8 	andeq	r0, r0, r8, asr #13
	...
}
     150:	000006e4 	andeq	r0, r0, r4, ror #13
     154:	000006e6 	andeq	r0, r0, r6, ror #13
     158:	000006e8 	andeq	r0, r0, r8, ror #13
     15c:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
     168:	0000082c 	andeq	r0, r0, ip, lsr #16
     16c:	00000830 	andeq	r0, r0, r0, lsr r8
     170:	00000832 	andeq	r0, r0, r2, lsr r8
     174:	00000834 	andeq	r0, r0, r4, lsr r8
fsm transmitter (message * messagePtr) {
     178:	00000836 	andeq	r0, r0, r6, lsr r8
     17c:	00000838 	andeq	r0, r0, r8, lsr r8
	...
}
     188:	00000894 	muleq	r0, r4, r8
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
     18c:	00000898 	muleq	r0, r8, r8
     190:	000008aa 	andeq	r0, r0, sl, lsr #17
     194:	000008d6 	ldrdeq	r0, [r0], -r6
	...
        *p = messagePtr->senderId; p++;
     1a0:	000008ec 	andeq	r0, r0, ip, ror #17
     1a4:	000008ec 	andeq	r0, r0, ip, ror #17
        strcpy(p, messagePtr->payload);
     1a8:	000008ee 	andeq	r0, r0, lr, ror #17
        *p = messagePtr->receiverId; p++;
     1ac:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
        tcv_endp (spkt);
     1b8:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     1bc:	000008f2 	strdeq	r0, [r0], -r2
        sequence++;
     1c0:	000008f4 	strdeq	r0, [r0], -r4
     1c4:	000008f6 	strdeq	r0, [r0], -r6
        ser_outf(Transmit_Message, "Message Sent\n\r");
     1c8:	000008fc 	strdeq	r0, [r0], -ip
     1cc:	00000902 	andeq	r0, r0, r2, lsl #18
}
     1d0:	0000090c 	andeq	r0, r0, ip, lsl #18
        finish;
     1d4:	0000090e 	andeq	r0, r0, lr, lsl #18
     1d8:	0000091a 	andeq	r0, r0, sl, lsl r9
     1dc:	0000091c 	andeq	r0, r0, ip, lsl r9
	...
fsm root {
     1e8:	00000930 	andeq	r0, r0, r0, lsr r9
     1ec:	00000930 	andeq	r0, r0, r0, lsr r9
     1f0:	00000932 	andeq	r0, r0, r2, lsr r9
     1f4:	00000934 	andeq	r0, r0, r4, lsr r9
	...
        nodeId = 1;
     200:	00000936 	andeq	r0, r0, r6, lsr r9
     204:	00000938 	andeq	r0, r0, r8, lsr r9
     208:	0000093a 	andeq	r0, r0, sl, lsr r9
        sfd = tcv_open(WNONE, 0, 0);
     20c:	0000093c 	andeq	r0, r0, ip, lsr r9
        messagePtr = (message *) umalloc(sizeof(message));
     210:	00000946 	andeq	r0, r0, r6, asr #18
     214:	0000094a 	andeq	r0, r0, sl, asr #18
     218:	00000954 	andeq	r0, r0, r4, asr r9
        phys_cc1350(0, MAX_PACKET_LENGTH);
     21c:	00000956 	andeq	r0, r0, r6, asr r9
	...
        sfd = tcv_open(WNONE, 0, 0);
     228:	00000a3a 	andeq	r0, r0, sl, lsr sl
     22c:	00000a3c 	andeq	r0, r0, ip, lsr sl
     230:	00000a3e 	andeq	r0, r0, lr, lsr sl
		tcv_control(sfd, PHYSOPT_ON, NULL);
     234:	00000a42 	andeq	r0, r0, r2, asr #20
        sfd = tcv_open(WNONE, 0, 0);
     238:	00000a52 	andeq	r0, r0, r2, asr sl
		tcv_control(sfd, PHYSOPT_ON, NULL);
     23c:	00000a54 	andeq	r0, r0, r4, asr sl
	...
			diag("Cannot open tcv interface");
     248:	00000a3c 	andeq	r0, r0, ip, lsr sl
			halt();
     24c:	00000a3e 	andeq	r0, r0, lr, lsr sl
        runfsm receiver;
     250:	00000a42 	andeq	r0, r0, r2, asr #20
     254:	00000a52 	andeq	r0, r0, r2, asr sl
        receiverId = 0;
     258:	00000a54 	andeq	r0, r0, r4, asr sl
     25c:	00000a8e 	andeq	r0, r0, lr, lsl #21
	...
        ser_outf(Menu_Choices, menuText);
     268:	00000a46 	andeq	r0, r0, r6, asr #20
     26c:	00000a4a 	andeq	r0, r0, sl, asr #20
        ser_inf(Choice, "%c", &choice);
     270:	00000a72 	andeq	r0, r0, r2, ror sl
     274:	00000a7a 	andeq	r0, r0, sl, ror sl
	...
        switch (choice)
     280:	00000a4a 	andeq	r0, r0, sl, asr #20
     284:	00000a4e 	andeq	r0, r0, lr, asr #20
     288:	00000a86 	andeq	r0, r0, r6, lsl #21
     28c:	00000a8a 	andeq	r0, r0, sl, lsl #21
	...
                proceed Menu_Start;
     298:	00000a4e 	andeq	r0, r0, lr, asr #20
     29c:	00000a52 	andeq	r0, r0, r2, asr sl
                proceed Direct_Transmission;
     2a0:	00000a80 	andeq	r0, r0, r0, lsl #21
                proceed Menu_Start;
     2a4:	00000a86 	andeq	r0, r0, r6, lsl #21
	...
        ser_inf(Get_New_ID, "%d", &nodeId);
     2b0:	00000a8e 	andeq	r0, r0, lr, lsl #21
     2b4:	00000a90 	muleq	r0, r0, sl
     2b8:	00000a92 	muleq	r0, r2, sl
    if (node < 1 || node > 25) {
     2bc:	00000a94 	muleq	r0, r4, sl
     2c0:	00000a96 	muleq	r0, r6, sl
            proceed Change_ID;
     2c4:	00000a98 	muleq	r0, r8, sl
	...
        ser_outf(Direct_Transmission, "Receiver node ID (1-25):");
     2d0:	00000a90 	muleq	r0, r0, sl
     2d4:	00000a92 	muleq	r0, r2, sl
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     2d8:	00000a98 	muleq	r0, r8, sl
     2dc:	00000a9a 	muleq	r0, sl, sl
	...
    if (node < 1 || node > 25) {
     2e8:	00000aaa 	andeq	r0, r0, sl, lsr #21
            proceed Direct_Transmission;
     2ec:	00000aac 	andeq	r0, r0, ip, lsr #21
     2f0:	00000aae 	andeq	r0, r0, lr, lsr #21
        ser_outf(Broadcast_Transmission, "Message: ");
     2f4:	00000ab0 			; <UNDEFINED> instruction: 0x00000ab0
	...
        ser_in(Get_Message, messagePtr->payload, PAYLOAD_LENGTH);
     300:	00000ac2 	andeq	r0, r0, r2, asr #21
     304:	00000ac4 	andeq	r0, r0, r4, asr #21
        if(strlen(messagePtr->payload) > PAYLOAD_LENGTH) {
     308:	00000ac6 	andeq	r0, r0, r6, asr #21
     30c:	00000ac8 	andeq	r0, r0, r8, asr #21
	...
            messagePtr->payload[PAYLOAD_LENGTH - 1] = '/0';
     318:	00000b0a 	andeq	r0, r0, sl, lsl #22
        call transmitter(messagePtr, Menu_Start);
     31c:	00000b0a 	andeq	r0, r0, sl, lsl #22
        messagePtr->senderId = nodeId;
     320:	00000b0e 	andeq	r0, r0, lr, lsl #22
     324:	00000b10 	andeq	r0, r0, r0, lsl fp
	...
        messagePtr->sequenceNumber = sequence;
     330:	00000b40 	andeq	r0, r0, r0, asr #22
        call transmitter(messagePtr, Menu_Start);
     334:	00000b42 	andeq	r0, r0, r2, asr #22
     338:	00000b44 	andeq	r0, r0, r4, asr #22
     33c:	00000b4c 	andeq	r0, r0, ip, asr #22
	...
     348:	00000bec 	andeq	r0, r0, ip, ror #23
     34c:	00000bec 	andeq	r0, r0, ip, ror #23
     350:	00000bf2 	strdeq	r0, [r0], -r2
     354:	00000bf4 	strdeq	r0, [r0], -r4
     358:	00000bf6 	strdeq	r0, [r0], -r6
     35c:	00000bfa 	strdeq	r0, [r0], -sl
	...
     368:	00000c06 	andeq	r0, r0, r6, lsl #24
     36c:	00000c08 	andeq	r0, r0, r8, lsl #24
     370:	00000c1e 	andeq	r0, r0, lr, lsl ip
     374:	00000c20 	andeq	r0, r0, r0, lsr #24
     378:	00000c32 	andeq	r0, r0, r2, lsr ip
     37c:	00000c4e 	andeq	r0, r0, lr, asr #24
     380:	00000c72 	andeq	r0, r0, r2, ror ip
     384:	00000dcc 	andeq	r0, r0, ip, asr #27
	...
static void devinit_uart (int devnum) {
     390:	00000c06 	andeq	r0, r0, r6, lsl #24
	adddevfunc (ioreq_uart_a, devnum);
     394:	00000c08 	andeq	r0, r0, r8, lsl #24
     398:	00000ca6 	andeq	r0, r0, r6, lsr #25
void udelay (volatile word n) {
     39c:	00000caa 	andeq	r0, r0, sl, lsr #25
	...
	while (n) {
     3a8:	00000caa 	andeq	r0, r0, sl, lsr #25
}
     3ac:	00000caa 	andeq	r0, r0, sl, lsr #25
	while (n--);
     3b0:	00000cae 	andeq	r0, r0, lr, lsr #25
     3b4:	00000cb2 			; <UNDEFINED> instruction: 0x00000cb2
     3b8:	00000cb6 			; <UNDEFINED> instruction: 0x00000cb6
		n--;
     3bc:	00000cb8 			; <UNDEFINED> instruction: 0x00000cb8
	...
void mdelay (volatile word n) {
     3c8:	00000caa 	andeq	r0, r0, sl, lsr #25
     3cc:	00000cae 	andeq	r0, r0, lr, lsr #25
	while (n) {
     3d0:	00000cc4 	andeq	r0, r0, r4, asr #25
     3d4:	00000cc6 	andeq	r0, r0, r6, asr #25
}
     3d8:	00000cca 	andeq	r0, r0, sl, asr #25
		udelay (999);
     3dc:	00000cce 	andeq	r0, r0, lr, asr #25
	...
		n--;
     3e8:	00000cb2 			; <UNDEFINED> instruction: 0x00000cb2
     3ec:	00000cb6 			; <UNDEFINED> instruction: 0x00000cb6
     3f0:	00000cb8 			; <UNDEFINED> instruction: 0x00000cb8
void __pi_ondomain (lword d) {
     3f4:	00000cba 			; <UNDEFINED> instruction: 0x00000cba
     3f8:	00000cbe 			; <UNDEFINED> instruction: 0x00000cbe
		if (__pi_systat.effpdm > 1)
     3fc:	00000cc2 	andeq	r0, r0, r2, asr #25
	...
	PRCMPowerDomainOn (d);
     408:	00000cc6 	andeq	r0, r0, r6, asr #25
     40c:	00000cca 	andeq	r0, r0, sl, asr #25
     410:	00000ce4 	andeq	r0, r0, r4, ror #25
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     414:	00000ce8 	andeq	r0, r0, r8, ror #25
     418:	00000cea 	andeq	r0, r0, sl, ror #25
     41c:	00000cf2 	strdeq	r0, [r0], -r2
	...
}
     428:	00000cdc 	ldrdeq	r0, [r0], -ip
     42c:	00000cde 	ldrdeq	r0, [r0], -lr
void __pi_offdomain (lword d) {
     430:	00000ce0 	andeq	r0, r0, r0, ror #25
     434:	00000ce4 	andeq	r0, r0, r4, ror #25
	...
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     440:	00000d20 	andeq	r0, r0, r0, lsr #26
     444:	00000d24 	andeq	r0, r0, r4, lsr #26
	if (d & PRCM_DOMAIN_RFCORE) {
     448:	00000d26 	andeq	r0, r0, r6, lsr #26
     44c:	00000d2e 	andeq	r0, r0, lr, lsr #26
	...
			__pi_systat.effpdm = __pi_systat.reqpdm;
     458:	00000d24 	andeq	r0, r0, r4, lsr #26
     45c:	00000d26 	andeq	r0, r0, r6, lsr #26
	__pi_systat.ondmns &= ~d;
     460:	00000d32 	andeq	r0, r0, r2, lsr sp
     464:	00000d34 	andeq	r0, r0, r4, lsr sp
	...
void __pi_syserror (word ec, const char *m) {
     470:	00000d52 	andeq	r0, r0, r2, asr sp
	diag ("SYSERR: %x, %s", ec, m);
     474:	00000d54 	andeq	r0, r0, r4, asr sp
     478:	00000d56 	andeq	r0, r0, r6, asr sp
     47c:	00000d58 	andeq	r0, r0, r8, asr sp
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     488:	00000d54 	andeq	r0, r0, r4, asr sp
		all_leds_blink;
     48c:	00000d56 	andeq	r0, r0, r6, asr sp
     490:	00000d58 	andeq	r0, r0, r8, asr sp
     494:	00000d5c 	andeq	r0, r0, ip, asr sp
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4a0:	00000db2 			; <UNDEFINED> instruction: 0x00000db2
     4a4:	00000db4 			; <UNDEFINED> instruction: 0x00000db4
     4a8:	00000db4 			; <UNDEFINED> instruction: 0x00000db4
     4ac:	00000db6 			; <UNDEFINED> instruction: 0x00000db6
	...
	while (1) {
     4b8:	00000dba 			; <UNDEFINED> instruction: 0x00000dba
     4bc:	00000dbe 			; <UNDEFINED> instruction: 0x00000dbe
     4c0:	00000dc0 	andeq	r0, r0, r0, asr #27
void tci_run_delay_timer () {
     4c4:	00000dc2 	andeq	r0, r0, r2, asr #27
	...
	setdel = __pi_mintk - __pi_old;
     4d0:	00000001 	andeq	r0, r0, r1
     4d4:	00000001 	andeq	r0, r0, r1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4d8:	00000001 	andeq	r0, r0, r1
     4dc:	00000001 	andeq	r0, r0, r1
	...
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     4e8:	00000e74 	andeq	r0, r0, r4, ror lr
	sti_tim;
     4ec:	00000e74 	andeq	r0, r0, r4, ror lr
}
     4f0:	00000e78 	andeq	r0, r0, r8, ror lr
     4f4:	00000e84 	andeq	r0, r0, r4, lsl #29
	...
     500:	00000390 	muleq	r0, r0, r3
	cli_aux;
     504:	0000039c 	muleq	r0, ip, r3
     508:	0000039c 	muleq	r0, ip, r3
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     50c:	000003c8 	andeq	r0, r0, r8, asr #7
     510:	000003c8 	andeq	r0, r0, r8, asr #7
     514:	000003f2 	strdeq	r0, [r0], -r2
     518:	000003f4 	strdeq	r0, [r0], -r4
	sti_aux;
     51c:	00000430 	andeq	r0, r0, r0, lsr r4
}
     520:	00000430 	andeq	r0, r0, r0, lsr r4
     524:	00000470 	andeq	r0, r0, r0, ror r4
     528:	00000001 	andeq	r0, r0, r1
void AONRTCIntHandler () {
     52c:	00000001 	andeq	r0, r0, r1
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     530:	00000470 	andeq	r0, r0, r0, ror r4
     534:	000004c4 	andeq	r0, r0, r4, asr #9
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     538:	000004c4 	andeq	r0, r0, r4, asr #9
		if (__pi_utims [0] == 0)
     53c:	00000504 	andeq	r0, r0, r4, lsl #10
     540:	00000504 	andeq	r0, r0, r4, lsl #10
		if (*(__pi_utims [0])) {
     544:	0000052c 	andeq	r0, r0, ip, lsr #10
     548:	0000052c 	andeq	r0, r0, ip, lsr #10
			(*(__pi_utims [0]))--;
     54c:	00000640 	andeq	r0, r0, r0, asr #12
		if (__pi_utims [1] == 0)
     550:	00000640 	andeq	r0, r0, r0, asr #12
		if (*(__pi_utims [1])) {
     554:	00000690 	muleq	r0, r0, r6
			aux_timer_inactive = 0;
     558:	00000690 	muleq	r0, r0, r6
			(*(__pi_utims [1]))--;
     55c:	000006e4 	andeq	r0, r0, r4, ror #13
		if (__pi_utims [2] == 0)
     560:	000006e4 	andeq	r0, r0, r4, ror #13
		if (*(__pi_utims [2])) {
     564:	0000071c 	andeq	r0, r0, ip, lsl r7
			(*(__pi_utims [2]))--;
     568:	0000071c 	andeq	r0, r0, ip, lsl r7
		if (__pi_utims [3] != 0) {
     56c:	0000082c 	andeq	r0, r0, ip, lsr #16
			if (*(__pi_utims [3])) {
     570:	00000001 	andeq	r0, r0, r1
				aux_timer_inactive = 0;
     574:	00000001 	andeq	r0, r0, r1
				(*(__pi_utims [3]))--;
     578:	0000082c 	andeq	r0, r0, ip, lsr #16
	if (__pi_systat.ledsts) {
     57c:	000008ec 	andeq	r0, r0, ip, ror #17
     580:	000008ec 	andeq	r0, r0, ip, ror #17
		if (__pi_systat.ledblc++ == 0) {
     584:	00000930 	andeq	r0, r0, r0, lsr r9
     588:	00000930 	andeq	r0, r0, r0, lsr r9
			if (__pi_systat.ledblk) {
     58c:	0000096c 	andeq	r0, r0, ip, ror #18
     590:	0000096c 	andeq	r0, r0, ip, ror #18
     594:	00000a10 	andeq	r0, r0, r0, lsl sl
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     598:	00000a10 	andeq	r0, r0, r0, lsl sl
     59c:	00000bc8 	andeq	r0, r0, r8, asr #23
				if (__pi_systat.ledsts & 0x2)
     5a0:	00000bc8 	andeq	r0, r0, r8, asr #23
     5a4:	00000bec 	andeq	r0, r0, ip, ror #23
     5a8:	00000001 	andeq	r0, r0, r1
				if (__pi_systat.ledsts & 0x4)
     5ac:	00000001 	andeq	r0, r0, r1
				__pi_systat.ledblk = 0;
     5b0:	00000bec 	andeq	r0, r0, ip, ror #23
     5b4:	00000e44 	andeq	r0, r0, r4, asr #28
			if (__pi_systat.fstblk)
     5b8:	00000e44 	andeq	r0, r0, r4, asr #28
     5bc:	00000e74 	andeq	r0, r0, r4, ror lr
				__pi_systat.ledblc = 200;
     5c0:	00000001 	andeq	r0, r0, r1
	if (events & AON_RTC_EVFLAGS_CH0) {
     5c4:	00000001 	andeq	r0, r0, r1
		cli_tim;
     5c8:	00000e74 	andeq	r0, r0, r4, ror lr
		__pi_new += setdel;
     5cc:	00000ed4 	ldrdeq	r0, [r0], -r4
	...
		RISE_N_SHINE;
     5d8:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
		__pi_new += setdel;
     5dc:	00000f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
		RISE_N_SHINE;
     5e0:	00000f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
     5e4:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
	...
				if (__pi_systat.ledsts & 0x1)
     5f0:	00000ffa 	strdeq	r0, [r0], -sl
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     5f4:	0000109c 	muleq	r0, ip, r0
     5f8:	000010a0 	andeq	r1, r0, r0, lsr #1
				if (__pi_systat.ledsts & 0x2)
     5fc:	000010a4 	andeq	r1, r0, r4, lsr #1
	...
				if (__pi_systat.ledsts & 0x8)
     608:	00001454 	andeq	r1, r0, r4, asr r4
				__pi_systat.ledblk = 1;
     60c:	00001456 	andeq	r1, r0, r6, asr r4
     610:	0000145a 	andeq	r1, r0, sl, asr r4
		if (aux_timer_inactive) {
     614:	0000145c 	andeq	r1, r0, ip, asr r4
			cli_aux;
     618:	00001460 	andeq	r1, r0, r0, ror #8
     61c:	00001464 	andeq	r1, r0, r4, ror #8
     620:	00001466 	andeq	r1, r0, r6, ror #8
     624:	00001470 	andeq	r1, r0, r0, ror r4
	...
     630:	000014a2 	andeq	r1, r0, r2, lsr #9
     634:	000014a4 	andeq	r1, r0, r4, lsr #9
     638:	000014a6 	andeq	r1, r0, r6, lsr #9
     63c:	000014aa 	andeq	r1, r0, sl, lsr #9
word tci_update_delay_ticks (Boolean force) {
     640:	0000153a 	andeq	r1, r0, sl, lsr r5
	cli_tim;
     644:	0000159c 	muleq	r0, ip, r5
     648:	000015a0 	andeq	r1, r0, r0, lsr #11
	if (setdel) {
     64c:	000015a4 	andeq	r1, r0, r4, lsr #11
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     650:	000015a6 	andeq	r1, r0, r6, lsr #11
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     654:	000015a8 	andeq	r1, r0, r8, lsr #11
	...
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     660:	000014be 			; <UNDEFINED> instruction: 0x000014be
				AON_RTC_O_CH0CMP)) - gettav ());
     664:	000014c0 	andeq	r1, r0, r0, asr #9
	return NO;
     668:	000014c0 	andeq	r1, r0, r0, asr #9
			setdel = 0;
     66c:	000014c2 	andeq	r1, r0, r2, asr #9
	...
}
     678:	00000ed4 	ldrdeq	r0, [r0], -r4
		sti_tim;
     67c:	00000f10 	andeq	r0, r0, r0, lsl pc
		return YES;
     680:	00000f10 	andeq	r0, r0, r0, lsl pc
     684:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
     688:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
     68c:	00000fa8 	andeq	r0, r0, r8, lsr #31
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     690:	00000001 	andeq	r0, r0, r1
	UARTDisable (UART0_BASE);
     694:	00000001 	andeq	r0, r0, r1
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     698:	00000fa8 	andeq	r0, r0, r8, lsr #31
	UARTDisable (UART0_BASE);
     69c:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
	UARTConfigSetExpClk (UART0_BASE,
     6a0:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
     6a4:	00000fe4 	andeq	r0, r0, r4, ror #31
     6a8:	00000001 	andeq	r0, r0, r1
     6ac:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6b0:	00000fe4 	andeq	r0, r0, r4, ror #31
     6b4:	00000fea 	andeq	r0, r0, sl, ror #31
     6b8:	00000fec 	andeq	r0, r0, ip, ror #31
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     6bc:	000010b8 	strheq	r1, [r0], -r8
     6c0:	000010b8 	strheq	r1, [r0], -r8
     6c4:	000010cc 	andeq	r1, r0, ip, asr #1
	urates [0] = rate;
     6c8:	000010cc 	andeq	r1, r0, ip, asr #1
}
     6cc:	00001100 	andeq	r1, r0, r0, lsl #2
     6d0:	00001100 	andeq	r1, r0, r0, lsl #2
     6d4:	00001134 	andeq	r1, r0, r4, lsr r1
     6d8:	00000001 	andeq	r0, r0, r1
     6dc:	00000001 	andeq	r0, r0, r1
     6e0:	00001134 	andeq	r1, r0, r4, lsr r1
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6e4:	00001158 	andeq	r1, r0, r8, asr r1
     6e8:	00001158 	andeq	r1, r0, r8, asr r1
     6ec:	00001190 	muleq	r0, r0, r1
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     6f0:	00000001 	andeq	r0, r0, r1
     6f4:	00000001 	andeq	r0, r0, r1
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     6f8:	00000001 	andeq	r0, r0, r1
     6fc:	00000001 	andeq	r0, r0, r1
	__pi_uart_setrate (urates [0], __pi_uart);
     700:	00000001 	andeq	r0, r0, r1
     704:	00000001 	andeq	r0, r0, r1
     708:	00001190 	muleq	r0, r0, r1
     70c:	000011b4 			; <UNDEFINED> instruction: 0x000011b4
     710:	00000001 	andeq	r0, r0, r1
     714:	00000001 	andeq	r0, r0, r1
     718:	000011b4 			; <UNDEFINED> instruction: 0x000011b4
	switch (operation) {
     71c:	000011c2 	andeq	r1, r0, r2, asr #3
static int ioreq_uart_a (int operation, char *buf, int len) {
     720:	000011c2 	andeq	r1, r0, r2, asr #3
     724:	000011d2 	ldrdeq	r1, [r0], -r2
     728:	00000001 	andeq	r0, r0, r1
     72c:	00000001 	andeq	r0, r0, r1
     730:	00000001 	andeq	r0, r0, r1
				*buf++ = uart_a_read;
     734:	00000001 	andeq	r0, r0, r1
     738:	00000001 	andeq	r0, r0, r1
			while (len && uart_a_char_available) {
     73c:	00000001 	andeq	r0, r0, r1
     740:	000011d2 	ldrdeq	r1, [r0], -r2
     744:	000011e6 	andeq	r1, r0, r6, ror #3
			if (len != operation) {
     748:	000011e6 	andeq	r1, r0, r6, ror #3
}
     74c:	000011f4 	strdeq	r1, [r0], -r4
     750:	000011f4 	strdeq	r1, [r0], -r4
			uart_a_disable_int;
     754:	00001218 	andeq	r1, r0, r8, lsl r2
			if (uart_a_char_available) {
     758:	00001218 	andeq	r1, r0, r8, lsl r2
				*buf++ = uart_a_read;
     75c:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
			uart_a_disable_int;
     760:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
     764:	00001304 	andeq	r1, r0, r4, lsl #6
			if (uart_a_char_available) {
     768:	00001304 	andeq	r1, r0, r4, lsl #6
     76c:	0000134c 	andeq	r1, r0, ip, asr #6
				uart_a_enable_int;
     770:	0000134c 	andeq	r1, r0, ip, asr #6
     774:	0000139c 	muleq	r0, ip, r3
				goto Redo_rx;
     778:	00000001 	andeq	r0, r0, r1
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     77c:	00000001 	andeq	r0, r0, r1
     780:	0000139c 	muleq	r0, ip, r3
			return -2;
     784:	00001444 	andeq	r1, r0, r4, asr #8
     788:	00001444 	andeq	r1, r0, r4, asr #8
				uart_a_write (*buf);
     78c:	00001478 	andeq	r1, r0, r8, ror r4
     790:	00001478 	andeq	r1, r0, r8, ror r4
			while (len && uart_a_room_in_tx) {
     794:	00001490 	muleq	r0, r0, r4
     798:	00000001 	andeq	r0, r0, r1
     79c:	00000001 	andeq	r0, r0, r1
			if (len != operation) {
     7a0:	00000001 	andeq	r0, r0, r1
			uart_a_disable_int;
     7a4:	00000001 	andeq	r0, r0, r1
     7a8:	00001490 	muleq	r0, r0, r4
			if (uart_a_room_in_tx) {
     7ac:	000015cc 	andeq	r1, r0, ip, asr #11
     7b0:	000015cc 	andeq	r1, r0, ip, asr #11
				uart_a_enable_int;
     7b4:	000015f0 	strdeq	r1, [r0], -r0
	...
			if (uart_a_room_in_tx) {
     7c0:	000016b0 			; <UNDEFINED> instruction: 0x000016b0
				uart_a_write (*buf);
     7c4:	000016b6 			; <UNDEFINED> instruction: 0x000016b6
     7c8:	000016bc 			; <UNDEFINED> instruction: 0x000016bc
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7cc:	000016c0 	andeq	r1, r0, r0, asr #13
     7d0:	000016c8 	andeq	r1, r0, r8, asr #13
			uart_a_enable_int;
     7d4:	000016e8 	andeq	r1, r0, r8, ror #13
	...
			return 0;
     7e0:	00000001 	andeq	r0, r0, r1
			if (len == UART_CNTRL_SETRATE) {
     7e4:	00000001 	andeq	r0, r0, r1
				if (__pi_uart_setrate (*((word*)buf),
     7e8:	00000001 	andeq	r0, r0, r1
     7ec:	00000001 	andeq	r0, r0, r1
	...
			syserror (ENOOPER, "uai");
     7f8:	000015f0 	strdeq	r1, [r0], -r0
			if (len == UART_CNTRL_GETRATE) {
     7fc:	00001606 	andeq	r1, r0, r6, lsl #12
				return 1;
     800:	00001606 	andeq	r1, r0, r6, lsl #12
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     804:	00001620 	andeq	r1, r0, r0, lsr #12
			syserror (ENOOPER, "uai");
     808:	00001620 	andeq	r1, r0, r0, lsr #12
     80c:	0000162e 	andeq	r1, r0, lr, lsr #12
     810:	00001630 	andeq	r1, r0, r0, lsr r6
     814:	0000167c 	andeq	r1, r0, ip, ror r6
     818:	0000167c 	andeq	r1, r0, ip, ror r6
     81c:	00001708 	andeq	r1, r0, r8, lsl #14
     820:	00001708 	andeq	r1, r0, r8, lsl #14
     824:	00001778 	andeq	r1, r0, r8, ror r7
     828:	00001778 	andeq	r1, r0, r8, ror r7
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     82c:	00001838 	andeq	r1, r0, r8, lsr r8
void UART0IntHandler () {
     830:	00000001 	andeq	r0, r0, r1
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     834:	00000001 	andeq	r0, r0, r1
     838:	00001838 	andeq	r1, r0, r8, lsr r8
     83c:	0000185c 	andeq	r1, r0, ip, asr r8
     840:	0000185c 	andeq	r1, r0, ip, asr r8
     844:	000018dc 	ldrdeq	r1, [r0], -ip
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     848:	00000001 	andeq	r0, r0, r1
     84c:	00000001 	andeq	r0, r0, r1
		RISE_N_SHINE;
     850:	00000001 	andeq	r0, r0, r1
     854:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, READ));
     858:	000018dc 	ldrdeq	r1, [r0], -ip
     85c:	00001998 	muleq	r0, r8, r9
     860:	00000001 	andeq	r0, r0, r1
     864:	00000001 	andeq	r0, r0, r1
     868:	00000001 	andeq	r0, r0, r1
     86c:	00000001 	andeq	r0, r0, r1
     870:	00000001 	andeq	r0, r0, r1
     874:	00000001 	andeq	r0, r0, r1
     878:	00001998 	muleq	r0, r8, r9
     87c:	000019c4 	andeq	r1, r0, r4, asr #19
     880:	000019c4 	andeq	r1, r0, r4, asr #19
     884:	00001a24 	andeq	r1, r0, r4, lsr #20
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     888:	00000001 	andeq	r0, r0, r1
     88c:	00000001 	andeq	r0, r0, r1
     890:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, WRITE));
     894:	00000001 	andeq	r0, r0, r1
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     898:	00000001 	andeq	r0, r0, r1
     89c:	00000001 	andeq	r0, r0, r1
		RISE_N_SHINE;
     8a0:	00000001 	andeq	r0, r0, r1
     8a4:	00000001 	andeq	r0, r0, r1
     8a8:	00001a24 	andeq	r1, r0, r4, lsr #20
		i_trigger (devevent (UART_A, WRITE));
     8ac:	00001a8c 	andeq	r1, r0, ip, lsl #21
     8b0:	00001a8c 	andeq	r1, r0, ip, lsl #21
     8b4:	00001adc 	ldrdeq	r1, [r0], -ip
     8b8:	00001adc 	ldrdeq	r1, [r0], -ip
     8bc:	00001b78 	andeq	r1, r0, r8, ror fp
     8c0:	00001b78 	andeq	r1, r0, r8, ror fp
     8c4:	00001bb8 			; <UNDEFINED> instruction: 0x00001bb8
     8c8:	00001bb8 			; <UNDEFINED> instruction: 0x00001bb8
     8cc:	00001bec 	andeq	r1, r0, ip, ror #23
     8d0:	00001bec 	andeq	r1, r0, ip, ror #23
     8d4:	00001c28 	andeq	r1, r0, r8, lsr #24
}
     8d8:	00000001 	andeq	r0, r0, r1
     8dc:	00000001 	andeq	r0, r0, r1
     8e0:	00001c28 	andeq	r1, r0, r8, lsr #24
     8e4:	00001c2a 	andeq	r1, r0, sl, lsr #24
	...
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     8f0:	00001c2a 	andeq	r1, r0, sl, lsr #24
     8f4:	00001c2c 	andeq	r1, r0, ip, lsr #24
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8f8:	00001c2c 	andeq	r1, r0, ip, lsr #24
     8fc:	00001c2e 	andeq	r1, r0, lr, lsr #24
     900:	00001c2e 	andeq	r1, r0, lr, lsr #24
		bn = BUTTON_GPIO (__button_list [i]);
     904:	00001c30 	andeq	r1, r0, r0, lsr ip
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     908:	00001c30 	andeq	r1, r0, r0, lsr ip
     90c:	00001c74 	andeq	r1, r0, r4, ror ip
	...
     918:	00000001 	andeq	r0, r0, r1
     91c:	00000001 	andeq	r0, r0, r1
}
     920:	00000001 	andeq	r0, r0, r1
     924:	00000001 	andeq	r0, r0, r1
     928:	00000001 	andeq	r0, r0, r1
     92c:	00000001 	andeq	r0, r0, r1
void __pinlist_setirq (int val) {
     930:	00000001 	andeq	r0, r0, r1
	for (i = 0; i < N_PINLIST; i++) {
     934:	00000001 	andeq	r0, r0, r1
	...
     940:	00000001 	andeq	r0, r0, r1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     944:	00000001 	andeq	r0, r0, r1
     948:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     94c:	00000001 	andeq	r0, r0, r1
	...
	for (i = 0; i < N_PINLIST; i++) {
     958:	00000001 	andeq	r0, r0, r1
}
     95c:	00000001 	andeq	r0, r0, r1
     960:	00000001 	andeq	r0, r0, r1
     964:	00000001 	andeq	r0, r0, r1
     968:	00000001 	andeq	r0, r0, r1
void GPIOIntHandler () {
     96c:	00000001 	andeq	r0, r0, r1
if (buttons_int) {
     970:	00000001 	andeq	r0, r0, r1
     974:	00000001 	andeq	r0, r0, r1
	...
	i_trigger ((aword)&__button_list);
     980:	00000001 	andeq	r0, r0, r1
     984:	00000001 	andeq	r0, r0, r1
     988:	00000001 	andeq	r0, r0, r1
     98c:	00000001 	andeq	r0, r0, r1
	...
     998:	00000001 	andeq	r0, r0, r1
     99c:	00000001 	andeq	r0, r0, r1
     9a0:	00000001 	andeq	r0, r0, r1
     9a4:	00000001 	andeq	r0, r0, r1
     9a8:	00000001 	andeq	r0, r0, r1
	RISE_N_SHINE;
     9ac:	00000001 	andeq	r0, r0, r1
	...
if (pin_sensor_int) {
     9b8:	00000001 	andeq	r0, r0, r1
     9bc:	00000001 	andeq	r0, r0, r1
	i_trigger ((aword)(&__input_pins));
     9c0:	00000001 	andeq	r0, r0, r1
     9c4:	00000001 	andeq	r0, r0, r1
	...
     9d0:	00001c80 	andeq	r1, r0, r0, lsl #25
     9d4:	00001c84 	andeq	r1, r0, r4, lsl #25
     9d8:	00001c8a 	andeq	r1, r0, sl, lsl #25
     9dc:	00001c8c 	andeq	r1, r0, ip, lsl #25
     9e0:	00001c9a 	muleq	r0, sl, ip
     9e4:	00001c9a 	muleq	r0, sl, ip
     9e8:	00001c9c 	muleq	r0, ip, ip
	__pinsen_disable_and_clear;
     9ec:	00001c9e 	muleq	r0, lr, ip
	...
	RISE_N_SHINE;
     9f8:	00001c86 	andeq	r1, r0, r6, lsl #25
}
     9fc:	00001c88 	andeq	r1, r0, r8, lsl #25
     a00:	00001c9e 	muleq	r0, lr, ip
     a04:	00001ca0 	andeq	r1, r0, r0, lsr #25
	...
void system_init () {
     a10:	00001c88 	andeq	r1, r0, r8, lsl #25
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a14:	00001c8a 	andeq	r1, r0, sl, lsl #25
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a18:	00001c8c 	andeq	r1, r0, ip, lsl #25
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a1c:	00001c8e 	andeq	r1, r0, lr, lsl #25
     a20:	00001c94 	muleq	r0, r4, ip
     a24:	00001c94 	muleq	r0, r4, ip
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a30:	00001cb8 			; <UNDEFINED> instruction: 0x00001cb8
     a34:	00001cc0 	andeq	r1, r0, r0, asr #25
     a38:	00001cca 	andeq	r1, r0, sl, asr #25
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a3c:	00001cca 	andeq	r1, r0, sl, asr #25
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a40:	00001cce 	andeq	r1, r0, lr, asr #25
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a44:	00001cd0 	ldrdeq	r1, [r0], -r0
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a50:	00001cd0 	ldrdeq	r1, [r0], -r0
		pin = (port_confs [i] >> 19) & 0x1f;
     a54:	00001cd0 	ldrdeq	r1, [r0], -r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a58:	00001cd2 	ldrdeq	r1, [r0], -r2
		pin = (port_confs [i] >> 19) & 0x1f;
     a5c:	00001cd4 	ldrdeq	r1, [r0], -r4
	...
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a68:	00001ce0 	andeq	r1, r0, r0, ror #25
     a6c:	00001ce2 	andeq	r1, r0, r2, ror #25
		if (port_confs [i] & 0x80)
     a70:	00001ce4 	andeq	r1, r0, r4, ror #25
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a74:	00001ce8 	andeq	r1, r0, r8, ror #25
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a80:	00001d00 	andeq	r1, r0, r0, lsl #26
     a84:	00001d02 	andeq	r1, r0, r2, lsl #26
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a88:	00001d06 	andeq	r1, r0, r6, lsl #26
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a8c:	00001d08 	andeq	r1, r0, r8, lsl #26
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a90:	00001d0e 	andeq	r1, r0, lr, lsl #26
	all_leds_blink;
     a94:	00001d1e 	andeq	r1, r0, lr, lsl sp
	...
     aa0:	00001d00 	andeq	r1, r0, r0, lsl #26
     aa4:	00001d02 	andeq	r1, r0, r2, lsl #26
     aa8:	00001d06 	andeq	r1, r0, r6, lsl #26
     aac:	00001d08 	andeq	r1, r0, r8, lsl #26
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ab0:	00001d0e 	andeq	r1, r0, lr, lsl #26
     ab4:	00001d0e 	andeq	r1, r0, lr, lsl #26
     ab8:	00001d10 	andeq	r1, r0, r0, lsl sp
     abc:	00001d12 	andeq	r1, r0, r2, lsl sp
	...
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ac8:	00001d66 	andeq	r1, r0, r6, ror #26
     acc:	00001d6a 	andeq	r1, r0, sl, ror #26
	IntEnable (INT_AON_RTC_COMB);
     ad0:	00001d6c 	andeq	r1, r0, ip, ror #26
     ad4:	00001d6e 	andeq	r1, r0, lr, ror #26
	...
	IntEnable (INT_AON_GPIO_EDGE);
     ae0:	00001d72 	andeq	r1, r0, r2, ror sp
     ae4:	00001d72 	andeq	r1, r0, r2, ror sp
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     ae8:	00001d74 	andeq	r1, r0, r4, ror sp
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     aec:	00001d76 	andeq	r1, r0, r6, ror sp
	...
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     af8:	00000001 	andeq	r0, r0, r1
     afc:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b00:	00000001 	andeq	r0, r0, r1
     b04:	00000001 	andeq	r0, r0, r1
	...
	urates [0] = UART_RATE / 100;
     b10:	00000001 	andeq	r0, r0, r1
	reinit_uart ();
     b14:	00000001 	andeq	r0, r0, r1
	EXTRA_INITIALIZERS;
     b18:	00000001 	andeq	r0, r0, r1
     b1c:	00000001 	andeq	r0, r0, r1
	...
     b28:	00000001 	andeq	r0, r0, r1
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b2c:	00000001 	andeq	r0, r0, r1
     b30:	00000001 	andeq	r0, r0, r1
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b34:	00000001 	andeq	r0, r0, r1
	...
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b40:	00000001 	andeq	r0, r0, r1
     b44:	00000001 	andeq	r0, r0, r1
     b48:	00000001 	andeq	r0, r0, r1
	IntEnable (INT_UART0_COMB);
     b4c:	00000001 	andeq	r0, r0, r1
	...
	tci_run_auxiliary_timer ();
     b58:	00001c7c 	andeq	r1, r0, ip, ror ip
		diag ("");
     b5c:	00001cb0 			; <UNDEFINED> instruction: 0x00001cb0
     b60:	00001cb0 			; <UNDEFINED> instruction: 0x00001cb0
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     b64:	00001ce0 	andeq	r1, r0, r0, ror #25
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     b68:	00001ce0 	andeq	r1, r0, r0, ror #25
		diag ("Leftover RAM: %d bytes",
     b6c:	00001cf8 	strdeq	r1, [r0], -r8
     b70:	00001cf8 	strdeq	r1, [r0], -r8
     b74:	00001d4c 	andeq	r1, r0, ip, asr #26
     b78:	00001d4c 	andeq	r1, r0, ip, asr #26
     b7c:	00001d8c 	andeq	r1, r0, ip, lsl #27
     b80:	00001d8c 	andeq	r1, r0, ip, lsl #27
     b84:	00001db0 			; <UNDEFINED> instruction: 0x00001db0
     b88:	00001db0 			; <UNDEFINED> instruction: 0x00001db0
     b8c:	00001dc4 	andeq	r1, r0, r4, asr #27
     b90:	00001dc4 	andeq	r1, r0, r4, asr #27
     b94:	00001dd8 	ldrdeq	r1, [r0], -r8
     b98:	00000001 	andeq	r0, r0, r1
     b9c:	00000001 	andeq	r0, r0, r1
     ba0:	00000001 	andeq	r0, r0, r1
     ba4:	00000001 	andeq	r0, r0, r1
     ba8:	00000001 	andeq	r0, r0, r1
     bac:	00000001 	andeq	r0, r0, r1
     bb0:	00000001 	andeq	r0, r0, r1
     bb4:	00000001 	andeq	r0, r0, r1
     bb8:	00000001 	andeq	r0, r0, r1
     bbc:	00000001 	andeq	r0, r0, r1
     bc0:	00000001 	andeq	r0, r0, r1
     bc4:	00000001 	andeq	r0, r0, r1
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     bc8:	00000001 	andeq	r0, r0, r1
     bcc:	00000001 	andeq	r0, r0, r1
	...
     bd8:	00001dd8 	ldrdeq	r1, [r0], -r8
     bdc:	00001e50 	andeq	r1, r0, r0, asr lr
	...
}
     be8:	00001e50 	andeq	r1, r0, r0, asr lr
__attribute__ ((noreturn)) void __pi_release () {
     bec:	00001ea4 	andeq	r1, r0, r4, lsr #29
	...
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     bf8:	00001ea4 	andeq	r1, r0, r4, lsr #29
	check_stack_overflow;
     bfc:	00001f04 	andeq	r1, r0, r4, lsl #30
	...
	update_n_wake (MAX_WORD, NO);
     c08:	0000212a 	andeq	r2, r0, sl, lsr #2
     c0c:	0000212c 	andeq	r2, r0, ip, lsr #2
     c10:	00002140 	andeq	r2, r0, r0, asr #2
	for_all_tasks (__pi_curr) {
     c14:	00002142 	andeq	r2, r0, r2, asr #2
     c18:	00002144 	andeq	r2, r0, r4, asr #2
     c1c:	00002146 	andeq	r2, r0, r6, asr #2
	...
	__SLEEP;
     c28:	000021b4 			; <UNDEFINED> instruction: 0x000021b4
     c2c:	000021ba 			; <UNDEFINED> instruction: 0x000021ba
     c30:	000021be 			; <UNDEFINED> instruction: 0x000021be
	system_event_count ++;
     c34:	000021c0 	andeq	r2, r0, r0, asr #3
	...
	switch (__pi_systat.effpdm) {
     c40:	000021e2 	andeq	r2, r0, r2, ror #3
     c44:	000021e8 	andeq	r2, r0, r8, ror #3
     c48:	000021ea 	andeq	r2, r0, sl, ror #3
			__WFI ();
     c4c:	000021ec 	andeq	r2, r0, ip, ror #3
	...
	check_stack_overflow;
     c58:	000021f0 	strdeq	r2, [r0], -r0
     c5c:	000021fc 	strdeq	r2, [r0], -ip
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c60:	000021fc 	strdeq	r2, [r0], -ip
     c64:	00002200 	andeq	r2, r0, r0, lsl #4
			(__pi_curr->code) (tstate (__pi_curr));
     c68:	00002202 	andeq	r2, r0, r2, lsl #4
			goto Redo;
     c6c:	00002226 	andeq	r2, r0, r6, lsr #4
	...
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c78:	00002200 	andeq	r2, r0, r0, lsl #4
     c7c:	00002202 	andeq	r2, r0, r2, lsl #4
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c80:	00002226 	andeq	r2, r0, r6, lsr #4
     c84:	00002260 	andeq	r2, r0, r0, ror #4
     c88:	00002262 	andeq	r2, r0, r2, ror #4
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c8c:	00002274 	andeq	r2, r0, r4, ror r2
	...
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c98:	00002334 	andeq	r2, r0, r4, lsr r3
			__WFI ();
     c9c:	00002334 	andeq	r2, r0, r4, lsr r3
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ca0:	00002338 	andeq	r2, r0, r8, lsr r3
     ca4:	00002352 	andeq	r2, r0, r2, asr r3
}
     ca8:	00002354 	andeq	r2, r0, r4, asr r3
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cac:	00002356 	andeq	r2, r0, r6, asr r3
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cb0:	00002358 	andeq	r2, r0, r8, asr r3
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cb4:	0000235a 	andeq	r2, r0, sl, asr r3
     cb8:	0000235e 	andeq	r2, r0, lr, asr r3
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cbc:	00002368 	andeq	r2, r0, r8, ror #6
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cc8:	0000247a 	andeq	r2, r0, sl, ror r4
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ccc:	0000247e 	andeq	r2, r0, lr, ror r4
     cd0:	0000249a 	muleq	r0, sl, r4
     cd4:	0000249e 	muleq	r0, lr, r4
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     ce0:	0000247e 	andeq	r2, r0, lr, ror r4
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ce4:	0000249a 	muleq	r0, sl, r4
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     ce8:	0000249e 	muleq	r0, lr, r4
     cec:	000024a6 	andeq	r2, r0, r6, lsr #9
	...
     cf8:	00002612 	andeq	r2, r0, r2, lsl r6
			SysCtrlSetRechargeBeforePowerDown
     cfc:	00002614 	andeq	r2, r0, r4, lsl r6
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d00:	00002616 	andeq	r2, r0, r6, lsl r6
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d04:	0000261a 	andeq	r2, r0, sl, lsl r6
	...
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d10:	00002614 	andeq	r2, r0, r4, lsl r6
     d14:	00002616 	andeq	r2, r0, r6, lsl r6
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d18:	0000261a 	andeq	r2, r0, sl, lsl r6
     d1c:	00002640 	andeq	r2, r0, r0, asr #12
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d28:	00002688 	andeq	r2, r0, r8, lsl #13
     d2c:	0000268a 	andeq	r2, r0, sl, lsl #13
     d30:	0000268e 	andeq	r2, r0, lr, lsl #13
			while (!(AONWUCPowerStatusGet () &
     d34:	00002694 	muleq	r0, r4, r6
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d38:	00002696 	muleq	r0, r6, r6
     d3c:	000026e2 	andeq	r2, r0, r2, ror #13
     d40:	000026e4 	andeq	r2, r0, r4, ror #13
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d44:	000026e8 	andeq	r2, r0, r8, ror #13
     d48:	000026ea 	andeq	r2, r0, sl, ror #13
     d4c:	000026fa 	strdeq	r2, [r0], -sl
     d50:	000026fe 	strdeq	r2, [r0], -lr
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d54:	00002702 	andeq	r2, r0, r2, lsl #14
     d58:	00002734 	andeq	r2, r0, r4, lsr r7
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d5c:	00002738 	andeq	r2, r0, r8, lsr r7
	...
			reinit_uart ();
     d68:	0000273e 	andeq	r2, r0, lr, lsr r7
     d6c:	00002740 	andeq	r2, r0, r0, asr #14
     d70:	00002742 	andeq	r2, r0, r2, asr #14
}
     d74:	00002770 	andeq	r2, r0, r0, ror r7
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d80:	00001f04 	andeq	r1, r0, r4, lsl #30
     d84:	00001f24 	andeq	r1, r0, r4, lsr #30
     d88:	00001f24 	andeq	r1, r0, r4, lsr #30
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     d8c:	000020b4 	strheq	r2, [r0], -r4
     d90:	000020b4 	strheq	r2, [r0], -r4
     d94:	000020fc 	strdeq	r2, [r0], -ip
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     d98:	000020fc 	strdeq	r2, [r0], -ip
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     d9c:	00002120 	andeq	r2, r0, r0, lsr #2
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     da0:	00002120 	andeq	r2, r0, r0, lsr #2
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     da4:	0000217c 	andeq	r2, r0, ip, ror r1
     da8:	0000217c 	andeq	r2, r0, ip, ror r1
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     dac:	000021b4 			; <UNDEFINED> instruction: 0x000021b4
     db0:	000021b4 			; <UNDEFINED> instruction: 0x000021b4
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     db4:	00002334 	andeq	r2, r0, r4, lsr r3
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     db8:	00002334 	andeq	r2, r0, r4, lsr r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     dbc:	00002404 	andeq	r2, r0, r4, lsl #8
     dc0:	00002404 	andeq	r2, r0, r4, lsl #8
			PRCMPowerDomainOff (
     dc4:	000025f4 	strdeq	r2, [r0], -r4
     dc8:	000025f4 	strdeq	r2, [r0], -r4
	__SLEEP;
     dcc:	00002664 	andeq	r2, r0, r4, ror #12
     dd0:	00002664 	andeq	r2, r0, r4, ror #12
  __ASM volatile ("cpsie i" : : : "memory");
     dd4:	000027d8 	ldrdeq	r2, [r0], -r8
	...
	goto Redo;
     de0:	000027d8 	ldrdeq	r2, [r0], -r8
     de4:	000027fc 	strdeq	r2, [r0], -ip
     de8:	000027fc 	strdeq	r2, [r0], -ip
     dec:	00002820 	andeq	r2, r0, r0, lsr #16
     df0:	00002820 	andeq	r2, r0, r0, lsr #16
     df4:	00002828 	andeq	r2, r0, r8, lsr #16
     df8:	00002828 	andeq	r2, r0, r8, lsr #16
     dfc:	0000282c 	andeq	r2, r0, ip, lsr #16
     e00:	0000282c 	andeq	r2, r0, ip, lsr #16
     e04:	00002830 	andeq	r2, r0, r0, lsr r8
     e08:	00002830 	andeq	r2, r0, r0, lsr r8
     e0c:	00002878 	andeq	r2, r0, r8, ror r8
	...
     e18:	00002886 	andeq	r2, r0, r6, lsl #17
     e1c:	00002886 	andeq	r2, r0, r6, lsl #17
     e20:	0000288c 	andeq	r2, r0, ip, lsl #17
     e24:	000028e8 	andeq	r2, r0, r8, ror #17
	...
     e30:	00002878 	andeq	r2, r0, r8, ror r8
     e34:	000028e8 	andeq	r2, r0, r8, ror #17
	...
     e40:	000028fc 	strdeq	r2, [r0], -ip
	cli_tim;
     e44:	000029e0 	andeq	r2, r0, r0, ror #19
     e48:	000029e6 	andeq	r2, r0, r6, ror #19
     e4c:	000029ea 	andeq	r2, r0, sl, ror #19
	diag ("PicOS halted");
     e50:	000029f0 	strdeq	r2, [r0], -r0
	mdelay (500);
     e54:	00002a04 	andeq	r2, r0, r4, lsl #20
	...
	__PCB = NULL;
     e60:	000028e8 	andeq	r2, r0, r8, ror #17
	release;
     e64:	00002a04 	andeq	r2, r0, r4, lsl #20
	...
     e70:	00002a30 	andeq	r2, r0, r0, lsr sl
int main (void) {
     e74:	00002a32 	andeq	r2, r0, r2, lsr sl
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e78:	00002b00 	andeq	r2, r0, r0, lsl #22
     e7c:	00002b24 	andeq	r2, r0, r4, lsr #22
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e80:	00002b26 	andeq	r2, r0, r6, lsr #22
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e84:	00002b6e 	andeq	r2, r0, lr, ror #22
	system_init ();
     e88:	00002b98 	muleq	r0, r8, fp
	tcv_init ();
     e8c:	00002b9a 	muleq	r0, sl, fp
	...
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e98:	00002a32 	andeq	r2, r0, r2, lsr sl
     e9c:	00002a34 	andeq	r2, r0, r4, lsr sl
     ea0:	00002ad6 	ldrdeq	r2, [r0], -r6
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     ea4:	00002b00 	andeq	r2, r0, r0, lsl #22
     ea8:	00002b24 	andeq	r2, r0, r4, lsr #22
	delay (16, 0);
     eac:	00002b26 	andeq	r2, r0, r6, lsr #22
	...
	__pi_release ();
     eb8:	00002a72 	andeq	r2, r0, r2, ror sl
     ebc:	00002a7a 	andeq	r2, r0, sl, ror sl
     ec0:	00002c1e 	andeq	r2, r0, lr, lsl ip
     ec4:	00002c2a 	andeq	r2, r0, sl, lsr #24
	...
     ed0:	00002b78 	andeq	r2, r0, r8, ror fp
static void killev (__pi_pcb_t *pid) {
     ed4:	00002b98 	muleq	r0, r8, fp
	wfun = (aword)(pid->code);
     ed8:	00002b9a 	muleq	r0, sl, fp
	for_all_tasks (i) {
     edc:	00002bde 	ldrdeq	r2, [r0], -lr
	...
		for (j = 0; j < nevents (i); j++) {
     ee8:	00002a04 	andeq	r2, r0, r4, lsl #20
			    || i->Events [j] . Event == wfun
     eec:	00002a24 	andeq	r2, r0, r4, lsr #20
		for (j = 0; j < nevents (i); j++) {
     ef0:	00002a24 	andeq	r2, r0, r4, lsr #20
			if (i->Events [j] . Event == (aword)pid
     ef4:	00002c54 	andeq	r2, r0, r4, asr ip
     ef8:	00002c54 	andeq	r2, r0, r4, asr ip
     efc:	00002ca4 	andeq	r2, r0, r4, lsr #25
	...
	for_all_tasks (i) {
     f08:	00002cb8 			; <UNDEFINED> instruction: 0x00002cb8
}
     f0c:	00002cbc 			; <UNDEFINED> instruction: 0x00002cbc
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f10:	00002f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
static void qfree (aword *ch) {
     f14:	00002fde 	ldrdeq	r2, [r0], -lr
	...
	m_setnextp (ch, chunk);
     f20:	00002cbc 			; <UNDEFINED> instruction: 0x00002cbc
	m_setnextp (cc, ch);
     f24:	00002cc2 	andeq	r2, r0, r2, asr #25
}
     f28:	00002cfa 	strdeq	r2, [r0], -sl
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f2c:	00002d66 	andeq	r2, r0, r6, ror #26
     f30:	00002ffa 	strdeq	r2, [r0], -sl
     f34:	0000301a 	andeq	r3, r0, sl, lsl r0
	...
			m_size (chunk) += m_hdrlen + m_size (ch);
     f40:	00002e1e 	andeq	r2, r0, lr, lsl lr
     f44:	00002e98 	muleq	r0, r8, lr
     f48:	00003022 	andeq	r3, r0, r2, lsr #32
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f4c:	0000302a 	andeq	r3, r0, sl, lsr #32
	...
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f58:	00002eb0 			; <UNDEFINED> instruction: 0x00002eb0
			m_setnextp (cc, m_nextp (chunk));
     f5c:	00002f06 	andeq	r2, r0, r6, lsl #30
			m_size (ch) += m_hdrlen + m_size (chunk);
     f60:	00002f7c 	andeq	r2, r0, ip, ror pc
     f64:	00002f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
	...
     f70:	00002f0c 	andeq	r2, r0, ip, lsl #30
     f74:	00002f7c 	andeq	r2, r0, ip, ror pc
			if (m_size (chunk) >= m_size (ch))
     f78:	00002fde 	ldrdeq	r2, [r0], -lr
     f7c:	00002fe6 	andeq	r2, r0, r6, ror #31
     f80:	0000302a 	andeq	r3, r0, sl, lsr #32
		chunk = m_nextp (chunk))
     f84:	00003034 	andeq	r3, r0, r4, lsr r0
	...
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f90:	00002ca4 	andeq	r2, r0, r4, lsr #25
	diag_wait (a);
     f94:	00003034 	andeq	r3, r0, r4, lsr r0
	...
}
     fa0:	00003034 	andeq	r3, r0, r4, lsr r0
     fa4:	0000305c 	andeq	r3, r0, ip, asr r0
	syserror (ESTATE, "state");
     fa8:	00000001 	andeq	r0, r0, r1
     fac:	00000001 	andeq	r0, r0, r1
	...
	for (i = 0; i < MAX_UTIMERS; i++)
     fb8:	0000305c 	andeq	r3, r0, ip, asr r0
void utimer_add (address ut) {
     fbc:	0000308c 	andeq	r3, r0, ip, lsl #1
	...
	for (i = 0; i < MAX_UTIMERS; i++)
     fc8:	0000308c 	andeq	r3, r0, ip, lsl #1
     fcc:	000030ac 	andeq	r3, r0, ip, lsr #1
		syserror (ERESOURCE, "ut a");
     fd0:	000030ac 	andeq	r3, r0, ip, lsr #1
	__pi_utims [i] = ut;
     fd4:	000030c4 	andeq	r3, r0, r4, asr #1
	...
}
     fe0:	000030c4 	andeq	r3, r0, r4, asr #1
	*t = v;
     fe4:	000030cc 	andeq	r3, r0, ip, asr #1
	TCI_RUN_AUXILIARY_TIMER;
     fe8:	00000001 	andeq	r0, r0, r1
void update_n_wake (word min, Boolean force) {
     fec:	00000001 	andeq	r0, r0, r1
	if (TCI_UPDATE_DELAY_TICKS (force))
     ff0:	000030cc 	andeq	r3, r0, ip, asr #1
     ff4:	000030d4 	ldrdeq	r3, [r0], -r4
     ff8:	00000001 	andeq	r0, r0, r1
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     ffc:	00000001 	andeq	r0, r0, r1
    1000:	00000001 	andeq	r0, r0, r1
    1004:	00000001 	andeq	r0, r0, r1
	...
    1010:	00003136 	andeq	r3, r0, r6, lsr r1
    1014:	00003146 	andeq	r3, r0, r6, asr #2
    1018:	0000314c 	andeq	r3, r0, ip, asr #2
    101c:	0000314e 	andeq	r3, r0, lr, asr #2
	...
    1028:	000030d4 	ldrdeq	r3, [r0], -r4
    102c:	00003130 	andeq	r3, r0, r0, lsr r1
		for_all_tasks (i) {
    1030:	00003130 	andeq	r3, r0, r0, lsr r1
	__pi_mintk = znew + min;
    1034:	0000315c 	andeq	r3, r0, ip, asr r1
    1038:	00000001 	andeq	r0, r0, r1
			if (!twaiting (i))
    103c:	00000001 	andeq	r0, r0, r1
    1040:	0000315c 	andeq	r3, r0, ip, asr r1
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1044:	00003174 	andeq	r3, r0, r4, ror r1
    1048:	00003174 	andeq	r3, r0, r4, ror r1
    104c:	000031d4 	ldrdeq	r3, [r0], -r4
    1050:	000031d4 	ldrdeq	r3, [r0], -r4
    1054:	00003208 	andeq	r3, r0, r8, lsl #4
    1058:	00000001 	andeq	r0, r0, r1
    105c:	00000001 	andeq	r0, r0, r1
    1060:	00000001 	andeq	r0, r0, r1
    1064:	00000001 	andeq	r0, r0, r1
    1068:	00000001 	andeq	r0, r0, r1
    106c:	00000001 	andeq	r0, r0, r1
    1070:	00000001 	andeq	r0, r0, r1
				wakeuptm (i);
    1074:	00000001 	andeq	r0, r0, r1
	...
				d = i->Timer - znew;
    1080:	00000001 	andeq	r0, r0, r1
    1084:	00000001 	andeq	r0, r0, r1
    1088:	00003208 	andeq	r3, r0, r8, lsl #4
		if ((word)(__pi_mintk - znew) < min) 
    108c:	00003230 	andeq	r3, r0, r0, lsr r2
    1090:	00003230 	andeq	r3, r0, r0, lsr r2
    1094:	0000327c 	andeq	r3, r0, ip, ror r2
	__pi_old = znew;
    1098:	0000327c 	andeq	r3, r0, ip, ror r2
}
    109c:	000033cc 	andeq	r3, r0, ip, asr #7
	TCI_RUN_DELAY_TIMER;
    10a0:	000033cc 	andeq	r3, r0, ip, asr #7
}
    10a4:	000034e4 	andeq	r3, r0, r4, ror #9
    10a8:	000034e4 	andeq	r3, r0, r4, ror #9
    10ac:	00003504 	andeq	r3, r0, r4, lsl #10
    10b0:	00000001 	andeq	r0, r0, r1
    10b4:	00000001 	andeq	r0, r0, r1
void proceed (word state) {
    10b8:	00003504 	andeq	r3, r0, r4, lsl #10
	prcdstate (__pi_curr, state);
    10bc:	00003520 	andeq	r3, r0, r0, lsr #10
	...
	release;
    10c8:	00003520 	andeq	r3, r0, r0, lsr #10
void __pi_wait (aword event, word state) {
    10cc:	000035f4 	strdeq	r3, [r0], -r4
	sint j = nevents (__pi_curr);
    10d0:	000035f4 	strdeq	r3, [r0], -r4
	if (j >= MAX_EVENTS_PER_TASK)
    10d4:	00003698 	muleq	r0, r8, r6
	...
		syserror (ENEVENTS, "sw");
    10e0:	000036a6 	andeq	r3, r0, r6, lsr #13
    10e4:	000036a8 	andeq	r3, r0, r8, lsr #13
	setestate (__pi_curr->Events [j], state, event);
    10e8:	000036ac 	andeq	r3, r0, ip, lsr #13
	incwait (__pi_curr);
    10ec:	000036b0 			; <UNDEFINED> instruction: 0x000036b0
	...
}
    10f8:	000039b4 			; <UNDEFINED> instruction: 0x000039b4
    10fc:	000039b6 			; <UNDEFINED> instruction: 0x000039b6
void __pi_trigger (aword event) {
    1100:	000039b8 			; <UNDEFINED> instruction: 0x000039b8
	for_all_tasks (i) {
    1104:	000039ba 			; <UNDEFINED> instruction: 0x000039ba
	...
		for (j = 0; j < nevents (i); j++) {
    1110:	00003698 	muleq	r0, r8, r6
    1114:	00003714 	andeq	r3, r0, r4, lsl r7
			if (i->Events [j] . Event == event) {
    1118:	00003714 	andeq	r3, r0, r4, lsl r7
    111c:	000037c0 	andeq	r3, r0, r0, asr #15
    1120:	000037c0 	andeq	r3, r0, r0, asr #15
				wakeupev (i, j);
    1124:	0000381c 	andeq	r3, r0, ip, lsl r8
    1128:	0000381c 	andeq	r3, r0, ip, lsl r8
	for_all_tasks (i) {
    112c:	00003834 	andeq	r3, r0, r4, lsr r8
}
    1130:	00000001 	andeq	r0, r0, r1
aword __pi_join (aword pid, word st) {
    1134:	00000001 	andeq	r0, r0, r1
	for_all_tasks (i) {
    1138:	00003834 	andeq	r3, r0, r4, lsr r8
    113c:	00003844 	andeq	r3, r0, r4, asr #16
	return 0;
    1140:	00003844 	andeq	r3, r0, r4, asr #16
		if ((aword)i == pid) {
    1144:	00003858 	andeq	r3, r0, r8, asr r8
			__pi_wait (pid, st);
    1148:	00003858 	andeq	r3, r0, r8, asr r8
}
    114c:	000038bc 			; <UNDEFINED> instruction: 0x000038bc
	for_all_tasks (i) {
    1150:	000038bc 			; <UNDEFINED> instruction: 0x000038bc
    1154:	000038d0 	ldrdeq	r3, [r0], -r0
void delay (word d, word state) {
    1158:	000038d0 	ldrdeq	r3, [r0], -r0
	settstate (__pi_curr, state);
    115c:	000038e4 	andeq	r3, r0, r4, ror #17
    1160:	000038e4 	andeq	r3, r0, r4, ror #17
    1164:	000038f8 	strdeq	r3, [r0], -r8
    1168:	000038f8 	strdeq	r3, [r0], -r8
	update_n_wake (d, YES);
    116c:	00003920 	andeq	r3, r0, r0, lsr #18
    1170:	00003920 	andeq	r3, r0, r0, lsr #18
	__pi_curr->Timer = __pi_old + d;
    1174:	00003930 	andeq	r3, r0, r0, lsr r9
    1178:	00003930 	andeq	r3, r0, r0, lsr r9
	inctimer (__pi_curr);
    117c:	0000395c 	andeq	r3, r0, ip, asr r9
    1180:	0000395c 	andeq	r3, r0, ip, asr r9
    1184:	00003970 	andeq	r3, r0, r0, ror r9
}
    1188:	00003970 	andeq	r3, r0, r0, ror r9
    118c:	00003984 	andeq	r3, r0, r4, lsl #19
	if (fun == NULL)
    1190:	00003984 	andeq	r3, r0, r4, lsl #19
		return (int) __pi_curr;
    1194:	00003a94 	muleq	r0, r4, sl
    1198:	00003a94 	muleq	r0, r4, sl
	for_all_tasks (i)
    119c:	00003af8 	strdeq	r3, [r0], -r8
}
    11a0:	00003af8 	strdeq	r3, [r0], -r8
		if (i->code == fun)
    11a4:	00003b20 	andeq	r3, r0, r0, lsr #22
	for_all_tasks (i)
    11a8:	00003b20 	andeq	r3, r0, r0, lsr #22
    11ac:	00003c70 	andeq	r3, r0, r0, ror ip
	...
	for (i = 0; *(s+i) != '\0'; i++);
    11b8:	00000001 	andeq	r0, r0, r1
}
    11bc:	00000001 	andeq	r0, r0, r1
	for (i = 0; *(s+i) != '\0'; i++);
    11c0:	00000001 	andeq	r0, r0, r1
	while ((Boolean)(*d++ = *s++));
    11c4:	00000001 	andeq	r0, r0, r1
	...
}
    11d0:	00003ce6 	andeq	r3, r0, r6, ror #25
	while (n--)
    11d4:	00003ce8 	andeq	r3, r0, r8, ror #25
    11d8:	00003cea 	andeq	r3, r0, sl, ror #25
		*dest++ = *src++;
    11dc:	00003cee 	andeq	r3, r0, lr, ror #25
	...
	while (n--)
    11e8:	00000001 	andeq	r0, r0, r1
}
    11ec:	00000001 	andeq	r0, r0, r1
		*dest++ = c;
    11f0:	00003c70 	andeq	r3, r0, r0, ror ip
void adddevfunc (devreqfun_t rf, int loc) {
    11f4:	00003e90 	muleq	r0, r0, lr
		syserror (EREQPAR, "addv");
    11f8:	00003e90 	muleq	r0, r0, lr
		syserror (ERESOURCE, "addv");
    11fc:	00003ef0 	strdeq	r3, [r0], -r0
	if (ioreq [loc] != NULL)
    1200:	00000001 	andeq	r0, r0, r1
    1204:	00000001 	andeq	r0, r0, r1
		syserror (ERESOURCE, "addv");
    1208:	00003ef0 	strdeq	r3, [r0], -r0
	ioreq [loc] = rf;
    120c:	00003f08 	andeq	r3, r0, r8, lsl #30
	...
sint io (word retry, word dev, word operation, char *buf, word len) {
    1218:	00003f56 	andeq	r3, r0, r6, asr pc
    121c:	00003f5a 	andeq	r3, r0, sl, asr pc
    1220:	00003f60 	andeq	r3, r0, r0, ror #30
    1224:	00003f62 	andeq	r3, r0, r2, ror #30
	...
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1230:	00003f5a 	andeq	r3, r0, sl, asr pc
		syserror (ENODEVICE, "io");
    1234:	00003f60 	andeq	r3, r0, r0, ror #30
    1238:	00003f62 	andeq	r3, r0, r2, ror #30
	if (len == 0)
    123c:	00003f6a 	andeq	r3, r0, sl, ror #30
	...
	if (ret >= 0)
    1248:	00000001 	andeq	r0, r0, r1
	if (ret == -1) {
    124c:	00000001 	andeq	r0, r0, r1
    1250:	00000001 	andeq	r0, r0, r1
		if (retry == WNONE)
    1254:	00000001 	andeq	r0, r0, r1
		iowait (dev, operation, retry);
    1258:	00003f08 	andeq	r3, r0, r8, lsl #30
    125c:	00003f54 	andeq	r3, r0, r4, asr pc
    1260:	00000001 	andeq	r0, r0, r1
			release;
    1264:	00000001 	andeq	r0, r0, r1
	if (ret == -2) {
    1268:	00003f54 	andeq	r3, r0, r4, asr pc
		if (retry != WNONE) {
    126c:	00003fc0 	andeq	r3, r0, r0, asr #31
    1270:	00003fc0 	andeq	r3, r0, r0, asr #31
			iowait (dev, operation, retry);
    1274:	00003fd6 	ldrdeq	r3, [r0], -r6
	...
			(ioreq [dev]) (NONE, buf, len);
    1280:	00003fd8 	ldrdeq	r3, [r0], -r8
    1284:	00004000 	andeq	r4, r0, r0
		(ioreq [dev]) (NONE, buf, len);
    1288:	00004000 	andeq	r4, r0, r0
    128c:	00004008 	andeq	r4, r0, r8
    1290:	00000001 	andeq	r0, r0, r1
}
    1294:	00000001 	andeq	r0, r0, r1
	if (retry != WNONE) {
    1298:	00000001 	andeq	r0, r0, r1
		delay (-ret - 2, retry);
    129c:	00000001 	andeq	r0, r0, r1
    12a0:	00000001 	andeq	r0, r0, r1
    12a4:	00000001 	andeq	r0, r0, r1
    12a8:	00000001 	andeq	r0, r0, r1
		release;
    12ac:	00000001 	andeq	r0, r0, r1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	0000043c 	andeq	r0, r0, ip, lsr r4
       4:	01c90003 	biceq	r0, r9, r3
}
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	2f727375 	svccs	0x00727375
      20:	2f62696c 	svccs	0x0062696c
      24:	2f636367 	svccs	0x00636367
      28:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      2c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
      30:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
      34:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
      38:	2f312e32 	svccs	0x00312e32
      3c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
			i = k;
      40:	00656475 	rsbeq	r6, r5, r5, ror r4
				j->Next = k;
      44:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffff90 <_estack+0xdfffaf90>
      48:	616d2f65 	cmnvs	sp, r5, ror #30
}
      4c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
      50:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
      54:	706f746b 	rsbvc	r7, pc, fp, ror #8
		release;
      58:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
      5c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
			nq++;
      60:	4349502f 	movtmi	r5, #36911	; 0x902f
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	502f534f 	eorpl	r5, pc, pc, asr #6
      68:	534f6369 	movtpl	r6, #62313	; 0xf369
      6c:	3143432f 	cmpcc	r3, pc, lsr #6
      70:	00585833 	subseq	r5, r8, r3, lsr r8
      74:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffc0 <_estack+0xdfffafc0>
      78:	616d2f65 	cmnvs	sp, r5, ror #30
      7c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
      80:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
      84:	706f746b 	rsbvc	r7, pc, fp, ror #8
      88:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
      8c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	if (!button_still_pressed (__button_list [pbutton]))
      90:	4349502f 	movtmi	r5, #36911	; 0x902f
      94:	502f534f 	eorpl	r5, pc, pc, asr #6
      98:	534f6369 	movtpl	r6, #62313	; 0xf369
	if (baction == NULL)
      9c:	6f682f00 	svcvs	0x00682f00
      a0:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; fffffef4 <_estack+0xdfffaef4>
	(*baction) (pbutton);
      a4:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
endthread
      a8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	6f746b73 	svcvs	0x00746b73
      b0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
endthread
      b4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
      b8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
      bc:	2f534f43 	svccs	0x00534f43
      c0:	4f636950 	svcmi	0x00636950
      c4:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
fsm receiver {
      c8:	2f736269 	svccs	0x00736269
      cc:	74654e56 	strbtvc	r4, [r5], #-3670	; 0xfffff1aa
      d0:	682f0049 	stmdavs	pc!, {r0, r3, r6}	; <UNPREDICTABLE>
      d4:	2f656d6f 	svccs	0x00656d6f
        packet = tcv_rnp(Receiving, sfd);
      d8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
      dc:	442f6e69 	strtmi	r6, [pc], #-3689	; e4 <receiver+0x1c>
      e0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
      e4:	4f2f706f 	svcmi	0x002f706f
        receivedMessage = (message *)(packet + 1);
      e8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
      ec:	502f5445 	eorpl	r5, pc, r5, asr #8
        if(receivedMessage->receiverId == nodeId) {
      f0:	534f4349 	movtpl	r4, #62281	; 0xf349
      f4:	6369502f 	cmnvs	r9, #47	; 0x2f
      f8:	6b2f534f 	blvs	bd4e3c <__ccfg+0xbb4e94>
            proceed From_Broadcast;
      fc:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
        proceed Receiving;
     100:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
     104:	2f656d6f 	svccs	0x00656d6f
        ser_outf(Get_Message, "Message ");
     108:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
     10c:	442f6e69 	strtmi	r6, [pc], #-3689	; 114 <_Min_Stack_Size+0x14>
        proceed Show_Message;
     110:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
        ser_outf(From_Broadcast, "Broadcast ");
     114:	4f2f706f 	svcmi	0x002f706f
     118:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
        ser_outf(Show_Message, "from node %d (Seq %d): %s\n\r", receivedMessage->senderId, receivedMessage->sequenceNumber, receivedMessage->payload);
     11c:	502f5445 	eorpl	r5, pc, r5, asr #8
     120:	534f4349 	movtpl	r4, #62281	; 0xf349
     124:	6369502f 	cmnvs	r9, #47	; 0x2f
     128:	562f534f 	strtpl	r5, [pc], -pc, asr #6
     12c:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
        tcv_endp(packet);
     130:	756c502f 	strbvc	r5, [ip, #-47]!	; 0xffffffd1
     134:	6c754e67 	ldclvs	14, cr4, [r5], #-412	; 0xfffffe64
        proceed Receiving;
     138:	6100006c 	tstvs	r0, ip, rrx
}
     13c:	632e7070 			; <UNDEFINED> instruction: 0x632e7070
        proceed Receiving;
     140:	00000063 	andeq	r0, r0, r3, rrx
        } else if (receivedMessage->receiverId == '0' || receivedMessage->receiverId == 0) {
     144:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     148:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
            proceed From_Broadcast;
     14c:	00010068 	andeq	r0, r1, r8, rrx
}
     150:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     154:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
     158:	00010068 	andeq	r0, r1, r8, rrx
     15c:	63726100 	cmnvs	r2, #0, 2
     160:	00682e68 	rsbeq	r2, r8, r8, ror #28
     164:	6d000002 	stcvs	0, cr0, [r0, #-8]
     168:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
     16c:	00020068 	andeq	r0, r2, r8, rrx
     170:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
     174:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
fsm transmitter (message * messagePtr) {
     178:	00682e73 	rsbeq	r2, r8, r3, ror lr
     17c:	62000002 	andvs	r0, r0, #2
     180:	6f747475 	svcvs	0x00747475
}
     184:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
     188:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
     18c:	00000200 	andeq	r0, r0, r0, lsl #4
     190:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     194:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     198:	74000003 	strvc	r0, [r0], #-3
     19c:	645f7663 	ldrbvs	r7, [pc], #-1635	; 1a4 <transmitter+0x2c>
        *p = messagePtr->senderId; p++;
     1a0:	2e736665 	cdpcs	6, 7, cr6, cr3, cr5, {3}
     1a4:	00040068 	andeq	r0, r4, r8, rrx
        strcpy(p, messagePtr->payload);
     1a8:	72656b00 	rsbvc	r6, r5, #0, 22
        *p = messagePtr->receiverId; p++;
     1ac:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
        *p = messagePtr->sequenceNumber; p++;
     1b0:	00050068 	andeq	r0, r5, r8, rrx
        strcpy(p, messagePtr->payload);
     1b4:	756c7000 	strbvc	r7, [ip, #-0]!
        tcv_endp (spkt);
     1b8:	756e5f67 	strbvc	r5, [lr, #-3943]!	; 0xfffff099
     1bc:	682e6c6c 	stmdavs	lr!, {r2, r3, r5, r6, sl, fp, sp, lr}
        sequence++;
     1c0:	00000600 	andeq	r0, r0, r0, lsl #12
     1c4:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
        ser_outf(Transmit_Message, "Message Sent\n\r");
     1c8:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
     1cc:	00003e6e 	andeq	r3, r0, lr, ror #28
}
     1d0:	05000000 	streq	r0, [r0, #-0]
        finish;
     1d4:	0205001e 	andeq	r0, r5, #30
     1d8:	000000c8 	andeq	r0, r0, r8, asr #1
     1dc:	05012003 	streq	r2, [r1, #-3]
     1e0:	1e050120 	adfnesp	f0, f5, f0
     1e4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
fsm root {
     1e8:	05138306 	ldreq	r8, [r3, #-774]	; 0xfffffcfa
     1ec:	12051509 	andne	r1, r5, #37748736	; 0x2400000
     1f0:	10050106 	andne	r0, r5, r6, lsl #2
     1f4:	06090558 			; <UNDEFINED> instruction: 0x06090558
     1f8:	062e0531 			; <UNDEFINED> instruction: 0x062e0531
     1fc:	20190501 	andscs	r0, r9, r1, lsl #10
        nodeId = 1;
     200:	05202e05 	streq	r2, [r0, #-3589]!	; 0xfffff1fb
     204:	09052e19 	stmdbeq	r5, {r0, r3, r4, r9, sl, fp, sp}
     208:	28052206 	stmdacs	r5, {r1, r2, r9, sp}
        sfd = tcv_open(WNONE, 0, 0);
     20c:	1b050106 	blne	14062c <__ccfg+0x120684>
        messagePtr = (message *) umalloc(sizeof(message));
     210:	200b0520 	andcs	r0, fp, r0, lsr #10
     214:	3d060d05 	stccc	13, cr0, [r6, #-20]	; 0xffffffec
     218:	09052206 	stmdbeq	r5, {r1, r2, r9, sp}
        phys_cc1350(0, MAX_PACKET_LENGTH);
     21c:	4b3f3106 	blmi	fcc63c <__ccfg+0xfac694>
        tcv_plug(0, &plug_null);
     220:	50054d3f 	andpl	r4, r5, pc, lsr sp
     224:	09050106 	stmdbeq	r5, {r1, r2, r8}
        sfd = tcv_open(WNONE, 0, 0);
     228:	20500520 	subscs	r0, r0, r0, lsr #10
     22c:	06200905 	strteq	r0, [r0], -r5, lsl #18
     230:	01054b76 	tsteq	r5, r6, ror fp
		tcv_control(sfd, PHYSOPT_ON, NULL);
     234:	09052206 	stmdbeq	r5, {r1, r2, r9, sp}
        sfd = tcv_open(WNONE, 0, 0);
     238:	0610053a 			; <UNDEFINED> instruction: 0x0610053a
		tcv_control(sfd, PHYSOPT_ON, NULL);
     23c:	052e6f03 	streq	r6, [lr, #-3843]!	; 0xfffff0fd
		if (sfd < 0) {
     240:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
			diag("Cannot open tcv interface");
     244:	0d052e37 	stceq	14, cr2, [r5, #-220]	; 0xffffff24
     248:	13052f06 	movwne	r2, #24326	; 0x5f06
			halt();
     24c:	052e1203 	streq	r1, [lr, #-515]!	; 0xfffffdfd
        runfsm receiver;
     250:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
     254:	00083c13 	andeq	r3, r8, r3, lsl ip
        receiverId = 0;
     258:	21050101 	tstcs	r5, r1, lsl #2
     25c:	78020500 	stmdavc	r2, {r8, sl}
        ser_outf(Menu_Start, "P2P Chat (Node #%d)\n\r", nodeId);
     260:	03000001 	movweq	r0, #1
     264:	050100c1 	streq	r0, [r1, #-193]	; 0xffffff3f
        ser_outf(Menu_Choices, menuText);
     268:	58050123 	stmdapl	r5, {r0, r1, r5, r8}
     26c:	06210501 	strteq	r0, [r1], -r1, lsl #10
        ser_inf(Choice, "%c", &choice);
     270:	20580501 	subscs	r0, r8, r1, lsl #10
     274:	03061305 	movweq	r1, #25349	; 0x6305
     278:	01054a15 	tsteq	r5, r5, lsl sl
        switch (choice)
     27c:	13050106 	movwne	r0, #20742	; 0x5106
     280:	034f052e 	movteq	r0, #62766	; 0xf52e
     284:	10052e6b 	andne	r2, r5, fp, ror #28
     288:	1b4f0525 	blne	13c1724 <__ccfg+0x13a177c>
     28c:	05251005 	streq	r1, [r5, #-5]!
     290:	09051b2d 	stmdbeq	r5, {r0, r2, r3, r5, r8, r9, fp, ip}
                proceed Menu_Start;
     294:	05142306 	ldreq	r2, [r4, #-774]	; 0xfffffcfa
     298:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
     29c:	05590609 	ldrbeq	r0, [r9, #-1545]	; 0xfffff9f7
                proceed Direct_Transmission;
     2a0:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
                proceed Menu_Start;
     2a4:	13210609 			; <UNDEFINED> instruction: 0x13210609
        ser_outf(Change_ID, "New node ID (1-25):");
     2a8:	01061805 	tsteq	r6, r5, lsl #16
     2ac:	05240905 	streq	r0, [r4, #-2309]!	; 0xfffff6fb
        ser_inf(Get_New_ID, "%d", &nodeId);
     2b0:	24051c0c 	strcs	r1, [r5], #-3084	; 0xfffff3f4
     2b4:	09052006 	stmdbeq	r5, {r1, r2, sp}
     2b8:	06180513 			; <UNDEFINED> instruction: 0x06180513
    if (node < 1 || node > 25) {
     2bc:	23090501 	movwcs	r0, #38145	; 0x9501
     2c0:	051d0c05 	ldreq	r0, [sp, #-3077]	; 0xfffff3fb
            proceed Change_ID;
     2c4:	052e0626 	streq	r0, [lr, #-1574]!	; 0xfffff9da
     2c8:	18051309 	stmdane	r5, {r0, r3, r8, r9, ip}
        proceed Menu_Start;
     2cc:	0c050106 	stfeqs	f0, [r5], {6}
        ser_outf(Direct_Transmission, "Receiver node ID (1-25):");
     2d0:	062a0520 	strteq	r0, [sl], -r0, lsr #10
     2d4:	1409052e 	strne	r0, [r9], #-1326	; 0xfffffad2
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     2d8:	11053e30 	tstne	r5, r0, lsr lr
     2dc:	09050106 	stmdbeq	r5, {r1, r2, r8}
     2e0:	054b4d06 	strbeq	r4, [fp, #-3334]	; 0xfffff2fa
    if (node < 1 || node > 25) {
     2e4:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
     2e8:	0b022d09 	bleq	8b714 <__ccfg+0x6b76c>
            proceed Direct_Transmission;
     2ec:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     2f0:	02050022 	andeq	r0, r5, #34	; 0x22
        ser_outf(Broadcast_Transmission, "Message: ");
     2f4:	00000000 	andeq	r0, r0, r0
     2f8:	0100d803 	tsteq	r0, r3, lsl #16
        ser_in(Get_Message, messagePtr->payload, PAYLOAD_LENGTH);
     2fc:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
     300:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     304:	05022501 	streq	r2, [r2, #-1281]	; 0xfffffaff
        if(strlen(messagePtr->payload) > PAYLOAD_LENGTH) {
     308:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     30c:	0205001a 	andeq	r0, r5, #26
     310:	000001e8 	andeq	r0, r0, r8, ror #3
            messagePtr->payload[PAYLOAD_LENGTH - 1] = '/0';
     314:	0100e003 	tsteq	r0, r3
     318:	05011c05 	streq	r1, [r1, #-3077]	; 0xfffff3fb
        call transmitter(messagePtr, Menu_Start);
     31c:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
        messagePtr->senderId = nodeId;
     320:	14bc0605 	ldrtne	r0, [ip], #1541	; 0x605
     324:	18090514 	stmdane	r9, {r2, r4, r8, sl}
        messagePtr->receiverId = receiverId;
     328:	01061005 	tsteq	r6, r5
        messagePtr->sequenceNumber = sequence;
     32c:	05211205 	streq	r1, [r1, #-517]!	; 0xfffffdfb
     330:	2c051f10 	stccs	15, cr1, [r5], {16}
        call transmitter(messagePtr, Menu_Start);
     334:	1d100523 	cfldr32ne	mvfx0, [r0, #-140]	; 0xffffff74
     338:	21060905 	tstcs	r6, r5, lsl #18
     33c:	01061205 	tsteq	r6, r5, lsl #4
     340:	05270d05 	streq	r0, [r7, #-3333]!	; 0xfffff2fb
                proceed Broadcast_Transmission;
     344:	20790312 	rsbscs	r0, r9, r2, lsl r3
     348:	22060905 	andcs	r0, r6, #81920	; 0x14000
     34c:	01062c05 	tsteq	r6, r5, lsl #24
     350:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
     354:	14052209 	strne	r2, [r5], #-521	; 0xfffffdf7
     358:	0609051e 			; <UNDEFINED> instruction: 0x0609051e
     35c:	054b3e22 	strbeq	r3, [fp, #-3618]	; 0xfffff1de
     360:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
     364:	0d056703 	stceq	7, cr6, [r5, #-12]
     368:	0603052d 	streq	r0, [r3], -sp, lsr #10
     36c:	06053021 	streq	r3, [r5], -r1, lsr #32
     370:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     374:	053d3d06 	ldreq	r3, [sp, #-3334]!	; 0xfffff2fa
     378:	054d3109 	strbeq	r3, [sp, #-265]	; 0xfffffef7
     37c:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
     380:	14052f09 	strne	r2, [r5], #-3849	; 0xfffff0f7
     384:	0609051f 			; <UNDEFINED> instruction: 0x0609051f
     388:	144d5b21 	strbne	r5, [sp], #-2849	; 0xfffff4df
     38c:	03110568 	tsteq	r1, #104, 10	; 0x1a000000
static void devinit_uart (int devnum) {
     390:	7703ac12 	smladvc	r3, r2, ip, sl
	adddevfunc (ioreq_uart_a, devnum);
     394:	03062966 	movweq	r2, #26982	; 0x6966
     398:	2f06200e 	svccs	0x0006200e
void udelay (volatile word n) {
     39c:	4d160905 	vldrmi.16	s0, [r6, #-10]	; <UNPREDICTABLE>
     3a0:	03050568 	movweq	r0, #21864	; 0x5568
	while (n) {
     3a4:	05017fb3 	streq	r7, [r1, #-4019]	; 0xfffff04d
     3a8:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
}
     3ac:	09052008 	stmdbeq	r5, {r3, sp}
	while (n--);
     3b0:	0d053d06 	stceq	13, cr3, [r5, #-24]	; 0xffffffe8
     3b4:	0100cd03 	tsteq	r0, r3, lsl #26
     3b8:	3f3f0905 	svccc	0x003f0905
		n--;
     3bc:	0505684d 	streq	r6, [r5, #-2125]	; 0xfffff7b3
     3c0:	017fa703 	cmneq	pc, r3, lsl #14
     3c4:	01061205 	tsteq	r6, r5, lsl #4
void mdelay (volatile word n) {
     3c8:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
     3cc:	053d0609 	ldreq	r0, [sp, #-1545]!	; 0xfffff9f7
	while (n) {
     3d0:	00d9030d 	sbcseq	r0, r9, sp, lsl #6
     3d4:	40090501 	andmi	r0, r9, r1, lsl #10
}
     3d8:	0627054f 	strteq	r0, [r7], -pc, asr #10
		udelay (999);
     3dc:	20090501 	andcs	r0, r9, r1, lsl #10
     3e0:	05202705 	streq	r2, [r0, #-1797]!	; 0xfffff8fb
		n--;
     3e4:	4c062009 	stcmi	0, cr2, [r6], {9}
     3e8:	01062305 	tsteq	r6, r5, lsl #6
     3ec:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
     3f0:	0d053c0b 	stceq	12, cr3, [r5, #-44]	; 0xffffffd4
void __pi_ondomain (lword d) {
     3f4:	29052106 	stmdbcs	r5, {r1, r2, r8, sp}
     3f8:	09050106 	stmdbeq	r5, {r1, r2, r8}
		if (__pi_systat.effpdm > 1)
     3fc:	13054e06 	movwne	r4, #24070	; 0x5e06
     400:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
			__pi_systat.effpdm = 1;
     404:	1c130524 	cfldr32ne	mvfx0, [r3], {36}	; 0x24
	PRCMPowerDomainOn (d);
     408:	05201e05 	streq	r1, [r0, #-3589]!	; 0xfffff1fb
     40c:	053d0609 	ldreq	r0, [sp, #-1545]!	; 0xfffff9f7
     410:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     414:	053d0609 	ldreq	r0, [sp, #-1545]!	; 0xfffff9f7
     418:	05010624 	streq	r0, [r1, #-1572]	; 0xfffff9dc
     41c:	053e0609 	ldreq	r0, [lr, #-1545]!	; 0xfffff9f7
	__pi_systat.ondmns |= d;
     420:	1205010e 	andne	r0, r5, #-2147483645	; 0x80000003
     424:	11050106 	tstne	r5, r6, lsl #2
}
     428:	065a0558 			; <UNDEFINED> instruction: 0x065a0558
     42c:	03110520 	tsteq	r1, #32, 10	; 0x8000000
void __pi_offdomain (lword d) {
     430:	13052e51 	movwne	r2, #24145	; 0x5e51
     434:	052e3003 	streq	r3, [lr, #-3]!
	PRCMPowerDomainOff (d);
     438:	022e0601 	eoreq	r0, lr, #1048576	; 0x100000
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     43c:	01010023 	tsteq	r1, r3, lsr #32
     440:	0000155c 	andeq	r1, r0, ip, asr r5
     444:	029b0003 	addseq	r0, fp, #3
	if (d & PRCM_DOMAIN_RFCORE) {
     448:	01020000 	mrseq	r0, (UNDEF: 2)
     44c:	000d0efb 	strdeq	r0, [sp], -fp
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     450:	01010101 	tsteq	r1, r1, lsl #2
     454:	01000000 	mrseq	r0, (UNDEF: 0)
			__pi_systat.effpdm = __pi_systat.reqpdm;
     458:	2f010000 	svccs	0x00010000
     45c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	__pi_systat.ondmns &= ~d;
     460:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
     464:	2f6e6974 	svccs	0x006e6974
}
     468:	6b736544 	blvs	1cd9980 <__ccfg+0x1cb99d8>
     46c:	2f706f74 	svccs	0x00706f74
void __pi_syserror (word ec, const char *m) {
     470:	4f534c4f 	svcmi	0x00534c4f
	diag ("SYSERR: %x, %s", ec, m);
     474:	2f54454e 	svccs	0x0054454e
     478:	4f434950 	svcmi	0x00434950
  __ASM volatile ("cpsid i" : : : "memory");
     47c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     480:	2f534f63 	svccs	0x00534f63
     484:	33314343 	teqcc	r1, #201326593	; 0xc000001
     488:	2f005858 	svccs	0x00005858
		all_leds_blink;
     48c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     490:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
     494:	2f6e6974 	svccs	0x006e6974
     498:	6b736544 	blvs	1cd99b0 <__ccfg+0x1cb9a08>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     49c:	2f706f74 	svccs	0x00706f74
     4a0:	4f534c4f 	svcmi	0x00534c4f
     4a4:	2f54454e 	svccs	0x0054454e
     4a8:	4f434950 	svcmi	0x00434950
     4ac:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
     4b0:	2f534f63 	svccs	0x00534f63
	while (1) {
     4b4:	33314343 	teqcc	r1, #201326593	; 0xc000001
     4b8:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
     4bc:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
     4c0:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
void tci_run_delay_timer () {
     4c4:	72642f45 	rsbvc	r2, r4, #276	; 0x114
	setdel = __pi_mintk - __pi_old;
     4c8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     4cc:	0062696c 	rsbeq	r6, r2, ip, ror #18
     4d0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 41c <__pi_ondomain+0x28>
     4d4:	616d2f65 	cmnvs	sp, r5, ror #30
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4d8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
     4dc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     4e0:	706f746b 	rsbvc	r7, pc, fp, ror #8
     4e4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     4e8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	sti_tim;
     4ec:	4349502f 	movtmi	r5, #36911	; 0x902f
}
     4f0:	502f534f 	eorpl	r5, pc, pc, asr #6
     4f4:	534f6369 	movtpl	r6, #62313	; 0xf369
     4f8:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
     4fc:	492f7362 	stmdbmi	pc!, {r1, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
     500:	682f004f 	stmdavs	pc!, {r0, r1, r2, r3, r6}	; <UNPREDICTABLE>
	cli_aux;
     504:	2f656d6f 	svccs	0x00656d6f
     508:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     50c:	442f6e69 	strtmi	r6, [pc], #-3689	; 514 <tci_run_auxiliary_timer+0x10>
     510:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     514:	4f2f706f 	svcmi	0x002f706f
     518:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
	sti_aux;
     51c:	502f5445 	eorpl	r5, pc, r5, asr #8
}
     520:	534f4349 	movtpl	r4, #62281	; 0xf349
     524:	6369502f 	cmnvs	r9, #47	; 0x2f
     528:	502f534f 	eorpl	r5, pc, pc, asr #6
void AONRTCIntHandler () {
     52c:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     530:	6e65532f 	cdpvs	3, 6, cr5, cr5, cr15, {1}
     534:	73726f73 	cmnvc	r2, #460	; 0x1cc
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     538:	6f682f00 	svcvs	0x00682f00
		if (__pi_utims [0] == 0)
     53c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 390 <devinit_uart>
     540:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
		if (*(__pi_utims [0])) {
     544:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
     548:	6f746b73 	svcvs	0x00746b73
			(*(__pi_utims [0]))--;
     54c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
		if (__pi_utims [1] == 0)
     550:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
		if (*(__pi_utims [1])) {
     554:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
			aux_timer_inactive = 0;
     558:	2f534f43 	svccs	0x00534f43
			(*(__pi_utims [1]))--;
     55c:	4f636950 	svcmi	0x00636950
		if (__pi_utims [2] == 0)
     560:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
		if (*(__pi_utims [2])) {
     564:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
			(*(__pi_utims [2]))--;
     568:	73752f00 	cmnvc	r5, #0, 30
		if (__pi_utims [3] != 0) {
     56c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
			if (*(__pi_utims [3])) {
     570:	63672f62 	cmnvs	r7, #392	; 0x188
				aux_timer_inactive = 0;
     574:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
				(*(__pi_utims [3]))--;
     578:	6f6e2d6d 	svcvs	0x006e2d6d
	if (__pi_systat.ledsts) {
     57c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     580:	2f696261 	svccs	0x00696261
		if (__pi_systat.ledblc++ == 0) {
     584:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
     588:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
			if (__pi_systat.ledblk) {
     58c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     590:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     594:	2f656d6f 	svccs	0x00656d6f
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     598:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
     59c:	442f6e69 	strtmi	r6, [pc], #-3689	; 5a4 <AONRTCIntHandler+0x78>
				if (__pi_systat.ledsts & 0x2)
     5a0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     5a4:	4f2f706f 	svcmi	0x002f706f
     5a8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
				if (__pi_systat.ledsts & 0x4)
     5ac:	502f5445 	eorpl	r5, pc, r5, asr #8
				__pi_systat.ledblk = 0;
     5b0:	534f4349 	movtpl	r4, #62281	; 0xf349
     5b4:	6369502f 	cmnvs	r9, #47	; 0x2f
			if (__pi_systat.fstblk)
     5b8:	0000534f 	andeq	r5, r0, pc, asr #6
     5bc:	6e69616d 	powvsez	f6, f1, #5.0
				__pi_systat.ledblc = 200;
     5c0:	0100632e 	tsteq	r0, lr, lsr #6
	if (events & AON_RTC_EVFLAGS_CH0) {
     5c4:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
		cli_tim;
     5c8:	74635f73 	strbtvc	r5, [r3], #-3955	; 0xfffff08d
		__pi_new += setdel;
     5cc:	682e6c72 	stmdavs	lr!, {r1, r4, r5, r6, sl, fp, sp, lr}
     5d0:	00000200 	andeq	r0, r0, r0, lsl #4
		setdel = 0;
     5d4:	69736d63 	ldmdbvs	r3!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
		RISE_N_SHINE;
     5d8:	63675f73 	cmnvs	r7, #460	; 0x1cc
		__pi_new += setdel;
     5dc:	00682e63 	rsbeq	r2, r8, r3, ror #28
		RISE_N_SHINE;
     5e0:	67000001 	strvs	r0, [r0, -r1]
     5e4:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
		aux_timer_inactive = 1;
     5e8:	00020068 	andeq	r0, r2, r8, rrx
     5ec:	71726900 	cmnvc	r2, r0, lsl #18
				if (__pi_systat.ledsts & 0x1)
     5f0:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     5f4:	6c5f7265 	lfmvs	f7, 2, [pc], {101}	; 0x65
     5f8:	2e736465 	cdpcs	4, 7, cr6, cr3, cr5, {3}
				if (__pi_systat.ledsts & 0x2)
     5fc:	00030068 	andeq	r0, r3, r8, rrx
     600:	72617500 	rsbvc	r7, r1, #0, 10
     604:	00682e74 	rsbeq	r2, r8, r4, ror lr
				if (__pi_systat.ledsts & 0x8)
     608:	69000002 	stmdbvs	r0, {r1}
				__pi_systat.ledblk = 1;
     60c:	625f7172 	subsvs	r7, pc, #-2147483620	; 0x8000001c
     610:	6f747475 	svcvs	0x00747475
		if (aux_timer_inactive) {
     614:	682e736e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
			cli_aux;
     618:	00000300 	andeq	r0, r0, r0, lsl #6
     61c:	5f717269 	svcpl	0x00717269
     620:	5f6e6970 	svcpl	0x006e6970
     624:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
     628:	682e726f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}
     62c:	00000400 	andeq	r0, r0, r0, lsl #8
     630:	6d637270 	sfmvs	f7, 2, [r3, #-448]!	; 0xfffffe40
     634:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     638:	6f610000 	svcvs	0x00610000
     63c:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
word tci_update_delay_ticks (Boolean force) {
     640:	00682e63 	rsbeq	r2, r8, r3, ror #28
	cli_tim;
     644:	70000002 	andvc	r0, r0, r2
     648:	635f7277 	cmpvs	pc, #1879048199	; 0x70000007
	if (setdel) {
     64c:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     650:	00020068 	andeq	r0, r2, r8, rrx
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     654:	6e6f6100 	powvse	f6, f7, f0
     658:	636f695f 	cmnvs	pc, #1556480	; 0x17c000
     65c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     660:	63730000 	cmnvs	r3, #0
				AON_RTC_O_CH0CMP)) - gettav ());
     664:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
	return NO;
     668:	2e72656c 	cdpcs	5, 7, cr6, cr2, cr12, {3}
			setdel = 0;
     66c:	00050068 	andeq	r0, r5, r8, rrx
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     670:	6e6f6100 	powvse	f6, f7, f0
     674:	6375775f 	cmnvs	r5, #24903680	; 0x17c0000
}
     678:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
		sti_tim;
     67c:	6f610000 	svcvs	0x00610000
		return YES;
     680:	61625f6e 	cmnvs	r2, lr, ror #30
     684:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
     688:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     68c:	74730000 	ldrbtvc	r0, [r3], #-0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     690:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
	UARTDisable (UART0_BASE);
     694:	0600682e 	streq	r6, [r0], -lr, lsr #16
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     698:	72610000 	rsbvc	r0, r1, #0
	UARTDisable (UART0_BASE);
     69c:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
	UARTConfigSetExpClk (UART0_BASE,
     6a0:	00000100 	andeq	r0, r0, r0, lsl #2
     6a4:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     6a8:	0100682e 	tsteq	r0, lr, lsr #16
     6ac:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6b0:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
     6b4:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
     6b8:	00000100 	andeq	r0, r0, r0, lsl #2
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     6bc:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
     6c0:	5f736e6f 	svcpl	0x00736e6f
     6c4:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
	urates [0] = rate;
     6c8:	00010068 	andeq	r0, r1, r8, rrx
}
     6cc:	73797300 	cmnvc	r9, #0, 6
     6d0:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     6d4:	00000700 	andeq	r0, r0, r0, lsl #14
     6d8:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
     6dc:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
     6e0:	00000500 	andeq	r0, r0, r0, lsl #10
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6e4:	00270500 	eoreq	r0, r7, r0, lsl #10
     6e8:	03900205 	orrseq	r0, r0, #1342177280	; 0x50000000
     6ec:	fc030000 	stc2	0, cr0, [r3], {-0}
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     6f0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
     6f4:	06270514 			; <UNDEFINED> instruction: 0x06270514
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     6f8:	22020510 	andcs	r0, r2, #16, 10	; 0x4000000
     6fc:	01000502 	tsteq	r0, r2, lsl #10
	__pi_uart_setrate (urates [0], __pi_uart);
     700:	001f0501 	andseq	r0, pc, r1, lsl #10
     704:	039c0205 	orrseq	r0, ip, #1342177280	; 0x50000000
     708:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
     70c:	3d020501 	cfstr32cc	mvfx0, [r2, #-4]
     710:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
     714:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
     718:	01053c08 	tsteq	r5, r8, lsl #24
	switch (operation) {
     71c:	06030524 	streq	r0, [r3], -r4, lsr #10
static int ioreq_uart_a (int operation, char *buf, int len) {
     720:	1b02052b 	blne	81bd4 <__ccfg+0x61c2c>
     724:	05010d05 	streq	r0, [r1, #-3333]	; 0xfffff2fb
     728:	0a050108 	beq	140b50 <__ccfg+0x120ba8>
     72c:	08050106 	stmdaeq	r5, {r1, r2, r8}
     730:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
				*buf++ = uart_a_read;
     734:	06040534 			; <UNDEFINED> instruction: 0x06040534
     738:	00070201 	andeq	r0, r7, r1, lsl #4
			while (len && uart_a_char_available) {
     73c:	1f050101 	svcne	0x00050101
     740:	c8020500 	stmdagt	r2, {r8, sl}
     744:	03000003 	movweq	r0, #3
			if (len != operation) {
     748:	0205011f 	andeq	r0, r5, #-1073741817	; 0xc0000007
}
     74c:	0108053d 	tsteq	r8, sp, lsr r5
     750:	01060905 	tsteq	r6, r5, lsl #18
			uart_a_disable_int;
     754:	053c0805 	ldreq	r0, [ip, #-2053]!	; 0xfffff7fb
			if (uart_a_char_available) {
     758:	03052401 	movweq	r2, #21505	; 0x5401
				*buf++ = uart_a_read;
     75c:	054b3906 	strbeq	r3, [fp, #-2310]	; 0xfffff6fa
			uart_a_disable_int;
     760:	02010604 	andeq	r0, r1, #4, 12	; 0x400000
     764:	01010007 	tsteq	r1, r7
			if (uart_a_char_available) {
     768:	05001e05 	streq	r1, [r0, #-3589]	; 0xfffff1fb
     76c:	0003f402 	andeq	pc, r3, r2, lsl #8
				uart_a_enable_int;
     770:	012a0300 			; <UNDEFINED> instruction: 0x012a0300
     774:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
				goto Redo_rx;
     778:	050e061e 	streq	r0, [lr, #-1566]	; 0xfffff9e2
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     77c:	1e052405 	cdpne	4, 0, cr2, cr5, cr5, {0}
     780:	2405051c 	strcs	r0, [r5], #-1308	; 0xfffffae4
			return -2;
     784:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
     788:	01061205 	tsteq	r6, r5, lsl #4
				uart_a_write (*buf);
     78c:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
     790:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
			while (len && uart_a_room_in_tx) {
     794:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
     798:	593f0602 	ldmdbpl	pc!, {r1, r9, sl}	; <UNPREDICTABLE>
     79c:	05013b05 	streq	r3, [r1, #-2821]	; 0xfffff4fb
			if (len != operation) {
     7a0:	09050108 	stmdbeq	r5, {r3, r8}
			uart_a_disable_int;
     7a4:	08050106 	stmdaeq	r5, {r1, r2, r8}
     7a8:	0602054a 	streq	r0, [r2], -sl, asr #10
			if (uart_a_room_in_tx) {
     7ac:	06150530 			; <UNDEFINED> instruction: 0x06150530
     7b0:	4b010501 	blmi	41bbc <__ccfg+0x21c14>
				uart_a_enable_int;
     7b4:	01000502 	tsteq	r0, r2, lsl #10
     7b8:	001f0501 	andseq	r0, pc, r1, lsl #10
				*buf++ = uart_a_read;
     7bc:	04300205 	ldrteq	r0, [r0], #-517	; 0xfffffdfb
			if (uart_a_room_in_tx) {
     7c0:	3a030000 	bcc	c07c8 <__ccfg+0xa0820>
				uart_a_write (*buf);
     7c4:	17020501 	strne	r0, [r2, -r1, lsl #10]
     7c8:	0d061f05 	stceq	15, cr1, [r6, #-20]	; 0xffffffec
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7cc:	05250205 	streq	r0, [r5, #-517]!	; 0xfffffdfb
     7d0:	02051b1f 	andeq	r1, r5, #31744	; 0x7c00
			uart_a_enable_int;
     7d4:	053d0625 	ldreq	r0, [sp, #-1573]!	; 0xfffff9db
     7d8:	0805013c 	stmdaeq	r5, {r2, r3, r4, r5, r8}
     7dc:	06090501 	streq	r0, [r9], -r1, lsl #10
			return 0;
     7e0:	4a080501 	bmi	201bec <__ccfg+0x1e1c44>
			if (len == UART_CNTRL_SETRATE) {
     7e4:	30060205 	andcc	r0, r6, r5, lsl #4
				if (__pi_uart_setrate (*((word*)buf),
     7e8:	01060505 	tsteq	r6, r5, lsl #10
     7ec:	4b060305 	blmi	181408 <__ccfg+0x161460>
     7f0:	01061205 	tsteq	r6, r5, lsl #4
				syserror (EREQPAR, "uar");
     7f4:	05202705 	streq	r2, [r0, #-1797]!	; 0xfffff8fb
			syserror (ENOOPER, "uai");
     7f8:	04052006 	streq	r2, [r5], #-6
			if (len == UART_CNTRL_GETRATE) {
     7fc:	24052106 	strcs	r2, [r5], #-262	; 0xfffffefa
				return 1;
     800:	17050106 	strne	r0, [r5, -r6, lsl #2]
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     804:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
			syserror (ENOOPER, "uai");
     808:	06150523 	ldreq	r0, [r5], -r3, lsr #10
     80c:	4b010501 	blmi	41c18 <__ccfg+0x21c70>
     810:	01000502 	tsteq	r0, r2, lsl #10
     814:	00130501 	andseq	r0, r3, r1, lsl #10
     818:	00000205 	andeq	r0, r0, r5, lsl #4
     81c:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
     820:	02050100 	andeq	r0, r5, #0, 2
     824:	06130514 			; <UNDEFINED> instruction: 0x06130514
     828:	2202051e 	andcs	r0, r2, #125829120	; 0x7800000
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     82c:	05363306 	ldreq	r3, [r6, #-774]!	; 0xfffffcfa
void UART0IntHandler () {
     830:	02041303 	andeq	r1, r4, #201326592	; 0xc000000
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     834:	f0030405 			; <UNDEFINED> instruction: 0xf0030405
     838:	05300101 	ldreq	r0, [r0, #-257]!	; 0xfffffeff
     83c:	0501065c 	streq	r0, [r1, #-1628]	; 0xfffff9a4
     840:	143e0604 	ldrtne	r0, [lr], #-1540	; 0xfffff9fc
     844:	02100a05 	andseq	r0, r0, #20480	; 0x5000
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     848:	01010005 	tsteq	r1, r5
     84c:	05002d05 	streq	r2, [r0, #-3333]	; 0xfffff2fb
		RISE_N_SHINE;
     850:	00047002 	andeq	r7, r4, r2
     854:	01970300 	orrseq	r0, r7, r0, lsl #6
		i_trigger (devevent (UART_A, READ));
     858:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
     85c:	05170101 	ldreq	r0, [r7, #-257]	; 0xfffffeff
     860:	7903062d 	stmdbvc	r3, {r0, r2, r3, r5, r9, sl}
     864:	35020501 	strcc	r0, [r2, #-1281]	; 0xfffffaff
     868:	4a090306 	bmi	241488 <__ccfg+0x2214e0>
     86c:	03050304 	movweq	r0, #21252	; 0x5304
     870:	017fb503 	cmneq	pc, r3, lsl #10
     874:	2d050404 	cfstrscs	mvf0, [r5, #-16]
     878:	01cb0306 	biceq	r0, fp, r6, lsl #6
     87c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
     880:	8f030602 	svchi	0x00030602
     884:	03053c7f 	movweq	r3, #23679	; 0x5c7f
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     888:	04010113 	streq	r0, [r1], #-275	; 0xfffffeed
     88c:	03290504 			; <UNDEFINED> instruction: 0x03290504
     890:	050100eb 	streq	r0, [r1, #-235]	; 0xffffff15
		i_trigger (devevent (UART_A, WRITE));
     894:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     898:	01040106 	tsteq	r4, r6, lsl #2
     89c:	90030305 	andls	r0, r3, r5, lsl #6
		RISE_N_SHINE;
     8a0:	0404207f 	streq	r2, [r4], #-127	; 0xffffff81
     8a4:	f0032d05 			; <UNDEFINED> instruction: 0xf0032d05
     8a8:	01042000 	mrseq	r2, (UNDEF: 4)
		i_trigger (devevent (UART_A, WRITE));
     8ac:	03060305 	movweq	r0, #25349	; 0x6305
     8b0:	04207f90 	strteq	r7, [r0], #-3984	; 0xfffff070
     8b4:	03290504 			; <UNDEFINED> instruction: 0x03290504
     8b8:	050100eb 	streq	r0, [r1, #-235]	; 0xffffff15
     8bc:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
     8c0:	01040106 	tsteq	r4, r6, lsl #2
     8c4:	03060305 	movweq	r0, #25349	; 0x6305
     8c8:	01207f90 			; <UNDEFINED> instruction: 0x01207f90
     8cc:	01010101 	tsteq	r1, r1, lsl #2
     8d0:	2e016601 	cfmadd32cs	mvax0, mvfx6, mvfx1, mvfx1
     8d4:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
}
     8d8:	01a10329 			; <UNDEFINED> instruction: 0x01a10329
     8dc:	17050501 	strne	r0, [r5, -r1, lsl #10]
     8e0:	01062d05 	tsteq	r6, r5, lsl #26
     8e4:	03050104 	movweq	r0, #20740	; 0x5104
     8e8:	207eda03 	rsbscs	sp, lr, r3, lsl #20
void __buttons_setirq (int val) {
     8ec:	2d050404 	cfstrscs	mvf0, [r5, #-16]
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     8f0:	2001a603 	andcs	sl, r1, r3, lsl #12
     8f4:	03050104 	movweq	r0, #20740	; 0x5104
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8f8:	7eda0306 	cdpvc	3, 13, cr0, cr10, cr6, {0}
     8fc:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
     900:	01a10329 			; <UNDEFINED> instruction: 0x01a10329
		bn = BUTTON_GPIO (__button_list [i]);
     904:	17050501 	strne	r0, [r5, -r1, lsl #10]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     908:	01062d05 	tsteq	r6, r5, lsl #26
     90c:	03050104 	movweq	r0, #20740	; 0x5104
     910:	7eda0306 	cdpvc	3, 13, cr0, cr10, cr6, {0}
     914:	01010120 	tsteq	r1, r0, lsr #2
     918:	58010101 	stmdapl	r1, {r0, r8}
     91c:	08052e01 	stmdaeq	r5, {r0, r9, sl, fp, sp}
}
     920:	00090211 	andeq	r0, r9, r1, lsl r2
     924:	1d050101 	stfnes	f0, [r5, #-4]
     928:	c4020500 	strgt	r0, [r2], #-1280	; 0xfffffb00
     92c:	03000004 	movweq	r0, #4
void __pinlist_setirq (int val) {
     930:	0501029d 	streq	r0, [r1, #-669]	; 0xfffffd63
	for (i = 0; i < N_PINLIST; i++) {
     934:	1d051602 	stcne	6, cr1, [r5, #-8]
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     938:	16050e06 	strne	r0, [r5], -r6, lsl #28
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     93c:	4a090524 	bmi	241dd4 <__ccfg+0x221e2c>
	for (i = 0; i < N_PINLIST; i++) {
     940:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     944:	02052e09 	andeq	r2, r5, #9, 28	; 0x90
     948:	76032306 	strvc	r2, [r3], -r6, lsl #6
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     94c:	06110501 	ldreq	r0, [r1], -r1, lsl #10
     950:	03020501 	movweq	r0, #9473	; 0x2501
     954:	2f052e0d 	svccs	0x00052e0d
	for (i = 0; i < N_PINLIST; i++) {
     958:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
}
     95c:	200a032a 	andcs	r0, sl, sl, lsr #6
     960:	76032f05 	strvc	r2, [r3], -r5, lsl #30
     964:	2e360520 	cfabs64cs	mvdx0, mvdx6
     968:	0a032a05 	beq	cb184 <__ccfg+0xab1dc>
void GPIOIntHandler () {
     96c:	0602052e 	streq	r0, [r2], -lr, lsr #10
if (buttons_int) {
     970:	06010523 	streq	r0, [r1], -r3, lsr #10
     974:	000b022f 	andeq	r0, fp, pc, lsr #4
	buttons_disable ();
     978:	21050101 	tstcs	r5, r1, lsl #2
     97c:	04020500 	streq	r0, [r2], #-1280	; 0xfffffb00
	i_trigger ((aword)&__button_list);
     980:	03000005 	movweq	r0, #5
     984:	050102aa 	streq	r0, [r1, #-682]	; 0xfffffd56
     988:	21051702 	tstcs	r5, r2, lsl #14
     98c:	02051b06 	andeq	r1, r5, #6144	; 0x1800
     990:	06090525 	streq	r0, [r9], -r5, lsr #10
     994:	1402052e 	strne	r0, [r2], #-1326	; 0xfffffad2
     998:	05016903 	streq	r6, [r1, #-2307]	; 0xfffff6fd
     99c:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
     9a0:	2a052e2f 	bcs	14c264 <__ccfg+0x12c2bc>
     9a4:	05201703 	streq	r1, [r0, #-1795]!	; 0xfffff8fd
     9a8:	2069032f 	rsbcs	r0, r9, pc, lsr #6
	RISE_N_SHINE;
     9ac:	052e3605 	streq	r3, [lr, #-1541]!	; 0xfffff9fb
     9b0:	2017032a 	andscs	r0, r7, sl, lsr #6
     9b4:	23060205 	movwcs	r0, #25093	; 0x6205
if (pin_sensor_int) {
     9b8:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
     9bc:	02130601 	andseq	r0, r3, #1048576	; 0x100000
	i_trigger ((aword)(&__input_pins));
     9c0:	01010006 	tsteq	r1, r6
     9c4:	05001a05 	streq	r1, [r0, #-2565]	; 0xfffff5fb
     9c8:	00052c02 	andeq	r2, r5, r2, lsl #24
     9cc:	02b70300 	adcseq	r0, r7, #0, 6
     9d0:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
     9d4:	061a0514 			; <UNDEFINED> instruction: 0x061a0514
     9d8:	240b050e 	strcs	r0, [fp], #-1294	; 0xfffffaf2
     9dc:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
     9e0:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
     9e4:	05140605 	ldreq	r0, [r4, #-1541]	; 0xfffff9fb
     9e8:	02051e2b 	andeq	r1, r5, #688	; 0x2b0
	__pinsen_disable_and_clear;
     9ec:	05052206 	streq	r2, [r5, #-518]	; 0xfffffdfa
	RISE_N_SHINE;
     9f0:	03050106 	movweq	r0, #20742	; 0x5106
     9f4:	15182506 	ldrne	r2, [r8, #-1286]	; 0xfffffafa
     9f8:	01061205 	tsteq	r6, r5, lsl #4
}
     9fc:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
     a00:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
     a04:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
     a08:	04052006 	streq	r2, [r5], #-6
     a0c:	17052f06 	strne	r2, [r5, -r6, lsl #30]
void system_init () {
     a10:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a14:	17052f06 	strne	r2, [r5, -r6, lsl #30]
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a18:	03050106 	movweq	r0, #20742	; 0x5106
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a1c:	12052206 	andne	r2, r5, #1610612736	; 0x60000000
     a20:	06050106 	streq	r0, [r5], -r6, lsl #2
     a24:	06030520 	streq	r0, [r3], -r0, lsr #10
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a28:	06070522 	streq	r0, [r7], -r2, lsr #10
     a2c:	20060501 	andcs	r0, r6, r1, lsl #10
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a30:	21060405 	tstcs	r6, r5, lsl #8
     a34:	13061705 	movwne	r1, #26373	; 0x6705
     a38:	0604051f 			; <UNDEFINED> instruction: 0x0604051f
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a3c:	1403052f 	strne	r0, [r3], #-1327	; 0xfffffad1
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a40:	01061205 	tsteq	r6, r5, lsl #4
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a44:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a48:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a4c:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a50:	04052006 	streq	r2, [r5], #-6
		pin = (port_confs [i] >> 19) & 0x1f;
     a54:	17052106 	strne	r2, [r5, -r6, lsl #2]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a58:	051f1306 	ldreq	r1, [pc, #-774]	; 75a <ioreq_uart_a+0x3e>
		pin = (port_confs [i] >> 19) & 0x1f;
     a5c:	052f0604 	streq	r0, [pc, #-1540]!	; 460 <__pi_offdomain+0x30>
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a60:	12051403 	andne	r1, r5, #50331648	; 0x3000000
     a64:	06050106 	streq	r0, [r5], -r6, lsl #2
     a68:	06040520 	streq	r0, [r4], -r0, lsr #10
     a6c:	06080521 	streq	r0, [r8], -r1, lsr #10
		if (port_confs [i] & 0x80)
     a70:	20070501 	andcs	r0, r7, r1, lsl #10
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a74:	21060505 	tstcs	r6, r5, lsl #10
     a78:	13061805 	movwne	r1, #26629	; 0x6805
		if (port_confs [i] & 0x40)
     a7c:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a80:	0505042f 	streq	r0, [r5, #-1071]	; 0xfffffbd1
     a84:	7da30302 	stcvc	3, cr0, [r3, #8]!
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a88:	06110501 	ldreq	r0, [r1], -r1, lsl #10
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a8c:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a90:	30060305 	andcc	r0, r6, r5, lsl #6
	all_leds_blink;
     a94:	01061205 	tsteq	r6, r5, lsl #4
     a98:	05201905 	streq	r1, [r0, #-2309]!	; 0xfffff6fb
     a9c:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
     aa0:	13052106 	movwne	r2, #20742	; 0x5106
     aa4:	07050106 	streq	r0, [r5, -r6, lsl #2]
     aa8:	2f140520 	svccs	0x00140520
     aac:	051f0705 	ldreq	r0, [pc, #-1797]	; 3af <udelay+0x13>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ab0:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
     ab4:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     ab8:	04210606 	strteq	r0, [r1], #-1542	; 0xfffff9fa
     abc:	03290504 			; <UNDEFINED> instruction: 0x03290504
     ac0:	05010296 	streq	r0, [r1, #-662]	; 0xfffffd6a
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     ac4:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ac8:	05040106 	streq	r0, [r4, #-262]	; 0xfffffefa
     acc:	03060505 	movweq	r0, #25861	; 0x6505
	IntEnable (INT_AON_RTC_COMB);
     ad0:	054a7de6 	strbeq	r7, [sl, #-3558]	; 0xfffff21a
     ad4:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
     ad8:	06052008 	streq	r2, [r5], -r8
	__pi_malloc_init ();
     adc:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
	IntEnable (INT_AON_GPIO_EDGE);
     ae0:	94032905 	strls	r2, [r3], #-2309	; 0xfffff6fb
     ae4:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     ae8:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     aec:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
     af0:	e8030605 	stmda	r3, {r0, r2, r9, sl}
     af4:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     af8:	06050106 	streq	r0, [r5], -r6, lsl #2
     afc:	01012106 	tsteq	r1, r6, lsl #2
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b00:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
     b04:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
     b08:	01210606 			; <UNDEFINED> instruction: 0x01210606
	urates [0] = UART_RATE / 100;
     b0c:	13050501 	movwne	r0, #21761	; 0x5501
     b10:	01061805 	tsteq	r6, r5, lsl #16
	reinit_uart ();
     b14:	053c0a03 	ldreq	r0, [ip, #-2563]!	; 0xfffff5fd
	EXTRA_INITIALIZERS;
     b18:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
     b1c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b20:	05052007 	streq	r2, [r5, #-7]
     b24:	18052f06 	stmdane	r5, {r1, r2, r8, r9, sl, fp, sp}
     b28:	01040106 	tsteq	r4, r6, lsl #2
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b2c:	03060b05 	movweq	r0, #27397	; 0x6b05
     b30:	052e02cd 	streq	r0, [lr, #-717]!	; 0xfffffd33
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b34:	05051a02 	streq	r1, [r5, #-2562]	; 0xfffff5fe
     b38:	03050106 	movweq	r0, #20742	; 0x5106
			devinit [i] . init (devinit [i] . param);
     b3c:	0c053406 	cfstrseq	mvf3, [r5], {6}
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b40:	03053006 	movweq	r3, #20486	; 0x5006
     b44:	0522062c 	streq	r0, [r2, #-1580]!	; 0xfffff9d4
     b48:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
	IntEnable (INT_UART0_COMB);
     b4c:	0c052f0a 	stceq	15, cr2, [r5], {10}
     b50:	2203051f 	andcs	r0, r3, #130023424	; 0x7c00000
}
     b54:	051e0c05 	ldreq	r0, [lr, #-3077]	; 0xfffff3fb
	tci_run_auxiliary_timer ();
     b58:	132f0603 			; <UNDEFINED> instruction: 0x132f0603
		diag ("");
     b5c:	02054a01 	andeq	r4, r5, #4096	; 0x1000
     b60:	06010519 			; <UNDEFINED> instruction: 0x06010519
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     b64:	03160513 	tsteq	r6, #79691776	; 0x4c00000
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     b68:	05042045 	streq	r2, [r4, #-69]	; 0xffffffbb
		diag ("Leftover RAM: %d bytes",
     b6c:	03060505 	movweq	r0, #25861	; 0x6505
     b70:	054a7dc9 	strbeq	r7, [sl, #-3529]	; 0xfffff237
     b74:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     b78:	04210606 	strteq	r0, [r1], #-1542	; 0xfffff9fa
     b7c:	03290504 			; <UNDEFINED> instruction: 0x03290504
     b80:	050102c2 	streq	r0, [r1, #-706]	; 0xfffffd3e
     b84:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
     b88:	05040106 	streq	r0, [r4, #-262]	; 0xfffffefa
     b8c:	03060505 	movweq	r0, #25861	; 0x6505
     b90:	054a7dba 	strbeq	r7, [sl, #-3514]	; 0xfffff246
     b94:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
     b98:	06052008 	streq	r2, [r5], -r8
     b9c:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
     ba0:	c0032905 	andgt	r2, r3, r5, lsl #18
     ba4:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
     ba8:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
     bac:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
     bb0:	bc030605 	stclt	6, cr0, [r3], {5}
     bb4:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
     bb8:	06050106 	streq	r0, [r5], -r6, lsl #2
     bbc:	01012106 	tsteq	r1, r6, lsl #2
     bc0:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
     bc4:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     bc8:	01210606 			; <UNDEFINED> instruction: 0x01210606
     bcc:	13050501 	movwne	r0, #21761	; 0x5501
     bd0:	01061805 	tsteq	r6, r5, lsl #16
     bd4:	03050104 	movweq	r0, #20740	; 0x5104
     bd8:	02ce0306 	sbceq	r0, lr, #402653184	; 0x18000000
     bdc:	0606054a 	streq	r0, [r6], -sl, asr #10
     be0:	06040501 	streq	r0, [r4], -r1, lsl #10
     be4:	00150230 	andseq	r0, r5, r0, lsr r2
}
     be8:	2d050101 	stfcss	f0, [r5, #-4]
__attribute__ ((noreturn)) void __pi_release () {
     bec:	40020500 	andmi	r0, r2, r0, lsl #10
     bf0:	03000006 	movweq	r0, #6
     bf4:	05010389 	streq	r0, [r1, #-905]	; 0xfffffc77
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     bf8:	2d051602 	stccs	6, cr1, [r5, #-8]
	check_stack_overflow;
     bfc:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
     c00:	2f060524 	svccs	0x00060524
     c04:	061f0205 	ldreq	r0, [pc], -r5, lsl #4
	update_n_wake (MAX_WORD, NO);
     c08:	06060521 	streq	r0, [r6], -r1, lsr #10
     c0c:	20050501 	andcs	r0, r5, r1, lsl #10
     c10:	03060305 	movweq	r0, #25349	; 0x6305
	for_all_tasks (__pi_curr) {
     c14:	06052009 	streq	r2, [r5], -r9
     c18:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     c1c:	1a052306 	bne	14983c <__ccfg+0x129894>
  __ASM volatile ("cpsid i" : : : "memory");
     c20:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
	__SLEEP;
     c24:	7ef90306 	cdpvc	3, 15, cr0, cr9, cr6, {0}
     c28:	0610052e 	ldreq	r0, [r0], -lr, lsr #10
     c2c:	2e2e0501 	cfsh64cs	mvdx0, mvdx14, #1
     c30:	87031a05 	strhi	r1, [r3, -r5, lsl #20]
	system_event_count ++;
     c34:	052f3c01 	streq	r3, [pc, #-3073]!	; 3b <g_pfnVectors+0x3b>
     c38:	17052018 	smladne	r5, r8, r0, r2
	switch (__pi_systat.effpdm) {
     c3c:	0309051f 	movweq	r0, #38175	; 0x951f
     c40:	0d05200a 	stceq	0, cr2, [r5, #-40]	; 0xffffffd8
     c44:	05207603 	streq	r7, [r0, #-1539]!	; 0xfffff9fd
     c48:	0d05230b 	stceq	3, cr2, [r5, #-44]	; 0xffffffd4
			__WFI ();
     c4c:	0604051d 			; <UNDEFINED> instruction: 0x0604051d
     c50:	0105134d 	tsteq	r5, sp, asr #6
     c54:	03051906 	movweq	r1, #22790	; 0x5906
	check_stack_overflow;
     c58:	052f2906 	streq	r2, [pc, #-2310]!	; 35a <root+0x172>
     c5c:	0201060a 	andeq	r0, r1, #10485760	; 0xa00000
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c60:	01010009 	tsteq	r1, r9
     c64:	05003305 	streq	r3, [r0, #-773]	; 0xfffffcfb
			(__pi_curr->code) (tstate (__pi_curr));
     c68:	00069002 	andeq	r9, r6, r2
			goto Redo;
     c6c:	05d30300 	ldrbeq	r0, [r3, #768]	; 0x300
	for_all_tasks (__pi_curr) {
     c70:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c74:	06330517 			; <UNDEFINED> instruction: 0x06330517
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c78:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
     c7c:	33052702 	movwcc	r2, #22274	; 0x5702
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c80:	053c7903 	ldreq	r7, [ip, #-2307]!	; 0xfffff6fd
     c84:	3e062702 	cdpcc	7, 0, cr2, cr6, cr2, {0}
     c88:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c8c:	017bd503 	cmneq	fp, r3, lsl #10
     c90:	02050104 	andeq	r0, r5, #4, 2
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c94:	04ab0306 	strteq	r0, [fp], #774	; 0x306
     c98:	09030601 	stmdbeq	r3, {r0, r9, sl}
			__WFI ();
     c9c:	05060482 	streq	r0, [r6, #-1154]	; 0xfffffb7e
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ca0:	7dd90324 	ldclvc	3, cr0, [r9, #144]	; 0x90
     ca4:	17050501 	strne	r0, [r5, -r1, lsl #10]
}
     ca8:	01062305 	tsteq	r6, r5, lsl #6
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cac:	01050104 	tsteq	r5, r4, lsl #2
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cb0:	2002a503 	andcs	sl, r2, r3, lsl #10
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cb4:	23050604 	movwcs	r0, #22020	; 0x5604
     cb8:	207ddb03 	rsbscs	sp, sp, r3, lsl #22
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cbc:	4f060505 	svcmi	0x00060505
     cc0:	01062205 	tsteq	r6, r5, lsl #4
     cc4:	02050104 	andeq	r0, r5, #4, 2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cc8:	029e0306 	addseq	r0, lr, #402653184	; 0x18000000
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ccc:	060d0566 	streq	r0, [sp], -r6, ror #10
     cd0:	06020501 	streq	r0, [r2], -r1, lsl #10
     cd4:	0601052f 	streq	r0, [r1], -pc, lsr #10
     cd8:	000c0213 	andeq	r0, ip, r3, lsl r2
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     cdc:	1c050101 	stfnes	f0, [r5], {1}
     ce0:	e4020500 	str	r0, [r2], #-1280	; 0xfffffb00
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ce4:	03000006 	movweq	r0, #6
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     ce8:	050105ef 	streq	r0, [r1, #-1519]	; 0xfffffa11
     cec:	06041702 	streq	r1, [r4], -r2, lsl #14
     cf0:	f7032405 			; <UNDEFINED> instruction: 0xf7032405
     cf4:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
     cf8:	06230517 			; <UNDEFINED> instruction: 0x06230517
			SysCtrlSetRechargeBeforePowerDown
     cfc:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d00:	02880302 	addeq	r0, r8, #134217728	; 0x8000000
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d04:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
     d08:	7df80323 	ldclvc	3, cr0, [r8, #140]!	; 0x8c
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d0c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
     d10:	85030602 	strhi	r0, [r3, #-1538]	; 0xfffff9fe
     d14:	06044a02 	streq	r4, [r4], -r2, lsl #20
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d18:	c9032405 	stmdbgt	r3, {r0, r2, sl, sp}
     d1c:	2d05017c 	stfcss	f0, [r5, #-496]	; 0xfffffe10
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d20:	05051717 	streq	r1, [r5, #-1815]	; 0xfffff8e9
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d24:	06230517 			; <UNDEFINED> instruction: 0x06230517
     d28:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     d2c:	a9030602 	stmdbge	r3, {r1, r9, sl}
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d30:	06043c03 	streq	r3, [r4], -r3, lsl #24
			while (!(AONWUCPowerStatusGet () &
     d34:	ce032705 	cdpgt	7, 0, cr2, cr3, cr5, {0}
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d38:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
     d3c:	06240514 			; <UNDEFINED> instruction: 0x06240514
     d40:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d44:	b2030602 	andlt	r0, r3, #2097152	; 0x200000
     d48:	0e02587d 	mcreq	8, 0, r5, cr2, cr13, {3}
     d4c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     d50:	0205003d 	andeq	r0, r5, #61	; 0x3d
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d54:	0000071c 	andeq	r0, r0, ip, lsl r7
     d58:	01068f03 	tsteq	r6, r3, lsl #30
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d5c:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
     d60:	2e1e063d 	mrccs	6, 0, r0, cr14, cr13, {1}
			SysCtrlAdjustRechargeAfterPowerDown ();
     d64:	03060505 	movweq	r0, #25861	; 0x6505
			reinit_uart ();
     d68:	0e05820b 	cdpeq	2, 0, cr8, cr5, cr11, {0}
     d6c:	08050106 	stmdaeq	r5, {r1, r2, r8}
     d70:	1f0e052f 	svcne	0x000e052f
}
     d74:	2f060505 	svccs	0x00060505
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d78:	050f0a05 	streq	r0, [pc, #-2565]	; 37b <root+0x193>
     d7c:	05200612 	streq	r0, [r0, #-1554]!	; 0xfffff9ee
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d80:	04052e0f 	streq	r2, [r5], #-3599	; 0xfffff1f1
     d84:	07053406 	streq	r3, [r5, -r6, lsl #8]
     d88:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     d8c:	2e280306 	cdpcs	3, 2, cr0, cr8, cr6, {0}
     d90:	01061605 	tsteq	r6, r5, lsl #12
     d94:	34030105 	strcc	r0, [r3], #-261	; 0xfffffefb
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     d98:	03090520 	movweq	r0, #38176	; 0x9520
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     d9c:	053c7fa0 	ldreq	r7, [ip, #-4000]!	; 0xfffff060
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     da0:	200b0304 	andcs	r0, fp, r4, lsl #6
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     da4:	05210805 	streq	r0, [r1, #-2053]!	; 0xfffff7fb
     da8:	2e74030e 	cdpcs	3, 7, cr0, cr4, cr14, {0}
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     dac:	03060405 	movweq	r0, #25605	; 0x6405
     db0:	054b3c0b 	strbeq	r3, [fp, #-3083]	; 0xfffff3f5
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     db4:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     db8:	05052e07 	streq	r2, [r5, #-3591]	; 0xfffff1f9
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     dbc:	054b3006 	strbeq	r3, [fp, #-6]
     dc0:	0b052404 	bleq	149dd8 <__ccfg+0x129e30>
			PRCMPowerDomainOff (
     dc4:	4a240306 	bmi	9019e4 <__ccfg+0x8e1a3c>
     dc8:	062d0405 	strteq	r0, [sp], -r5, lsl #8
	__SLEEP;
     dcc:	060b0521 	streq	r0, [fp], -r1, lsr #10
     dd0:	06050501 	streq	r0, [r5], -r1, lsl #10
  __ASM volatile ("cpsie i" : : : "memory");
     dd4:	05206e03 	streq	r6, [r0, #-3587]!	; 0xfffff1fd
	goto Redo;
     dd8:	05300608 	ldreq	r0, [r0, #-1544]!	; 0xfffff9f8
     ddc:	2f061e05 	svccs	0x00061e05
     de0:	0e0a0513 	mcreq	5, 0, r0, cr10, cr3, {0}
     de4:	20061205 	andcs	r1, r6, r5, lsl #4
     de8:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
     dec:	05350604 	ldreq	r0, [r5, #-1540]!	; 0xfffff9fc
     df0:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
     df4:	4b340604 	blmi	d0260c <__ccfg+0xce2664>
     df8:	01060805 	tsteq	r6, r5, lsl #16
     dfc:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
     e00:	4b2f0605 	blmi	bc261c <__ccfg+0xba2674>
     e04:	03060905 	movweq	r0, #26885	; 0x6905
     e08:	0405204d 	streq	r2, [r5], #-77	; 0xffffffb3
     e0c:	05203003 	streq	r3, [r0, #-3]!
     e10:	05052108 	streq	r2, [r5, #-264]	; 0xfffffef8
     e14:	052e7403 	streq	r7, [lr, #-1027]!	; 0xfffffbfd
     e18:	11030604 	tstne	r3, r4, lsl #12
     e1c:	0b055e3c 	bleq	158714 <__ccfg+0x13876c>
     e20:	04053d06 	streq	r3, [r5], #-3334	; 0xfffff2fa
     e24:	052f061f 	streq	r0, [pc, #-1567]!	; 80d <ioreq_uart_a+0xf1>
     e28:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
     e2c:	05250604 	streq	r0, [r5, #-1540]!	; 0xfffff9fc
     e30:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
     e34:	052f0605 	streq	r0, [pc, #-1541]!	; 837 <UART0IntHandler+0xb>
     e38:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
     e3c:	05054a08 	streq	r4, [r5, #-2568]	; 0xfffff5f8
     e40:	04053106 	streq	r3, [r5], #-262	; 0xfffffefa
	cli_tim;
     e44:	2e160306 	cdpcs	3, 1, cr0, cr6, cr6, {0}
     e48:	2e6d0306 	cdpcs	3, 6, cr0, cr13, cr6, {0}
     e4c:	01060705 	tsteq	r6, r5, lsl #14
	diag ("PicOS halted");
     e50:	2f060505 	svccs	0x00060505
	mdelay (500);
     e54:	88030205 	stmdahi	r3, {r0, r2, r9}
     e58:	1005017f 	andne	r0, r5, pc, ror r1
	setpowermode (2);
     e5c:	0c050106 	stfeqs	f0, [r5], {6}
	__PCB = NULL;
     e60:	2000f903 	andcs	pc, r0, r3, lsl #18
	release;
     e64:	051f1305 	ldreq	r1, [pc, #-773]	; b67 <system_init+0x157>
     e68:	052f0605 	streq	r0, [pc, #-1541]!	; 86b <UART0IntHandler+0x3f>
     e6c:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
     e70:	11030604 	tstne	r3, r4, lsl #12
int main (void) {
     e74:	00120220 	andseq	r0, r2, r0, lsr #4
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e78:	2b050101 	blcs	141284 <__ccfg+0x1212dc>
     e7c:	00020500 	andeq	r0, r2, r0, lsl #10
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e80:	03000000 	movweq	r0, #0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e84:	050105ea 	streq	r0, [r1, #-1514]	; 0xfffffa16
	system_init ();
     e88:	01051402 	tsteq	r5, r2, lsl #8
	tcv_init ();
     e8c:	06021306 	streq	r1, [r2], -r6, lsl #6
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e90:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     e94:	02050019 	andeq	r0, r5, #25
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e98:	0000082c 	andeq	r0, r0, ip, lsr #16
     e9c:	01078103 	tsteq	r7, r3, lsl #2
     ea0:	04140205 	ldreq	r0, [r4], #-517	; 0xfffffdfb
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     ea4:	03240506 			; <UNDEFINED> instruction: 0x03240506
     ea8:	05050112 	streq	r0, [r5, #-274]	; 0xfffffeee
	delay (16, 0);
     eac:	06220517 			; <UNDEFINED> instruction: 0x06220517
     eb0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     eb4:	2e670319 	mcrcs	3, 3, r0, cr7, cr9, {0}
	__pi_release ();
     eb8:	22050604 	andcs	r0, r5, #4, 12	; 0x400000
     ebc:	04201903 	strteq	r1, [r0], #-2307	; 0xfffff6fd
     ec0:	03060501 	movweq	r0, #25857	; 0x6501
     ec4:	0604206b 	streq	r2, [r4], -fp, rrx
     ec8:	15032205 	strne	r2, [r3, #-517]	; 0xfffffdfb
     ecc:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
     ed0:	6b030602 	blvs	c26e0 <__ccfg+0xa2738>
static void killev (__pi_pcb_t *pid) {
     ed4:	06060520 	streq	r0, [r6], -r0, lsr #10
	wfun = (aword)(pid->code);
     ed8:	20050501 	andcs	r0, r5, r1, lsl #10
	for_all_tasks (i) {
     edc:	052e2905 	streq	r2, [lr, #-2309]!	; 0xfffff6fb
		for (j = 0; j < nevents (i); j++) {
     ee0:	03052e1c 	movweq	r2, #24092	; 0x5e1c
     ee4:	014b2f06 	cmpeq	fp, r6, lsl #30
     ee8:	01011358 	tsteq	r1, r8, asr r3
			    || i->Events [j] . Event == wfun
     eec:	20062e01 	andcs	r2, r6, r1, lsl #28
		for (j = 0; j < nevents (i); j++) {
     ef0:	662e6606 	strtvs	r6, [lr], -r6, lsl #12
			if (i->Events [j] . Event == (aword)pid
     ef4:	052e014a 	streq	r0, [lr, #-330]!	; 0xfffffeb6
     ef8:	06051502 	streq	r1, [r5], -r2, lsl #10
     efc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
				wakeupev (i, j);
     f00:	2e250520 	cfsh64cs	mvdx0, mvdx5, #16
     f04:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
	for_all_tasks (i) {
     f08:	062f0603 	strteq	r0, [pc], -r3, lsl #12
}
     f0c:	4b062c14 	blmi	18bf64 <__ccfg+0x16bfbc>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f10:	01135801 	tsteq	r3, r1, lsl #16
static void qfree (aword *ch) {
     f14:	062e0101 	strteq	r0, [lr], -r1, lsl #2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f18:	2e660620 	cdpcs	6, 6, cr0, cr6, cr0, {1}
	cc = (aword*)(mpools + MA_NP);
     f1c:	05014a58 	streq	r4, [r1, #-2648]	; 0xfffff5a8
	m_setnextp (ch, chunk);
     f20:	02320601 	eorseq	r0, r2, #1048576	; 0x100000
	m_setnextp (cc, ch);
     f24:	0101000b 	tsteq	r1, fp
}
     f28:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f2c:	0008ec02 	andeq	lr, r8, r2, lsl #24
     f30:	07d90300 	ldrbeq	r0, [r9, r0, lsl #6]
     f34:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
			m_setnextp (cc, m_nextp (chunk));
     f38:	03041413 	movweq	r1, #17427	; 0x4413
			m_size (chunk) += m_hdrlen + m_size (ch);
     f3c:	fe030305 	cdp2	3, 0, cr0, cr3, cr5, {0}
     f40:	01040178 	tsteq	r4, r8, ror r1
     f44:	03062105 	movweq	r2, #24837	; 0x6105
     f48:	040106fd 	streq	r0, [r1], #-1789	; 0xfffff903
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f4c:	03030503 	movweq	r0, #13571	; 0x3503
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f50:	04207983 	strteq	r7, [r0], #-2435	; 0xfffff67d
     f54:	06020501 	streq	r0, [r2], -r1, lsl #10
     f58:	20078303 	andcs	r8, r7, r3, lsl #6
			m_setnextp (cc, m_nextp (chunk));
     f5c:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
			m_size (ch) += m_hdrlen + m_size (chunk);
     f60:	04041303 	streq	r1, [r4], #-771	; 0xfffffcfd
     f64:	03063305 	movweq	r3, #25349	; 0x6305
     f68:	04017dad 	streq	r7, [r1], #-3501	; 0xfffff253
     f6c:	03080501 	movweq	r0, #34049	; 0x8501
     f70:	042002d3 	strteq	r0, [r0], #-723	; 0xfffffd2d
     f74:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
			if (m_size (chunk) >= m_size (ch))
     f78:	04207dad 	strteq	r7, [r0], #-3501	; 0xfffff253
     f7c:	03080501 	movweq	r0, #34049	; 0x8501
     f80:	052002d3 	streq	r0, [r0, #-723]!	; 0xfffffd2d
		chunk = m_nextp (chunk))
     f84:	08052203 	stmdaeq	r5, {r0, r1, r9, sp}
     f88:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
     f8c:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f90:	7da70329 	stcvc	3, cr0, [r7, #164]!	; 0xa4
	diag_wait (a);
     f94:	17050501 	strne	r0, [r5, -r1, lsl #10]
	diag_wchar (c, a);
     f98:	01063305 	tsteq	r6, r5, lsl #6
     f9c:	042e2d05 	strteq	r2, [lr], #-3333	; 0xfffff2fb
}
     fa0:	06030501 	streq	r0, [r3], -r1, lsl #10
     fa4:	2002d503 	andcs	sp, r2, r3, lsl #10
	syserror (ESTATE, "state");
     fa8:	1e060805 	cdpne	8, 0, cr0, cr6, cr5, {0}
     fac:	05220305 	streq	r0, [r2, #-773]!	; 0xfffffcfb
     fb0:	04042c08 	streq	r2, [r4], #-3080	; 0xfffff3f8
     fb4:	ad033305 	stcge	3, cr3, [r3, #-20]	; 0xffffffec
	for (i = 0; i < MAX_UTIMERS; i++)
     fb8:	0104207d 	tsteq	r4, sp, ror r0
void utimer_add (address ut) {
     fbc:	d5030305 	strle	r0, [r3, #-773]	; 0xfffffcfb
     fc0:	41052002 	tstmi	r5, r2
		if (__pi_utims [i] == NULL)
     fc4:	061d0558 			; <UNDEFINED> instruction: 0x061d0558
	for (i = 0; i < MAX_UTIMERS; i++)
     fc8:	010e051d 	tsteq	lr, sp, lsl r5
     fcc:	13130305 	tstne	r3, #335544320	; 0x14000000
		syserror (ERESOURCE, "ut a");
     fd0:	29050404 	stmdbcs	r5, {r2, sl}
	__pi_utims [i] = ut;
     fd4:	017da703 	cmneq	sp, r3, lsl #14
}
     fd8:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
     fdc:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
     fe0:	06030501 	streq	r0, [r3], -r1, lsl #10
	*t = v;
     fe4:	2002d503 	andcs	sp, r2, r3, lsl #10
	TCI_RUN_AUXILIARY_TIMER;
     fe8:	01064105 	tsteq	r6, r5, lsl #2
void update_n_wake (word min, Boolean force) {
     fec:	1d061d05 	stcne	13, cr1, [r6, #-20]	; 0xffffffec
	if (TCI_UPDATE_DELAY_TICKS (force))
     ff0:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
     ff4:	03041802 	movweq	r1, #18434	; 0x4802
     ff8:	ec030305 	stc	3, cr0, [r3], {5}
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     ffc:	01040178 	tsteq	r4, r8, ror r1
    1000:	03060105 	movweq	r0, #24837	; 0x6105
    1004:	02200795 	eoreq	r0, r0, #39059456	; 0x2540000
    1008:	01010008 	tsteq	r1, r8
    100c:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
    1010:	00093002 	andeq	r3, r9, r2
    1014:	07ec0300 	strbeq	r0, [ip, r0, lsl #6]!
    1018:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    101c:	03041413 	movweq	r1, #17427	; 0x4413
    1020:	eb030305 	bl	c1c3c <__ccfg+0xa1c94>
    1024:	01040178 	tsteq	r4, r8, ror r1
    1028:	03062105 	movweq	r2, #24837	; 0x6105
    102c:	04010790 	streq	r0, [r1], #-1936	; 0xfffff870
		for_all_tasks (i) {
    1030:	03030503 	movweq	r0, #13571	; 0x3503
	__pi_mintk = znew + min;
    1034:	042078f0 	strteq	r7, [r0], #-2288	; 0xfffff710
    1038:	06020501 	streq	r0, [r2], -r1, lsl #10
			if (!twaiting (i))
    103c:	20079603 	andcs	r9, r7, r3, lsl #12
    1040:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1044:	04010609 	streq	r0, [r1], #-1545	; 0xfffff9f7
    1048:	03330504 	teqeq	r3, #4, 10	; 0x1000000
    104c:	04207d9b 	strteq	r7, [r0], #-3483	; 0xfffff265
    1050:	03080501 	movweq	r0, #34049	; 0x8501
    1054:	042002e6 	strteq	r0, [r0], #-742	; 0xfffffd1a
    1058:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
    105c:	04207d9a 	strteq	r7, [r0], #-3482	; 0xfffff266
    1060:	03030501 	movweq	r0, #13569	; 0x3501
    1064:	062002e8 	strteq	r0, [r0], -r8, ror #5
    1068:	0608051e 			; <UNDEFINED> instruction: 0x0608051e
    106c:	1f1e0501 	svcne	0x001e0501
    1070:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
				wakeuptm (i);
    1074:	042f0603 	strteq	r0, [pc], #-1539	; 107c <update_n_wake+0x90>
    1078:	03290504 			; <UNDEFINED> instruction: 0x03290504
		for_all_tasks (i) {
    107c:	05017d94 	streq	r7, [r1, #-3476]	; 0xfffff26c
				d = i->Timer - znew;
    1080:	33051705 	movwcc	r1, #22277	; 0x5705
    1084:	01040106 	tsteq	r4, r6, lsl #2
    1088:	e8030305 	stmda	r3, {r0, r2, r8, r9}
		if ((word)(__pi_mintk - znew) < min) 
    108c:	02052e02 	andeq	r2, r5, #2, 28
    1090:	05040447 	streq	r0, [r4, #-1095]	; 0xfffffbb9
    1094:	7d9b032d 	ldcvc	3, cr0, [fp, #180]	; 0xb4
	__pi_old = znew;
    1098:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
}
    109c:	e8030603 	stmda	r3, {r0, r1, r9, sl}
	TCI_RUN_DELAY_TIMER;
    10a0:	41052002 	tstmi	r5, r2
}
    10a4:	1d050106 	stfnes	f0, [r5, #-24]	; 0xffffffe8
    10a8:	0e051d06 	cdpeq	13, 0, cr1, cr5, cr6, {0}
    10ac:	06020501 	streq	r0, [r2], -r1, lsl #10
    10b0:	04260601 	strteq	r0, [r6], #-1537	; 0xfffff9ff
    10b4:	03030503 	movweq	r0, #13571	; 0x3503
void proceed (word state) {
    10b8:	040178d9 	streq	r7, [r1], #-2265	; 0xfffff727
	prcdstate (__pi_curr, state);
    10bc:	06010501 	streq	r0, [r1], -r1, lsl #10
    10c0:	2007a803 	andcs	sl, r7, r3, lsl #16
	release;
    10c4:	01000802 	tsteq	r0, r2, lsl #16
    10c8:	00180501 	andseq	r0, r8, r1, lsl #10
void __pi_wait (aword event, word state) {
    10cc:	096c0205 	stmdbeq	ip!, {r0, r2, r9}^
	sint j = nevents (__pi_curr);
    10d0:	c5030000 	strgt	r0, [r3, #-0]
	if (j >= MAX_EVENTS_PER_TASK)
    10d4:	07040107 	streq	r0, [r4, -r7, lsl #2]
    10d8:	bb030105 	bllt	c14f4 <__ccfg+0xa154c>
    10dc:	01040178 	tsteq	r4, r8, ror r1
		syserror (ENEVENTS, "sw");
    10e0:	03061805 	movweq	r1, #26629	; 0x6805
    10e4:	040107c5 	streq	r0, [r1], #-1989	; 0xfffff83b
	setestate (__pi_curr->Events [j], state, event);
    10e8:	03050507 	movweq	r0, #21767	; 0x5507
	incwait (__pi_curr);
    10ec:	052078bb 	streq	r7, [r0, #-2235]!	; 0xfffff745
	setestate (__pi_curr->Events [j], state, event);
    10f0:	02052e04 	andeq	r2, r5, #4, 28	; 0x40
}
    10f4:	013d3d06 	teqeq	sp, r6, lsl #26
    10f8:	063c0101 	ldrteq	r0, [ip], -r1, lsl #2
    10fc:	2e660620 	cdpcs	6, 6, cr0, cr6, cr0, {1}
void __pi_trigger (aword event) {
    1100:	2e014a58 			; <UNDEFINED> instruction: 0x2e014a58
	for_all_tasks (i) {
    1104:	04580113 	ldrbeq	r0, [r8], #-275	; 0xfffffeed
		for (j = 0; j < nevents (i); j++) {
    1108:	0f010508 	svceq	0x00010508
    110c:	01060505 	tsteq	r6, r5, lsl #10
    1110:	05200405 	streq	r0, [r0, #-1029]!	; 0xfffffbfb
    1114:	013d0602 	teqeq	sp, r2, lsl #12
			if (i->Events [j] . Event == event) {
    1118:	063c0101 	ldrteq	r0, [ip], -r1, lsl #2
    111c:	2e660620 	cdpcs	6, 6, cr0, cr6, cr0, {1}
    1120:	2e014a58 			; <UNDEFINED> instruction: 0x2e014a58
				wakeupev (i, j);
    1124:	58012f13 	stmdapl	r1, {r0, r1, r4, r8, r9, sl, fp, sp}
    1128:	01050104 	tsteq	r5, r4, lsl #2
	for_all_tasks (i) {
    112c:	07d00306 	ldrbeq	r0, [r0, r6, lsl #6]
}
    1130:	000b0201 	andeq	r0, fp, r1, lsl #4
aword __pi_join (aword pid, word st) {
    1134:	15050101 	strne	r0, [r5, #-257]	; 0xfffffeff
	for_all_tasks (i) {
    1138:	10020500 	andne	r0, r2, r0, lsl #10
    113c:	0300000a 	movweq	r0, #10
	return 0;
    1140:	05010880 	streq	r0, [r1, #-2176]	; 0xfffff780
		if ((aword)i == pid) {
    1144:	15051402 	strne	r1, [r5, #-1026]	; 0xfffffbfe
			__pi_wait (pid, st);
    1148:	02051006 	andeq	r1, r5, #6
}
    114c:	3e061e32 	mcrcc	14, 0, r1, cr6, cr2, {1}
	for_all_tasks (i) {
    1150:	04595959 	ldrbeq	r5, [r9], #-2393	; 0xfffff6a7
    1154:	03050509 	movweq	r0, #21769	; 0x5509
void delay (word d, word state) {
    1158:	05017ca7 	streq	r7, [r1, #-3239]	; 0xfffff359
	settstate (__pi_curr, state);
    115c:	04010631 	streq	r0, [r1], #-1585	; 0xfffff9cf
    1160:	030b0501 	movweq	r0, #46337	; 0xb501
    1164:	04207dc5 	strteq	r7, [r0], #-3525	; 0xfffff23b
    1168:	03310509 	teqeq	r1, #37748736	; 0x2400000
	update_n_wake (d, YES);
    116c:	042002bb 	strteq	r0, [r0], #-699	; 0xfffffd45
    1170:	03320501 	teqeq	r2, #4194304	; 0x400000
	__pi_curr->Timer = __pi_old + d;
    1174:	042e7dc8 	strteq	r7, [lr], #-3528	; 0xfffff238
    1178:	03050504 	movweq	r0, #21764	; 0x5504
	inctimer (__pi_curr);
    117c:	052e029b 	streq	r0, [lr, #-667]!	; 0xfffffd65
    1180:	7ecc032d 	cdpvc	3, 12, cr0, cr12, cr13, {1}
    1184:	2e4a032e 	cdpcs	3, 4, cr0, cr10, cr14, {1}
}
    1188:	31050904 	tstcc	r5, r4, lsl #18
    118c:	2e028703 	cdpcs	7, 0, cr8, cr2, cr3, {0}
	if (fun == NULL)
    1190:	02050104 	andeq	r0, r5, #4, 2
		return (int) __pi_curr;
    1194:	03dc0306 	bicseq	r0, ip, #402653184	; 0x18000000
    1198:	79e70320 	stmibvc	r7!, {r5, r8, r9}^
	for_all_tasks (i)
    119c:	07051401 	streq	r1, [r5, -r1, lsl #8]
}
    11a0:	01120501 	tsteq	r2, r1, lsl #10
		if (i->code == fun)
    11a4:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
	for_all_tasks (i)
    11a8:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    11ac:	07052c3d 	smladxeq	r5, sp, ip, r2
    11b0:	06030522 	streq	r0, [r3], -r2, lsr #10
int __pi_strlen (const char *s) {
    11b4:	0632052f 	ldrteq	r0, [r2], -pc, lsr #10
	for (i = 0; *(s+i) != '\0'; i++);
    11b8:	2e210558 	mcrcs	5, 1, r0, cr1, cr8, {2}
}
    11bc:	2f060305 	svccs	0x00060305
	for (i = 0; *(s+i) != '\0'; i++);
    11c0:	01060605 	tsteq	r6, r5, lsl #12
	while ((Boolean)(*d++ = *s++));
    11c4:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    11c8:	29050404 	stmdbcs	r5, {r2, sl}
    11cc:	01029103 	tsteq	r2, r3, lsl #2
}
    11d0:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
	while (n--)
    11d4:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    11d8:	01043c06 	tsteq	r4, r6, lsl #24
		*dest++ = *src++;
    11dc:	03060305 	movweq	r0, #25349	; 0x6305
    11e0:	05207de9 	streq	r7, [r0, #-3561]!	; 0xfffff217
    11e4:	052e0606 	streq	r0, [lr, #-1542]!	; 0xfffff9fa
	while (n--)
    11e8:	04210604 	strteq	r0, [r1], #-1540	; 0xfffff9fc
}
    11ec:	03290504 			; <UNDEFINED> instruction: 0x03290504
		*dest++ = c;
    11f0:	05050127 	streq	r0, [r5, #-295]	; 0xfffffed9
void adddevfunc (devreqfun_t rf, int loc) {
    11f4:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
		syserror (EREQPAR, "addv");
    11f8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		syserror (ERESOURCE, "addv");
    11fc:	56030604 	strpl	r0, [r3], -r4, lsl #12
	if (ioreq [loc] != NULL)
    1200:	0504043c 	streq	r0, [r4, #-1084]	; 0xfffffbc4
    1204:	00db0329 	sbcseq	r0, fp, r9, lsr #6
		syserror (ERESOURCE, "addv");
    1208:	17050501 	strne	r0, [r5, -r1, lsl #10]
	ioreq [loc] = rf;
    120c:	01062d05 	tsteq	r6, r5, lsl #26
}
    1210:	3c050104 	stfccs	f0, [r5], {4}
    1214:	7f960306 	svcvc	0x00960306
sint io (word retry, word dev, word operation, char *buf, word len) {
    1218:	0112052e 	tsteq	r2, lr, lsr #10
    121c:	01060205 	tsteq	r6, r5, lsl #4
    1220:	069a0306 	ldreq	r0, [sl], r6, lsl #6
    1224:	0401012e 	streq	r0, [r1], #-302	; 0xfffffed2
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1228:	03290504 			; <UNDEFINED> instruction: 0x03290504
    122c:	05017a95 	streq	r7, [r1, #-2709]	; 0xfffff56b
    1230:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
		syserror (ENODEVICE, "io");
    1234:	01040106 	tsteq	r4, r6, lsl #2
    1238:	e6030205 	str	r0, [r3], -r5, lsl #4
	if (len == 0)
    123c:	04043c05 	streq	r3, [r4], #-3077	; 0xfffff3fb
	ret = (ioreq [dev]) (operation, buf, len);
    1240:	9a032d05 	bls	cc65c <__ccfg+0xac6b4>
    1244:	0104207a 	tsteq	r4, sl, ror r0
	if (ret >= 0)
    1248:	03060205 	movweq	r0, #25093	; 0x6205
	if (ret == -1) {
    124c:	042005e6 	strteq	r0, [r0], #-1510	; 0xfffffa1a
    1250:	03290504 			; <UNDEFINED> instruction: 0x03290504
		if (retry == WNONE)
    1254:	05017a95 	streq	r7, [r1, #-2709]	; 0xfffff56b
		iowait (dev, operation, retry);
    1258:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    125c:	01040106 	tsteq	r4, r6, lsl #2
    1260:	03060205 	movweq	r0, #25093	; 0x6205
			release;
    1264:	012005e6 	smulwteq	r0, r6, r5
	if (ret == -2) {
    1268:	01010101 	tsteq	r1, r1, lsl #2
		if (retry != WNONE) {
    126c:	2e016601 	cfmadd32cs	mvax0, mvfx6, mvfx1, mvfx1
    1270:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
			iowait (dev, operation, retry);
    1274:	7acb0329 	bvc	ff2c1f20 <_estack+0xdf2bcf20>
    1278:	17050501 	strne	r0, [r5, -r1, lsl #10]
			(ioreq [dev]) (NONE, buf, len);
    127c:	01062d05 	tsteq	r6, r5, lsl #26
    1280:	02050104 	andeq	r0, r5, #4, 2
    1284:	2005b003 	andcs	fp, r5, r3
		(ioreq [dev]) (NONE, buf, len);
    1288:	2d050404 	cfstrscs	mvf0, [r5, #-16]
    128c:	207ad003 	rsbscs	sp, sl, r3
    1290:	02050104 	andeq	r0, r5, #4, 2
}
    1294:	05b00306 	ldreq	r0, [r0, #774]!	; 0x306
	if (retry != WNONE) {
    1298:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
		delay (-ret - 2, retry);
    129c:	7acb0329 	bvc	ff2c1f48 <_estack+0xdf2bcf48>
    12a0:	17050501 	strne	r0, [r5, -r1, lsl #10]
    12a4:	01062d05 	tsteq	r6, r5, lsl #26
    12a8:	02050104 	andeq	r0, r5, #4, 2
		release;
    12ac:	05b00306 	ldreq	r0, [r0, #774]!	; 0x306
    12b0:	01010120 	tsteq	r1, r0, lsr #2
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    12b4:	05010101 	streq	r0, [r1, #-257]	; 0xfffffeff
    12b8:	10030623 	andne	r0, r3, r3, lsr #12
    12bc:	03020501 	movweq	r0, #9473	; 0x2501
    12c0:	58062070 	stmdapl	r6, {r4, r5, r6, sp}
    12c4:	0d032e01 	stceq	14, cr2, [r3, #-4]
		syserror (ERESOURCE, "mal1");
    12c8:	050a0401 	streq	r0, [sl, #-1025]	; 0xfffffbff
    12cc:	7ecd0305 	cdpvc	3, 12, cr0, cr13, cr5, {0}
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    12d0:	062f0501 	strteq	r0, [pc], -r1, lsl #10
    12d4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12d8:	01ba0327 			; <UNDEFINED> instruction: 0x01ba0327
	m_size (mpools [0]) = mlen - m_hdrlen;
    12dc:	050a0420 	streq	r0, [sl, #-1056]	; 0xfffffbe0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12e0:	7ec6032f 	cdpvc	3, 12, cr0, cr6, cr15, {1}
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12e4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    12e8:	b5030602 	strlt	r0, [r3, #-1538]	; 0xfffff9fe
}
    12ec:	23052001 	movwcs	r2, #20481	; 0x5001
    12f0:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
    12f4:	05200c03 	streq	r0, [r0, #-3075]!	; 0xfffff3fd
    12f8:	20740323 	rsbscs	r0, r4, r3, lsr #6
    12fc:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    1300:	01062705 	tsteq	r6, r5, lsl #14
void __pi_free (aword *ch) {
    1304:	05280205 	streq	r0, [r8, #-517]!	; 0xfffffdfb
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1308:	20780327 	rsbscs	r0, r8, r7, lsr #6
    130c:	28060205 	stmdacs	r6, {r0, r2, r9}
		syserror (EMALLOC, "malg");
    1310:	0a03313f 	beq	cd814 <__ccfg+0xad86c>
    1314:	c003404a 	andgt	r4, r3, sl, asr #32
	mcfree [MA_NP] += m_size (ch);
    1318:	5959017d 	ldmdbpl	r9, {r0, r2, r3, r4, r5, r6, r8}^
		m_size (ch) ^= MALLOC_UMASK;
    131c:	05090459 	streq	r0, [r9, #-1113]	; 0xfffffba7
    1320:	7eae0305 	cdpvc	3, 10, cr0, cr14, cr5, {0}
	mcfree [MA_NP] += m_size (ch);
    1324:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	QFREE;
    1328:	d403060d 	strle	r0, [r3], #-1549	; 0xfffff9f3
	if (mevent [MA_NP] . nwait) {
    132c:	09040101 	stmdbeq	r4, {r0, r8}
    1330:	ac033105 	stfges	f3, [r3], {5}
		trigger ((aword)(&(mevent [MA_NP])));
    1334:	01042e7e 	tsteq	r4, lr, ror lr
		mevent [MA_NP] . nwait --;
    1338:	03060205 	movweq	r0, #25093	; 0x6205
}
    133c:	052001d4 	streq	r0, [r0, #-468]!	; 0xfffffe2c
    1340:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    1344:	03220602 			; <UNDEFINED> instruction: 0x03220602
    1348:	012e02c7 	smlawteq	lr, r7, r2, r0
void kill (aword pid) {
    134c:	05152e2e 	ldreq	r2, [r5, #-3630]	; 0xfffff1d2
		pid = (aword) __pi_curr;
    1350:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
	j = NULL;
    1354:	03052e05 	movweq	r2, #24069	; 0x5e05
	for_all_tasks (i) {
    1358:	0b043006 	bleq	10d378 <__ccfg+0xed3d0>
	syserror (EREQPAR, "kpi");
    135c:	c3030505 	movwgt	r0, #13573	; 0x3505
    1360:	0c040179 	stfeqs	f0, [r4], {121}	; 0x79
		if ((aword)i == pid) {
    1364:	05015e03 	streq	r5, [r1, #-3587]	; 0xfffff1fd
    1368:	0401062e 	streq	r0, [r1], #-1582	; 0xfffff9d2
				__PCB = i->Next;
    136c:	0605050b 	streq	r0, [r5], -fp, lsl #10
			killev (i);
    1370:	052e2303 	streq	r2, [lr, #-771]!	; 0xfffffcfd
			ufree (i);
    1374:	05010634 	streq	r0, [r1, #-1588]	; 0xfffff9cc
			if (i == __pi_curr)
    1378:	044b0605 	strbeq	r0, [fp], #-1541	; 0xfffff9fb
    137c:	03150501 	tsteq	r5, #4194304	; 0x400000
				release;
    1380:	054a06d5 	strbeq	r0, [sl, #-1749]	; 0xfffff92b
				j->Next = i->Next;
    1384:	04051303 	streq	r1, [r5], #-771	; 0xfffffcfd
    1388:	3a150513 	bcc	5427dc <__ccfg+0x522834>
    138c:	03190205 	tsteq	r9, #1342177280	; 0x50000000
}
    1390:	04017ecb 	streq	r7, [r1], #-3787	; 0xfffff135
    1394:	03240506 			; <UNDEFINED> instruction: 0x03240506
    1398:	05017ed4 	streq	r7, [r1, #-3796]	; 0xfffff12c
	if (size < 8)
    139c:	23051705 	movwcs	r1, #22277	; 0x5705
		_size = 2;
    13a0:	01040106 	tsteq	r4, r6, lsl #2
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13a4:	dd030205 	sfmle	f0, 4, [r3, #-20]	; 0xffffffec
		_size = (((aword)size) + 3) >> 2;
    13a8:	06042002 	streq	r2, [r4], -r2
		if (m_magic (chunk) != MALLOC_MAGIC)
    13ac:	a3032305 	movwge	r2, #13061	; 0x3305
		_size = (((aword)size) + 3) >> 2;
    13b0:	0104207d 	tsteq	r4, sp, ror r0
		if (mevent [MA_NP] . nfail != 255)
    13b4:	03060205 	movweq	r0, #25093	; 0x6205
    13b8:	4e4a02dd 	mcrmi	2, 2, r0, cr10, cr13, {6}
			mevent [MA_NP] . nfail ++;
    13bc:	13060105 	movwne	r0, #24837	; 0x6105
		mnfree [MA_NP] = 0;
    13c0:	052d0205 	streq	r0, [sp, #-517]!	; 0xfffffdfb
    13c4:	5f030603 	svcpl	0x00030603
		if (m_magic (chunk) != MALLOC_MAGIC)
    13c8:	0541412e 	strbeq	r4, [r1, #-302]	; 0xfffffed2
    13cc:	05130604 	ldreq	r0, [r3, #-1540]	; 0xfffff9fc
			syserror (EMALLOC, "malc");
    13d0:	2f021f03 	svccs	0x00021f03
    13d4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		if (m_size (chunk) >= _size)
    13d8:	0205001f 	andeq	r0, r5, #31
    13dc:	00000bc8 	andeq	r0, r0, r8, asr #23
		chunk = m_nextp (chunk)) {
    13e0:	0108fd03 	tsteq	r8, r3, lsl #26	; <UNPREDICTABLE>
		m_setnextp (cc, m_nextp (chunk));
    13e4:	16170205 	ldrne	r0, [r7], -r5, lsl #4
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    13e8:	01062c05 	tsteq	r6, r5, lsl #24
    13ec:	05661505 	strbeq	r1, [r6, #-1285]!	; 0xfffffafb
			m_size (chunk) = _size;
    13f0:	1505202c 	strne	r2, [r5, #-44]	; 0xffffffd4
			cc = chunk + _size + m_hdrlen;
    13f4:	21120520 	tstcs	r2, r0, lsr #10
    13f8:	4a1f1505 	bmi	7c6814 <__ccfg+0x7a686c>
			m_size (cc) = waste - m_hdrlen;
    13fc:	02230105 	eoreq	r0, r3, #1073741825	; 0x40000001
			QFREE;
    1400:	01010003 	tsteq	r1, r3
		mevent [MA_NP] . nfail = 0;
    1404:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
		mcfree [MA_NP] -= m_size (chunk);
    1408:	00000002 	andeq	r0, r0, r2
    140c:	0adb0300 	beq	ff6c2014 <_estack+0xdf6bd014>
    1410:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    1414:	010f0514 	tsteq	pc, r4, lsl r5	; <UNPREDICTABLE>
		m_size (chunk) |= MALLOC_UMASK;
    1418:	0e061c05 	cdpeq	12, 0, cr1, cr6, cr5, {0}
		if (mnfree [MA_NP] > mcfree [MA_NP])
    141c:	05250605 	streq	r0, [r5, #-1541]!	; 0xfffff9fb
		m_size (chunk) |= MALLOC_UMASK;
    1420:	06052007 	streq	r2, [r5], -r7
			mnfree [MA_NP] = mcfree [MA_NP];
    1424:	06030558 			; <UNDEFINED> instruction: 0x06030558
}
    1428:	0606052e 	streq	r0, [r6], -lr, lsr #10
    142c:	06310501 	ldrteq	r0, [r1], -r1, lsl #10
    1430:	010f052d 	tsteq	pc, sp, lsr #10
    1434:	20060205 	andcs	r0, r6, r5, lsl #4
    1438:	01054d06 	tsteq	r5, r6, lsl #26
    143c:	04021306 	streq	r1, [r2], #-774	; 0xfffffcfa
    1440:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
aword __pi_fork (fsmcode func, aword data) {
    1444:	02050031 	andeq	r0, r5, #49	; 0x31
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1448:	00000bec 	andeq	r0, r0, ip, ror #23
    144c:	010ae703 	tsteq	sl, r3, lsl #14
    1450:	04140205 	ldreq	r0, [r4], #-517	; 0xfffffdfb
		if ((j = __PCB) == NULL)
    1454:	03030503 	movweq	r0, #13571	; 0x3503
	i->Next = NULL;
    1458:	040177b2 	streq	r7, [r1], #-1970	; 0xfffff84e
	i->data = data;
    145c:	06310501 	ldrteq	r0, [r1], -r1, lsl #10
		if ((j = __PCB) == NULL)
    1460:	0108cc03 	tsteq	r8, r3, lsl #24
}
    1464:	03050304 	movweq	r0, #21252	; 0x5304
			for (; j->Next != NULL; j = j->Next);
    1468:	3c77b403 	cfldrdcc	mvd11, [r7], #-12
    146c:	31050104 	tstcc	r5, r4, lsl #2
	return (aword) i;
    1470:	2008cc03 	andcs	ip, r8, r3, lsl #24
    1474:	03050304 	movweq	r0, #21252	; 0x5304
	if (mevent [MA_NP] . nwait != 255)
    1478:	2077b403 	rsbscs	fp, r7, r3, lsl #8
    147c:	02050104 	andeq	r0, r5, #4, 2
    1480:	08d00306 	ldmeq	r0, {r1, r2, r8, r9}^
		mevent [MA_NP] . nwait ++;
    1484:	0204012e 	andeq	r0, r4, #-2147483637	; 0x8000000b
	wait ((aword)(&(mevent [MA_NP])), state);
    1488:	03060505 	movweq	r0, #25861	; 0x6505
    148c:	046676dd 	strbteq	r7, [r6], #-1757	; 0xfffff923
void diag (const char *mess, ...) {
    1490:	06020501 	streq	r0, [r2], -r1, lsl #10
    1494:	2009a303 	andcs	sl, r9, r3, lsl #6
    1498:	9b030d04 	blls	c48b0 <__ccfg+0xa4908>
	diag_disable_int (a, is);
    149c:	01010175 	tsteq	r1, r5, ror r1
    14a0:	044a5b19 	strbeq	r5, [sl], #-2841	; 0xfffff4e7
    14a4:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
				d = (bc == 16) ? 10000 : 1000000000;
    14a8:	2e099d03 	cdpcs	13, 0, cr9, cr9, cr3, {0}
	diag_disable_int (a, is);
    14ac:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
	while (*mess != '\0') {
    14b0:	76f90306 	ldrbtvc	r0, [r9], r6, lsl #6
	dgout ('\r');
    14b4:	01010120 	tsteq	r1, r0, lsr #2
	dgout ('\n');
    14b8:	03040101 	movweq	r0, #16641	; 0x4101
    14bc:	36030305 	strcc	r0, [r3], -r5, lsl #6
    14c0:	050d0401 	streq	r0, [sp, #-1025]	; 0xfffffbff
	diag_wait (a);
    14c4:	204a0302 	subcs	r0, sl, r2, lsl #6
	diag_enable_int (a, is);
    14c8:	03010482 	movweq	r0, #5250	; 0x1482
    14cc:	050108eb 	streq	r0, [r1, #-2283]	; 0xfffff715
}
    14d0:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    14d4:	054c0602 	strbeq	r0, [ip, #-1538]	; 0xfffff9fe
    14d8:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
		if (*mess == '%') {
    14dc:	15052002 	strne	r2, [r5, #-2]
    14e0:	20020520 	andcs	r0, r2, r0, lsr #10
			if (*mess == 'l') {
    14e4:	6a060405 	bvs	182500 <__ccfg+0x162558>
    14e8:	050d0421 	streq	r0, [sp, #-1057]	; 0xfffffbdf
				mess++;
    14ec:	778e0302 	strvc	r0, [lr, r2, lsl #6]
				val = va_arg (ap, lword);
    14f0:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
				bc = 32;
    14f4:	012b0303 			; <UNDEFINED> instruction: 0x012b0303
				bc = 16;
    14f8:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
			switch (*mess) {
    14fc:	20205503 	eorcs	r5, r0, r3, lsl #10
    1500:	03010420 	movweq	r0, #5152	; 0x1420
    1504:	04200ac5 	strteq	r0, [r0], #-2757	; 0xfffff53b
				dgout ('%');
    1508:	0303050d 	movweq	r0, #13581	; 0x350d
    150c:	054a75a6 	strbeq	r7, [sl, #-1446]	; 0xfffffa5a
				dgout (*mess);
    1510:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    1514:	23052006 	movwcs	r2, #20486	; 0x5006
			switch (*mess) {
    1518:	201f0520 	andscs	r0, pc, r0, lsr #10
					v = __pi_hex_enc_table [
    151c:	30060405 	andcc	r0, r6, r5, lsl #8
					i += 4;
    1520:	01060e05 	tsteq	r6, r5, lsl #28
					(val >> (bc - i)) & 0xf];
    1524:	2f060405 	svccs	0x00060405
    1528:	041c0205 	ldreq	r0, [ip], #-517	; 0xfffffdfb
					dgout (v);
    152c:	03040501 	movweq	r0, #17665	; 0x4501
    1530:	052e098f 	streq	r0, [lr, #-2447]!	; 0xfffff671
				while (i < bc) {
    1534:	0501062a 	streq	r0, [r1, #-1578]	; 0xfffff9d6
			mess++;
    1538:	2a052704 	bcs	14b150 <__ccfg+0x12b1a8>
					d /= 10;
    153c:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
				if ((val >> (bc - 1)) & 1) {
    1540:	044e0604 	strbeq	r0, [lr], #-1540	; 0xfffff9fc
    1544:	7fb20309 	svcvc	0x00b20309
					dgout ('-');
    1548:	06290501 	strteq	r0, [r9], -r1, lsl #10
    154c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
						val |= 0xffff0000;
    1550:	d1030604 	tstle	r3, r4, lsl #12
    1554:	044d6600 	strbeq	r6, [sp], #-1536	; 0xfffffa00
    1558:	03050502 	movweq	r0, #21762	; 0x5502
				d = (bc == 16) ? 10000 : 1000000000;
    155c:	0401789f 	streq	r7, [r1], #-2207	; 0xfffff761
    1560:	03040501 	movweq	r0, #17665	; 0x4501
    1564:	052007e5 	streq	r0, [r0, #-2021]!	; 0xfffff81b
					v = (word) (val / d);
    1568:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
					if (v || d == 1) break;
    156c:	214b0604 	cmpcs	fp, r4, lsl #12
    1570:	01061a05 	tsteq	r6, r5, lsl #20
					d /= 10;
    1574:	4d060405 	cfstrsmi	mvf0, [r6, #-20]	; 0xffffffec
				d = (bc == 16) ? 10000 : 1000000000;
    1578:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
					dgout (v + '0');
    157c:	01789603 	cmneq	r8, r3, lsl #12
    1580:	21060105 	tstcs	r6, r5, lsl #2
    1584:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
					d /= 10;
    1588:	07f10306 	ldrbeq	r0, [r1, r6, lsl #6]!
					val = val - (v * d);
    158c:	050c0420 	streq	r0, [ip, #-1056]	; 0xfffffbe0
					if (d == 0) break;
    1590:	78a00305 	stmiavc	r0!, {r0, r2, r8, r9}
					v = (word) (val / d);
    1594:	05090401 	streq	r0, [r9, #-1025]	; 0xfffffbff
    1598:	d4030631 	strle	r0, [r3], #-1585	; 0xfffff9cf
				if (bc == 16)
    159c:	0c040102 	stfeqs	f0, [r4], {2}
				d = (bc == 16) ? 10000 : 1000000000;
    15a0:	ac032e05 	stcge	14, cr2, [r3], {5}
					val &= 0xffff;
    15a4:	0e042e7d 	mcreq	14, 0, r2, cr4, cr13, {3}
					dgout (*s);
    15a8:	88035205 	stmdahi	r3, {r0, r2, r9, ip, lr}
					s++;
    15ac:	0c042e02 	stceq	14, cr2, [r4], {2}
				while (*s != '\0') {
    15b0:	f8032e05 			; <UNDEFINED> instruction: 0xf8032e05
    15b4:	01042e7d 	tsteq	r4, sp, ror lr
			dgout (*mess++);
    15b8:	03060405 	movweq	r0, #25605	; 0x6405
    15bc:	042007e5 	strteq	r0, [r0], #-2021	; 0xfffff81b
    15c0:	0331050e 	teqeq	r1, #58720256	; 0x3800000
    15c4:	05017aa0 	streq	r7, [r1, #-2720]	; 0xfffff560
    15c8:	52051505 	andpl	r1, r5, #20971520	; 0x1400000
	__pi_seed = __pi_seed * 1103515245 + 12345;
    15cc:	01040106 	tsteq	r4, r6, lsl #2
    15d0:	e5030405 	str	r0, [r3, #-1029]	; 0xfffffbfb
    15d4:	0e042005 	cdpeq	0, 0, cr2, cr4, cr5, {0}
    15d8:	9b035205 	blls	d5df4 <__ccfg+0xb5e4c>
	^ entropy
    15dc:	01042e7a 	tsteq	r4, sl, ror lr
}
    15e0:	03060405 	movweq	r0, #25605	; 0x6405
    15e4:	042e05e0 	strteq	r0, [lr], #-1504	; 0xfffffa20
    15e8:	03050502 	movweq	r0, #21762	; 0x5502
    15ec:	04017886 	streq	r7, [r1], #-2182	; 0xfffff77a
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    15f0:	03040501 	movweq	r0, #17665	; 0x4501
	word cs = size + hblenb;
    15f4:	042007fc 	strteq	r0, [r0], #-2044	; 0xfffff804
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    15f8:	03050509 	movweq	r0, #21769	; 0x5509
    15fc:	05017aea 	streq	r7, [r1, #-2794]	; 0xfffff516
	p -> length = size;
    1600:	05010631 	streq	r0, [r1, #-1585]	; 0xfffff9cf
}
    1604:	04b60329 	ldrteq	r0, [r6], #809	; 0x329
	if (p->attributes.b.queued) {
    1608:	03310520 	teqeq	r1, #32, 10	; 0x8000000
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    160c:	042e7bca 	strteq	r7, [lr], #-3018	; 0xfffff436
    1610:	06040501 	streq	r0, [r4], -r1, lsl #10
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1614:	2e059903 	vmlacs.f16	s18, s10, s6	; <UNPREDICTABLE>
		p->attributes.b.queued = 0;
    1618:	01062305 	tsteq	r6, r5, lsl #6
    161c:	06200405 	strteq	r0, [r0], -r5, lsl #8
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1620:	0509046a 	streq	r0, [r9, #-1130]	; 0xfffffb96
	deq (p);	// Remove from queue
    1624:	799f0305 	ldmibvc	pc, {r0, r2, r8, r9}	; <UNPREDICTABLE>
}
    1628:	063f0501 	ldrteq	r0, [pc], -r1, lsl #10
	tfree ((address)p);
    162c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1630:	06ed0304 	strbteq	r0, [sp], r4, lsl #6
    1634:	05090420 	streq	r0, [r9, #-1056]	; 0xfffffbe0
    1638:	7993033f 	ldmibvc	r3, {r0, r1, r2, r3, r4, r5, r8, r9}
	sysassert (p->attributes.b.queued == 0, "tcv01");
    163c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1640:	ea030604 	b	c2e58 <__ccfg+0xa2eb0>
	if (q_empty (q))
    1644:	09042e06 	stmdbeq	r4, {r1, r2, r9, sl, fp, sp}
    1648:	017f9003 	cmneq	pc, r3
		trigger (q);
    164c:	01062905 	tsteq	r6, r5, lsl #18
	if (p->attributes.b.urgent) {
    1650:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
		p->u.bqueue.next = q->next;
    1654:	2e00f303 	cdpcs	3, 0, cr15, cr0, cr3, {0}
		p->u.bqueue.prev = q;
    1658:	29050904 	stmdbcs	r5, {r2, r8, fp}
		q->next->prev = (qitem_t*) p;
    165c:	207f8d03 	rsbscs	r8, pc, r3, lsl #26
	p->attributes.b.queued = 1;
    1660:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1664:	00f30306 	rscseq	r0, r3, r6, lsl #6
}
    1668:	04404d4a 	strbeq	r4, [r0], #-3402	; 0xfffff2b6
		p->u.bqueue.prev = q->prev;
    166c:	03050502 	movweq	r0, #21762	; 0x5502
		q->prev->next = (qitem_t*) p;
    1670:	040177ea 	streq	r7, [r1], #-2026	; 0xfffff816
		q->prev = (qitem_t*) p;
    1674:	03040501 	movweq	r0, #17665	; 0x4501
    1678:	05200899 	streq	r0, [r0, #-2201]!	; 0xfffff767
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    167c:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
	deq (p);	// Soft dequeue, timer and hook left intact
    1680:	214b0604 	cmpcs	fp, r4, lsl #12
	switch (dv) {
    1684:	01061a05 	tsteq	r6, r5, lsl #20
    1688:	05230405 	streq	r0, [r3, #-1029]!	; 0xfffffbfb
    168c:	04051d1a 	streq	r1, [r5], #-3354	; 0xfffff2e6
    1690:	04593f06 	ldrbeq	r3, [r9], #-3846	; 0xfffff0fa
			p->attributes.b.urgent = 1;
    1694:	7eee0309 	cdpvc	3, 14, cr0, cr14, cr9, {0}
    1698:	06290501 	strteq	r0, [r9], -r1, lsl #10
			verify_ses (p, "dispose ses");
    169c:	050e0401 	streq	r0, [lr, #-1025]	; 0xfffffbff
    16a0:	7bdb030d 	blvc	ff6c22dc <_estack+0xdf6bd2dc>
    16a4:	0509042e 	streq	r0, [r9, #-1070]	; 0xfffffbd2
    16a8:	04a50329 	strteq	r0, [r5], #809	; 0x329
    16ac:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
			verify_phy (p, "dispose phy");
    16b0:	97030604 	strls	r0, [r3, -r4, lsl #12]
    16b4:	0e044a01 	vmlaeq.f32	s8, s8, s2
}
    16b8:	f3033105 	vrhadd.u8	d3, d3, d5
			enq (oqueues [p->attributes.b.phys], p);
    16bc:	05050179 	streq	r0, [r5, #-377]	; 0xfffffe87
			p->attributes.b.urgent = 1;
    16c0:	06520515 			; <UNDEFINED> instruction: 0x06520515
    16c4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			verify_phy (p, "dispose phy");
    16c8:	8c03061a 	stchi	6, cr0, [r3], {26}
    16cc:	0a052e06 	beq	14ceec <__ccfg+0x12cf44>
    16d0:	050e0411 	streq	r0, [lr, #-1041]	; 0xfffffbef
    16d4:	7ac30305 	bvc	ff0c22f0 <_estack+0xdf0bd2f0>
    16d8:	060d0501 	streq	r0, [sp], -r1, lsl #10
    16dc:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			enq (oqueues [p->attributes.b.phys], p);
    16e0:	05bd030a 	ldreq	r0, [sp, #778]!	; 0x30a
    16e4:	06040520 	streq	r0, [r4], -r0, lsr #10
}
    16e8:	0b055932 	bleq	157bb8 <__ccfg+0x137c10>
			rlp (p);
    16ec:	1a050106 	bne	141b0c <__ccfg+0x121b64>
}
    16f0:	0a052106 	beq	149b10 <__ccfg+0x129b68>
    16f4:	060b0511 			; <UNDEFINED> instruction: 0x060b0511
    16f8:	580a0501 	stmdapl	sl, {r0, r8, sl}
    16fc:	32060405 	andcc	r0, r6, #83886080	; 0x5000000
    1700:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
    1704:	017ab803 	cmneq	sl, r3, lsl #16
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1708:	01063105 	tsteq	r6, r5, lsl #2
	if (b->attributes.b.outgoing) {
    170c:	bc033f05 	stclt	15, cr3, [r3], {5}
	b = header (p);
    1710:	3105207e 	tstcc	r5, lr, ror r0
	if (b->attributes.b.outgoing) {
    1714:	2001c403 	andcs	ip, r1, r3, lsl #8
		verify_ses (b, "tcv02");
    1718:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    171c:	05cb0306 	strbeq	r0, [fp, #774]	; 0x306
    1720:	05090420 	streq	r0, [r9, #-1056]	; 0xfffffbe0
    1724:	78f10305 	ldmvc	r1!, {r0, r2, r8, r9}^
    1728:	063f0501 	ldrteq	r0, [pc], -r1, lsl #10
		verify_plg (b, tcv_out, "tcv03");
    172c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1730:	92030604 	andls	r0, r3, #4, 12	; 0x400000
    1734:	0c042e07 	stceq	14, cr2, [r4], {7}
    1738:	f5030505 			; <UNDEFINED> instruction: 0xf5030505
    173c:	2e050177 	mcrcs	1, 0, r0, cr5, cr7, {3}
    1740:	01040106 	tsteq	r4, r6, lsl #2
    1744:	03060405 	movweq	r0, #25605	; 0x6405
    1748:	042e088e 	strteq	r0, [lr], #-2190	; 0xfffff772
    174c:	03050502 	movweq	r0, #21762	; 0x5502
		dispose (b, plugins [b->attributes.b.plugin] ->
    1750:	040177c9 	streq	r7, [r1], #-1993	; 0xfffff837
}
    1754:	03040501 	movweq	r0, #17665	; 0x4501
		dispose (b, plugins [b->attributes.b.plugin] ->
    1758:	032008ba 			; <UNDEFINED> instruction: 0x032008ba
		rlp (b);
    175c:	052f2e09 	streq	r2, [pc, #-3593]!	; 95b <__pinlist_setirq+0x2b>
}
    1760:	7db00302 	ldcvc	3, cr0, [r0, #8]!
		rlp (b);
    1764:	05060401 	streq	r0, [r6, #-1025]	; 0xfffffbff
    1768:	7ed40324 	cdpvc	3, 13, cr0, cr4, cr4, {1}
    176c:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1770:	01062305 	tsteq	r6, r5, lsl #6
    1774:	01050104 	tsteq	r5, r4, lsl #2
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1778:	5801a803 	stmdapl	r1, {r0, r1, fp, sp, pc}
    177c:	03060405 	movweq	r0, #25605	; 0x6405
    1780:	5b2002f0 	blpl	802348 <__ccfg+0x7e23a0>
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1784:	01062c05 	tsteq	r6, r5, lsl #24
	va_start (ap, plid);
    1788:	05273205 	streq	r3, [r7, #-517]!	; 0xfffffdfb
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    178c:	2079032c 	rsbscs	r0, r9, ip, lsr #6
    1790:	4c060405 	cfstrsmi	mvf0, [r6], {5}
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1794:	01062d05 	tsteq	r6, r5, lsl #26
    1798:	5d060405 	cfstrspl	mvf0, [r6, #-20]	; 0xffffffec
    179c:	01063205 	tsteq	r6, r5, lsl #4
    17a0:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
			syserror (ENODEVICE, "tcv04");
    17a4:	01063205 	tsteq	r6, r5, lsl #4
		syserror (EMALLOC, "tcv05");
    17a8:	24060405 	strcs	r0, [r6], #-1029	; 0xfffffbfb
	attp.b.outgoing = 1;
    17ac:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
    17b0:	01778b03 	cmneq	r7, r3, lsl #22
    17b4:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    17b8:	2008f803 	andcs	pc, r8, r3, lsl #16
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    17bc:	05050e04 	streq	r0, [r5, #-3588]	; 0xfffff1fc
		if (descriptors [fd] == NULL)
    17c0:	017a8803 	cmneq	sl, r3, lsl #16
    17c4:	01062d05 	tsteq	r6, r5, lsl #26
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    17c8:	31060505 	tstcc	r6, r5, lsl #10
		return ERROR;
    17cc:	01064d05 	tsteq	r6, r5, lsl #26
}
    17d0:	3d060505 	cfstr32cc	mvfx0, [r6, #-20]	; 0xffffffec
    17d4:	01062e05 	tsteq	r6, r5, lsl #28
    17d8:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
	s->attpattern.b.session = fd;
    17dc:	05f70306 	ldrbeq	r0, [r7, #774]!	; 0x306
    17e0:	0502043c 	streq	r0, [r2, #-1084]	; 0xfffffbc4
	descriptors [fd] = s;
    17e4:	77850305 	strvc	r0, [r5, r5, lsl #6]
	q_init (&(s->rqueue));
    17e8:	050e0401 	streq	r0, [lr, #-1025]	; 0xfffffbff
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    17ec:	e803060d 	stmda	r3, {r0, r2, r3, r9, sl}
    17f0:	01042002 	tsteq	r4, r2
    17f4:	03063905 	movweq	r3, #26885	; 0x6905
    17f8:	05200696 	streq	r0, [r0, #-1686]!	; 0xfffff96a
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    17fc:	0e04010a 	adfeqs	f0, f4, #2.0
    1800:	ea030505 	b	c2c1c <__ccfg+0xa2c74>
    1804:	0d050179 	stfeqs	f0, [r5, #-484]	; 0xfffffe1c
	descriptors [fd] = s;
    1808:	01040106 	tsteq	r4, r6, lsl #2
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    180c:	96030a05 	strls	r0, [r3], -r5, lsl #20
    1810:	04052006 	streq	r2, [r5], #-6
	if (s == NULL)
    1814:	09043206 	stmdbeq	r4, {r1, r2, r9, ip, sp}
		syserror (EMALLOC, "tcv05");
    1818:	ec030505 	cfstr32	mvfx0, [r3], {5}
    181c:	41050177 	tstmi	r5, r7, ror r1
    1820:	01040106 	tsteq	r4, r6, lsl #2
    1824:	97030405 	strls	r0, [r3, -r5, lsl #8]
    1828:	09042e08 	stmdbeq	r4, {r3, r9, sl, fp, sp}
    182c:	e9034105 	stmdb	r3, {r0, r2, r8, lr}
    1830:	01042077 	tsteq	r4, r7, ror r0
    1834:	03060405 	movweq	r0, #25605	; 0x6405
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1838:	52200897 	eorpl	r0, r0, #9895936	; 0x970000
	    (plugins [ord] != NULL && plugins [ord] != pl))
    183c:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
    1840:	2075d103 	rsbscs	sp, r5, r3, lsl #2
    1844:	0101014a 	tsteq	r1, sl, asr #2
	plugins [ord] = pl;
    1848:	03050304 	movweq	r0, #21252	; 0x5304
	return 0;
    184c:	04012b03 	streq	r2, [r1], #-2819	; 0xfffff4fd
		return ERROR;
    1850:	0302050d 	movweq	r0, #9485	; 0x250d
}
    1854:	02162055 	andseq	r2, r6, #85	; 0x55
    1858:	01010037 	tsteq	r1, r7, lsr r0
	verify_fds (fd, "tcv10");
    185c:	05001205 	streq	r1, [r0, #-517]	; 0xfffffdfb
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    1860:	000e4402 	andeq	r4, lr, r2, lsl #8
	verify_fds (fd, "tcv10");
    1864:	00e10300 	rsceq	r0, r1, r0, lsl #6
    1868:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    186c:	1e061205 	cdpne	2, 0, cr1, cr6, cr5, {0}
	verify_plg (b, tcv_frm, "tcv11");
    1870:	21220205 			; <UNDEFINED> instruction: 0x21220205
	b = q_first (rq);
    1874:	2f21061f 	svccs	0x0021061f
	if (q_end (b, rq)) {
    1878:	08053f4b 	stmdaeq	r5, {r0, r1, r3, r6, r8, r9, sl, fp, ip, sp}
		if (state != WNONE) {
    187c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1880:	08022f06 	stmdaeq	r2, {r1, r2, r8, r9, sl, fp, sp}
			when (rq, state);
    1884:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			release;
    1888:	0205003a 	andeq	r0, r5, #58	; 0x3a
	deq (b);	// Dequeue the packet ...
    188c:	00000000 	andeq	r0, r0, r0
    1890:	0100f103 	tsteq	r0, r3, lsl #2	; <UNPREDICTABLE>
	p = ((address)(b + 1));
    1894:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
	verify_plg (b, tcv_frm, "tcv11");
    1898:	0e063a05 	vmlaeq.f32	s6, s12, s10
    189c:	24060520 	strcs	r0, [r6], #-1312	; 0xfffffae0
    18a0:	051c3a05 	ldreq	r3, [ip, #-2565]	; 0xfffff5fb
    18a4:	03052405 	movweq	r2, #21509	; 0x5405
    18a8:	06053f06 	streq	r3, [r5], -r6, lsl #30
    18ac:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    18b0:	12053006 	andne	r3, r5, #6
    18b4:	0b050106 	bleq	141cd4 <__ccfg+0x121d2c>
		b->length - b->u.pointers.head - b->u.pointers.tail;
    18b8:	0603052e 	streq	r0, [r3], -lr, lsr #10
    18bc:	06090525 	streq	r0, [r9], -r5, lsr #10
	b->u.pointers.tail =
    18c0:	050f0401 	streq	r0, [pc, #-1025]	; 14c7 <diag+0x37>
}
    18c4:	2015032f 	andscs	r0, r5, pc, lsr #6
		return NULL;
    18c8:	09050104 	stmdbeq	r5, {r2, r8}
    18cc:	05206b03 	streq	r6, [r0, #-2819]!	; 0xfffff4fd
    18d0:	04210603 	strteq	r0, [r1], #-1539	; 0xfffff9fd
    18d4:	0305050f 	movweq	r0, #21775	; 0x550f
    18d8:	2f050114 	svccs	0x00050114
	verify_fds (fd, "tcv16");
    18dc:	01040106 	tsteq	r4, r6, lsl #2
								Boolean urg) {
    18e0:	7a030105 	bvc	c1cfc <__ccfg+0xa1d54>
    18e4:	06040520 	streq	r0, [r4], -r0, lsr #10
	verify_fds (fd, "tcv16");
    18e8:	04206f03 	strteq	r6, [r0], #-3843	; 0xfffff0fd
    18ec:	0305050f 	movweq	r0, #21775	; 0x550f
    18f0:	140100c3 	strne	r0, [r1], #-195	; 0xffffff3d
	verify_pld (s, tcv_frm, "tcv17");
    18f4:	01061805 	tsteq	r6, r5, lsl #16
    18f8:	33060505 	movwcc	r0, #25861	; 0x6505
    18fc:	0b050104 	bleq	141d14 <__ccfg+0x121d6c>
    1900:	7fb60306 	svcvc	0x00b60306
    1904:	06030501 	streq	r0, [r3], -r1, lsl #10
    1908:	050f0434 	streq	r0, [pc, #-1076]	; 14dc <diag+0x4c>
    190c:	2f050e05 	svccs	0x00050e05
    1910:	01040106 	tsteq	r4, r6, lsl #2
	ptrs.head = (word) fd;
    1914:	41060305 	tstmi	r6, r5, lsl #6
	ptrs.tail = (word) urg;
    1918:	01060605 	tsteq	r6, r5, lsl #12
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    191c:	053f0405 	ldreq	r0, [pc, #-1029]!	; 151f <diag+0x8f>
    1920:	04052b06 	streq	r2, [r5], #-2822	; 0xfffff4fa
		if (state != WNONE) {
    1924:	052f2306 	streq	r2, [pc, #-774]!	; 1626 <rlp+0x6>
    1928:	13062203 	movwne	r2, #25091	; 0x6203
}
    192c:	051f0905 	ldreq	r0, [pc, #-2309]	; 102f <update_n_wake+0x43>
			when (eid, state);
    1930:	2f210603 	svccs	0x00210603
    1934:	01000902 	tsteq	r0, r2, lsl #18
			release;
    1938:	00110501 	andseq	r0, r1, r1, lsl #10
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    193c:	0e740205 	cdpeq	2, 7, cr0, cr4, cr5, {0}
    1940:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    1944:	0305010a 	movweq	r0, #20746	; 0x510a
    1948:	0f051316 	svceq	0x00051316
    194c:	06110501 	ldreq	r0, [r1], -r1, lsl #10
    1950:	2505200d 	strcs	r2, [r5, #-13]
    1954:	1f030526 	svcne	0x00030526
    1958:	21060405 	tstcs	r6, r5, lsl #8
		if (state != WNONE) {
    195c:	01062505 	tsteq	r6, r5, lsl #10
    1960:	2d063705 	stccs	7, cr3, [r6, #-20]	; 0xffffffec
			tmwait (state);
    1964:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    1968:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
	b->attributes = s->attpattern;
    196c:	06320602 	ldrteq	r0, [r2], -r2, lsl #12
		b->attributes.b.urgent = 1;
    1970:	20790319 	rsbscs	r0, r9, r9, lsl r3
    1974:	5b323106 	blpl	c8dd94 <__ccfg+0xc6ddec>
	b->u.pointers.head = ptrs.head;
    1978:	061c055b 			; <UNDEFINED> instruction: 0x061c055b
	b->u.pointers.tail = length;
    197c:	4a0c0501 	bmi	302d88 <__ccfg+0x2e2de0>
	return (address) (b + 1);
    1980:	05230205 	streq	r0, [r3, #-517]!	; 0xfffffdfb
    1984:	02051d0c 	andeq	r1, r5, #12, 26	; 0x300
    1988:	043e2306 	ldrteq	r2, [lr], #-774	; 0xfffffcfa
    198c:	03030503 	movweq	r0, #13571	; 0x3503
    1990:	040175c5 	streq	r7, [r1], #-1477	; 0xfffffa3b
    1994:	03020501 	movweq	r0, #9473	; 0x2501
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1998:	02200abd 	eoreq	r0, r0, #774144	; 0xbd000
    199c:	0101000e 	tsteq	r1, lr
    19a0:	00000ee0 	andeq	r0, r0, r0, ror #29
	verify_fph (phy, "tcv23");
    19a4:	01900003 	orrseq	r0, r0, r3
    19a8:	01020000 	mrseq	r0, (UNDEF: 2)
    19ac:	000d0efb 	strdeq	r0, [sp], -fp
    19b0:	01010101 	tsteq	r1, r1, lsl #2
}
    19b4:	01000000 	mrseq	r0, (UNDEF: 0)
	return (physical [phy]) (opt, arg);
    19b8:	2f010000 	svccs	0x00010000
    19bc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    19c0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    19c4:	2f6e6974 	svccs	0x006e6974
	if (opt < 0) {
    19c8:	6b736544 	blvs	1cdaee0 <__ccfg+0x1cbaf38>
		if (fd < 0)
    19cc:	2f706f74 	svccs	0x00706f74
		if (opt == PHYSOPT_PLUGINFO) {
    19d0:	4f534c4f 	svcmi	0x00534c4f
			if (fd >= TCV_MAX_PLUGS)
    19d4:	2f54454e 	svccs	0x0054454e
			if ((p = plugins [fd]) == NULL)
    19d8:	4f434950 	svcmi	0x00434950
    19dc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
}
    19e0:	2f534f63 	svccs	0x00534f63
		if (fd >= TCV_MAX_PHYS)
    19e4:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
		return physinfo [fd];
    19e8:	2f006c65 	svccs	0x00006c65
    19ec:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	verify_fds (fd, "tcv22");
    19f0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    19f4:	2f6e6974 	svccs	0x006e6974
    19f8:	6b736544 	blvs	1cdaf10 <__ccfg+0x1cbaf68>
    19fc:	2f706f74 	svccs	0x00706f74
    1a00:	4f534c4f 	svcmi	0x00534c4f
}
    1a04:	2f54454e 	svccs	0x0054454e
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    1a08:	4f434950 	svcmi	0x00434950
    1a0c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
			return 0;
    1a10:	2f534f63 	svccs	0x00534f63
    1a14:	33314343 	teqcc	r1, #201326593	; 0xc000001
    1a18:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    1a1c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    1a20:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    1a24:	72642f45 	rsbvc	r2, r4, #276	; 0x114
    1a28:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
	if (dsp != TCV_DSP_PASS) {
    1a2c:	0062696c 	rsbeq	r6, r2, ip, ror #18
		if (ses == NONE)
    1a30:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
			syserror (EREQPAR, "tcv26");
    1a34:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
		verify_fds (ses, "tcv27");
    1a38:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1a3c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    1a40:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1a44:	61652d65 	cmnvs	r5, r5, ror #26
    1a48:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
		if ((p = apb (size)) != NULL) {
    1a4c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    1a50:	636e692f 	cmnvs	lr, #770048	; 0xbc000
		return NULL;
    1a54:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
			p->attributes = descriptors [ses] -> attpattern;
    1a58:	6f682f00 	svcvs	0x00682f00
			dispose (p, dsp);
    1a5c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 18b0 <tcv_rnp+0x54>
			p->attributes = descriptors [ses] -> attpattern;
    1a60:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
			p->attributes.b.outgoing = 0;
    1a64:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
			dispose (p, dsp);
    1a68:	6f746b73 	svcvs	0x00746b73
			return (address)(p + 1);
    1a6c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1a70:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
	if ((p = apb (size)) != NULL)
    1a74:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1a78:	2f534f43 	svccs	0x00534f43
		return (address)(p + 1);
    1a7c:	4f636950 	svcmi	0x00636950
    1a80:	43432f53 	movtmi	r2, #16211	; 0x3f53
    1a84:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    1a88:	6f682f00 	svcvs	0x00682f00
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a8c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 18e0 <tcv_wnps+0x4>
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1a90:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a94:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1a98:	6f746b73 	svcvs	0x00746b73
		syserror (EREQPAR, "tcv28");
    1a9c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
		syserror (EMALLOC, "tcv29");
    1aa0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
	physical [phy] = ps;
    1aa4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
	physinfo [phy] = info;
    1aa8:	2f534f43 	svccs	0x00534f43
    1aac:	4f636950 	svcmi	0x00636950
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1ab0:	6b000053 	blvs	1c04 <tcvphy_end+0x18>
    1ab4:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    1ab8:	00632e6c 	rsbeq	r2, r3, ip, ror #28
		syserror (EMALLOC, "tcv29");
    1abc:	75000001 	strvc	r0, [r0, #-1]
    1ac0:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
	q_init (q);
    1ac4:	00020068 	andeq	r0, r2, r8, rrx
}
    1ac8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    1acc:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    1ad0:	00030068 	andeq	r0, r3, r8, rrx
    1ad4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    1ad8:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1adc:	00030068 	andeq	r0, r3, r8, rrx
	verify_fph (phy, "tcv30");
    1ae0:	63726100 	cmnvs	r2, #0, 2
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ae4:	00682e68 	rsbeq	r2, r8, r8, ror #28
    1ae8:	6d000004 	stcvs	0, cr0, [r0, #-16]
	verify_fph (phy, "tcv30");
    1aec:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    1af0:	00040068 	andeq	r0, r4, r8, rrx
    1af4:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1af8:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1afc:	00682e73 	rsbeq	r2, r8, r3, ror lr
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1b00:	62000004 	andvs	r0, r0, #4
    1b04:	6f747475 	svcvs	0x00747475
		if (plugins [plg] == NULL)
    1b08:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    1b0c:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1b10:	00000400 	andeq	r0, r0, r0, lsl #8
}
    1b14:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    1b18:	00682e6f 	rsbeq	r2, r8, pc, ror #28
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1b1c:	6b000005 	blvs	1b38 <tcvphy_rcv+0x5c>
    1b20:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    1b24:	00682e6c 	rsbeq	r2, r8, ip, ror #28
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1b28:	3c000001 	stccc	0, cr0, [r0], {1}
    1b2c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    1b30:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    1b34:	0000003e 	andeq	r0, r0, lr, lsr r0
    1b38:	26050000 	strcs	r0, [r5], -r0
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1b3c:	d4020500 	strle	r0, [r2], #-1280	; 0xfffffb00
	len -= (ap.head + ap.tail);
    1b40:	0300000e 	movweq	r0, #14
    1b44:	050103c3 	streq	r0, [r1, #-963]	; 0xfffffc3d
    1b48:	13131602 	tstne	r3, #2097152	; 0x200000
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1b4c:	06260514 			; <UNDEFINED> instruction: 0x06260514
    1b50:	05017803 	streq	r7, [r1, #-2051]	; 0xfffff7fd
    1b54:	20090302 	andcs	r0, r9, r2, lsl #6
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1b58:	051f0705 	ldreq	r0, [pc, #-1797]	; 145b <__pi_fork+0x17>
    1b5c:	20210602 	eorcs	r0, r1, r2, lsl #12
    1b60:	21061305 	tstcs	r6, r5, lsl #6
	return 1;
    1b64:	053c0a05 	ldreq	r0, [ip, #-2565]!	; 0xfffff5fb
    1b68:	08052013 	stmdaeq	r5, {r0, r1, r4, sp}
    1b6c:	060f053e 			; <UNDEFINED> instruction: 0x060f053e
    1b70:	0603052c 	streq	r0, [r3], -ip, lsr #10
    1b74:	06040501 	streq	r0, [r4], -r1, lsl #10
	verify_fph (phy, "tcv32");
    1b78:	0616052f 	ldreq	r0, [r6], -pc, lsr #10
    1b7c:	3c070501 	cfstr32cc	mvfx0, [r7], {1}
    1b80:	31060505 	tstcc	r6, r5, lsl #10
    1b84:	0302054b 	movweq	r0, #9547	; 0x254b
    1b88:	0105017a 	tsteq	r5, sl, ror r1
    1b8c:	2e0a0306 	cdpcs	3, 0, cr0, cr10, cr6, {0}
	oq = oqueues [phy];
    1b90:	01000302 	tsteq	r0, r2, lsl #6
	b = q_first (oq);
    1b94:	001f0501 	andseq	r0, pc, r1, lsl #10
	if (q_end (b, oq)) {
    1b98:	0f100205 	svceq	0x00100205
	*len = b->length;
    1b9c:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
	deq (b);	// Dequeue the packet ...
    1ba0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
}
    1ba4:	14010d03 	strne	r0, [r1], #-3331	; 0xfffff2fd
		return NULL;
    1ba8:	060d0513 			; <UNDEFINED> instruction: 0x060d0513
    1bac:	031f0501 	tsteq	pc, #4194304	; 0x400000
    1bb0:	0d052070 	stceq	0, cr2, [r5, #-448]	; 0xfffffe40
    1bb4:	052e1003 	streq	r1, [lr, #-3]!
	verify_fph (phy, "tcv33");
    1bb8:	0520061f 	streq	r0, [r0, #-1567]!	; 0xfffff9e1
    1bbc:	06010602 	streq	r0, [r1], -r2, lsl #12
    1bc0:	13201103 			; <UNDEFINED> instruction: 0x13201103
    1bc4:	01060d05 	tsteq	r6, r5, lsl #26
    1bc8:	051f0505 	ldreq	r0, [pc, #-1285]	; 16cb <dispose+0x4f>
    1bcc:	0521061f 	streq	r0, [r1, #-1567]!	; 0xfffff9e1
	oq = oqueues [phy];
    1bd0:	06010602 	streq	r0, [r1], -r2, lsl #12
	b = q_first (oq);
    1bd4:	0f052125 	svceq	0x00052125
		return NULL;
    1bd8:	02051506 	andeq	r1, r5, #25165824	; 0x1800000
	return (address)(b + 1);
    1bdc:	0523061d 	streq	r0, [r3, #-1565]!	; 0xfffff9e3
}
    1be0:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    1be4:	03052401 	movweq	r2, #21505	; 0x5401
    1be8:	20620306 	rsbcs	r0, r2, r6, lsl #6
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1bec:	01061e05 	tsteq	r6, r5, lsl #28
	verify_plg (b, tcv_xmt, "tcv34");
    1bf0:	05580605 	ldrbeq	r0, [r8, #-1541]	; 0xfffff9fb
	hblock_t *b = header (pkt);
    1bf4:	21300604 	teqcs	r0, r4, lsl #12
	verify_plg (b, tcv_xmt, "tcv34");
    1bf8:	01061305 	tsteq	r6, r5, lsl #6
    1bfc:	91060405 	tstls	r6, r5, lsl #8
    1c00:	050d2e05 	streq	r2, [sp, #-3589]	; 0xfffff1fb
    1c04:	05010636 	streq	r0, [r1, #-1590]	; 0xfffff9ca
    1c08:	0534060a 	ldreq	r0, [r4, #-1546]!	; 0xfffff9f6
    1c0c:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
    1c10:	0405580d 	streq	r5, [r5], #-2061	; 0xfffff7f3
	dispose (b, plugins [b->attributes.b.plugin] ->
    1c14:	052f2206 	streq	r2, [pc, #-518]!	; 1a16 <tcv_control+0x52>
}
    1c18:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
	dispose (b, plugins [b->attributes.b.plugin] ->
    1c1c:	0b030604 	bleq	c3434 <__ccfg+0xa348c>
    1c20:	060705ac 	streq	r0, [r7], -ip, lsr #11
    1c24:	062e0501 	strteq	r0, [lr], -r1, lsl #10
}
    1c28:	06090564 	streq	r0, [r9], -r4, ror #10
    while(1)
    1c2c:	00070213 	andeq	r0, r7, r3, lsl r2
{
    1c30:	1c050101 	stfnes	f0, [r5], {1}
    SetupTrimDevice();
    1c34:	90020500 	andls	r0, r2, r0, lsl #10
    pui32Src = &_etext;
    1c38:	0300000f 	movweq	r0, #15
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1c3c:	050108c6 	streq	r0, [r1, #-2246]	; 0xfffff73a
    __asm("    ldr     r0, =_bss\n"
    1c40:	02041402 	andeq	r1, r4, #33554432	; 0x2000000
    1c44:	03060d05 	movweq	r0, #27909	; 0x6d05
    1c48:	04017cdf 	streq	r7, [r1], #-3295	; 0xfffff321
    1c4c:	060f0501 	streq	r0, [pc], -r1, lsl #10
    1c50:	2003a103 	andcs	sl, r3, r3, lsl #2
   main();
    1c54:	04010205 	streq	r0, [r1], #-517	; 0xfffffdfb
    FaultISR();
    1c58:	03240502 			; <UNDEFINED> instruction: 0x03240502
        *pui32Dest++ = *pui32Src++;
    1c5c:	05017cda 	streq	r7, [r1, #-3290]	; 0xfffff326
    1c60:	0d051705 	stceq	7, cr1, [r5, #-20]	; 0xffffffec
    1c64:	01040106 	tsteq	r4, r6, lsl #2
    1c68:	a1030205 	tstge	r3, r5, lsl #4
    1c6c:	2f062003 	svccs	0x00062003
    1c70:	3d060105 	stfccs	f0, [r6, #-20]	; 0xffffffec
    1c74:	01000502 	tsteq	r0, r2, lsl #10
    1c78:	00270501 	eoreq	r0, r7, r1, lsl #10
static byte get_byte () {
    1c7c:	00000205 	andeq	r0, r0, r5, lsl #4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c80:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    1c84:	02050100 	andeq	r0, r5, #0, 2
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c88:	27051414 	smladcs	r5, r4, r4, r1
    1c8c:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
		if (ee_inp)
    1c90:	1c270524 	cfstr32ne	mvfx0, [r7], #-144	; 0xffffff70
			b |= 1;
    1c94:	06240205 	strteq	r0, [r4], -r5, lsl #4
    1c98:	03052320 	movweq	r2, #21280	; 0x5320
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c9c:	06060548 	streq	r0, [r6], -r8, asr #10
	for (b = 0, i = 0; i < 8; i++) {
    1ca0:	06020501 	streq	r0, [r2], -r1, lsl #10
}
    1ca4:	0601052d 	streq	r0, [r1], -sp, lsr #10
    1ca8:	00050232 	andeq	r0, r5, r2, lsr r2
    1cac:	1b050101 	blne	1420b8 <__ccfg+0x122110>
static void put_byte (byte b) {
    1cb0:	a8020500 	stmdage	r2, {r8, sl}
    1cb4:	0300000f 	movweq	r0, #15
    1cb8:	050100fa 	streq	r0, [r1, #-250]	; 0xffffff06
    1cbc:	1b051302 	blne	1468cc <__ccfg+0x126924>
		if (b & 0x80)
    1cc0:	02051f06 	andeq	r1, r5, #6, 30
    1cc4:	00060221 	andeq	r0, r6, r1, lsr #4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cc8:	1e050101 	adfnes	f0, f5, f1
	for (i = 0; i < 8; i++) {
    1ccc:	b8020500 	stmdalt	r2, {r8, sl}
		b <<= 1;
    1cd0:	0300000f 	movweq	r0, #15
	for (i = 0; i < 8; i++) {
    1cd4:	050100fe 	streq	r0, [r1, #-254]	; 0xffffff02
}
    1cd8:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    1cdc:	1e05010e 	adfnes	f0, f5, #0.5
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1ce0:	207a0306 	rsbscs	r0, sl, r6, lsl #6
    1ce4:	05340905 	ldreq	r0, [r4, #-2309]!	; 0xfffff6fb
	put_byte (cmd);
    1ce8:	207a031e 	rsbscs	r0, sl, lr, lsl r3
    1cec:	27060305 	strcs	r0, [r6, -r5, lsl #6]
}
    1cf0:	01061205 	tsteq	r6, r5, lsl #4
    1cf4:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
static void wwait (word st, word del) {
    1cf8:	051f061f 	ldreq	r0, [pc, #-1567]	; 16e1 <dispose+0x65>
    1cfc:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    1d00:	0520060e 	streq	r0, [r0, #-1550]!	; 0xfffff9f2
	while (dopen && (rdsr () & 1)) {
    1d04:	06010602 	streq	r0, [r1], -r2, lsl #12
    1d08:	13030532 	movwne	r0, #13618	; 0x3532
    1d0c:	153b0205 	ldrne	r0, [fp, #-517]!	; 0xfffffdfb
    1d10:	01061105 	tsteq	r6, r5, lsl #2
	put_byte (CMD_RDSR);
    1d14:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
	r = get_byte ();
    1d18:	01010006 	tsteq	r1, r6
    1d1c:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
	while (dopen && (rdsr () & 1)) {
    1d20:	00000002 	andeq	r0, r0, r2
}
    1d24:	018e0300 	orreq	r0, lr, r0, lsl #6
		if (st == WNONE)
    1d28:	16020501 	strne	r0, [r2], -r1, lsl #10
    1d2c:	010e0514 	tsteq	lr, r4, lsl r5
			mdelay (1);
    1d30:	20060905 	andcs	r0, r6, r5, lsl #18
    1d34:	7a032105 	bvc	ca150 <__ccfg+0xaa1a8>
			delay (del, st);
    1d38:	0603052e 	streq	r0, [r3], -lr, lsr #10
    1d3c:	06120527 	ldreq	r0, [r2], -r7, lsr #10
			release;
    1d40:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    1d44:	21060405 	tstcs	r6, r5, lsl #8
    1d48:	054b0305 	strbeq	r0, [fp, #-773]	; 0xfffffcfb
static void ready () {
    1d4c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
	if (dopen) {
    1d50:	052b061f 	streq	r0, [fp, #-1567]!	; 0xfffff9e1
		wwait (WNONE, 1);
    1d54:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    1d58:	0520060e 	streq	r0, [r0, #-1550]!	; 0xfffff9f2
    1d5c:	06010602 	streq	r0, [r1], -r2, lsl #12
	dstat = 0;
    1d60:	580b0534 	stmdapl	fp, {r2, r4, r5, r8, sl}
}
    1d64:	05130205 	ldreq	r0, [r3, #-517]	; 0xfffffdfb
    1d68:	03050108 	movweq	r0, #20744	; 0x5108
    1d6c:	061f052f 	ldreq	r0, [pc], -pc, lsr #10
	udelay (1);
    1d70:	20210501 	eorcs	r0, r1, r1, lsl #10
    1d74:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
	udelay (1);
    1d78:	052f0603 	streq	r0, [pc, #-1539]!	; 177d <tcv_open+0x5>
		dopen = DOPEN_TEMP;
    1d7c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1d80:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
    1d84:	01052e0b 	tsteq	r5, fp, lsl #28
    1d88:	07021306 	streq	r1, [r2, -r6, lsl #6]
static void cclose () {
    1d8c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	if (dopen == DOPEN_TEMP) {
    1d90:	0205002a 	andeq	r0, r5, #42	; 0x2a
    1d94:	00000fe4 	andeq	r0, r0, r4, ror #31
		wwait (WNONE, 1);
    1d98:	0101a603 	tsteq	r1, r3, lsl #12
    1d9c:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
	cmd_0 (CMD_DP);
    1da0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    1da4:	02210602 	eoreq	r0, r1, #2097152	; 0x200000
		dopen = 0;
    1da8:	01010002 	tsteq	r1, r2
}
    1dac:	05002e05 	streq	r2, [r0, #-3589]	; 0xfffff1fb
word ee_open () {
    1db0:	000fec02 	andeq	lr, pc, r2, lsl #24
	ready ();
    1db4:	01ae0300 			; <UNDEFINED> instruction: 0x01ae0300
	dopen = DOPEN_PERM;
    1db8:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    1dbc:	0e030602 	cfmadd32eq	mvax0, mvfx0, mvfx3, mvfx2
}
    1dc0:	10031320 	andne	r1, r3, r0, lsr #6
	if (dopen) {
    1dc4:	06060501 	streq	r0, [r6], -r1, lsl #10
    1dc8:	3c050501 	cfstr32cc	mvfx0, [r5], {1}
		dopen = DOPEN_TEMP;
    1dcc:	03060205 	movweq	r0, #25093	; 0x6205
		cclose ();
    1dd0:	06052e09 	streq	r2, [r5], -r9, lsl #28
}
    1dd4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
int ser_in (word st, char *buf, int len) {
    1dd8:	3c060558 	cfstr32cc	mvfx0, [r6], {88}	; 0x58
    1ddc:	08060305 	stmdaeq	r6, {r0, r2, r8, r9}
	if (len == 0)
    1de0:	02052e27 	andeq	r2, r5, #624	; 0x270
	if (__inpline == NULL) {
    1de4:	05202903 	streq	r2, [r0, #-2307]!	; 0xfffff6fd
		if ((prcs = running (__inserial)) == 0) {
    1de8:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
    1dec:	04052e0d 	streq	r2, [r5], #-3597	; 0xfffff1f3
			prcs = runthread (__inserial);
    1df0:	2e590306 	cdpcs	3, 5, cr0, cr9, cr6, {0}
    1df4:	01060905 	tsteq	r6, r5, lsl #18
			if (prcs == 0) {
    1df8:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
				npwait (st);
    1dfc:	05310604 	ldreq	r0, [r1, #-1540]!	; 0xfffff9fc
		release;
    1e00:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
		join (prcs, st);
    1e04:	08053c07 	stmdaeq	r5, {r0, r1, r2, sl, fp, ip, sp}
    1e08:	0605052e 	streq	r0, [r5], -lr, lsr #10
	if (*__inpline == NULL) // bin cmd
    1e0c:	03053e08 	movweq	r3, #24072	; 0x5e08
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1e10:	053c7903 	ldreq	r7, [ip, #-2307]!	; 0xfffff6fd
	if (prcs >= len)
    1e14:	2e0b0305 	cdpcs	3, 0, cr0, cr11, cr5, {0}
		prcs = len-1;
    1e18:	01061205 	tsteq	r6, r5, lsl #4
	memcpy (buf, __inpline, prcs);
    1e1c:	21060505 	tstcs	r6, r5, lsl #10
    1e20:	11060705 	tstne	r6, r5, lsl #14
    1e24:	03060305 	movweq	r0, #25349	; 0x6305
	ufree (__inpline);
    1e28:	07056617 	smladeq	r5, r7, r6, r6
	__inpline = NULL;
    1e2c:	06050106 	streq	r0, [r5], -r6, lsl #2
	if (*buf) // if it's NULL, it's a bin cmd
    1e30:	0602052e 	streq	r0, [r2], -lr, lsr #10
		buf [prcs] = '\0';
    1e34:	053c1603 	ldreq	r1, [ip, #-1539]!	; 0xfffff9fd
}
    1e38:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
		prcs = strlen (__inpline);
    1e3c:	05400602 	strbeq	r0, [r0, #-1538]	; 0xfffff9fe
    1e40:	0d030601 	stceq	6, cr0, [r3, #-4]
		return 0;
    1e44:	03020501 	movweq	r0, #9473	; 0x2501
    1e48:	01052e73 	tsteq	r5, r3, ror lr
    1e4c:	022e0d03 	eoreq	r0, lr, #3, 26	; 0xc0
int ser_outf (word st, const char *m, ...) {
    1e50:	0101000a 	tsteq	r1, sl
    1e54:	05001b05 	streq	r1, [r0, #-2821]	; 0xfffff4fb
	if ((prcs = running (__outserial)) != 0) {
    1e58:	0010b802 	andseq	fp, r0, r2, lsl #16
    1e5c:	02d20300 	sbcseq	r0, r2, #0, 6
		join (prcs, st);
    1e60:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    1e64:	10061b05 	andne	r1, r6, r5, lsl #22
		release;
    1e68:	06220205 	strteq	r0, [r2], -r5, lsl #4
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1e6c:	0005024b 	andeq	r0, r5, fp, asr #4
    1e70:	2a050101 	bcs	14227c <__ccfg+0x1222d4>
    1e74:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
		umwait (st);
    1e78:	03000010 	movweq	r0, #16
    1e7c:	050102d8 	streq	r0, [r1, #-728]	; 0xfffffd28
	if (runstrand (__outserial, buf) == 0) {
    1e80:	2a051602 	bcs	147690 <__ccfg+0x1276e8>
    1e84:	0b050e06 	bleq	1456a4 <__ccfg+0x1256fc>
    1e88:	3e050524 	cfsh32cc	mvfx0, mvfx5, #20
		ufree (buf);
    1e8c:	4a060205 	bmi	1826a8 <__ccfg+0x162700>
		npwait (st);
    1e90:	01060505 	tsteq	r6, r5, lsl #10
}
    1e94:	21060305 	tstcs	r6, r5, lsl #6
    1e98:	014c0205 	cmpeq	ip, r5, lsl #4
    1e9c:	061f3d06 	ldreq	r3, [pc], -r6, lsl #26
    1ea0:	05132020 	ldreq	r2, [r3, #-32]	; 0xffffffe0
int ser_inf (word st, const char *fmt, ...) {
    1ea4:	02210601 	eoreq	r0, r1, #1048576	; 0x100000
    1ea8:	01010006 	tsteq	r1, r6
	if (fmt == NULL)
    1eac:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
	if (__inpline == NULL) {
    1eb0:	00110002 	andseq	r0, r1, r2
		if ((prcs = running (__inserial)) == 0) {
    1eb4:	02e50300 	rsceq	r0, r5, #0, 6
    1eb8:	16020501 	strne	r0, [r2], -r1, lsl #10
			prcs = runthread (__inserial);
    1ebc:	21051413 	tstcs	r5, r3, lsl r4
    1ec0:	01790306 	cmneq	r9, r6, lsl #6
			if (prcs == 0) {
    1ec4:	06270205 	strteq	r0, [r7], -r5, lsl #4
				npwait (st);
    1ec8:	0613052e 	ldreq	r0, [r3], -lr, lsr #10
		release;
    1ecc:	200a0521 	andcs	r0, sl, r1, lsr #10
		join (prcs, st);
    1ed0:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
    1ed4:	054a060f 	strbeq	r0, [sl, #-1551]	; 0xfffff9f1
	va_start (ap, fmt);
    1ed8:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
	prcs = vscan (__inpline, fmt, ap);
    1edc:	052f0604 	streq	r0, [pc, #-1540]!	; 18e0 <tcv_wnps+0x4>
    1ee0:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
	ufree (__inpline);
    1ee4:	4b5a0605 	blmi	1683700 <__ccfg+0x1663758>
	__inpline = NULL;
    1ee8:	050d0205 	streq	r0, [sp, #-517]	; 0xfffffdfb
}
    1eec:	09030601 	stmdbeq	r3, {r0, r9, sl}
    1ef0:	0003022e 	andeq	r0, r3, lr, lsr #4
    1ef4:	2d050101 	stfcss	f0, [r5, #-4]
		return 0;
    1ef8:	00020500 	andeq	r0, r2, r0, lsl #10
    1efc:	03000000 	movweq	r0, #0
    1f00:	050102f7 	streq	r0, [r1, #-759]	; 0xfffffd09
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    1f04:	14131602 	ldrne	r1, [r3], #-1538	; 0xfffff9fe
    1f08:	03062d05 	movweq	r2, #27909	; 0x6d05
    1f0c:	05200179 	streq	r0, [r0, #-377]!	; 0xfffffe87
	RF_cmdFs.frequency = 
    1f10:	30062702 	andcc	r2, r6, r2, lsl #14
}
    1f14:	01060905 	tsteq	r6, r5, lsl #18
    1f18:	2e060e05 	cdpcs	14, 0, cr0, cr6, cr5, {0}
    1f1c:	01061205 	tsteq	r6, r5, lsl #4
    1f20:	053c0205 	ldreq	r0, [ip, #-517]!	; 0xfffffdfb
static int option (int opt, address val) {
    1f24:	03053301 	movweq	r3, #21249	; 0x5301
    1f28:	06051c06 	streq	r1, [r5], -r6, lsl #24
    1f2c:	20050106 	andcs	r0, r5, r6, lsl #2
    1f30:	2106051f 	tstcs	r6, pc, lsl r5
    1f34:	21060405 	tstcs	r6, r5, lsl #8
    1f38:	02641f05 	rsbeq	r1, r4, #5, 30
    1f3c:	01010001 	tsteq	r1, r1
    1f40:	05002605 	streq	r2, [r0, #-1541]	; 0xfffff9fb
    1f44:	00113402 	andseq	r3, r1, r2, lsl #8
    1f48:	03870300 	orreq	r0, r7, #0, 6
    1f4c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    1f50:	06260514 			; <UNDEFINED> instruction: 0x06260514
    1f54:	0205200e 	andeq	r2, r5, #14
			goto RVal;
    1f58:	052e0624 	streq	r0, [lr, #-1572]!	; 0xfffff9dc
			_BIS (dstate, DSTATE_RXON);
    1f5c:	05280609 	streq	r0, [r8, #-1545]!	; 0xfffff9f7
    1f60:	79030603 	stmdbvc	r3, {r0, r1, r9, sl}
	int ret = 0;
    1f64:	0606052e 	streq	r0, [r6], -lr, lsr #10
			p_trigger (drvprcs, qevent);
    1f68:	06040501 	streq	r0, [r4], -r1, lsl #10
    1f6c:	01053d30 	tsteq	r5, r0, lsr sp
    1f70:	02051706 	andeq	r1, r5, #1572864	; 0x180000
    1f74:	2e770306 	cdpcs	3, 7, cr0, cr7, cr6, {0}
    1f78:	01000402 	tsteq	r0, r2, lsl #8
    1f7c:	00210501 	eoreq	r0, r1, r1, lsl #10
    1f80:	11580205 	cmpne	r8, r5, lsl #4
    1f84:	99030000 	stmdbls	r3, {}	; <UNPREDICTABLE>
    1f88:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    1f8c:	06210516 			; <UNDEFINED> instruction: 0x06210516
}
    1f90:	0205200e 	andeq	r2, r5, #14
			_BIC (dstate, DSTATE_RXON);
    1f94:	3e850624 	cdpcc	6, 8, cr0, cr5, cr4, {1}
    1f98:	01061e05 	tsteq	r6, r5, lsl #28
			statid = (val == NULL) ? 0 : *val;
    1f9c:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    1fa0:	1305201e 	movwne	r2, #20510	; 0x501e
	int ret = 0;
    1fa4:	06020520 	streq	r0, [r2], -r0, lsr #10
			ret = (int) statid;
    1fa8:	06010522 	streq	r0, [r1], -r2, lsr #10
	if (val != NULL)
    1fac:	00050259 	andeq	r0, r5, r9, asr r2
		*val = ret;
    1fb0:	14050101 	strne	r0, [r5], #-257	; 0xfffffeff
			ret = rbuffl + 2;
    1fb4:	00020500 	andeq	r0, r2, r0, lsl #10
    1fb8:	03000000 	movweq	r0, #0
			if (val != NULL) {
    1fbc:	050103a7 	streq	r0, [r1, #-935]	; 0xfffffc59
				memcpy (val, &rxstat,
    1fc0:	01051602 	tsteq	r5, r2, lsl #12
    1fc4:	04026706 	streq	r6, [r2], #-1798	; 0xfffff8fa
				memset (&rxstat, 0, 
    1fc8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1fcc:	02050018 	andeq	r0, r5, #24
			if (val == NULL)
    1fd0:	00000000 	andeq	r0, r0, r0
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    1fd4:	0103b203 	tsteq	r3, r3, lsl #4
    1fd8:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
				utimer_set (bckf_timer, *val);
    1fdc:	0e061805 	cdpeq	8, 0, cr1, cr6, cr5, {0}
    1fe0:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    1fe4:	05055a06 	streq	r5, [r5, #-2566]	; 0xfffff5fa
			for (ret = 0; ret < 8; ret++)
    1fe8:	03050106 	movweq	r0, #20742	; 0x5106
				if (RF_cmdPropRadioDivSetup.txPower
    1fec:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
					== patable [ret])
    1ff0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
				if (RF_cmdPropRadioDivSetup.txPower
    1ff4:	12053506 	andne	r3, r5, #25165824	; 0x1800000
			for (ret = 0; ret < 8; ret++)
    1ff8:	01050106 	tsteq	r5, r6, lsl #2
    1ffc:	06030559 			; <UNDEFINED> instruction: 0x06030559
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2000:	3d207a03 	vstmdbcc	r0!, {s14-s16}
    2004:	01060605 	tsteq	r6, r5, lsl #12
    2008:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    200c:	08023d0b 	stmdaeq	r2, {r0, r1, r3, r8, sl, fp, ip, sp}
    2010:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			_BIS (dstate, DSTATE_IRST);
    2014:	0205001d 	andeq	r0, r5, #29
    2018:	00000000 	andeq	r0, r0, r0
    201c:	01049203 	tsteq	r4, r3, lsl #4
			ret = (int) channel;
    2020:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
			goto RVal;
    2024:	0e061d05 	cdpeq	13, 0, cr1, cr6, cr5, {0}
				(*val > 7) ? 7 : *val;
    2028:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
    202c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2030:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2034:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
			plugch ();
    2038:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
			_BIS (dstate, DSTATE_IRST);
    203c:	022b0603 	eoreq	r0, fp, #3145728	; 0x300000
    2040:	01010006 	tsteq	r1, r6
			ret = (int) vrate;
    2044:	05001d05 	streq	r1, [r0, #-3333]	; 0xfffff2fb
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2048:	00119002 	andseq	r9, r1, r2
    204c:	049e0300 	ldreq	r0, [lr], #768	; 0x300
    2050:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2054:	06050514 			; <UNDEFINED> instruction: 0x06050514
    2058:	06030501 	streq	r0, [r3], -r1, lsl #10
    205c:	060a052f 	streq	r0, [sl], -pc, lsr #10
    2060:	06020501 	streq	r0, [r2], -r1, lsl #10
    2064:	01052e3e 	tsteq	r5, lr, lsr lr
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2068:	03052506 	movweq	r2, #21766	; 0x5506
    206c:	06051c06 	streq	r1, [r5], -r6, lsl #24
    2070:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2074:	06023b06 	streq	r3, [r2], -r6, lsl #22
			syserror (EREQPAR, "cc13 op");
    2078:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    207c:	0205001d 	andeq	r0, r5, #29
    2080:	00000000 	andeq	r0, r0, r0
    2084:	0104ac03 	tsteq	r4, r3, lsl #24
    2088:	13140205 	tstne	r4, #1342177280	; 0x50000000
    208c:	1d051314 	stcne	3, cr1, [r5, #-80]	; 0xffffffb0
    2090:	017a0306 	cmneq	sl, r6, lsl #6
    2094:	05250405 	streq	r0, [r5, #-1029]!	; 0xfffffbfb
    2098:	2e062102 	adfcss	f2, f6, f2
    209c:	24060105 	strcs	r0, [r6], #-261	; 0xfffffefb
    20a0:	1d060305 	stcne	3, cr0, [r6, #-20]	; 0xffffffec
    20a4:	01060605 	tsteq	r6, r5, lsl #12
    20a8:	051f0205 	ldreq	r0, [pc, #-517]	; 1eab <ser_inf+0x7>
    20ac:	04052106 	streq	r2, [r5], #-262	; 0xfffffefa
    20b0:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
static void issue_cmd (lword cmd) {
    20b4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    20b8:	04023a06 	streq	r3, [r2], #-2566	; 0xfffff5fa
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20bc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    20c0:	02050021 	andeq	r0, r5, #33	; 0x21
    20c4:	000011b4 			; <UNDEFINED> instruction: 0x000011b4
		if (res != 0x86)
    20c8:	0104b803 	tsteq	r4, r3, lsl #16
			syserror (EHARDWARE, "hang ic0");
    20cc:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    20d0:	0e062105 	adfeqs	f2, f6, f5
		if (cnt-- == 0) {
    20d4:	05240905 	streq	r0, [r4, #-2309]!	; 0xfffff6fb
			diag ("HUP %lx %lx", cmd, res);
    20d8:	0520060e 	streq	r0, [r0, #-1550]!	; 0xfffff9f2
    20dc:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
			syserror (EHARDWARE, "hang ic0");
    20e0:	22053101 	andcs	r3, r5, #1073741824	; 0x40000000
		udelay (1);
    20e4:	1e051d06 	cdpne	13, 0, cr1, cr5, cr6, {0}
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20e8:	061f0501 	ldreq	r0, [pc], -r1, lsl #10
}
    20ec:	00020201 	andeq	r0, r2, r1, lsl #4
    20f0:	2b050101 	blcs	1424fc <__ccfg+0x122554>
    20f4:	c2020500 	andgt	r0, r2, #0, 10
    20f8:	03000011 	movweq	r0, #17
static void rx_de () {
    20fc:	050104c1 	streq	r0, [r1, #-1217]	; 0xfffffb3f
	if ((dstate & DSTATE_RXAC) == 0)
    2100:	20051402 	andcs	r1, r5, r2, lsl #8
    2104:	01080520 	tsteq	r8, r0, lsr #10
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2108:	01061a05 	tsteq	r6, r5, lsl #20
	_BIC (dstate, DSTATE_RXAC);
    210c:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
    2110:	01052e08 	tsteq	r5, r8, lsl #28
}
    2114:	0001022f 	andeq	r0, r1, pc, lsr #4
    2118:	33050101 	movwcc	r0, #20737	; 0x5101
    211c:	00020500 	andeq	r0, r2, r0, lsl #10
static void rf_off () {
    2120:	03000000 	movweq	r0, #0
	if ((dstate & DSTATE_RFON) == 0)
    2124:	050104c6 	streq	r0, [r1, #-1222]	; 0xfffffb3a
    2128:	08051402 	stmdaeq	r5, {r1, sl, ip}
	IntDisable (INT_RFC_CPE_0);
    212c:	3002052e 	andcc	r0, r2, lr, lsr #10
    2130:	01060505 	tsteq	r6, r5, lsl #10
    2134:	052f0105 	streq	r0, [pc, #-261]!	; 2037 <option+0x113>
	RFCAdi3VcoLdoVoltageMode (false);
    2138:	0d051d11 	stceq	13, cr1, [r5, #-68]	; 0xffffffbc
	RFCSynthPowerDown ();
    213c:	0603052e 	streq	r0, [r3], -lr, lsr #10
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2140:	0608052f 	streq	r0, [r8], -pc, lsr #10
    2144:	00030201 	andeq	r0, r3, r1, lsl #4
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2148:	2b050101 	blcs	142554 <__ccfg+0x1225ac>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    214c:	00020500 	andeq	r0, r2, r0, lsl #10
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2150:	03000000 	movweq	r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2154:	050104cd 	streq	r0, [r1, #-1229]	; 0xfffffb33
    2158:	08051402 	stmdaeq	r5, {r1, sl, ip}
    215c:	4b02052e 	blmi	8361c <__ccfg+0x63674>
	_BIC (dstate, DSTATE_RFON);
    2160:	01000202 	tsteq	r0, r2, lsl #4
    2164:	00330501 	eorseq	r0, r3, r1, lsl #10
}
    2168:	00000205 	andeq	r0, r0, r5, lsl #4
    216c:	d3030000 	movwle	r0, #12288	; 0x3000
    2170:	02050104 	andeq	r0, r5, #4, 2
    2174:	00030214 	andeq	r0, r3, r4, lsl r2
    2178:	37050101 	strcc	r0, [r5, -r1, lsl #2]
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    217c:	d2020500 	andle	r0, r2, #0, 10
    2180:	03000011 	movweq	r0, #17
    2184:	050104d8 	streq	r0, [r1, #-1240]	; 0xfffffb28
		if (cmd->status == tstat)
    2188:	08051402 	stmdaeq	r5, {r1, sl, ip}
		if (timeout-- == 0) {
    218c:	0601052e 	streq	r0, [r1], -lr, lsr #10
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2190:	06030530 			; <UNDEFINED> instruction: 0x06030530
    2194:	060d051f 			; <UNDEFINED> instruction: 0x060d051f
    2198:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
			syserror (EHARDWARE, "rt2");
    219c:	01000302 	tsteq	r0, r2, lsl #6
    21a0:	002e0501 	eoreq	r0, lr, r1, lsl #10
		udelay (1);
    21a4:	11e60205 	mvnne	r0, r5, lsl #4
		if (cmd->status == tstat)
    21a8:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
}
    21ac:	02050104 	andeq	r0, r5, #4, 2
    21b0:	20080514 	andcs	r0, r8, r4, lsl r5
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    21b4:	30060105 	andcc	r0, r6, r5, lsl #2
    21b8:	1f060305 	svcne	0x00060305
static void rf_on () {
    21bc:	01060b05 	tsteq	r6, r5, lsl #22
    21c0:	01000302 	tsteq	r0, r2, lsl #6
	OSCHF_TurnOnXosc();
    21c4:	002b0501 	eoreq	r0, fp, r1, lsl #10
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    21c8:	11f40205 	mvnsne	r0, r5, lsl #4
    21cc:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
    21d0:	02050104 	andeq	r0, r5, #4, 2
    21d4:	062b0514 			; <UNDEFINED> instruction: 0x062b0514
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21d8:	22050510 	andcs	r0, r5, #16, 10	; 0x4000000
    21dc:	21060305 	tstcs	r6, r5, lsl #6
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21e0:	02053106 	andeq	r3, r5, #-2147483647	; 0x80000001
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    21e4:	0c052d06 	stceq	13, cr2, [r5], {6}
	issue_cmd (
    21e8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    21ec:	06030520 	streq	r0, [r3], -r0, lsr #10
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    21f0:	3e02052f 	cfsh32cc	mvfx0, mvfx2, #31
    21f4:	01060e05 	tsteq	r6, r5, lsl #28
    21f8:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
   pPatchTab[80] = 0;
    21fc:	01010005 	tsteq	r1, r5
   } while (--nIterations);
    2200:	05004505 	streq	r4, [r0, #-1285]	; 0xfffffafb
   pPatchTab[53] = 2;
    2204:	00121802 	andseq	r1, r2, r2, lsl #16
    2208:	04f80300 	ldrbteq	r0, [r8], #768	; 0x300
   pPatchTab[55] = 3;
    220c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
   pPatchTab[110] = 4;
    2210:	06450514 			; <UNDEFINED> instruction: 0x06450514
   pPatchTab[107] = 5;
    2214:	05052e0e 	streq	r2, [r5, #-3598]	; 0xfffff1f2
   pPatchTab[65] = 6;
    2218:	2022055c 	eorcs	r0, r2, ip, asr r5
    221c:	054a1905 	strbeq	r1, [sl, #-2309]	; 0xfffff6fb
   pPatchTab[57] = 1;
    2220:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
   pIrqPatch[1] = _IRQ_PATCH_0;
    2224:	05054c02 	streq	r4, [r5, #-3074]	; 0xfffff3fe
   const uint32_t *pS = patchGenfskRfe;
    2228:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
      t2 = *pS++;
    222c:	0f054006 	svceq	0x00054006
      t4 = *pS++;
    2230:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
      t6 = *pS++;
    2234:	05054c06 	streq	r4, [r5, #-3078]	; 0xfffff3fa
      t8 = *pS++;
    2238:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
      *pD++ = t1;
    223c:	05053106 	streq	r3, [r5, #-262]	; 0xfffffefa
      *pD++ = t2;
    2240:	03050106 	movweq	r0, #20742	; 0x5106
      *pD++ = t3;
    2244:	06054f06 	streq	r4, [r5], -r6, lsl #30
      *pD++ = t5;
    2248:	03050106 	movweq	r0, #20742	; 0x5106
      *pD++ = t7;
    224c:	05593006 	ldrbeq	r3, [r9, #-6]
   } while (--nIterations);
    2250:	010d0304 	tsteq	sp, r4, lsl #6
    2254:	76030205 	strvc	r0, [r3], -r5, lsl #4
      *pD++ = t8;
    2258:	0605052e 	streq	r0, [r5], -lr, lsr #10
   } while (--nIterations);
    225c:	06030501 	streq	r0, [r3], -r1, lsl #10
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2260:	06060535 			; <UNDEFINED> instruction: 0x06060535
   *pD++ = t2;
    2264:	06040501 	streq	r0, [r4], -r1, lsl #10
   *pD++ = t3;
    2268:	0b05594b 	bleq	15879c <__ccfg+0x1387f4>
   *pD++ = t4;
    226c:	03050106 	movweq	r0, #20742	; 0x5106
   *pD++ = t5;
    2270:	0a056906 	beq	15c690 <__ccfg+0x13c6e8>
    2274:	03050106 	movweq	r0, #20742	; 0x5106
	RFCAdi3VcoLdoVoltageMode (true);
    2278:	0a055906 	beq	158698 <__ccfg+0x1386f0>
    227c:	01610306 	cmneq	r1, r6, lsl #6
       	RFCRfTrimSet (&rfTrim);
    2280:	29030105 	stmdbcs	r3, {r0, r2, r8}
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2284:	06020520 	streq	r0, [r2], -r0, lsr #10
    2288:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    228c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2290:	752f0603 	strvc	r0, [pc, #-1539]!	; 1c95 <get_byte+0x19>
	issue_cmd ((lword)&cmd_srt);
    2294:	01000502 	tsteq	r0, r2, lsl #10
    2298:	001a0501 	andseq	r0, sl, r1, lsl #10
	issue_cmd ((lword)&RF_cmdFs);
    229c:	12b40205 	adcsne	r0, r4, #1342177280	; 0x50000000
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    22a0:	ef030000 	svc	0x00030000
    22a4:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
    22a8:	01130317 	tsteq	r3, r7, lsl r3
	IntEnable (INT_RFC_CPE_0);
    22ac:	01061505 	tsteq	r6, r5, lsl #10
	_BIC (dstate, DSTATE_IRST);
    22b0:	68031a05 	stmdavs	r3, {r0, r2, r9, fp, ip}
    22b4:	03150520 	tsteq	r5, #32, 10	; 0x8000000
    22b8:	0c052018 	stceq	0, cr2, [r5], {24}
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22bc:	20050558 	andcs	r0, r5, r8, asr r5
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22c0:	31060305 	tstcc	r6, r5, lsl #6
	IntEnable (INT_RFC_CPE_0);
    22c4:	05520205 	ldrbeq	r0, [r2, #-517]	; 0xfffffdfb
    22c8:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
}
    22cc:	053e0602 	ldreq	r0, [lr, #-1538]!	; 0xfffff9fe
	IntEnable (INT_RFC_CPE_0);
    22d0:	05150617 	ldreq	r0, [r5, #-1559]	; 0xfffff9e9
    22d4:	16052b1d 			; <UNDEFINED> instruction: 0x16052b1d
    22d8:	06020520 	streq	r0, [r2], -r0, lsr #10
    22dc:	06170521 	ldreq	r0, [r7], -r1, lsr #10
    22e0:	06020514 			; <UNDEFINED> instruction: 0x06020514
    22e4:	061a0531 			; <UNDEFINED> instruction: 0x061a0531
    22e8:	2e0d0501 	cfsh32cs	mvfx0, mvfx13, #1
    22ec:	2c030105 	stfcss	f0, [r3], {5}
    22f0:	000d022e 	andeq	r0, sp, lr, lsr #4
    22f4:	1c050101 	stfnes	f0, [r5], {1}
    22f8:	04020500 	streq	r0, [r2], #-1280	; 0xfffffb00
    22fc:	03000013 	movweq	r0, #19
    2300:	050106fb 	streq	r0, [r1, #-1787]	; 0xfffff905
    2304:	010c0302 	tsteq	ip, r2, lsl #6
    2308:	03061c05 	movweq	r1, #27653	; 0x6c05
    230c:	05050174 	streq	r0, [r5, #-372]	; 0xfffffe8c
    2310:	05200c03 	streq	r0, [r0, #-3075]!	; 0xfffff3fd
    2314:	05250602 	streq	r0, [r5, #-1538]!	; 0xfffff9fe
    2318:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    231c:	03052e05 	movweq	r2, #24069	; 0x5e05
    2320:	054c2f06 	strbeq	r2, [ip, #-3846]	; 0xfffff0fa
    2324:	05160611 	ldreq	r0, [r6, #-1553]	; 0xfffff9ef
    2328:	11051c0f 	tstne	r5, pc, lsl #24
    232c:	1c0f0532 	cfstr32ne	mvfx0, [pc], {50}	; 0x32
    2330:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
static void rx_int_enable () {
    2334:	01061105 	tsteq	r6, r5, lsl #2
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2338:	30060205 	andcc	r0, r6, r5, lsl #4
    233c:	06150530 			; <UNDEFINED> instruction: 0x06150530
    2340:	20050501 	andcs	r0, r5, r1, lsl #10
    2344:	2f060305 	svccs	0x00060305
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2348:	061a052f 	ldreq	r0, [sl], -pc, lsr #10
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    234c:	42010501 	andmi	r0, r1, #4194304	; 0x400000
    2350:	01000802 	tsteq	r0, r2, lsl #16
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2354:	00170501 	andseq	r0, r7, r1, lsl #10
    2358:	134c0205 	movtne	r0, #49669	; 0xc205
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    235c:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    2360:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    2364:	17051416 	smladne	r5, r6, r4, r1
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2368:	017a0306 	cmneq	sl, r6, lsl #6
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    236c:	05260505 	streq	r0, [r6, #-1285]!	; 0xfffffafb
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2370:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
		if (db->status == DATA_ENTRY_FINISHED) {
    2374:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2378:	02052007 	andeq	r2, r5, #7
    237c:	05132206 	ldreq	r2, [r3, #-518]	; 0xfffffdfa
			nr++;
    2380:	05110604 	ldreq	r0, [r1, #-1540]	; 0xfffff9fc
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2384:	2e062102 	adfcss	f2, f6, f2
    2388:	05200f03 	streq	r0, [r0, #-3843]!	; 0xfffff0fd
    238c:	4a720303 	bmi	1c82fa0 <__ccfg+0x1c62ff8>
    2390:	01060605 	tsteq	r6, r5, lsl #12
				__dp [pl + 1] = __dp [pl] - 128;
    2394:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
				pl = __dp [1] + 2;
    2398:	01060705 	tsteq	r6, r5, lsl #14
				__dp [pl + 1] = __dp [pl] - 128;
    239c:	21060505 	tstcs	r6, r5, lsl #10
    23a0:	01060b05 	tsteq	r6, r5, lsl #22
				__dp [pl] = 0;
    23a4:	23060405 	movwcs	r0, #25605	; 0x6405
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    23a8:	0a052f3d 	beq	14e0a4 <__ccfg+0x12e0fc>
    23ac:	07050106 	streq	r0, [r5, -r6, lsl #2]
    23b0:	06050520 	streq	r0, [r5], -r0, lsr #10
			db->status = DATA_ENTRY_PENDING;
    23b4:	0d052a3d 	vstreq	s4, [r5, #-244]	; 0xffffff0c
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    23b8:	01050106 	tsteq	r5, r6, lsl #2
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    23bc:	02580a03 	subseq	r0, r8, #12288	; 0x3000
				diag ("BAD RX");
    23c0:	01010007 	tsteq	r1, r7
    23c4:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
	if (nr) {
    23c8:	00000002 	andeq	r0, r0, r2
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23cc:	03f40300 	mvnseq	r0, #0, 6
}
    23d0:	16020501 	strne	r0, [r2], -r1, lsl #10
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23d4:	13131413 	tstne	r3, #318767104	; 0x13000000
    23d8:	03061c05 	movweq	r1, #27653	; 0x6c05
    23dc:	04050177 	streq	r0, [r5], #-375	; 0xfffffe89
}
    23e0:	1f060536 	svcne	0x00060536
    23e4:	05220905 	streq	r0, [r2, #-2309]!	; 0xfffff6fb
    23e8:	2077031c 	rsbscs	r0, r7, ip, lsl r3
    23ec:	10030a05 	andne	r0, r3, r5, lsl #20
    23f0:	03090520 	movweq	r0, #38176	; 0x9520
    23f4:	12052e79 	andne	r2, r5, #1936	; 0x790
    23f8:	02052006 	andeq	r2, r5, #6
    23fc:	03060106 	movweq	r0, #24838	; 0x6106
    2400:	05052011 	streq	r2, [r5, #-17]	; 0xffffffef
thread (cc1350_driver)
    2404:	03050106 	movweq	r0, #20742	; 0x5106
    2408:	6f032106 	svcvs	0x00032106
    240c:	0606052e 	streq	r0, [r6], -lr, lsr #10
    2410:	06040501 	streq	r0, [r4], -r1, lsl #10
    2414:	07051359 	smlsdeq	r5, r9, r3, r1
		if (dstate & DSTATE_IRST) {
    2418:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    241c:	0b052106 	bleq	14a83c <__ccfg+0x12a894>
    2420:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
			rf_off ();
    2424:	07053106 	streq	r3, [r5, -r6, lsl #2]
			_BIC (dstate,
    2428:	09050106 	stmdbeq	r5, {r1, r2, r8}
    242c:	0604052f 	streq	r0, [r4], -pc, lsr #10
		if (dstate & DSTATE_RXAC) {
    2430:	052f2f3d 	streq	r2, [pc, #-3901]!	; 14fb <diag+0x6b>
    2434:	0d054505 	cfstr32eq	mvfx4, [r5, #-20]	; 0xffffffec
			if ((dstate & DSTATE_RXON) == 0)
    2438:	01050106 	tsteq	r5, r6, lsl #2
				rx_de ();
    243c:	023c0d03 	eorseq	r0, ip, #3, 26	; 0xc0
		if (paylen == 0) {
    2440:	01010007 	tsteq	r1, r7
    2444:	05002005 	streq	r2, [r0, #-5]
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2448:	00139c02 	andseq	r9, r3, r2, lsl #24
    244c:	07a20300 	streq	r0, [r2, r0, lsl #6]!
    2450:	1a020501 	bne	8385c <__ccfg+0x638b4>
    2454:	05051416 	streq	r1, [r5, #-1046]	; 0xfffffbea
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2458:	03050106 	movweq	r0, #20742	; 0x5106
    245c:	09052506 	stmdbeq	r5, {r1, r2, r8, sl, sp}
    2460:	20050f06 	andcs	r0, r5, r6, lsl #30
    2464:	052e7003 	streq	r7, [lr, #-3]!
    2468:	2023030d 	eorcs	r0, r3, sp, lsl #6
    246c:	70031a05 	andvc	r1, r3, r5, lsl #20
    2470:	030d0520 	movweq	r0, #54560	; 0xd520
    2474:	06052e10 			; <UNDEFINED> instruction: 0x06052e10
		} else if (dstate & DSTATE_RXON) {
    2478:	03090523 	movweq	r0, #38179	; 0x9523
	if (dstate & DSTATE_RFON)
    247c:	0205206d 	andeq	r2, r5, #109	; 0x6d
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2480:	2e0f0306 	cdpcs	3, 0, cr0, cr15, cr6, {0}
		re->status = DATA_ENTRY_PENDING;
    2484:	011f0513 	tsteq	pc, r3, lsl r5	; <UNPREDICTABLE>
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2488:	01060205 	tsteq	r6, r5, lsl #4
	issue_cmd ((lword)&RF_cmdPropRx);
    248c:	20090306 	andcs	r0, r9, r6, lsl #6
	_BIS (dstate, DSTATE_RXAC);
    2490:	19030305 	stmdbne	r3, {r0, r2, r8, r9}
    2494:	06160501 	ldreq	r0, [r6], -r1, lsl #10
    2498:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    249c:	2f060405 	svccs	0x00060405
	if (dstate & DSTATE_RXAC)
    24a0:	01061b05 	tsteq	r6, r5, lsl #22
    24a4:	03060305 	movweq	r0, #25349	; 0x6305
				if (statid != 0xffff)
    24a8:	12052e0d 	andne	r2, r5, #13, 28	; 0xd0
    24ac:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
					((address)(RF_cmdPropTx.pPkt)) [0] =
    24b0:	09054006 	stmdbeq	r5, {r1, r2, lr}
				RF_cmdPropTx.pktLen = (byte) paylen;
    24b4:	03050106 	movweq	r0, #20742	; 0x5106
		if (paylen == 0) {
    24b8:	204f0306 	subcs	r0, pc, r6, lsl #6
			wait (qevent, DR_LOOP);
    24bc:	01060605 	tsteq	r6, r5, lsl #12
    24c0:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
			if (dstate & DSTATE_RXAC) {
    24c4:	054c0305 	strbeq	r0, [ip, #-773]	; 0xfffffcfb
    24c8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
				rx_int_enable ();
    24cc:	7a03062e 	bvc	c3d8c <__ccfg+0xa3de4>
			release;
    24d0:	0609054a 	streq	r0, [r9], -sl, asr #10
			} else if (dstate & DSTATE_RFON) {
    24d4:	06020513 			; <UNDEFINED> instruction: 0x06020513
				delay (offdelay, DR_GOOF);
    24d8:	14030544 	strne	r0, [r3], #-1348	; 0xfffffabc
    24dc:	060e0522 	streq	r0, [lr], -r2, lsr #10
    24e0:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
		if (bckf_timer) {
    24e4:	30060405 	andcc	r0, r6, r5, lsl #8
			wait (qevent, DR_LOOP);
    24e8:	01061305 	tsteq	r6, r5, lsl #6
    24ec:	2f060405 	svccs	0x00060405
    24f0:	01061705 	tsteq	r6, r5, lsl #14
			delay (bckf_timer, DR_LOOP);
    24f4:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    24f8:	052f0604 	streq	r0, [pc, #-1540]!	; 1efc <ser_inf+0x58>
			if (dstate & DSTATE_RXAC)
    24fc:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
    2500:	04052010 	streq	r2, [r5], #-16
	if (dstate & DSTATE_RFON)
    2504:	09053006 	stmdbeq	r5, {r1, r2, ip, sp}
    2508:	1503052e 	strne	r0, [r3, #-1326]	; 0xfffffad2
		rx_de ();
    250c:	01061a05 	tsteq	r6, r5, lsl #20
		RF_cmdPropTx . status = 0;
    2510:	05301205 	ldreq	r1, [r0, #-517]!	; 0xfffffdfb
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2514:	03051e1a 	movweq	r1, #24090	; 0x5e1a
    2518:	15052206 	strne	r2, [r5, #-518]	; 0xfffffdfa
    251c:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
		issue_cmd ((lword)&cmd_cs);
    2520:	0603052e 	streq	r0, [r3], -lr, lsr #10
		if (dstate & DSTATE_IRST)
    2524:	060e053d 			; <UNDEFINED> instruction: 0x060e053d
    2528:	25120501 	ldrcs	r0, [r2, #-1281]	; 0xfffffaff
    252c:	05290605 	streq	r0, [r9, #-1541]!	; 0xfffff9fb
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2530:	06052512 			; <UNDEFINED> instruction: 0x06052512
    2534:	06040529 	streq	r0, [r4], -r9, lsr #10
			delay (1, DR_XMIT);
    2538:	06130522 	ldreq	r0, [r3], -r2, lsr #10
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    253c:	06030501 	streq	r0, [r3], -r1, lsl #10
    2540:	06010531 			; <UNDEFINED> instruction: 0x06010531
    2544:	02011b03 	andeq	r1, r1, #3072	; 0xc00
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2548:	0101000e 	tsteq	r1, lr
    254c:	05002c05 	streq	r2, [r0, #-3077]	; 0xfffff3fb
				RF_cmdPropTx . status = 0;
    2550:	00144402 	andseq	r4, r4, r2, lsl #8
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2554:	02ab0300 	adceq	r0, fp, #0, 6
				issue_cmd ((lword)&RF_cmdPropTx);
    2558:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
				proceed (DR_XMIT);
    255c:	062c0514 			; <UNDEFINED> instruction: 0x062c0514
    2560:	1905200e 	stmdbne	r5, {r1, r2, r3, sp}
			txtries++;
    2564:	1c2c0524 	cfstr32ne	mvfx0, [ip], #-144	; 0xffffff70
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2568:	05241905 	streq	r1, [r4, #-2309]!	; 0xfffff6fb
    256c:	02053c05 	andeq	r3, r5, #1280	; 0x500
    2570:	0a052306 	beq	14b190 <__ccfg+0x12b1e8>
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2574:	010b0306 	tsteq	fp, r6, lsl #6
		goto DR_LOOP__;
    2578:	77030c05 	strvc	r0, [r3, -r5, lsl #24]
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    257c:	260a0520 	strcs	r0, [sl], -r0, lsr #10
		paylen = 0;
    2580:	20760323 	rsbscs	r0, r6, r3, lsr #6
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2584:	2f060205 	svccs	0x00060205
		txtries = 0;
    2588:	14030518 	strne	r0, [r3], #-1304	; 0xfffffae8
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    258c:	06060513 			; <UNDEFINED> instruction: 0x06060513
    2590:	06040501 	streq	r0, [r4], -r1, lsl #10
    2594:	060a0521 	streq	r0, [sl], -r1, lsr #10
    2598:	03010501 	movweq	r0, #5377	; 0x1501
    259c:	0b05200f 	bleq	14a5e0 <__ccfg+0x12a638>
		    tcvphy_top (physid) == NULL)
    25a0:	20730306 	rsbscs	r0, r3, r6, lsl #6
    25a4:	20060c05 	andcs	r0, r6, r5, lsl #24
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    25a8:	06200405 	strteq	r0, [r0], -r5, lsl #8
    25ac:	060c052f 	streq	r0, [ip], -pc, lsr #10
			rf_off ();
    25b0:	06020501 	streq	r0, [r2], -r1, lsl #10
endthread
    25b4:	05200b03 	streq	r0, [r0, #-2819]!	; 0xfffff4fd
    25b8:	02010609 	andeq	r0, r1, #9437184	; 0x900000
    25bc:	01010004 	tsteq	r1, r4
    25c0:	05002005 	streq	r2, [r0, #-5]
    25c4:	00147802 	andseq	r7, r4, r2, lsl #16
    25c8:	08810300 	stmeq	r1, {r8, r9}
    25cc:	03020501 	movweq	r0, #9473	; 0x2501
    25d0:	15050109 	strne	r0, [r5, #-265]	; 0xfffffef7
    25d4:	20050106 	andcs	r0, r5, r6, lsl #2
    25d8:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    25dc:	20090315 	andcs	r0, r9, r5, lsl r3
    25e0:	05230205 	streq	r0, [r3, #-517]!	; 0xfffffdfb
    25e4:	03051d05 	movweq	r1, #23813	; 0x5d05
    25e8:	1a052106 	bne	14aa08 <__ccfg+0x12aa60>
    25ec:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    25f0:	04023e06 	streq	r3, [r2], #-3590	; 0xfffff1fa
void RFCCPE0IntHandler (void) {
    25f4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    25f8:	02050021 	andeq	r0, r5, #33	; 0x21
		_BIS (dstate, DSTATE_IRST);
    25fc:	00000000 	andeq	r0, r0, r0
    2600:	01089403 	tsteq	r8, r3, lsl #8
    2604:	09030205 	stmdbeq	r3, {r0, r2, r9}
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2608:	06210501 	strteq	r0, [r1], -r1, lsl #10
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    260c:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
    2610:	3c090305 	stccc	3, cr0, [r9], {5}
	p_trigger (drvprcs, qevent);
    2614:	21060305 	tstcs	r6, r5, lsl #6
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2618:	01060805 	tsteq	r6, r5, lsl #16
    261c:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
    2620:	12052008 	andne	r2, r5, #8
    2624:	1e080522 	cfsh32ne	mvfx0, mvfx8, #18
    2628:	4c060305 	stcmi	3, cr0, [r6], {5}
    262c:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    2630:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2634:	06025a01 	streq	r5, [r2], -r1, lsl #20
    2638:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    263c:	02050020 	andeq	r0, r5, #32
	RISE_N_SHINE;
    2640:	00000000 	andeq	r0, r0, r0
    2644:	0108a703 	tsteq	r8, r3, lsl #14
    2648:	09030205 	stmdbeq	r3, {r0, r2, r9}
}
    264c:	05141301 	ldreq	r1, [r4, #-769]	; 0xfffffcff
    2650:	74030620 	strvc	r0, [r3], #-1568	; 0xfffff9e0
    2654:	031d0501 	tsteq	sp, #4194304	; 0x400000
    2658:	1205200c 	andne	r2, r5, #12
    265c:	200b052e 	andcs	r0, fp, lr, lsr #10
    2660:	20062f05 	andcs	r2, r6, r5, lsl #30
void phys_cc1350 (int phy, int mbs) {
    2664:	01060205 	tsteq	r6, r5, lsl #4
	if (rbuffl != 0)
    2668:	05052406 	streq	r2, [r5, #-1030]	; 0xfffffbfa
    266c:	03052e06 	movweq	r2, #24070	; 0x5e06
		syserror (ETOOMANY, "cc13");
    2670:	07052106 	streq	r2, [r5, -r6, lsl #2]
		syserror (EREQPAR, "cc13 mb");
    2674:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
	if (mbs == 0)
    2678:	09054c06 	stmdbeq	r5, {r1, r2, sl, fp, lr}
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    267c:	01050106 	tsteq	r5, r6, lsl #2
		syserror (EREQPAR, "cc13 mb");
    2680:	0603053e 			; <UNDEFINED> instruction: 0x0603053e
    2684:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
	i = 0;
    2688:	052d0623 	streq	r0, [sp, #-1571]!	; 0xfffff9dd
	rbuffl = (byte) mbs;
    268c:	054a0606 	strbeq	r0, [sl, #-1542]	; 0xfffff9fa
		db->config.type = 0;	// General (data in structure)
    2690:	0201060e 	andeq	r0, r1, #14680064	; 0xe00000
	rbuffl = (byte) mbs;
    2694:	01010004 	tsteq	r1, r4
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2698:	05002305 	streq	r2, [r0, #-773]	; 0xfffffcfb
    269c:	00149002 	andseq	r9, r4, r2
		if (db == NULL)
    26a0:	09810300 	stmibeq	r1, {r8, r9}
			syserror (EMALLOC, "cc13");
    26a4:	41020501 	tstmi	r2, r1, lsl #10
    26a8:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    26ac:	06230514 			; <UNDEFINED> instruction: 0x06230514
		db->status = DATA_ENTRY_PENDING;
    26b0:	05017503 	streq	r7, [r1, #-1283]	; 0xfffffafd
		if (i)
    26b4:	3c0c0302 	stccc	3, cr0, [ip], {2}
			da->pNextEntry = (byte*) db;
    26b8:	0121061f 			; <UNDEFINED> instruction: 0x0121061f
		db->length = rbuffl + 2;
    26bc:	06080501 	streq	r0, [r8], -r1, lsl #10
    26c0:	05202803 	streq	r2, [r0, #-2051]!	; 0xfffff7fd
		db->config.type = 0;	// General (data in structure)
    26c4:	20580302 	subscs	r0, r8, r2, lsl #6
		db->length = rbuffl + 2;
    26c8:	23031c05 	movwcs	r1, #15365	; 0x3c05
	db->pNextEntry = (byte*) re;
    26cc:	03020520 	movweq	r0, #9504	; 0x2520
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    26d0:	2e062e5d 	mcrcs	14, 0, r2, cr6, cr13, {2}
    26d4:	01080514 	tsteq	r8, r4, lsl r5
	if (rbuffs == NULL)
    26d8:	01060905 	tsteq	r6, r5, lsl #18
	rbuffs->pCurrEntry = (byte*) re;
    26dc:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
	rbuffs->pLastEntry = NULL;
    26e0:	c7030602 	strgt	r0, [r3, -r2, lsl #12]
    26e4:	3d3d2000 	ldccc	0, cr2, [sp, #-0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26e8:	0d050204 	sfmeq	f0, 4, [r5, #-16]
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    26ec:	7bcf0306 	blvc	ff3c330c <_estack+0xdf3be30c>
    26f0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    26f4:	b103060f 	tstlt	r3, pc, lsl #12
	rbuffl -= 2;
    26f8:	02052004 	andeq	r2, r5, #4
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26fc:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
	rbuffl -= 2;
    2700:	7bca0324 	blvc	ff283398 <_estack+0xdf27e398>
	physid = phy;
    2704:	17050501 	strne	r0, [r5, -r1, lsl #10]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2708:	01060d05 	tsteq	r6, r5, lsl #26
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    270c:	02050104 	andeq	r0, r5, #4, 2
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2710:	2004b103 	andcs	fp, r4, r3, lsl #2
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2714:	01012f06 	tsteq	r1, r6, lsl #30
    2718:	06010558 			; <UNDEFINED> instruction: 0x06010558
	utimer_add (&bckf_timer);
    271c:	06030513 			; <UNDEFINED> instruction: 0x06030513
	drvprcs = runthread (cc1350_driver);
    2720:	587fb603 	ldmdapl	pc!, {r0, r1, r9, sl, ip, sp, pc}^	; <UNPREDICTABLE>
    2724:	01060605 	tsteq	r6, r5, lsl #12
    2728:	4b060405 	blmi	183744 <__ccfg+0x16379c>
	if (drvprcs == 0)
    272c:	06070513 			; <UNDEFINED> instruction: 0x06070513
		syserror (ERESOURCE, "cc13");
    2730:	06050520 	streq	r0, [r5], -r0, lsr #10
    2734:	0513134b 	ldreq	r1, [r3, #-843]	; 0xfffffcb5
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2738:	2d010609 	stccs	6, cr0, [r1, #-36]	; 0xffffffdc
    273c:	05280c05 	streq	r0, [r8, #-3077]!	; 0xfffff3fb
    2740:	20770308 	rsbscs	r0, r7, r8, lsl #6
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2744:	32060505 	andcc	r0, r6, #20971520	; 0x1400000
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2748:	06080515 			; <UNDEFINED> instruction: 0x06080515
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    274c:	0604050f 	streq	r0, [r4], -pc, lsl #10
    2750:	03050525 	movweq	r0, #21797	; 0x5525
    2754:	053d7431 	ldreq	r7, [sp, #-1073]!	; 0xfffffbcf
    2758:	4e030604 	cfmadd32mi	mvax0, mvfx0, mvfx3, mvfx4
    275c:	411d054a 	tstmi	sp, sl, asr #10
    2760:	2d060605 	stccs	6, cr0, [r6, #-20]	; 0xffffffec
    2764:	01060805 	tsteq	r6, r5, lsl #16
    2768:	21060605 	tstcs	r6, r5, lsl #12
    276c:	060b0514 			; <UNDEFINED> instruction: 0x060b0514
	plugch ();
    2770:	3c180511 	cfldr32cc	mvfx0, [r8], {17}
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2774:	052f0605 	streq	r0, [pc, #-1541]!	; 2177 <rf_off+0x57>
    2778:	0546060b 	strbeq	r0, [r6, #-1547]	; 0xfffff9f5
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    277c:	2e310304 	cdpcs	3, 3, cr0, cr1, cr4, {0}
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2780:	01060805 	tsteq	r6, r5, lsl #16
    2784:	05206a03 	streq	r6, [r0, #-2563]!	; 0xfffff5fd
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2788:	6e030605 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx5
}
    278c:	1505132e 	strne	r1, [r5, #-814]	; 0xfffffcd2
    2790:	0e050106 	adfeqs	f0, f5, f6
    2794:	2e080520 	cfsh32cs	mvfx0, mvfx8, #16
    2798:	2f060605 	svccs	0x00060605
    279c:	0609053d 			; <UNDEFINED> instruction: 0x0609053d
    27a0:	06070501 	streq	r0, [r7], -r1, lsl #10
    27a4:	060b0521 	streq	r0, [fp], -r1, lsr #10
    27a8:	06060501 	streq	r0, [r6], -r1, lsl #10
    27ac:	060a0559 			; <UNDEFINED> instruction: 0x060a0559
    27b0:	06050501 	streq	r0, [r5], -r1, lsl #10
    27b4:	061c0523 	ldreq	r0, [ip], -r3, lsr #10
    27b8:	06050501 	streq	r0, [r5], -r1, lsl #10
    27bc:	14060559 	strne	r0, [r6], #-1369	; 0xfffffaa7
    27c0:	01061605 	tsteq	r6, r5, lsl #12
    27c4:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    27c8:	05210606 	streq	r0, [r1, #-1542]!	; 0xfffff9fa
    27cc:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    27d0:	0605200c 	streq	r2, [r5], -ip
    27d4:	08052f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    27d8:	0b050106 	bleq	142bf8 <__ccfg+0x122c50>
    27dc:	08052a06 	stmdaeq	r5, {r1, r2, r9, fp, sp}
    27e0:	1c051406 	cfstrsne	mvf1, [r5], {6}
    27e4:	0605051d 			; <UNDEFINED> instruction: 0x0605051d
    27e8:	13060535 	movwne	r0, #25909	; 0x6535
    27ec:	06090559 			; <UNDEFINED> instruction: 0x06090559
    27f0:	1f080514 	svcne	0x00080514
    27f4:	052d0a05 	streq	r0, [sp, #-2565]!	; 0xfffff5fb
    27f8:	132f0606 			; <UNDEFINED> instruction: 0x132f0606
    27fc:	01060905 	tsteq	r6, r5, lsl #18
    2800:	21060605 	tstcs	r6, r5, lsl #12
    2804:	01061605 	tsteq	r6, r5, lsl #12
    2808:	222c0805 	eorcs	r0, ip, #327680	; 0x50000
    280c:	1b060b05 	blne	185428 <__ccfg+0x165480>
    2810:	13060605 	movwne	r0, #26117	; 0x6605
    2814:	03060505 	movweq	r0, #25861	; 0x6505
    2818:	08052009 	stmdaeq	r5, {r0, r3, sp}
    281c:	06050106 	streq	r0, [r5], -r6, lsl #2
    2820:	1c052f06 	stcne	15, cr2, [r5], {6}
    2824:	016e0306 	cmneq	lr, r6, lsl #6
    2828:	12030a05 	andne	r0, r3, #20480	; 0x5000
    282c:	0605052e 	streq	r0, [r5], -lr, lsr #10
    2830:	05206e03 	streq	r6, [r0, #-3587]!	; 0xfffff1fd
    2834:	20170306 	andscs	r0, r7, r6, lsl #6
    2838:	0607052f 	streq	r0, [r7], -pc, lsr #10
    283c:	060b0501 	streq	r0, [fp], -r1, lsl #10
    2840:	060c051e 			; <UNDEFINED> instruction: 0x060c051e
    2844:	200b0501 	andcs	r0, fp, r1, lsl #10
    2848:	03060405 	movweq	r0, #25605	; 0x6405
    284c:	0b023c0c 	bleq	91884 <__ccfg+0x718dc>
    2850:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2854:	0205000f 	andeq	r0, r5, #15
    2858:	000015cc 	andeq	r1, r0, ip, asr #11
    285c:	010aae03 	tsteq	sl, r3, lsl #28
    2860:	05130205 	ldreq	r0, [r3, #-517]	; 0xfffffdfb
    2864:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    2868:	25052e18 	strcs	r2, [r5, #-3608]	; 0xfffff1e8
    286c:	20180520 	andscs	r0, r8, r0, lsr #10
    2870:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
    2874:	02052e0c 	andeq	r2, r5, #12, 28	; 0xc0
strand (__outserial, const char*)
    2878:	14062106 	strne	r2, [r6], #-262	; 0xfffffefa
    287c:	02310105 	eorseq	r0, r1, #1073741825	; 0x40000001
    2880:	01010008 	tsteq	r1, r8
    2884:	00000cb7 			; <UNDEFINED> instruction: 0x00000cb7
endstrand
    2888:	01a10003 			; <UNDEFINED> instruction: 0x01a10003
    288c:	01020000 	mrseq	r0, (UNDEF: 2)
	ptr = data;
    2890:	000d0efb 	strdeq	r0, [sp], -fp
    2894:	01010101 	tsteq	r1, r1, lsl #2
	if (*ptr)
    2898:	01000000 	mrseq	r0, (UNDEF: 0)
		len = strlen (ptr);
    289c:	2f010000 	svccs	0x00010000
    28a0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    28a4:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    28a8:	2f6e6974 	svccs	0x006e6974
    28ac:	6b736544 	blvs	1cdbdc4 <__ccfg+0x1cbbe1c>
    28b0:	2f706f74 	svccs	0x00706f74
    28b4:	4f534c4f 	svcmi	0x00534c4f
	len -= quant;
    28b8:	2f54454e 	svccs	0x0054454e
    28bc:	4f434950 	svcmi	0x00434950
    28c0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
	if (len == 0) {
    28c4:	2f534f63 	svccs	0x00534f63
		ufree (data);
    28c8:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
		finish;
    28cc:	4e562f73 	mrcmi	15, 2, r2, cr6, cr3, {3}
    28d0:	00497465 	subeq	r7, r9, r5, ror #8
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    28d4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    28d8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    28dc:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    28e0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    28e4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
strand (__inserial, address)
    28e8:	61652d65 	cmnvs	r5, r5, ror #26
    28ec:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    28f0:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    28f4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    28f8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
	if (__inpline != NULL)
    28fc:	6f682f00 	svcvs	0x00682f00
    2900:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 2754 <phys_cc1350+0xf0>
		finish;
    2904:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    2908:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    290c:	6f746b73 	svcvs	0x00746b73
    2910:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    2914:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
		umwait (IM_INIT);
    2918:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
		release;
    291c:	2f534f43 	svccs	0x00534f43
	savedata (data);
    2920:	4f636950 	svcmi	0x00636950
	len = MAX_LINE_LENGTH;
    2924:	43432f53 	movtmi	r2, #16211	; 0x3f53
	io (IM_READ, __cport, READ, ptr, 1);
    2928:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    292c:	6f682f00 	svcvs	0x00682f00
    2930:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 2784 <phys_cc1350+0x120>
    2934:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	if (ptr == (char*) data) { // new line
    2938:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    293c:	6f746b73 	svcvs	0x00746b73
		if (*ptr == '\0') { // bin cmd
    2940:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
			proceed (IM_BIN);
    2944:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    2948:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
		if (*ptr < 0x20)
    294c:	2f534f43 	svccs	0x00534f43
    2950:	4f636950 	svcmi	0x00636950
			proceed (IM_READ);
    2954:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
    2958:	2f656d6f 	svccs	0x00656d6f
	if (*ptr == '\n' || *ptr == '\r') {
    295c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    2960:	442f6e69 	strtmi	r6, [pc], #-3689	; 2968 <__inserial+0x80>
    2964:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		*ptr = '\0';
    2968:	4f2f706f 	svcmi	0x002f706f
		__inpline = (char*)data;
    296c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
		finish;
    2970:	502f5445 	eorpl	r5, pc, r5, asr #8
	if (len) {
    2974:	534f4349 	movtpl	r4, #62281	; 0xf349
		ptr++;
    2978:	6369502f 	cmnvs	r9, #47	; 0x2f
    297c:	6b2f534f 	blvs	bd76c0 <__ccfg+0xbb7718>
		len--;
    2980:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
	proceed (IM_READ);
    2984:	7400006c 	strvc	r0, [r0], #-108	; 0xffffff94
	io (IM_BIN, __cport, READ, ptr, 1);
    2988:	632e7663 			; <UNDEFINED> instruction: 0x632e7663
    298c:	00000100 	andeq	r0, r0, r0, lsl #2
    2990:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    2994:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    2998:	00000200 	andeq	r0, r0, r0, lsl #4
	len -= 2;
    299c:	61647473 	smcvs	18243	; 0x4743
	if (len > *ptr + 1) // 1 for 0x04
    29a0:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    29a4:	00000200 	andeq	r0, r0, r0, lsl #4
		len = *ptr + 1;
    29a8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    29ac:	0300682e 	movweq	r6, #2094	; 0x82e
	ptr++;
    29b0:	616d0000 	cmnvs	sp, r0
	quant = io (IM_BINL, __cport, READ, ptr, len);
    29b4:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    29b8:	00000300 	andeq	r0, r0, r0, lsl #6
    29bc:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    29c0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    29c4:	0300682e 	movweq	r6, #2094	; 0x82e
    29c8:	75620000 	strbvc	r0, [r2, #-0]!
	len -= quant;
    29cc:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
		__inpline = (char*)data;
    29d0:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
		finish;
    29d4:	00682e73 	rsbeq	r2, r8, r3, ror lr
	ptr += quant;
    29d8:	73000003 	movwvc	r0, #3
    29dc:	6f697379 	svcvs	0x00697379
endstrand
    29e0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    29e4:	63740000 	cmnvs	r4, #0
	proceed (IM_BINL);
    29e8:	65645f76 	strbvs	r5, [r4, #-3958]!	; 0xfffff08a
endstrand
    29ec:	682e7366 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, ip, sp, lr}
    29f0:	00000100 	andeq	r0, r0, r0, lsl #2
    29f4:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    29f8:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    29fc:	00000500 	andeq	r0, r0, r0, lsl #10
    2a00:	70766374 	rsbsvc	r6, r6, r4, ror r3
		if (res && (d < n))
    2a04:	2e737968 	vsubcs.f16	s15, s6, s17	; <UNPREDICTABLE>
    2a08:	00010068 	andeq	r0, r1, r8, rrx
    2a0c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    2a10:	646f6e5f 	strbtvs	r6, [pc], #-3679	; 2a18 <outc.5724+0x14>
			res [d] = (char) c;
    2a14:	61645f65 	cmnvs	r4, r5, ror #30
		d++;
    2a18:	682e6174 	stmdavs	lr!, {r2, r4, r5, r6, r8, sp, lr}
    2a1c:	00000100 	andeq	r0, r0, r0, lsl #2
    2a20:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a24:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    2a28:	00003e6e 	andeq	r3, r0, lr, ror #28
    2a2c:	05000000 	streq	r0, [r0, #-0]
				enci (10000);
    2a30:	02050031 	andeq	r0, r5, #49	; 0x31
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a34:	000015f0 	strdeq	r1, [r0], -r0
    2a38:	01029303 	tsteq	r2, r3, lsl #6
	d = 0;
    2a3c:	13170205 	tstne	r7, #1342177280	; 0x50000000
		c = *fm++;
    2a40:	06310514 			; <UNDEFINED> instruction: 0x06310514
		if (c == '\\') {
    2a44:	20017803 	andcs	r7, r1, r3, lsl #16
			if ((c = *fm++) == '\0') {
    2a48:	05260705 	streq	r0, [r6, #-1797]!	; 0xfffff8fb
    2a4c:	05052216 	streq	r2, [r5, #-534]	; 0xfffffdea
				outc ('\\');
    2a50:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
			if ((c = *fm++) == '\0') {
    2a54:	061a0526 	ldreq	r0, [sl], -r6, lsr #10
				outc ('\\');
    2a58:	1f0e0513 	svcne	0x000e0513
    2a5c:	21060205 	tstcs	r6, r5, lsl #4
			outc (c);
    2a60:	01061a05 	tsteq	r6, r5, lsl #20
    2a64:	03060205 	movweq	r0, #25093	; 0x6205
			if (c == '\0')
    2a68:	0105200c 	tsteq	r5, ip
    2a6c:	01021606 	tsteq	r2, r6, lsl #12
			outc (c);
    2a70:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
				outc (val);
    2a74:	0205002e 	andeq	r0, r5, #46	; 0x2e
				val = (word) va_arg (ap, aword);
    2a78:	00001606 	andeq	r1, r0, r6, lsl #12
		if (c == '%') {
    2a7c:	0100fe03 	tsteq	r0, r3, lsl #28	; <UNPREDICTABLE>
    2a80:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
			c = *fm++;
    2a84:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
			switch (c) {
    2a88:	03052005 	movweq	r2, #20485	; 0x5005
    2a8c:	29052f06 	stmdbcs	r5, {r1, r2, r8, r9, sl, fp, sp}
    2a90:	1c050106 	stfnes	f0, [r5], {6}
    2a94:	0603052e 	streq	r0, [r3], -lr, lsr #10
    2a98:	06290521 	strteq	r0, [r9], -r1, lsr #10
    2a9c:	201c0501 	andscs	r0, ip, r1, lsl #10
    2aa0:	21060305 	tstcs	r6, r5, lsl #6
    2aa4:	01061a05 	tsteq	r6, r5, lsl #20
				outc ('%');
    2aa8:	024c0105 	subeq	r0, ip, #1073741825	; 0x40000001
    2aac:	01010001 	tsteq	r1, r1
				outc (c);
    2ab0:	05002e05 	streq	r2, [r0, #-3589]	; 0xfffff1fb
    2ab4:	00162002 	andseq	r2, r6, r2
    2ab8:	02830300 	addeq	r0, r3, #0, 6
				if (c == '\0')
    2abc:	16020501 	strne	r0, [r2], -r1, lsl #10
				return d;
    2ac0:	0e062e05 	cdpeq	14, 0, cr2, cr6, cr5, {0}
}
    2ac4:	06240205 	strteq	r0, [r4], -r5, lsl #4
    2ac8:	1301012f 	movwne	r0, #4399	; 0x112f
			switch (c) {
    2acc:	05140101 	ldreq	r0, [r4, #-257]	; 0xfffffeff
    2ad0:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    2ad4:	02022d02 	andeq	r2, r2, #2, 26	; 0x80
				for (i = 12; ; i -= 4) {
    2ad8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
				val = (word) va_arg (ap, aword);
    2adc:	0205003a 	andeq	r0, r5, #58	; 0x3a
						[ (val >> i) & 0xf ]);
    2ae0:	00001630 	andeq	r1, r0, r0, lsr r6
    2ae4:	0101a703 	tsteq	r1, r3, lsl #14
    2ae8:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
					outc (__pi_hex_enc_table
    2aec:	051c3a05 	ldreq	r3, [ip, #-2565]	; 0xfffff5fb
    2af0:	01240602 			; <UNDEFINED> instruction: 0x01240602
					if (i == 0)
    2af4:	1c063a05 			; <UNDEFINED> instruction: 0x1c063a05
    2af8:	06240205 	strteq	r0, [r4], -r5, lsl #4
				for (i = 12; ; i -= 4) {
    2afc:	05134a20 	ldreq	r4, [r3, #-2592]	; 0xfffff5e0
				val = (word) va_arg (ap, aword);
    2b00:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
				if (c == 'd' && (val & 0x8000) != 0) {
    2b04:	053d0603 	ldreq	r0, [sp, #-1539]!	; 0xfffff9fd
				val = (word) va_arg (ap, aword);
    2b08:	06052f02 	streq	r2, [r5], -r2, lsl #30
				if (c == 'd' && (val & 0x8000) != 0) {
    2b0c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2b10:	06030520 	streq	r0, [r3], -r0, lsr #10
					outc ('-');
    2b14:	06170530 			; <UNDEFINED> instruction: 0x06170530
    2b18:	21140501 	tstcs	r4, r1, lsl #10
					val = (~val) + 1;
    2b1c:	2f060305 	svccs	0x00060305
    2b20:	01060405 	tsteq	r6, r5, lsl #8
				for (i = 12; ; i -= 4) {
    2b24:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
				enci (10000);
    2b28:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2b2c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    2b30:	05280602 	streq	r0, [r8, #-1538]!	; 0xfffff9fe
    2b34:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
    2b38:	03054b01 	movweq	r4, #23297	; 0x5b01
    2b3c:	207a0306 	rsbscs	r0, sl, r6, lsl #6
    2b40:	01061405 	tsteq	r6, r5, lsl #8
    2b44:	21060305 	tstcs	r6, r5, lsl #6
    2b48:	01061705 	tsteq	r6, r5, lsl #14
    2b4c:	05201405 	streq	r1, [r0, #-1029]!	; 0xfffffbfb
    2b50:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2b54:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    2b58:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2b5c:	0201060b 	andeq	r0, r1, #11534336	; 0xb00000
    2b60:	01010005 	tsteq	r1, r5
    2b64:	05003a05 	streq	r3, [r0, #-2565]	; 0xfffff5fb
    2b68:	00167c02 	andseq	r7, r6, r2, lsl #24
    2b6c:	01df0300 	bicseq	r0, pc, r0, lsl #6
				if (c == 'd' || c == 'u') {
    2b70:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    2b74:	09030602 	stmdbeq	r3, {r1, r9, sl}
					if (c == 'd' &&
    2b78:	04053020 	streq	r3, [r5], #-32	; 0xffffffe0
					val = va_arg (ap, lword);
    2b7c:	061b0584 	ldreq	r0, [fp], -r4, lsl #11
					fm++;
    2b80:	06040501 	streq	r0, [r4], -r1, lsl #10
					if (c == 'd' &&
    2b84:	5806014c 	stmdapl	r6, {r2, r3, r6, r8}
    2b88:	27064a06 	strcs	r4, [r6, -r6, lsl #20]
						outc ('-');
    2b8c:	3c790306 	ldclcc	3, cr0, [r9], #-24	; 0xffffffe8
    2b90:	06010513 			; <UNDEFINED> instruction: 0x06010513
						val = (~val) + 1;
    2b94:	05201203 	streq	r1, [r0, #-515]!	; 0xfffffdfd
				enci (10000);
    2b98:	2e750304 	cdpcs	3, 7, cr0, cr5, cr4, {0}
					enci (1000000000UL);
    2b9c:	1b052b06 	blne	14d7bc <__ccfg+0x12d814>
    2ba0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    2ba4:	90014c06 	andls	r4, r1, r6, lsl #24
    2ba8:	055b132e 	ldrbeq	r1, [fp, #-814]	; 0xfffffcd2
    2bac:	051a0601 	ldreq	r0, [sl, #-1537]	; 0xfffff9ff
    2bb0:	2e780304 	cdpcs	3, 7, cr0, cr8, cr4, {0}
    2bb4:	02360105 	eorseq	r0, r6, #1073741825	; 0x40000001
    2bb8:	0101000c 	tsteq	r1, ip
    2bbc:	05003105 	streq	r3, [r0, #-261]	; 0xfffffefb
    2bc0:	00170802 	andseq	r0, r7, r2, lsl #16
    2bc4:	02ba0300 	adcseq	r0, sl, #0, 6
    2bc8:	18020501 	stmdane	r2, {r0, r8, sl}
    2bcc:	06310514 			; <UNDEFINED> instruction: 0x06310514
    2bd0:	05017803 	streq	r7, [r1, #-2051]	; 0xfffff7fd
    2bd4:	20090306 	andcs	r0, r9, r6, lsl #6
    2bd8:	052d0405 	streq	r0, [sp, #-1029]!	; 0xfffffbfb
    2bdc:	052f0602 	streq	r0, [pc, #-1538]!	; 25e2 <cc1350_driver+0x1de>
				} else if (c == 'x') {
    2be0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
					for (i = 28; ; i -= 4) {
    2be4:	012f0603 			; <UNDEFINED> instruction: 0x012f0603
					val = va_arg (ap, lword);
    2be8:	4a066606 	bmi	19c408 <__ccfg+0x17c460>
							[ (val >> i) & 0xf ]);
    2bec:	3b062106 	blcc	18b00c <__ccfg+0x16b064>
    2bf0:	66060113 			; <UNDEFINED> instruction: 0x66060113
						outc (__pi_hex_enc_table
    2bf4:	2e2e064a 	cfmadda32cs	mvax2, mvax0, mvfx14, mvfx10
    2bf8:	06010513 			; <UNDEFINED> instruction: 0x06010513
    2bfc:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
						if (i == 0)
    2c00:	2e770303 	cdpcs	3, 7, cr0, cr7, cr3, {0}
    2c04:	01053606 	tsteq	r5, r6, lsl #12
					for (i = 28; ; i -= 4) {
    2c08:	03052106 	movweq	r2, #20742	; 0x5106
					outc ('%');
    2c0c:	000b022d 	andeq	r0, fp, sp, lsr #4
    2c10:	4a050101 	bmi	14301c <__ccfg+0x123074>
    2c14:	78020500 	stmdavc	r2, {r8, sl}
					outc ('l');
    2c18:	03000017 	movweq	r0, #23
    2c1c:	050103f5 	streq	r0, [r1, #-1013]	; 0xfffffc0b
				val = (word) va_arg (ap, aword);
    2c20:	13131402 	tstne	r3, #33554432	; 0x2000000
				outc (val);
    2c24:	4a051314 	bmi	14787c <__ccfg+0x1278d4>
    2c28:	01790306 	cmneq	r9, r6, lsl #6
				while (*st != '\0') {
    2c2c:	0305053c 	movweq	r0, #21820	; 0x553c
    2c30:	4a053c0b 	bmi	151c64 <__ccfg+0x131cbc>
    2c34:	05207503 	streq	r7, [r0, #-1283]!	; 0xfffffafd
    2c38:	24062702 	strcs	r2, [r6], #-1794	; 0xfffff8fe
					outc (*st);
    2c3c:	01060505 	tsteq	r6, r5, lsl #10
    2c40:	05203005 	streq	r3, [r0, #-5]!
					st++;
    2c44:	0c052025 	stceq	0, cr2, [r5], {37}	; 0x25
		c = *fm++;
    2c48:	3c30053d 	cfldr32cc	mvfx0, [r0], #-244	; 0xffffff0c
    2c4c:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
    2c50:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
char *vform (char *res, const char *fm, va_list aq) {
    2c54:	15030603 	strne	r0, [r3, #-1539]	; 0xfffff9fd
    2c58:	0602052e 	streq	r0, [r2], -lr, lsr #10
	if (res != NULL) {
    2c5c:	132e6e03 			; <UNDEFINED> instruction: 0x132e6e03
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2c60:	12051713 	andne	r1, r5, #4980736	; 0x4c0000
    2c64:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2c68:	0f057606 	svceq	0x00057606
}
    2c6c:	060a0501 	streq	r0, [sl], -r1, lsl #10
    2c70:	06030520 	streq	r0, [r3], -r0, lsr #10
	fml = strlen (fm) + 17;
    2c74:	0613052f 	ldreq	r0, [r3], -pc, lsr #10
    2c78:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    2c7c:	1f062205 	svcne	0x00062205
	if ((res = (char*) umalloc (fml)) == NULL)
    2c80:	01062405 	tsteq	r6, r5, lsl #8
    2c84:	20060f05 	andcs	r0, r6, r5, lsl #30
    2c88:	01060205 	tsteq	r6, r5, lsl #4
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2c8c:	05330a05 	ldreq	r0, [r3, #-2565]!	; 0xfffff5fb
    2c90:	2e130301 	cdpcs	3, 1, cr0, cr3, cr1, {0}
    2c94:	03060205 	movweq	r0, #25093	; 0x6205
    2c98:	1a056673 	bne	15c66c <__ccfg+0x13c6c4>
		ufree (res);
    2c9c:	13051506 	movwne	r1, #21766	; 0x5506
		goto Again;
    2ca0:	06020539 			; <UNDEFINED> instruction: 0x06020539
	if (buf == NULL || fmt == NULL)
    2ca4:	061a052f 	ldreq	r0, [sl], -pc, lsr #10
int vscan (const char *buf, const char *fmt, va_list ap) {
    2ca8:	1e020514 	mcrne	5, 0, r0, cr2, cr4, {0}
	if (buf == NULL || fmt == NULL)
    2cac:	14132f06 	ldrne	r2, [r3], #-3846	; 0xfffff0fa
    2cb0:	143c4a01 	ldrtne	r4, [ip], #-2561	; 0xfffff5ff
    2cb4:	01060605 	tsteq	r6, r5, lsl #12
		    	    case 'u': scanu (lword); break;
    2cb8:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
			while (isspace (*buf)) buf++;
    2cbc:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
    2cc0:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
	while (*fmt != '\0') {
    2cc4:	052f0602 	streq	r0, [pc, #-1538]!	; 26ca <phys_cc1350+0x66>
		if (*fmt++ != '%')
    2cc8:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
		switch (*fmt++) {
    2ccc:	6d030602 	stcvs	6, cr0, [r3, #-8]
    2cd0:	13051520 	movwne	r1, #21792	; 0x5520
    2cd4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2cd8:	05053d06 	streq	r3, [r5, #-3334]	; 0xfffff2fa
    2cdc:	03050106 	movweq	r0, #20742	; 0x5106
    2ce0:	10023d06 	andne	r3, r2, r6, lsl #26
    2ce4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
}
    2ce8:	0205003a 	andeq	r0, r5, #58	; 0x3a
		switch (*fmt++) {
    2cec:	00000000 	andeq	r0, r0, r0
    2cf0:	0104a803 	tsteq	r4, r3, lsl #16
    2cf4:	13140205 	tstne	r4, #1342177280	; 0x50000000
    2cf8:	3a050114 	bcc	143150 <__ccfg+0x1231a8>
			while (isspace (*buf)) buf++;
    2cfc:	05201b06 	streq	r1, [r0, #-2822]!	; 0xfffff4fa
    2d00:	06202502 	strteq	r2, [r0], -r2, lsl #10
    2d04:	0627064a 	strteq	r0, [r7], -sl, asr #12
    2d08:	143c7903 	ldrtne	r7, [ip], #-2307	; 0xfffff6fd
    2d0c:	06011514 			; <UNDEFINED> instruction: 0x06011514
    2d10:	2e064a58 			; <UNDEFINED> instruction: 0x2e064a58
			if (*buf == '\0')
    2d14:	0605142e 	streq	r1, [r5], -lr, lsr #8
			if (*buf != ',') {
    2d18:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
			sap = va_arg (ap, char*);
    2d1c:	300a052e 	andcc	r0, sl, lr, lsr #10
			nc++;
    2d20:	41060305 	tstmi	r6, r5, lsl #6
			if (*buf != ',') {
    2d24:	2b080513 	blcs	204178 <__ccfg+0x1e41d0>
				while (!isspace (*buf) && *buf != ',' &&
    2d28:	01060a05 	tsteq	r6, r5, lsl #20
    2d2c:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    2d30:	3d330602 	ldccc	6, cr0, [r3, #-8]!
    2d34:	01061305 	tsteq	r6, r5, lsl #6
    2d38:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    2d3c:	13060105 	movwne	r0, #24837	; 0x6105
    2d40:	01000b02 	tsteq	r0, r2, lsl #22
			while (isspace (*buf)) buf++;
    2d44:	00430501 	subeq	r0, r3, r1, lsl #10
    2d48:	18380205 	ldmdane	r8!, {r0, r2, r9}
    2d4c:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
    2d50:	02050104 	andeq	r0, r5, #4, 2
    2d54:	06050516 			; <UNDEFINED> instruction: 0x06050516
			if (*buf == ',') buf++;
    2d58:	2f0f0501 	svccs	0x000f0501
    2d5c:	053b2605 	ldreq	r2, [fp, #-1541]!	; 0xfffff9fb
			*sap = '\0';
    2d60:	0205211d 	andeq	r2, r5, #1073741831	; 0x40000007
			break;
    2d64:	10053106 	andne	r3, r5, r6, lsl #2
		    case 'd': scani (word); break;
    2d68:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2d6c:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    2d70:	0a050106 	beq	143190 <__ccfg+0x1231e8>
    2d74:	3201052b 	andcc	r0, r1, #180355072	; 0xac00000
    2d78:	01000402 	tsteq	r0, r2, lsl #8
    2d7c:	003c0501 	eorseq	r0, ip, r1, lsl #10
    2d80:	185c0205 	ldmdane	ip, {r0, r2, r9}^
    2d84:	d5030000 	strle	r0, [r3, #-0]
    2d88:	02050104 	andeq	r0, r5, #4, 2
    2d8c:	14131319 	ldrne	r1, [r3], #-793	; 0xfffffce7
    2d90:	063c0501 	ldrteq	r0, [ip], -r1, lsl #10
    2d94:	20207503 	eorcs	r7, r0, r3, lsl #10
    2d98:	0b030205 	bleq	c35b4 <__ccfg+0xa360c>
    2d9c:	4a062020 	bmi	18ae24 <__ccfg+0x16ae7c>
    2da0:	20130306 	andscs	r0, r3, r6, lsl #6
    2da4:	3c6d0306 	stclcc	3, cr0, [sp], #-24	; 0xffffffe8
    2da8:	04051314 	streq	r1, [r5], #-788	; 0xfffffcec
    2dac:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2db0:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    2db4:	03050106 	movweq	r0, #20742	; 0x5106
    2db8:	06053006 	streq	r3, [r5], -r6
    2dbc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    2dc0:	053d4b06 	ldreq	r4, [sp, #-2822]!	; 0xfffff4fa
    2dc4:	013d3302 	teqeq	sp, r2, lsl #6
    2dc8:	14061501 	strne	r1, [r6], #-1281	; 0xfffffaff
    2dcc:	051e0405 	ldreq	r0, [lr, #-1029]	; 0xfffffbfb
    2dd0:	01300602 	teqeq	r0, r2, lsl #12
    2dd4:	064a4a06 	strbeq	r4, [sl], -r6, lsl #20
		    case 'u': scanu (word); break;
    2dd8:	3e132e2e 	cdpcc	14, 1, cr2, cr3, cr14, {1}
    2ddc:	13062205 	movwne	r2, #25093	; 0x6205
    2de0:	05571505 	ldrbeq	r1, [r7, #-1285]	; 0xfffffafb
    2de4:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    2de8:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    2dec:	2e70030a 	cdpcs	3, 7, cr0, cr0, cr10, {0}
    2df0:	01000b02 	tsteq	r0, r2, lsl #22
    2df4:	00380501 	eorseq	r0, r8, r1, lsl #10
    2df8:	00000205 	andeq	r0, r0, r5, lsl #4
    2dfc:	fc030000 	stc2	0, cr0, [r3], {-0}
    2e00:	02050104 	andeq	r0, r5, #4, 2
    2e04:	13131316 	tstne	r3, #1476395008	; 0x58000000
    2e08:	38050114 	stmdacc	r5, {r2, r4, r8}
    2e0c:	20770306 	rsbscs	r0, r7, r6, lsl #6
    2e10:	09030205 	stmdbeq	r3, {r0, r2, r9}
    2e14:	4a062020 	bmi	18ae9c <__ccfg+0x16aef4>
    2e18:	03060305 	movweq	r0, #25349	; 0x6305
    2e1c:	02052e09 	andeq	r2, r5, #9, 28	; 0x90
		    case 'x': scanx (word); break;
    2e20:	2e770306 	cdpcs	3, 7, cr0, cr7, cr6, {0}
    2e24:	1a051414 	bne	147e7c <__ccfg+0x127ed4>
    2e28:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2e2c:	06030520 	streq	r0, [r3], -r0, lsr #10
    2e30:	1902052f 	stmdbne	r2, {r0, r1, r2, r3, r5, r8, sl}
    2e34:	061b0513 			; <UNDEFINED> instruction: 0x061b0513
    2e38:	20050501 	andcs	r0, r5, r1, lsl #10
    2e3c:	03060305 	movweq	r0, #25349	; 0x6305
    2e40:	0505200a 	streq	r2, [r5, #-10]
    2e44:	01750306 	cmneq	r5, r6, lsl #6
    2e48:	0b030a05 	bleq	c5664 <__ccfg+0xa56bc>
    2e4c:	061a0520 	ldreq	r0, [sl], -r0, lsr #10
    2e50:	06030520 	streq	r0, [r3], -r0, lsr #10
    2e54:	06040501 	streq	r0, [r4], -r1, lsl #10
    2e58:	062c052f 	strteq	r0, [ip], -pc, lsr #10
    2e5c:	21060511 	tstcs	r6, r1, lsl r5
    2e60:	1f062a05 	svcne	0x00062a05
    2e64:	6f030905 	svcvs	0x00030905
    2e68:	06210520 	strteq	r0, [r1], -r0, lsr #10
    2e6c:	200c0501 	andcs	r0, ip, r1, lsl #10
    2e70:	2f060305 	svccs	0x00060305
    2e74:	01062005 	tsteq	r6, r5
    2e78:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    2e7c:	06052020 	streq	r2, [r5], -r0, lsr #32
    2e80:	06020520 	streq	r0, [r2], -r0, lsr #10
    2e84:	05051333 	streq	r1, [r5, #-819]	; 0xfffffccd
    2e88:	03050106 	movweq	r0, #20742	; 0x5106
    2e8c:	05422a06 	strbeq	r2, [r2, #-2566]	; 0xfffff5fa
    2e90:	050f0605 	streq	r0, [pc, #-1541]	; 2893 <__outserial+0x1b>
    2e94:	1a05230a 	bne	14bac4 <__ccfg+0x12bb1c>
			switch (*fmt++) {
    2e98:	03052006 	movweq	r2, #20486	; 0x5006
    2e9c:	01050106 	tsteq	r5, r6, lsl #2
    2ea0:	052e0d03 	streq	r0, [lr, #-3331]!	; 0xfffff2fd
    2ea4:	74030604 	strvc	r0, [r3], #-1540	; 0xfffff9fc
    2ea8:	06080520 	streq	r0, [r8], -r0, lsr #10
    2eac:	20070501 	andcs	r0, r7, r1, lsl #10
		    	    case 'd': scani (lword); break;
    2eb0:	2f060505 	svccs	0x00060505
    2eb4:	10062c05 	andne	r2, r6, r5, lsl #24
    2eb8:	05220705 	streq	r0, [r2, #-1797]!	; 0xfffff8fb
    2ebc:	021e062a 	andseq	r0, lr, #44040192	; 0x2a00000
    2ec0:	0101000a 	tsteq	r1, sl
    2ec4:	05003805 	streq	r3, [r0, #-2053]	; 0xfffff7fb
    2ec8:	00000002 	andeq	r0, r0, r2
    2ecc:	05a30300 	streq	r0, [r3, #768]!	; 0x300
    2ed0:	16020501 	strne	r0, [r2], -r1, lsl #10
    2ed4:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    2ed8:	06380501 	ldrteq	r0, [r8], -r1, lsl #10
    2edc:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    2ee0:	20090302 	andcs	r0, r9, r2, lsl #6
    2ee4:	054a0620 	strbeq	r0, [sl, #-1568]	; 0xfffff9e0
    2ee8:	09030603 	stmdbeq	r3, {r0, r1, r9, sl}
    2eec:	0602052e 	streq	r0, [r2], -lr, lsr #10
    2ef0:	142e7703 	strtne	r7, [lr], #-1795	; 0xfffff8fd
    2ef4:	061a0514 			; <UNDEFINED> instruction: 0x061a0514
    2ef8:	20050501 	andcs	r0, r5, r1, lsl #10
    2efc:	2f060305 	svccs	0x00060305
    2f00:	05190205 	ldreq	r0, [r9, #-517]	; 0xfffffdfb
    2f04:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2f08:	3805201b 	stmdacc	r5, {r0, r1, r3, r4, sp}
		    	    case 'x': scanx (lword); break;
    2f0c:	05206b03 	streq	r6, [r0, #-2819]!	; 0xfffff4fd
    2f10:	b3030603 	movwlt	r0, #13827	; 0x3603
    2f14:	0505207c 	streq	r2, [r5, #-124]	; 0xffffff84
    2f18:	03050106 	movweq	r0, #20742	; 0x5106
    2f1c:	06052106 	streq	r2, [r5], -r6, lsl #2
    2f20:	03050106 	movweq	r0, #20742	; 0x5106
    2f24:	11053106 	tstne	r5, r6, lsl #2
    2f28:	06130529 	ldreq	r0, [r3], -r9, lsr #10
    2f2c:	060f0501 	streq	r0, [pc], -r1, lsl #10
    2f30:	06050520 	streq	r0, [r5], -r0, lsr #10
    2f34:	06090513 			; <UNDEFINED> instruction: 0x06090513
    2f38:	2003dc03 	andcs	sp, r3, r3, lsl #24
    2f3c:	01062105 	tsteq	r6, r5, lsl #2
    2f40:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
    2f44:	052f0603 	streq	r0, [pc, #-1539]!	; 2949 <__inserial+0x61>
    2f48:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    2f4c:	20052006 	andcs	r2, r5, r6
    2f50:	20060520 	andcs	r0, r6, r0, lsr #10
    2f54:	33060205 	movwcc	r0, #25093	; 0x6205
    2f58:	01061b05 	tsteq	r6, r5, lsl #22
    2f5c:	2b060305 	blcs	183b78 <__ccfg+0x163bd0>
    2f60:	03060105 	movweq	r0, #24837	; 0x6105
    2f64:	02053c0a 	andeq	r3, r5, #2560	; 0xa00
    2f68:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    2f6c:	19050106 	stmdbne	r5, {r1, r2, r8}
    2f70:	02052006 	andeq	r2, r5, #6
    2f74:	01050106 	tsteq	r5, r6, lsl #2
    2f78:	052e0a03 	streq	r0, [lr, #-2563]!	; 0xfffff5fd
		    	    case 'd': scani (lword); break;
    2f7c:	77030603 	strvc	r0, [r3, -r3, lsl #12]
    2f80:	061e052e 	ldreq	r0, [lr], -lr, lsr #10
    2f84:	20060501 	andcs	r0, r6, r1, lsl #10
    2f88:	30060405 	andcc	r0, r6, r5, lsl #8
    2f8c:	0606052f 	streq	r0, [r6], -pc, lsr #10
    2f90:	06040501 	streq	r0, [r4], -r1, lsl #10
    2f94:	1b290521 	blne	a44420 <__ccfg+0xa24478>
		    	    case 'u': scanu (lword); break;
    2f98:	01062b05 	tsteq	r6, r5, lsl #22
    2f9c:	01000a02 	tsteq	r0, r2, lsl #20
    2fa0:	00160501 	andseq	r0, r6, r1, lsl #10
    2fa4:	18dc0205 	ldmne	ip, {r0, r2, r9}^
    2fa8:	cd030000 	stcgt	0, cr0, [r3, #-0]
    2fac:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
    2fb0:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    2fb4:	16050114 			; <UNDEFINED> instruction: 0x16050114
    2fb8:	207a0306 	rsbscs	r0, sl, r6, lsl #6
    2fbc:	42020520 	andmi	r0, r2, #32, 10	; 0x8000000
    2fc0:	064a0620 	strbeq	r0, [sl], -r0, lsr #12
    2fc4:	14380624 	ldrtne	r0, [r8], #-1572	; 0xfffff9dc
    2fc8:	58060114 	stmdapl	r6, {r2, r4, r8}
    2fcc:	2e2e064a 	cfmadda32cs	mvax2, mvax0, mvfx14, mvfx10
    2fd0:	060e0516 			; <UNDEFINED> instruction: 0x060e0516
    2fd4:	06020501 	streq	r0, [r2], -r1, lsl #10
    2fd8:	060d052f 	streq	r0, [sp], -pc, lsr #10
    2fdc:	1e0e0514 	mcrne	5, 0, r0, cr14, cr4, {0}
		    	    case 'x': scanx (lword); break;
    2fe0:	30060205 	andcc	r0, r6, r5, lsl #4
    2fe4:	01060d05 	tsteq	r6, r5, lsl #26
			if ((c = *buf++) == '\0')
    2fe8:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    2fec:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
			sap = va_arg (ap, char*);
    2ff0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
			nc++;
    2ff4:	01054e0a 	tsteq	r5, sl, lsl #28
			break;
    2ff8:	05202103 	streq	r2, [r0, #-259]!	; 0xfffffefd
			while (isspace (*buf)) buf++;
    2ffc:	5c030604 	stcpl	6, cr0, [r3], {4}
    3000:	17033d2e 	strne	r3, [r3, -lr, lsr #26]
    3004:	03020501 	movweq	r0, #9473	; 0x2501
						*sap++ = *buf++;
    3008:	3c012e6e 	stccc	14, cr2, [r1], {110}	; 0x6e
    300c:	010b032e 	tsteq	fp, lr, lsr #6
			while (isspace (*buf)) buf++;
    3010:	01060b05 	tsteq	r6, r5, lsl #22
    3014:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
    3018:	0505200b 	streq	r2, [r5, #-11]
		return 0;
    301c:	06030558 			; <UNDEFINED> instruction: 0x06030558
    3020:	06060522 	streq	r0, [r6], -r2, lsr #10
		    case 'x': scanx (word); break;
    3024:	06040501 	streq	r0, [r4], -r1, lsl #10
    3028:	5002054e 	andpl	r0, r2, lr, asr #10
		    	    case 'x': scanx (lword); break;
    302c:	01061005 	tsteq	r6, r5
    3030:	2f060205 	svccs	0x00060205
    3034:	01060505 	tsteq	r6, r5, lsl #10
    3038:	21060305 	tstcs	r6, r5, lsl #6
    303c:	01061a05 	tsteq	r6, r5, lsl #20
    3040:	4b060205 	blmi	18385c <__ccfg+0x1638b4>
    3044:	01061b05 	tsteq	r6, r5, lsl #22
    3048:	1f2f1505 	svcne	0x002f1505
    304c:	21060205 	tstcs	r6, r5, lsl #4
    3050:	06090514 			; <UNDEFINED> instruction: 0x06090514
    3054:	000c0201 	andeq	r0, ip, r1, lsl #4
    3058:	44050101 	strmi	r0, [r5], #-257	; 0xfffffeff
    305c:	00020500 	andeq	r0, r2, r0, lsl #10
    3060:	03000000 	movweq	r0, #0
    3064:	05010687 	streq	r0, [r1, #-1671]	; 0xfffff979
    3068:	44051602 	strmi	r1, [r5], #-1538	; 0xfffff9fe
    306c:	05200e06 	streq	r0, [r0, #-3590]!	; 0xfffff1fa
    3070:	05260602 	streq	r0, [r6, #-1538]!	; 0xfffff9fe
    3074:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    3078:	2e7a0344 	cdpcs	3, 7, cr0, cr10, cr4, {2}
    307c:	03060205 	movweq	r0, #25093	; 0x6205
    3080:	05054a09 	streq	r4, [r5, #-2569]	; 0xfffff5f7
    3084:	03050106 	movweq	r0, #20742	; 0x5106
    3088:	05672f06 	strbeq	r2, [r7, #-3846]!	; 0xfffff0fa
    308c:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    3090:	05670603 	strbeq	r0, [r7, #-1539]!	; 0xfffff9fd
    3094:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    3098:	055b0602 	ldrbeq	r0, [fp, #-1538]	; 0xfffff9fe
    309c:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    30a0:	01010002 	tsteq	r1, r2
    30a4:	05004b05 	streq	r4, [r0, #-2821]	; 0xfffff4fb
    30a8:	00000002 	andeq	r0, r0, r2
    30ac:	06990300 	ldreq	r0, [r9], r0, lsl #6
    30b0:	16020501 	strne	r0, [r2], -r1, lsl #10
    30b4:	064b0514 			; <UNDEFINED> instruction: 0x064b0514
    30b8:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    30bc:	4b05261a 	blmi	14c92c <__ccfg+0x12c984>
    30c0:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    30c4:	09030602 	stmdbeq	r3, {r1, r9, sl}
    30c8:	0605054a 	streq	r0, [r5], -sl, asr #10
    30cc:	06030501 	streq	r0, [r3], -r1, lsl #10
    30d0:	1605672f 	strne	r6, [r5], -pc, lsr #14
    30d4:	03050106 	movweq	r0, #20742	; 0x5106
    30d8:	16056706 	strne	r6, [r5], -r6, lsl #14
    30dc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    30e0:	01055a06 	tsteq	r5, r6, lsl #20
    30e4:	02021306 	andeq	r1, r2, #402653184	; 0x18000000
    30e8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    30ec:	02050031 	andeq	r0, r5, #49	; 0x31
    30f0:	00000000 	andeq	r0, r0, r0
    30f4:	0106aa03 	tsteq	r6, r3, lsl #20
    30f8:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    30fc:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3100:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3104:	023d0601 	eorseq	r0, sp, #1048576	; 0x100000
    3108:	01010001 	tsteq	r1, r1
    310c:	05004805 	streq	r4, [r0, #-2053]	; 0xfffff7fb
    3110:	00199802 	andseq	r9, r9, r2, lsl #16
    3114:	06d10300 	ldrbeq	r0, [r1], r0, lsl #6
    3118:	06020501 	streq	r0, [r2], -r1, lsl #10
    311c:	1c480524 	cfstr64ne	mvdx0, [r8], {36}	; 0x24
    3120:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    3124:	06480501 	strbeq	r0, [r8], -r1, lsl #10
    3128:	0205200e 	andeq	r2, r5, #14
    312c:	4a062024 	bmi	18b1c4 <__ccfg+0x16b21c>
    3130:	0105134a 	tsteq	r5, sl, asr #6
    3134:	13051306 	movwne	r1, #21254	; 0x5306
    3138:	0006022d 	andeq	r0, r6, sp, lsr #4
    313c:	46050101 	strmi	r0, [r5], -r1, lsl #2
    3140:	c4020500 	strgt	r0, [r2], #-1280	; 0xfffffb00
    3144:	03000019 	movweq	r0, #25
    3148:	050106b2 	streq	r0, [r1, #-1714]	; 0xfffff94e
    314c:	46051702 	strmi	r1, [r5], -r2, lsl #14
    3150:	05050d06 	streq	r0, [r5, #-3334]	; 0xfffff2fa
    3154:	06030525 	streq	r0, [r3], -r5, lsr #10
    3158:	0606052f 	streq	r0, [r6], -pc, lsr #10
    315c:	06030501 	streq	r0, [r3], -r1, lsl #10
    3160:	06060530 			; <UNDEFINED> instruction: 0x06060530
    3164:	06040501 	streq	r0, [r4], -r1, lsl #10
    3168:	0705132f 	streq	r1, [r5, -pc, lsr #6]
    316c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    3170:	0b053006 	bleq	14f190 <__ccfg+0x12f1e8>
    3174:	07050106 	streq	r0, [r5, -r6, lsl #2]
    3178:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
    317c:	060c0522 	streq	r0, [ip], -r2, lsr #10
    3180:	03010501 	movweq	r0, #5377	; 0x1501
    3184:	03052009 	movweq	r2, #20489	; 0x5009
    3188:	207a0306 	rsbscs	r0, sl, r6, lsl #6
    318c:	01060605 	tsteq	r6, r5, lsl #12
    3190:	30060305 	andcc	r0, r6, r5, lsl #6
    3194:	01061305 	tsteq	r6, r5, lsl #6
    3198:	4c060205 	sfmmi	f0, 4, [r6], {5}
    319c:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    31a0:	05134a4a 	ldreq	r4, [r3, #-2634]	; 0xfffff5b6
    31a4:	05010637 	streq	r0, [r1, #-1591]	; 0xfffff9c9
    31a8:	09052101 	stmdbeq	r5, {r0, r8, sp}
    31ac:	030b052d 	movweq	r0, #46381	; 0xb52d
    31b0:	0b023c71 	bleq	9237c <__ccfg+0x723d4>
    31b4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    31b8:	0205003d 	andeq	r0, r5, #61	; 0x3d
    31bc:	00000000 	andeq	r0, r0, r0
    31c0:	0106d903 	tsteq	r6, r3, lsl #18
    31c4:	01160205 	tsteq	r6, r5, lsl #4
    31c8:	1c063d05 	stcne	13, cr3, [r6], {5}
    31cc:	20240205 	eorcs	r0, r4, r5, lsl #4
    31d0:	134a4a06 	movtne	r4, #43526	; 0xaa06
    31d4:	01062505 	tsteq	r6, r5, lsl #10
    31d8:	67060205 	strvs	r0, [r6, -r5, lsl #4]
    31dc:	01064305 	tsteq	r6, r5, lsl #6
    31e0:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
    31e4:	22052e43 	andcs	r2, r5, #1072	; 0x430
    31e8:	4b01052e 	blmi	446a8 <__ccfg+0x24700>
    31ec:	01000502 	tsteq	r0, r2, lsl #10
    31f0:	003d0501 	eorseq	r0, sp, r1, lsl #10
    31f4:	00000205 	andeq	r0, r0, r5, lsl #4
    31f8:	e2030000 	and	r0, r3, #0
    31fc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3200:	3d050116 	stfccs	f0, [r5, #-88]	; 0xffffffa8
    3204:	02051c06 	andeq	r1, r5, #1536	; 0x600
    3208:	4a062024 	bmi	18b2a0 <__ccfg+0x16b2f8>
    320c:	2205134a 	andcs	r1, r5, #671088641	; 0x28000001
    3210:	01050106 	tsteq	r5, r6, lsl #2
    3214:	00050267 	andeq	r0, r5, r7, ror #4
    3218:	40050101 	andmi	r0, r5, r1, lsl #2
    321c:	00020500 	andeq	r0, r2, r0, lsl #10
    3220:	03000000 	movweq	r0, #0
    3224:	050106ea 	streq	r0, [r1, #-1770]	; 0xfffff916
    3228:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    322c:	7a030640 	bvc	c4b34 <__ccfg+0xa4b8c>
    3230:	0c052001 	stceq	0, cr2, [r5], {1}
    3234:	03400526 	movteq	r0, #1318	; 0x526
    3238:	0c052e7a 	stceq	14, cr2, [r5], {122}	; 0x7a
    323c:	2e050526 	cfsh32cs	mvfx0, mvfx5, #22
    3240:	33060205 	movwcc	r0, #25093	; 0x6205
    3244:	06110584 	ldreq	r0, [r1], -r4, lsl #11
    3248:	31020501 	tstcc	r2, r1, lsl #10
    324c:	051d1105 	ldreq	r1, [sp, #-261]	; 0xfffffefb
    3250:	13210602 			; <UNDEFINED> instruction: 0x13210602
    3254:	11061a05 	tstne	r6, r5, lsl #20
    3258:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    325c:	0609053d 			; <UNDEFINED> instruction: 0x0609053d
    3260:	21010501 	tstcs	r1, r1, lsl #10
    3264:	01000202 	tsteq	r0, r2, lsl #4
    3268:	003e0501 	eorseq	r0, lr, r1, lsl #10
    326c:	00000205 	andeq	r0, r0, r5, lsl #4
    3270:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    3274:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3278:	00030216 	andeq	r0, r3, r6, lsl r2
    327c:	45050101 	strmi	r0, [r5, #-257]	; 0xfffffeff
    3280:	24020500 	strcs	r0, [r2], #-1280	; 0xfffffb00
    3284:	0300001a 	movweq	r0, #26
    3288:	05010785 	streq	r0, [r1, #-1925]	; 0xfffff87b
    328c:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    3290:	7a030645 	bvc	c4bac <__ccfg+0xa4c04>
    3294:	05052e01 	streq	r2, [r5, #-3585]	; 0xfffff1ff
    3298:	06030526 	streq	r0, [r3], -r6, lsr #10
    329c:	06060531 			; <UNDEFINED> instruction: 0x06060531
    32a0:	06040501 	streq	r0, [r4], -r1, lsl #10
    32a4:	0603052f 	streq	r0, [r3], -pc, lsr #10
    32a8:	012e062f 			; <UNDEFINED> instruction: 0x012e062f
    32ac:	4a062e06 	bmi	18eacc <__ccfg+0x16eb24>
    32b0:	011d033c 	tsteq	sp, ip, lsr r3
    32b4:	01060c05 	tsteq	r6, r5, lsl #24
    32b8:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    32bc:	0105350a 	tsteq	r5, sl, lsl #10
    32c0:	06040527 	streq	r0, [r4], -r7, lsr #10
    32c4:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
    32c8:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    32cc:	12053104 	andne	r3, r5, #4, 2
    32d0:	0604051d 			; <UNDEFINED> instruction: 0x0604051d
    32d4:	061d0530 			; <UNDEFINED> instruction: 0x061d0530
    32d8:	06040501 	streq	r0, [r4], -r1, lsl #10
    32dc:	0b052f3d 	bleq	14efd8 <__ccfg+0x12f030>
    32e0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    32e4:	0b054106 	bleq	153704 <__ccfg+0x13375c>
    32e8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    32ec:	0603052e 	streq	r0, [r3], -lr, lsr #10
    32f0:	060a052f 	streq	r0, [sl], -pc, lsr #10
    32f4:	00090201 	andeq	r0, r9, r1, lsl #4
    32f8:	48050101 	stmdami	r5, {r0, r8}
    32fc:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    3300:	0300001a 	movweq	r0, #26
    3304:	05010986 	streq	r0, [r1, #-2438]	; 0xfffff67a
    3308:	05141802 	ldreq	r1, [r4, #-2050]	; 0xfffff7fe
    330c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3310:	20780348 	rsbscs	r0, r8, r8, asr #6
    3314:	28050520 	stmdacs	r5, {r5, r8, sl}
    3318:	05203105 	streq	r3, [r0, #-261]!	; 0xfffffefb
    331c:	03052025 	movweq	r2, #20517	; 0x5025
    3320:	35063d06 	strcc	r3, [r6, #-3334]	; 0xfffff2fa
    3324:	29060205 	stmdbcs	r6, {r0, r2, r9}
    3328:	01061105 	tsteq	r6, r5, lsl #2
    332c:	2f060205 	svccs	0x00060205
    3330:	01061105 	tsteq	r6, r5, lsl #2
    3334:	05222105 	streq	r2, [r2, #-261]!	; 0xfffffefb
    3338:	02051e11 	andeq	r1, r5, #272	; 0x110
    333c:	21053006 	tstcs	r5, r6
    3340:	10050106 	andne	r0, r5, r6, lsl #2
    3344:	0602052e 	streq	r0, [r2], -lr, lsr #10
    3348:	0605053d 			; <UNDEFINED> instruction: 0x0605053d
    334c:	06030501 	streq	r0, [r3], -r1, lsl #10
    3350:	3d020521 	cfstr32cc	mvfx0, [r2, #-132]	; 0xffffff7c
    3354:	06010534 			; <UNDEFINED> instruction: 0x06010534
    3358:	000b0213 	andeq	r0, fp, r3, lsl r2
    335c:	44050101 	strmi	r0, [r5], #-257	; 0xfffffeff
    3360:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
    3364:	0300001a 	movweq	r0, #26
    3368:	050109a0 	streq	r0, [r1, #-2464]	; 0xfffff660
    336c:	13131702 	tstne	r3, #524288	; 0x80000
    3370:	44050114 	strmi	r0, [r5], #-276	; 0xfffffeec
    3374:	01770306 	cmneq	r7, r6, lsl #6
    3378:	09030205 	stmdbeq	r3, {r0, r2, r9}
    337c:	0344052e 	movteq	r0, #17710	; 0x452e
    3380:	02052077 	andeq	r2, r5, #119	; 0x77
    3384:	204a0903 	subcs	r0, sl, r3, lsl #18
    3388:	03054a06 	movweq	r4, #23046	; 0x5a06
    338c:	200d0306 	andcs	r0, sp, r6, lsl #6
    3390:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
    3394:	05470603 	strbeq	r0, [r7, #-1539]	; 0xfffff9fd
    3398:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    339c:	28053c06 	stmdacs	r5, {r1, r2, sl, fp, ip, sp}
    33a0:	20780306 	rsbscs	r0, r8, r6, lsl #6
    33a4:	05011e05 	streq	r1, [r1, #-3589]	; 0xfffff1fb
    33a8:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    33ac:	2e16030a 	cdpcs	3, 1, cr0, cr6, cr10, {0}
    33b0:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
    33b4:	06030520 	streq	r0, [r3], -r0, lsr #10
    33b8:	013c6703 	teqeq	ip, r3, lsl #14
    33bc:	05132e58 	ldreq	r2, [r3, #-3672]	; 0xfffff1a8
    33c0:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    33c4:	02057406 	andeq	r7, r5, #100663296	; 0x6000000
    33c8:	05054206 	streq	r4, [r5, #-518]	; 0xfffffdfa
    33cc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    33d0:	0c053606 	stceq	6, cr3, [r5], {6}
    33d4:	16050106 	strne	r0, [r5], -r6, lsl #2
    33d8:	2e12052e 	cfmul64cs	mvdx0, mvdx2, mvdx14
    33dc:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    33e0:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    33e4:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    33e8:	02054a05 	andeq	r4, r5, #20480	; 0x5000
    33ec:	05683206 	strbeq	r3, [r8, #-518]!	; 0xfffffdfa
    33f0:	02010609 	andeq	r0, r1, #9437184	; 0x900000
    33f4:	0101000a 	tsteq	r1, sl
    33f8:	05003e05 	streq	r3, [r0, #-3589]	; 0xfffff1fb
    33fc:	001b7802 	andseq	r7, fp, r2, lsl #16
    3400:	09d10300 	ldmibeq	r1, {r8, r9}^
    3404:	17020501 	strne	r0, [r2, -r1, lsl #10]
    3408:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    340c:	7803063e 	stmdavc	r3, {r1, r2, r3, r4, r5, r9, sl}
    3410:	28020520 	stmdacs	r2, {r5, r8, sl}
    3414:	4a4a0620 	bmi	1284c9c <__ccfg+0x1264cf4>
    3418:	06050514 			; <UNDEFINED> instruction: 0x06050514
    341c:	06020501 	streq	r0, [r2], -r1, lsl #10
    3420:	0604053d 			; <UNDEFINED> instruction: 0x0604053d
    3424:	06020501 	streq	r0, [r2], -r1, lsl #10
    3428:	06050521 	streq	r0, [r5], -r1, lsr #10
    342c:	06020501 	streq	r0, [r2], -r1, lsl #10
    3430:	060a0533 			; <UNDEFINED> instruction: 0x060a0533
    3434:	06020501 	streq	r0, [r2], -r1, lsl #10
    3438:	01012f2f 	tsteq	r1, pc, lsr #30
    343c:	06090513 			; <UNDEFINED> instruction: 0x06090513
    3440:	21010501 	tstcs	r1, r1, lsl #10
    3444:	79030a05 	stmdbvc	r3, {r0, r2, r9, fp}
    3448:	00090220 	andeq	r0, r9, r0, lsr #4
    344c:	34050101 	strcc	r0, [r5], #-257	; 0xfffffeff
    3450:	b8020500 	stmdalt	r2, {r8, sl}
    3454:	0300001b 	movweq	r0, #27
    3458:	050109e8 	streq	r0, [r1, #-2536]	; 0xfffff618
    345c:	14131602 	ldrne	r1, [r3], #-1538	; 0xfffff9fe
    3460:	06340501 	ldrteq	r0, [r4], -r1, lsl #10
    3464:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
    3468:	06202702 	strteq	r2, [r0], -r2, lsl #14
    346c:	05144a4a 	ldreq	r4, [r4, #-2634]	; 0xfffff5b6
    3470:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3474:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    3478:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    347c:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    3480:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3484:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    3488:	0510060a 	ldreq	r0, [r0, #-1546]	; 0xfffff9f6
    348c:	01053009 	tsteq	r5, r9
    3490:	00070221 	andeq	r0, r7, r1, lsr #4
    3494:	35050101 	strcc	r0, [r5, #-257]	; 0xfffffeff
    3498:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    349c:	0300001b 	movweq	r0, #27
    34a0:	050109f9 	streq	r0, [r1, #-2553]	; 0xfffff607
    34a4:	35051602 	strcc	r1, [r5, #-1538]	; 0xfffff9fe
    34a8:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
    34ac:	2c0c0526 	cfstr32cs	mvfx0, [ip], {38}	; 0x26
    34b0:	30060205 	andcc	r0, r6, r5, lsl #4
    34b4:	4a4a0601 	bmi	1284cc0 <__ccfg+0x1264d18>
    34b8:	134a2e06 	movtne	r2, #44550	; 0xae06
    34bc:	3e060105 	adfccs	f0, f6, f5
    34c0:	022c0205 	eoreq	r0, ip, #1342177280	; 0x50000000
    34c4:	01010006 	tsteq	r1, r6
    34c8:	05003205 	streq	r3, [r0, #-517]	; 0xfffffdfb
    34cc:	00000002 	andeq	r0, r0, r2
    34d0:	0a840300 	beq	fe1040d8 <_estack+0xde0ff0d8>
    34d4:	16020501 	strne	r0, [r2], -r1, lsl #10
    34d8:	06320501 	ldrteq	r0, [r2], -r1, lsl #10
    34dc:	2402051c 	strcs	r0, [r2], #-1308	; 0xfffffae4
    34e0:	4a4a0620 	bmi	1284d68 <__ccfg+0x1264dc0>
    34e4:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
    34e8:	0177cc03 	cmneq	r7, r3, lsl #24
    34ec:	b4030905 	strlt	r0, [r3], #-2309	; 0xfffff6fb
    34f0:	02052008 	andeq	r2, r5, #8
    34f4:	77c90306 	strbvc	r0, [r9, r6, lsl #6]
    34f8:	0514133c 	ldreq	r1, [r4, #-828]	; 0xfffffcc4
    34fc:	05051303 	streq	r1, [r5, #-771]	; 0xfffffcfd
    3500:	03050106 	movweq	r0, #20742	; 0x5106
    3504:	06052106 	streq	r2, [r5], -r6, lsl #2
    3508:	03050106 	movweq	r0, #20742	; 0x5106
    350c:	11053106 	tstne	r5, r6, lsl #2
    3510:	06130529 	ldreq	r0, [r3], -r9, lsr #10
    3514:	060f0501 	streq	r0, [pc], -r1, lsl #10
    3518:	06050520 	streq	r0, [r5], -r0, lsr #10
    351c:	03010513 	movweq	r0, #5395	; 0x1513
    3520:	022008b4 	eoreq	r0, r0, #180, 16	; 0xb40000
    3524:	01010008 	tsteq	r1, r8
    3528:	05002805 	streq	r2, [r0, #-2053]	; 0xfffff7fb
    352c:	001c2802 	andseq	r2, ip, r2, lsl #16
    3530:	0a8c0300 	beq	fe304138 <_estack+0xde2ff138>
    3534:	03010501 	movweq	r0, #5377	; 0x1501
    3538:	0102011a 	tsteq	r2, sl, lsl r1
    353c:	23010100 	movwcs	r0, #4352	; 0x1100
    3540:	03000001 	movweq	r0, #1
    3544:	00008900 	andeq	r8, r0, r0, lsl #18
    3548:	fb010200 	blx	43d52 <__ccfg+0x23daa>
    354c:	01000d0e 	tsteq	r0, lr, lsl #26
    3550:	00010101 	andeq	r0, r1, r1, lsl #2
    3554:	00010000 	andeq	r0, r1, r0
    3558:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    355c:	2f656d6f 	svccs	0x00656d6f
    3560:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3564:	442f6e69 	strtmi	r6, [pc], #-3689	; 356c <TrimAfterColdResetWakeupFromShutDown+0x4c>
    3568:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    356c:	4f2f706f 	svcmi	0x002f706f
    3570:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3574:	502f5445 	eorpl	r5, pc, r5, asr #8
    3578:	534f4349 	movtpl	r4, #62281	; 0xf349
    357c:	6369502f 	cmnvs	r9, #47	; 0x2f
    3580:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    3584:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3588:	752f0058 	strvc	r0, [pc, #-88]!	; 3538 <TrimAfterColdResetWakeupFromShutDown+0x18>
    358c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 33c8 <NOROM_RFCRfTrimRead+0x14c>
    3590:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    3594:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    3598:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    359c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    35a0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    35a4:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    35a8:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    35ac:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    35b0:	00006564 	andeq	r6, r0, r4, ror #10
    35b4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    35b8:	5f707574 	svcpl	0x00707574
    35bc:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
    35c0:	00010063 	andeq	r0, r1, r3, rrx
    35c4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    35c8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    35cc:	00020068 	andeq	r0, r2, r8, rrx
    35d0:	01050000 	mrseq	r0, (UNDEF: 5)
    35d4:	2a020500 	bcs	849dc <__ccfg+0x64a34>
    35d8:	0300001c 	movweq	r0, #28
    35dc:	05010284 	streq	r0, [r1, #-644]	; 0xfffffd7c
    35e0:	05141605 	ldreq	r1, [r4, #-1541]	; 0xfffff9fb
    35e4:	0102100a 	tsteq	r2, sl
    35e8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    35ec:	02050001 	andeq	r0, r5, #1
    35f0:	00001c2c 	andeq	r1, r0, ip, lsr #24
    35f4:	01029603 	tsteq	r2, r3, lsl #12
    35f8:	14160505 	ldrne	r0, [r6], #-1285	; 0xfffffafb
    35fc:	02100a05 	andseq	r0, r0, #20480	; 0x5000
    3600:	01010001 	tsteq	r1, r1
    3604:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    3608:	001c2e02 	andseq	r2, ip, r2, lsl #28
    360c:	02a80300 	adceq	r0, r8, #0, 6
    3610:	16050501 	strne	r0, [r5], -r1, lsl #10
    3614:	100a0514 	andne	r0, sl, r4, lsl r5
    3618:	01000102 	tsteq	r0, r2, lsl #2
    361c:	00010501 	andeq	r0, r1, r1, lsl #10
    3620:	1c300205 	lfmne	f0, 4, [r0], #-20	; 0xffffffec
    3624:	d2030000 	andle	r0, r3, #0
    3628:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    362c:	01051713 	tsteq	r5, r3, lsl r7
    3630:	017a0306 	cmneq	sl, r6, lsl #6
    3634:	06260505 	strteq	r0, [r6], -r5, lsl #10
    3638:	0e051333 	mcreq	3, 0, r1, cr5, cr3, {1}
    363c:	05051f06 	streq	r1, [r5, #-3846]	; 0xfffff0fa
    3640:	061d0521 	ldreq	r0, [sp], -r1, lsr #10
    3644:	06050520 	streq	r0, [r5], -r0, lsr #10
    3648:	05360601 	ldreq	r0, [r6, #-1537]!	; 0xfffff9ff
    364c:	900d0304 	andls	r0, sp, r4, lsl #6
    3650:	05330505 	ldreq	r0, [r3, #-1285]!	; 0xfffffafb
    3654:	052f0601 	streq	r0, [pc, #-1537]!	; 305b <SafeHapiVoid+0x27>
    3658:	67030609 	strvs	r0, [r3, -r9, lsl #12]
    365c:	06160520 	ldreq	r0, [r6], -r0, lsr #10
    3660:	00100201 	andseq	r0, r0, r1, lsl #4
    3664:	01850101 	orreq	r0, r5, r1, lsl #2
    3668:	00030000 	andeq	r0, r3, r0
    366c:	0000017f 	andeq	r0, r0, pc, ror r1
    3670:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3674:	0101000d 	tsteq	r1, sp
    3678:	00000101 	andeq	r0, r0, r1, lsl #2
    367c:	00000100 	andeq	r0, r0, r0, lsl #2
    3680:	73752f01 	cmnvc	r5, #1, 30
    3684:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    3688:	63672f62 	cmnvs	r7, #392	; 0x188
    368c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    3690:	6f6e2d6d 	svcvs	0x006e2d6d
    3694:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3698:	2f696261 	svccs	0x00696261
    369c:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    36a0:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    36a4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    36a8:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    36ac:	2f656d6f 	svccs	0x00656d6f
    36b0:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    36b4:	442f6e69 	strtmi	r6, [pc], #-3689	; 36bc <NOROM_SetupSetVddrLevel+0x24>
    36b8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    36bc:	4f2f706f 	svcmi	0x002f706f
    36c0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    36c4:	502f5445 	eorpl	r5, pc, r5, asr #8
    36c8:	534f4349 	movtpl	r4, #62281	; 0xf349
    36cc:	6369502f 	cmnvs	r9, #47	; 0x2f
    36d0:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    36d4:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    36d8:	43432f58 	movtmi	r2, #16216	; 0x3f58
    36dc:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    36e0:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    36e4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    36e8:	6f682f00 	svcvs	0x00682f00
    36ec:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3540 <TrimAfterColdResetWakeupFromShutDown+0x20>
    36f0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    36f4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    36f8:	6f746b73 	svcvs	0x00746b73
    36fc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3700:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3704:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3708:	2f534f43 	svccs	0x00534f43
    370c:	4f636950 	svcmi	0x00636950
    3710:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3714:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3718:	6f682f00 	svcvs	0x00682f00
    371c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3570 <TrimAfterColdResetWakeupFromShutDown+0x50>
    3720:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3724:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3728:	6f746b73 	svcvs	0x00746b73
    372c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3730:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3734:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3738:	2f534f43 	svccs	0x00534f43
    373c:	4f636950 	svcmi	0x00636950
    3740:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
    3744:	2f656d6f 	svccs	0x00656d6f
    3748:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    374c:	442f6e69 	strtmi	r6, [pc], #-3689	; 3754 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x40>
    3750:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3754:	4f2f706f 	svcmi	0x002f706f
    3758:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    375c:	502f5445 	eorpl	r5, pc, r5, asr #8
    3760:	534f4349 	movtpl	r4, #62281	; 0xf349
    3764:	6369502f 	cmnvs	r9, #47	; 0x2f
    3768:	6b2f534f 	blvs	bd84ac <__ccfg+0xbb8504>
    376c:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    3770:	7300006c 	movwvc	r0, #108	; 0x6c
    3774:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    3778:	00682e74 	rsbeq	r2, r8, r4, ror lr
    377c:	68000001 	stmdavs	r0, {r0}
    3780:	63635f77 	cmnvs	r3, #476	; 0x1dc
    3784:	735f6766 	cmpvc	pc, #26738688	; 0x1980000
    3788:	6c706d69 	ldclvs	13, cr6, [r0], #-420	; 0xfffffe5c
    378c:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
    3790:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    3794:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3798:	72610000 	rsbvc	r0, r1, #0
    379c:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    37a0:	00000300 	andeq	r0, r0, r0, lsl #6
    37a4:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    37a8:	0300682e 	movweq	r6, #2094	; 0x82e
    37ac:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    37b0:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    37b4:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    37b8:	00000300 	andeq	r0, r0, r0, lsl #6
    37bc:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    37c0:	5f736e6f 	svcpl	0x00736e6f
    37c4:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    37c8:	00030068 	andeq	r0, r3, r8, rrx
    37cc:	73797300 	cmnvc	r9, #0, 6
    37d0:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    37d4:	00000400 	andeq	r0, r0, r0, lsl #8
    37d8:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    37dc:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    37e0:	00000500 	andeq	r0, r0, r0, lsl #10
    37e4:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    37e8:	0300632e 	movweq	r6, #814	; 0x32e
    37ec:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    37f0:	03000002 	movweq	r0, #2
    37f4:	0001c000 	andeq	ip, r1, r0
    37f8:	fb010200 	blx	44002 <__ccfg+0x2405a>
    37fc:	01000d0e 	tsteq	r0, lr, lsl #26
    3800:	00010101 	andeq	r0, r1, r1, lsl #2
    3804:	00010000 	andeq	r0, r1, r0
    3808:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    380c:	2f656d6f 	svccs	0x00656d6f
    3810:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3814:	442f6e69 	strtmi	r6, [pc], #-3689	; 381c <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>
    3818:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    381c:	4f2f706f 	svcmi	0x002f706f
    3820:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3824:	502f5445 	eorpl	r5, pc, r5, asr #8
    3828:	534f4349 	movtpl	r4, #62281	; 0xf349
    382c:	6369502f 	cmnvs	r9, #47	; 0x2f
    3830:	502f534f 	eorpl	r5, pc, pc, asr #6
    3834:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    3838:	6e65532f 	cdpvs	3, 6, cr5, cr5, cr15, {1}
    383c:	73726f73 	cmnvc	r2, #460	; 0x1cc
    3840:	6f682f00 	svcvs	0x00682f00
    3844:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3698 <NOROM_SetupSetVddrLevel>
    3848:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    384c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3850:	6f746b73 	svcvs	0x00746b73
    3854:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3858:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    385c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3860:	2f534f43 	svccs	0x00534f43
    3864:	4f636950 	svcmi	0x00636950
    3868:	43432f53 	movtmi	r2, #16211	; 0x3f53
    386c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3870:	6f682f00 	svcvs	0x00682f00
    3874:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 36c8 <NOROM_SetupSetVddrLevel+0x30>
    3878:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    387c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3880:	6f746b73 	svcvs	0x00746b73
    3884:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3888:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    388c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3890:	2f534f43 	svccs	0x00534f43
    3894:	4f636950 	svcmi	0x00636950
    3898:	43432f53 	movtmi	r2, #16211	; 0x3f53
    389c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    38a0:	3143432f 	cmpcc	r3, pc, lsr #6
    38a4:	57585833 	smmlarpl	r8, r3, r8, r5
    38a8:	2f455241 	svccs	0x00455241
    38ac:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    38b0:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    38b4:	752f0062 	strvc	r0, [pc, #-98]!	; 385a <NOROM_SetupGetTrimForAmpcompCtrl+0x2>
    38b8:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 36f4 <NOROM_SetupSetVddrLevel+0x5c>
    38bc:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    38c0:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    38c4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    38c8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    38cc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    38d0:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    38d4:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    38d8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    38dc:	2f006564 	svccs	0x00006564
    38e0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    38e4:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    38e8:	2f6e6974 	svccs	0x006e6974
    38ec:	6b736544 	blvs	1cdce04 <__ccfg+0x1cbce5c>
    38f0:	2f706f74 	svccs	0x00706f74
    38f4:	4f534c4f 	svcmi	0x00534c4f
    38f8:	2f54454e 	svccs	0x0054454e
    38fc:	4f434950 	svcmi	0x00434950
    3900:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3904:	00534f63 	subseq	r4, r3, r3, ror #30
    3908:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3854 <NOROM_SetupGetTrimForAmpcompTh1+0x10>
    390c:	616d2f65 	cmnvs	sp, r5, ror #30
    3910:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3914:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3918:	706f746b 	rsbvc	r7, pc, fp, ror #8
    391c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3920:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3924:	4349502f 	movtmi	r5, #36911	; 0x902f
    3928:	502f534f 	eorpl	r5, pc, pc, asr #6
    392c:	534f6369 	movtpl	r6, #62313	; 0xf369
    3930:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    3934:	006c656e 	rsbeq	r6, ip, lr, ror #10
    3938:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    393c:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
    3940:	2e726f73 	mrccs	15, 3, r6, cr2, cr3, {3}
    3944:	00010063 	andeq	r0, r1, r3, rrx
    3948:	736d6300 	cmnvc	sp, #0, 6
    394c:	675f7369 	ldrbvs	r7, [pc, -r9, ror #6]
    3950:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    3954:	00000200 	andeq	r0, r0, r0, lsl #4
    3958:	6f697067 	svcvs	0x00697067
    395c:	0300682e 	movweq	r6, #2094	; 0x82e
    3960:	74730000 	ldrbtvc	r0, [r3], #-0
    3964:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    3968:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    396c:	72610000 	rsbvc	r0, r1, #0
    3970:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    3974:	00000200 	andeq	r0, r0, r0, lsl #4
    3978:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    397c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3980:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    3984:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    3988:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    398c:	00000200 	andeq	r0, r0, r0, lsl #4
    3990:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    3994:	5f736e6f 	svcpl	0x00736e6f
    3998:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    399c:	00020068 	andeq	r0, r2, r8, rrx
    39a0:	73797300 	cmnvc	r9, #0, 6
    39a4:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    39a8:	00000500 	andeq	r0, r0, r0, lsl #10
    39ac:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    39b0:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    39b4:	00000600 	andeq	r0, r0, r0, lsl #12
    39b8:	00190500 	andseq	r0, r9, r0, lsl #10
    39bc:	00000205 	andeq	r0, r0, r5, lsl #4
    39c0:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
    39c4:	011b0501 	tsteq	fp, r1, lsl #10
    39c8:	01050101 	tsteq	r5, r1, lsl #2
    39cc:	01020106 	tsteq	r2, r6, lsl #2
    39d0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    39d4:	0205003f 	andeq	r0, r5, #63	; 0x3f
    39d8:	00000000 	andeq	r0, r0, r0
    39dc:	05011003 	streq	r1, [r1, #-3]
    39e0:	13131402 	tstne	r3, #33554432	; 0x2000000
    39e4:	063f0514 			; <UNDEFINED> instruction: 0x063f0514
    39e8:	20017a03 	andcs	r7, r1, r3, lsl #20
    39ec:	05260505 	streq	r0, [r6, #-1285]!	; 0xfffffafb
    39f0:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    39f4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    39f8:	044d0603 	strbeq	r0, [sp], #-1539	; 0xfffff9fd
    39fc:	00c10302 	sbceq	r0, r1, r2, lsl #6
    3a00:	03010401 	movweq	r0, #5121	; 0x1401
    3a04:	4b3d2040 	blmi	f4bb0c <__ccfg+0xf2bb64>
    3a08:	33030204 	movwcc	r0, #12804	; 0x3204
    3a0c:	03010401 	movweq	r0, #5121	; 0x1401
    3a10:	0205204e 	andeq	r2, r5, #78	; 0x4e
    3a14:	06070531 			; <UNDEFINED> instruction: 0x06070531
    3a18:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    3a1c:	018b030f 	orreq	r0, fp, pc, lsl #6
    3a20:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    3a24:	7ef50307 	cdpvc	3, 15, cr0, cr5, cr7, {0}
    3a28:	06020520 	streq	r0, [r2], -r0, lsr #10
    3a2c:	130b0521 	movwne	r0, #46369	; 0xb521
    3a30:	04130305 	ldreq	r0, [r3], #-773	; 0xfffffcfb
    3a34:	03290503 			; <UNDEFINED> instruction: 0x03290503
    3a38:	05010183 	streq	r0, [r1, #-387]	; 0xfffffe7d
    3a3c:	01041705 	tsteq	r4, r5, lsl #14
    3a40:	03060b05 	movweq	r0, #27397	; 0x6b05
    3a44:	04017ef8 	streq	r7, [r1], #-3832	; 0xfffff108
    3a48:	030f0503 	movweq	r0, #62723	; 0xf503
    3a4c:	04200188 	strteq	r0, [r0], #-392	; 0xfffffe78
    3a50:	030b0501 	movweq	r0, #46337	; 0xb501
    3a54:	04207ef8 	strteq	r7, [r0], #-3832	; 0xfffff108
    3a58:	03330503 	teqeq	r3, #12582912	; 0xc00000
    3a5c:	052e0188 	streq	r0, [lr, #-392]!	; 0xfffffe78
    3a60:	01042042 	tsteq	r4, r2, asr #32
    3a64:	f8030b05 			; <UNDEFINED> instruction: 0xf8030b05
    3a68:	08052e7e 	stmdaeq	r5, {r1, r2, r3, r4, r5, r6, r9, sl, fp, sp}
    3a6c:	201f052e 	andscs	r0, pc, lr, lsr #10
    3a70:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    3a74:	08051e02 	stmdaeq	r5, {r1, r9, sl, fp, ip}
    3a78:	063a0522 	ldrteq	r0, [sl], -r2, lsr #10
    3a7c:	010b051f 	tsteq	fp, pc, lsl r5
    3a80:	11060205 	tstne	r6, r5, lsl #4
    3a84:	02230105 	eoreq	r0, r3, #1073741825	; 0x40000001
    3a88:	01010006 	tsteq	r1, r6
    3a8c:	0000033c 	andeq	r0, r0, ip, lsr r3
    3a90:	01a90003 			; <UNDEFINED> instruction: 0x01a90003
    3a94:	01020000 	mrseq	r0, (UNDEF: 2)
    3a98:	000d0efb 	strdeq	r0, [sp], -fp
    3a9c:	01010101 	tsteq	r1, r1, lsl #2
    3aa0:	01000000 	mrseq	r0, (UNDEF: 0)
    3aa4:	2f010000 	svccs	0x00010000
    3aa8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3aac:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3ab0:	2f6e6974 	svccs	0x006e6974
    3ab4:	6b736544 	blvs	1cdcfcc <__ccfg+0x1cbd024>
    3ab8:	2f706f74 	svccs	0x00706f74
    3abc:	4f534c4f 	svcmi	0x00534c4f
    3ac0:	2f54454e 	svccs	0x0054454e
    3ac4:	4f434950 	svcmi	0x00434950
    3ac8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3acc:	2f534f63 	svccs	0x00534f63
    3ad0:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    3ad4:	4f492f73 	svcmi	0x00492f73
    3ad8:	6f682f00 	svcvs	0x00682f00
    3adc:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3930 <NOROM_SetupGetTrimForRadcExtCfg>
    3ae0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3ae4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3ae8:	6f746b73 	svcvs	0x00746b73
    3aec:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3af0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3af4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3af8:	2f534f43 	svccs	0x00534f43
    3afc:	4f636950 	svcmi	0x00636950
    3b00:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3b04:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3b08:	3143432f 	cmpcc	r3, pc, lsr #6
    3b0c:	57585833 	smmlarpl	r8, r3, r8, r5
    3b10:	2f455241 	svccs	0x00455241
    3b14:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    3b18:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3b1c:	752f0062 	strvc	r0, [pc, #-98]!	; 3ac2 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2e>
    3b20:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 395c <NOROM_SetupGetTrimForRcOscLfIBiasTrim>
    3b24:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    3b28:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    3b2c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    3b30:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    3b34:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3b38:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    3b3c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    3b40:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3b44:	2f006564 	svccs	0x00006564
    3b48:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3b4c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3b50:	2f6e6974 	svccs	0x006e6974
    3b54:	6b736544 	blvs	1cdd06c <__ccfg+0x1cbd0c4>
    3b58:	2f706f74 	svccs	0x00706f74
    3b5c:	4f534c4f 	svcmi	0x00534c4f
    3b60:	2f54454e 	svccs	0x0054454e
    3b64:	4f434950 	svcmi	0x00434950
    3b68:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3b6c:	2f534f63 	svccs	0x00534f63
    3b70:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3b74:	2f005858 	svccs	0x00005858
    3b78:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3b7c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3b80:	2f6e6974 	svccs	0x006e6974
    3b84:	6b736544 	blvs	1cdd09c <__ccfg+0x1cbd0f4>
    3b88:	2f706f74 	svccs	0x00706f74
    3b8c:	4f534c4f 	svcmi	0x00534c4f
    3b90:	2f54454e 	svccs	0x0054454e
    3b94:	4f434950 	svcmi	0x00434950
    3b98:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3b9c:	00534f63 	subseq	r4, r3, r3, ror #30
    3ba0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3aec <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x58>
    3ba4:	616d2f65 	cmnvs	sp, r5, ror #30
    3ba8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3bac:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3bb0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3bb4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3bb8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3bbc:	4349502f 	movtmi	r5, #36911	; 0x902f
    3bc0:	502f534f 	eorpl	r5, pc, pc, asr #6
    3bc4:	534f6369 	movtpl	r6, #62313	; 0xf369
    3bc8:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    3bcc:	006c656e 	rsbeq	r6, ip, lr, ror #10
    3bd0:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    3bd4:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    3bd8:	0100632e 	tsteq	r0, lr, lsr #6
    3bdc:	70670000 	rsbvc	r0, r7, r0
    3be0:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3be4:	00000200 	andeq	r0, r0, r0, lsl #4
    3be8:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3bec:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3bf0:	00000300 	andeq	r0, r0, r0, lsl #6
    3bf4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    3bf8:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3bfc:	616d0000 	cmnvs	sp, r0
    3c00:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    3c04:	00000400 	andeq	r0, r0, r0, lsl #8
    3c08:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    3c0c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    3c10:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3c14:	75620000 	strbvc	r0, [r2, #-0]!
    3c18:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    3c1c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3c20:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3c24:	73000004 	movwvc	r0, #4
    3c28:	6f697379 	svcvs	0x00697379
    3c2c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    3c30:	656b0000 	strbvs	r0, [fp, #-0]!
    3c34:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    3c38:	0600682e 	streq	r6, [r0], -lr, lsr #16
    3c3c:	05000000 	streq	r0, [r0, #-0]
    3c40:	02050001 	andeq	r0, r5, #1
    3c44:	00000000 	andeq	r0, r0, r0
    3c48:	01011b03 	tsteq	r1, r3, lsl #22
    3c4c:	02052e06 	andeq	r2, r5, #6, 28	; 0x60
    3c50:	0e056a06 	vmlaeq.f32	s12, s10, s12
    3c54:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    3c58:	06030520 	streq	r0, [r3], -r0, lsr #10
    3c5c:	40020531 	andmi	r0, r2, r1, lsr r5
    3c60:	01060f05 	tsteq	r6, r5, lsl #30
    3c64:	87030204 	strhi	r0, [r3, -r4, lsl #4]
    3c68:	01042e01 	tsteq	r4, r1, lsl #28
    3c6c:	fd030705 	stc2	7, cr0, [r3, #-20]	; 0xffffffec
    3c70:	0f05207e 	svceq	0x0005207e
    3c74:	0614051c 			; <UNDEFINED> instruction: 0x0614051c
    3c78:	061c0520 	ldreq	r0, [ip], -r0, lsr #10
    3c7c:	20020501 	andcs	r0, r2, r1, lsl #10
    3c80:	2e110306 	cdpcs	3, 1, cr0, cr1, cr6, {0}
    3c84:	03053d4b 	movweq	r3, #23883	; 0x5d4b
    3c88:	042e7103 	strteq	r7, [lr], #-259	; 0xfffffefd
    3c8c:	03290502 			; <UNDEFINED> instruction: 0x03290502
    3c90:	050100fe 	streq	r0, [r1, #-254]	; 0xffffff02
    3c94:	01041705 	tsteq	r4, r5, lsl #14
    3c98:	03060705 	movweq	r0, #26373	; 0x6705
    3c9c:	04017efd 	streq	r7, [r1], #-3837	; 0xfffff103
    3ca0:	030f0502 	movweq	r0, #62722	; 0xf502
    3ca4:	042e0183 	strteq	r0, [lr], #-387	; 0xfffffe7d
    3ca8:	03070501 	movweq	r0, #29953	; 0x7501
    3cac:	04207efd 	strteq	r7, [r0], #-3837	; 0xfffff103
    3cb0:	03330502 	teqeq	r3, #8388608	; 0x800000
    3cb4:	04200183 	strteq	r0, [r0], #-387	; 0xfffffe7d
    3cb8:	03060501 	movweq	r0, #25857	; 0x6501
    3cbc:	05207efd 	streq	r7, [r0, #-3837]!	; 0xfffff103
    3cc0:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    3cc4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3cc8:	05400604 	strbeq	r0, [r0, #-1540]	; 0xfffff9fc
    3ccc:	12030603 	andne	r0, r3, #3145728	; 0x300000
    3cd0:	052f062e 	streq	r0, [pc, #-1582]!	; 36aa <NOROM_SetupSetVddrLevel+0x12>
    3cd4:	20640306 	rsbcs	r0, r4, r6, lsl #6
    3cd8:	01060d05 	tsteq	r6, r5, lsl #26
    3cdc:	03060205 	movweq	r0, #25093	; 0x6205
    3ce0:	07053c16 	smladeq	r5, r6, ip, r3
    3ce4:	02040106 	andeq	r0, r4, #-2147483647	; 0x80000001
    3ce8:	03062905 	movweq	r2, #26885	; 0x6905
    3cec:	055800eb 	ldrbeq	r0, [r8, #-235]	; 0xffffff15
    3cf0:	0f051705 	svceq	0x00051705
    3cf4:	01040106 	tsteq	r4, r6, lsl #2
    3cf8:	90030705 	andls	r0, r3, r5, lsl #14
    3cfc:	0204207f 	andeq	r2, r4, #127	; 0x7f
    3d00:	f0030f05 			; <UNDEFINED> instruction: 0xf0030f05
    3d04:	33052000 	movwcc	r2, #20480	; 0x5000
    3d08:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    3d0c:	7f900305 	svcvc	0x00900305
    3d10:	06020520 	streq	r0, [r2], -r0, lsr #10
    3d14:	06050531 			; <UNDEFINED> instruction: 0x06050531
    3d18:	06030501 	streq	r0, [r3], -r1, lsl #10
    3d1c:	5102053e 	tstpl	r2, lr, lsr r5
    3d20:	01060705 	tsteq	r6, r5, lsl #14
    3d24:	29050204 	stmdbcs	r5, {r2, r9}
    3d28:	00df0306 	sbcseq	r0, pc, r6, lsl #6
    3d2c:	1705053c 	smladxne	r5, ip, r5, r0
    3d30:	01060f05 	tsteq	r6, r5, lsl #30
    3d34:	07050104 	streq	r0, [r5, -r4, lsl #2]
    3d38:	207f9c03 	rsbscs	r9, pc, r3, lsl #24
    3d3c:	0f050204 	svceq	0x00050204
    3d40:	2e00e403 	cdpcs	4, 0, cr14, cr0, cr3, {0}
    3d44:	07050104 	streq	r0, [r5, -r4, lsl #2]
    3d48:	207f9c03 	rsbscs	r9, pc, r3, lsl #24
    3d4c:	33050204 	movwcc	r0, #20996	; 0x5204
    3d50:	2000e403 	andcs	lr, r0, r3, lsl #8
    3d54:	05050104 	streq	r0, [r5, #-260]	; 0xfffffefc
    3d58:	207f9c03 	rsbscs	r9, pc, r3, lsl #24
    3d5c:	31060205 	tstcc	r6, r5, lsl #4
    3d60:	01060e05 	tsteq	r6, r5, lsl #28
    3d64:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    3d68:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    3d6c:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    3d70:	05220602 	streq	r0, [r2, #-1538]!	; 0xfffff9fe
    3d74:	05220601 	streq	r0, [r2, #-1537]!	; 0xfffff9ff
    3d78:	01052c02 	tsteq	r5, r2, lsl #24
    3d7c:	0c024c06 	stceq	12, cr4, [r2], {6}
    3d80:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3d84:	02050029 	andeq	r0, r5, #41	; 0x29
    3d88:	00000000 	andeq	r0, r0, r0
    3d8c:	0100d703 	tsteq	r0, r3, lsl #14
    3d90:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    3d94:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    3d98:	0f051c29 	svceq	0x00051c29
    3d9c:	20050524 	andcs	r0, r5, r4, lsr #10
    3da0:	21060305 	tstcs	r6, r5, lsl #6
    3da4:	1a060105 	bne	1841c0 <__ccfg+0x164218>
    3da8:	78030305 	stmdavc	r3, {r0, r2, r8, r9}
    3dac:	0602052e 	streq	r0, [r2], -lr, lsr #10
    3db0:	06070540 	streq	r0, [r7], -r0, asr #10
    3db4:	3c050501 	cfstr32cc	mvfx0, [r5], {1}
    3db8:	2f060305 	svccs	0x00060305
    3dbc:	0601052f 	streq	r0, [r1], -pc, lsr #10
    3dc0:	2c030522 	cfstr32cs	mvfx0, [r3], {34}	; 0x22
    3dc4:	023e0105 	eorseq	r0, lr, #1073741825	; 0x40000001
    3dc8:	01010006 	tsteq	r1, r6
    3dcc:	00000931 	andeq	r0, r0, r1, lsr r9
    3dd0:	01cc0003 	biceq	r0, ip, r3
    3dd4:	01020000 	mrseq	r0, (UNDEF: 2)
    3dd8:	000d0efb 	strdeq	r0, [sp], -fp
    3ddc:	01010101 	tsteq	r1, r1, lsl #2
    3de0:	01000000 	mrseq	r0, (UNDEF: 0)
    3de4:	2f010000 	svccs	0x00010000
    3de8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3dec:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3df0:	2f6e6974 	svccs	0x006e6974
    3df4:	6b736544 	blvs	1cdd30c <__ccfg+0x1cbd364>
    3df8:	2f706f74 	svccs	0x00706f74
    3dfc:	4f534c4f 	svcmi	0x00534c4f
    3e00:	2f54454e 	svccs	0x0054454e
    3e04:	4f434950 	svcmi	0x00434950
    3e08:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3e0c:	2f534f63 	svccs	0x00534f63
    3e10:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    3e14:	74532f73 	ldrbvc	r2, [r3], #-3955	; 0xfffff08d
    3e18:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    3e1c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    3e20:	2f656d6f 	svccs	0x00656d6f
    3e24:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3e28:	442f6e69 	strtmi	r6, [pc], #-3689	; 3e30 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c0>
    3e2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3e30:	4f2f706f 	svcmi	0x002f706f
    3e34:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3e38:	502f5445 	eorpl	r5, pc, r5, asr #8
    3e3c:	534f4349 	movtpl	r4, #62281	; 0xf349
    3e40:	6369502f 	cmnvs	r9, #47	; 0x2f
    3e44:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    3e48:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3e4c:	43432f58 	movtmi	r2, #16216	; 0x3f58
    3e50:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3e54:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    3e58:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    3e5c:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    3e60:	2f006269 	svccs	0x00006269
    3e64:	2f727375 	svccs	0x00727375
    3e68:	2f62696c 	svccs	0x0062696c
    3e6c:	2f636367 	svccs	0x00636367
    3e70:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    3e74:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    3e78:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    3e7c:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    3e80:	2f312e32 	svccs	0x00312e32
    3e84:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3e88:	00656475 	rsbeq	r6, r5, r5, ror r4
    3e8c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3dd8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x168>
    3e90:	616d2f65 	cmnvs	sp, r5, ror #30
    3e94:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3e98:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3e9c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3ea0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3ea4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3ea8:	4349502f 	movtmi	r5, #36911	; 0x902f
    3eac:	502f534f 	eorpl	r5, pc, pc, asr #6
    3eb0:	534f6369 	movtpl	r6, #62313	; 0xf369
    3eb4:	3143432f 	cmpcc	r3, pc, lsr #6
    3eb8:	00585833 	subseq	r5, r8, r3, lsr r8
    3ebc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3e08 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x198>
    3ec0:	616d2f65 	cmnvs	sp, r5, ror #30
    3ec4:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3ec8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3ecc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3ed0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3ed4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3ed8:	4349502f 	movtmi	r5, #36911	; 0x902f
    3edc:	502f534f 	eorpl	r5, pc, pc, asr #6
    3ee0:	534f6369 	movtpl	r6, #62313	; 0xf369
    3ee4:	6f682f00 	svcvs	0x00682f00
    3ee8:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3d3c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xcc>
    3eec:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3ef0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3ef4:	6f746b73 	svcvs	0x00746b73
    3ef8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3efc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3f00:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3f04:	2f534f43 	svccs	0x00534f43
    3f08:	4f636950 	svcmi	0x00636950
    3f0c:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    3f10:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    3f14:	74730000 	ldrbtvc	r0, [r3], #-0
    3f18:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    3f1c:	786d5f65 	stmdavc	sp!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    3f20:	38723532 	ldmdacc	r2!, {r1, r4, r5, r8, sl, ip, sp}^
    3f24:	2e353330 	mrccs	3, 1, r3, cr5, cr0, {1}
    3f28:	00010063 	andeq	r0, r1, r3, rrx
    3f2c:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    3f30:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    3f34:	73000002 	movwvc	r0, #2
    3f38:	61726f74 	cmnvs	r2, r4, ror pc
    3f3c:	655f6567 	ldrbvs	r6, [pc, #-1383]	; 39dd <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x59>
    3f40:	6f727065 	svcvs	0x00727065
    3f44:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    3f48:	73000001 	movwvc	r0, #1
    3f4c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    3f50:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3f54:	61000003 	tstvs	r0, r3
    3f58:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    3f5c:	00040068 	andeq	r0, r4, r8, rrx
    3f60:	63616d00 	cmnvs	r1, #0, 26
    3f64:	00682e68 	rsbeq	r2, r8, r8, ror #28
    3f68:	70000004 	andvc	r0, r0, r4
    3f6c:	5f736e69 	svcpl	0x00736e69
    3f70:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    3f74:	00040068 	andeq	r0, r4, r8, rrx
    3f78:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    3f7c:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    3f80:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    3f84:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3f88:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    3f8c:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    3f90:	00050068 	andeq	r0, r5, r8, rrx
    3f94:	72656b00 	rsbvc	r6, r5, #0, 22
    3f98:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    3f9c:	00060068 	andeq	r0, r6, r8, rrx
    3fa0:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
    3fa4:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
    3fa8:	0300001c 	movweq	r0, #28
    3fac:	02050118 	andeq	r0, r5, #24, 2
    3fb0:	05141314 	ldreq	r1, [r4, #-788]	; 0xfffffcec
    3fb4:	19050115 	stmdbne	r5, {r0, r2, r4, r8}
    3fb8:	09050d06 	stmdbeq	r5, {r1, r2, r8, sl, fp}
    3fbc:	05020425 	streq	r0, [r2, #-1061]	; 0xfffffbdb
    3fc0:	028a032d 	addeq	r0, sl, #-1275068416	; 0xb4000000
    3fc4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    3fc8:	7df10319 	ldclvc	3, cr0, [r1, #100]!	; 0x64
    3fcc:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    3fd0:	02c5032d 	sbceq	r0, r5, #-1275068416	; 0xb4000000
    3fd4:	030f0520 	movweq	r0, #62752	; 0xf520
    3fd8:	05207ed0 	streq	r7, [r0, #-3792]!	; 0xfffff130
    3fdc:	00fa032d 	rscseq	r0, sl, sp, lsr #6
    3fe0:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    3fe4:	f7030603 			; <UNDEFINED> instruction: 0xf7030603
    3fe8:	0204207d 	andeq	r2, r4, #125	; 0x7d
    3fec:	03060f05 	movweq	r0, #28421	; 0x6f05
    3ff0:	0401018f 	streq	r0, [r1], #-399	; 0xfffffe71
    3ff4:	03050501 	movweq	r0, #21761	; 0x5501
    3ff8:	05207ef1 	streq	r7, [r0, #-3825]!	; 0xfffff10f
    3ffc:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    4000:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
    4004:	05020421 	streq	r0, [r2, #-1057]	; 0xfffffbdf
    4008:	01890329 	orreq	r0, r9, r9, lsr #6
    400c:	17050501 	strne	r0, [r5, -r1, lsl #10]
    4010:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    4014:	017ef303 	cmneq	lr, r3, lsl #6	; <UNPREDICTABLE>
    4018:	01060605 	tsteq	r6, r5, lsl #12
    401c:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    4020:	29050204 	stmdbcs	r5, {r2, r9}
    4024:	01028103 	tsteq	r2, r3, lsl #2
    4028:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    402c:	06020501 	streq	r0, [r2], -r1, lsl #10
    4030:	017df603 	cmneq	sp, r3, lsl #12	; <UNPREDICTABLE>
    4034:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    4038:	20028a03 	andcs	r8, r2, r3, lsl #20
    403c:	03050104 	movweq	r0, #20740	; 0x5104
    4040:	7dfb0306 	ldclvc	3, cr0, [fp, #24]!
    4044:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4048:	02b60329 	adcseq	r0, r6, #-1543503872	; 0xa4000000
    404c:	17050501 	strne	r0, [r5, -r1, lsl #10]
    4050:	01062d05 	tsteq	r6, r5, lsl #26
    4054:	1c050104 	stfnes	f0, [r5], {4}
    4058:	7dc00306 	stclvc	3, cr0, [r0, #24]
    405c:	01150520 	tsteq	r5, r0, lsr #10
    4060:	01060205 	tsteq	r6, r5, lsl #4
    4064:	09030105 	stmdbeq	r3, {r0, r2, r8}
    4068:	00070220 	andeq	r0, r7, r0, lsr #4
    406c:	1f050101 	svcne	0x00050101
    4070:	b0020500 	andlt	r0, r2, r0, lsl #10
    4074:	0300001c 	movweq	r0, #28
    4078:	02050128 	andeq	r0, r5, #40, 2
    407c:	0e051414 	cfmvdlreq	mvd5, r1
    4080:	061f0501 	ldreq	r0, [pc], -r1, lsl #10
    4084:	0204200e 	andeq	r2, r4, #14
    4088:	ff032d05 			; <UNDEFINED> instruction: 0xff032d05
    408c:	01043c01 	tsteq	r4, r1, lsl #24
    4090:	03060305 	movweq	r0, #25349	; 0x6305
    4094:	054a7e86 	strbeq	r7, [sl, #-3718]	; 0xfffff17a
    4098:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    409c:	042f0604 	strteq	r0, [pc], #-1540	; 40a4 <memcpy+0x9c>
    40a0:	03290502 			; <UNDEFINED> instruction: 0x03290502
    40a4:	050101f4 	streq	r0, [r1, #-500]	; 0xfffffe0c
    40a8:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    40ac:	01040106 	tsteq	r4, r6, lsl #2
    40b0:	03060405 	movweq	r0, #25605	; 0x6405
    40b4:	042e7e89 	strteq	r7, [lr], #-3721	; 0xfffff177
    40b8:	03290502 			; <UNDEFINED> instruction: 0x03290502
    40bc:	050102a8 	streq	r0, [r1, #-680]	; 0xfffffd58
    40c0:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    40c4:	01040106 	tsteq	r4, r6, lsl #2
    40c8:	03060305 	movweq	r0, #25349	; 0x6305
    40cc:	04207dd4 	strteq	r7, [r0], #-3540	; 0xfffff22c
    40d0:	03290502 			; <UNDEFINED> instruction: 0x03290502
    40d4:	050101f1 	streq	r0, [r1, #-497]	; 0xfffffe0f
    40d8:	01041705 	tsteq	r4, r5, lsl #14
    40dc:	7e8c0306 	cdpvc	3, 8, cr0, cr12, cr6, {0}
    40e0:	03020501 	movweq	r0, #9473	; 0x2501
    40e4:	02042079 	andeq	r2, r4, #121	; 0x79
    40e8:	fb032d05 	blx	cf506 <__ccfg+0xaf55e>
    40ec:	01042001 	tsteq	r4, r1
    40f0:	03060305 	movweq	r0, #25349	; 0x6305
    40f4:	04207e8b 	strteq	r7, [r0], #-3723	; 0xfffff175
    40f8:	03290502 			; <UNDEFINED> instruction: 0x03290502
    40fc:	050102a6 	streq	r0, [r1, #-678]	; 0xfffffd5a
    4100:	01041705 	tsteq	r4, r5, lsl #14
    4104:	7dd60306 	ldclvc	3, cr0, [r6, #24]
    4108:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    410c:	02aa032d 	adceq	r0, sl, #-1275068416	; 0xb4000000
    4110:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4114:	d6030603 	strle	r0, [r3], -r3, lsl #12
    4118:	1505207d 	strne	r2, [r5, #-125]	; 0xffffff83
    411c:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
    4120:	0205010e 	andeq	r0, r5, #-2147483645	; 0x80000003
    4124:	01050106 	tsteq	r5, r6, lsl #2
    4128:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    412c:	01010005 	tsteq	r1, r5
    4130:	05001e05 	streq	r1, [r0, #-3589]	; 0xfffff1fb
    4134:	001ce002 	andseq	lr, ip, r2
    4138:	01390300 	teqeq	r9, r0, lsl #6
    413c:	04140205 	ldreq	r0, [r4], #-517	; 0xfffffdfb
    4140:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4144:	050103cf 	streq	r0, [r1, #-975]	; 0xfffffc31
    4148:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    414c:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4150:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4154:	7ca8031e 	stcvc	3, cr0, [r8], #120	; 0x78
    4158:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    415c:	03d80338 	bicseq	r0, r8, #56, 6	; 0xe0000000
    4160:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4164:	ab030602 	blge	c5974 <__ccfg+0xa59cc>
    4168:	042f2e7c 	strteq	r2, [pc], #-3708	; 4170 <memcpy+0x168>
    416c:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4170:	050103cd 	streq	r0, [r1, #-973]	; 0xfffffc33
    4174:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4178:	06380517 			; <UNDEFINED> instruction: 0x06380517
    417c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4180:	7cad0301 	stcvc	3, cr0, [sp], #4
    4184:	0004022e 	andeq	r0, r4, lr, lsr #4
    4188:	27050101 	strcs	r0, [r5, -r1, lsl #2]
    418c:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
    4190:	0300001c 	movweq	r0, #28
    4194:	050100d7 	streq	r0, [r1, #-215]	; 0xffffff29
    4198:	27051602 	strcs	r1, [r5, -r2, lsl #12]
    419c:	042e0e06 	strteq	r0, [lr], #-3590	; 0xfffff1fa
    41a0:	03380502 	teqeq	r8, #8388608	; 0x800000
    41a4:	042e03ba 	strteq	r0, [lr], #-954	; 0xfffffc46
    41a8:	03090501 	movweq	r0, #38145	; 0x9501
    41ac:	04207cca 	strteq	r7, [r0], #-3274	; 0xfffff336
    41b0:	03380502 	teqeq	r8, #8388608	; 0x800000
    41b4:	042e03b6 	strteq	r0, [lr], #-950	; 0xfffffc4a
    41b8:	06080501 	streq	r0, [r8], -r1, lsl #10
    41bc:	207cca03 	rsbscs	ip, ip, r3, lsl #20
    41c0:	73030205 	movwvc	r0, #12805	; 0x3205
    41c4:	0204143c 	andeq	r1, r4, #60, 8	; 0x3c000000
    41c8:	ba032905 	blt	ce5e4 <__ccfg+0xae63c>
    41cc:	3d050103 	stfccs	f0, [r5, #-12]
    41d0:	17050514 	smladne	r5, r4, r5, r0
    41d4:	02050104 	andeq	r0, r5, #4, 2
    41d8:	7cc00306 	stclvc	3, cr0, [r0], {6}
    41dc:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    41e0:	03c00338 	biceq	r0, r0, #56, 6	; 0xe0000000
    41e4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    41e8:	c0030602 	andgt	r0, r3, r2, lsl #12
    41ec:	052f207c 	streq	r2, [pc, #-124]!	; 4178 <memcpy+0x170>
    41f0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    41f4:	042f0602 	strteq	r0, [pc], #-1538	; 41fc <memcpy+0x1f4>
    41f8:	03290502 			; <UNDEFINED> instruction: 0x03290502
    41fc:	050103b7 	streq	r0, [r1, #-951]	; 0xfffffc49
    4200:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4204:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4208:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    420c:	c3030602 	movwgt	r0, #13826	; 0x3602
    4210:	0f052e7c 	svceq	0x00052e7c
    4214:	01051906 	tsteq	r5, r6, lsl #18
    4218:	06030536 			; <UNDEFINED> instruction: 0x06030536
    421c:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    4220:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4224:	4c4b0604 	mcrrmi	6, 0, r0, fp, cr4
    4228:	0007024b 	andeq	r0, r7, fp, asr #4
    422c:	16050101 	strne	r0, [r5], -r1, lsl #2
    4230:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    4234:	0300001d 	movweq	r0, #29
    4238:	05010181 	streq	r0, [r1, #-385]	; 0xfffffe7f
    423c:	16051602 	strne	r1, [r5], -r2, lsl #12
    4240:	06050e06 	streq	r0, [r5], -r6, lsl #28
    4244:	20050524 	andcs	r0, r5, r4, lsr #10
    4248:	30060305 	andcc	r0, r6, r5, lsl #6
    424c:	055e0205 	ldrbeq	r0, [lr, #-517]	; 0xfffffdfb
    4250:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4254:	03053d01 	movweq	r3, #23809	; 0x5d01
    4258:	02051b06 	andeq	r1, r5, #6144	; 0x1800
    425c:	01016603 	tsteq	r1, r3, lsl #12
    4260:	02041401 	andeq	r1, r4, #16777216	; 0x1000000
    4264:	99032905 	stmdbls	r3, {r0, r2, r8, fp, sp}
    4268:	3d050103 	stfccs	f0, [r5, #-12]
    426c:	17050514 	smladne	r5, r4, r5, r0
    4270:	01063805 	tsteq	r6, r5, lsl #16
    4274:	02050104 	andeq	r0, r5, #4, 2
    4278:	2e7ce103 	expcse	f6, f3
    427c:	38050204 	stmdacc	r5, {r2, r9}
    4280:	20039f03 	andcs	r9, r3, r3, lsl #30
    4284:	02050104 	andeq	r0, r5, #4, 2
    4288:	7ce10306 	stclvc	3, cr0, [r1], #24
    428c:	02042f20 	andeq	r2, r4, #32, 30	; 0x80
    4290:	97032905 	strls	r2, [r3, -r5, lsl #18]
    4294:	3d050103 	stfccs	f0, [r5, #-12]
    4298:	17050514 	smladne	r5, r4, r5, r0
    429c:	02050104 	andeq	r0, r5, #4, 2
    42a0:	7ce30306 	stclvc	3, cr0, [r3], #24
    42a4:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    42a8:	039d0338 	orrseq	r0, sp, #56, 6	; 0xe0000000
    42ac:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    42b0:	e3030602 	movw	r0, #13826	; 0x3602
    42b4:	0305207c 	movweq	r2, #20604	; 0x507c
    42b8:	052e1603 	streq	r1, [lr, #-1539]!	; 0xfffff9fd
    42bc:	02010609 	andeq	r0, r1, #9437184	; 0x900000
    42c0:	01010009 	tsteq	r1, r9
    42c4:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
    42c8:	001d8c02 	andseq	r8, sp, r2, lsl #24
    42cc:	00f70300 	rscseq	r0, r7, r0, lsl #6
    42d0:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    42d4:	10061705 	andne	r1, r6, r5, lsl #14
    42d8:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
    42dc:	03052005 	movweq	r2, #20485	; 0x5005
    42e0:	05593d06 	ldrbeq	r3, [r9, #-3334]	; 0xfffff2fa
    42e4:	016e0302 	cmneq	lr, r2, lsl #6
    42e8:	13030305 	movwne	r0, #13061	; 0x3305
    42ec:	0609053c 			; <UNDEFINED> instruction: 0x0609053c
    42f0:	06030501 	streq	r0, [r3], -r1, lsl #10
    42f4:	0501012f 	streq	r0, [r1, #-303]	; 0xfffffed1
    42f8:	02140601 	andseq	r0, r4, #1048576	; 0x100000
    42fc:	01010003 	tsteq	r1, r3
    4300:	05001105 	streq	r1, [r0, #-261]	; 0xfffffefb
    4304:	001db002 	andseq	fp, sp, r2
    4308:	01920300 	orrseq	r0, r2, r0, lsl #6
    430c:	16020501 	strne	r0, [r2], -r1, lsl #10
    4310:	0e061105 	adfeqs	f1, f6, f5
    4314:	06240205 	strteq	r0, [r4], -r5, lsl #4
    4318:	0608052f 	streq	r0, [r8], -pc, lsr #10
    431c:	03010501 	movweq	r0, #5377	; 0x1501
    4320:	08052e0e 	stmdaeq	r5, {r1, r2, r3, r9, sl, fp, sp}
    4324:	05207203 	streq	r7, [r0, #-515]!	; 0xfffffdfd
    4328:	0d030602 	stceq	6, cr0, [r3, #-8]
    432c:	06010520 	streq	r0, [r1], -r0, lsr #10
    4330:	00030213 	andeq	r0, r3, r3, lsl r2
    4334:	12050101 	andne	r0, r5, #1073741824	; 0x40000000
    4338:	c4020500 	strgt	r0, [r2], #-1280	; 0xfffffb00
    433c:	0300001d 	movweq	r0, #29
    4340:	050101a7 	streq	r0, [r1, #-423]	; 0xfffffe59
    4344:	06051402 	streq	r1, [r5], -r2, lsl #8
    4348:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    434c:	06030520 	streq	r0, [r3], -r0, lsr #10
    4350:	0609052f 	streq	r0, [r9], -pc, lsr #10
    4354:	06030501 	streq	r0, [r3], -r1, lsl #10
    4358:	0601052f 	streq	r0, [r1], -pc, lsr #10
    435c:	00030230 	andeq	r0, r3, r0, lsr r2
    4360:	2b050101 	blcs	14476c <__ccfg+0x1247c4>
    4364:	00020500 	andeq	r0, r2, r0, lsl #10
    4368:	03000000 	movweq	r0, #0
    436c:	060101af 	streq	r0, [r1], -pc, lsr #3
    4370:	06020520 	streq	r0, [r2], -r0, lsr #10
    4374:	06050530 			; <UNDEFINED> instruction: 0x06050530
    4378:	06020501 	streq	r0, [r2], -r1, lsl #10
    437c:	06050531 			; <UNDEFINED> instruction: 0x06050531
    4380:	3c180501 	cfldr32cc	mvfx0, [r8], {1}
    4384:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
    4388:	303f0602 	eorscc	r0, pc, r2, lsl #12
    438c:	29050204 	stmdbcs	r5, {r2, r9}
    4390:	0102d103 	tsteq	r2, r3, lsl #2
    4394:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4398:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    439c:	01040106 	tsteq	r4, r6, lsl #2
    43a0:	aa030205 	bge	c4bbc <__ccfg+0xa4c14>
    43a4:	02042e7d 	andeq	r2, r4, #2000	; 0x7d0
    43a8:	d6033805 	strle	r3, [r3], -r5, lsl #16
    43ac:	01042002 	tsteq	r4, r2
    43b0:	03060205 	movweq	r0, #25093	; 0x6205
    43b4:	2f207daa 	svccs	0x00207daa
    43b8:	053e4b4b 	ldreq	r4, [lr, #-2891]!	; 0xfffff4b5
    43bc:	02052008 	andeq	r2, r5, #8
    43c0:	05020431 	streq	r0, [r2, #-1073]	; 0xfffffbcf
    43c4:	02c70329 	sbceq	r0, r7, #-1543503872	; 0xa4000000
    43c8:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    43cc:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    43d0:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    43d4:	06020501 	streq	r0, [r2], -r1, lsl #10
    43d8:	2e7db403 	cdpcs	4, 7, cr11, cr13, cr3, {0}
    43dc:	06010530 			; <UNDEFINED> instruction: 0x06010530
    43e0:	06030513 			; <UNDEFINED> instruction: 0x06030513
    43e4:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    43e8:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    43ec:	0a052e08 	beq	14fc14 <__ccfg+0x12fc6c>
    43f0:	023c7403 	eorseq	r7, ip, #50331648	; 0x3000000
    43f4:	01010005 	tsteq	r1, r5
    43f8:	05003105 	streq	r3, [r0, #-261]	; 0xfffffefb
    43fc:	00000002 	andeq	r0, r0, r2
    4400:	01ca0300 	biceq	r0, sl, r0, lsl #6
    4404:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4408:	10063105 	andne	r3, r6, r5, lsl #2
    440c:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
    4410:	05051e31 	streq	r1, [r5, #-3633]	; 0xfffff1cf
    4414:	1e310522 	cdpne	5, 3, cr0, cr1, cr2, {1}
    4418:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
    441c:	05320603 	ldreq	r0, [r2, #-1539]!	; 0xfffff9fd
    4420:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4424:	06052017 			; <UNDEFINED> instruction: 0x06052017
    4428:	06030520 	streq	r0, [r3], -r0, lsr #10
    442c:	06060530 			; <UNDEFINED> instruction: 0x06060530
    4430:	3c170501 	cfldr32cc	mvfx0, [r7], {1}
    4434:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    4438:	03040530 	movweq	r0, #17712	; 0x4530
    443c:	1005010a 	andne	r0, r5, sl, lsl #2
    4440:	09050106 	stmdbeq	r5, {r1, r2, r8}
    4444:	20100520 	andscs	r0, r0, r0, lsr #10
    4448:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
    444c:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
    4450:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    4454:	1f052009 	svcne	0x00052009
    4458:	2e090520 	cfsh32cs	mvfx0, mvfx9, #16
    445c:	24060405 	strcs	r0, [r6], #-1029	; 0xfffffbfb
    4460:	01060d05 	tsteq	r6, r5, lsl #26
    4464:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    4468:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
    446c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    4470:	2f2f0605 	svccs	0x002f0605
    4474:	01060c05 	tsteq	r6, r5, lsl #24
    4478:	31030105 	tstcc	r3, r5, lsl #2
    447c:	06040520 	streq	r0, [r4], -r0, lsr #10
    4480:	05205203 	streq	r5, [r0, #-515]!	; 0xfffffdfd
    4484:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    4488:	25052007 	strcs	r2, [r5, #-7]
    448c:	201d0520 	andscs	r0, sp, r0, lsr #10
    4490:	3e060505 	cfsh32cc	mvfx0, mvfx6, #5
    4494:	01060b05 	tsteq	r6, r5, lsl #22
    4498:	05280405 	streq	r0, [r8, #-1029]!	; 0xfffffbfb
    449c:	04051e0b 	streq	r1, [r5], #-3595	; 0xfffff1f5
    44a0:	042f2206 	strteq	r2, [pc], #-518	; 44a8 <patchGenfskRfe+0xd8>
    44a4:	06380502 	ldrteq	r0, [r8], -r2, lsl #10
    44a8:	01029603 	tsteq	r2, r3, lsl #12
    44ac:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    44b0:	2e7dea03 	vaddcs.f32	s29, s26, s6
    44b4:	03060205 	movweq	r0, #25093	; 0x6205
    44b8:	04207ec7 	strteq	r7, [r0], #-3783	; 0xfffff139
    44bc:	03290502 			; <UNDEFINED> instruction: 0x03290502
    44c0:	050103c8 	streq	r0, [r1, #-968]	; 0xfffffc38
    44c4:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    44c8:	06380517 			; <UNDEFINED> instruction: 0x06380517
    44cc:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    44d0:	b2030602 	andlt	r0, r3, #2097152	; 0x200000
    44d4:	4b2f207c 	blmi	bcc6cc <__ccfg+0xbac724>
    44d8:	02043d4b 	andeq	r3, r4, #4800	; 0x12c0
    44dc:	c3032905 	movwgt	r2, #14597	; 0x3905
    44e0:	3d050103 	stfccs	f0, [r5, #-12]
    44e4:	17050514 	smladne	r5, r4, r5, r0
    44e8:	01063805 	tsteq	r6, r5, lsl #16
    44ec:	02050104 	andeq	r0, r5, #4, 2
    44f0:	7dee0306 	stclvc	3, cr0, [lr, #24]!
    44f4:	060b052e 	streq	r0, [fp], -lr, lsr #10
    44f8:	05825503 	streq	r5, [r2, #1283]	; 0x503
    44fc:	1f030609 	svcne	0x00030609
    4500:	0613052e 	ldreq	r0, [r3], -lr, lsr #10
    4504:	2e0c0501 	cfsh32cs	mvfx0, mvfx12, #1
    4508:	05202a05 	streq	r2, [r0, #-2565]!	; 0xfffff5fb
    450c:	05052022 	streq	r2, [r5, #-34]	; 0xffffffde
    4510:	0b053e06 	bleq	153d30 <__ccfg+0x133d88>
    4514:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4518:	0b053106 	bleq	150938 <__ccfg+0x130990>
    451c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4520:	06040535 			; <UNDEFINED> instruction: 0x06040535
    4524:	592e0a03 	stmdbpl	lr!, {r0, r1, r9, fp}
    4528:	01060905 	tsteq	r6, r5, lsl #18
    452c:	054a0e03 	strbeq	r0, [sl, #-3587]	; 0xfffff1fd
    4530:	03210604 			; <UNDEFINED> instruction: 0x03210604
    4534:	0359206b 	cmpeq	r9, #107	; 0x6b
    4538:	054b200b 	strbeq	r2, [fp, #-11]
    453c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4540:	4b5e0604 	blmi	1785d58 <__ccfg+0x1765db0>
    4544:	01060905 	tsteq	r6, r5, lsl #18
    4548:	03060305 	movweq	r0, #25349	; 0x6305
    454c:	05587fba 	ldrbeq	r7, [r8, #-4026]	; 0xfffff046
    4550:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4554:	00083b09 	andeq	r3, r8, r9, lsl #22
    4558:	3b050101 	blcc	144964 <__ccfg+0x1249bc>
    455c:	00020500 	andeq	r0, r2, r0, lsl #10
    4560:	03000000 	movweq	r0, #0
    4564:	050102a0 	streq	r0, [r1, #-672]	; 0xfffffd60
    4568:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    456c:	050e063b 	streq	r0, [lr, #-1595]	; 0xfffff9c5
    4570:	3b05320c 	blcc	150da8 <__ccfg+0x130e00>
    4574:	2405051c 	strcs	r0, [r5], #-1308	; 0xfffffae4
    4578:	051c3b05 	ldreq	r3, [ip, #-2821]	; 0xfffff4fb
    457c:	03053205 	movweq	r3, #20997	; 0x5205
    4580:	06053206 	streq	r3, [r5], -r6, lsl #4
    4584:	1a050106 	bne	1449a4 <__ccfg+0x1249fc>
    4588:	2e14053c 	mrccs	5, 0, r0, cr4, cr12, {1}
    458c:	3f060305 	svccc	0x00060305
    4590:	01060805 	tsteq	r6, r5, lsl #16
    4594:	2f060305 	svccs	0x00060305
    4598:	01060805 	tsteq	r6, r5, lsl #16
    459c:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    45a0:	01060805 	tsteq	r6, r5, lsl #16
    45a4:	30060305 	andcc	r0, r6, r5, lsl #6
    45a8:	0609052f 	streq	r0, [r9], -pc, lsr #10
    45ac:	06030501 	streq	r0, [r3], -r1, lsl #10
    45b0:	060c0530 			; <UNDEFINED> instruction: 0x060c0530
    45b4:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    45b8:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    45bc:	01060a05 	tsteq	r6, r5, lsl #20
    45c0:	21060405 	tstcs	r6, r5, lsl #8
    45c4:	0601052f 	streq	r0, [r1], -pc, lsr #10
    45c8:	05012203 	streq	r2, [r1, #-515]	; 0xfffffdfd
    45cc:	62030603 	andvs	r0, r3, #3145728	; 0x300000
    45d0:	0611053c 			; <UNDEFINED> instruction: 0x0611053c
    45d4:	20060501 	andcs	r0, r6, r1, lsl #10
    45d8:	3e060305 	cdpcc	3, 0, cr0, cr6, cr5, {0}
    45dc:	4a062406 	bmi	18d5fc <__ccfg+0x16d654>
    45e0:	05020430 	streq	r0, [r2, #-1072]	; 0xfffffbd0
    45e4:	01c80329 	biceq	r0, r8, r9, lsr #6
    45e8:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    45ec:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    45f0:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    45f4:	03030501 	movweq	r0, #13569	; 0x3501
    45f8:	043c7eb3 	ldrteq	r7, [ip], #-3763	; 0xfffff14d
    45fc:	03380502 	teqeq	r8, #8388608	; 0x800000
    4600:	042001cd 	strteq	r0, [r0], #-461	; 0xfffffe33
    4604:	06030501 	streq	r0, [r3], -r1, lsl #10
    4608:	2e7eb303 	cdpcs	3, 7, cr11, cr14, cr3, {0}
    460c:	0619052f 	ldreq	r0, [r9], -pc, lsr #10
    4610:	2e030501 	cfsh32cs	mvfx0, mvfx3, #1
    4614:	3e4b4b06 	vmlacc.f64	d20, d11, d6
    4618:	31060805 	tstcc	r6, r5, lsl #16
    461c:	052b0c05 	streq	r0, [fp, #-3077]!	; 0xfffff3fb
    4620:	08052e09 	stmdaeq	r5, {r0, r3, r9, sl, fp, sp}
    4624:	06090523 	streq	r0, [r9], -r3, lsr #10
    4628:	2603051d 			; <UNDEFINED> instruction: 0x2603051d
    462c:	29050204 	stmdbcs	r5, {r2, r9}
    4630:	0101bb03 	tsteq	r1, r3, lsl #22
    4634:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4638:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    463c:	01040106 	tsteq	r4, r6, lsl #2
    4640:	03060205 	movweq	r0, #25093	; 0x6205
    4644:	053c7ec1 	ldreq	r7, [ip, #-3777]!	; 0xfffff13f
    4648:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    464c:	4b400602 	blmi	1005e5c <__ccfg+0xfe5eb4>
    4650:	73030405 	movwvc	r0, #13317	; 0x3405
    4654:	06130520 	ldreq	r0, [r3], -r0, lsr #10
    4658:	3c040501 	cfstr32cc	mvfx0, [r4], {1}
    465c:	08053d06 	stmdaeq	r5, {r1, r2, r8, sl, fp, ip, sp}
    4660:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4664:	08055906 	stmdaeq	r5, {r1, r2, r8, fp, ip, lr}
    4668:	0b050106 	bleq	144a88 <__ccfg+0x124ae0>
    466c:	024a5d03 	subeq	r5, sl, #3, 26	; 0xc0
    4670:	0101000d 	tsteq	r1, sp
    4674:	05001205 	streq	r1, [r0, #-517]	; 0xfffffdfb
    4678:	00000002 	andeq	r0, r0, r2
    467c:	02da0300 	sbcseq	r0, sl, #0, 6
    4680:	15010501 	strne	r0, [r1, #-1281]	; 0xfffffaff
    4684:	01000102 	tsteq	r0, r2, lsl #2
    4688:	00180501 	andseq	r0, r8, r1, lsl #10
    468c:	00000205 	andeq	r0, r0, r5, lsl #4
    4690:	df030000 	svcle	0x00030000
    4694:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    4698:	06010515 			; <UNDEFINED> instruction: 0x06010515
    469c:	00020213 	andeq	r0, r2, r3, lsl r2
    46a0:	03040101 	movweq	r0, #16641	; 0x4101
    46a4:	05002905 	streq	r2, [r0, #-2309]	; 0xfffff6fb
    46a8:	00000002 	andeq	r0, r0, r2
    46ac:	02051900 	andeq	r1, r5, #0, 18
    46b0:	06050514 			; <UNDEFINED> instruction: 0x06050514
    46b4:	06030501 	streq	r0, [r3], -r1, lsl #10
    46b8:	06070521 	streq	r0, [r7], -r1, lsr #10
    46bc:	06020501 	streq	r0, [r2], -r1, lsl #10
    46c0:	06050530 			; <UNDEFINED> instruction: 0x06050530
    46c4:	06030501 	streq	r0, [r3], -r1, lsl #10
    46c8:	06080521 	streq	r0, [r8], -r1, lsr #10
    46cc:	06020501 	streq	r0, [r2], -r1, lsl #10
    46d0:	0601053e 			; <UNDEFINED> instruction: 0x0601053e
    46d4:	00030213 	andeq	r0, r3, r3, lsl r2
    46d8:	03040101 	movweq	r0, #16641	; 0x4101
    46dc:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
    46e0:	00000002 	andeq	r0, r0, r2
    46e4:	01120300 	tsteq	r2, r0, lsl #6
    46e8:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    46ec:	05100617 	ldreq	r0, [r0, #-1559]	; 0xfffff9e9
    46f0:	2f062202 	svccs	0x00062202
    46f4:	06010567 	streq	r0, [r1], -r7, ror #10
    46f8:	2d020513 	cfstr32cs	mvfx0, [r2, #-76]	; 0xffffffb4
    46fc:	01000202 	tsteq	r0, r2, lsl #4
    4700:	0001c101 	andeq	ip, r1, r1, lsl #2
    4704:	21000300 	mrscs	r0, LR_irq
    4708:	02000001 	andeq	r0, r0, #1
    470c:	0d0efb01 	vstreq	d15, [lr, #-4]
    4710:	01010100 	mrseq	r0, (UNDEF: 17)
    4714:	00000001 	andeq	r0, r0, r1
    4718:	01000001 	tsteq	r0, r1
    471c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4668 <patchGenfskRfe+0x298>
    4720:	616d2f65 	cmnvs	sp, r5, ror #30
    4724:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4728:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    472c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4730:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4734:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4738:	4349502f 	movtmi	r5, #36911	; 0x902f
    473c:	502f534f 	eorpl	r5, pc, pc, asr #6
    4740:	534f6369 	movtpl	r6, #62313	; 0xf369
    4744:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    4748:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    474c:	61697265 	cmnvs	r9, r5, ror #4
    4750:	752f006c 	strvc	r0, [pc, #-108]!	; 46ec <patchGenfskRfe+0x31c>
    4754:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 4590 <patchGenfskRfe+0x1c0>
    4758:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    475c:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    4760:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    4764:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    4768:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    476c:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    4770:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    4774:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4778:	2f006564 	svccs	0x00006564
    477c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4780:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4784:	2f6e6974 	svccs	0x006e6974
    4788:	6b736544 	blvs	1cddca0 <__ccfg+0x1cbdcf8>
    478c:	2f706f74 	svccs	0x00706f74
    4790:	4f534c4f 	svcmi	0x00534c4f
    4794:	2f54454e 	svccs	0x0054454e
    4798:	4f434950 	svcmi	0x00434950
    479c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    47a0:	2f534f63 	svccs	0x00534f63
    47a4:	33314343 	teqcc	r1, #201326593	; 0xc000001
    47a8:	2f005858 	svccs	0x00005858
    47ac:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    47b0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    47b4:	2f6e6974 	svccs	0x006e6974
    47b8:	6b736544 	blvs	1cddcd0 <__ccfg+0x1cbdd28>
    47bc:	2f706f74 	svccs	0x00706f74
    47c0:	4f534c4f 	svcmi	0x00534c4f
    47c4:	2f54454e 	svccs	0x0054454e
    47c8:	4f434950 	svcmi	0x00434950
    47cc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    47d0:	00534f63 	subseq	r4, r3, r3, ror #30
    47d4:	72657300 	rsbvc	r7, r5, #0, 6
    47d8:	2e6e695f 			; <UNDEFINED> instruction: 0x2e6e695f
    47dc:	00010063 	andeq	r0, r1, r3, rrx
    47e0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    47e4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    47e8:	00020068 	andeq	r0, r2, r8, rrx
    47ec:	63726100 	cmnvs	r2, #0, 2
    47f0:	00682e68 	rsbeq	r2, r8, r8, ror #28
    47f4:	6d000003 	stcvs	0, cr0, [r0, #-12]
    47f8:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    47fc:	00030068 	andeq	r0, r3, r8, rrx
    4800:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    4804:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4808:	00682e73 	rsbeq	r2, r8, r3, ror lr
    480c:	62000003 	andvs	r0, r0, #3
    4810:	6f747475 	svcvs	0x00747475
    4814:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4818:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    481c:	00000300 	andeq	r0, r0, r0, lsl #6
    4820:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    4824:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4828:	00000004 	andeq	r0, r0, r4
    482c:	05002a05 	streq	r2, [r0, #-2565]	; 0xfffff5fb
    4830:	001dd802 	andseq	sp, sp, r2, lsl #16
    4834:	010c0300 	mrseq	r0, LR_mon
    4838:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    483c:	03062a05 	movweq	r2, #27141	; 0x6a05
    4840:	0520017a 	streq	r0, [r0, #-378]!	; 0xfffffe86
    4844:	02053405 	andeq	r3, r5, #83886080	; 0x5000000
    4848:	10053206 	andne	r3, r5, r6, lsl #4
    484c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4850:	0603052e 	streq	r0, [r3], -lr, lsr #10
    4854:	060f0521 	streq	r0, [pc], -r1, lsr #10
    4858:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    485c:	21060405 	tstcs	r6, r5, lsl #8
    4860:	01060b05 	tsteq	r6, r5, lsl #22
    4864:	4b060405 	blmi	185880 <__ccfg+0x1658d8>
    4868:	01060705 	tsteq	r6, r5, lsl #14
    486c:	21060505 	tstcs	r6, r5, lsl #10
    4870:	1603053d 			; <UNDEFINED> instruction: 0x1603053d
    4874:	4f02052d 	svcmi	0x0002052d
    4878:	01060505 	tsteq	r6, r5, lsl #10
    487c:	2f060305 	svccs	0x00060305
    4880:	01061305 	tsteq	r6, r5, lsl #6
    4884:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    4888:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    488c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4890:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    4894:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4898:	593e0602 	ldmdbpl	lr!, {r1, r9, sl}
    489c:	060c053d 			; <UNDEFINED> instruction: 0x060c053d
    48a0:	06020501 	streq	r0, [r2], -r1, lsl #10
    48a4:	0605052f 	streq	r0, [r5], -pc, lsr #10
    48a8:	06030501 	streq	r0, [r3], -r1, lsl #10
    48ac:	060e052f 	streq	r0, [lr], -pc, lsr #10
    48b0:	22010501 	andcs	r0, r1, #4194304	; 0x400000
    48b4:	03060305 	movweq	r0, #25349	; 0x6305
    48b8:	0a052e75 	beq	150294 <__ccfg+0x1302ec>
    48bc:	6e030106 	adfvss	f0, f3, f6
    48c0:	0007024a 	andeq	r0, r7, sl, asr #4
    48c4:	019e0101 	orrseq	r0, lr, r1, lsl #2
    48c8:	00030000 	andeq	r0, r3, r0
    48cc:	0000013d 	andeq	r0, r0, sp, lsr r1
    48d0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    48d4:	0101000d 	tsteq	r1, sp
    48d8:	00000101 	andeq	r0, r0, r1, lsl #2
    48dc:	00000100 	andeq	r0, r0, r0, lsl #2
    48e0:	6f682f01 	svcvs	0x00682f01
    48e4:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4738 <patchGenfskRfe+0x368>
    48e8:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    48ec:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    48f0:	6f746b73 	svcvs	0x00746b73
    48f4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    48f8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    48fc:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4900:	2f534f43 	svccs	0x00534f43
    4904:	4f636950 	svcmi	0x00636950
    4908:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    490c:	2f736269 	svccs	0x00736269
    4910:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    4914:	2f006c61 	svccs	0x00006c61
    4918:	2f727375 	svccs	0x00727375
    491c:	2f62696c 	svccs	0x0062696c
    4920:	2f636367 	svccs	0x00636367
    4924:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4928:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    492c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4930:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    4934:	2f312e32 	svccs	0x00312e32
    4938:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    493c:	00656475 	rsbeq	r6, r5, r5, ror r4
    4940:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 488c <patchGenfskRfe+0x4bc>
    4944:	616d2f65 	cmnvs	sp, r5, ror #30
    4948:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    494c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4950:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4954:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4958:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    495c:	4349502f 	movtmi	r5, #36911	; 0x902f
    4960:	502f534f 	eorpl	r5, pc, pc, asr #6
    4964:	534f6369 	movtpl	r6, #62313	; 0xf369
    4968:	3143432f 	cmpcc	r3, pc, lsr #6
    496c:	00585833 	subseq	r5, r8, r3, lsr r8
    4970:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 48bc <patchGenfskRfe+0x4ec>
    4974:	616d2f65 	cmnvs	sp, r5, ror #30
    4978:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    497c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4980:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4984:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4988:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    498c:	4349502f 	movtmi	r5, #36911	; 0x902f
    4990:	502f534f 	eorpl	r5, pc, pc, asr #6
    4994:	534f6369 	movtpl	r6, #62313	; 0xf369
    4998:	65730000 	ldrbvs	r0, [r3, #-0]!
    499c:	756f5f72 	strbvc	r5, [pc, #-3954]!	; 3a32 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xae>
    49a0:	632e6674 			; <UNDEFINED> instruction: 0x632e6674
    49a4:	00000100 	andeq	r0, r0, r0, lsl #2
    49a8:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    49ac:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    49b0:	00000200 	andeq	r0, r0, r0, lsl #4
    49b4:	61647473 	smcvs	18243	; 0x4743
    49b8:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    49bc:	00000200 	andeq	r0, r0, r0, lsl #4
    49c0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    49c4:	0300682e 	movweq	r6, #2094	; 0x82e
    49c8:	616d0000 	cmnvs	sp, r0
    49cc:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    49d0:	00000300 	andeq	r0, r0, r0, lsl #6
    49d4:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    49d8:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    49dc:	0300682e 	movweq	r6, #2094	; 0x82e
    49e0:	75620000 	strbvc	r0, [r2, #-0]!
    49e4:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    49e8:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    49ec:	00682e73 	rsbeq	r2, r8, r3, ror lr
    49f0:	73000003 	movwvc	r0, #3
    49f4:	6f697379 	svcvs	0x00697379
    49f8:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    49fc:	623c0000 	eorsvs	r0, ip, #0
    4a00:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    4a04:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    4a08:	00000000 	andeq	r0, r0, r0
    4a0c:	002c0500 	eoreq	r0, ip, r0, lsl #10
    4a10:	1e500205 	cdpne	2, 5, cr0, cr0, cr5, {0}
    4a14:	0b030000 	bleq	c4a1c <__ccfg+0xa4a74>
    4a18:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4a1c:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
    4a20:	7a03062c 	bvc	c62d8 <__ccfg+0xa6330>
    4a24:	0e052e01 	cdpeq	14, 0, cr2, cr5, cr1, {0}
    4a28:	3c050526 	cfstr32cc	mvfx0, [r5], {38}	; 0x26
    4a2c:	30060305 	andcc	r0, r6, r5, lsl #6
    4a30:	010a033d 	tsteq	sl, sp, lsr r3
    4a34:	79030205 	stmdbvc	r3, {r0, r2, r9}
    4a38:	060d052e 	streq	r0, [sp], -lr, lsr #10
    4a3c:	1e020522 	cfsh32ne	mvfx0, mvfx2, #18
    4a40:	0d052206 	sfmeq	f2, 4, [r5, #-24]	; 0xffffffe8
    4a44:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4a48:	0603052e 	streq	r0, [r3], -lr, lsr #10
    4a4c:	4e020532 	mcrmi	5, 0, r0, cr2, cr2, {1}
    4a50:	01060605 	tsteq	r6, r5, lsl #12
    4a54:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    4a58:	3d210603 	stccc	6, cr0, [r1, #-12]!
    4a5c:	05240205 	streq	r0, [r4, #-517]!	; 0xfffffdfb
    4a60:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    4a64:	01010009 	tsteq	r1, r9
    4a68:	000001af 	andeq	r0, r0, pc, lsr #3
    4a6c:	013c0003 	teqeq	ip, r3
    4a70:	01020000 	mrseq	r0, (UNDEF: 2)
    4a74:	000d0efb 	strdeq	r0, [sp], -fp
    4a78:	01010101 	tsteq	r1, r1, lsl #2
    4a7c:	01000000 	mrseq	r0, (UNDEF: 0)
    4a80:	2f010000 	svccs	0x00010000
    4a84:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4a88:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4a8c:	2f6e6974 	svccs	0x006e6974
    4a90:	6b736544 	blvs	1cddfa8 <__ccfg+0x1cbe000>
    4a94:	2f706f74 	svccs	0x00706f74
    4a98:	4f534c4f 	svcmi	0x00534c4f
    4a9c:	2f54454e 	svccs	0x0054454e
    4aa0:	4f434950 	svcmi	0x00434950
    4aa4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4aa8:	2f534f63 	svccs	0x00534f63
    4aac:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    4ab0:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    4ab4:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    4ab8:	73752f00 	cmnvc	r5, #0, 30
    4abc:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4ac0:	63672f62 	cmnvs	r7, #392	; 0x188
    4ac4:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    4ac8:	6f6e2d6d 	svcvs	0x006e2d6d
    4acc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4ad0:	2f696261 	svccs	0x00696261
    4ad4:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    4ad8:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    4adc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4ae0:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    4ae4:	2f656d6f 	svccs	0x00656d6f
    4ae8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4aec:	442f6e69 	strtmi	r6, [pc], #-3689	; 4af4 <patchImageGenfsk+0x70>
    4af0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4af4:	4f2f706f 	svcmi	0x002f706f
    4af8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4afc:	502f5445 	eorpl	r5, pc, r5, asr #8
    4b00:	534f4349 	movtpl	r4, #62281	; 0xf349
    4b04:	6369502f 	cmnvs	r9, #47	; 0x2f
    4b08:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    4b0c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4b10:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    4b14:	2f656d6f 	svccs	0x00656d6f
    4b18:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4b1c:	442f6e69 	strtmi	r6, [pc], #-3689	; 4b24 <patchImageGenfsk+0xa0>
    4b20:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4b24:	4f2f706f 	svcmi	0x002f706f
    4b28:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4b2c:	502f5445 	eorpl	r5, pc, r5, asr #8
    4b30:	534f4349 	movtpl	r4, #62281	; 0xf349
    4b34:	6369502f 	cmnvs	r9, #47	; 0x2f
    4b38:	0000534f 	andeq	r5, r0, pc, asr #6
    4b3c:	5f726573 	svcpl	0x00726573
    4b40:	2e666e69 	cdpcs	14, 6, cr6, cr6, cr9, {3}
    4b44:	00010063 	andeq	r0, r1, r3, rrx
    4b48:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4b4c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    4b50:	00020068 	andeq	r0, r2, r8, rrx
    4b54:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4b58:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    4b5c:	00020068 	andeq	r0, r2, r8, rrx
    4b60:	63726100 	cmnvs	r2, #0, 2
    4b64:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4b68:	6d000003 	stcvs	0, cr0, [r0, #-12]
    4b6c:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    4b70:	00030068 	andeq	r0, r3, r8, rrx
    4b74:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    4b78:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4b7c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4b80:	62000003 	andvs	r0, r0, #3
    4b84:	6f747475 	svcvs	0x00747475
    4b88:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4b8c:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4b90:	00000300 	andeq	r0, r0, r0, lsl #6
    4b94:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    4b98:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4b9c:	3c000004 	stccc	0, cr0, [r0], {4}
    4ba0:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    4ba4:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    4ba8:	0000003e 	andeq	r0, r0, lr, lsr r0
    4bac:	2d050000 	stccs	0, cr0, [r5, #-0]
    4bb0:	a4020500 	strge	r0, [r2], #-1280	; 0xfffffb00
    4bb4:	0300001e 	movweq	r0, #30
    4bb8:	0205010d 	andeq	r0, r5, #1073741827	; 0x40000003
    4bbc:	05141317 	ldreq	r1, [r4, #-791]	; 0xfffffce9
    4bc0:	7803062d 	stmdavc	r3, {r0, r2, r3, r5, r9, sl}
    4bc4:	05052e01 	streq	r2, [r5, #-3585]	; 0xfffff1ff
    4bc8:	06020536 			; <UNDEFINED> instruction: 0x06020536
    4bcc:	06100523 	ldreq	r0, [r0], -r3, lsr #10
    4bd0:	20050501 	andcs	r0, r5, r1, lsl #10
    4bd4:	2f060305 	svccs	0x00060305
    4bd8:	01060f05 	tsteq	r6, r5, lsl #30
    4bdc:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    4be0:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    4be4:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    4be8:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
    4bec:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    4bf0:	3d210605 	stccc	6, cr0, [r1, #-20]!	; 0xffffffec
    4bf4:	2d160305 	ldccs	3, cr0, [r6, #-20]	; 0xffffffec
    4bf8:	304f0205 	subcc	r0, pc, r5, lsl #4
    4bfc:	01060905 	tsteq	r6, r5, lsl #18
    4c00:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    4c04:	060c053d 			; <UNDEFINED> instruction: 0x060c053d
    4c08:	06020501 	streq	r0, [r2], -r1, lsl #10
    4c0c:	06010530 			; <UNDEFINED> instruction: 0x06010530
    4c10:	030a0513 	movweq	r0, #42259	; 0xa513
    4c14:	06026669 	streq	r6, [r2], -r9, ror #12
    4c18:	a9010100 	stmdbge	r1, {r8}
    4c1c:	0300000c 	movweq	r0, #12
    4c20:	00029900 	andeq	r9, r2, r0, lsl #18
    4c24:	fb010200 	blx	4542e <__ccfg+0x25486>
    4c28:	01000d0e 	tsteq	r0, lr, lsl #26
    4c2c:	00010101 	andeq	r0, r1, r1, lsl #2
    4c30:	00010000 	andeq	r0, r1, r0
    4c34:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    4c38:	2f656d6f 	svccs	0x00656d6f
    4c3c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4c40:	442f6e69 	strtmi	r6, [pc], #-3689	; 4c48 <patchImageGenfsk+0x1c4>
    4c44:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4c48:	4f2f706f 	svcmi	0x002f706f
    4c4c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4c50:	502f5445 	eorpl	r5, pc, r5, asr #8
    4c54:	534f4349 	movtpl	r4, #62281	; 0xf349
    4c58:	6369502f 	cmnvs	r9, #47	; 0x2f
    4c5c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    4c60:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4c64:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    4c68:	2f656d6f 	svccs	0x00656d6f
    4c6c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4c70:	442f6e69 	strtmi	r6, [pc], #-3689	; 4c78 <patchImageGenfsk+0x1f4>
    4c74:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4c78:	4f2f706f 	svcmi	0x002f706f
    4c7c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4c80:	502f5445 	eorpl	r5, pc, r5, asr #8
    4c84:	534f4349 	movtpl	r4, #62281	; 0xf349
    4c88:	6369502f 	cmnvs	r9, #47	; 0x2f
    4c8c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    4c90:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4c94:	43432f58 	movtmi	r2, #16216	; 0x3f58
    4c98:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4c9c:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    4ca0:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    4ca4:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    4ca8:	2f006269 	svccs	0x00006269
    4cac:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4cb0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4cb4:	2f6e6974 	svccs	0x006e6974
    4cb8:	6b736544 	blvs	1cde1d0 <__ccfg+0x1cbe228>
    4cbc:	2f706f74 	svccs	0x00706f74
    4cc0:	4f534c4f 	svcmi	0x00534c4f
    4cc4:	2f54454e 	svccs	0x0054454e
    4cc8:	4f434950 	svcmi	0x00434950
    4ccc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4cd0:	2f534f63 	svccs	0x00534f63
    4cd4:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4cd8:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    4cdc:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4ce0:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    4ce4:	66722f45 	ldrbtvs	r2, [r2], -r5, asr #30
    4ce8:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
    4cec:	73656863 	cmnvc	r5, #6488064	; 0x630000
    4cf0:	73752f00 	cmnvc	r5, #0, 30
    4cf4:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4cf8:	63672f62 	cmnvs	r7, #392	; 0x188
    4cfc:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    4d00:	6f6e2d6d 	svcvs	0x006e2d6d
    4d04:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4d08:	2f696261 	svccs	0x00696261
    4d0c:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    4d10:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    4d14:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4d18:	752f0065 	strvc	r0, [pc, #-101]!	; 4cbb <patchImageGenfsk+0x237>
    4d1c:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    4d20:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4d24:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    4d28:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4d2c:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4d30:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    4d34:	2f656d6f 	svccs	0x00656d6f
    4d38:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4d3c:	442f6e69 	strtmi	r6, [pc], #-3689	; 4d44 <plug_null+0x10>
    4d40:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4d44:	4f2f706f 	svcmi	0x002f706f
    4d48:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4d4c:	502f5445 	eorpl	r5, pc, r5, asr #8
    4d50:	534f4349 	movtpl	r4, #62281	; 0xf349
    4d54:	6369502f 	cmnvs	r9, #47	; 0x2f
    4d58:	2f00534f 	svccs	0x0000534f
    4d5c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4d60:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4d64:	2f6e6974 	svccs	0x006e6974
    4d68:	6b736544 	blvs	1cde280 <__ccfg+0x1cbe2d8>
    4d6c:	2f706f74 	svccs	0x00706f74
    4d70:	4f534c4f 	svcmi	0x00534c4f
    4d74:	2f54454e 	svccs	0x0054454e
    4d78:	4f434950 	svcmi	0x00434950
    4d7c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4d80:	2f534f63 	svccs	0x00534f63
    4d84:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    4d88:	00006c65 	andeq	r6, r0, r5, ror #24
    4d8c:	72706672 	rsbsvc	r6, r0, #119537664	; 0x7200000
    4d90:	632e706f 			; <UNDEFINED> instruction: 0x632e706f
    4d94:	00000100 	andeq	r0, r0, r0, lsl #2
    4d98:	2e636672 	mcrcs	6, 3, r6, cr3, cr2, {3}
    4d9c:	00020068 	andeq	r0, r2, r8, rrx
    4da0:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    4da4:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4da8:	72000002 	andvc	r0, r0, #2
    4dac:	61705f66 	cmnvs	r0, r6, ror #30
    4db0:	5f686374 	svcpl	0x00686374
    4db4:	5f657063 	svcpl	0x00657063
    4db8:	666e6567 	strbtvs	r6, [lr], -r7, ror #10
    4dbc:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    4dc0:	00000300 	andeq	r0, r0, r0, lsl #6
    4dc4:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    4dc8:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    4dcc:	6566725f 	strbvs	r7, [r6, #-607]!	; 0xfffffda1
    4dd0:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
    4dd4:	2e6b7366 	cdpcs	3, 6, cr7, cr11, cr6, {3}
    4dd8:	00030068 	andeq	r0, r3, r8, rrx
    4ddc:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4de0:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    4de4:	00040068 	andeq	r0, r4, r8, rrx
    4de8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4dec:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    4df0:	00040068 	andeq	r0, r4, r8, rrx
    4df4:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    4df8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    4dfc:	00050068 	andeq	r0, r5, r8, rrx
    4e00:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    4e04:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4e08:	00000500 	andeq	r0, r0, r0, lsl #10
    4e0c:	6b636f6c 	blvs	18e0bc4 <__ccfg+0x18c0c1c>
    4e10:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    4e14:	66720000 	ldrbtvs	r0, [r2], -r0
    4e18:	69616d5f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    4e1c:	786f626c 	stmdavc	pc!, {r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    4e20:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4e24:	66720000 	ldrbtvs	r0, [r2], -r0
    4e28:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 4cb4 <patchImageGenfsk+0x230>
    4e2c:	5f6e6f6d 	svcpl	0x006e6f6d
    4e30:	2e646d63 	cdpcs	13, 6, cr6, cr4, cr3, {3}
    4e34:	00020068 	andeq	r0, r2, r8, rrx
    4e38:	5f667200 	svcpl	0x00667200
    4e3c:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    4e40:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    4e44:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4e48:	66720000 	ldrbtvs	r0, [r2], -r0
    4e4c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    4e50:	6e655f61 	cdpvs	15, 6, cr5, cr5, cr1, {3}
    4e54:	2e797274 	mrccs	2, 3, r7, cr9, cr4, {3}
    4e58:	00020068 	andeq	r0, r2, r8, rrx
    4e5c:	63726100 	cmnvs	r2, #0, 2
    4e60:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4e64:	6d000001 	stcvs	0, cr0, [r0, #-4]
    4e68:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    4e6c:	00010068 	andeq	r0, r1, r8, rrx
    4e70:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    4e74:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4e78:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4e7c:	62000001 	andvs	r0, r0, #1
    4e80:	6f747475 	svcvs	0x00747475
    4e84:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4e88:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4e8c:	00000100 	andeq	r0, r0, r0, lsl #2
    4e90:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    4e94:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4e98:	6b000006 	blvs	4eb8 <__exidx_end+0x164>
    4e9c:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    4ea0:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    4ea4:	73000007 	movwvc	r0, #7
    4ea8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4eac:	735f6672 	cmpvc	pc, #119537664	; 0x7200000
    4eb0:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    4eb4:	2e73676e 	cdpcs	7, 7, cr6, cr3, cr14, {3}
    4eb8:	00010068 	andeq	r0, r1, r8, rrx
    4ebc:	17050000 	strne	r0, [r5, -r0]
    4ec0:	04020500 	streq	r0, [r2], #-1280	; 0xfffffb00
    4ec4:	0300001f 	movweq	r0, #31
    4ec8:	0501039f 	streq	r0, [r1, #-927]	; 0xfffffc61
    4ecc:	38051602 	stmdacc	r5, {r1, r9, sl, ip}
    4ed0:	26051406 	strcs	r1, [r5], -r6, lsl #8
    4ed4:	20380520 	eorscs	r0, r8, r0, lsr #10
    4ed8:	053c2605 	ldreq	r2, [ip, #-1541]!	; 0xfffff9fb
    4edc:	01051e15 	tsteq	r5, r5, lsl lr
    4ee0:	00080231 	andeq	r0, r8, r1, lsr r2
    4ee4:	2a050101 	bcs	1452f0 <__ccfg+0x125348>
    4ee8:	24020500 	strcs	r0, [r2], #-1280	; 0xfffffb00
    4eec:	0300001f 	movweq	r0, #31
    4ef0:	050106c9 	streq	r0, [r1, #-1737]	; 0xfffff937
    4ef4:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    4ef8:	200e062a 	andcs	r0, lr, sl, lsr #12
    4efc:	08060405 	stmdaeq	r6, {r0, r2, sl}
    4f00:	06170544 	ldreq	r0, [r7], -r4, asr #10
    4f04:	200c0501 	andcs	r0, ip, r1, lsl #10
    4f08:	20030805 	andcs	r0, r3, r5, lsl #16
    4f0c:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
    4f10:	20640321 	rsbcs	r0, r4, r1, lsr #6
    4f14:	03060605 	movweq	r0, #26117	; 0x6605
    4f18:	04055875 	streq	r5, [r5], #-2165	; 0xfffff78b
    4f1c:	200d0306 	andcs	r0, sp, r6, lsl #6
    4f20:	2e9e0101 	fmlcse	f0, f6, f1
    4f24:	01054a58 	tsteq	r5, r8, asr sl
    4f28:	00fa0306 	rscseq	r0, sl, r6, lsl #6
    4f2c:	06040501 	streq	r0, [r4], -r1, lsl #10
    4f30:	207f9003 	rsbscs	r9, pc, r3
    4f34:	060b055d 			; <UNDEFINED> instruction: 0x060b055d
    4f38:	05202001 	streq	r2, [r0, #-1]!
    4f3c:	052f0604 	streq	r0, [pc, #-1540]!	; 4940 <patchGenfskRfe+0x570>
    4f40:	63030606 	movwvs	r0, #13830	; 0x3606
    4f44:	06040501 	streq	r0, [r4], -r1, lsl #10
    4f48:	052e2103 	streq	r2, [lr, #-259]!	; 0xfffffefd
    4f4c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    4f50:	04052008 	streq	r2, [r5], #-8
    4f54:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    4f58:	0100e203 	tsteq	r0, r3, lsl #4
    4f5c:	01060505 	tsteq	r6, r5, lsl #10
    4f60:	2f060305 	svccs	0x00060305
    4f64:	050f0205 	streq	r0, [pc, #-517]	; 4d67 <__exidx_end+0x13>
    4f68:	05150608 	ldreq	r0, [r5, #-1544]	; 0xfffff9f8
    4f6c:	04051d09 	streq	r1, [r5], #-3337	; 0xfffff2f7
    4f70:	7fa40306 	svcvc	0x00a40306
    4f74:	06110520 	ldreq	r0, [r1], -r0, lsr #10
    4f78:	06040501 	streq	r0, [r4], -r1, lsl #10
    4f7c:	06050541 	streq	r0, [r5], -r1, asr #10
    4f80:	1f070513 	svcne	0x00070513
    4f84:	21060505 	tstcs	r6, r5, lsl #10
    4f88:	5204055b 	andpl	r0, r4, #381681664	; 0x16c00000
    4f8c:	01060705 	tsteq	r6, r5, lsl #14
    4f90:	22060505 	andcs	r0, r6, #20971520	; 0x1400000
    4f94:	5a060101 	bpl	1853a0 <__ccfg+0x1653f8>
    4f98:	0d054a06 	vstreq	s8, [r5, #-24]	; 0xffffffe8
    4f9c:	20053506 	andcs	r3, r5, r6, lsl #10
    4fa0:	06050521 	streq	r0, [r5], -r1, lsr #10
    4fa4:	0611053c 			; <UNDEFINED> instruction: 0x0611053c
    4fa8:	2d080513 	cfstr32cs	mvfx0, [r8, #-76]	; 0xffffffb4
    4fac:	2d061b05 	vstrcs	d1, [r6, #-20]	; 0xffffffec
    4fb0:	01061e05 	tsteq	r6, r5, lsl #28
    4fb4:	20061205 	andcs	r1, r6, r5, lsl #4
    4fb8:	01060405 	tsteq	r6, r5, lsl #8
    4fbc:	3c100306 	ldccc	3, cr0, [r0], {6}
    4fc0:	01062e05 	tsteq	r6, r5, lsl #28
    4fc4:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
    4fc8:	04051f2e 	streq	r1, [r5], #-3886	; 0xfffff0d2
    4fcc:	2e053e06 	cdpcs	14, 0, cr3, cr5, cr6, {0}
    4fd0:	24050106 	strcs	r0, [r5], #-262	; 0xfffffefa
    4fd4:	06040520 	streq	r0, [r4], -r0, lsr #10
    4fd8:	0524594b 	streq	r5, [r4, #-2379]!	; 0xfffff6b5
    4fdc:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    4fe0:	200e0308 	andcs	r0, lr, r8, lsl #6
    4fe4:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    4fe8:	05207503 	streq	r7, [r0, #-1283]!	; 0xfffffafd
    4fec:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    4ff0:	0c052114 	stfeqs	f2, [r5], {20}
    4ff4:	04052049 	streq	r2, [r5], #-73	; 0xffffffb7
    4ff8:	11033006 	tstne	r3, r6
    4ffc:	75032f01 	strvc	r2, [r3, #-3841]	; 0xfffff0ff
    5000:	060a0558 			; <UNDEFINED> instruction: 0x060a0558
    5004:	06040501 	streq	r0, [r4], -r1, lsl #10
    5008:	060a0536 			; <UNDEFINED> instruction: 0x060a0536
    500c:	21060501 	tstcs	r6, r1, lsl #10
    5010:	2e1f0a05 	vnmlscs.f32	s0, s30, s10
    5014:	053c2020 	ldreq	r2, [ip, #-32]!	; 0xffffffe0
    5018:	09030604 	stmdbeq	r3, {r2, r9, sl}
    501c:	060d0566 	streq	r0, [sp], -r6, ror #10
    5020:	05202001 	streq	r2, [r0, #-1]!
    5024:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    5028:	051e060d 	ldreq	r0, [lr, #-1549]	; 0xfffff9f3
    502c:	02420604 	subeq	r0, r2, #4, 12	; 0x400000
    5030:	0101001f 	tsteq	r1, pc, lsl r0
    5034:	05002305 	streq	r2, [r0, #-773]	; 0xfffffcfb
    5038:	0020b402 	eoreq	fp, r0, r2, lsl #8
    503c:	01c40300 	biceq	r0, r4, r0, lsl #6
    5040:	17020501 	strne	r0, [r2, -r1, lsl #10]
    5044:	06230515 			; <UNDEFINED> instruction: 0x06230515
    5048:	20017803 	andcs	r7, r1, r3, lsl #16
    504c:	03060205 	movweq	r0, #25093	; 0x6205
    5050:	03052e0a 	movweq	r2, #24074	; 0x5e0a
    5054:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
    5058:	3c0c0501 	cfstr32cc	mvfx0, [ip], {1}
    505c:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    5060:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    5064:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5068:	06300604 	ldrteq	r0, [r0], -r4, lsl #12
    506c:	06030526 	streq	r0, [r3], -r6, lsr #10
    5070:	0606053a 			; <UNDEFINED> instruction: 0x0606053a
    5074:	06040501 	streq	r0, [r4], -r1, lsl #10
    5078:	03054b2f 	movweq	r4, #23343	; 0x5b2f
    507c:	03080531 	movweq	r0, #34097	; 0x8531
    5080:	06053c71 			; <UNDEFINED> instruction: 0x06053c71
    5084:	01051306 	tsteq	r5, r6, lsl #6
    5088:	02201003 	eoreq	r1, r0, #3
    508c:	01010009 	tsteq	r1, r9
    5090:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
    5094:	0020fc02 	eoreq	pc, r0, r2, lsl #24
    5098:	03940300 	orrseq	r0, r4, #0, 6
    509c:	16020501 	strne	r0, [r2], -r1, lsl #10
    50a0:	0e061605 	cfmadd32eq	mvax0, mvfx1, mvfx6, mvfx5
    50a4:	05240e05 	streq	r0, [r4, #-3589]!	; 0xfffff1fb
    50a8:	02052005 	andeq	r2, r5, #5
    50ac:	053d3f06 	ldreq	r3, [sp, #-3846]!	; 0xfffff0fa
    50b0:	024b0601 	subeq	r0, fp, #1048576	; 0x100000
    50b4:	01010006 	tsteq	r1, r6
    50b8:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
    50bc:	00212002 	eoreq	r2, r1, r2
    50c0:	02e00300 	rsceq	r0, r0, #0, 6
    50c4:	16020501 	strne	r0, [r2], -r1, lsl #10
    50c8:	0e061705 	cdpeq	7, 0, cr1, cr6, cr5, {0}
    50cc:	05240e05 	streq	r0, [r4, #-3589]!	; 0xfffff1fb
    50d0:	02052005 	andeq	r2, r5, #5
    50d4:	02043f06 	andeq	r3, r4, #6, 30
    50d8:	03063505 	movweq	r3, #25861	; 0x6505
    50dc:	04017eb9 	streq	r7, [r1], #-3769	; 0xfffff147
    50e0:	03020501 	movweq	r0, #9473	; 0x2501
    50e4:	062001c7 	strteq	r0, [r0], -r7, asr #3
    50e8:	04303f5a 	ldrteq	r3, [r0], #-3930	; 0xfffff0a6
    50ec:	03050502 	movweq	r0, #21762	; 0x5502
    50f0:	05017eb2 	streq	r7, [r1, #-3762]	; 0xfffff14e
    50f4:	04010635 	streq	r0, [r1], #-1589	; 0xfffff9cb
    50f8:	03020501 	movweq	r0, #9473	; 0x2501
    50fc:	042001d0 	strteq	r0, [r0], #-464	; 0xfffffe30
    5100:	03350502 	teqeq	r5, #8388608	; 0x800000
    5104:	04207eb0 	strteq	r7, [r0], #-3760	; 0xfffff150
    5108:	06020501 	streq	r0, [r2], -r1, lsl #10
    510c:	2001d003 	andcs	sp, r1, r3
    5110:	06480531 			; <UNDEFINED> instruction: 0x06480531
    5114:	06020501 	streq	r0, [r2], -r1, lsl #10
    5118:	04013131 	streq	r3, [r1], #-305	; 0xfffffecf
    511c:	03290503 			; <UNDEFINED> instruction: 0x03290503
    5120:	0505015f 	streq	r0, [r5, #-351]	; 0xfffffea1
    5124:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    5128:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    512c:	1c030602 	stcne	6, cr0, [r3], {2}
    5130:	0503044a 	streq	r0, [r3, #-1098]	; 0xfffffbb6
    5134:	015f0329 	cmpeq	pc, r9, lsr #6
    5138:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    513c:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    5140:	06020501 	streq	r0, [r2], -r1, lsl #10
    5144:	142e1c03 	strtne	r1, [lr], #-3075	; 0xfffff3fd
    5148:	0101014b 	tsteq	r1, fp, asr #2
    514c:	01050101 	tsteq	r5, r1, lsl #2
    5150:	0b021306 	bleq	89d70 <__ccfg+0x69dc8>
    5154:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5158:	0205000d 	andeq	r0, r5, #13
    515c:	0000217c 	andeq	r2, r0, ip, ror r1
    5160:	0101e103 	tsteq	r1, r3, lsl #2
    5164:	02052006 	andeq	r2, r5, #6
    5168:	03054f06 	movweq	r4, #24326	; 0x5f06
    516c:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
    5170:	20060501 	andcs	r0, r6, r1, lsl #10
    5174:	31060305 	tstcc	r6, r5, lsl #6
    5178:	01060605 	tsteq	r6, r5, lsl #12
    517c:	30060405 	andcc	r0, r6, r5, lsl #8
    5180:	4c03055b 	cfstr32mi	mvfx0, [r3], {91}	; 0x5b
    5184:	75030805 	strvc	r0, [r3, #-2053]	; 0xfffff7fb
    5188:	0606053c 			; <UNDEFINED> instruction: 0x0606053c
    518c:	03010513 	movweq	r0, #5395	; 0x1513
    5190:	0502200c 	streq	r2, [r2, #-12]
    5194:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5198:	0205000d 	andeq	r0, r5, #13
    519c:	000021b4 			; <UNDEFINED> instruction: 0x000021b4
    51a0:	0101fe03 	tsteq	r1, r3, lsl #28	; <UNPREDICTABLE>
    51a4:	09030205 	stmdbeq	r3, {r0, r2, r9}
    51a8:	03040101 	movweq	r0, #16641	; 0x4101
    51ac:	1b032905 	blne	cf5c8 <__ccfg+0xaf620>
    51b0:	17050501 	strne	r0, [r5, -r1, lsl #10]
    51b4:	01062d05 	tsteq	r6, r5, lsl #26
    51b8:	0d050104 	stfeqs	f0, [r5, #-16]
    51bc:	043c5703 	ldrteq	r5, [ip], #-1795	; 0xfffff8fd
    51c0:	032d0503 			; <UNDEFINED> instruction: 0x032d0503
    51c4:	01042e29 	tsteq	r4, r9, lsr #28
    51c8:	03060205 	movweq	r0, #25093	; 0x6205
    51cc:	03042060 	movweq	r2, #16480	; 0x4060
    51d0:	1b032905 	blne	cf5ec <__ccfg+0xaf644>
    51d4:	17050501 	strne	r0, [r5, -r1, lsl #10]
    51d8:	01062d05 	tsteq	r6, r5, lsl #26
    51dc:	02050104 	andeq	r0, r5, #4, 2
    51e0:	2e600306 	cdpcs	3, 6, cr0, cr0, cr6, {0}
    51e4:	07052f19 	smladeq	r5, r9, pc, r2	; <UNPREDICTABLE>
    51e8:	3c1c0501 	cfldr32cc	mvfx0, [ip], {1}
    51ec:	01061e05 	tsteq	r6, r5, lsl #28
    51f0:	062e0205 	strteq	r0, [lr], -r5, lsl #4
    51f4:	06480531 			; <UNDEFINED> instruction: 0x06480531
    51f8:	32020501 	andcc	r0, r2, #4194304	; 0x400000
    51fc:	051c4805 	ldreq	r4, [ip, #-2053]	; 0xfffff7fb
    5200:	31240602 			; <UNDEFINED> instruction: 0x31240602
    5204:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
    5208:	017ee403 	cmneq	lr, r3, lsl #8
    520c:	01063505 	tsteq	r6, r5, lsl #10
    5210:	02050104 	andeq	r0, r5, #4, 2
    5214:	3c019f03 	stccc	15, cr9, [r1], {3}
    5218:	35050204 	strcc	r0, [r5, #-516]	; 0xfffffdfc
    521c:	207ee103 	rsbscs	lr, lr, r3, lsl #2
    5220:	02050104 	andeq	r0, r5, #4, 2
    5224:	019f0306 	orrseq	r0, pc, r6, lsl #6
    5228:	04043220 	streq	r3, [r4], #-544	; 0xfffffde0
    522c:	10030405 	andne	r0, r3, r5, lsl #8
    5230:	01730301 	cmneq	r3, r1, lsl #6
    5234:	6b030105 	blvs	c5650 <__ccfg+0xa56a8>
    5238:	03040501 	movweq	r0, #17665	; 0x4501
    523c:	61030116 	tstvs	r3, r6, lsl r1
    5240:	1d031501 	cfstr32ne	mvfx1, [r3, #-4]
    5244:	016d0366 	cmneq	sp, r6, ror #6
    5248:	12051513 	andne	r1, r5, #79691776	; 0x4c00000
    524c:	05040106 	streq	r0, [r4, #-262]	; 0xfffffefa
    5250:	f1030405 			; <UNDEFINED> instruction: 0xf1030405
    5254:	04042e01 	streq	r2, [r4], #-3585	; 0xfffff1ff
    5258:	8f031205 	svchi	0x00031205
    525c:	0405207e 	streq	r2, [r5], #-126	; 0xffffff82
    5260:	12052106 	andne	r2, r5, #-2147483647	; 0x80000001
    5264:	053d1306 	ldreq	r1, [sp, #-774]!	; 0xfffffcfa
    5268:	052f3d13 	streq	r3, [pc, #-3347]!	; 455d <patchGenfskRfe+0x18d>
    526c:	11052f12 	tstne	r5, r2, lsl pc
    5270:	0312053e 	tsteq	r2, #260046848	; 0xf800000
    5274:	04052079 	streq	r2, [r5], #-121	; 0xffffff87
    5278:	13132f06 	tstne	r3, #6, 30
    527c:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
    5280:	04010611 	streq	r0, [r1], #-1553	; 0xfffff9ef
    5284:	031c0505 	tsteq	ip, #20971520	; 0x1400000
    5288:	052001d4 	streq	r0, [r0, #-468]!	; 0xfffffe2c
    528c:	04051f14 	streq	r1, [r5], #-3860	; 0xfffff0ec
    5290:	07052506 	streq	r2, [r5, -r6, lsl #10]
    5294:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
    5298:	07051b18 	smladeq	r5, r8, fp, r1
    529c:	0a052f06 	beq	150ebc <__ccfg+0x130f14>
    52a0:	07051306 	streq	r1, [r5, -r6, lsl #6]
    52a4:	0a052f06 	beq	150ec4 <__ccfg+0x130f1c>
    52a8:	07051306 	streq	r1, [r5, -r6, lsl #6]
    52ac:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
    52b0:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    52b4:	2f2f210d 	svccs	0x002f210d
    52b8:	2121212f 			; <UNDEFINED> instruction: 0x2121212f
    52bc:	05300405 	ldreq	r0, [r0, #-1029]!	; 0xfffffbfb
    52c0:	78030607 	stmdavc	r3, {r0, r1, r2, r9, sl}
    52c4:	1313133c 	tstne	r3, #60, 6	; 0xf0000000
    52c8:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    52cc:	2e060d05 	cdpcs	13, 0, cr0, cr6, cr5, {0}
    52d0:	21060c05 	tstcs	r6, r5, lsl #24
    52d4:	01060405 	tsteq	r6, r5, lsl #8
    52d8:	13132206 	tstne	r3, #1610612736	; 0x60000000
    52dc:	05131313 	ldreq	r1, [r3, #-787]	; 0xfffffced
    52e0:	0401060a 	streq	r0, [r1], #-1546	; 0xfffff9f6
    52e4:	03090501 	movweq	r0, #38145	; 0x9501
    52e8:	04207e95 	strteq	r7, [r0], #-3733	; 0xfffff16b
    52ec:	030a0505 	movweq	r0, #42245	; 0xa505
    52f0:	052001eb 	streq	r0, [r0, #-491]!	; 0xfffffe15
    52f4:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    52f8:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    52fc:	052f0604 	streq	r0, [pc, #-1540]!	; 4d00 <patchImageGenfsk+0x27c>
    5300:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5304:	052f0604 	streq	r0, [pc, #-1540]!	; 4d08 <patchImageGenfsk+0x284>
    5308:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    530c:	052f0604 	streq	r0, [pc, #-1540]!	; 4d10 <ratable>
    5310:	0401060a 	streq	r0, [r1], #-1546	; 0xfffff9f6
    5314:	06090501 	streq	r0, [r9], -r1, lsl #10
    5318:	2e7e9103 	expcse	f1, f3
    531c:	05360205 	ldreq	r0, [r6, #-517]!	; 0xfffffdfb
    5320:	02053f09 	andeq	r3, r5, #9, 30	; 0x24
    5324:	3e3c1203 	cdpcc	2, 3, cr1, cr12, cr3, {0}
    5328:	5a3d435c 	bpl	f560a0 <__ccfg+0xf360f8>
    532c:	1b250613 	blne	946b80 <__ccfg+0x926bd8>
    5330:	30056906 	andcc	r6, r5, r6, lsl #18
    5334:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5338:	2d053d06 	stccs	13, cr3, [r5, #-24]	; 0xffffffe8
    533c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5340:	2d052f06 	stccs	15, cr2, [r5, #-24]	; 0xffffffe8
    5344:	02051f06 	andeq	r1, r5, #6, 30
    5348:	28010521 	stmdacs	r1, {r0, r5, r8, sl}
    534c:	78030205 	stmdavc	r3, {r0, r2, r9}
    5350:	0033022e 	eorseq	r0, r3, lr, lsr #4
    5354:	1e050101 	adfnes	f0, f5, f1
    5358:	34020500 	strcc	r0, [r2], #-1280	; 0xfffffb00
    535c:	03000023 	movweq	r0, #35	; 0x23
    5360:	050103b4 	streq	r0, [r1, #-948]	; 0xfffffc4c
    5364:	03131402 	tsteq	r3, #33554432	; 0x2000000
    5368:	02040109 	andeq	r0, r4, #1073741826	; 0x40000002
    536c:	ee030305 	cdp	3, 0, cr0, cr3, cr5, {0}
    5370:	0104017d 	tsteq	r4, sp, ror r1
    5374:	03061e05 	movweq	r1, #28165	; 0x6e05
    5378:	04010286 	streq	r0, [r1], #-646	; 0xfffffd7a
    537c:	03300502 	teqeq	r0, #8388608	; 0x800000
    5380:	052e7dfa 	streq	r7, [lr, #-3578]!	; 0xfffff206
    5384:	03057b32 	movweq	r7, #23346	; 0x5b32
    5388:	05052906 	streq	r2, [r5, #-2310]	; 0xfffff6fa
    538c:	06320517 			; <UNDEFINED> instruction: 0x06320517
    5390:	06090501 	streq	r0, [r9], -r1, lsl #10
    5394:	060a0521 	streq	r0, [sl], -r1, lsr #10
    5398:	20030501 	andcs	r0, r3, r1, lsl #10
    539c:	01043306 	tsteq	r4, r6, lsl #6
    53a0:	03060a05 	movweq	r0, #27141	; 0x6a05
    53a4:	0401028b 	streq	r0, [r1], #-651	; 0xfffffd75
    53a8:	03300502 	teqeq	r0, #8388608	; 0x800000
    53ac:	04207df5 	strteq	r7, [r0], #-3573	; 0xfffff20b
    53b0:	03050501 	movweq	r0, #21761	; 0x5501
    53b4:	0420029e 	strteq	r0, [r0], #-670	; 0xfffffd62
    53b8:	03300502 	teqeq	r0, #8388608	; 0x800000
    53bc:	04207de2 	strteq	r7, [r0], #-3554	; 0xfffff21e
    53c0:	032d0501 			; <UNDEFINED> instruction: 0x032d0501
    53c4:	04200291 	strteq	r0, [r0], #-657	; 0xfffffd6f
    53c8:	03300502 	teqeq	r0, #8388608	; 0x800000
    53cc:	042e7def 	strteq	r7, [lr], #-3567	; 0xfffff211
    53d0:	06020501 	streq	r0, [r2], -r1, lsl #10
    53d4:	58028b03 	stmdapl	r2, {r0, r1, r8, r9, fp, pc}
    53d8:	01062705 	tsteq	r6, r5, lsl #14
    53dc:	0f030505 	svceq	0x00030505
    53e0:	030a0520 	movweq	r0, #42272	; 0xa520
    53e4:	06052e71 			; <UNDEFINED> instruction: 0x06052e71
    53e8:	03052f06 	movweq	r2, #24326	; 0x5f06
    53ec:	06060513 			; <UNDEFINED> instruction: 0x06060513
    53f0:	06040501 	streq	r0, [r4], -r1, lsl #10
    53f4:	1301013d 	movwne	r0, #4413	; 0x113d
    53f8:	14061905 	strne	r1, [r6], #-2309	; 0xfffff6fb
    53fc:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
    5400:	0705201d 	smladeq	r5, sp, r0, r2
    5404:	1e060520 	cfsh32ne	mvfx0, mvfx6, #16
    5408:	30060405 	andcc	r0, r6, r5, lsl #8
    540c:	01060705 	tsteq	r6, r5, lsl #14
    5410:	05202105 	streq	r2, [r0, #-261]!	; 0xfffffefb
    5414:	05054a37 	streq	r4, [r5, #-2615]	; 0xfffff5c9
    5418:	15053f06 	strne	r3, [r5, #-3846]	; 0xfffff0fa
    541c:	08051606 	stmdaeq	r5, {r1, r2, r9, sl, ip}
    5420:	0605052a 	streq	r0, [r5], -sl, lsr #10
    5424:	061f0524 	ldreq	r0, [pc], -r4, lsr #10
    5428:	20130501 	andscs	r0, r3, r1, lsl #10
    542c:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
    5430:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
    5434:	0f052106 	svceq	0x00052106
    5438:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    543c:	04052f06 	streq	r2, [r5], #-3846	; 0xfffff0fa
    5440:	060f056e 	streq	r0, [pc], -lr, ror #10
    5444:	06130501 	ldreq	r0, [r3], -r1, lsl #10
    5448:	052e6a03 	streq	r6, [lr, #-2563]!	; 0xfffff5fd
    544c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5450:	1b051106 	blne	149870 <__ccfg+0x1298c8>
    5454:	0605052f 	streq	r0, [r5], -pc, lsr #10
    5458:	053c1203 	ldreq	r1, [ip, #-515]!	; 0xfffffdfd
    545c:	4a0a0302 	bmi	28606c <__ccfg+0x2660c4>
    5460:	01060505 	tsteq	r6, r5, lsl #10
    5464:	21060305 	tstcs	r6, r5, lsl #6
    5468:	01140101 	tsteq	r4, r1, lsl #2
    546c:	06010501 	streq	r0, [r1], -r1, lsl #10
    5470:	2b030531 	blcs	c693c <__ccfg+0xa6994>
    5474:	02690105 	rsbeq	r0, r9, #1073741825	; 0x40000001
    5478:	01010013 	tsteq	r1, r3, lsl r0
    547c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    5480:	00240402 	eoreq	r0, r4, r2, lsl #8
    5484:	048c0300 	streq	r0, [ip], #768	; 0x300
    5488:	2e060101 	adfcss	f0, f6, f1
    548c:	03060305 	movweq	r0, #25349	; 0x6305
    5490:	0705820a 	streq	r8, [r5, -sl, lsl #4]
    5494:	06050106 	streq	r0, [r5], -r6, lsl #2
    5498:	06040520 	streq	r0, [r4], -r0, lsr #10
    549c:	0305304c 	movweq	r3, #20556	; 0x504c
    54a0:	060e054f 	streq	r0, [lr], -pc, asr #10
    54a4:	20060501 	andcs	r0, r6, r1, lsl #10
    54a8:	4b060405 	blmi	1864c4 <__ccfg+0x16651c>
    54ac:	01060705 	tsteq	r6, r5, lsl #14
    54b0:	21060505 	tstcs	r6, r5, lsl #10
    54b4:	05360305 	ldreq	r0, [r6, #-773]!	; 0xfffffcfb
    54b8:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    54bc:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    54c0:	24053d06 	strcs	r3, [r5], #-3334	; 0xfffff2fa
    54c4:	1b050106 	blne	1458e4 <__ccfg+0x12593c>
    54c8:	20070558 	andcs	r0, r7, r8, asr r5
    54cc:	33060505 	movwcc	r0, #25861	; 0x6505
    54d0:	0c051306 	stceq	3, cr1, [r5], {6}
    54d4:	2105051f 	tstcs	r5, pc, lsl r5
    54d8:	051f0c05 	ldreq	r0, [pc, #-3077]	; 48db <patchGenfskRfe+0x50b>
    54dc:	0c052105 	stfeqs	f2, [r5], {5}
    54e0:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
    54e4:	20060121 	andcs	r0, r6, r1, lsr #2
    54e8:	052e062e 	streq	r0, [lr, #-1582]!	; 0xfffff9d2
    54ec:	4a72030a 	bmi	1c8611c <__ccfg+0x1c66174>
    54f0:	01060d05 	tsteq	r6, r5, lsl #26
    54f4:	30060405 	andcc	r0, r6, r5, lsl #8
    54f8:	de030205 	cdple	2, 0, cr0, cr3, cr5, {0}
    54fc:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
    5500:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5504:	01880306 	orreq	r0, r8, r6, lsl #6
    5508:	0627052e 	strteq	r0, [r7], -lr, lsr #10
    550c:	200a0501 	andcs	r0, sl, r1, lsl #10
    5510:	2f060605 	svccs	0x00060605
    5514:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    5518:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    551c:	052d0613 	streq	r0, [sp, #-1555]!	; 0xfffff9ed
    5520:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    5524:	05200606 	streq	r0, [r0, #-1542]!	; 0xfffff9fa
    5528:	0e051303 	cdpeq	3, 0, cr1, cr5, cr3, {0}
    552c:	13050106 	movwne	r0, #20742	; 0x5106
    5530:	06051f06 	streq	r1, [r5], -r6, lsl #30
    5534:	16020501 	strne	r0, [r2], -r1, lsl #10
    5538:	74470330 	strbvc	r0, [r7], #-816	; 0xfffffcd0
    553c:	04050101 	streq	r0, [r5], #-257	; 0xfffffeff
    5540:	0101cd03 	tsteq	r1, r3, lsl #26
    5544:	de030205 	cdple	2, 0, cr0, cr3, cr5, {0}
    5548:	1413017e 	ldrne	r0, [r3], #-382	; 0xfffffe82
    554c:	01060505 	tsteq	r6, r5, lsl #10
    5550:	01aa0306 			; <UNDEFINED> instruction: 0x01aa0306
    5554:	0101154a 	tsteq	r1, sl, asr #10
    5558:	06080514 			; <UNDEFINED> instruction: 0x06080514
    555c:	2e100501 	cfmul32cs	mvfx0, mvfx0, mvfx1
    5560:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    5564:	05220606 	streq	r0, [r2, #-1542]!	; 0xfffff9fa
    5568:	05010629 	streq	r0, [r1, #-1577]	; 0xfffff9d7
    556c:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
    5570:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    5574:	05320603 	ldreq	r0, [r2, #-1539]!	; 0xfffff9fd
    5578:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    557c:	4b300604 	blmi	c06d94 <__ccfg+0xbe6dec>
    5580:	01060f05 	tsteq	r6, r5, lsl #30
    5584:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    5588:	05300605 	ldreq	r0, [r0, #-1541]!	; 0xfffff9fb
    558c:	0b053504 	bleq	1529a4 <__ccfg+0x1329fc>
    5590:	060e052a 	streq	r0, [lr], -sl, lsr #10
    5594:	06050501 	streq	r0, [r5], -r1, lsl #10
    5598:	6b030530 	blvs	c6a60 <__ccfg+0xa6ab8>
    559c:	01060705 	tsteq	r6, r5, lsl #14
    55a0:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    55a4:	59330604 	ldmdbpl	r3!, {r2, r9, sl}
    55a8:	0607054b 	streq	r0, [r7], -fp, asr #10
    55ac:	06030501 	streq	r0, [r3], -r1, lsl #10
    55b0:	054a1003 	strbeq	r1, [sl, #-3]
    55b4:	7d9e0302 	ldcvc	3, cr0, [lr, #8]
    55b8:	06050501 	streq	r0, [r5], -r1, lsl #10
    55bc:	06020501 	streq	r0, [r2], -r1, lsl #10
    55c0:	5800d603 	stmdapl	r0, {r0, r1, r9, sl, ip, lr, pc}
    55c4:	03050101 	movweq	r0, #20737	; 0x5101
    55c8:	01028d03 	tsteq	r2, r3, lsl #26
    55cc:	052e1e03 	streq	r1, [lr, #-3587]!	; 0xfffff1fd
    55d0:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
    55d4:	19052131 	stmdbne	r5, {r0, r4, r5, r8, sp}
    55d8:	0603052d 	streq	r0, [r3], -sp, lsr #10
    55dc:	06310521 	ldrteq	r0, [r1], -r1, lsr #10
    55e0:	22030501 	andcs	r0, r3, #4194304	; 0x400000
    55e4:	051e3105 	ldreq	r3, [lr, #-261]	; 0xfffffefb
    55e8:	32220603 	eorcc	r0, r2, #3145728	; 0x300000
    55ec:	01060705 	tsteq	r6, r5, lsl #14
    55f0:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    55f4:	055b0603 	ldrbeq	r0, [fp, #-1539]	; 0xfffff9fd
    55f8:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    55fc:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    5600:	03053106 	movweq	r3, #20742	; 0x5106
    5604:	06130541 	ldreq	r0, [r3], -r1, asr #10
    5608:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    560c:	4b060405 	blmi	186628 <__ccfg+0x166680>
    5610:	01060705 	tsteq	r6, r5, lsl #14
    5614:	41060505 	tstmi	r6, r5, lsl #10
    5618:	01061b05 	tsteq	r6, r5, lsl #22
    561c:	2f060505 	svccs	0x00060505
    5620:	01063305 	tsteq	r6, r5, lsl #6
    5624:	3e060505 	cfsh32cc	mvfx0, mvfx6, #5
    5628:	3f04052f 	svccc	0x0004052f
    562c:	01060b05 	tsteq	r6, r5, lsl #22
    5630:	03060405 	movweq	r0, #25605	; 0x6405
    5634:	01013c09 	tsteq	r1, r9, lsl #24
    5638:	03060305 	movweq	r0, #25349	; 0x6305
    563c:	065800c3 	ldrbeq	r0, [r8], -r3, asr #1
    5640:	206d0342 	rsbcs	r0, sp, r2, asr #6
    5644:	060a053d 			; <UNDEFINED> instruction: 0x060a053d
    5648:	03030501 	movweq	r0, #13569	; 0x3501
    564c:	0a052e0c 	beq	150e84 <__ccfg+0x130edc>
    5650:	05207403 	streq	r7, [r0, #-1027]!	; 0xfffffbfd
    5654:	05270603 	streq	r0, [r7, #-1539]!	; 0xfffff9fd
    5658:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    565c:	01220603 			; <UNDEFINED> instruction: 0x01220603
    5660:	0b031501 	bleq	caa6c <__ccfg+0xaaac4>
    5664:	06070520 	streq	r0, [r7], -r0, lsr #10
    5668:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    566c:	05581f05 	ldrbeq	r1, [r8, #-3845]	; 0xfffff0fb
    5670:	3e053d07 	cdpcc	13, 0, cr3, cr5, cr7, {0}
    5674:	06040549 	streq	r0, [r4], -r9, asr #10
    5678:	3f01053e 	svccc	0x0001053e
    567c:	00200201 	eoreq	r0, r0, r1, lsl #4
    5680:	1f050101 	svcne	0x00050101
    5684:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    5688:	03000025 	movweq	r0, #37	; 0x25
    568c:	050103eb 	streq	r0, [r1, #-1003]	; 0xfffffc15
    5690:	1f051702 	svcne	0x00051702
    5694:	06050d06 	streq	r0, [r5], -r6, lsl #26
    5698:	2e050525 	cfsh32cs	mvfx0, mvfx5, #21
    569c:	23060305 	movwcs	r0, #25349	; 0x6305
    56a0:	30050204 	andcc	r0, r5, r4, lsl #4
    56a4:	7eb00306 	cdpvc	3, 11, cr0, cr0, cr6, {0}
    56a8:	06030566 	streq	r0, [r3], -r6, ror #10
    56ac:	1705051b 	smladne	r5, fp, r5, r0
    56b0:	01063005 	tsteq	r6, r5
    56b4:	21060a05 	tstcs	r6, r5, lsl #20
    56b8:	01060b05 	tsteq	r6, r5, lsl #22
    56bc:	04200305 	strteq	r0, [r0], #-773	; 0xfffffcfb
    56c0:	06020501 	streq	r0, [r2], -r1, lsl #10
    56c4:	2e01d603 	cfmadd32cs	mvax0, mvfx13, mvfx1, mvfx3
    56c8:	03050204 	movweq	r0, #20996	; 0x5204
    56cc:	017e8103 	cmneq	lr, r3, lsl #2
    56d0:	01063205 	tsteq	r6, r5, lsl #4
    56d4:	02050104 	andeq	r0, r5, #4, 2
    56d8:	20028203 	andcs	r8, r2, r3, lsl #4
    56dc:	32050204 	andcc	r0, r5, #4, 4	; 0x40000000
    56e0:	207dfe03 	rsbscs	pc, sp, r3, lsl #28
    56e4:	02050104 	andeq	r0, r5, #4, 2
    56e8:	2e028203 	cdpcs	2, 0, cr8, cr2, cr3, {0}
    56ec:	582e8206 	stmdapl	lr!, {r1, r2, r9, pc}
    56f0:	0114014a 	tsteq	r4, sl, asr #2
    56f4:	06010558 			; <UNDEFINED> instruction: 0x06010558
    56f8:	000d0213 	andeq	r0, sp, r3, lsl r2
    56fc:	25050101 	strcs	r0, [r5, #-257]	; 0xfffffeff
    5700:	64020500 	strvs	r0, [r2], #-1280	; 0xfffffb00
    5704:	03000026 	movweq	r0, #38	; 0x26
    5708:	050107d6 	streq	r0, [r1, #-2006]	; 0xfffff82a
    570c:	01090302 	tsteq	r9, r2, lsl #6
    5710:	03062505 	movweq	r2, #25861	; 0x6505
    5714:	0d050177 	stfeqs	f0, [r5, #-476]	; 0xfffffe24
    5718:	052e0903 	streq	r0, [lr, #-2307]!	; 0xfffff6fd
    571c:	20770325 	rsbscs	r0, r7, r5, lsr #6
    5720:	09030505 	stmdbeq	r3, {r0, r2, r8, sl}
    5724:	06030520 	streq	r0, [r3], -r0, lsr #10
    5728:	05360630 	ldreq	r0, [r6, #-1584]!	; 0xfffff9d0
    572c:	7a030602 	bvc	c6f3c <__ccfg+0xa6f94>
    5730:	0605052e 	streq	r0, [r5], -lr, lsr #10
    5734:	06020501 	streq	r0, [r2], -r1, lsl #10
    5738:	060e0524 	streq	r0, [lr], -r4, lsr #10
    573c:	20050501 	andcs	r0, r5, r1, lsl #10
    5740:	30060305 	andcc	r0, r6, r5, lsl #6
    5744:	37060705 	strcc	r0, [r6, -r5, lsl #14]
    5748:	28060205 	stmdacs	r6, {r0, r2, r9}
    574c:	03060405 	movweq	r0, #25605	; 0x6405
    5750:	05017ea1 	streq	r7, [r1, #-3745]	; 0xfffff15f
    5754:	01df0309 	bicseq	r0, pc, r9, lsl #6
    5758:	030e0520 	movweq	r0, #58656	; 0xe520
    575c:	052e7eac 	streq	r7, [lr, #-3756]!	; 0xfffff154
    5760:	0b052813 	bleq	14f7b4 <__ccfg+0x12f80c>
    5764:	2e01cc03 	cdpcs	12, 0, cr12, cr1, cr3, {0}
    5768:	23060205 	movwcs	r0, #25093	; 0x6205
    576c:	017e9b03 	cmneq	lr, r3, lsl #22
    5770:	05131413 	ldreq	r1, [r3, #-1043]	; 0xfffffbed
    5774:	04051303 	streq	r1, [r5], #-771	; 0xfffffcfd
    5778:	03051306 	movweq	r1, #21254	; 0x5306
    577c:	06055d06 	streq	r5, [r5], -r6, lsl #26
    5780:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5784:	03052f06 	movweq	r2, #24326	; 0x5f06
    5788:	060e055a 			; <UNDEFINED> instruction: 0x060e055a
    578c:	06030501 	streq	r0, [r3], -r1, lsl #10
    5790:	06060530 			; <UNDEFINED> instruction: 0x06060530
    5794:	06040501 	streq	r0, [r4], -r1, lsl #10
    5798:	06130530 			; <UNDEFINED> instruction: 0x06130530
    579c:	06030501 	streq	r0, [r3], -r1, lsl #10
    57a0:	05131332 	ldreq	r1, [r3, #-818]	; 0xfffffcce
    57a4:	05140606 	ldreq	r0, [r4, #-1542]	; 0xfffff9fa
    57a8:	06051f17 			; <UNDEFINED> instruction: 0x06051f17
    57ac:	1f170521 	svcne	0x00170521
    57b0:	052b1305 	streq	r1, [fp, #-773]!	; 0xfffffcfb
    57b4:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    57b8:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    57bc:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    57c0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    57c4:	05260602 	streq	r0, [r6, #-1538]!	; 0xfffff9fe
    57c8:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    57cc:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    57d0:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    57d4:	02053c09 	andeq	r3, r5, #2304	; 0x900
    57d8:	05053106 	streq	r3, [r5, #-262]	; 0xfffffefa
    57dc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    57e0:	15053106 	strne	r3, [r5, #-262]	; 0xfffffefa
    57e4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    57e8:	15052106 	strne	r2, [r5, #-262]	; 0xfffffefa
    57ec:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    57f0:	030b0520 	movweq	r0, #46368	; 0xb520
    57f4:	052001c0 	streq	r0, [r0, #-448]!	; 0xfffffe40
    57f8:	7ec00315 	mcrvc	3, 6, r0, cr0, cr5, {0}
    57fc:	06020520 	streq	r0, [r2], -r0, lsr #10
    5800:	06190523 	ldreq	r0, [r9], -r3, lsr #10
    5804:	030b0501 	movweq	r0, #46337	; 0xb501
    5808:	052001bd 	streq	r0, [r0, #-445]!	; 0xfffffe43
    580c:	7ec30319 	mcrvc	3, 6, r0, cr3, cr9, {0}
    5810:	06020520 	streq	r0, [r2], -r0, lsr #10
    5814:	13151323 	tstne	r5, #-1946157056	; 0x8c000000
    5818:	06250516 			; <UNDEFINED> instruction: 0x06250516
    581c:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
    5820:	0c030602 	stceq	6, cr0, [r3], {2}
    5824:	06090566 	streq	r0, [r9], -r6, ror #10
    5828:	030b0501 	movweq	r0, #46337	; 0xb501
    582c:	052001ae 	streq	r0, [r0, #-430]!	; 0xfffffe52
    5830:	7ed20309 	cdpvc	3, 13, cr0, cr2, cr9, {0}
    5834:	0602052e 	streq	r0, [r2], -lr, lsr #10
    5838:	2e01ab03 	vmlacs.f64	d10, d1, d3
    583c:	01060905 	tsteq	r6, r5, lsl #18
    5840:	31060205 	tstcc	r6, r5, lsl #4
    5844:	01060b05 	tsteq	r6, r5, lsl #22
    5848:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    584c:	09052702 	stmdbeq	r5, {r1, r8, r9, sl, sp}
    5850:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    5854:	01220602 			; <UNDEFINED> instruction: 0x01220602
    5858:	01011301 	tsteq	r1, r1, lsl #6
    585c:	15010113 	strne	r0, [r1, #-275]	; 0xfffffeed
    5860:	0c053f4f 	stceq	15, cr3, [r5], {79}	; 0x4f
    5864:	0a050106 	beq	145c84 <__ccfg+0x125cdc>
    5868:	0602054a 	streq	r0, [r2], -sl, asr #10
    586c:	06050531 			; <UNDEFINED> instruction: 0x06050531
    5870:	06030501 	streq	r0, [r3], -r1, lsl #10
    5874:	60020521 	andvs	r0, r2, r1, lsr #10
    5878:	01062205 	tsteq	r6, r5, lsl #4
    587c:	a0034405 	andge	r4, r3, r5, lsl #8
    5880:	22053c7b 	andcs	r3, r5, #31488	; 0x7b00
    5884:	2004e003 	andcs	lr, r4, r3
    5888:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    588c:	017b9b03 	cmneq	fp, r3, lsl #22
    5890:	01063f05 	tsteq	r6, r5, lsl #30
    5894:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    5898:	01064405 	tsteq	r6, r5, lsl #8
    589c:	052d2e05 	streq	r2, [sp, #-3589]!	; 0xfffff1fb
    58a0:	e7030602 	str	r0, [r3, -r2, lsl #12]
    58a4:	32200804 	eorcc	r0, r0, #4, 16	; 0x40000
    58a8:	01062805 	tsteq	r6, r5, lsl #16
    58ac:	05230205 	streq	r0, [r3, #-517]!	; 0xfffffdfb
    58b0:	02051d28 	andeq	r1, r5, #40, 26	; 0xa00
    58b4:	09052306 	stmdbeq	r5, {r1, r2, r8, r9, sp}
    58b8:	4e02052f 	cfsh32mi	mvfx0, mvfx2, #31
    58bc:	01063005 	tsteq	r6, r5
    58c0:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    58c4:	01010027 	tsteq	r1, r7, lsr #32
    58c8:	000002a8 	andeq	r0, r0, r8, lsr #5
    58cc:	014c0003 	cmpeq	ip, r3
    58d0:	01020000 	mrseq	r0, (UNDEF: 2)
    58d4:	000d0efb 	strdeq	r0, [sp], -fp
    58d8:	01010101 	tsteq	r1, r1, lsl #2
    58dc:	01000000 	mrseq	r0, (UNDEF: 0)
    58e0:	2f010000 	svccs	0x00010000
    58e4:	2f727375 	svccs	0x00727375
    58e8:	2f62696c 	svccs	0x0062696c
    58ec:	2f636367 	svccs	0x00636367
    58f0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    58f4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    58f8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    58fc:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    5900:	2f312e32 	svccs	0x00312e32
    5904:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5908:	00656475 	rsbeq	r6, r5, r5, ror r4
    590c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5858 <__exidx_end+0xb04>
    5910:	616d2f65 	cmnvs	sp, r5, ror #30
    5914:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    5918:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    591c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5920:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5924:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5928:	4349502f 	movtmi	r5, #36911	; 0x902f
    592c:	502f534f 	eorpl	r5, pc, pc, asr #6
    5930:	534f6369 	movtpl	r6, #62313	; 0xf369
    5934:	3143432f 	cmpcc	r3, pc, lsr #6
    5938:	00585833 	subseq	r5, r8, r3, lsr r8
    593c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5888 <__exidx_end+0xb34>
    5940:	616d2f65 	cmnvs	sp, r5, ror #30
    5944:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    5948:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    594c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5950:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5954:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5958:	4349502f 	movtmi	r5, #36911	; 0x902f
    595c:	502f534f 	eorpl	r5, pc, pc, asr #6
    5960:	534f6369 	movtpl	r6, #62313	; 0xf369
    5964:	6f682f00 	svcvs	0x00682f00
    5968:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 57bc <__exidx_end+0xa68>
    596c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    5970:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5974:	6f746b73 	svcvs	0x00746b73
    5978:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    597c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5980:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5984:	2f534f43 	svccs	0x00534f43
    5988:	4f636950 	svcmi	0x00636950
    598c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    5990:	2f736269 	svccs	0x00736269
    5994:	74654e56 	strbtvc	r4, [r5], #-3670	; 0xfffff1aa
    5998:	70000049 	andvc	r0, r0, r9, asr #32
    599c:	5f67756c 	svcpl	0x0067756c
    59a0:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
    59a4:	0063632e 	rsbeq	r6, r3, lr, lsr #6
    59a8:	73000000 	movwvc	r0, #0
    59ac:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    59b0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    59b4:	73000001 	movwvc	r0, #1
    59b8:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    59bc:	00682e67 	rsbeq	r2, r8, r7, ror #28
    59c0:	61000001 	tstvs	r0, r1
    59c4:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    59c8:	00020068 	andeq	r0, r2, r8, rrx
    59cc:	63616d00 	cmnvs	r1, #0, 26
    59d0:	00682e68 	rsbeq	r2, r8, r8, ror #28
    59d4:	70000002 	andvc	r0, r0, r2
    59d8:	5f736e69 	svcpl	0x00736e69
    59dc:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    59e0:	00020068 	andeq	r0, r2, r8, rrx
    59e4:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    59e8:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    59ec:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    59f0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    59f4:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    59f8:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    59fc:	00030068 	andeq	r0, r3, r8, rrx
    5a00:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    5a04:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    5a08:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5a0c:	3c000004 	stccc	0, cr0, [r0], {4}
    5a10:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5a14:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    5a18:	0000003e 	andeq	r0, r0, lr, lsr r0
    5a1c:	2b050000 	blcs	145a24 <__ccfg+0x125a7c>
    5a20:	d8020500 	stmdale	r2, {r8, sl}
    5a24:	03000027 	movweq	r0, #39	; 0x27
    5a28:	02050136 	andeq	r0, r5, #-2147483635	; 0x8000000d
    5a2c:	062b0516 			; <UNDEFINED> instruction: 0x062b0516
    5a30:	2410050e 	ldrcs	r0, [r0], #-1294	; 0xfffffaf2
    5a34:	051c2b05 	ldreq	r2, [ip, #-2821]	; 0xfffff4fb
    5a38:	05052410 	streq	r2, [r5, #-1040]	; 0xfffffbf0
    5a3c:	2015053c 	andscs	r0, r5, ip, lsr r5
    5a40:	3f060205 	svccc	0x00060205
    5a44:	01061205 	tsteq	r6, r5, lsl #4
    5a48:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    5a4c:	01060905 	tsteq	r6, r5, lsl #18
    5a50:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    5a54:	01010004 	tsteq	r1, r4
    5a58:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
    5a5c:	0027fc02 	eoreq	pc, r7, r2, lsl #24
    5a60:	00c20300 	sbceq	r0, r2, r0, lsl #6
    5a64:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    5a68:	01061005 	tsteq	r6, r5
    5a6c:	051e1f05 	ldreq	r1, [lr, #-3845]	; 0xfffff0fb
    5a70:	05052210 	streq	r2, [r5, #-528]	; 0xfffffdf0
    5a74:	210a0520 	tstcs	sl, r0, lsr #10
    5a78:	052d2a05 	streq	r2, [sp, #-2565]!	; 0xfffff5fb
    5a7c:	15052e1e 	strne	r2, [r5, #-3614]	; 0xfffff1e2
    5a80:	06020520 	streq	r0, [r2], -r0, lsr #10
    5a84:	061e0531 			; <UNDEFINED> instruction: 0x061e0531
    5a88:	22090501 	andcs	r0, r9, #4194304	; 0x400000
    5a8c:	051e1e05 	ldreq	r1, [lr, #-3589]	; 0xfffff1fb
    5a90:	0205200f 	andeq	r2, r5, #15
    5a94:	01052206 	tsteq	r5, r6, lsl #4
    5a98:	03021306 	movweq	r1, #8966	; 0x2306
    5a9c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5aa0:	02050037 	andeq	r0, r5, #55	; 0x37
    5aa4:	00002820 	andeq	r2, r0, r0, lsr #16
    5aa8:	0100cc03 	tsteq	r0, r3, lsl #24
    5aac:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    5ab0:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    5ab4:	01052e16 	tsteq	r5, r6, lsl lr
    5ab8:	00010221 	andeq	r0, r1, r1, lsr #4
    5abc:	25050101 	strcs	r0, [r5, #-257]	; 0xfffffeff
    5ac0:	28020500 	stmdacs	r2, {r8, sl}
    5ac4:	03000028 	movweq	r0, #40	; 0x28
    5ac8:	050100d1 	streq	r0, [r1, #-209]	; 0xffffff2f
    5acc:	01051402 	tsteq	r5, r2, lsl #8
    5ad0:	02021406 	andeq	r1, r2, #100663296	; 0x6000000
    5ad4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5ad8:	02050025 	andeq	r0, r5, #37	; 0x25
    5adc:	0000282c 	andeq	r2, r0, ip, lsr #16
    5ae0:	0100d703 	tsteq	r0, r3, lsl #14
    5ae4:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    5ae8:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    5aec:	01010002 	tsteq	r1, r2
    5af0:	05003905 	streq	r3, [r0, #-2309]	; 0xfffff6fb
    5af4:	00283002 	eoreq	r3, r8, r2
    5af8:	01200300 			; <UNDEFINED> instruction: 0x01200300
    5afc:	26061005 	strcs	r1, [r6], -r5
    5b00:	7a033905 	bvc	d3f1c <__ccfg+0xb3f74>
    5b04:	06020520 	streq	r0, [r2], -r0, lsr #10
    5b08:	05051424 	streq	r1, [r5, #-1060]	; 0xfffffbdc
    5b0c:	39050106 	stmdbcc	r5, {r1, r2, r8}
    5b10:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    5b14:	03052605 	movweq	r2, #22021	; 0x5605
    5b18:	20052106 	andcs	r2, r5, r6, lsl #2
    5b1c:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    5b20:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
    5b24:	06060521 	streq	r0, [r6], -r1, lsr #10
    5b28:	060f0501 	streq	r0, [pc], -r1, lsl #10
    5b2c:	13040522 	movwne	r0, #17698	; 0x4522
    5b30:	01061205 	tsteq	r6, r5, lsl #4
    5b34:	49061605 	stmdbmi	r6, {r0, r2, r9, sl, ip}
    5b38:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    5b3c:	12051304 	andne	r1, r5, #4, 6	; 0x10000000
    5b40:	16050106 	strne	r0, [r5], -r6, lsl #2
    5b44:	0f051f06 	svceq	0x00051f06
    5b48:	17020501 	strne	r0, [r2, -r1, lsl #10]
    5b4c:	01061005 	tsteq	r6, r5
    5b50:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    5b54:	053f0602 	ldreq	r0, [pc, #-1538]!	; 555a <__exidx_end+0x806>
    5b58:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    5b5c:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    5b60:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    5b64:	01051d0a 	tsteq	r5, sl, lsl #26
    5b68:	06040532 			; <UNDEFINED> instruction: 0x06040532
    5b6c:	02207503 	eoreq	r7, r0, #12582912	; 0xc00000
    5b70:	01010009 	tsteq	r1, r9
    5b74:	000001a1 	andeq	r0, r0, r1, lsr #3
    5b78:	01260003 			; <UNDEFINED> instruction: 0x01260003
    5b7c:	01020000 	mrseq	r0, (UNDEF: 2)
    5b80:	000d0efb 	strdeq	r0, [sp], -fp
    5b84:	01010101 	tsteq	r1, r1, lsl #2
    5b88:	01000000 	mrseq	r0, (UNDEF: 0)
    5b8c:	2f010000 	svccs	0x00010000
    5b90:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5b94:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    5b98:	2f6e6974 	svccs	0x006e6974
    5b9c:	6b736544 	blvs	1cdf0b4 <__ccfg+0x1cbf10c>
    5ba0:	2f706f74 	svccs	0x00706f74
    5ba4:	4f534c4f 	svcmi	0x00534c4f
    5ba8:	2f54454e 	svccs	0x0054454e
    5bac:	4f434950 	svcmi	0x00434950
    5bb0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5bb4:	2f534f63 	svccs	0x00534f63
    5bb8:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    5bbc:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    5bc0:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    5bc4:	73752f00 	cmnvc	r5, #0, 30
    5bc8:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    5bcc:	63672f62 	cmnvs	r7, #392	; 0x188
    5bd0:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    5bd4:	6f6e2d6d 	svcvs	0x006e2d6d
    5bd8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5bdc:	2f696261 	svccs	0x00696261
    5be0:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    5be4:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    5be8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5bec:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    5bf0:	2f656d6f 	svccs	0x00656d6f
    5bf4:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    5bf8:	442f6e69 	strtmi	r6, [pc], #-3689	; 5c00 <__exidx_end+0xeac>
    5bfc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5c00:	4f2f706f 	svcmi	0x002f706f
    5c04:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5c08:	502f5445 	eorpl	r5, pc, r5, asr #8
    5c0c:	534f4349 	movtpl	r4, #62281	; 0xf349
    5c10:	6369502f 	cmnvs	r9, #47	; 0x2f
    5c14:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    5c18:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    5c1c:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    5c20:	2f656d6f 	svccs	0x00656d6f
    5c24:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    5c28:	442f6e69 	strtmi	r6, [pc], #-3689	; 5c30 <__exidx_end+0xedc>
    5c2c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5c30:	4f2f706f 	svcmi	0x002f706f
    5c34:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5c38:	502f5445 	eorpl	r5, pc, r5, asr #8
    5c3c:	534f4349 	movtpl	r4, #62281	; 0xf349
    5c40:	6369502f 	cmnvs	r9, #47	; 0x2f
    5c44:	0000534f 	andeq	r5, r0, pc, asr #6
    5c48:	756f5f5f 	strbvc	r5, [pc, #-3935]!	; 4cf1 <patchImageGenfsk+0x26d>
    5c4c:	72657374 	rsbvc	r7, r5, #116, 6	; 0xd0000001
    5c50:	2e6c6169 	powcsez	f6, f4, #1.0
    5c54:	00010063 	andeq	r0, r1, r3, rrx
    5c58:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5c5c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5c60:	00020068 	andeq	r0, r2, r8, rrx
    5c64:	63726100 	cmnvs	r2, #0, 2
    5c68:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5c6c:	6d000003 	stcvs	0, cr0, [r0, #-12]
    5c70:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    5c74:	00030068 	andeq	r0, r3, r8, rrx
    5c78:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    5c7c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5c80:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5c84:	62000003 	andvs	r0, r0, #3
    5c88:	6f747475 	svcvs	0x00747475
    5c8c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    5c90:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    5c94:	00000300 	andeq	r0, r0, r0, lsl #6
    5c98:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    5c9c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    5ca0:	00000004 	andeq	r0, r0, r4
    5ca4:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    5ca8:	00287802 	eoreq	r7, r8, r2, lsl #16
    5cac:	011c0300 	tsteq	ip, r0, lsl #6
    5cb0:	06200601 	strteq	r0, [r0], -r1, lsl #12
    5cb4:	3c26033c 	stccc	3, cr0, [r6], #-240	; 0xffffff10
    5cb8:	03020501 	movweq	r0, #9473	; 0x2501
    5cbc:	1313585f 	tstne	r3, #6225920	; 0x5f0000
    5cc0:	13010115 	movwne	r0, #4373	; 0x1115
    5cc4:	01060605 	tsteq	r6, r5, lsl #12
    5cc8:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    5ccc:	01060505 	tsteq	r6, r5, lsl #10
    5cd0:	2f060305 	svccs	0x00060305
    5cd4:	01060905 	tsteq	r6, r5, lsl #18
    5cd8:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
    5cdc:	0205280a 	andeq	r2, r5, #655360	; 0xa0000
    5ce0:	0a052e06 	beq	151500 <__ccfg+0x131558>
    5ce4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5ce8:	06058306 	streq	r8, [r5], -r6, lsl #6
    5cec:	1f210106 	svcne	0x00210106
    5cf0:	02051f21 	andeq	r1, r5, #33, 30	; 0x84
    5cf4:	06052106 	streq	r2, [r5], -r6, lsl #2
    5cf8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5cfc:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    5d00:	03050106 	movweq	r0, #20742	; 0x5106
    5d04:	033d3006 	teqeq	sp, #6
    5d08:	0d054a74 	vstreq	s8, [r5, #-464]	; 0xfffffe30
    5d0c:	11050106 	tstne	r5, r6, lsl #2
    5d10:	20070520 	andcs	r0, r7, r0, lsr #10
    5d14:	01000802 	tsteq	r0, r2, lsl #16
    5d18:	00024b01 	andeq	r4, r2, r1, lsl #22
    5d1c:	25000300 	strcs	r0, [r0, #-768]	; 0xfffffd00
    5d20:	02000001 	andeq	r0, r0, #1
    5d24:	0d0efb01 	vstreq	d15, [lr, #-4]
    5d28:	01010100 	mrseq	r0, (UNDEF: 17)
    5d2c:	00000001 	andeq	r0, r0, r1
    5d30:	01000001 	tsteq	r0, r1
    5d34:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5c80 <__exidx_end+0xf2c>
    5d38:	616d2f65 	cmnvs	sp, r5, ror #30
    5d3c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    5d40:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5d44:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5d48:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5d4c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5d50:	4349502f 	movtmi	r5, #36911	; 0x902f
    5d54:	502f534f 	eorpl	r5, pc, pc, asr #6
    5d58:	534f6369 	movtpl	r6, #62313	; 0xf369
    5d5c:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    5d60:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    5d64:	61697265 	cmnvs	r9, r5, ror #4
    5d68:	752f006c 	strvc	r0, [pc, #-108]!	; 5d04 <__exidx_end+0xfb0>
    5d6c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 5ba8 <__exidx_end+0xe54>
    5d70:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    5d74:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    5d78:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5d7c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5d80:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5d84:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    5d88:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    5d8c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5d90:	2f006564 	svccs	0x00006564
    5d94:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5d98:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    5d9c:	2f6e6974 	svccs	0x006e6974
    5da0:	6b736544 	blvs	1cdf2b8 <__ccfg+0x1cbf310>
    5da4:	2f706f74 	svccs	0x00706f74
    5da8:	4f534c4f 	svcmi	0x00534c4f
    5dac:	2f54454e 	svccs	0x0054454e
    5db0:	4f434950 	svcmi	0x00434950
    5db4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5db8:	2f534f63 	svccs	0x00534f63
    5dbc:	33314343 	teqcc	r1, #201326593	; 0xc000001
    5dc0:	2f005858 	svccs	0x00005858
    5dc4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5dc8:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    5dcc:	2f6e6974 	svccs	0x006e6974
    5dd0:	6b736544 	blvs	1cdf2e8 <__ccfg+0x1cbf340>
    5dd4:	2f706f74 	svccs	0x00706f74
    5dd8:	4f534c4f 	svcmi	0x00534c4f
    5ddc:	2f54454e 	svccs	0x0054454e
    5de0:	4f434950 	svcmi	0x00434950
    5de4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5de8:	00534f63 	subseq	r4, r3, r3, ror #30
    5dec:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    5df0:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
    5df4:	2e6c6169 	powcsez	f6, f4, #1.0
    5df8:	00010063 	andeq	r0, r1, r3, rrx
    5dfc:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5e00:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5e04:	00020068 	andeq	r0, r2, r8, rrx
    5e08:	63726100 	cmnvs	r2, #0, 2
    5e0c:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5e10:	6d000003 	stcvs	0, cr0, [r0, #-12]
    5e14:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    5e18:	00030068 	andeq	r0, r3, r8, rrx
    5e1c:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    5e20:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5e24:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5e28:	62000003 	andvs	r0, r0, #3
    5e2c:	6f747475 	svcvs	0x00747475
    5e30:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    5e34:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    5e38:	00000300 	andeq	r0, r0, r0, lsl #6
    5e3c:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    5e40:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    5e44:	00000004 	andeq	r0, r0, r4
    5e48:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    5e4c:	0028e802 	eoreq	lr, r8, r2, lsl #16
    5e50:	01220300 			; <UNDEFINED> instruction: 0x01220300
    5e54:	06200601 	strteq	r0, [r0], -r1, lsl #12
    5e58:	6b02053c 	blvs	87350 <__ccfg+0x673a8>
    5e5c:	05161313 	ldreq	r1, [r6, #-787]	; 0xfffffced
    5e60:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    5e64:	03052005 	movweq	r2, #20485	; 0x5005
    5e68:	02053006 	andeq	r3, r5, #6
    5e6c:	061d053f 			; <UNDEFINED> instruction: 0x061d053f
    5e70:	3c0b0501 	cfstr32cc	mvfx0, [fp], {1}
    5e74:	05201d05 	streq	r1, [r0, #-3333]!	; 0xfffff2fb
    5e78:	0505200b 	streq	r2, [r5, #-11]
    5e7c:	06030520 	streq	r0, [r3], -r0, lsr #10
    5e80:	02052f24 	andeq	r2, r5, #36, 30	; 0x90
    5e84:	06060530 			; <UNDEFINED> instruction: 0x06060530
    5e88:	1f020513 	svcne	0x00020513
    5e8c:	06052f06 	streq	r2, [r5], -r6, lsl #30
    5e90:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5e94:	01013006 	tsteq	r1, r6
    5e98:	05058316 	streq	r8, [r5, #-790]	; 0xfffffcea
    5e9c:	03050106 	movweq	r0, #20742	; 0x5106
    5ea0:	06053d06 	streq	r3, [r5], -r6, lsl #26
    5ea4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5ea8:	07052f06 	streq	r2, [r5, -r6, lsl #30]
    5eac:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5eb0:	1f070521 	svcne	0x00070521
    5eb4:	21060405 	tstcs	r6, r5, lsl #8
    5eb8:	05310305 	ldreq	r0, [r1, #-773]!	; 0xfffffcfb
    5ebc:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    5ec0:	04052006 	streq	r2, [r5], #-6
    5ec4:	02053e06 	andeq	r3, r5, #6, 28	; 0x60
    5ec8:	0606053e 			; <UNDEFINED> instruction: 0x0606053e
    5ecc:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    5ed0:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
    5ed4:	052f0603 	streq	r0, [pc, #-1539]!	; 58d9 <__exidx_end+0xb85>
    5ed8:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    5edc:	052f0603 	streq	r0, [pc, #-1539]!	; 58e1 <__exidx_end+0xb8d>
    5ee0:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    5ee4:	052f0603 	streq	r0, [pc, #-1539]!	; 58e9 <__exidx_end+0xb95>
    5ee8:	06053102 	streq	r3, [r5], -r2, lsl #2
    5eec:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5ef0:	0603052e 	streq	r0, [r3], -lr, lsr #10
    5ef4:	06060521 	streq	r0, [r6], -r1, lsr #10
    5ef8:	051f2101 	ldreq	r2, [pc, #-257]	; 5dff <__exidx_end+0x10ab>
    5efc:	052f0603 	streq	r0, [pc, #-1539]!	; 5901 <__exidx_end+0xbad>
    5f00:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5f04:	40230602 	eormi	r0, r3, r2, lsl #12
    5f08:	06060591 			; <UNDEFINED> instruction: 0x06060591
    5f0c:	06020501 	streq	r0, [r2], -r1, lsl #10
    5f10:	060c053d 			; <UNDEFINED> instruction: 0x060c053d
    5f14:	3c110501 	cfldr32cc	mvfx0, [r1], {1}
    5f18:	05210705 	streq	r0, [r1, #-1797]!	; 0xfffff8fb
    5f1c:	054b0602 	strbeq	r0, [fp, #-1538]	; 0xfffff9fe
    5f20:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5f24:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    5f28:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5f2c:	0a059f06 	beq	16db4c <__ccfg+0x14dba4>
    5f30:	0602051f 			; <UNDEFINED> instruction: 0x0602051f
    5f34:	06060521 	streq	r0, [r6], -r1, lsr #10
    5f38:	06020501 	streq	r0, [r2], -r1, lsl #10
    5f3c:	0605052f 	streq	r0, [r5], -pc, lsr #10
    5f40:	06030501 	streq	r0, [r3], -r1, lsl #10
    5f44:	060d0521 	streq	r0, [sp], -r1, lsr #10
    5f48:	06030501 	streq	r0, [r3], -r1, lsl #10
    5f4c:	3002052f 	andcc	r0, r2, pc, lsr #10
    5f50:	01060605 	tsteq	r6, r5, lsl #12
    5f54:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    5f58:	22060105 	andcs	r0, r6, #1073741825	; 0x40000001
    5f5c:	053a0205 	ldreq	r0, [sl, #-517]!	; 0xfffffdfb
    5f60:	02300601 	eorseq	r0, r0, #1048576	; 0x100000
    5f64:	0101000d 	tsteq	r1, sp
    5f68:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    5f6c:	013a0003 	teqeq	sl, r3
    5f70:	01020000 	mrseq	r0, (UNDEF: 2)
    5f74:	000d0efb 	strdeq	r0, [sp], -fp
    5f78:	01010101 	tsteq	r1, r1, lsl #2
    5f7c:	01000000 	mrseq	r0, (UNDEF: 0)
    5f80:	2f010000 	svccs	0x00010000
    5f84:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5f88:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    5f8c:	2f6e6974 	svccs	0x006e6974
    5f90:	6b736544 	blvs	1cdf4a8 <__ccfg+0x1cbf500>
    5f94:	2f706f74 	svccs	0x00706f74
    5f98:	4f534c4f 	svcmi	0x00534c4f
    5f9c:	2f54454e 	svccs	0x0054454e
    5fa0:	4f434950 	svcmi	0x00434950
    5fa4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5fa8:	2f534f63 	svccs	0x00534f63
    5fac:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    5fb0:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    5fb4:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    5fb8:	73752f00 	cmnvc	r5, #0, 30
    5fbc:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    5fc0:	63672f62 	cmnvs	r7, #392	; 0x188
    5fc4:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    5fc8:	6f6e2d6d 	svcvs	0x006e2d6d
    5fcc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5fd0:	2f696261 	svccs	0x00696261
    5fd4:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    5fd8:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    5fdc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5fe0:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    5fe4:	2f656d6f 	svccs	0x00656d6f
    5fe8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    5fec:	442f6e69 	strtmi	r6, [pc], #-3689	; 5ff4 <__exidx_end+0x12a0>
    5ff0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5ff4:	4f2f706f 	svcmi	0x002f706f
    5ff8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5ffc:	502f5445 	eorpl	r5, pc, r5, asr #8
    6000:	534f4349 	movtpl	r4, #62281	; 0xf349
    6004:	6369502f 	cmnvs	r9, #47	; 0x2f
    6008:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    600c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    6010:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    6014:	2f656d6f 	svccs	0x00656d6f
    6018:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    601c:	442f6e69 	strtmi	r6, [pc], #-3689	; 6024 <__exidx_end+0x12d0>
    6020:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6024:	4f2f706f 	svcmi	0x002f706f
    6028:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    602c:	502f5445 	eorpl	r5, pc, r5, asr #8
    6030:	534f4349 	movtpl	r4, #62281	; 0xf349
    6034:	6369502f 	cmnvs	r9, #47	; 0x2f
    6038:	0000534f 	andeq	r5, r0, pc, asr #6
    603c:	726f6676 	rsbvc	r6, pc, #123731968	; 0x7600000
    6040:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    6044:	73000001 	movwvc	r0, #1
    6048:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    604c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    6050:	73000002 	movwvc	r0, #2
    6054:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    6058:	00682e67 	rsbeq	r2, r8, r7, ror #28
    605c:	61000002 	tstvs	r0, r2
    6060:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    6064:	00030068 	andeq	r0, r3, r8, rrx
    6068:	63616d00 	cmnvs	r1, #0, 26
    606c:	00682e68 	rsbeq	r2, r8, r8, ror #28
    6070:	70000003 	andvc	r0, r0, r3
    6074:	5f736e69 	svcpl	0x00736e69
    6078:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    607c:	00030068 	andeq	r0, r3, r8, rrx
    6080:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    6084:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    6088:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    608c:	0300682e 	movweq	r6, #2094	; 0x82e
    6090:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    6094:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    6098:	00040068 	andeq	r0, r4, r8, rrx
    609c:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    60a0:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    60a4:	003e6e69 	eorseq	r6, lr, r9, ror #28
    60a8:	00000000 	andeq	r0, r0, r0
    60ac:	05001505 	streq	r1, [r0, #-1285]	; 0xfffffafb
    60b0:	002a0402 	eoreq	r0, sl, r2, lsl #8
    60b4:	010c0300 	mrseq	r0, LR_mon
    60b8:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    60bc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    60c0:	0405580b 	streq	r5, [r5], #-2059	; 0xfffff7f5
    60c4:	0e053e06 	cdpeq	14, 0, cr3, cr5, cr6, {0}
    60c8:	03050106 	movweq	r0, #20742	; 0x5106
    60cc:	04053006 	streq	r3, [r5], #-6
    60d0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    60d4:	00010259 	andeq	r0, r1, r9, asr r2
    60d8:	43050101 	movwmi	r0, #20737	; 0x5101
    60dc:	24020500 	strcs	r0, [r2], #-1280	; 0xfffffb00
    60e0:	1900002a 	stmdbne	r0, {r1, r3, r5}
    60e4:	06052e06 	streq	r2, [r5], -r6, lsl #28
    60e8:	03040520 	movweq	r0, #17696	; 0x4520
    60ec:	05052e1d 	streq	r2, [r5, #-3613]	; 0xfffff1e3
    60f0:	05202803 	streq	r2, [r0, #-2051]!	; 0xfffff7fd
    60f4:	20710307 	rsbscs	r0, r1, r7, lsl #6
    60f8:	4a030605 	bmi	c7914 <__ccfg+0xa796c>
    60fc:	06020520 	streq	r0, [r2], -r0, lsr #10
    6100:	0514133e 	ldreq	r1, [r4, #-830]	; 0xfffffcc2
    6104:	02051803 	andeq	r1, r5, #196608	; 0x30000
    6108:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
    610c:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    6110:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    6114:	05051403 	streq	r1, [r5, #-1027]	; 0xfffffbfd
    6118:	03050106 	movweq	r0, #20742	; 0x5106
    611c:	06053006 	streq	r3, [r5], -r6
    6120:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    6124:	0b053e06 	bleq	155944 <__ccfg+0x13599c>
    6128:	10050106 	andne	r0, r5, r6, lsl #2
    612c:	2105052e 	tstcs	r5, lr, lsr #10
    6130:	052d0705 	streq	r0, [sp, #-1797]!	; 0xfffff8fb
    6134:	3d3d0605 	ldccc	6, cr0, [sp, #-20]!	; 0xffffffec
    6138:	da030405 	ble	c7154 <__ccfg+0xa71ac>
    613c:	05590100 	ldrbeq	r0, [r9, #-256]	; 0xffffff00
    6140:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    6144:	a7030604 	strge	r0, [r3, -r4, lsl #12]
    6148:	05054a7f 	streq	r4, [r5, #-2687]	; 0xfffff581
    614c:	00c20306 	sbceq	r0, r2, r6, lsl #6
    6150:	052f0620 	streq	r0, [pc, #-1568]!	; 5b38 <__exidx_end+0xde4>
    6154:	05100612 	ldreq	r0, [r0, #-1554]	; 0xfffff9ee
    6158:	43030603 	movwmi	r0, #13827	; 0x3603
    615c:	0606052e 	streq	r0, [r6], -lr, lsr #10
    6160:	06040501 	streq	r0, [r4], -r1, lsl #10
    6164:	0606054c 	streq	r0, [r6], -ip, asr #10
    6168:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
    616c:	21060405 	tstcs	r6, r5, lsl #8
    6170:	c9030505 	stmdbgt	r3, {r0, r2, r8, sl}
    6174:	5959e400 	ldmdbpl	r9, {sl, sp, lr, pc}^
    6178:	01060805 	tsteq	r6, r5, lsl #16
    617c:	03060505 	movweq	r0, #25861	; 0x6505
    6180:	0c053c09 	stceq	12, cr3, [r5], {9}
    6184:	01050106 	tsteq	r5, r6, lsl #2
    6188:	03040531 	movweq	r0, #17713	; 0x4531
    618c:	053c7fa9 	ldreq	r7, [ip, #-4009]!	; 0xfffff057
    6190:	05680605 	strbeq	r0, [r8, #-1541]!	; 0xfffff9fb
    6194:	0505010f 	streq	r0, [r5, #-271]	; 0xfffffef1
    6198:	060c0513 			; <UNDEFINED> instruction: 0x060c0513
    619c:	2d120513 	cfldr32cs	mvfx0, [r2, #-76]	; 0xffffffb4
    61a0:	2f060505 	svccs	0x00060505
    61a4:	14060e05 	strne	r0, [r6], #-3589	; 0xfffff1fb
    61a8:	2d060605 	stccs	6, cr0, [r6, #-20]	; 0xffffffec
    61ac:	13060e05 	movwne	r0, #28165	; 0x6e05
    61b0:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
    61b4:	5a062d06 	bpl	1915d4 <__ccfg+0x17162c>
    61b8:	01060905 	tsteq	r6, r5, lsl #18
    61bc:	39061405 	stmdbcc	r6, {r0, r2, sl, ip}
    61c0:	01061605 	tsteq	r6, r5, lsl #12
    61c4:	2e061205 	cdpcs	2, 0, cr1, cr6, cr5, {0}
    61c8:	13060605 	movwne	r0, #26117	; 0x6605
    61cc:	03060505 	movweq	r0, #25861	; 0x6505
    61d0:	05132009 	ldreq	r2, [r3, #-9]
    61d4:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    61d8:	09052f08 	stmdbeq	r5, {r3, r8, r9, sl, fp, sp}
    61dc:	0605052d 	streq	r0, [r5], -sp, lsr #10
    61e0:	0608052f 	streq	r0, [r8], -pc, lsr #10
    61e4:	20120501 	andscs	r0, r2, r1, lsl #10
    61e8:	30060605 	andcc	r0, r6, r5, lsl #12
    61ec:	060a0559 			; <UNDEFINED> instruction: 0x060a0559
    61f0:	06050501 	streq	r0, [r5], -r1, lsl #10
    61f4:	060c054c 	streq	r0, [ip], -ip, asr #10
    61f8:	05016f03 	streq	r6, [r1, #-3843]	; 0xfffff0fd
    61fc:	20110305 	andscs	r0, r1, r5, lsl #6
    6200:	2e012e06 	cdpcs	14, 0, cr2, cr1, cr6, {0}
    6204:	4a063c06 	bmi	195224 <__ccfg+0x17527c>
    6208:	20827401 	addcs	r7, r2, r1, lsl #8
    620c:	2e204a20 	vmulcs.f32	s8, s0, s1
    6210:	06070525 	streq	r0, [r7], -r5, lsr #10
    6214:	06050501 	streq	r0, [r5], -r1, lsl #10
    6218:	06080521 	streq	r0, [r8], -r1, lsr #10
    621c:	2e120501 	cfmul32cs	mvfx0, mvfx2, mvfx1
    6220:	30060605 	andcc	r0, r6, r5, lsl #12
    6224:	06090513 			; <UNDEFINED> instruction: 0x06090513
    6228:	1f0a0514 	svcne	0x000a0514
    622c:	052d0805 	streq	r0, [sp, #-2053]!	; 0xfffff7fb
    6230:	132f0606 			; <UNDEFINED> instruction: 0x132f0606
    6234:	01060905 	tsteq	r6, r5, lsl #18
    6238:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
    623c:	593f0607 	ldmdbpl	pc!, {r0, r1, r2, r9, sl}	; <UNPREDICTABLE>
    6240:	01060b05 	tsteq	r6, r5, lsl #22
    6244:	30060605 	andcc	r0, r6, r5, lsl #12
    6248:	03060505 	movweq	r0, #25861	; 0x6505
    624c:	0605016f 	streq	r0, [r5], -pc, ror #2
    6250:	06201103 	strteq	r1, [r0], -r3, lsl #2
    6254:	062e012e 	strteq	r0, [lr], -lr, lsr #2
    6258:	014a063c 	cmpeq	sl, ip, lsr r6
    625c:	2e016666 	cfmadd32cs	mvax3, mvfx6, mvfx1, mvfx6
    6260:	052e2058 	streq	r2, [lr, #-88]!	; 0xffffffa8
    6264:	0f05210c 	svceq	0x0005210c
    6268:	06050106 	streq	r0, [r5], -r6, lsl #2
    626c:	13132f06 	tstne	r3, #6, 30
    6270:	14060d05 	strne	r0, [r6], #-3333	; 0xfffff2fb
    6274:	052d0a05 	streq	r0, [sp, #-2565]!	; 0xfffff5fb
    6278:	06052d08 	streq	r2, [r5], -r8, lsl #26
    627c:	07052106 	streq	r2, [r5, -r6, lsl #2]
    6280:	060f0514 			; <UNDEFINED> instruction: 0x060f0514
    6284:	2e150513 	mrccs	5, 0, r0, cr5, cr3, {0}
    6288:	062d0705 	strteq	r0, [sp], -r5, lsl #14
    628c:	060a055a 			; <UNDEFINED> instruction: 0x060a055a
    6290:	06150501 	ldreq	r0, [r5], -r1, lsl #10
    6294:	06170547 	ldreq	r0, [r7], -r7, asr #10
    6298:	06130501 	ldreq	r0, [r3], -r1, lsl #10
    629c:	0607052e 	streq	r0, [r7], -lr, lsr #10
    62a0:	06060513 			; <UNDEFINED> instruction: 0x06060513
    62a4:	05055926 	streq	r5, [r5, #-2342]	; 0xfffff6da
    62a8:	0513134f 	ldreq	r1, [r3, #-847]	; 0xfffffcb1
    62ac:	05110609 	ldreq	r0, [r1, #-1545]	; 0xfffff9f7
    62b0:	4f062f05 	svcmi	0x00062f05
    62b4:	0b051313 	bleq	14af08 <__ccfg+0x12af60>
    62b8:	060c054a 	streq	r0, [ip], -sl, asr #10
    62bc:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
    62c0:	3d060605 	stccc	6, cr0, [r6, #-20]	; 0xffffffec
    62c4:	060a054b 	streq	r0, [sl], -fp, asr #10
    62c8:	207fad03 	rsbscs	sl, pc, r3, lsl #26
    62cc:	01000702 	tsteq	r0, r2, lsl #14
    62d0:	00350501 	eorseq	r0, r5, r1, lsl #10
    62d4:	2c540205 	lfmcs	f0, 2, [r4], {5}
    62d8:	90030000 	andls	r0, r3, r0
    62dc:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    62e0:	35051414 	strcc	r1, [r5, #-1044]	; 0xfffffbec
    62e4:	052e0e06 	streq	r0, [lr, #-3590]!	; 0xfffff1fa
    62e8:	03053205 	movweq	r3, #20997	; 0x5205
    62ec:	05673006 	strbeq	r3, [r7, #-6]!
    62f0:	12030601 	andne	r0, r3, #1048576	; 0x100000
    62f4:	06020501 	streq	r0, [r2], -r1, lsl #10
    62f8:	053c7203 	ldreq	r7, [ip, #-515]!	; 0xfffffdfd
    62fc:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    6300:	02053c06 	andeq	r3, r5, #1536	; 0x600
    6304:	15053f06 	strne	r3, [r5, #-3846]	; 0xfffff0fa
    6308:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    630c:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    6310:	060b0540 	streq	r0, [fp], -r0, asr #10
    6314:	58050501 	stmdapl	r5, {r0, r8, sl}
    6318:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
    631c:	03052005 	movweq	r2, #20485	; 0x5005
    6320:	133d2206 	teqne	sp, #1610612736	; 0x60000000
    6324:	01000202 	tsteq	r0, r2, lsl #4
    6328:	0002c601 	andeq	ip, r2, r1, lsl #12
    632c:	3a000300 	bcc	6f34 <__exidx_end+0x21e0>
    6330:	02000001 	andeq	r0, r0, #1
    6334:	0d0efb01 	vstreq	d15, [lr, #-4]
    6338:	01010100 	mrseq	r0, (UNDEF: 17)
    633c:	00000001 	andeq	r0, r0, r1
    6340:	01000001 	tsteq	r0, r1
    6344:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 6290 <__exidx_end+0x153c>
    6348:	616d2f65 	cmnvs	sp, r5, ror #30
    634c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    6350:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    6354:	706f746b 	rsbvc	r7, pc, fp, ror #8
    6358:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    635c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    6360:	4349502f 	movtmi	r5, #36911	; 0x902f
    6364:	502f534f 	eorpl	r5, pc, pc, asr #6
    6368:	534f6369 	movtpl	r6, #62313	; 0xf369
    636c:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    6370:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    6374:	61697265 	cmnvs	r9, r5, ror #4
    6378:	752f006c 	strvc	r0, [pc, #-108]!	; 6314 <__exidx_end+0x15c0>
    637c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 61b8 <__exidx_end+0x1464>
    6380:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    6384:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    6388:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    638c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6390:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6394:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    6398:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    639c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    63a0:	2f006564 	svccs	0x00006564
    63a4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    63a8:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    63ac:	2f6e6974 	svccs	0x006e6974
    63b0:	6b736544 	blvs	1cdf8c8 <__ccfg+0x1cbf920>
    63b4:	2f706f74 	svccs	0x00706f74
    63b8:	4f534c4f 	svcmi	0x00534c4f
    63bc:	2f54454e 	svccs	0x0054454e
    63c0:	4f434950 	svcmi	0x00434950
    63c4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    63c8:	2f534f63 	svccs	0x00534f63
    63cc:	33314343 	teqcc	r1, #201326593	; 0xc000001
    63d0:	2f005858 	svccs	0x00005858
    63d4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    63d8:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    63dc:	2f6e6974 	svccs	0x006e6974
    63e0:	6b736544 	blvs	1cdf8f8 <__ccfg+0x1cbf950>
    63e4:	2f706f74 	svccs	0x00706f74
    63e8:	4f534c4f 	svcmi	0x00534c4f
    63ec:	2f54454e 	svccs	0x0054454e
    63f0:	4f434950 	svcmi	0x00434950
    63f4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    63f8:	00534f63 	subseq	r4, r3, r3, ror #30
    63fc:	63737600 	cmnvs	r3, #0, 12
    6400:	632e6e61 			; <UNDEFINED> instruction: 0x632e6e61
    6404:	00000100 	andeq	r0, r0, r0, lsl #2
    6408:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    640c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6410:	00000200 	andeq	r0, r0, r0, lsl #4
    6414:	61647473 	smcvs	18243	; 0x4743
    6418:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    641c:	00000200 	andeq	r0, r0, r0, lsl #4
    6420:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    6424:	0300682e 	movweq	r6, #2094	; 0x82e
    6428:	616d0000 	cmnvs	sp, r0
    642c:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    6430:	00000300 	andeq	r0, r0, r0, lsl #6
    6434:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    6438:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    643c:	0300682e 	movweq	r6, #2094	; 0x82e
    6440:	75620000 	strbvc	r0, [r2, #-0]!
    6444:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    6448:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    644c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6450:	73000003 	movwvc	r0, #3
    6454:	6f697379 	svcvs	0x00697379
    6458:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    645c:	623c0000 	eorsvs	r0, ip, #0
    6460:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    6464:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    6468:	00000000 	andeq	r0, r0, r0
    646c:	003a0500 	eorseq	r0, sl, r0, lsl #10
    6470:	2ca40205 	sfmcs	f0, 4, [r4], #20
    6474:	05190000 	ldreq	r0, [r9, #-0]
    6478:	3a031402 	bcc	cb488 <__ccfg+0xab4e0>
    647c:	06050501 	streq	r0, [r5], -r1, lsl #10
    6480:	033a0501 	teqeq	sl, #4194304	; 0x400000
    6484:	05052044 	streq	r2, [r5, #-68]	; 0xffffffbc
    6488:	052e3c03 	streq	r3, [lr, #-3075]!	; 0xfffff3fd
    648c:	05053c12 	streq	r3, [r5, #-3090]	; 0xfffff3ee
    6490:	03160540 	tsteq	r6, #64, 10	; 0x10000000
    6494:	0b05200e 	bleq	14e4d4 <__ccfg+0x12e52c>
    6498:	052e1103 	streq	r1, [lr, #-259]!	; 0xfffffefd
    649c:	62030608 	andvs	r0, r3, #8, 12	; 0x800000
    64a0:	0609053c 			; <UNDEFINED> instruction: 0x0609053c
    64a4:	2e080501 	cfsh32cs	mvfx0, mvfx8, #1
    64a8:	21060305 	tstcs	r6, r5, lsl #6
    64ac:	01060605 	tsteq	r6, r5, lsl #12
    64b0:	30060305 	andcc	r0, r6, r5, lsl #6
    64b4:	01060b05 	tsteq	r6, r5, lsl #22
    64b8:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
    64bc:	01052003 	tsteq	r5, r3
    64c0:	05ac2e03 	streq	r2, [ip, #3587]!	; 0xe03
    64c4:	3c520303 	mrrccc	3, 0, r0, r2, cr3
    64c8:	1b030b05 	blne	c90e4 <__ccfg+0xa913c>
    64cc:	060a0574 			; <UNDEFINED> instruction: 0x060a0574
    64d0:	060b052e 	streq	r0, [fp], -lr, lsr #10
    64d4:	06040501 	streq	r0, [r4], -r1, lsl #10
    64d8:	060705ad 	streq	r0, [r7], -sp, lsr #11
    64dc:	06040501 	streq	r0, [r4], -r1, lsl #10
    64e0:	06070530 			; <UNDEFINED> instruction: 0x06070530
    64e4:	1e080515 	mcrne	5, 0, r0, cr8, cr5, {0}
    64e8:	052d0605 	streq	r0, [sp, #-1541]!	; 0xfffff9fb
    64ec:	142f0604 	strtne	r0, [pc], #-1540	; 64f4 <__exidx_end+0x17a0>
    64f0:	01060705 	tsteq	r6, r5, lsl #14
    64f4:	2f060b05 	svccs	0x00060b05
    64f8:	01060d05 	tsteq	r6, r5, lsl #26
    64fc:	05660c05 	strbeq	r0, [r6, #-3077]!	; 0xfffff3fb
    6500:	2b052e1c 	blcs	151d78 <__ccfg+0x131dd0>
    6504:	4e0b052e 	cfsh32mi	mvfx0, mvfx11, #30
    6508:	3c060a05 			; <UNDEFINED> instruction: 0x3c060a05
    650c:	01060b05 	tsteq	r6, r5, lsl #22
    6510:	83060405 	movwhi	r0, #25605	; 0x6405
    6514:	01061805 	tsteq	r6, r5, lsl #16
    6518:	4b060405 	blmi	187534 <__ccfg+0x16758c>
    651c:	01060905 	tsteq	r6, r5, lsl #18
    6520:	2f060405 	svccs	0x00060405
    6524:	59031105 	stmdbpl	r3, {r0, r2, r8, ip}
    6528:	66063c20 	strvs	r3, [r6], -r0, lsr #24
    652c:	2e2e062e 	cfmadda32cs	mvax1, mvax0, mvfx14, mvfx14
    6530:	66063c06 	strvs	r3, [r6], -r6, lsl #24
    6534:	0620013c 			; <UNDEFINED> instruction: 0x0620013c
    6538:	743c0601 	ldrtvc	r0, [ip], #-1537	; 0xfffff9ff
    653c:	064a063c 			; <UNDEFINED> instruction: 0x064a063c
    6540:	2e21743c 	mcrcs	4, 1, r7, cr1, cr12, {1}
    6544:	2e013c90 	mcrcs	12, 0, r3, cr1, cr0, {4}
    6548:	2e060106 	adfcss	f0, f6, f6
    654c:	4a219082 	bmi	86a75c <__ccfg+0x84a7b4>
    6550:	58069006 	stmdapl	r6, {r1, r2, ip, pc}
    6554:	012e013c 			; <UNDEFINED> instruction: 0x012e013c
    6558:	3c062e06 	stccc	14, cr2, [r6], {6}
    655c:	06668206 	strbteq	r8, [r6], -r6, lsl #4
    6560:	3c3c3c3c 	ldccc	12, cr3, [ip], #-240	; 0xffffff10
    6564:	05770405 	ldrbeq	r0, [r7, #-1029]!	; 0xfffffbfb
    6568:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    656c:	16052010 			; <UNDEFINED> instruction: 0x16052010
    6570:	6606ae06 	strvs	sl, [r6], -r6, lsl #28
    6574:	2e2e062e 	cfmadda32cs	mvax1, mvax0, mvfx14, mvfx14
    6578:	3c063c06 	stccc	12, cr3, [r6], {6}
    657c:	062e013c 			; <UNDEFINED> instruction: 0x062e013c
    6580:	823c0601 	eorshi	r0, ip, #1048576	; 0x100000
    6584:	9006923c 	andls	r9, r6, ip, lsr r2
    6588:	013c5806 	teqeq	ip, r6, lsl #16
    658c:	2e06012e 	adfcssp	f0, f6, #0.5
    6590:	74063c06 	strvc	r3, [r6], #-3078	; 0xfffff3fa
    6594:	3c3c0666 	ldccc	6, cr0, [ip], #-408	; 0xfffffe68
    6598:	06723c3c 			; <UNDEFINED> instruction: 0x06723c3c
    659c:	742e063c 	strtvc	r0, [lr], #-1596	; 0xfffff9c4
    65a0:	3c903c21 	ldccc	12, cr3, [r0], {33}	; 0x21
    65a4:	01062e01 	tsteq	r6, r1, lsl #28
    65a8:	74902e06 	ldrvc	r2, [r0], #3590	; 0xe06
    65ac:	4f040521 	svcmi	0x00040521
    65b0:	060b0514 			; <UNDEFINED> instruction: 0x060b0514
    65b4:	2e070501 	cfsh32cs	mvfx0, mvfx7, #1
    65b8:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    65bc:	13060805 	movwne	r0, #26629	; 0x6805
    65c0:	052d0605 	streq	r0, [sp, #-1541]!	; 0xfffff9fb
    65c4:	13210604 			; <UNDEFINED> instruction: 0x13210604
    65c8:	01060905 	tsteq	r6, r5, lsl #18
    65cc:	21060405 	tstcs	r6, r5, lsl #8
    65d0:	24060b05 	strcs	r0, [r6], #-2821	; 0xfffff4fb
    65d4:	03060705 	movweq	r0, #26373	; 0x6705
    65d8:	0e057409 	cdpeq	4, 0, cr7, cr5, cr9, {0}
    65dc:	0b050106 	bleq	1469fc <__ccfg+0x126a54>
    65e0:	030a053e 	movweq	r0, #42302	; 0xa53e
    65e4:	11056654 	tstne	r5, r4, asr r6
    65e8:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
    65ec:	05025116 	streq	r5, [r2, #-278]	; 0xfffffeea
    65f0:	89010100 	stmdbhi	r1, {r8}
    65f4:	03000002 	movweq	r0, #2
    65f8:	00028300 	andeq	r8, r2, r0, lsl #6
    65fc:	fb010200 	blx	46e06 <__ccfg+0x26e5e>
    6600:	01000d0e 	tsteq	r0, lr, lsl #26
    6604:	00010101 	andeq	r0, r1, r1, lsl #2
    6608:	00010000 	andeq	r0, r1, r0
    660c:	752f0100 	strvc	r0, [pc, #-256]!	; 6514 <__exidx_end+0x17c0>
    6610:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 644c <__exidx_end+0x16f8>
    6614:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    6618:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    661c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6620:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6624:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6628:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    662c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    6630:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6634:	2f006564 	svccs	0x00006564
    6638:	2f727375 	svccs	0x00727375
    663c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6640:	2f656475 	svccs	0x00656475
    6644:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    6648:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    664c:	2f007379 	svccs	0x00007379
    6650:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    6654:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    6658:	2f6e6974 	svccs	0x006e6974
    665c:	6b736544 	blvs	1cdfb74 <__ccfg+0x1cbfbcc>
    6660:	2f706f74 	svccs	0x00706f74
    6664:	4f534c4f 	svcmi	0x00534c4f
    6668:	2f54454e 	svccs	0x0054454e
    666c:	4f434950 	svcmi	0x00434950
    6670:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    6674:	2f534f63 	svccs	0x00534f63
    6678:	33314343 	teqcc	r1, #201326593	; 0xc000001
    667c:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    6680:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    6684:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    6688:	72642f45 	rsbvc	r2, r4, #276	; 0x114
    668c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    6690:	0062696c 	rsbeq	r6, r2, ip, ror #18
    6694:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 65e0 <__exidx_end+0x188c>
    6698:	616d2f65 	cmnvs	sp, r5, ror #30
    669c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    66a0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    66a4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    66a8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    66ac:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    66b0:	4349502f 	movtmi	r5, #36911	; 0x902f
    66b4:	502f534f 	eorpl	r5, pc, pc, asr #6
    66b8:	534f6369 	movtpl	r6, #62313	; 0xf369
    66bc:	3143432f 	cmpcc	r3, pc, lsr #6
    66c0:	2f585833 	svccs	0x00585833
    66c4:	33314343 	teqcc	r1, #201326593	; 0xc000001
    66c8:	41575858 	cmpmi	r7, r8, asr r8
    66cc:	722f4552 	eorvc	r4, pc, #343932928	; 0x14800000
    66d0:	61705f66 	cmnvs	r0, r6, ror #30
    66d4:	65686374 	strbvs	r6, [r8, #-884]!	; 0xfffffc8c
    66d8:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    66dc:	2f656d6f 	svccs	0x00656d6f
    66e0:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    66e4:	442f6e69 	strtmi	r6, [pc], #-3689	; 66ec <__exidx_end+0x1998>
    66e8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    66ec:	4f2f706f 	svcmi	0x002f706f
    66f0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    66f4:	502f5445 	eorpl	r5, pc, r5, asr #8
    66f8:	534f4349 	movtpl	r4, #62281	; 0xf349
    66fc:	6369502f 	cmnvs	r9, #47	; 0x2f
    6700:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    6704:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    6708:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    670c:	2f656d6f 	svccs	0x00656d6f
    6710:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    6714:	442f6e69 	strtmi	r6, [pc], #-3689	; 671c <__exidx_end+0x19c8>
    6718:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    671c:	4f2f706f 	svcmi	0x002f706f
    6720:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6724:	502f5445 	eorpl	r5, pc, r5, asr #8
    6728:	534f4349 	movtpl	r4, #62281	; 0xf349
    672c:	6369502f 	cmnvs	r9, #47	; 0x2f
    6730:	2f00534f 	svccs	0x0000534f
    6734:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    6738:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    673c:	2f6e6974 	svccs	0x006e6974
    6740:	6b736544 	blvs	1cdfc58 <__ccfg+0x1cbfcb0>
    6744:	2f706f74 	svccs	0x00706f74
    6748:	4f534c4f 	svcmi	0x00534c4f
    674c:	2f54454e 	svccs	0x0054454e
    6750:	4f434950 	svcmi	0x00434950
    6754:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    6758:	2f534f63 	svccs	0x00534f63
    675c:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    6760:	00006c65 	andeq	r6, r0, r5, ror #24
    6764:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6768:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    676c:	00000100 	andeq	r0, r0, r0, lsl #2
    6770:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    6774:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    6778:	00000100 	andeq	r0, r0, r0, lsl #2
    677c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    6780:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    6784:	00000200 	andeq	r0, r0, r0, lsl #4
    6788:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    678c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    6790:	6c000002 	stcvs	0, cr0, [r0], {2}
    6794:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    6798:	00020068 	andeq	r0, r2, r8, rrx
    679c:	5f667200 	svcpl	0x00667200
    67a0:	6c69616d 	stfvse	f6, [r9], #-436	; 0xfffffe4c
    67a4:	2e786f62 	cdpcs	15, 7, cr6, cr8, cr2, {3}
    67a8:	00030068 	andeq	r0, r3, r8, rrx
    67ac:	5f667200 	svcpl	0x00667200
    67b0:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    67b4:	635f6e6f 	cmpvs	pc, #1776	; 0x6f0
    67b8:	682e646d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, sp, lr}
    67bc:	00000300 	andeq	r0, r0, r0, lsl #6
    67c0:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    67c4:	5f706f72 	svcpl	0x00706f72
    67c8:	2e646d63 	cdpcs	13, 6, cr6, cr4, cr3, {3}
    67cc:	00030068 	andeq	r0, r3, r8, rrx
    67d0:	5f667200 	svcpl	0x00667200
    67d4:	63746170 	cmnvs	r4, #112, 2
    67d8:	70635f68 	rsbvc	r5, r3, r8, ror #30
    67dc:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
    67e0:	6b73666e 	blvs	1ce01a0 <__ccfg+0x1cc01f8>
    67e4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    67e8:	66720000 	ldrbtvs	r0, [r2], -r0
    67ec:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
    67f0:	725f6863 	subsvc	r6, pc, #6488064	; 0x630000
    67f4:	675f6566 	ldrbvs	r6, [pc, -r6, ror #10]
    67f8:	73666e65 	cmnvc	r6, #1616	; 0x650
    67fc:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    6800:	61000004 	tstvs	r0, r4
    6804:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    6808:	00050068 	andeq	r0, r5, r8, rrx
    680c:	63616d00 	cmnvs	r1, #0, 26
    6810:	00682e68 	rsbeq	r2, r8, r8, ror #28
    6814:	70000005 	andvc	r0, r0, r5
    6818:	5f736e69 	svcpl	0x00736e69
    681c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    6820:	00050068 	andeq	r0, r5, r8, rrx
    6824:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    6828:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    682c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    6830:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    6834:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    6838:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    683c:	00060068 	andeq	r0, r6, r8, rrx
    6840:	72656b00 	rsbvc	r6, r5, #0, 22
    6844:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    6848:	00070068 	andeq	r0, r7, r8, rrx
    684c:	616d7300 	cmnvs	sp, r0, lsl #6
    6850:	66727472 			; <UNDEFINED> instruction: 0x66727472
    6854:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    6858:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    685c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6860:	73000005 	movwvc	r0, #5
    6864:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    6868:	735f6672 	cmpvc	pc, #119537664	; 0x7200000
    686c:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    6870:	5f73676e 	svcpl	0x0073676e
    6874:	685f706c 	ldmdavs	pc, {r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    6878:	00632e72 	rsbeq	r2, r3, r2, ror lr
    687c:	00000005 	andeq	r0, r0, r5
    6880:	0000019c 	muleq	r0, ip, r1
    6884:	015f0002 	cmpeq	pc, r2
    6888:	01020000 	mrseq	r0, (UNDEF: 2)
    688c:	000d0efb 	strdeq	r0, [sp], -fp
    6890:	01010101 	tsteq	r1, r1, lsl #2
    6894:	01000000 	mrseq	r0, (UNDEF: 0)
    6898:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    689c:	2f2e2e2f 	svccs	0x002e2e2f
    68a0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    68a4:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    68a8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    68ac:	0062696c 	rsbeq	r6, r2, ip, ror #18
    68b0:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    68b4:	63635c69 	cmnvs	r3, #26880	; 0x6900
    68b8:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    68bc:	302e302e 	eorcc	r3, lr, lr, lsr #32
    68c0:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    68c4:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    68c8:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    68cc:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    68d0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    68d4:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    68d8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    68dc:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 6774 <__exidx_end+0x1a20>
    68e0:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    68e4:	63675c72 	cmnvs	r7, #29184	; 0x7200
    68e8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    68ec:	6f6e2d6d 	svcvs	0x006e2d6d
    68f0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    68f4:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    68f8:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    68fc:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    6900:	615c3371 	cmpvs	ip, r1, ror r3
    6904:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6908:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    690c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6910:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    6914:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6918:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    691c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    6920:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    6924:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    6928:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    692c:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    6930:	31303030 	teqcc	r0, r0, lsr r0
    6934:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    6938:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    693c:	61746562 	cmnvs	r4, r2, ror #10
    6940:	63635c32 	cmnvs	r3, #12800	; 0x3200
    6944:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    6948:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6780 <__exidx_end+0x1a2c>
    694c:	6f635c73 	svcvs	0x00635c73
    6950:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    6954:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    6958:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    695c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6960:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6964:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6968:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    696c:	3130322d 	teqcc	r0, sp, lsr #4
    6970:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    6974:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6978:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    697c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6980:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    6984:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6988:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    698c:	2f2e0073 	svccs	0x002e0073
    6990:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6994:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6998:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    699c:	64610000 	strbtvs	r0, [r1], #-0
    69a0:	00632e69 	rsbeq	r2, r3, r9, ror #28
    69a4:	5f000001 	svcpl	0x00000001
    69a8:	61666564 	cmnvs	r6, r4, ror #10
    69ac:	5f746c75 	svcpl	0x00746c75
    69b0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    69b4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    69b8:	5f000002 	svcpl	0x00000002
    69bc:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    69c0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    69c4:	00000300 	andeq	r0, r0, r0, lsl #6
    69c8:	745f7768 	ldrbvc	r7, [pc], #-1896	; 69d0 <__exidx_end+0x1c7c>
    69cc:	73657079 	cmnvc	r5, #121	; 0x79
    69d0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    69d4:	6f720000 	svcvs	0x00720000
    69d8:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    69dc:	63000001 	movwvs	r0, #1
    69e0:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    69e4:	00000100 	andeq	r0, r0, r0, lsl #2
    69e8:	02050000 	andeq	r0, r5, #0
    69ec:	00003034 	andeq	r3, r0, r4, lsr r0
    69f0:	20013503 	andcs	r3, r1, r3, lsl #10
    69f4:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    69f8:	214b3d01 	cmpcs	fp, r1, lsl #26
    69fc:	022c232f 	eoreq	r2, ip, #-1140850688	; 0xbc000000
    6a00:	01010005 	tsteq	r1, r5
    6a04:	00020500 	andeq	r0, r2, r0, lsl #10
    6a08:	03000000 	movweq	r0, #0
    6a0c:	200100c0 	andcs	r0, r1, r0, asr #1
    6a10:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    6a14:	2f4b3d01 	svccs	0x004b3d01
    6a18:	022c232f 	eoreq	r2, ip, #-1140850688	; 0xbc000000
    6a1c:	01010005 	tsteq	r1, r5
    6a20:	00000167 	andeq	r0, r0, r7, ror #2
    6a24:	01470002 	cmpeq	r7, r2
    6a28:	01020000 	mrseq	r0, (UNDEF: 2)
    6a2c:	000d0efb 	strdeq	r0, [sp], -fp
    6a30:	01010101 	tsteq	r1, r1, lsl #2
    6a34:	01000000 	mrseq	r0, (UNDEF: 0)
    6a38:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    6a3c:	2f2e2e2f 	svccs	0x002e2e2f
    6a40:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6a44:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    6a48:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    6a4c:	0062696c 	rsbeq	r6, r2, ip, ror #18
    6a50:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6a54:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6a58:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    6a5c:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6a60:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    6a64:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    6a68:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    6a6c:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    6a70:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6a74:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    6a78:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    6a7c:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 6914 <__exidx_end+0x1bc0>
    6a80:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    6a84:	63675c72 	cmnvs	r7, #29184	; 0x7200
    6a88:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    6a8c:	6f6e2d6d 	svcvs	0x006e2d6d
    6a90:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6a94:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    6a98:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    6a9c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    6aa0:	615c3371 	cmpvs	ip, r1, ror r3
    6aa4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6aa8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6aac:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6ab0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    6ab4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6ab8:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    6abc:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    6ac0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    6ac4:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    6ac8:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    6acc:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    6ad0:	31303030 	teqcc	r0, r0, lsr r0
    6ad4:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    6ad8:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    6adc:	61746562 	cmnvs	r4, r2, ror #10
    6ae0:	63635c32 	cmnvs	r3, #12800	; 0x3200
    6ae4:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    6ae8:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6920 <__exidx_end+0x1bcc>
    6aec:	6f635c73 	svcvs	0x00635c73
    6af0:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    6af4:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    6af8:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    6afc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6b00:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6b04:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6b08:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    6b0c:	3130322d 	teqcc	r0, sp, lsr #4
    6b10:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    6b14:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6b18:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6b1c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6b20:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    6b24:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6b28:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    6b2c:	61000073 	tstvs	r0, r3, ror r0
    6b30:	625f6e6f 	subsvs	r6, pc, #1776	; 0x6f0
    6b34:	6f6d7461 	svcvs	0x006d7461
    6b38:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    6b3c:	5f000001 	svcpl	0x00000001
    6b40:	61666564 	cmnvs	r6, r4, ror #10
    6b44:	5f746c75 	svcpl	0x00746c75
    6b48:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    6b4c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6b50:	5f000002 	svcpl	0x00000002
    6b54:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6b58:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6b5c:	00000300 	andeq	r0, r0, r0, lsl #6
    6b60:	5f6e6f61 	svcpl	0x006e6f61
    6b64:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    6b68:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    6b6c:	00000100 	andeq	r0, r0, r0, lsl #2
    6b70:	02050000 	andeq	r0, r5, #0
    6b74:	0000305c 	andeq	r3, r0, ip, asr r0
    6b78:	1a013c03 	bne	55b8c <__ccfg+0x35be4>
    6b7c:	77032f36 	smladxvc	r3, r6, pc, r2	; <UNPREDICTABLE>
    6b80:	2e09032e 	cdpcs	3, 0, cr0, cr9, cr14, {1}
    6b84:	09023d4c 	stmdbeq	r2, {r2, r3, r6, r8, sl, fp, ip, sp}
    6b88:	a9010100 	stmdbge	r1, {r8}
    6b8c:	02000001 	andeq	r0, r0, #1
    6b90:	00014100 	andeq	r4, r1, r0, lsl #2
    6b94:	fb010200 	blx	4739e <__ccfg+0x273f6>
    6b98:	01000d0e 	tsteq	r0, lr, lsl #26
    6b9c:	00010101 	andeq	r0, r1, r1, lsl #2
    6ba0:	00010000 	andeq	r0, r1, r0
    6ba4:	2f2e0100 	svccs	0x002e0100
    6ba8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6bac:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6bb0:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    6bb4:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    6bb8:	63006269 	movwvs	r6, #617	; 0x269
    6bbc:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    6bc0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6bc4:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    6bc8:	30302e30 	eorscc	r2, r0, r0, lsr lr
    6bcc:	5f393130 	svcpl	0x00393130
    6bd0:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    6bd4:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    6bd8:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    6bdc:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    6be0:	6f745c36 	svcvs	0x00745c36
    6be4:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    6be8:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    6bec:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    6bf0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    6bf4:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    6bf8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6bfc:	61652d65 	cmnvs	r5, r5, ror #26
    6c00:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    6c04:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    6c08:	71353130 	teqvc	r5, r0, lsr r1
    6c0c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    6c10:	6f6e2d6d 	svcvs	0x006e2d6d
    6c14:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6c18:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6c1c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6c20:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6c24:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    6c28:	00656e69 	rsbeq	r6, r5, r9, ror #28
    6c2c:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6c30:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6c34:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    6c38:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6c3c:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    6c40:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    6c44:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    6c48:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    6c4c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6c50:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    6c54:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    6c58:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 6af0 <__exidx_end+0x1d9c>
    6c5c:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    6c60:	63675c72 	cmnvs	r7, #29184	; 0x7200
    6c64:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    6c68:	6f6e2d6d 	svcvs	0x006e2d6d
    6c6c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6c70:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    6c74:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    6c78:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    6c7c:	615c3371 	cmpvs	ip, r1, ror r3
    6c80:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6c84:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6c88:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6c8c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    6c90:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6c94:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    6c98:	6f610000 	svcvs	0x00610000
    6c9c:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
    6ca0:	00632e63 	rsbeq	r2, r3, r3, ror #28
    6ca4:	5f000001 	svcpl	0x00000001
    6ca8:	61666564 	cmnvs	r6, r4, ror #10
    6cac:	5f746c75 	svcpl	0x00746c75
    6cb0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    6cb4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6cb8:	5f000002 	svcpl	0x00000002
    6cbc:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6cc0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6cc4:	00000300 	andeq	r0, r0, r0, lsl #6
    6cc8:	5f6e6f61 	svcpl	0x006e6f61
    6ccc:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
    6cd0:	00010068 	andeq	r0, r1, r8, rrx
    6cd4:	05000000 	streq	r0, [r0, #-0]
    6cd8:	00308c02 	eorseq	r8, r0, r2, lsl #24
    6cdc:	013e0300 	teqeq	lr, r0, lsl #6
    6ce0:	01040200 	mrseq	r0, R12_usr
    6ce4:	00010a03 	andeq	r0, r1, r3, lsl #20
    6ce8:	21010402 	tstcs	r1, r2, lsl #8
    6cec:	01040200 	mrseq	r0, R12_usr
    6cf0:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    6cf4:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    6cf8:	00210104 	eoreq	r0, r1, r4, lsl #2
    6cfc:	21010402 	tstcs	r1, r2, lsl #8
    6d00:	08022130 	stmdaeq	r2, {r4, r5, r8, sp}
    6d04:	00010100 	andeq	r0, r1, r0, lsl #2
    6d08:	30ac0205 	adccc	r0, ip, r5, lsl #4
    6d0c:	d7030000 	strle	r0, [r3, -r0]
    6d10:	02000100 	andeq	r0, r0, #0, 2
    6d14:	0c030104 	stfeqs	f0, [r3], {4}
    6d18:	04020001 	streq	r0, [r2], #-1
    6d1c:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    6d20:	001f0104 	andseq	r0, pc, r4, lsl #2
    6d24:	21010402 	tstcs	r1, r2, lsl #8
    6d28:	01040200 	mrseq	r0, R12_usr
    6d2c:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    6d30:	02312101 	eorseq	r2, r1, #1073741824	; 0x40000000
    6d34:	01010005 	tsteq	r1, r5
    6d38:	0000019c 	muleq	r0, ip, r1
    6d3c:	01390002 	teqeq	r9, r2
    6d40:	01020000 	mrseq	r0, (UNDEF: 2)
    6d44:	000d0efb 	strdeq	r0, [sp], -fp
    6d48:	01010101 	tsteq	r1, r1, lsl #2
    6d4c:	01000000 	mrseq	r0, (UNDEF: 0)
    6d50:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    6d54:	2f2e2e2f 	svccs	0x002e2e2f
    6d58:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6d5c:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    6d60:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    6d64:	0062696c 	rsbeq	r6, r2, ip, ror #18
    6d68:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6d6c:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6d70:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    6d74:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6d78:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    6d7c:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    6d80:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    6d84:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    6d88:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6d8c:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    6d90:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    6d94:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 6c2c <__exidx_end+0x1ed8>
    6d98:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    6d9c:	63675c72 	cmnvs	r7, #29184	; 0x7200
    6da0:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    6da4:	6f6e2d6d 	svcvs	0x006e2d6d
    6da8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6dac:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    6db0:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    6db4:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    6db8:	615c3371 	cmpvs	ip, r1, ror r3
    6dbc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6dc0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6dc4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6dc8:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    6dcc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6dd0:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    6dd4:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    6dd8:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    6ddc:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    6de0:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    6de4:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    6de8:	31303030 	teqcc	r0, r0, lsr r0
    6dec:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    6df0:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    6df4:	61746562 	cmnvs	r4, r2, ror #10
    6df8:	63635c32 	cmnvs	r3, #12800	; 0x3200
    6dfc:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    6e00:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6c38 <__exidx_end+0x1ee4>
    6e04:	6f635c73 	svcvs	0x00635c73
    6e08:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    6e0c:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    6e10:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    6e14:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6e18:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6e1c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6e20:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    6e24:	3130322d 	teqcc	r0, sp, lsr #4
    6e28:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    6e2c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6e30:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6e34:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6e38:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    6e3c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6e40:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    6e44:	63000073 	movwvs	r0, #115	; 0x73
    6e48:	632e7570 			; <UNDEFINED> instruction: 0x632e7570
    6e4c:	00000100 	andeq	r0, r0, r0, lsl #2
    6e50:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    6e54:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    6e58:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    6e5c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    6e60:	00000200 	andeq	r0, r0, r0, lsl #4
    6e64:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    6e68:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    6e6c:	00030068 	andeq	r0, r3, r8, rrx
    6e70:	75706300 	ldrbvc	r6, [r0, #-768]!	; 0xfffffd00
    6e74:	0100682e 	tsteq	r0, lr, lsr #16
    6e78:	00000000 	andeq	r0, r0, r0
    6e7c:	30c40205 	sbccc	r0, r4, r5, lsl #4
    6e80:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
    6e84:	12030100 	andne	r0, r3, #0, 2
    6e88:	00040201 	andeq	r0, r4, r1, lsl #4
    6e8c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6e90:	00000002 	andeq	r0, r0, r2
    6e94:	01c00300 	biceq	r0, r0, r0, lsl #6
    6e98:	01110301 	tsteq	r1, r1, lsl #6
    6e9c:	01000302 	tsteq	r0, r2, lsl #6
    6ea0:	02050001 	andeq	r0, r5, #1
    6ea4:	000030cc 	andeq	r3, r0, ip, asr #1
    6ea8:	01028d03 	tsteq	r2, r3, lsl #26
    6eac:	02011203 	andeq	r1, r1, #805306368	; 0x30000000
    6eb0:	01010004 	tsteq	r1, r4
    6eb4:	00020500 	andeq	r0, r2, r0, lsl #10
    6eb8:	03000000 	movweq	r0, #0
    6ebc:	030102d8 	movweq	r0, #4824	; 0x12d8
    6ec0:	03020111 	movweq	r0, #8465	; 0x2111
    6ec4:	00010100 	andeq	r0, r1, r0, lsl #2
    6ec8:	00000205 	andeq	r0, r0, r5, lsl #4
    6ecc:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
    6ed0:	02160103 	andseq	r0, r6, #-1073741824	; 0xc0000000
    6ed4:	01010004 	tsteq	r1, r4
    6ed8:	000002d6 	ldrdeq	r0, [r0], -r6
    6edc:	017c0002 	cmneq	ip, r2
    6ee0:	01020000 	mrseq	r0, (UNDEF: 2)
    6ee4:	000d0efb 	strdeq	r0, [sp], -fp
    6ee8:	01010101 	tsteq	r1, r1, lsl #2
    6eec:	01000000 	mrseq	r0, (UNDEF: 0)
    6ef0:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    6ef4:	2f2e2e2f 	svccs	0x002e2e2f
    6ef8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6efc:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    6f00:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    6f04:	0062696c 	rsbeq	r6, r2, ip, ror #18
    6f08:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6f0c:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6f10:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    6f14:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6f18:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    6f1c:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    6f20:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    6f24:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    6f28:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6f2c:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    6f30:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    6f34:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 6dcc <__exidx_end+0x2078>
    6f38:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    6f3c:	63675c72 	cmnvs	r7, #29184	; 0x7200
    6f40:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    6f44:	6f6e2d6d 	svcvs	0x006e2d6d
    6f48:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6f4c:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    6f50:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    6f54:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    6f58:	615c3371 	cmpvs	ip, r1, ror r3
    6f5c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6f60:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6f64:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6f68:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    6f6c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6f70:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    6f74:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    6f78:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    6f7c:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    6f80:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    6f84:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    6f88:	31303030 	teqcc	r0, r0, lsr r0
    6f8c:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    6f90:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    6f94:	61746562 	cmnvs	r4, r2, ror #10
    6f98:	63635c32 	cmnvs	r3, #12800	; 0x3200
    6f9c:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    6fa0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6dd8 <__exidx_end+0x2084>
    6fa4:	6f635c73 	svcvs	0x00635c73
    6fa8:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    6fac:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    6fb0:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    6fb4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6fb8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6fbc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6fc0:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    6fc4:	3130322d 	teqcc	r0, sp, lsr #4
    6fc8:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    6fcc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6fd0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6fd4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6fd8:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    6fdc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6fe0:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    6fe4:	2f2e0073 	svccs	0x002e0073
    6fe8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6fec:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6ff0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6ff4:	736f0000 	cmnvc	pc, #0
    6ff8:	00632e63 	rsbeq	r2, r3, r3, ror #28
    6ffc:	6f000001 	svcvs	0x00000001
    7000:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    7004:	00000100 	andeq	r0, r0, r0, lsl #2
    7008:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    700c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    7010:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7014:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    7018:	00000200 	andeq	r0, r0, r0, lsl #4
    701c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    7020:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    7024:	00030068 	andeq	r0, r3, r8, rrx
    7028:	5f776800 	svcpl	0x00776800
    702c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    7030:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7034:	72000004 	andvc	r0, r0, #4
    7038:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    703c:	00000100 	andeq	r0, r0, r0, lsl #2
    7040:	5f6e6f61 	svcpl	0x006e6f61
    7044:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
    7048:	00010068 	andeq	r0, r1, r8, rrx
    704c:	6e6f6100 	powvse	f6, f7, f0
    7050:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    7054:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    7058:	00010068 	andeq	r0, r1, r8, rrx
    705c:	05000000 	streq	r0, [r0, #-0]
    7060:	0030d402 	eorseq	sp, r0, r2, lsl #8
    7064:	00e50300 	rsceq	r0, r5, r0, lsl #6
    7068:	0f032001 	svceq	0x00032001
    706c:	20710320 	rsbscs	r0, r1, r0, lsr #6
    7070:	25200f03 	strcs	r0, [r0, #-3843]!	; 0xfffff0fd
    7074:	309e0903 	addscc	r0, lr, r3, lsl #18
    7078:	339e0903 	orrscc	r0, lr, #49152	; 0xc000
    707c:	000702a3 	andeq	r0, r7, r3, lsr #5
    7080:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7084:	00313002 	eorseq	r3, r1, r2
    7088:	01a00300 	lsleq	r0, r0, #6
    708c:	2e0c0301 	cdpcs	3, 0, cr0, cr12, cr1, {0}
    7090:	7a038822 	bvc	e9120 <__ccfg+0xc9178>
    7094:	0225263c 	eoreq	r2, r5, #60, 12	; 0x3c00000
    7098:	01010006 	tsteq	r1, r6
    709c:	00020500 	andeq	r0, r2, r0, lsl #10
    70a0:	03000000 	movweq	r0, #0
    70a4:	200101c2 	andcs	r0, r1, r2, asr #3
    70a8:	03349125 	teqeq	r4, #1073741833	; 0x40000009
    70ac:	03272e79 			; <UNDEFINED> instruction: 0x03272e79
    70b0:	00262e7a 	eoreq	r2, r6, sl, ror lr
    70b4:	03010402 	movweq	r0, #5122	; 0x1402
    70b8:	0200207a 	andeq	r2, r0, #122	; 0x7a
    70bc:	30500104 	subscc	r0, r0, r4, lsl #2
    70c0:	241f302d 	ldrcs	r3, [pc], #-45	; 70c8 <__exidx_end+0x2374>
    70c4:	341f3d4b 	ldrcc	r3, [pc], #-3403	; 70cc <__exidx_end+0x2378>
    70c8:	03326c3d 	teqeq	r2, #15616	; 0x3d00
    70cc:	1003666d 	andne	r6, r3, sp, ror #12
    70d0:	0902263c 	stmdbeq	r2, {r2, r3, r4, r5, r9, sl, sp}
    70d4:	00010100 	andeq	r0, r1, r0, lsl #2
    70d8:	315c0205 	cmpcc	ip, r5, lsl #4
    70dc:	f3030000 	vhadd.u8	d0, d3, d0
    70e0:	4b210101 	blmi	8474ec <__ccfg+0x827544>
    70e4:	01000702 	tsteq	r0, r2, lsl #14
    70e8:	02050001 	andeq	r0, r5, #1
    70ec:	00003174 	andeq	r3, r0, r4, ror r1
    70f0:	01028003 	tsteq	r2, r3
    70f4:	03020424 	movweq	r0, #9252	; 0x2424
    70f8:	01045822 	tsteq	r4, r2, lsr #16
    70fc:	04826203 	streq	r6, [r2], #515	; 0x203
    7100:	203c0302 	eorscs	r0, ip, r2, lsl #6
    7104:	4a030104 	bmi	c751c <__ccfg+0xa7574>
    7108:	211f3d4a 	tstcs	pc, sl, asr #26
    710c:	30221f3d 	eorcc	r1, r2, sp, lsr pc
    7110:	2322301f 			; <UNDEFINED> instruction: 0x2322301f
    7114:	01000c02 	tsteq	r0, r2, lsl #24
    7118:	02050001 	andeq	r0, r5, #1
    711c:	000031d4 	ldrdeq	r3, [r0], -r4
    7120:	0102a303 	tsteq	r2, r3, lsl #6
    7124:	02044f25 	andeq	r4, r4, #37, 30	; 0x94
    7128:	044a1703 	strbeq	r1, [sl], #-1795	; 0xfffff8fd
    712c:	4a6d0301 	bmi	1b47d38 <__ccfg+0x1b27d90>
    7130:	0009024b 	andeq	r0, r9, fp, asr #4
    7134:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7138:	00000002 	andeq	r0, r0, r2
    713c:	02bc0300 	adcseq	r0, ip, #0, 6
    7140:	17032201 	strne	r2, [r3, -r1, lsl #4]
    7144:	20690320 	rsbcs	r0, r9, r0, lsr #6
    7148:	3c100328 	ldccc	3, cr0, [r0], {40}	; 0x28
    714c:	032e6c03 			; <UNDEFINED> instruction: 0x032e6c03
    7150:	6d032e15 	stcvs	14, cr2, [r3, #-84]	; 0xffffffac
    7154:	20130358 	andscs	r0, r3, r8, asr r3
    7158:	03206f03 			; <UNDEFINED> instruction: 0x03206f03
    715c:	023f2011 	eorseq	r2, pc, #17
    7160:	01010006 	tsteq	r1, r6
    7164:	00020500 	andeq	r0, r2, r0, lsl #10
    7168:	03000000 	movweq	r0, #0
    716c:	030102e3 	movweq	r0, #4835	; 0x12e3
    7170:	024d0121 	subeq	r0, sp, #1073741832	; 0x40000008
    7174:	01010002 	tsteq	r1, r2
    7178:	00020500 	andeq	r0, r2, r0, lsl #10
    717c:	03000000 	movweq	r0, #0
    7180:	03010390 	movweq	r0, #5008	; 0x1390
    7184:	1f212010 	svcne	0x00212010
    7188:	02002121 	andeq	r2, r0, #1073741832	; 0x40000008
    718c:	003e0104 	eorseq	r0, lr, r4, lsl #2
    7190:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    7194:	341d313d 	ldrcc	r3, [sp], #-317	; 0xfffffec3
    7198:	01000702 	tsteq	r0, r2, lsl #14
    719c:	02050001 	andeq	r0, r5, #1
    71a0:	00000000 	andeq	r0, r0, r0
    71a4:	0103b503 	tsteq	r3, r3, lsl #10
    71a8:	332c3117 			; <UNDEFINED> instruction: 0x332c3117
    71ac:	0005023d 	andeq	r0, r5, sp, lsr r2
    71b0:	03a70101 			; <UNDEFINED> instruction: 0x03a70101
    71b4:	00020000 	andeq	r0, r2, r0
    71b8:	00000265 	andeq	r0, r0, r5, ror #4
    71bc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    71c0:	0101000d 	tsteq	r1, sp
    71c4:	00000101 	andeq	r0, r0, r1, lsl #2
    71c8:	00000100 	andeq	r0, r0, r0, lsl #2
    71cc:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    71d0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    71d4:	2f2e2e2f 	svccs	0x002e2e2f
    71d8:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    71dc:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    71e0:	3a630062 	bcc	18c7370 <__ccfg+0x18a73c8>
    71e4:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    71e8:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    71ec:	302e322e 	eorcc	r3, lr, lr, lsr #4
    71f0:	3030302e 	eorscc	r3, r0, lr, lsr #32
    71f4:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    71f8:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    71fc:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    7200:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7204:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7208:	6f6f745c 	svcvs	0x006f745c
    720c:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    7210:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7214:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    7218:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    721c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7220:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7224:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7228:	5f342d69 	svcpl	0x00342d69
    722c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    7230:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7234:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    7238:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    723c:	61652d65 	cmnvs	r5, r5, ror #26
    7240:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7244:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7248:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    724c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    7250:	6300656e 	movwvs	r6, #1390	; 0x56e
    7254:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    7258:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    725c:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    7260:	30302e30 	eorscc	r2, r0, r0, lsr lr
    7264:	5f393130 	svcpl	0x00393130
    7268:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    726c:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7270:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    7274:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    7278:	6f745c36 	svcvs	0x00745c36
    727c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    7280:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    7284:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    7288:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    728c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    7290:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7294:	61652d65 	cmnvs	r5, r5, ror #26
    7298:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    729c:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    72a0:	71353130 	teqvc	r5, r0, lsr r1
    72a4:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    72a8:	6f6e2d6d 	svcvs	0x006e2d6d
    72ac:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    72b0:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    72b4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    72b8:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    72bc:	00737973 	rsbseq	r7, r3, r3, ror r9
    72c0:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    72c4:	63635c69 	cmnvs	r3, #26880	; 0x6900
    72c8:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    72cc:	302e302e 	eorcc	r3, lr, lr, lsr #32
    72d0:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    72d4:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    72d8:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    72dc:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    72e0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    72e4:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    72e8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    72ec:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7184 <__exidx_end+0x2430>
    72f0:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    72f4:	63675c72 	cmnvs	r7, #29184	; 0x7200
    72f8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    72fc:	6f6e2d6d 	svcvs	0x006e2d6d
    7300:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7304:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7308:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    730c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7310:	6c5c3371 	mrrcvs	3, 7, r3, ip, cr1
    7314:	675c6269 	ldrbvs	r6, [ip, -r9, ror #4]
    7318:	615c6363 	cmpvs	ip, r3, ror #6
    731c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7320:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7324:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7328:	392e345c 	stmdbcc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    732c:	695c332e 	ldmdbvs	ip, {r1, r2, r3, r5, r8, r9, ip, sp}^
    7330:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7334:	63006564 	movwvs	r6, #1380	; 0x564
    7338:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    733c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7340:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    7344:	30302e30 	eorscc	r2, r0, r0, lsr lr
    7348:	5f393130 	svcpl	0x00393130
    734c:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    7350:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7354:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    7358:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    735c:	6f745c36 	svcvs	0x00745c36
    7360:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    7364:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    7368:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    736c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7370:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    7374:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7378:	61652d65 	cmnvs	r5, r5, ror #26
    737c:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    7380:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    7384:	71353130 	teqvc	r5, r0, lsr r1
    7388:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    738c:	6f6e2d6d 	svcvs	0x006e2d6d
    7390:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7394:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    7398:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    739c:	00656475 	rsbeq	r6, r5, r5, ror r4
    73a0:	63667200 	cmnvs	r6, #0, 4
    73a4:	0100632e 	tsteq	r0, lr, lsr #6
    73a8:	66720000 	ldrbtvs	r0, [r2], -r0
    73ac:	00682e63 	rsbeq	r2, r8, r3, ror #28
    73b0:	5f000001 	svcpl	0x00000001
    73b4:	61666564 	cmnvs	r6, r4, ror #10
    73b8:	5f746c75 	svcpl	0x00746c75
    73bc:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    73c0:	00682e73 	rsbeq	r2, r8, r3, ror lr
    73c4:	5f000002 	svcpl	0x00000002
    73c8:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    73cc:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    73d0:	00000300 	andeq	r0, r0, r0, lsl #6
    73d4:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    73d8:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    73dc:	00000400 	andeq	r0, r0, r0, lsl #8
    73e0:	6d5f6672 	ldclvs	6, cr6, [pc, #-456]	; 7220 <__exidx_end+0x24cc>
    73e4:	626c6961 	rsbvs	r6, ip, #1589248	; 0x184000
    73e8:	682e786f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, fp, ip, sp, lr}
    73ec:	00000100 	andeq	r0, r0, r0, lsl #2
    73f0:	635f6672 	cmpvs	pc, #119537664	; 0x7200000
    73f4:	6f6d6d6f 	svcvs	0x006d6d6f
    73f8:	6d635f6e 	stclvs	15, cr5, [r3, #-440]!	; 0xfffffe48
    73fc:	00682e64 	rsbeq	r2, r8, r4, ror #28
    7400:	72000001 	andvc	r0, r0, #1
    7404:	72705f66 	rsbsvc	r5, r0, #408	; 0x198
    7408:	635f706f 	cmpvs	pc, #111	; 0x6f
    740c:	682e646d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, sp, lr}
    7410:	00000100 	andeq	r0, r0, r0, lsl #2
    7414:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    7418:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    741c:	00000500 	andeq	r0, r0, r0, lsl #10
    7420:	02050000 	andeq	r0, r5, #0
    7424:	00000000 	andeq	r0, r0, r0
    7428:	0100e803 	tsteq	r0, r3, lsl #16
    742c:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    7430:	02003101 	andeq	r3, r0, #1073741824	; 0x40000000
    7434:	3f2f0104 	svccc	0x002f0104
    7438:	01000302 	tsteq	r0, r2, lsl #6
    743c:	02050001 	andeq	r0, r5, #1
    7440:	00003208 	andeq	r3, r0, r8, lsl #4
    7444:	0100fa03 	tsteq	r0, r3, lsl #20	; <UNPREDICTABLE>
    7448:	01040200 	mrseq	r0, R12_usr
    744c:	03020413 	movweq	r0, #9235	; 0x2413
    7450:	044a01c7 	strbeq	r0, [sl], #-455	; 0xfffffe39
    7454:	7ebd0301 	cdpvc	3, 11, cr0, cr13, cr1, {0}
    7458:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    745c:	02042201 	andeq	r2, r4, #268435456	; 0x10000000
    7460:	3c01c103 	stfccd	f4, [r1], {3}
    7464:	c2030104 	andgt	r0, r3, #4, 2
    7468:	022f3c7e 	eoreq	r3, pc, #32256	; 0x7e00
    746c:	01010005 	tsteq	r1, r5
    7470:	30020500 	andcc	r0, r2, r0, lsl #10
    7474:	03000032 	movweq	r0, #50	; 0x32
    7478:	1401018f 	strne	r0, [r1], #-399	; 0xfffffe71
    747c:	1b251d23 	blne	94e910 <__ccfg+0x92e968>
    7480:	1f2f3d76 	svcne	0x002f3d76
    7484:	2d222f21 	stccs	15, cr2, [r2, #-132]!	; 0xffffff7c
    7488:	02212121 	eoreq	r2, r1, #1073741832	; 0x40000008
    748c:	0101000c 	tsteq	r1, ip
    7490:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
    7494:	03000032 	movweq	r0, #50	; 0x32
    7498:	150101a4 	strne	r0, [r1, #-420]	; 0xfffffe5c
    749c:	211c2f96 			; <UNDEFINED> instruction: 0x211c2f96
    74a0:	1f212525 	svcne	0x00212525
    74a4:	660a032f 	strvs	r0, [sl], -pc, lsr #6
    74a8:	032f3d3d 			; <UNDEFINED> instruction: 0x032f3d3d
    74ac:	18035873 	stmdane	r3, {r0, r1, r4, r5, r6, fp, ip, lr}
    74b0:	2f3d3d66 	svccs	0x003d3d66
    74b4:	3d586803 	ldclcc	8, cr6, [r8, #-12]
    74b8:	0b032f3d 	bleq	d31b4 <__ccfg+0xb320c>
    74bc:	2f3d3d58 	svccs	0x003d3d58
    74c0:	3d580b03 	vldrcc	d16, [r8, #-12]
    74c4:	3d5c2f3d 	ldclcc	15, cr2, [ip, #-244]	; 0xffffff0c
    74c8:	3d5c2f3d 	ldclcc	15, cr2, [ip, #-244]	; 0xffffff0c
    74cc:	02492f3e 	subeq	r2, r9, #62, 30	; 0xf8
    74d0:	0101002f 	tsteq	r1, pc, lsr #32
    74d4:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    74d8:	03000033 	movweq	r0, #51	; 0x33
    74dc:	030101f3 	movweq	r0, #4595	; 0x11f3
    74e0:	77030109 	strvc	r0, [r3, -r9, lsl #2]
    74e4:	2009032e 	andcs	r0, r9, lr, lsr #6
    74e8:	232121af 			; <UNDEFINED> instruction: 0x232121af
    74ec:	2f22221f 	svccs	0x0022221f
    74f0:	4a0b0326 	bmi	2c8190 <__ccfg+0x2a81e8>
    74f4:	335a2f2d 	cmpcc	sl, #45, 30	; 0xb4
    74f8:	02040200 	andeq	r0, r4, #0, 4
    74fc:	032e7603 			; <UNDEFINED> instruction: 0x032e7603
    7500:	14033c11 	strne	r3, [r3], #-3089	; 0xfffff3ef
    7504:	2e6f03f2 	mcrcs	3, 3, r0, cr15, cr2, {7}
    7508:	034a2303 	movteq	r2, #41731	; 0xa303
    750c:	224c3c62 	subcs	r3, ip, #25088	; 0x6200
    7510:	4c323632 	ldcmi	6, cr3, [r2], #-200	; 0xffffff38
    7514:	09035022 	stmdbeq	r3, {r1, r5, ip, lr}
    7518:	26595eac 	ldrbcs	r5, [r9], -ip, lsr #29
    751c:	66620336 			; <UNDEFINED> instruction: 0x66620336
    7520:	01001602 	tsteq	r0, r2, lsl #12
    7524:	02050001 	andeq	r0, r5, #1
    7528:	000034e4 	andeq	r3, r0, r4, ror #9
    752c:	0102f703 	tsteq	r2, r3, lsl #14	; <UNPREDICTABLE>
    7530:	0302ad2f 	movweq	sl, #11567	; 0x2d2f
    7534:	00010100 	andeq	r0, r1, r0, lsl #2
    7538:	00000205 	andeq	r0, r0, r5, lsl #4
    753c:	82030000 	andhi	r0, r3, #0
    7540:	5d240103 	stfpls	f0, [r4, #-12]!
    7544:	01002a02 	tsteq	r0, r2, lsl #20
    7548:	02050001 	andeq	r0, r5, #1
    754c:	00003504 	andeq	r3, r0, r4, lsl #10
    7550:	01039603 	tsteq	r3, r3, lsl #12
    7554:	413e2321 	teqmi	lr, r1, lsr #6
    7558:	01000602 	tsteq	r0, r2, lsl #12
    755c:	0001e901 	andeq	lr, r1, r1, lsl #18
    7560:	67000200 	strvs	r0, [r0, -r0, lsl #4]
    7564:	02000001 	andeq	r0, r0, #1
    7568:	0d0efb01 	vstreq	d15, [lr, #-4]
    756c:	01010100 	mrseq	r0, (UNDEF: 17)
    7570:	00000001 	andeq	r0, r0, r1
    7574:	01000001 	tsteq	r0, r1
    7578:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    757c:	2f2e2e2f 	svccs	0x002e2e2f
    7580:	642f2e2e 	strtvs	r2, [pc], #-3630	; 7588 <__exidx_end+0x2834>
    7584:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    7588:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    758c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7590:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7594:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7598:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    759c:	31303030 	teqcc	r0, r0, lsr r0
    75a0:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    75a4:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    75a8:	61746562 	cmnvs	r4, r2, ror #10
    75ac:	63635c32 	cmnvs	r3, #12800	; 0x3200
    75b0:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    75b4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 73ec <__exidx_end+0x2698>
    75b8:	6f635c73 	svcvs	0x00635c73
    75bc:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    75c0:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    75c4:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    75c8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    75cc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    75d0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    75d4:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    75d8:	3130322d 	teqcc	r0, sp, lsr #4
    75dc:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    75e0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    75e4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    75e8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    75ec:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    75f0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    75f4:	616d5c65 	cmnvs	sp, r5, ror #24
    75f8:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    75fc:	3a630065 	bcc	18c7798 <__ccfg+0x18a77f0>
    7600:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    7604:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    7608:	302e322e 	eorcc	r3, lr, lr, lsr #4
    760c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7610:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    7614:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7618:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    761c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7620:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7624:	6f6f745c 	svcvs	0x006f745c
    7628:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    762c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7630:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    7634:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7638:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    763c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7640:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7644:	5f342d69 	svcpl	0x00342d69
    7648:	30322d39 	eorscc	r2, r2, r9, lsr sp
    764c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7650:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    7654:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7658:	61652d65 	cmnvs	r5, r5, ror #26
    765c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7660:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7664:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    7668:	00007379 	andeq	r7, r0, r9, ror r3
    766c:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    7670:	00632e70 	rsbeq	r2, r3, r0, ror lr
    7674:	61000001 	tstvs	r0, r1
    7678:	775f6e6f 	ldrbvc	r6, [pc, -pc, ror #28]
    767c:	682e6375 	stmdavs	lr!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}
    7680:	00000100 	andeq	r0, r0, r0, lsl #2
    7684:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    7688:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    768c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7690:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    7694:	00000200 	andeq	r0, r0, r0, lsl #4
    7698:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    769c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    76a0:	00030068 	andeq	r0, r3, r8, rrx
    76a4:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    76a8:	725f7075 	subsvc	r7, pc, #117	; 0x75
    76ac:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    76b0:	00000100 	andeq	r0, r0, r0, lsl #2
    76b4:	70696863 	rsbvc	r6, r9, r3, ror #16
    76b8:	6f666e69 	svcvs	0x00666e69
    76bc:	0100682e 	tsteq	r0, lr, lsr #16
    76c0:	65730000 	ldrbvs	r0, [r3, #-0]!
    76c4:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
    76c8:	00010068 	andeq	r0, r1, r8, rrx
    76cc:	05000000 	streq	r0, [r0, #-0]
    76d0:	00352002 	eorseq	r2, r5, r2
    76d4:	028d0300 	addeq	r0, sp, #0, 6
    76d8:	0a032001 	beq	cf6e4 <__ccfg+0xaf73c>
    76dc:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    76e0:	424f4101 	submi	r4, pc, #1073741824	; 0x40000000
    76e4:	1f212d43 	svcne	0x00212d43
    76e8:	87030204 	strhi	r0, [r3, -r4, lsl #4]
    76ec:	01046604 	tsteq	r4, r4, lsl #12
    76f0:	3c7c8603 	ldclcc	6, cr8, [ip], #-12
    76f4:	09034236 	stmdbeq	r3, {r1, r2, r4, r5, r9, lr}
    76f8:	2f3d2d4a 	svccs	0x003d2d4a
    76fc:	2f2f1f2f 	svccs	0x002f1f2f
    7700:	48312321 	ldmdami	r1!, {r0, r5, r8, r9, sp}
    7704:	580a0325 	stmdapl	sl, {r0, r2, r5, r8, r9}
    7708:	023f5d41 	eorseq	r5, pc, #4160	; 0x1040
    770c:	0101001e 	tsteq	r1, lr, lsl r0
    7710:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    7714:	03000035 	movweq	r0, #53	; 0x35
    7718:	280100f0 	stmdacs	r1, {r4, r5, r6, r7}
    771c:	41334330 	teqmi	r3, r0, lsr r3
    7720:	333c0903 	teqcc	ip, #49152	; 0xc000
    7724:	032e0b03 			; <UNDEFINED> instruction: 0x032e0b03
    7728:	03273c0e 			; <UNDEFINED> instruction: 0x03273c0e
    772c:	15032079 	strne	r2, [r3, #-121]	; 0xffffff87
    7730:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
    7734:	03496742 	movteq	r6, #38722	; 0x9742
    7738:	2d592009 	ldclcs	0, cr2, [r9, #-36]	; 0xffffffdc
    773c:	004b6924 	subeq	r6, fp, r4, lsr #18
    7740:	27010402 	strcs	r0, [r1, -r2, lsl #8]
    7744:	0013024d 	andseq	r0, r3, sp, asr #4
    7748:	04570101 	ldrbeq	r0, [r7], #-257	; 0xfffffeff
    774c:	00020000 	andeq	r0, r2, r0
    7750:	00000165 	andeq	r0, r0, r5, ror #2
    7754:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    7758:	0101000d 	tsteq	r1, sp
    775c:	00000101 	andeq	r0, r0, r1, lsl #2
    7760:	00000100 	andeq	r0, r0, r0, lsl #2
    7764:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    7768:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    776c:	2f2e2e2f 	svccs	0x002e2e2f
    7770:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    7774:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    7778:	3a630062 	bcc	18c7908 <__ccfg+0x18a7960>
    777c:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    7780:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    7784:	302e322e 	eorcc	r3, lr, lr, lsr #4
    7788:	3030302e 	eorscc	r3, r0, lr, lsr #32
    778c:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    7790:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7794:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    7798:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    779c:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    77a0:	6f6f745c 	svcvs	0x006f745c
    77a4:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    77a8:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    77ac:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    77b0:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    77b4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    77b8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    77bc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    77c0:	5f342d69 	svcpl	0x00342d69
    77c4:	30322d39 	eorscc	r2, r2, r9, lsr sp
    77c8:	33713531 	cmncc	r1, #205520896	; 0xc400000
    77cc:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    77d0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    77d4:	61652d65 	cmnvs	r5, r5, ror #26
    77d8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    77dc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    77e0:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    77e4:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    77e8:	6300656e 	movwvs	r6, #1390	; 0x56e
    77ec:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    77f0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    77f4:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    77f8:	30302e30 	eorscc	r2, r0, r0, lsr lr
    77fc:	5f393130 	svcpl	0x00393130
    7800:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    7804:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7808:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    780c:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    7810:	6f745c36 	svcvs	0x00745c36
    7814:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    7818:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    781c:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    7820:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7824:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    7828:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    782c:	61652d65 	cmnvs	r5, r5, ror #26
    7830:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    7834:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    7838:	71353130 	teqvc	r5, r0, lsr r1
    783c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    7840:	6f6e2d6d 	svcvs	0x006e2d6d
    7844:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7848:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    784c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7850:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    7854:	00737973 	rsbseq	r7, r3, r3, ror r9
    7858:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    785c:	725f7075 	subsvc	r7, pc, #117	; 0x75
    7860:	632e6d6f 			; <UNDEFINED> instruction: 0x632e6d6f
    7864:	00000100 	andeq	r0, r0, r0, lsl #2
    7868:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    786c:	6f725f70 	svcvs	0x00725f70
    7870:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    7874:	73000001 	movwvc	r0, #1
    7878:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    787c:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
    7880:	00010068 	andeq	r0, r1, r8, rrx
    7884:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    7888:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    788c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    7890:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    7894:	00020068 	andeq	r0, r2, r8, rrx
    7898:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    789c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    78a0:	0300682e 	movweq	r6, #2094	; 0x82e
    78a4:	64640000 	strbtvs	r0, [r4], #-0
    78a8:	00682e69 	rsbeq	r2, r8, r9, ror #28
    78ac:	6f000001 	svcvs	0x00000001
    78b0:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    78b4:	00000100 	andeq	r0, r0, r0, lsl #2
    78b8:	02050000 	andeq	r0, r5, #0
    78bc:	00003698 	muleq	r0, r8, r6
    78c0:	0100ff03 	tsteq	r0, r3, lsl #30	; <UNPREDICTABLE>
    78c4:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
    78c8:	72032e0e 	andvc	r2, r3, #14, 28	; 0xe0
    78cc:	2e0e0320 	cdpcs	3, 0, cr0, cr14, cr0, {1}
    78d0:	d7030204 	strle	r0, [r3, -r4, lsl #4]
    78d4:	01042000 	mrseq	r2, (UNDEF: 4)
    78d8:	207fa803 	rsbscs	sl, pc, r3, lsl #16
    78dc:	d9030204 	stmdble	r3, {r2, r9}
    78e0:	212d2e00 			; <UNDEFINED> instruction: 0x212d2e00
    78e4:	ac030104 	stfges	f0, [r3], {4}
    78e8:	4d302e7f 	ldcmi	14, cr2, [r0, #-508]!	; 0xfffffe04
    78ec:	22652f21 	rsbcs	r2, r5, #33, 30	; 0x84
    78f0:	221e2222 	andscs	r2, lr, #536870914	; 0x20000002
    78f4:	03587803 	cmpeq	r8, #196608	; 0x30000
    78f8:	7303200d 	movwvc	r2, #12301	; 0x300d
    78fc:	2010033c 	andscs	r0, r0, ip, lsr r3
    7900:	21212121 			; <UNDEFINED> instruction: 0x21212121
    7904:	01000d02 	tsteq	r0, r2, lsl #26
    7908:	02050001 	andeq	r0, r5, #1
    790c:	00003714 	andeq	r3, r0, r4, lsl r7
    7910:	0101bf03 	tsteq	r1, r3, lsl #30
    7914:	4a78031a 	bmi	1e08584 <__ccfg+0x1de85dc>
    7918:	0e032820 	cdpeq	8, 0, cr2, cr3, cr0, {1}
    791c:	2e7a0320 	cdpcs	3, 7, cr0, cr10, cr0, {1}
    7920:	2e0e0342 	cdpcs	3, 0, cr0, cr14, cr2, {2}
    7924:	432d3130 			; <UNDEFINED> instruction: 0x432d3130
    7928:	3002042d 	andcc	r0, r2, sp, lsr #8
    792c:	03010421 	movweq	r0, #5153	; 0x1421
    7930:	2f3d2e0b 	svccs	0x003d2e0b
    7934:	0c032365 	stceq	3, cr2, [r3], {101}	; 0x65
    7938:	302c4d66 	eorcc	r4, ip, r6, ror #26
    793c:	2d522d28 	ldclcs	13, cr2, [r2, #-160]	; 0xffffff60
    7940:	01001502 	tsteq	r0, r2, lsl #10
    7944:	02050001 	andeq	r0, r5, #1
    7948:	000037c0 	andeq	r3, r0, r0, asr #15
    794c:	01049f03 	tsteq	r4, r3, lsl #30
    7950:	03010c03 	movweq	r0, #7171	; 0x1c03
    7954:	77032009 	strvc	r2, [r3, -r9]
    7958:	33312120 	teqcc	r1, #32, 2
    795c:	31303027 	teqcc	r0, r7, lsr #32
    7960:	351d2d22 	ldrcc	r2, [sp, #-3362]	; 0xfffff2de
    7964:	3d3e3d31 	ldccc	13, cr3, [lr, #-196]!	; 0xffffff3c
    7968:	271d3b22 	ldrcs	r3, [sp, -r2, lsr #22]
    796c:	03207603 			; <UNDEFINED> instruction: 0x03207603
    7970:	06022e12 			; <UNDEFINED> instruction: 0x06022e12
    7974:	00010100 	andeq	r0, r1, r0, lsl #2
    7978:	381c0205 	ldmdacc	ip, {r0, r2, r9}
    797c:	e5030000 	str	r0, [r3, #-0]
    7980:	34180104 	ldrcc	r0, [r8], #-260	; 0xfffffefc
    7984:	36207903 	strtcc	r7, [r0], -r3, lsl #18
    7988:	00050233 	andeq	r0, r5, r3, lsr r2
    798c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7990:	00000002 	andeq	r0, r0, r2
    7994:	05810300 	streq	r0, [r1, #768]	; 0x300
    7998:	02331801 	eorseq	r1, r3, #65536	; 0x10000
    799c:	01010006 	tsteq	r1, r6
    79a0:	34020500 	strcc	r0, [r2], #-1280	; 0xfffffb00
    79a4:	03000038 	movweq	r0, #56	; 0x38
    79a8:	19010595 	stmdbne	r1, {r0, r2, r4, r7, r8, sl}
    79ac:	022e1303 	eoreq	r1, lr, #201326592	; 0xc000000
    79b0:	01010006 	tsteq	r1, r6
    79b4:	44020500 	strmi	r0, [r2], #-1280	; 0xfffffb00
    79b8:	03000038 	movweq	r0, #56	; 0x38
    79bc:	190105b8 	stmdbne	r1, {r3, r4, r5, r7, r8, sl}
    79c0:	022e1303 	eoreq	r1, lr, #201326592	; 0xc000000
    79c4:	01010008 	tsteq	r1, r8
    79c8:	58020500 	stmdapl	r2, {r8, sl}
    79cc:	03000038 	movweq	r0, #56	; 0x38
    79d0:	030105db 	movweq	r0, #5595	; 0x15db
    79d4:	0903200b 	stmdbeq	r3, {r0, r1, r3, sp}
    79d8:	20770320 	rsbscs	r0, r7, r0, lsr #6
    79dc:	03200903 			; <UNDEFINED> instruction: 0x03200903
    79e0:	2a352079 	bcs	d4fbcc <__ccfg+0xd2fc24>
    79e4:	30312232 	eorscc	r2, r1, r2, lsr r2
    79e8:	30274732 	eorcc	r4, r7, r2, lsr r7
    79ec:	17034732 	smladxne	r3, r2, r7, r4
    79f0:	3a36372e 	bcc	d956b0 <__ccfg+0xd75708>
    79f4:	00080227 	andeq	r0, r8, r7, lsr #4
    79f8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    79fc:	0038bc02 	eorseq	fp, r8, r2, lsl #24
    7a00:	06a90300 	strteq	r0, [r9], r0, lsl #6
    7a04:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    7a08:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    7a0c:	01010003 	tsteq	r1, r3
    7a10:	d0020500 	andle	r0, r2, r0, lsl #10
    7a14:	03000038 	movweq	r0, #56	; 0x38
    7a18:	150106bc 	strne	r0, [r1, #-1724]	; 0xfffff944
    7a1c:	09035521 	stmdbeq	r3, {r0, r5, r8, sl, ip, lr}
    7a20:	00030220 	andeq	r0, r3, r0, lsr #4
    7a24:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7a28:	0038e402 	eorseq	lr, r8, r2, lsl #8
    7a2c:	06cf0300 	strbeq	r0, [pc], r0, lsl #6
    7a30:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    7a34:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    7a38:	01010003 	tsteq	r1, r3
    7a3c:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
    7a40:	03000038 	movweq	r0, #56	; 0x38
    7a44:	160106e2 	strne	r0, [r1], -r2, ror #13
    7a48:	032f4321 			; <UNDEFINED> instruction: 0x032f4321
    7a4c:	3540207a 	strbcc	r2, [r0, #-122]	; 0xffffff86
    7a50:	2071032c 	rsbscs	r0, r1, ip, lsr #6
    7a54:	022e1603 	eoreq	r1, lr, #3145728	; 0x300000
    7a58:	01010003 	tsteq	r1, r3
    7a5c:	20020500 	andcs	r0, r2, r0, lsl #10
    7a60:	03000039 	movweq	r0, #57	; 0x39
    7a64:	16010782 	strne	r0, [r1], -r2, lsl #15
    7a68:	00060233 	andeq	r0, r6, r3, lsr r2
    7a6c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7a70:	00393002 	eorseq	r3, r9, r2
    7a74:	07940300 	ldreq	r0, [r4, r0, lsl #6]
    7a78:	43211601 			; <UNDEFINED> instruction: 0x43211601
    7a7c:	03333429 	teqeq	r3, #687865856	; 0x29000000
    7a80:	1e352079 	mrcne	0, 1, r2, cr5, cr9, {3}
    7a84:	032e7103 			; <UNDEFINED> instruction: 0x032e7103
    7a88:	05022016 	streq	r2, [r2, #-22]	; 0xffffffea
    7a8c:	00010100 	andeq	r0, r1, r0, lsl #2
    7a90:	395c0205 	ldmdbcc	ip, {r0, r2, r9}^
    7a94:	b4030000 	strlt	r0, [r3], #-0
    7a98:	21150107 	tstcs	r5, r7, lsl #2
    7a9c:	20090355 	andcs	r0, r9, r5, asr r3
    7aa0:	01000302 	tsteq	r0, r2, lsl #6
    7aa4:	02050001 	andeq	r0, r5, #1
    7aa8:	00003970 	andeq	r3, r0, r0, ror r9
    7aac:	0107c803 	tsteq	r7, r3, lsl #16
    7ab0:	03552115 	cmpeq	r5, #1073741829	; 0x40000005
    7ab4:	0302200a 	movweq	r2, #8202	; 0x200a
    7ab8:	00010100 	andeq	r0, r1, r0, lsl #2
    7abc:	39840205 	stmibcc	r4, {r0, r2, r9}
    7ac0:	a7030000 	strge	r0, [r3, -r0]
    7ac4:	03200102 			; <UNDEFINED> instruction: 0x03200102
    7ac8:	1f3d2009 	svcne	0x003d2009
    7acc:	032f4e21 			; <UNDEFINED> instruction: 0x032f4e21
    7ad0:	03ac02d1 			; <UNDEFINED> instruction: 0x03ac02d1
    7ad4:	03207db9 			; <UNDEFINED> instruction: 0x03207db9
    7ad8:	032002c7 			; <UNDEFINED> instruction: 0x032002c7
    7adc:	5c207db9 	stcpl	13, cr7, [r0], #-740	; 0xfffffd1c
    7ae0:	3d211f2f 	stccc	15, cr1, [r1, #-188]!	; 0xffffff44
    7ae4:	3d211f2f 	stccc	15, cr1, [r1, #-188]!	; 0xffffff44
    7ae8:	43211f3d 			; <UNDEFINED> instruction: 0x43211f3d
    7aec:	523d6e3d 	eorspl	r6, sp, #976	; 0x3d0
    7af0:	03211f3d 			; <UNDEFINED> instruction: 0x03211f3d
    7af4:	033d3c09 	teqeq	sp, #2304	; 0x900
    7af8:	033d660a 	teqeq	sp, #10485760	; 0xa00000
    7afc:	7c3d660b 	ldcvc	6, cr6, [sp], #-44	; 0xffffffd4
    7b00:	40211f3d 	eormi	r1, r1, sp, lsr pc
    7b04:	0012024b 	andseq	r0, r2, fp, asr #4
    7b08:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7b0c:	003a9402 	eorseq	r9, sl, r2, lsl #8
    7b10:	07de0300 	ldrbeq	r0, [lr, r0, lsl #6]
    7b14:	04020001 	streq	r0, [r2], #-1
    7b18:	200e0301 	andcs	r0, lr, r1, lsl #6
    7b1c:	231d2352 	tstcs	sp, #1207959553	; 0x48000001
    7b20:	4b684d1d 	blmi	1a1af9c <__ccfg+0x19faff4>
    7b24:	34207a03 	strtcc	r7, [r0], #-2563	; 0xfffff5fd
    7b28:	04020041 	streq	r0, [r2], #-65	; 0xffffffbf
    7b2c:	315b3d01 	cmpcc	fp, r1, lsl #26
    7b30:	01000b02 	tsteq	r0, r2, lsl #22
    7b34:	02050001 	andeq	r0, r5, #1
    7b38:	00003af8 	strdeq	r3, [r0], -r8
    7b3c:	01089303 	tsteq	r8, r3, lsl #6
    7b40:	2f010903 	svccs	0x00010903
    7b44:	0022212d 	eoreq	r2, r2, sp, lsr #2
    7b48:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    7b4c:	0007024b 	andeq	r0, r7, fp, asr #4
    7b50:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7b54:	003b2002 	eorseq	r2, fp, r2
    7b58:	039b0300 	orrseq	r0, fp, #0, 6
    7b5c:	01090301 	tsteq	r9, r1, lsl #6
    7b60:	203c7703 	eorscs	r7, ip, r3, lsl #14
    7b64:	52200903 	eorpl	r0, r0, #49152	; 0xc000
    7b68:	0a033130 	beq	d4030 <__ccfg+0xb4088>
    7b6c:	4c2b234a 	stcmi	3, cr2, [fp], #-296	; 0xfffffed8
    7b70:	2d2f2448 	cfstrscs	mvf2, [pc, #-288]!	; 7a58 <__exidx_end+0x2d04>
    7b74:	32293376 	eorcc	r3, r9, #-671088639	; 0xd8000001
    7b78:	5226501c 	eorpl	r5, r6, #28
    7b7c:	2f4d4f3d 	svccs	0x004d4f3d
    7b80:	3d4b845d 	cfstrdcc	mvd8, [fp, #-372]	; 0xfffffe8c
    7b84:	02003d24 	andeq	r3, r0, #36, 26	; 0x900
    7b88:	5b4b0104 	blpl	12c7fa0 <__ccfg+0x12a7ff8>
    7b8c:	4d864b2f 	vstrmi	d4, [r6, #188]	; 0xbc
    7b90:	4a09033f 	bmi	248894 <__ccfg+0x2288ec>
    7b94:	031e221e 	tsteq	lr, #-536870911	; 0xe0000001
    7b98:	03043c0b 	movweq	r3, #19467	; 0x4c0b
    7b9c:	4a7db903 	bmi	1f75fb0 <__ccfg+0x1f56008>
    7ba0:	01001f02 	tsteq	r0, r2, lsl #30
    7ba4:	00036501 	andeq	r6, r3, r1, lsl #10
    7ba8:	a8000200 	stmdage	r0, {r9}
    7bac:	02000001 	andeq	r0, r0, #1
    7bb0:	0d0efb01 	vstreq	d15, [lr, #-4]
    7bb4:	01010100 	mrseq	r0, (UNDEF: 17)
    7bb8:	00000001 	andeq	r0, r0, r1
    7bbc:	01000001 	tsteq	r0, r1
    7bc0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7bc4:	2f2e2e2f 	svccs	0x002e2e2f
    7bc8:	642f2e2e 	strtvs	r2, [pc], #-3630	; 7bd0 <__exidx_end+0x2e7c>
    7bcc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    7bd0:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    7bd4:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7bd8:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7bdc:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7be0:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7be4:	31303030 	teqcc	r0, r0, lsr r0
    7be8:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7bec:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7bf0:	61746562 	cmnvs	r4, r2, ror #10
    7bf4:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7bf8:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7bfc:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7a34 <__exidx_end+0x2ce0>
    7c00:	6f635c73 	svcvs	0x00635c73
    7c04:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7c08:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7c0c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7c10:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7c14:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7c18:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7c1c:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7c20:	3130322d 	teqcc	r0, sp, lsr #4
    7c24:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7c28:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7c2c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7c30:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7c34:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7c38:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7c3c:	616d5c65 	cmnvs	sp, r5, ror #24
    7c40:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    7c44:	3a630065 	bcc	18c7de0 <__ccfg+0x18a7e38>
    7c48:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    7c4c:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    7c50:	302e322e 	eorcc	r3, lr, lr, lsr #4
    7c54:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7c58:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    7c5c:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7c60:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    7c64:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7c68:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7c6c:	6f6f745c 	svcvs	0x006f745c
    7c70:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    7c74:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7c78:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    7c7c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7c80:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7c84:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7c88:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7c8c:	5f342d69 	svcpl	0x00342d69
    7c90:	30322d39 	eorscc	r2, r2, r9, lsr sp
    7c94:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7c98:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    7c9c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7ca0:	61652d65 	cmnvs	r5, r5, ror #26
    7ca4:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7ca8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7cac:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    7cb0:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    7cb4:	2f2e2e2f 	svccs	0x002e2e2f
    7cb8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7cbc:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
    7cc0:	73000063 	movwvc	r0, #99	; 0x63
    7cc4:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    7cc8:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
    7ccc:	00010063 	andeq	r0, r1, r3, rrx
    7cd0:	6e6f6100 	powvse	f6, f7, f0
    7cd4:	6375775f 	cmnvs	r5, #24903680	; 0x17c0000
    7cd8:	0100682e 	tsteq	r0, lr, lsr #16
    7cdc:	736f0000 	cmnvc	pc, #0
    7ce0:	00682e63 	rsbeq	r2, r8, r3, ror #28
    7ce4:	70000001 	andvc	r0, r0, r1
    7ce8:	2e6d6372 	mcrcs	3, 3, r6, cr13, cr2, {3}
    7cec:	00010068 	andeq	r0, r1, r8, rrx
    7cf0:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    7cf4:	725f7075 	subsvc	r7, pc, #117	; 0x75
    7cf8:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    7cfc:	00000100 	andeq	r0, r0, r0, lsl #2
    7d00:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    7d04:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    7d08:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7d0c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    7d10:	00000200 	andeq	r0, r0, r0, lsl #4
    7d14:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    7d18:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    7d1c:	00030068 	andeq	r0, r3, r8, rrx
    7d20:	5f776800 	svcpl	0x00776800
    7d24:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    7d28:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7d2c:	72000004 	andvc	r0, r0, #4
    7d30:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    7d34:	00000100 	andeq	r0, r0, r0, lsl #2
    7d38:	5f737973 	svcpl	0x00737973
    7d3c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    7d40:	0100682e 	tsteq	r0, lr, lsr #16
    7d44:	6f610000 	svcvs	0x00610000
    7d48:	61625f6e 	cmnvs	r2, lr, ror #30
    7d4c:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    7d50:	0100682e 	tsteq	r0, lr, lsr #16
    7d54:	00000000 	andeq	r0, r0, r0
    7d58:	00000205 	andeq	r0, r0, r5, lsl #4
    7d5c:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    7d60:	02040100 	andeq	r0, r4, #0, 2
    7d64:	0102e903 	tsteq	r2, r3, lsl #18
    7d68:	97030104 	strls	r0, [r3, -r4, lsl #2]
    7d6c:	02042e7d 	andeq	r2, r4, #2000	; 0x7d0
    7d70:	2e02e903 	vmlacs.f16	s28, s4, s6	; <UNPREDICTABLE>
    7d74:	01040200 	mrseq	r0, R12_usr
    7d78:	2000ce03 	andcs	ip, r0, r3, lsl #28
    7d7c:	02000104 	andeq	r0, r0, #4, 2
    7d80:	d1030104 	tstle	r3, r4, lsl #2
    7d84:	0c032e7c 	stceq	14, cr2, [r3], {124}	; 0x7c
    7d88:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    7d8c:	4b896701 	blmi	fe261998 <_estack+0xde25c998>
    7d90:	044a0903 	strbeq	r0, [sl], #-2307	; 0xfffff6fd
    7d94:	01a50303 			; <UNDEFINED> instruction: 0x01a50303
    7d98:	03010458 	movweq	r0, #5208	; 0x1458
    7d9c:	004a7ee4 	subeq	r7, sl, r4, ror #29
    7da0:	5d010402 	cfstrspl	mvf0, [r1, #-8]
    7da4:	81030404 	tsthi	r3, r4, lsl #8
    7da8:	02007403 	andeq	r7, r0, #50331648	; 0x3000000
    7dac:	14030104 	strne	r0, [r3], #-260	; 0xfffffefc
    7db0:	0001043c 	andeq	r0, r1, ip, lsr r4
    7db4:	03010402 	movweq	r0, #5122	; 0x1402
    7db8:	042e7cef 	strteq	r7, [lr], #-3311	; 0xfffff311
    7dbc:	03b70304 			; <UNDEFINED> instruction: 0x03b70304
    7dc0:	241c322e 	ldrcs	r3, [ip], #-558	; 0xfffffdd2
    7dc4:	00204203 	eoreq	r4, r0, r3, lsl #4
    7dc8:	03010402 	movweq	r0, #5122	; 0x1402
    7dcc:	01042e14 	tsteq	r4, r4, lsl lr
    7dd0:	01040200 	mrseq	r0, R12_usr
    7dd4:	207cf703 	rsbscs	pc, ip, r3, lsl #14
    7dd8:	412e0903 			; <UNDEFINED> instruction: 0x412e0903
    7ddc:	4b83281b 	blmi	fe0d1e50 <_estack+0xde0cce50>
    7de0:	041b2438 	ldreq	r2, [fp], #-1080	; 0xfffffbc8
    7de4:	02e70304 	rsceq	r0, r7, #4, 6	; 0x10000000
    7de8:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    7dec:	3c140301 	ldccc	3, cr0, [r4], {1}
    7df0:	02000104 	andeq	r0, r0, #4, 2
    7df4:	8d030104 	stfhis	f0, [r3, #-16]
    7df8:	0230207d 	eorseq	r2, r0, #125	; 0x7d
    7dfc:	01010017 	tsteq	r1, r7, lsl r0
    7e00:	70020500 	andvc	r0, r2, r0, lsl #10
    7e04:	0300003c 	movweq	r0, #60	; 0x3c
    7e08:	030101da 	movweq	r0, #4570	; 0x11da
    7e0c:	63032e1d 	movwvs	r2, #15901	; 0x3e1d
    7e10:	201d0320 	andscs	r0, sp, r0, lsr #6
    7e14:	32412f59 	subcc	r2, r1, #356	; 0x164
    7e18:	321c2232 	andscc	r2, ip, #536870915	; 0x20000003
    7e1c:	325c9421 	subscc	r9, ip, #553648128	; 0x21000000
    7e20:	0305041b 	movweq	r0, #21531	; 0x541b
    7e24:	04212e5f 	strteq	r2, [r1], #-3679	; 0xfffff1a1
    7e28:	2e240301 	cdpcs	3, 2, cr0, cr4, cr1, {0}
    7e2c:	331b3243 	tstcc	fp, #805306372	; 0x30000004
    7e30:	50030504 	andpl	r0, r3, r4, lsl #10
    7e34:	01042120 	tsteq	r4, r0, lsr #2
    7e38:	042e2e03 	strteq	r2, [lr], #-3587	; 0xfffff1fd
    7e3c:	2e510305 	cdpcs	3, 5, cr0, cr1, cr5, {0}
    7e40:	34030104 	strcc	r0, [r3], #-260	; 0xfffffefc
    7e44:	03050420 	movweq	r0, #21536	; 0x5420
    7e48:	0104204d 	tsteq	r4, sp, asr #32
    7e4c:	2f2e3403 	svccs	0x002e3403
    7e50:	2f692365 	svccs	0x00692365
    7e54:	213e214d 	teqcs	lr, sp, asr #2
    7e58:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
    7e5c:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    7e60:	ca4a0f03 	bgt	128ba74 <__ccfg+0x126bacc>
    7e64:	242a2f3f 	strtcs	r2, [sl], #-3903	; 0xfffff0c1
    7e68:	40322b24 	eorsmi	r2, r2, r4, lsr #22
    7e6c:	3e3d3193 	mrccc	1, 1, r3, cr13, cr3, {4}
    7e70:	03213e3d 			; <UNDEFINED> instruction: 0x03213e3d
    7e74:	032d3c63 			; <UNDEFINED> instruction: 0x032d3c63
    7e78:	31312026 	teqcc	r1, r6, lsr #32
    7e7c:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
    7e80:	2e0b0321 	cdpcs	3, 0, cr0, cr11, cr1, {1}
    7e84:	3c780321 	ldclcc	3, cr0, [r8], #-132	; 0xffffff7c
    7e88:	03200903 			; <UNDEFINED> instruction: 0x03200903
    7e8c:	0e032e77 	mcreq	14, 0, r2, cr3, cr7, {3}
    7e90:	7103213c 	tstvc	r3, ip, lsr r1
    7e94:	3c0f0320 	stccc	3, cr0, [pc], {32}
    7e98:	21231d7b 			; <UNDEFINED> instruction: 0x21231d7b
    7e9c:	23212265 			; <UNDEFINED> instruction: 0x23212265
    7ea0:	20780328 	rsbscs	r0, r8, r8, lsr #6
    7ea4:	4c222134 	stfmis	f2, [r2], #-208	; 0xffffff30
    7ea8:	403e213d 	eorsmi	r2, lr, sp, lsr r1
    7eac:	023d322c 	eorseq	r3, sp, #44, 4	; 0xc0000002
    7eb0:	01010021 	tsteq	r1, r1, lsr #32
    7eb4:	90020500 	andls	r0, r2, r0, lsl #10
    7eb8:	0300003e 	movweq	r0, #62	; 0x3e
    7ebc:	270103b6 			; <UNDEFINED> instruction: 0x270103b6
    7ec0:	a22f2240 	eorge	r2, pc, #64, 4
    7ec4:	2a404e24 	bcs	101b75c <__ccfg+0xffb7b4>
    7ec8:	0902864e 	stmdbeq	r2, {r1, r2, r3, r6, r9, sl, pc}
    7ecc:	00010100 	andeq	r0, r1, r0, lsl #2
    7ed0:	00000205 	andeq	r0, r0, r5, lsl #4
    7ed4:	e5030000 	str	r0, [r3, #-0]
    7ed8:	0c030103 	stfeqs	f0, [r3], {3}
    7edc:	30282f20 	eorcc	r2, r8, r0, lsr #30
    7ee0:	2d302d5a 	ldccs	13, cr2, [r0, #-360]!	; 0xfffffe98
    7ee4:	24211f32 	strtcs	r1, [r1], #-3890	; 0xfffff0ce
    7ee8:	322c2f2b 	eorcc	r2, ip, #43, 30	; 0xac
    7eec:	34302f24 	ldrtcc	r2, [r0], #-3876	; 0xfffff0dc
    7ef0:	1e224b2f 	vmulne.f64	d4, d2, d31
    7ef4:	000c023e 	andeq	r0, ip, lr, lsr r2
    7ef8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7efc:	003ef002 	eorseq	pc, lr, r2
    7f00:	04a60300 	strteq	r0, [r6], #768	; 0x300
    7f04:	483f1301 	ldmdami	pc!, {r0, r8, r9, ip}	; <UNPREDICTABLE>
    7f08:	00040226 	andeq	r0, r4, r6, lsr #4
    7f0c:	022b0101 	eoreq	r0, fp, #1073741824	; 0x40000000
    7f10:	00020000 	andeq	r0, r2, r0
    7f14:	00000143 	andeq	r0, r0, r3, asr #2
    7f18:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    7f1c:	0101000d 	tsteq	r1, sp
    7f20:	00000101 	andeq	r0, r0, r1, lsl #2
    7f24:	00000100 	andeq	r0, r0, r0, lsl #2
    7f28:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    7f2c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7f30:	2f2e2e2f 	svccs	0x002e2e2f
    7f34:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    7f38:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    7f3c:	3a630062 	bcc	18c80cc <__ccfg+0x18a8124>
    7f40:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    7f44:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    7f48:	302e322e 	eorcc	r3, lr, lr, lsr #4
    7f4c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7f50:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    7f54:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7f58:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    7f5c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7f60:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7f64:	6f6f745c 	svcvs	0x006f745c
    7f68:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    7f6c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7f70:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    7f74:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7f78:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7f7c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7f80:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7f84:	5f342d69 	svcpl	0x00342d69
    7f88:	30322d39 	eorscc	r2, r2, r9, lsr sp
    7f8c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7f90:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    7f94:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7f98:	61652d65 	cmnvs	r5, r5, ror #26
    7f9c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7fa0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7fa4:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    7fa8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    7fac:	6300656e 	movwvs	r6, #1390	; 0x56e
    7fb0:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    7fb4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7fb8:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    7fbc:	30302e30 	eorscc	r2, r0, r0, lsr lr
    7fc0:	5f393130 	svcpl	0x00393130
    7fc4:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    7fc8:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7fcc:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    7fd0:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    7fd4:	6f745c36 	svcvs	0x00745c36
    7fd8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    7fdc:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    7fe0:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    7fe4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7fe8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    7fec:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7ff0:	61652d65 	cmnvs	r5, r5, ror #26
    7ff4:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    7ff8:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    7ffc:	71353130 	teqvc	r5, r0, lsr r1
    8000:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    8004:	6f6e2d6d 	svcvs	0x006e2d6d
    8008:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    800c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    8010:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8014:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    8018:	00737973 	rsbseq	r7, r3, r3, ror r9
    801c:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    8020:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    8024:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    8028:	63000001 	movwvs	r0, #1
    802c:	69706968 	ldmdbvs	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    8030:	2e6f666e 	cdpcs	6, 6, cr6, cr15, cr14, {3}
    8034:	00010068 	andeq	r0, r1, r8, rrx
    8038:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    803c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    8040:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    8044:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    8048:	00020068 	andeq	r0, r2, r8, rrx
    804c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    8050:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    8054:	0300682e 	movweq	r6, #2094	; 0x82e
    8058:	00000000 	andeq	r0, r0, r0
    805c:	00000205 	andeq	r0, r0, r5, lsl #4
    8060:	c4030000 	strgt	r0, [r3], #-0
    8064:	2f130100 	svccs	0x00130100
    8068:	01000602 	tsteq	r0, r2, lsl #12
    806c:	02050001 	andeq	r0, r5, #1
    8070:	00000000 	andeq	r0, r0, r0
    8074:	0100d003 	tsteq	r0, r3
    8078:	0a032f14 	beq	d3cd0 <__ccfg+0xb3d28>
    807c:	0008022e 	andeq	r0, r8, lr, lsr #4
    8080:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8084:	003f0802 	eorseq	r0, pc, r2, lsl #16
    8088:	00e60300 	rsceq	r0, r6, r0, lsl #6
    808c:	4e2a1a01 	vmulmi.f32	s2, s20, s2
    8090:	9b030204 	blls	c88a8 <__ccfg+0xa8900>
    8094:	01042e01 	tsteq	r4, r1, lsl #28
    8098:	2e7ee603 	cdpcs	6, 7, cr14, cr14, cr3, {0}
    809c:	4b4b4c23 	blmi	12db130 <__ccfg+0x12bb188>
    80a0:	02242f72 	eoreq	r2, r4, #456	; 0x1c8
    80a4:	01010005 	tsteq	r1, r5
    80a8:	00020500 	andeq	r0, r2, r0, lsl #10
    80ac:	03000000 	movweq	r0, #0
    80b0:	04010183 	streq	r0, [r1], #-387	; 0xfffffe7d
    80b4:	01b00302 	lslseq	r0, r2, #6
    80b8:	03010420 	movweq	r0, #5152	; 0x1420
    80bc:	392e7ed6 	stmdbcc	lr!, {r1, r2, r4, r6, r7, r9, sl, fp, ip, sp, lr}
    80c0:	78032331 	stmdavc	r3, {r0, r4, r5, r8, r9, sp}
    80c4:	4a0a033c 	bmi	288dbc <__ccfg+0x268e14>
    80c8:	252e0903 	strcs	r0, [lr, #-2307]!	; 0xfffff6fd
    80cc:	01000502 	tsteq	r0, r2, lsl #10
    80d0:	02050001 	andeq	r0, r5, #1
    80d4:	00003f54 	andeq	r3, r0, r4, asr pc
    80d8:	0101a603 	tsteq	r1, r3, lsl #12
    80dc:	e3030204 	movw	r0, #12804	; 0x3204
    80e0:	11032000 	mrsne	r2, (UNDEF: 3)
    80e4:	3c6f032e 	stclcc	3, cr0, [pc], #-184	; 8034 <__exidx_end+0x32e0>
    80e8:	25201103 	strcs	r1, [r0, #-259]!	; 0xfffffefd
    80ec:	8c030104 	stfhis	f0, [r3], {4}
    80f0:	95923c7f 	ldrls	r3, [r2, #3199]	; 0xc7f
    80f4:	22212221 	eorcs	r2, r1, #268435458	; 0x10000002
    80f8:	03394141 	teqeq	r9, #1073741840	; 0x40000010
    80fc:	03272e09 			; <UNDEFINED> instruction: 0x03272e09
    8100:	03212e73 			; <UNDEFINED> instruction: 0x03212e73
    8104:	30032064 	andcc	r2, r3, r4, rrx
    8108:	00040220 	andeq	r0, r4, r0, lsr #4
    810c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8110:	003fc002 	eorseq	ip, pc, r2
    8114:	01e00300 	mvneq	r0, r0, lsl #6
    8118:	03020401 	movweq	r0, #9217	; 0x2401
    811c:	042001a4 	strteq	r0, [r0], #-420	; 0xfffffe5c
    8120:	7edd0301 	cdpvc	3, 13, cr0, cr13, cr1, {0}
    8124:	0302042e 	movweq	r0, #9262	; 0x242e
    8128:	042e0290 	strteq	r0, [lr], #-656	; 0xfffffd70
    812c:	7df00301 	ldclvc	3, cr0, [r0, #4]!
    8130:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    8134:	2e090301 	cdpcs	3, 0, cr0, cr9, cr1, {0}
    8138:	01000202 	tsteq	r0, r2, lsl #4
    813c:	00021e01 	andeq	r1, r2, r1, lsl #28
    8140:	42000200 	andmi	r0, r0, #0, 4
    8144:	02000001 	andeq	r0, r0, #1
    8148:	0d0efb01 	vstreq	d15, [lr, #-4]
    814c:	01010100 	mrseq	r0, (UNDEF: 17)
    8150:	00000001 	andeq	r0, r0, r1
    8154:	01000001 	tsteq	r0, r1
    8158:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    815c:	2f2e2e2f 	svccs	0x002e2e2f
    8160:	642f2e2e 	strtvs	r2, [pc], #-3630	; 8168 <__exidx_end+0x3414>
    8164:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    8168:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    816c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    8170:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    8174:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    8178:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    817c:	31303030 	teqcc	r0, r0, lsr r0
    8180:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    8184:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    8188:	61746562 	cmnvs	r4, r2, ror #10
    818c:	63635c32 	cmnvs	r3, #12800	; 0x3200
    8190:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    8194:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7fcc <__exidx_end+0x3278>
    8198:	6f635c73 	svcvs	0x00635c73
    819c:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    81a0:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    81a4:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    81a8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    81ac:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    81b0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    81b4:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    81b8:	3130322d 	teqcc	r0, sp, lsr #4
    81bc:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    81c0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    81c4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    81c8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    81cc:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    81d0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    81d4:	616d5c65 	cmnvs	sp, r5, ror #24
    81d8:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    81dc:	3a630065 	bcc	18c8378 <__ccfg+0x18a83d0>
    81e0:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    81e4:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    81e8:	302e322e 	eorcc	r3, lr, lr, lsr #4
    81ec:	3030302e 	eorscc	r3, r0, lr, lsr #32
    81f0:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    81f4:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    81f8:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    81fc:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    8200:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    8204:	6f6f745c 	svcvs	0x006f745c
    8208:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    820c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    8210:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    8214:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    8218:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    821c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8220:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8224:	5f342d69 	svcpl	0x00342d69
    8228:	30322d39 	eorscc	r2, r2, r9, lsr sp
    822c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    8230:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    8234:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8238:	61652d65 	cmnvs	r5, r5, ror #26
    823c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    8240:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8244:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    8248:	00007379 	andeq	r7, r0, r9, ror r3
    824c:	2e696464 	cdpcs	4, 6, cr6, cr9, cr4, {3}
    8250:	00010068 	andeq	r0, r1, r8, rrx
    8254:	69646400 	stmdbvs	r4!, {sl, sp, lr}^
    8258:	0100632e 	tsteq	r0, lr, lsr #6
    825c:	645f0000 	ldrbvs	r0, [pc], #-0	; 8264 <__exidx_end+0x3510>
    8260:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    8264:	745f746c 	ldrbvc	r7, [pc], #-1132	; 826c <__exidx_end+0x3518>
    8268:	73657079 	cmnvc	r5, #121	; 0x79
    826c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    8270:	735f0000 	cmpvc	pc, #0
    8274:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    8278:	00682e74 	rsbeq	r2, r8, r4, ror lr
    827c:	63000003 	movwvs	r0, #3
    8280:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    8284:	00000100 	andeq	r0, r0, r0, lsl #2
    8288:	02050000 	andeq	r0, r5, #0
    828c:	00003fd8 	ldrdeq	r3, [r0], -r8
    8290:	01018803 	tsteq	r1, r3, lsl #16
    8294:	50303120 	eorspl	r3, r0, r0, lsr #2
    8298:	2322221e 			; <UNDEFINED> instruction: 0x2322221e
    829c:	0005022c 	andeq	r0, r5, ip, lsr #4
    82a0:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    82a4:	00020500 	andeq	r0, r2, r0, lsl #10
    82a8:	03000040 	movweq	r0, #64	; 0x40
    82ac:	030100c3 	movweq	r0, #4291	; 0x10c3
    82b0:	0402010a 	streq	r0, [r2], #-266	; 0xfffffef6
    82b4:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    82b8:	02050002 	andeq	r0, r5, #2
    82bc:	00000000 	andeq	r0, r0, r0
    82c0:	0100d803 	tsteq	r0, r3, lsl #16
    82c4:	33010e03 	movwcc	r0, #7683	; 0x1e03
    82c8:	2e780323 	cdpcs	3, 7, cr0, cr8, cr3, {1}
    82cc:	024f3535 	subeq	r3, pc, #222298112	; 0xd400000
    82d0:	01010004 	tsteq	r1, r4
    82d4:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    82d8:	00000002 	andeq	r0, r0, r2
    82dc:	01850300 	orreq	r0, r5, r0, lsl #6
    82e0:	20110301 	andscs	r0, r1, r1, lsl #6
    82e4:	03206f03 			; <UNDEFINED> instruction: 0x03206f03
    82e8:	79032e13 	stmdbvc	r3, {r0, r1, r4, r9, sl, fp, sp}
    82ec:	2e09032e 	cdpcs	3, 0, cr0, cr9, cr14, {1}
    82f0:	2e710334 	mrccs	3, 3, r0, cr1, cr4, {1}
    82f4:	2e0c0344 	cdpcs	3, 0, cr0, cr12, cr4, {2}
    82f8:	02022d2f 	andeq	r2, r2, #3008	; 0xbc0
    82fc:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    8300:	02050002 	andeq	r0, r5, #2
    8304:	00000000 	andeq	r0, r0, r0
    8308:	0101af03 	tsteq	r1, r3, lsl #30
    830c:	1b201103 	blne	80c720 <__ccfg+0x7ec778>
    8310:	032e7403 			; <UNDEFINED> instruction: 0x032e7403
    8314:	042f2013 	strteq	r2, [pc], #-19	; 831c <__exidx_end+0x35c8>
    8318:	20690301 	rsbcs	r0, r9, r1, lsl #6
    831c:	1d234d30 	stcne	13, cr4, [r3, #-192]!	; 0xffffff40
    8320:	04212223 	strteq	r2, [r1], #-547	; 0xfffffddd
    8324:	2e1d0302 	cdpcs	3, 1, cr0, cr13, cr2, {0}
    8328:	01000502 	tsteq	r0, r2, lsl #10
    832c:	00020401 	andeq	r0, r2, r1, lsl #8
    8330:	00000205 	andeq	r0, r0, r5, lsl #4
    8334:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    8338:	11030101 	tstne	r3, r1, lsl #2
    833c:	74031b20 	strvc	r1, [r3], #-2848	; 0xfffff4e0
    8340:	2e14032e 	cdpcs	3, 1, cr0, cr4, cr14, {1}
    8344:	0104302d 	tsteq	r4, sp, lsr #32
    8348:	207fb903 	rsbscs	fp, pc, r3, lsl #18
    834c:	1d234d30 	stcne	13, cr4, [r3, #-192]!	; 0xffffff40
    8350:	04212223 	strteq	r2, [r1], #-547	; 0xfffffddd
    8354:	00c80302 	sbceq	r0, r8, r2, lsl #6
    8358:	0502422e 	streq	r4, [r2, #-558]	; 0xfffffdd2
    835c:	43010100 	movwmi	r0, #4352	; 0x1100
    8360:	03000002 	movweq	r0, #2
    8364:	00019500 	andeq	r9, r1, r0, lsl #10
    8368:	fb010200 	blx	48b72 <__ccfg+0x28bca>
    836c:	01000d0e 	tsteq	r0, lr, lsl #26
    8370:	00010101 	andeq	r0, r1, r1, lsl #2
    8374:	00010000 	andeq	r0, r1, r0
    8378:	2e2e0100 	sufcse	f0, f6, f0
    837c:	2f2e2e2f 	svccs	0x002e2e2f
    8380:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8384:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8388:	2f2e2e2f 	svccs	0x002e2e2f
    838c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8390:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    8394:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8398:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    839c:	616d2f63 	cmnvs	sp, r3, ror #30
    83a0:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    83a4:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    83a8:	2e2e2f6d 	cdpcs	15, 2, cr2, cr14, cr13, {3}
    83ac:	2f2e2e2f 	svccs	0x002e2e2f
    83b0:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    83b4:	2f00676e 	svccs	0x0000676e
    83b8:	2f727375 	svccs	0x00727375
    83bc:	2f62696c 	svccs	0x0062696c
    83c0:	2f636367 	svccs	0x00636367
    83c4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    83c8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    83cc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    83d0:	2e382f69 	cdpcs	15, 3, cr2, cr8, cr9, {3}
    83d4:	2f312e33 	svccs	0x00312e33
    83d8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    83dc:	00656475 	rsbeq	r6, r5, r5, ror r4
    83e0:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    83e4:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    83e8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    83ec:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    83f0:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    83f4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    83f8:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    83fc:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    8400:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    8404:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8408:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    840c:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    8410:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    8414:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    8418:	622f0073 	eorvs	r0, pc, #115	; 0x73
    841c:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    8420:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8424:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    8428:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    842c:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    8430:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8434:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    8438:	2f302e33 	svccs	0x00302e33
    843c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8440:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 82a4 <__exidx_end+0x3550>
    8444:	2f636269 	svccs	0x00636269
    8448:	61636f6c 	cmnvs	r3, ip, ror #30
    844c:	2f00656c 	svccs	0x0000656c
    8450:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    8454:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    8458:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    845c:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    8460:	2f787945 	svccs	0x00787945
    8464:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8468:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    846c:	302e332e 	eorcc	r3, lr, lr, lsr #6
    8470:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8474:	2f62696c 	svccs	0x0062696c
    8478:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    847c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    8480:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8484:	656d0000 	strbvs	r0, [sp, #-0]!
    8488:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
    848c:	0100632e 	tsteq	r0, lr, lsr #6
    8490:	74730000 	ldrbtvc	r0, [r3], #-0
    8494:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    8498:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    849c:	745f0000 	ldrbvc	r0, [pc], #-0	; 84a4 <__exidx_end+0x3750>
    84a0:	73657079 	cmnvc	r5, #121	; 0x79
    84a4:	0300682e 	movweq	r6, #2094	; 0x82e
    84a8:	65720000 	ldrbvs	r0, [r2, #-0]!
    84ac:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    84b0:	00030068 	andeq	r0, r3, r8, rrx
    84b4:	636f6c00 	cmnvs	pc, #0, 24
    84b8:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    84bc:	73000003 	movwvc	r0, #3
    84c0:	6f6c7465 	svcvs	0x006c7465
    84c4:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    84c8:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    84cc:	74730000 	ldrbtvc	r0, [r3], #-0
    84d0:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    84d4:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    84d8:	63770000 	cmnvs	r7, #0
    84dc:	2e726168 	rpwcssz	f6, f2, #0.0
    84e0:	00050068 	andeq	r0, r5, r8, rrx
    84e4:	636f6c00 	cmnvs	pc, #0, 24
    84e8:	2e656c61 	cdpcs	12, 6, cr6, cr5, cr1, {3}
    84ec:	00050068 	andeq	r0, r5, r8, rrx
    84f0:	72747300 	rsbsvc	r7, r4, #0, 6
    84f4:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    84f8:	00050068 	andeq	r0, r5, r8, rrx
    84fc:	01050000 	mrseq	r0, (UNDEF: 5)
    8500:	08020500 	stmdaeq	r2, {r8, sl}
    8504:	03000040 	movweq	r0, #64	; 0x40
    8508:	03050133 	movweq	r0, #20787	; 0x5133
    850c:	13010e03 	movwne	r0, #7683	; 0x1e03
    8510:	05161313 	ldreq	r1, [r6, #-787]	; 0xfffffced
    8514:	6b030601 	blvs	c9d20 <__ccfg+0xa9d78>
    8518:	03060501 	movweq	r0, #25857	; 0x6501
    851c:	1c053c15 	stcne	12, cr3, [r5], {21}
    8520:	01040200 	mrseq	r0, R12_usr
    8524:	0018052e 	andseq	r0, r8, lr, lsr #10
    8528:	66010402 	strvs	r0, [r1], -r2, lsl #8
    852c:	01040200 	mrseq	r0, R12_usr
    8530:	060b059e 			; <UNDEFINED> instruction: 0x060b059e
    8534:	061a0528 	ldreq	r0, [sl], -r8, lsr #10
    8538:	05393013 	ldreq	r3, [r9, #-19]!	; 0xffffffed
    853c:	132f060b 			; <UNDEFINED> instruction: 0x132f060b
    8540:	01061a05 	tsteq	r6, r5, lsl #20
    8544:	3d060b05 	vstrcc	d0, [r6, #-20]	; 0xffffffec
    8548:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    854c:	207a030d 	rsbscs	r0, sl, sp, lsl #6
    8550:	204a0a03 	subcs	r0, sl, r3, lsl #20
    8554:	0520203c 	streq	r2, [r0, #-60]!	; 0xffffffc4
    8558:	0530060b 	ldreq	r0, [r0, #-1547]!	; 0xfffff9f5
    855c:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    8560:	062f060b 	strteq	r0, [pc], -fp, lsl #12
    8564:	1d0d0501 	cfstr32ne	mvfx0, [sp, #-4]
    8568:	05204a58 	streq	r4, [r0, #-2648]!	; 0xfffff5a8
    856c:	200b030e 	andcs	r0, fp, lr, lsl #6
    8570:	03200905 			; <UNDEFINED> instruction: 0x03200905
    8574:	052e2e5e 	streq	r2, [lr, #-3678]!	; 0xfffff1a2
    8578:	23030605 	movwcs	r0, #13829	; 0x3605
    857c:	060c0520 	streq	r0, [ip], -r0, lsr #10
    8580:	3b090501 	blcc	24998c <__ccfg+0x2299e4>
    8584:	05330105 	ldreq	r0, [r3, #-261]!	; 0xfffffefb
    8588:	58590309 	ldmdapl	r9, {r0, r3, r8, r9}^
    858c:	22030e05 	andcs	r0, r3, #5, 28	; 0x50
    8590:	20090520 	andcs	r0, r9, r0, lsr #10
    8594:	053c0e05 	ldreq	r0, [ip, #-3589]!	; 0xfffff1fb
    8598:	205e0309 	subscs	r0, lr, r9, lsl #6
    859c:	17030d05 	strne	r0, [r3, -r5, lsl #26]
    85a0:	0002022e 	andeq	r0, r2, lr, lsr #4
    85a4:	Address 0x00000000000085a4 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
       4:	5f62616c 	svcpl	0x0062616c
}
       8:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
       c:	74696d73 	strbtvc	r6, [r9], #-3443	; 0xfffff28d
      10:	705f5f00 	subsvc	r5, pc, r0, lsl #30
      14:	696d5f69 	stmdbvs	sp!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
      18:	006b746e 	rsbeq	r7, fp, lr, ror #8
      1c:	65676465 	strbvs	r6, [r7, #-1125]!	; 0xfffffb9b
      20:	705f5f00 	subsvc	r5, pc, r0, lsl #30
      24:	61755f69 	cmnvs	r5, r9, ror #30
      28:	72007472 	andvc	r7, r0, #1912602624	; 0x72000000
      2c:	64707165 	ldrbtvs	r7, [r0], #-357	; 0xfffffe9b
      30:	5f5f006d 	svcpl	0x005f006d
      34:	616c7473 	smcvs	51011	; 0xc743
      38:	72425f62 	subvc	r5, r2, #392	; 0x188
      3c:	6364616f 	cmnvs	r4, #-1073741797	; 0xc000001b
			i = k;
      40:	5f747361 	svcpl	0x00747361
				j->Next = k;
      44:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
      48:	73696d73 	cmnvc	r9, #7360	; 0x1cc0
}
      4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
      50:	71657300 	cmnvc	r5, r0, lsl #6
      54:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
		release;
      58:	6d754e65 	ldclvs	14, cr4, [r5, #-404]!	; 0xfffffe6c
      5c:	00726562 	rsbseq	r6, r2, r2, ror #10
			nq++;
      60:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	5f62616c 	svcpl	0x0062616c
      68:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
      6c:	495f6567 	ldmdbmi	pc, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
      70:	66650044 	strbtvs	r0, [r5], -r4, asr #32
      74:	6d647066 	stclvs	0, cr7, [r4, #-408]!	; 0xfffffe68
      78:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
      7c:	6f6c2067 	svcvs	0x006c2067
      80:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
      84:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
      88:	2064656e 	rsbcs	r6, r4, lr, ror #10
      8c:	00746e69 	rsbseq	r6, r4, r9, ror #28
	if (!button_still_pressed (__button_list [pbutton]))
      90:	61567369 	cmpvs	r6, r9, ror #6
      94:	4e64696c 	vnmulmi.f16	s13, s8, s25	; <UNPREDICTABLE>
      98:	4965646f 	stmdbmi	r5!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
	if (baction == NULL)
      9c:	76650064 	strbtvc	r0, [r5], -r4, rrx
      a0:	6e70746e 	cdpvs	4, 7, cr7, cr0, cr14, {3}
	(*baction) (pbutton);
      a4:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
endthread
      a8:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	6c00745f 	cfstrsvs	mvf7, [r0], {95}	; 0x5f
      b0:	20676e6f 	rsbcs	r6, r7, pc, ror #28
endthread
      b4:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
      b8:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
      bc:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
      c0:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
      c4:	656d006f 	strbvs	r0, [sp, #-111]!	; 0xffffff91
fsm receiver {
      c8:	6554756e 	ldrbvs	r7, [r4, #-1390]	; 0xfffffa92
      cc:	73007478 	movwvc	r7, #1144	; 0x478
      d0:	00746b70 	rsbseq	r6, r4, r0, ror fp
      d4:	43505f5f 	cmpmi	r0, #380	; 0x17c
        packet = tcv_rnp(Receiving, sfd);
      d8:	5f5f0042 	svcpl	0x005f0042
      dc:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
      e0:	5f5f0074 	svcpl	0x005f0074
      e4:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
        receivedMessage = (message *)(packet + 1);
      e8:	00747369 	rsbseq	r7, r4, r9, ror #6
      ec:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
        if(receivedMessage->receiverId == nodeId) {
      f0:	5f62616c 	svcpl	0x0062616c
      f4:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; ffffffe4 <_estack+0xdfffafe4>
      f8:	7269445f 	rsbvc	r4, r9, #1593835520	; 0x5f000000
            proceed From_Broadcast;
      fc:	00746365 	rsbseq	r6, r4, r5, ror #6
        proceed Receiving;
     100:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     104:	5f62616c 	svcpl	0x0062616c
        ser_outf(Get_Message, "Message ");
     108:	5f746547 	svcpl	0x00746547
     10c:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
        proceed Show_Message;
     110:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
        ser_outf(From_Broadcast, "Broadcast ");
     114:	646f4e5f 	strbtvs	r4, [pc], #-3679	; 11c <_Min_Stack_Size+0x1c>
     118:	5f5f0065 	svcpl	0x005f0065
        ser_outf(Show_Message, "from node %d (Seq %d): %s\n\r", receivedMessage->senderId, receivedMessage->sequenceNumber, receivedMessage->payload);
     11c:	616c7473 	smcvs	51011	; 0xc743
     120:	654d5f62 	strbvs	r5, [sp, #-3938]	; 0xfffff09e
     124:	535f756e 	cmppl	pc, #461373440	; 0x1b800000
     128:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     12c:	646f6e00 	strbtvs	r6, [pc], #-3584	; 134 <_Min_Stack_Size+0x34>
        tcv_endp(packet);
     130:	00644965 	rsbeq	r4, r4, r5, ror #18
     134:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
        proceed Receiving;
     138:	655f6d65 	ldrbvs	r6, [pc, #-3429]	; fffff3db <_estack+0xdfffa3db>
}
     13c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
        proceed Receiving;
     140:	756f635f 	strbvc	r6, [pc, #-863]!	; fffffde9 <_estack+0xdfffade9>
        } else if (receivedMessage->receiverId == '0' || receivedMessage->receiverId == 0) {
     144:	7400746e 	strvc	r7, [r0], #-1134	; 0xfffffb92
     148:	635f7663 	cmpvs	pc, #103809024	; 0x6300000
            proceed From_Broadcast;
     14c:	6f006f6c 	svcvs	0x00006f6c
}
     150:	6e6d646e 	cdpvs	4, 6, cr6, cr13, cr14, {3}
     154:	65720073 	ldrbvs	r0, [r2, #-115]!	; 0xffffff8d
     158:	76696563 	strbtvc	r6, [r9], -r3, ror #10
     15c:	654d6465 	strbvs	r6, [sp, #-1125]	; 0xfffffb9b
     160:	67617373 			; <UNDEFINED> instruction: 0x67617373
     164:	5f5f0065 	svcpl	0x005f0065
     168:	616c7473 	smcvs	51011	; 0xc743
     16c:	65475f62 	strbvs	r5, [r7, #-3938]	; 0xfffff09e
     170:	654e5f74 	strbvs	r5, [lr, #-3956]	; 0xfffff08c
     174:	44495f77 	strbmi	r5, [r9], #-3959	; 0xfffff089
fsm transmitter (message * messagePtr) {
     178:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     17c:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
     180:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
}
     184:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
     188:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
     18c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
     190:	31393130 	teqcc	r9, r0, lsr r1
     194:	20353230 	eorscs	r3, r5, r0, lsr r2
     198:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
     19c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
        *p = messagePtr->senderId; p++;
     1a0:	415b2029 	cmpmi	fp, r9, lsr #32
     1a4:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
        strcpy(p, messagePtr->payload);
     1a8:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
        *p = messagePtr->receiverId; p++;
     1ac:	6172622d 	cmnvs	r2, sp, lsr #4
        *p = messagePtr->sequenceNumber; p++;
     1b0:	2068636e 	rsbcs	r6, r8, lr, ror #6
        strcpy(p, messagePtr->payload);
     1b4:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
        tcv_endp (spkt);
     1b8:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
     1bc:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
        sequence++;
     1c0:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
     1c4:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
        ser_outf(Transmit_Message, "Message Sent\n\r");
     1c8:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
     1cc:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
}
     1d0:	336d2d78 	cmncc	sp, #120, 26	; 0x1e00
        finish;
     1d4:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
     1d8:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     1dc:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
     1e0:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
     1e4:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
fsm root {
     1e8:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
     1ec:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
     1f0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     1f4:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
     1f8:	6d2d3776 	stcvs	7, cr3, [sp, #-472]!	; 0xfffffe28
     1fc:	20672d20 	rsbcs	r2, r7, r0, lsr #26
        nodeId = 1;
     200:	7764672d 	strbvc	r6, [r4, -sp, lsr #14]!
     204:	2d667261 	sfmcs	f7, 2, [r6, #-388]!	; 0xfffffe7c
     208:	672d2033 			; <UNDEFINED> instruction: 0x672d2033
        sfd = tcv_open(WNONE, 0, 0);
     20c:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
        messagePtr = (message *) umalloc(sizeof(message));
     210:	642d7463 	strtvs	r7, [sp], #-1123	; 0xfffffb9d
     214:	66726177 			; <UNDEFINED> instruction: 0x66726177
     218:	734f2d20 	movtvc	r2, #64800	; 0xfd20
        phys_cc1350(0, MAX_PACKET_LENGTH);
     21c:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
        tcv_plug(0, &plug_null);
     220:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
     224:	662d2039 			; <UNDEFINED> instruction: 0x662d2039
        sfd = tcv_open(WNONE, 0, 0);
     228:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     22c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     230:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
		tcv_control(sfd, PHYSOPT_ON, NULL);
     234:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
        sfd = tcv_open(WNONE, 0, 0);
     238:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
		tcv_control(sfd, PHYSOPT_ON, NULL);
     23c:	61746164 	cmnvs	r4, r4, ror #2
		if (sfd < 0) {
     240:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
			diag("Cannot open tcv interface");
     244:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     248:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
			halt();
     24c:	732d6f6e 			; <UNDEFINED> instruction: 0x732d6f6e
        runfsm receiver;
     250:	63697274 	cmnvs	r9, #116, 4	; 0x40000007
     254:	6c612d74 	stclvs	13, cr2, [r1], #-464	; 0xfffffe30
        receiverId = 0;
     258:	69736169 	ldmdbvs	r3!, {r0, r3, r5, r6, r8, sp, lr}^
     25c:	2d20676e 	stccs	7, cr6, [r0, #-440]!	; 0xfffffe48
        ser_outf(Menu_Start, "P2P Chat (Node #%d)\n\r", nodeId);
     260:	6d736166 	ldfvse	f6, [r3, #-408]!	; 0xfffffe68
     264:	6d662d20 	stclvs	13, cr2, [r6, #-128]!	; 0xffffff80
        ser_outf(Menu_Choices, menuText);
     268:	652d7861 	strvs	r7, [sp, #-2145]!	; 0xfffff79f
     26c:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
        ser_inf(Choice, "%c", &choice);
     270:	30313d73 	eorscc	r3, r1, r3, ror sp
     274:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     278:	76655f69 	strbtvc	r5, [r5], -r9, ror #30
        switch (choice)
     27c:	5f746e65 	svcpl	0x00746e65
     280:	63740074 	cmnvs	r4, #116	; 0x74
     284:	6d745f76 	ldclvs	15, cr5, [r4, #-472]!	; 0xfffffe28
     288:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
     28c:	2074726f 	rsbscs	r7, r4, pc, ror #4
     290:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
                proceed Menu_Start;
     294:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     298:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     29c:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
                proceed Direct_Transmission;
     2a0:	5f646f69 	svcpl	0x00646f69
                proceed Menu_Start;
     2a4:	5f5f0074 	svcpl	0x005f0074
        ser_outf(Change_ID, "New node ID (1-25):");
     2a8:	616c7473 	smcvs	51011	; 0xc743
     2ac:	72545f62 	subsvc	r5, r4, #392	; 0x188
        ser_inf(Get_New_ID, "%d", &nodeId);
     2b0:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
     2b4:	4d5f7469 	cfldrdmi	mvd7, [pc, #-420]	; 118 <_Min_Stack_Size+0x18>
     2b8:	61737365 	cmnvs	r3, r5, ror #6
    if (node < 1 || node > 25) {
     2bc:	66006567 	strvs	r6, [r0], -r7, ror #10
     2c0:	6c627473 	cfstrdvs	mvd7, [r2], #-460	; 0xfffffe34
            proceed Change_ID;
     2c4:	5f5f006b 	svcpl	0x005f006b
     2c8:	616c7473 	smcvs	51011	; 0xc743
        proceed Menu_Start;
     2cc:	6e495f62 	cdpvs	15, 4, cr5, cr9, cr2, {3}
        ser_outf(Direct_Transmission, "Receiver node ID (1-25):");
     2d0:	61697469 	cmnvs	r9, r9, ror #8
     2d4:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     2d8:	71657300 	cmnvc	r5, r0, lsl #6
     2dc:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
     2e0:	6f6e0065 	svcvs	0x006e0065
    if (node < 1 || node > 25) {
     2e4:	74006564 	strvc	r6, [r0], #-1380	; 0xfffffa9c
     2e8:	725f7663 	subsvc	r7, pc, #103809024	; 0x6300000
            proceed Direct_Transmission;
     2ec:	61007663 	tstvs	r0, r3, ror #12
     2f0:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
        ser_outf(Broadcast_Transmission, "Message: ");
     2f4:	735f5f00 	cmpvc	pc, #0, 30
     2f8:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
        ser_in(Get_Message, messagePtr->payload, PAYLOAD_LENGTH);
     2fc:	6f72465f 	svcvs	0x0072465f
     300:	72425f6d 	subvc	r5, r2, #436	; 0x1b4
     304:	6364616f 	cmnvs	r4, #-1073741797	; 0xc000001b
        if(strlen(messagePtr->payload) > PAYLOAD_LENGTH) {
     308:	00747361 	rsbseq	r7, r4, r1, ror #6
     30c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     310:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
            messagePtr->payload[PAYLOAD_LENGTH - 1] = '/0';
     314:	00746174 	rsbseq	r6, r4, r4, ror r1
     318:	6f6d6470 	svcvs	0x006d6470
        call transmitter(messagePtr, Menu_Start);
     31c:	5f006564 	svcpl	0x00006564
        messagePtr->senderId = nodeId;
     320:	5f69705f 	svcpl	0x0069705f
     324:	00646c6f 	rsbeq	r6, r4, pc, ror #24
        messagePtr->receiverId = receiverId;
     328:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0xfffffab2
        messagePtr->sequenceNumber = sequence;
     32c:	6d695400 	cfstrdvs	mvd5, [r9, #-0]
     330:	5f007265 	svcpl	0x00007265
        call transmitter(messagePtr, Menu_Start);
     334:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     338:	475f6261 	ldrbmi	r6, [pc, -r1, ror #4]
     33c:	4d5f7465 	cfldrdmi	mvd7, [pc, #-404]	; 1b0 <transmitter+0x38>
     340:	61737365 	cmnvs	r3, r5, ror #6
                proceed Broadcast_Transmission;
     344:	74006567 	strvc	r6, [r0], #-1383	; 0xfffffa99
     348:	006c6961 	rsbeq	r6, ip, r1, ror #18
     34c:	504d544b 	subpl	r5, sp, fp, asr #8
     350:	7070612f 	rsbsvc	r6, r0, pc, lsr #2
     354:	5f00632e 	svcpl	0x0000632e
     358:	706e695f 	rsbvc	r6, lr, pc, asr r9
     35c:	705f7475 	subsvc	r7, pc, r5, ror r4	; <UNPREDICTABLE>
     360:	00736e69 	rsbseq	r6, r3, r9, ror #28
     364:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
     368:	00737365 	rsbseq	r7, r3, r5, ror #6
     36c:	6e675f5f 	mcrvs	15, 3, r5, cr7, cr15, {2}
     370:	765f6375 			; <UNDEFINED> instruction: 0x765f6375
     374:	696c5f61 	stmdbvs	ip!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
     378:	70007473 	andvc	r7, r0, r3, ror r4
     37c:	6f6c7961 	svcvs	0x006c7961
     380:	6d006461 	cfstrsvs	mvf6, [r0, #-388]	; 0xfffffe7c
     384:	61737365 	cmnvs	r3, r5, ror #6
     388:	74506567 	ldrbvc	r6, [r0], #-1383	; 0xfffffa99
     38c:	5f5f0072 	svcpl	0x005f0072
static void devinit_uart (int devnum) {
     390:	5f737362 	svcpl	0x00737362
	adddevfunc (ioreq_uart_a, devnum);
     394:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     398:	005f5f74 	subseq	r5, pc, r4, ror pc	; <UNPREDICTABLE>
void udelay (volatile word n) {
     39c:	5f766374 	svcpl	0x00766374
     3a0:	006d7266 	rsbeq	r7, sp, r6, ror #4
	while (n) {
     3a4:	73625f5f 	cmnvc	r2, #380	; 0x17c
     3a8:	6e655f73 	mcrvs	15, 3, r5, cr5, cr3, {3}
}
     3ac:	005f5f64 	subseq	r5, pc, r4, ror #30
	while (n--);
     3b0:	6b636170 	blvs	18d8978 <__ccfg+0x18b89d0>
     3b4:	5f007465 	svcpl	0x00007465
     3b8:	5f69705f 	svcpl	0x0069705f
		n--;
     3bc:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
     3c0:	736f6800 	cmnvc	pc, #0, 16
     3c4:	64695f74 	strbtvs	r5, [r9], #-3956	; 0xfffff08c
void mdelay (volatile word n) {
     3c8:	61727400 	cmnvs	r2, r0, lsl #8
     3cc:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
	while (n) {
     3d0:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
     3d4:	625f5f00 	subsvs	r5, pc, #0, 30
}
     3d8:	6f747475 	svcvs	0x00747475
		udelay (999);
     3dc:	696c5f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     3e0:	75007473 	strvc	r7, [r0, #-1139]	; 0xfffffb8d
		n--;
     3e4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     3e8:	2064656e 	rsbcs	r6, r4, lr, ror #10
     3ec:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     3f0:	735f5f00 	cmpvc	pc, #0, 30
void __pi_ondomain (lword d) {
     3f4:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     3f8:	6e654d5f 	mcrvs	13, 3, r4, cr5, cr15, {2}
		if (__pi_systat.effpdm > 1)
     3fc:	68435f75 	stmdavs	r3, {r0, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     400:	6563696f 	strbvs	r6, [r3, #-2415]!	; 0xfffff691
			__pi_systat.effpdm = 1;
     404:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
	PRCMPowerDomainOn (d);
     408:	2f656d6f 	svccs	0x00656d6f
     40c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
     410:	442f6e69 	strtmi	r6, [pc], #-3689	; 418 <__pi_ondomain+0x24>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     414:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     418:	4f2f706f 	svcmi	0x002f706f
     41c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
	__pi_systat.ondmns |= d;
     420:	502f5445 	eorpl	r5, pc, r5, asr #8
     424:	534f4349 	movtpl	r4, #62281	; 0xf349
}
     428:	504d432f 	subpl	r4, sp, pc, lsr #6
     42c:	34363454 	ldrtcc	r3, [r6], #-1108	; 0xfffffbac
void __pi_offdomain (lword d) {
     430:	62614c5f 	rsbvs	r4, r1, #24320	; 0x5f00
     434:	63740037 	cmnvs	r4, #55	; 0x37
	PRCMPowerDomainOff (d);
     438:	706f5f76 	rsbvc	r5, pc, r6, ror pc	; <UNPREDICTABLE>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     43c:	63740065 	cmnvs	r4, #101	; 0x65
     440:	6d785f76 	ldclvs	15, cr5, [r8, #-472]!	; 0xfffffe28
     444:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
	if (d & PRCM_DOMAIN_RFCORE) {
     448:	2074726f 	rsbscs	r7, r4, pc, ror #4
     44c:	00746e69 	rsbseq	r6, r4, r9, ror #28
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     450:	61766374 	cmnvs	r6, r4, ror r3
     454:	745f7064 	ldrbvc	r7, [pc], #-100	; 45c <__pi_offdomain+0x2c>
			__pi_systat.effpdm = __pi_systat.reqpdm;
     458:	735f5f00 	cmpvc	pc, #0, 30
     45c:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
	__pi_systat.ondmns &= ~d;
     460:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     464:	6d726966 			; <UNDEFINED> instruction: 0x6d726966
}
     468:	6172545f 	cmnvs	r2, pc, asr r4
     46c:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
void __pi_syserror (word ec, const char *m) {
     470:	6f697373 	svcvs	0x00697373
	diag ("SYSERR: %x, %s", ec, m);
     474:	656c006e 	strbvs	r0, [ip, #-110]!	; 0xffffff92
     478:	636c6264 	cmnvs	ip, #100, 4	; 0x40000006
  __ASM volatile ("cpsid i" : : : "memory");
     47c:	6f6f4200 	svcvs	0x006f4200
     480:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
     484:	64656c00 	strbtvs	r6, [r5], #-3072	; 0xfffff400
     488:	00737473 	rsbseq	r7, r3, r3, ror r4
		all_leds_blink;
     48c:	6264656c 	rsbvs	r6, r4, #108, 10	; 0x1b000000
     490:	75006b6c 	strvc	r6, [r0, #-2924]	; 0xfffff494
     494:	5f747261 	svcpl	0x00747261
     498:	65680074 	strbvs	r0, [r8, #-116]!	; 0xffffff8c
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     49c:	5f006461 	svcpl	0x00006461
     4a0:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     4a4:	435f6261 	cmpmi	pc, #268435462	; 0x10000006
     4a8:	63696f68 	cmnvs	r9, #104, 30	; 0x1a0
     4ac:	5f5f0065 	svcpl	0x005f0065
     4b0:	616c7473 	smcvs	51011	; 0xc743
	while (1) {
     4b4:	65525f62 	ldrbvs	r5, [r2, #-3938]	; 0xfffff09e
     4b8:	76696563 	strbtvc	r6, [r9], -r3, ror #10
     4bc:	00676e69 	rsbeq	r6, r7, r9, ror #28
     4c0:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
void tci_run_delay_timer () {
     4c4:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
	setdel = __pi_mintk - __pi_old;
     4c8:	63657200 	cmnvs	r5, #0, 4
     4cc:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
     4d0:	00644972 	rsbeq	r4, r4, r2, ror r9
     4d4:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4d8:	745f7461 	ldrbvc	r7, [pc], #-1121	; 4e0 <tci_run_delay_timer+0x1c>
     4dc:	65764500 	ldrbvs	r4, [r6, #-1280]!	; 0xfffffb00
     4e0:	0073746e 	rsbseq	r7, r3, lr, ror #8
     4e4:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     4e8:	7865685f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, fp, sp, lr}^
	sti_tim;
     4ec:	636e655f 	cmnvs	lr, #398458880	; 0x17c00000
}
     4f0:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
     4f4:	5f00656c 	svcpl	0x0000656c
     4f8:	0070615f 	rsbseq	r6, r0, pc, asr r1
     4fc:	696f6863 	stmdbvs	pc!, {r0, r1, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
     500:	72006563 	andvc	r6, r0, #415236096	; 0x18c00000
	cli_aux;
     504:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     508:	00726576 	rsbseq	r6, r2, r6, ror r5
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     50c:	6d756e70 	ldclvs	14, cr6, [r5, #-448]!	; 0xfffffe40
     510:	746e6500 	strbtvc	r6, [lr], #-1280	; 0xfffffb00
     514:	79706f72 	ldmdbvc	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     518:	756c7000 	strbvc	r7, [ip, #-0]!
	sti_aux;
     51c:	756e5f67 	strbvc	r5, [lr, #-3943]!	; 0xfffff099
}
     520:	5f006c6c 	svcpl	0x00006c6c
     524:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     528:	445f6261 	ldrbmi	r6, [pc], #-609	; 530 <AONRTCIntHandler+0x4>
void AONRTCIntHandler () {
     52c:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     530:	72545f74 	subsvc	r5, r4, #116, 30	; 0x1d0
     534:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     538:	69737369 	ldmdbvs	r3!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
		if (__pi_utims [0] == 0)
     53c:	73006e6f 	movwvc	r6, #3695	; 0xe6f
     540:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
		if (*(__pi_utims [0])) {
     544:	00644972 	rsbeq	r4, r4, r2, ror r9
     548:	636d7366 	cmnvs	sp, #-1744830463	; 0x98000001
			(*(__pi_utims [0]))--;
     54c:	0065646f 	rsbeq	r6, r5, pc, ror #8
		if (__pi_utims [1] == 0)
     550:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
		if (*(__pi_utims [1])) {
     554:	00656761 	rsbeq	r6, r5, r1, ror #14
			aux_timer_inactive = 0;
     558:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			(*(__pi_utims [1]))--;
     55c:	6263705f 	rsbvs	r7, r3, #95	; 0x5f
		if (__pi_utims [2] == 0)
     560:	5f00735f 	svcpl	0x0000735f
		if (*(__pi_utims [2])) {
     564:	5f69705f 	svcpl	0x0069705f
			(*(__pi_utims [2]))--;
     568:	5f626370 	svcpl	0x00626370
		if (__pi_utims [3] != 0) {
     56c:	5f5f0074 	svcpl	0x005f0074
			if (*(__pi_utims [3])) {
     570:	616c7473 	smcvs	51011	; 0xc743
				aux_timer_inactive = 0;
     574:	68535f62 	ldmdavs	r3, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
				(*(__pi_utims [3]))--;
     578:	4d5f776f 	ldclmi	7, cr7, [pc, #-444]	; 3c4 <udelay+0x28>
	if (__pi_systat.ledsts) {
     57c:	61737365 	cmnvs	r3, r5, ror #6
     580:	72006567 	andvc	r6, r0, #432013312	; 0x19c00000
		if (__pi_systat.ledblc++ == 0) {
     584:	00746f6f 	rsbseq	r6, r4, pc, ror #30
     588:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
			if (__pi_systat.ledblk) {
     58c:	50470074 	subpl	r0, r7, r4, ror r0
     590:	735f4f49 	cmpvc	pc, #292	; 0x124
     594:	754f7465 	strbvc	r7, [pc, #-1125]	; 137 <_Min_Stack_Size+0x37>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     598:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
     59c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
				if (__pi_systat.ledsts & 0x2)
     5a0:	6944656c 	stmdbvs	r4, {r2, r3, r5, r6, r8, sl, sp, lr}^
     5a4:	4f41006f 	svcmi	0x0041006f
     5a8:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
				if (__pi_systat.ledsts & 0x4)
     5ac:	456e6f4d 	strbmi	r6, [lr, #-3917]!	; 0xfffff0b3
				__pi_systat.ledblk = 0;
     5b0:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     5b4:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
			if (__pi_systat.fstblk)
     5b8:	6f4d3233 	svcvs	0x004d3233
     5bc:	5f006564 	svcpl	0x00006564
				__pi_systat.ledblc = 200;
     5c0:	5f69705f 	svcpl	0x0069705f
	if (events & AON_RTC_EVFLAGS_CH0) {
     5c4:	6466666f 	strbtvs	r6, [r6], #-1647	; 0xfffff991
		cli_tim;
     5c8:	69616d6f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
		__pi_new += setdel;
     5cc:	6567006e 	strbvs	r0, [r7, #-110]!	; 0xffffff92
     5d0:	76617474 			; <UNDEFINED> instruction: 0x76617474
		setdel = 0;
     5d4:	61727500 	cmnvs	r2, r0, lsl #10
		RISE_N_SHINE;
     5d8:	00736574 	rsbseq	r6, r3, r4, ror r5
		__pi_new += setdel;
     5dc:	6e655f5f 	mcrvs	15, 3, r5, cr5, cr15, {2}
		RISE_N_SHINE;
     5e0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     5e4:	7172695f 	cmnvc	r2, pc, asr r9
		aux_timer_inactive = 1;
     5e8:	65687700 	strbvs	r7, [r8, #-1792]!	; 0xfffff900
     5ec:	64006572 	strvs	r6, [r0], #-1394	; 0xfffffa8e
				if (__pi_systat.ledsts & 0x1)
     5f0:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     5f4:	75667469 	strbvc	r7, [r6, #-1129]!	; 0xfffffb97
     5f8:	00745f6e 	rsbseq	r5, r4, lr, ror #30
				if (__pi_systat.ledsts & 0x2)
     5fc:	574e4f41 	strbpl	r4, [lr, -r1, asr #30]
     600:	75414355 	strbvc	r4, [r1, #-853]	; 0xfffffcab
     604:	6b615778 	blvs	18563ec <__ccfg+0x1836444>
				if (__pi_systat.ledsts & 0x8)
     608:	45707565 	ldrbmi	r7, [r0, #-1381]!	; 0xfffffa9b
				__pi_systat.ledblk = 1;
     60c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
     610:	4e4f4100 	dvfmie	f4, f7, f0
		if (aux_timer_inactive) {
     614:	50435557 	subpl	r5, r3, r7, asr r5
			cli_aux;
     618:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
     61c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     620:	65477375 	strbvs	r7, [r7, #-885]	; 0xfffffc8b
     624:	41550074 	cmpmi	r5, r4, ror r0
     628:	6e495452 	mcrvs	4, 2, r5, cr9, cr2, {2}
     62c:	656c4374 	strbvs	r4, [ip, #-884]!	; 0xfffffc8c
     630:	73007261 	movwvc	r7, #609	; 0x261
     634:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     638:	6e695f6d 	cdpvs	15, 6, cr5, cr9, cr13, {3}
     63c:	41007469 	tstmi	r0, r9, ror #8
word tci_update_delay_ticks (Boolean force) {
     640:	55574e4f 	ldrbpl	r4, [r7, #-3663]	; 0xfffff1b1
	cli_tim;
     644:	75685343 	strbvc	r5, [r8, #-835]!	; 0xfffffcbd
     648:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
	if (setdel) {
     64c:	616e456e 	cmnvs	lr, lr, ror #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     650:	00656c62 	rsbeq	r6, r5, r2, ror #24
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     654:	64746573 	ldrbtvs	r6, [r4], #-1395	; 0xfffffa8d
     658:	50006c65 	andpl	r6, r0, r5, ror #24
     65c:	4d4d4352 	stclmi	3, cr4, [sp, #-328]	; 0xfffffeb8
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     660:	6f507563 	svcvs	0x00507563
				AON_RTC_O_CH0CMP)) - gettav ());
     664:	4f726577 	svcmi	0x00726577
	return NO;
     668:	5f006666 	svcpl	0x00006666
			setdel = 0;
     66c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     670:	50534d5f 	subspl	r4, r3, pc, asr sp
     674:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
}
     678:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
		sti_tim;
     67c:	5f00745f 	svcpl	0x0000745f
		return YES;
     680:	5f69705f 	svcpl	0x0069705f
     684:	6f646e6f 	svcvs	0x00646e6f
     688:	6e69616d 	powvsez	f6, f1, #5.0
     68c:	52415500 	subpl	r5, r1, #0, 10
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     690:	46774854 			; <UNDEFINED> instruction: 0x46774854
	UARTDisable (UART0_BASE);
     694:	43776f6c 	cmnmi	r7, #108, 30	; 0x1b0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     698:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
	UARTDisable (UART0_BASE);
     69c:	69446c6f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
	UARTConfigSetExpClk (UART0_BASE,
     6a0:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     6a4:	5f5f0065 	svcpl	0x005f0065
     6a8:	755f6970 	ldrbvc	r6, [pc, #-2416]	; fffffd40 <_estack+0xdfffad40>
     6ac:	5f747261 	svcpl	0x00747261
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6b0:	72746567 	rsbsvc	r6, r4, #432013312	; 0x19c00000
     6b4:	00657461 	rsbeq	r7, r5, r1, ror #8
     6b8:	494e4f41 	stmdbmi	lr, {r0, r6, r8, r9, sl, fp, lr}^
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     6bc:	7246434f 	subvc	r4, r6, #1006632961	; 0x3c000001
     6c0:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
     6c4:	61736944 	cmnvs	r3, r4, asr #18
	urates [0] = rate;
     6c8:	00656c62 	rsbeq	r6, r5, r2, ror #24
}
     6cc:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
     6d0:	654c7852 	strbvs	r7, [ip, #-2130]	; 0xfffff7ae
     6d4:	006c6576 	rsbeq	r6, ip, r6, ror r5
     6d8:	6f646552 	svcvs	0x00646552
     6dc:	0078725f 	rsbseq	r7, r8, pc, asr r2
     6e0:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6e4:	654c7854 	strbvs	r7, [ip, #-2132]	; 0xfffff7ac
     6e8:	006c6576 	rsbeq	r6, ip, r6, ror r5
     6ec:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     6f0:	436c7274 	cmnmi	ip, #116, 4	; 0x40000007
     6f4:	6b636f6c 	blvs	18dc4ac <__ccfg+0x18bc504>
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     6f8:	00746547 	rsbseq	r6, r4, r7, asr #10
     6fc:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
	__pi_uart_setrate (urates [0], __pi_uart);
     700:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
     704:	74655265 	strbtvc	r5, [r5], #-613	; 0xfffffd9b
     708:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     70c:	6e456e6f 	cdpvs	14, 4, cr6, cr5, cr15, {3}
     710:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     714:	43525000 	cmpmi	r2, #0
     718:	616f4c4d 	cmnvs	pc, sp, asr #24
	switch (operation) {
     71c:	74655364 	strbtvc	r5, [r5], #-868	; 0xfffffc9c
static int ioreq_uart_a (int operation, char *buf, int len) {
     720:	33697500 	cmncc	r9, #0, 10
     724:	616e4532 	cmnvs	lr, r2, lsr r5
     728:	00656c62 	rsbeq	r6, r5, r2, ror #24
     72c:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
     730:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 1cc <transmitter+0x54>
				*buf++ = uart_a_read;
     734:	5f747261 	svcpl	0x00747261
     738:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
			while (len && uart_a_char_available) {
     73c:	70757272 	rsbsvc	r7, r5, r2, ror r2
     740:	55007374 	strpl	r7, [r0, #-884]	; 0xfffffc8c
     744:	46545241 	ldrbmi	r5, [r4], -r1, asr #4
			if (len != operation) {
     748:	454f4649 	strbmi	r4, [pc, #-1609]	; 107 <_Min_Stack_Size+0x7>
}
     74c:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     750:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
			uart_a_disable_int;
     754:	6e493233 	mcrvs	2, 2, r3, cr9, cr3, {1}
			if (uart_a_char_available) {
     758:	616c4674 	smcvs	50276	; 0xc464
				*buf++ = uart_a_read;
     75c:	64007367 	strvs	r7, [r0], #-871	; 0xfffffc99
			uart_a_disable_int;
     760:	754e6f69 	strbvc	r6, [lr, #-3945]	; 0xfffff097
     764:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
			if (uart_a_char_available) {
     768:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     76c:	61755f69 	cmnvs	r5, r9, ror #30
				uart_a_enable_int;
     770:	735f7472 	cmpvc	pc, #1912602624	; 0x72000000
     774:	61727465 	cmnvs	r2, r5, ror #8
				goto Redo_rx;
     778:	50006574 	andpl	r6, r0, r4, ror r5
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     77c:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
     780:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
			return -2;
     784:	72464f49 	subvc	r4, r6, #292	; 0x124
     788:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
				uart_a_write (*buf);
     78c:	61736944 	cmnvs	r3, r4, asr #18
     790:	00656c62 	rsbeq	r6, r5, r2, ror #24
			while (len && uart_a_room_in_tx) {
     794:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
     798:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
     79c:	74655265 	strbtvc	r5, [r5], #-613	; 0xfffffd9b
			if (len != operation) {
     7a0:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
			uart_a_disable_int;
     7a4:	69446e6f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     7a8:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
			if (uart_a_room_in_tx) {
     7ac:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
     7b0:	776f7074 			; <UNDEFINED> instruction: 0x776f7074
				uart_a_enable_int;
     7b4:	6f6d7265 	svcvs	0x006d7265
     7b8:	6f006564 	svcvs	0x00006564
				*buf++ = uart_a_read;
     7bc:	61726570 	cmnvs	r2, r0, ror r5
			if (uart_a_room_in_tx) {
     7c0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
				uart_a_write (*buf);
     7c4:	78756100 	ldmdavc	r5!, {r8, sp, lr}^
     7c8:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7cc:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
     7d0:	7463616e 	strbtvc	r6, [r3], #-366	; 0xfffffe92
			uart_a_enable_int;
     7d4:	00657669 	rsbeq	r7, r5, r9, ror #12
     7d8:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     7dc:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
			return 0;
     7e0:	52007366 	andpl	r7, r0, #-1744830463	; 0x98000001
			if (len == UART_CNTRL_SETRATE) {
     7e4:	5f6f6465 	svcpl	0x006f6465
				if (__pi_uart_setrate (*((word*)buf),
     7e8:	75007874 	strvc	r7, [r0, #-2164]	; 0xfffff78c
     7ec:	49323369 	ldmdbmi	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
     7f0:	6156636e 	cmpvs	r6, lr, ror #6
				syserror (EREQPAR, "uar");
     7f4:	0065756c 	rsbeq	r7, r5, ip, ror #10
			syserror (ENOOPER, "uai");
     7f8:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
			if (len == UART_CNTRL_GETRATE) {
     7fc:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0xfffffebe
				return 1;
     800:	645f5f00 	ldrbvs	r5, [pc], #-3840	; 808 <ioreq_uart_a+0xec>
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     804:	66775f6f 	ldrbtvs	r5, [r7], -pc, ror #30
			syserror (ENOOPER, "uai");
     808:	73615f69 	cmnvc	r1, #420	; 0x1a4
     80c:	65656e5f 	strbvs	r6, [r5, #-3679]!	; 0xfffff1a1
     810:	00646564 	rsbeq	r6, r4, r4, ror #10
     814:	524e4f41 	subpl	r4, lr, #260	; 0x104
     818:	6e494354 	mcrvs	3, 2, r4, cr9, cr4, {2}
     81c:	6c615663 	stclvs	6, cr5, [r1], #-396	; 0xfffffe74
     820:	68436575 	stmdavs	r3, {r0, r2, r4, r5, r6, r8, sl, sp, lr}^
     824:	74655332 	strbtvc	r5, [r5], #-818	; 0xfffffcce
     828:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     82c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
void UART0IntHandler () {
     830:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     834:	4f410074 	svcmi	0x00410074
     838:	4354524e 	cmpmi	r4, #-536870908	; 0xe0000004
     83c:	48746e49 	ldmdami	r4!, {r0, r3, r6, r9, sl, fp, sp, lr}^
     840:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     844:	70007265 	andvc	r7, r0, r5, ror #4
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     848:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
     84c:	69637400 	stmdbvs	r3!, {sl, ip, sp, lr}^
		RISE_N_SHINE;
     850:	6e75725f 	mrcvs	2, 3, r7, cr5, cr15, {2}
     854:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
		i_trigger (devevent (UART_A, READ));
     858:	745f7961 	ldrbvc	r7, [pc], #-2401	; 860 <UART0IntHandler+0x34>
     85c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     860:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     864:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
     868:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
     86c:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
     870:	70006f64 	andvc	r6, r0, r4, ror #30
     874:	6e696572 	mcrvs	5, 3, r6, cr9, cr2, {3}
     878:	755f7469 	ldrbvc	r7, [pc, #-1129]	; 417 <__pi_ondomain+0x23>
     87c:	00747261 	rsbseq	r7, r4, r1, ror #4
     880:	63726f66 	cmnvs	r2, #408	; 0x198
     884:	41550065 	cmpmi	r5, r5, rrx
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     888:	6e455452 	mcrvs	4, 2, r5, cr5, cr2, {2}
     88c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     890:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
		i_trigger (devevent (UART_A, WRITE));
     894:	6c635f4f 	stclvs	15, cr5, [r3], #-316	; 0xfffffec4
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     898:	45726165 	ldrbmi	r6, [r2, #-357]!	; 0xfffffe9b
     89c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
		RISE_N_SHINE;
     8a0:	006f6944 	rsbeq	r6, pc, r4, asr #18
     8a4:	75625f5f 	strbvc	r5, [r2, #-3935]!	; 0xfffff0a1
     8a8:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
		i_trigger (devevent (UART_A, WRITE));
     8ac:	65735f73 	ldrbvs	r5, [r3, #-3955]!	; 0xfffff08d
     8b0:	71726974 	cmnvc	r2, r4, ror r9
     8b4:	65646d00 	strbvs	r6, [r4, #-3328]!	; 0xfffff300
     8b8:	0079616c 	rsbseq	r6, r9, ip, ror #2
     8bc:	69645f5f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     8c0:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     8c4:	72695f65 	rsbvc	r5, r9, #404	; 0x194
     8c8:	50470071 	subpl	r0, r7, r1, ror r0
     8cc:	635f4f49 	cmpvs	pc, #292	; 0x124
     8d0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     8d4:	006f6944 	rsbeq	r6, pc, r4, asr #18
}
     8d8:	43737953 	cmnmi	r3, #1359872	; 0x14c000
     8dc:	416c7274 	smcmi	50980	; 0xc724
     8e0:	79536e6f 	ldmdbvc	r3, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     8e4:	5f00636e 	svcpl	0x0000636e
     8e8:	5f69705f 	svcpl	0x0069705f
void __buttons_setirq (int val) {
     8ec:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     8f0:	6572666b 	ldrbvs	r6, [r2, #-1643]!	; 0xfffff995
     8f4:	63740065 	cmnvs	r4, #101	; 0x65
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8f8:	75725f69 	ldrbvc	r5, [r2, #-3945]!	; 0xfffff097
     8fc:	75615f6e 	strbvc	r5, [r1, #-3950]!	; 0xfffff092
     900:	696c6978 	stmdbvs	ip!, {r3, r4, r5, r6, r8, fp, sp, lr}^
		bn = BUTTON_GPIO (__button_list [i]);
     904:	5f797261 	svcpl	0x00797261
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     908:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     90c:	5f5f0072 	svcpl	0x005f0072
     910:	6c6e6970 			; <UNDEFINED> instruction: 0x6c6e6970
     914:	5f747369 	svcpl	0x00747369
     918:	69746573 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
     91c:	47007172 	smlsdxmi	r0, r2, r1, r7
}
     920:	494f4950 	stmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
     924:	6148746e 	cmpvs	r8, lr, ror #8
     928:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     92c:	41550072 	cmpmi	r5, r2, ror r0
void __pinlist_setirq (int val) {
     930:	49465452 	stmdbmi	r6, {r1, r4, r6, sl, ip, lr}^
	for (i = 0; i < N_PINLIST; i++) {
     934:	654c4f46 	strbvs	r4, [ip, #-3910]	; 0xfffff0ba
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     938:	536c6576 	cmnpl	ip, #494927872	; 0x1d800000
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     93c:	53007465 	movwpl	r7, #1125	; 0x465
	for (i = 0; i < N_PINLIST; i++) {
     940:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     944:	79536c72 	ldmdbvc	r3, {r1, r4, r5, r6, sl, fp, sp, lr}^
     948:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     94c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     950:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
     954:	76617474 			; <UNDEFINED> instruction: 0x76617474
	for (i = 0; i < N_PINLIST; i++) {
     958:	65766500 	ldrbvs	r6, [r6, #-1280]!	; 0xfffffb00
}
     95c:	0073746e 	rsbseq	r7, r3, lr, ror #8
     960:	6c656475 	cfstrdvs	mvd6, [r5], #-468	; 0xfffffe2c
     964:	41007961 	tstmi	r0, r1, ror #18
     968:	61424e4f 	cmpvs	r2, pc, asr #28
void GPIOIntHandler () {
     96c:	6e6f4d74 	mcrvs	13, 3, r4, cr15, cr4, {3}
if (buttons_int) {
     970:	61736944 	cmnvs	r3, r4, asr #18
     974:	00656c62 	rsbeq	r6, r5, r2, ror #24
	buttons_disable ();
     978:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     97c:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
	i_trigger ((aword)&__button_list);
     980:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
     984:	494e4f41 	stmdbmi	lr, {r0, r6, r8, r9, sl, fp, lr}^
     988:	7246434f 	subvc	r4, r6, #1006632961	; 0x3c000001
     98c:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
     990:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     994:	4100656c 	tstmi	r0, ip, ror #10
     998:	61424e4f 	cmpvs	r2, pc, asr #28
     99c:	6e6f4d74 	mcrvs	13, 3, r4, cr15, cr4, {3}
     9a0:	74746142 	ldrbtvc	r6, [r4], #-322	; 0xfffffebe
     9a4:	56797265 	ldrbtpl	r7, [r9], -r5, ror #4
     9a8:	61746c6f 	cmnvs	r4, pc, ror #24
	RISE_N_SHINE;
     9ac:	65476567 	strbvs	r6, [r7, #-1383]	; 0xfffffa99
     9b0:	6f690074 	svcvs	0x00690074
     9b4:	5f716572 	svcpl	0x00716572
if (pin_sensor_int) {
     9b8:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     9bc:	5f00615f 	svcpl	0x0000615f
	i_trigger ((aword)(&__input_pins));
     9c0:	5f69705f 	svcpl	0x0069705f
     9c4:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
     9c8:	69730073 	ldmdbvs	r3!, {r0, r1, r4, r5, r6}^
     9cc:	4700746e 	strmi	r7, [r0, -lr, ror #8]
     9d0:	5f4f4950 	svcpl	0x004f4950
     9d4:	44746573 	ldrbtmi	r6, [r4], #-1395	; 0xfffffa8d
     9d8:	64006f69 	strvs	r6, [r0], #-3945	; 0xfffff097
     9dc:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
     9e0:	5f007469 	svcpl	0x00007469
     9e4:	5f69705f 	svcpl	0x0069705f
     9e8:	65737973 	ldrbvs	r7, [r3, #-2419]!	; 0xfffff68d
	__pinsen_disable_and_clear;
     9ec:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
	RISE_N_SHINE;
     9f0:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
     9f4:	006d756e 	rsbeq	r7, sp, lr, ror #10
     9f8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 944 <__pinlist_setirq+0x14>
}
     9fc:	616d2f65 	cmnvs	sp, r5, ror #30
     a00:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
     a04:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     a08:	706f746b 	rsbvc	r7, pc, fp, ror #8
     a0c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
void system_init () {
     a10:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a14:	4349502f 	movtmi	r5, #36911	; 0x902f
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a18:	502f534f 	eorpl	r5, pc, pc, asr #6
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a1c:	534f6369 	movtpl	r6, #62313	; 0xf369
     a20:	3143432f 	cmpcc	r3, pc, lsr #6
     a24:	2f585833 	svccs	0x00585833
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a28:	6e69616d 	powvsez	f6, f1, #5.0
     a2c:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a30:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
     a34:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
     a38:	6142746e 	cmpvs	r2, lr, ror #8
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a3c:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a40:	41550079 	cmpmi	r5, r9, ror r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a44:	6e495452 	mcrvs	4, 2, r5, cr9, cr2, {2}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a48:	616e4574 	smcvs	58452	; 0xe454
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a4c:	00656c62 	rsbeq	r6, r5, r2, ror #24
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a50:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
		pin = (port_confs [i] >> 19) & 0x1f;
     a54:	5575634d 	ldrbpl	r6, [r5, #-845]!	; 0xfffffcb3
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a58:	436f646c 	cmnmi	pc, #108, 8	; 0x6c000000
		pin = (port_confs [i] >> 19) & 0x1f;
     a5c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a60:	65727567 	ldrbvs	r7, [r2, #-1383]!	; 0xfffffa99
     a64:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
     a68:	45747570 	ldrbmi	r7, [r4, #-1392]!	; 0xfffffa90
     a6c:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
		if (port_confs [i] & 0x80)
     a70:	6c615665 	stclvs	6, cr5, [r1], #-404	; 0xfffffe6c
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a74:	68006575 	stmdavs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
     a78:	00746c61 	rsbseq	r6, r4, r1, ror #24
		if (port_confs [i] & 0x40)
     a7c:	4f706f74 	svcmi	0x00706f74
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a80:	69614d66 	stmdbvs	r1!, {r1, r2, r5, r6, r8, sl, fp, lr}^
     a84:	6174536e 	cmnvs	r4, lr, ror #6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a88:	5f006b63 	svcpl	0x00006b63
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a8c:	6c656467 	cfstrdvs	mvd6, [r5], #-412	; 0xfffffe64
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a90:	55007961 	strpl	r7, [r0, #-2401]	; 0xfffff69f
	all_leds_blink;
     a94:	30545241 	subscc	r5, r4, r1, asr #4
     a98:	48746e49 	ldmdami	r4!, {r0, r3, r6, r9, sl, fp, sp, lr}^
     a9c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     aa0:	44007265 	strmi	r7, [r0], #-613	; 0xfffffd9b
     aa4:	53706565 	cmnpl	r0, #423624704	; 0x19400000
     aa8:	7065656c 	rsbvc	r6, r5, ip, ror #10
     aac:	726f7000 	rsbvc	r7, pc, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ab0:	6f635f74 	svcvs	0x00635f74
     ab4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     ab8:	69637400 	stmdbvs	r3!, {sl, ip, sp, lr}^
     abc:	6470755f 	ldrbtvs	r7, [r0], #-1375	; 0xfffffaa1
     ac0:	5f657461 	svcpl	0x00657461
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     ac4:	616c6564 	cmnvs	ip, r4, ror #10
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ac8:	69745f79 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     acc:	00736b63 	rsbseq	r6, r3, r3, ror #22
	IntEnable (INT_AON_RTC_COMB);
     ad0:	7361654d 	cmnvc	r1, #322961408	; 0x13400000
     ad4:	00657275 	rsbeq	r7, r5, r5, ror r2
     ad8:	72766564 	rsbsvc	r6, r6, #100, 10	; 0x19000000
	__pi_malloc_init ();
     adc:	75667165 	strbvc	r7, [r6, #-357]!	; 0xfffffe9b
	IntEnable (INT_AON_GPIO_EDGE);
     ae0:	00745f6e 	rsbseq	r5, r4, lr, ror #30
     ae4:	6c6c696b 			; <UNDEFINED> instruction: 0x6c6c696b
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     ae8:	5f007665 	svcpl	0x00007665
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     aec:	5f69705f 	svcpl	0x0069705f
     af0:	63727473 	cmnvs	r2, #1929379840	; 0x73000000
     af4:	5f007970 	svcpl	0x00007970
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     af8:	5f69705f 	svcpl	0x0069705f
     afc:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b00:	7500636f 	strvc	r6, [r0, #-879]	; 0xfffffc91
     b04:	6961776e 	stmdbvs	r1!, {r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
     b08:	66710074 			; <UNDEFINED> instruction: 0x66710074
	urates [0] = UART_RATE / 100;
     b0c:	00656572 	rsbeq	r6, r5, r2, ror r5
     b10:	65726f69 	ldrbvs	r6, [r2, #-3945]!	; 0xfffff097
	reinit_uart ();
     b14:	5f5f0071 	svcpl	0x005f0071
	EXTRA_INITIALIZERS;
     b18:	665f6970 			; <UNDEFINED> instruction: 0x665f6970
     b1c:	006b726f 	rsbeq	r7, fp, pc, ror #4
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b20:	6c6c696b 			; <UNDEFINED> instruction: 0x6c6c696b
     b24:	6f706d00 	svcvs	0x00706d00
     b28:	00736c6f 	rsbseq	r6, r3, pc, ror #24
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b2c:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
     b30:	615f7265 	cmpvs	pc, r5, ror #4
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b34:	55006464 	strpl	r6, [r0, #-1124]	; 0xfffffb9c
     b38:	42545241 	subsmi	r5, r4, #268435460	; 0x10000004
			devinit [i] . init (devinit [i] . param);
     b3c:	00797375 	rsbseq	r7, r9, r5, ror r3
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b40:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     b44:	6c616d5f 	stclvs	13, cr6, [r1], #-380	; 0xfffffe84
     b48:	5f636f6c 	svcpl	0x00636f6c
	IntEnable (INT_UART0_COMB);
     b4c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     b50:	6f682f00 	svcvs	0x00682f00
}
     b54:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 9a8 <GPIOIntHandler+0x3c>
	tci_run_auxiliary_timer ();
     b58:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
		diag ("");
     b5c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
     b60:	6f746b73 	svcvs	0x00746b73
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     b64:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     b68:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
		diag ("Leftover RAM: %d bytes",
     b6c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
     b70:	2f534f43 	svccs	0x00534f43
     b74:	4f636950 	svcmi	0x00636950
     b78:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
     b7c:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
     b80:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
     b84:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
     b88:	5f5f0063 	svcpl	0x005f0063
     b8c:	745f6970 	ldrbvc	r6, [pc], #-2416	; b94 <system_init+0x184>
     b90:	67676972 			; <UNDEFINED> instruction: 0x67676972
     b94:	5f007265 	svcpl	0x00007265
     b98:	5f69705f 	svcpl	0x0069705f
     b9c:	6c727473 	cfldrdvs	mvd7, [r2], #-460	; 0xfffffe34
     ba0:	5f006e65 	svcpl	0x00006e65
     ba4:	5f69705f 	svcpl	0x0069705f
     ba8:	6678616d 	ldrbtvs	r6, [r8], -sp, ror #2
     bac:	00656572 	rsbeq	r6, r5, r2, ror r5
     bb0:	6e757263 	cdpvs	2, 7, cr7, cr5, cr3, {3}
     bb4:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
     bb8:	68636e00 	stmdavs	r3!, {r9, sl, fp, sp, lr}^
     bbc:	6e6d006b 	cdpvs	0, 6, cr0, cr13, cr11, {3}
     bc0:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
     bc4:	6f727000 	svcvs	0x00727000
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     bc8:	64656563 	strbtvs	r6, [r5], #-1379	; 0xfffffa9d
     bcc:	656c6d00 	strbvs	r6, [ip, #-3328]!	; 0xfffff300
     bd0:	5f5f006e 	svcpl	0x005f006e
     bd4:	705f6970 	subsvc	r6, pc, r0, ror r9	; <UNPREDICTABLE>
     bd8:	67697274 			; <UNDEFINED> instruction: 0x67697274
     bdc:	00726567 	rsbseq	r6, r2, r7, ror #10
     be0:	64646461 	strbtvs	r6, [r4], #-1121	; 0xfffffb9f
     be4:	75667665 	strbvc	r7, [r6, #-1637]!	; 0xfffff99b
}
     be8:	7000636e 	andvc	r6, r0, lr, ror #6
__attribute__ ((noreturn)) void __pi_release () {
     bec:	65766469 	ldrbvs	r6, [r6, #-1129]!	; 0xfffffb97
     bf0:	69640072 	stmdbvs	r4!, {r1, r4, r5, r6}^
     bf4:	5f006761 	svcpl	0x00006761
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     bf8:	5f69705f 	svcpl	0x0069705f
	check_stack_overflow;
     bfc:	63727473 	cmnvs	r2, #1929379840	; 0x73000000
     c00:	6d007461 	cfstrsvs	mvf7, [r0, #-388]	; 0xfffffe7c
     c04:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
	update_n_wake (MAX_WORD, NO);
     c08:	00745f74 	rsbseq	r5, r4, r4, ror pc
     c0c:	7266636d 	rsbvc	r6, r6, #-1275068415	; 0xb4000001
     c10:	77006565 	strvc	r6, [r0, -r5, ror #10]
	for_all_tasks (__pi_curr) {
     c14:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
     c18:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
     c1c:	64007972 	strvs	r7, [r0], #-2418	; 0xfffff68e
  __ASM volatile ("cpsid i" : : : "memory");
     c20:	00747365 	rsbseq	r7, r4, r5, ror #6
	__SLEEP;
     c24:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
     c28:	76656d00 	strbtvc	r6, [r5], -r0, lsl #26
     c2c:	00746e65 	rsbseq	r6, r4, r5, ror #28
     c30:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	system_event_count ++;
     c34:	6461625f 	strbtvs	r6, [r1], #-607	; 0xfffffda1
     c38:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
	switch (__pi_systat.effpdm) {
     c3c:	5f5f0065 	svcpl	0x005f0065
     c40:	775f6970 			; <UNDEFINED> instruction: 0x775f6970
     c44:	00746961 	rsbseq	r6, r4, r1, ror #18
     c48:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			__WFI ();
     c4c:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     c50:	6d656d74 	stclvs	13, cr6, [r5, #-464]!	; 0xfffffe30
     c54:	6e726c00 	cdpvs	12, 7, cr6, cr2, cr0, {0}
	check_stack_overflow;
     c58:	696b0064 	stmdbvs	fp!, {r2, r5, r6}^
     c5c:	6c616c6c 	stclvs	12, cr6, [r1], #-432	; 0xfffffe50
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c60:	5f5f006c 	svcpl	0x005f006c
     c64:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; b8c <system_init+0x17c>	; <UNPREDICTABLE>
			(__pi_curr->code) (tstate (__pi_curr));
     c68:	72666d65 	rsbvc	r6, r6, #6464	; 0x1940
			goto Redo;
     c6c:	5f006565 	svcpl	0x00006565
	for_all_tasks (__pi_curr) {
     c70:	6c6f6f42 	stclvs	15, cr6, [pc], #-264	; b70 <system_init+0x160>
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c74:	75686300 	strbvc	r6, [r8, #-768]!	; 0xfffffd00
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c78:	75006b6e 	strvc	r6, [r0, #-2926]	; 0xfffff492
     c7c:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c80:	5f6e5f65 	svcpl	0x006e5f65
     c84:	656b6177 	strbvs	r6, [fp, #-375]!	; 0xfffffe89
     c88:	705f5f00 	subsvc	r5, pc, r0, lsl #30
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c8c:	65735f69 	ldrbvs	r5, [r3, #-3945]!	; 0xfffff097
     c90:	67006465 	strvs	r6, [r0, -r5, ror #8]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c94:	6f637465 	svcvs	0x00637465
     c98:	64006564 	strvs	r6, [r0], #-1380	; 0xfffffa9c
			__WFI ();
     c9c:	7466656c 	strbtvc	r6, [r6], #-1388	; 0xfffffa94
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ca0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     ca4:	656d5f69 	strbvs	r5, [sp, #-3945]!	; 0xfffff097
}
     ca8:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cac:	6f676400 	svcvs	0x00676400
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cb0:	5f007475 	svcpl	0x00007475
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cb4:	5f69705f 	svcpl	0x0069705f
     cb8:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cbc:	735f7265 	cmpvc	pc, #1342177286	; 0x50000006
     cc0:	77007465 	strvc	r7, [r0, -r5, ror #8]
     cc4:	006e7566 	rsbeq	r7, lr, r6, ror #10
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cc8:	6961666e 	stmdbvs	r1!, {r1, r2, r3, r5, r6, r9, sl, sp, lr}^
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ccc:	5f5f006c 	svcpl	0x005f006c
     cd0:	665f6970 			; <UNDEFINED> instruction: 0x665f6970
     cd4:	00656572 	rsbeq	r6, r5, r2, ror r5
     cd8:	535f4944 	cmppl	pc, #68, 18	; 0x110000
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     cdc:	5f004749 	svcpl	0x00004749
     ce0:	5f69705f 	svcpl	0x0069705f
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ce4:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     ce8:	5f007465 	svcpl	0x00007465
     cec:	5f69705f 	svcpl	0x0069705f
     cf0:	6e727473 	mrcvs	4, 3, r7, cr2, cr3, {3}
     cf4:	00797063 	rsbseq	r7, r9, r3, rrx
     cf8:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			SysCtrlSetRechargeBeforePowerDown
     cfc:	696f6a5f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, r9, fp, sp, lr}^	; <UNPREDICTABLE>
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d00:	7475006e 	ldrbtvc	r0, [r5], #-110	; 0xffffff92
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d04:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     d08:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d0c:	00657465 	rsbeq	r7, r5, r5, ror #8
     d10:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     d14:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d18:	7461636e 	strbtvc	r6, [r1], #-878	; 0xfffffc92
     d1c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d20:	6973715f 	ldmdbvs	r3!, {r0, r1, r2, r3, r4, r6, r8, ip, sp, lr}^
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d24:	7000657a 	andvc	r6, r0, sl, ror r5
     d28:	00766572 	rsbseq	r6, r6, r2, ror r5
     d2c:	63745f5f 	cmnvs	r4, #380	; 0x17c
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d30:	61625f76 	smcvs	9718	; 0x25f6
			while (!(AONWUCPowerStatusGet () &
     d34:	5f727474 	svcpl	0x00727474
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d38:	63740074 	cmnvs	r4, #116	; 0x74
     d3c:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
     d40:	706f745f 	rsbvc	r7, pc, pc, asr r4	; <UNPREDICTABLE>
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d44:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     d48:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     d4c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; b84 <system_init+0x174>
     d50:	6f682f00 	svcvs	0x00682f00
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d54:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; ba8 <system_init+0x198>
     d58:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d5c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
     d60:	6f746b73 	svcvs	0x00746b73
			SysCtrlAdjustRechargeAfterPowerDown ();
     d64:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
			reinit_uart ();
     d68:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
     d6c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
     d70:	2f534f43 	svccs	0x00534f43
}
     d74:	4f636950 	svcmi	0x00636950
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d78:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
     d7c:	2f736269 	svccs	0x00736269
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d80:	74654e56 	strbtvc	r4, [r5], #-3670	; 0xfffff1aa
     d84:	63742f49 	cmnvs	r4, #292	; 0x124
     d88:	00632e76 	rsbeq	r2, r3, r6, ror lr
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     d8c:	70766374 	rsbsvc	r6, r6, r4, ror r3
     d90:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
     d94:	65736f70 	ldrbvs	r6, [r3, #-3952]!	; 0xfffff090
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     d98:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     d9c:	5f796870 	svcpl	0x00796870
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     da0:	00676572 	rsbeq	r6, r7, r2, ror r5
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     da4:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
     da8:	5f6e7566 	svcpl	0x006e7566
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     dac:	63740074 	cmnvs	r4, #116	; 0x74
     db0:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     db4:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     db8:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     dbc:	65706f5f 	ldrbvs	r6, [r0, #-3935]!	; 0xfffff0a1
     dc0:	6374006e 	cmnvs	r4, #110	; 0x6e
			PRCMPowerDomainOff (
     dc4:	72645f76 	rsbvc	r5, r4, #472	; 0x1d8
     dc8:	7000706f 	andvc	r7, r0, pc, rrx
	__SLEEP;
     dcc:	69737968 	ldmdbvs	r3!, {r3, r5, r6, r8, fp, ip, sp, lr}^
     dd0:	006f666e 	rsbeq	r6, pc, lr, ror #12
  __ASM volatile ("cpsie i" : : : "memory");
     dd4:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xfffff29b
	goto Redo;
     dd8:	63740079 	cmnvs	r4, #121	; 0x79
     ddc:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
     de0:	6172655f 	cmnvs	r2, pc, asr r5
     de4:	74006573 	strvc	r6, [r0], #-1395	; 0xfffffa8d
     de8:	5f707663 	svcpl	0x00707663
     dec:	61747461 	cmnvs	r4, r1, ror #8
     df0:	6f006863 	svcvs	0x00006863
     df4:	75657571 	strbvc	r7, [r5, #-1393]!	; 0xfffffa8f
     df8:	5f007365 	svcpl	0x00007365
     dfc:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
     e00:	7469715f 	strbtvc	r7, [r9], #-351	; 0xfffffea1
     e04:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     e08:	745f5f00 	ldrbvc	r5, [pc], #-3840	; e10 <__pi_release+0x224>
     e0c:	715f7663 	cmpvc	pc, r3, ror #12
     e10:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
     e14:	5f00745f 	svcpl	0x0000745f
     e18:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
     e1c:	6c62685f 	stclvs	8, cr6, [r2], #-380	; 0xfffffe84
     e20:	5f6b636f 	svcpl	0x006b636f
     e24:	74610074 	strbtvc	r0, [r1], #-116	; 0xffffff8c
     e28:	75007074 	strvc	r7, [r0, #-116]	; 0xffffff8c
     e2c:	6e656772 	mcrvs	7, 3, r6, cr5, cr2, {3}
     e30:	72450074 	subvc	r0, r5, #116	; 0x74
     e34:	0074725f 	rsbseq	r7, r4, pc, asr r2
     e38:	63736564 	cmnvs	r3, #100, 10	; 0x19000000
     e3c:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0xfffff68e
     e40:	0073726f 	rsbseq	r7, r3, pc, ror #4
	cli_tim;
     e44:	5f766374 	svcpl	0x00766374
     e48:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
     e4c:	63740065 	cmnvs	r4, #101	; 0x65
	diag ("PicOS halted");
     e50:	6e655f76 	mcrvs	15, 3, r5, cr5, cr6, {3}
	mdelay (500);
     e54:	74007064 	strvc	r7, [r0], #-100	; 0xffffff9c
     e58:	5f707663 	svcpl	0x00707663
	setpowermode (2);
     e5c:	0077656e 	rsbseq	r6, r7, lr, ror #10
	__PCB = NULL;
     e60:	65757172 	ldrbvs	r7, [r5, #-370]!	; 0xfffffe8e
	release;
     e64:	70006575 	andvc	r6, r0, r5, ror r5
     e68:	00737274 	rsbseq	r7, r3, r4, ror r2
     e6c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     e70:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
int main (void) {
     e74:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e78:	706e775f 	rsbvc	r7, lr, pc, asr r7
     e7c:	63740073 	cmnvs	r4, #115	; 0x73
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e80:	72775f76 	rsbsvc	r5, r7, #472	; 0x1d8
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e84:	00657469 	rsbeq	r7, r5, r9, ror #8
	system_init ();
     e88:	70747461 	rsbsvc	r7, r4, r1, ror #8
	tcv_init ();
     e8c:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e90:	74006e72 	strvc	r6, [r0], #-3698	; 0xfffff18e
     e94:	635f7663 	cmpvs	pc, #103809024	; 0x6300000
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e98:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
     e9c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; ea4 <main+0x30>
     ea0:	735f7663 	cmpvc	pc, #103809024	; 0x6300000
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     ea4:	65647365 	strbvs	r7, [r4, #-869]!	; 0xfffffc9b
     ea8:	745f6373 	ldrbvc	r6, [pc], #-883	; eb0 <main+0x3c>
	delay (16, 0);
     eac:	79687000 	stmdbvc	r8!, {ip, sp, lr}^
     eb0:	68700073 	ldmdavs	r0!, {r0, r1, r4, r5, r6}^
     eb4:	63697379 	cmnvs	r9, #-469762047	; 0xe4000001
	__pi_release ();
     eb8:	71006c61 	tstvc	r0, r1, ror #24
     ebc:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     ec0:	63740064 	cmnvs	r4, #100	; 0x64
     ec4:	65725f76 	ldrbvs	r5, [r2, #-3958]!	; 0xfffff08a
     ec8:	74006461 	strvc	r6, [r0], #-1121	; 0xfffffb9f
     ecc:	695f7663 	ldmdbvs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     ed0:	0074696e 	rsbseq	r6, r4, lr, ror #18
static void killev (__pi_pcb_t *pid) {
     ed4:	73736573 	cmnvc	r3, #482344960	; 0x1cc00000
	wfun = (aword)(pid->code);
     ed8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
	for_all_tasks (i) {
     edc:	70766374 	rsbsvc	r6, r6, r4, ror r3
		for (j = 0; j < nevents (i); j++) {
     ee0:	6f6c635f 	svcvs	0x006c635f
     ee4:	7400656e 	strvc	r6, [r0], #-1390	; 0xfffffa92
     ee8:	5f707663 	svcpl	0x00707663
			    || i->Events [j] . Event == wfun
     eec:	69737361 	ldmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
		for (j = 0; j < nevents (i); j++) {
     ef0:	70006e67 	andvc	r6, r0, r7, ror #28
			if (i->Events [j] . Event == (aword)pid
     ef4:	0064696c 	rsbeq	r6, r4, ip, ror #18
     ef8:	70766374 	rsbsvc	r6, r6, r4, ror r3
     efc:	655f7968 	ldrbvs	r7, [pc, #-2408]	; 59c <AONRTCIntHandler+0x70>
				wakeupev (i, j);
     f00:	7400646e 	strvc	r6, [r0], #-1134	; 0xfffffb92
     f04:	705f7663 	subsvc	r7, pc, r3, ror #12
	for_all_tasks (i) {
     f08:	0067756c 	rsbeq	r7, r7, ip, ror #10
}
     f0c:	72747461 	rsbsvc	r7, r4, #1627389952	; 0x61000000
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f10:	74756269 	ldrbtvc	r6, [r5], #-617	; 0xfffffd97
static void qfree (aword *ch) {
     f14:	5f007365 	svcpl	0x00007365
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f18:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
	cc = (aword*)(mpools + MA_NP);
     f1c:	6568715f 	strbvs	r7, [r8, #-351]!	; 0xfffffea1
	m_setnextp (ch, chunk);
     f20:	745f6461 	ldrbvc	r6, [pc], #-1121	; f28 <qfree+0x18>
	m_setnextp (cc, ch);
     f24:	756c7000 	strbvc	r7, [ip, #-0]!
}
     f28:	006e6967 	rsbeq	r6, lr, r7, ror #18
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f2c:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
     f30:	64006874 	strvs	r6, [r0], #-2164	; 0xfffff78c
     f34:	00707369 	rsbseq	r7, r0, r9, ror #6
			m_setnextp (cc, m_nextp (chunk));
     f38:	5f766374 	svcpl	0x00766374
			m_size (chunk) += m_hdrlen + m_size (ch);
     f3c:	00706e72 	rsbseq	r6, r0, r2, ror lr
     f40:	70766374 	rsbsvc	r6, r6, r4, ror r3
     f44:	725f7968 	subsvc	r7, pc, #104, 18	; 0x1a0000
     f48:	62007663 	andvs	r7, r0, #103809024	; 0x6300000
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f4c:	75657571 	strbvc	r7, [r5, #-1393]!	; 0xfffffa8f
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f50:	6c700065 	ldclvs	0, cr0, [r0], #-404	; 0xfffffe6c
     f54:	6e696775 	mcrvs	7, 3, r6, cr9, cr5, {3}
     f58:	5f5f0073 	svcpl	0x005f0073
			m_setnextp (cc, m_nextp (chunk));
     f5c:	5f766374 	svcpl	0x00766374
			m_size (ch) += m_hdrlen + m_size (chunk);
     f60:	6f6c6268 	svcvs	0x006c6268
     f64:	735f6b63 	cmpvc	pc, #101376	; 0x18c00
     f68:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
     f6c:	6e696f67 	cdpvs	15, 6, cr6, cr9, cr7, {3}
     f70:	63740067 	cmnvs	r4, #103	; 0x67
     f74:	635f7076 	cmpvs	pc, #118	; 0x76
			if (m_size (chunk) >= m_size (ch))
     f78:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     f7c:	5f006c6f 	svcpl	0x00006c6f
     f80:	61747365 	cmnvs	r4, r5, ror #6
		chunk = m_nextp (chunk))
     f84:	5f006b63 	svcpl	0x00006b63
     f88:	61746164 	cmnvs	r4, r4, ror #2
     f8c:	69757000 	ldmdbvs	r5!, {ip, sp, lr}^
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f90:	72533233 	subsvc	r3, r3, #805306371	; 0x30000003
	diag_wait (a);
     f94:	61460063 	cmpvs	r6, r3, rrx
	diag_wchar (c, a);
     f98:	49746c75 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
     f9c:	61485253 	cmpvs	r8, r3, asr r2
}
     fa0:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     fa4:	6d4e0072 	stclvs	0, cr0, [lr, #-456]	; 0xfffffe38
	syserror (ESTATE, "state");
     fa8:	48525369 	ldmdami	r2, {r0, r3, r5, r6, r8, r9, ip, lr}^
     fac:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     fb0:	5f007265 	svcpl	0x00007265
     fb4:	78657465 	stmdavc	r5!, {r0, r2, r5, r6, sl, ip, sp, lr}^
	for (i = 0; i < MAX_UTIMERS; i++)
     fb8:	655f0074 	ldrbvs	r0, [pc, #-116]	; f4c <qfree+0x3c>
void utimer_add (address ut) {
     fbc:	00737362 	rsbseq	r7, r3, r2, ror #6
     fc0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; f0c <killev+0x38>
		if (__pi_utims [i] == NULL)
     fc4:	616d2f65 	cmnvs	sp, r5, ror #30
	for (i = 0; i < MAX_UTIMERS; i++)
     fc8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
     fcc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
		syserror (ERESOURCE, "ut a");
     fd0:	706f746b 	rsbvc	r7, pc, fp, ror #8
	__pi_utims [i] = ut;
     fd4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
}
     fd8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
     fdc:	4349502f 	movtmi	r5, #36911	; 0x902f
     fe0:	502f534f 	eorpl	r5, pc, pc, asr #6
	*t = v;
     fe4:	534f6369 	movtpl	r6, #62313	; 0xf369
	TCI_RUN_AUXILIARY_TIMER;
     fe8:	3143432f 	cmpcc	r3, pc, lsr #6
void update_n_wake (word min, Boolean force) {
     fec:	2f585833 	svccs	0x00585833
	if (TCI_UPDATE_DELAY_TICKS (force))
     ff0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     ff4:	5f707574 	svcpl	0x00707574
     ff8:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     ffc:	625f0063 	subsvs	r0, pc, #99	; 0x63
    1000:	5f007373 	svcpl	0x00007373
    1004:	74616465 	strbtvc	r6, [r1], #-1125	; 0xfffffb9b
    1008:	6e490061 	cdpvs	0, 4, cr0, cr9, cr1, {3}
    100c:	66654474 			; <UNDEFINED> instruction: 0x66654474
    1010:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    1014:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1018:	0072656c 	rsbseq	r6, r2, ip, ror #10
    101c:	66705f67 	ldrbtvs	r5, [r0], -r7, ror #30
    1020:	6365566e 	cmnvs	r5, #115343360	; 0x6e00000
    1024:	73726f74 	cmnvc	r2, #116, 30	; 0x1d0
    1028:	69757000 	ldmdbvs	r5!, {ip, sp, lr}^
    102c:	65443233 	strbvs	r3, [r4, #-563]	; 0xfffffdcd
		for_all_tasks (i) {
    1030:	52007473 	andpl	r7, r0, #1929379840	; 0x73000000
	__pi_mintk = znew + min;
    1034:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1038:	00525349 	subseq	r5, r2, r9, asr #6
			if (!twaiting (i))
    103c:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1040:	4c4f565f 	mcrrmi	6, 5, r5, pc, cr15
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1044:	4f4c5f54 	svcmi	0x004c5f54
    1048:	305f4441 	subscc	r4, pc, r1, asr #8
    104c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    1050:	4f565f47 	svcmi	0x00565f47
    1054:	4c5f544c 	cfldrdmi	mvd5, [pc], {76}	; 0x4c
    1058:	5f44414f 	svcpl	0x0044414f
    105c:	43430031 	movtmi	r0, #12337	; 0x3031
    1060:	425f4746 	subsmi	r4, pc, #18350080	; 0x1180000
    1064:	4f435f4c 	svcmi	0x00435f4c
    1068:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
    106c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    1070:	54525f47 	ldrbpl	r5, [r2], #-3911	; 0xfffff0b9
				wakeuptm (i);
    1074:	464f5f43 	strbmi	r5, [pc], -r3, asr #30
    1078:	54455346 	strbpl	r5, [r5], #-838	; 0xfffffcba
		for_all_tasks (i) {
    107c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
				d = i->Timer - znew;
    1080:	4f4d5f47 	svcmi	0x004d5f47
    1084:	435f4544 	cmpmi	pc, #68, 10	; 0x11000000
    1088:	00464e4f 	subeq	r4, r6, pc, asr #28
		if ((word)(__pi_mintk - znew) < min) 
    108c:	63635f5f 	cmnvs	r3, #380	; 0x17c
    1090:	2f006766 	svccs	0x00006766
    1094:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	__pi_old = znew;
    1098:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
}
    109c:	2f6e6974 	svccs	0x006e6974
	TCI_RUN_DELAY_TIMER;
    10a0:	6b736544 	blvs	1cda5b8 <__ccfg+0x1cba610>
}
    10a4:	2f706f74 	svccs	0x00706f74
    10a8:	4f534c4f 	svcmi	0x00534c4f
    10ac:	2f54454e 	svccs	0x0054454e
    10b0:	4f434950 	svcmi	0x00434950
    10b4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
void proceed (word state) {
    10b8:	2f534f63 	svccs	0x00534f63
	prcdstate (__pi_curr, state);
    10bc:	33314343 	teqcc	r1, #201326593	; 0xc000001
    10c0:	632f5858 			; <UNDEFINED> instruction: 0x632f5858
	release;
    10c4:	2e676663 	cdpcs	6, 6, cr6, cr7, cr3, {3}
    10c8:	43430063 	movtmi	r0, #12387	; 0x3063
void __pi_wait (aword event, word state) {
    10cc:	535f4746 	cmppl	pc, #18350080	; 0x1180000
	sint j = nevents (__pi_curr);
    10d0:	5f455a49 	svcpl	0x00455a49
	if (j >= MAX_EVENTS_PER_TASK)
    10d4:	5f444e41 	svcpl	0x00444e41
    10d8:	5f534944 	svcpl	0x00534944
    10dc:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
		syserror (ENEVENTS, "sw");
    10e0:	43430053 	movtmi	r0, #12371	; 0x3053
    10e4:	495f4746 	ldmdbmi	pc, {r1, r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
	setestate (__pi_curr->Events [j], state, event);
    10e8:	5f454545 	svcpl	0x00454545
	incwait (__pi_curr);
    10ec:	5f43414d 	svcpl	0x0043414d
	setestate (__pi_curr->Events [j], state, event);
    10f0:	43430030 	movtmi	r0, #12336	; 0x3030
}
    10f4:	495f4746 	ldmdbmi	pc, {r1, r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    10f8:	5f454545 	svcpl	0x00454545
    10fc:	5f43414d 	svcpl	0x0043414d
void __pi_trigger (aword event) {
    1100:	43430031 	movtmi	r0, #12337	; 0x3031
	for_all_tasks (i) {
    1104:	4d5f4746 	ldclmi	7, cr4, [pc, #-280]	; ff4 <update_n_wake+0x8>
		for (j = 0; j < nevents (i); j++) {
    1108:	5f45444f 	svcpl	0x0045444f
    110c:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
    1110:	4300315f 	movwmi	r3, #351	; 0x15f
    1114:	5f474643 	svcpl	0x00474643
			if (i->Events [j] . Event == event) {
    1118:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    111c:	5041545f 	subpl	r5, r1, pc, asr r4
    1120:	5041445f 	subpl	r4, r1, pc, asr r4
				wakeupev (i, j);
    1124:	4300305f 	movwmi	r3, #95	; 0x5f
    1128:	5f474643 	svcpl	0x00474643
	for_all_tasks (i) {
    112c:	47464343 	strbmi	r4, [r6, -r3, asr #6]
}
    1130:	5041545f 	subpl	r5, r1, pc, asr r4
aword __pi_join (aword pid, word st) {
    1134:	5041445f 	subpl	r4, r1, pc, asr r4
	for_all_tasks (i) {
    1138:	6300315f 	movwvs	r3, #351	; 0x15f
    113c:	5f676663 	svcpl	0x00676663
	return 0;
    1140:	43430074 	movtmi	r0, #12404	; 0x3074
		if ((aword)i == pid) {
    1144:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
			__pi_wait (pid, st);
    1148:	5f474643 	svcpl	0x00474643
}
    114c:	544f5250 	strbpl	r5, [pc], #-592	; 1154 <__pi_join+0x20>
	for_all_tasks (i) {
    1150:	3732315f 			; <UNDEFINED> instruction: 0x3732315f
    1154:	0036395f 	eorseq	r3, r6, pc, asr r9
void delay (word d, word state) {
    1158:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	settstate (__pi_curr, state);
    115c:	4152455f 	cmpmi	r2, pc, asr r5
    1160:	435f4553 	cmpmi	pc, #348127232	; 0x14c00000
    1164:	00464e4f 	subeq	r4, r6, pc, asr #28
    1168:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	update_n_wake (d, YES);
    116c:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
    1170:	52505f47 	subspl	r5, r0, #284	; 0x11c
	__pi_curr->Timer = __pi_old + d;
    1174:	335f544f 	cmpcc	pc, #1325400064	; 0x4f000000
    1178:	00305f31 	eorseq	r5, r0, r1, lsr pc
	inctimer (__pi_curr);
    117c:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1180:	414d495f 	cmpmi	sp, pc, asr r9
    1184:	565f4547 	ldrbpl	r4, [pc], -r7, asr #10
}
    1188:	44494c41 	strbmi	r4, [r9], #-3137	; 0xfffff3bf
    118c:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
	if (fun == NULL)
    1190:	43430046 	movtmi	r0, #12358	; 0x3046
		return (int) __pi_curr;
    1194:	465f4746 	ldrbmi	r4, [pc], -r6, asr #14
    1198:	5f514552 	svcpl	0x00514552
	for_all_tasks (i)
    119c:	5346464f 	movtpl	r4, #26191	; 0x664f
}
    11a0:	43005445 	movwmi	r5, #1093	; 0x445
		if (i->code == fun)
    11a4:	5f474643 	svcpl	0x00474643
	for_all_tasks (i)
    11a8:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    11ac:	4f52505f 	svcmi	0x0052505f
    11b0:	33365f54 	teqcc	r6, #84, 30	; 0x150
int __pi_strlen (const char *s) {
    11b4:	0032335f 	eorseq	r3, r2, pc, asr r3
	for (i = 0; *(s+i) != '\0'; i++);
    11b8:	47464343 	strbmi	r4, [r6, -r3, asr #6]
}
    11bc:	4545495f 	strbmi	r4, [r5, #-2399]	; 0xfffff6a1
	for (i = 0; *(s+i) != '\0'; i++);
    11c0:	4c425f45 	mcrrmi	15, 4, r5, r2, cr5
	while ((Boolean)(*d++ = *s++));
    11c4:	00305f45 	eorseq	r5, r0, r5, asr #30
    11c8:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    11cc:	4545495f 	strbmi	r4, [r5, #-2399]	; 0xfffff6a1
}
    11d0:	4c425f45 	mcrrmi	15, 4, r5, r2, cr5
	while (n--)
    11d4:	00315f45 	eorseq	r5, r1, r5, asr #30
    11d8:	47464343 	strbmi	r4, [r6, -r3, asr #6]
		*dest++ = *src++;
    11dc:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
    11e0:	52505f47 	subspl	r5, r0, #284	; 0x11c
    11e4:	395f544f 	ldmdbcc	pc, {r0, r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
	while (n--)
    11e8:	34365f35 	ldrtcc	r5, [r6], #-3893	; 0xfffff0cb
}
    11ec:	46434300 	strbmi	r4, [r3], -r0, lsl #6
		*dest++ = c;
    11f0:	58455f47 	stmdapl	r5, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
void adddevfunc (devreqfun_t rf, int loc) {
    11f4:	464c5f54 			; <UNDEFINED> instruction: 0x464c5f54
		syserror (EREQPAR, "addv");
    11f8:	4b4c435f 	blmi	1311f7c <__ccfg+0x12f1fd4>
		syserror (ERESOURCE, "addv");
    11fc:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	if (ioreq [loc] != NULL)
    1200:	43435f47 	movtmi	r5, #16199	; 0x3f47
    1204:	545f4746 	ldrbpl	r4, [pc], #-1862	; 120c <adddevfunc+0x18>
		syserror (ERESOURCE, "addv");
    1208:	504f5f49 	subpl	r5, pc, r9, asr #30
	ioreq [loc] = rf;
    120c:	4e4f4954 			; <UNDEFINED> instruction: 0x4e4f4954
}
    1210:	50470053 	subpl	r0, r7, r3, asr r0
    1214:	725f4f49 	subsvc	r4, pc, #292	; 0x124
sint io (word retry, word dev, word operation, char *buf, word len) {
    1218:	44646165 	strbtmi	r6, [r4], #-357	; 0xfffffe9b
    121c:	6a006f69 	bvs	1cfc8 <__exidx_end+0x18274>
    1220:	006b6e75 	rsbeq	r6, fp, r5, ror lr
    1224:	5f6e6970 	svcpl	0x006e6970
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1228:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
    122c:	725f726f 	subsvc	r7, pc, #-268435450	; 0xf0000006
    1230:	00646165 	rsbeq	r6, r4, r5, ror #2
		syserror (ENODEVICE, "io");
    1234:	5f6e6970 	svcpl	0x006e6970
    1238:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
	if (len == 0)
    123c:	695f726f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
	ret = (ioreq [dev]) (operation, buf, len);
    1240:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1244:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1190 <running>
	if (ret >= 0)
    1248:	616d2f65 	cmnvs	sp, r5, ror #30
	if (ret == -1) {
    124c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    1250:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
		if (retry == WNONE)
    1254:	706f746b 	rsbvc	r7, pc, fp, ror #8
		iowait (dev, operation, retry);
    1258:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    125c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1260:	4349502f 	movtmi	r5, #36911	; 0x902f
			release;
    1264:	502f534f 	eorpl	r5, pc, pc, asr #6
	if (ret == -2) {
    1268:	534f6369 	movtpl	r6, #62313	; 0xf369
		if (retry != WNONE) {
    126c:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    1270:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
			iowait (dev, operation, retry);
    1274:	6f736e65 	svcvs	0x00736e65
    1278:	702f7372 	eorvc	r7, pc, r2, ror r3	; <UNPREDICTABLE>
			(ioreq [dev]) (NONE, buf, len);
    127c:	735f6e69 	cmpvc	pc, #1680	; 0x690
    1280:	6f736e65 	svcvs	0x00736e65
    1284:	00632e72 	rsbeq	r2, r3, r2, ror lr
		(ioreq [dev]) (NONE, buf, len);
    1288:	6d726554 	cfldr64vs	mvdx6, [r2, #-336]!	; 0xfffffeb0
    128c:	63616200 	cmnvs	r1, #0, 4
    1290:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
}
    1294:	62654400 	rsbvs	r4, r5, #0, 8
	if (retry != WNONE) {
    1298:	636e756f 	cmnvs	lr, #465567744	; 0x1bc00000
		delay (-ret - 2, retry);
    129c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    12a0:	2f656d6f 	svccs	0x00656d6f
    12a4:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    12a8:	442f6e69 	strtmi	r6, [pc], #-3689	; 12b0 <io+0x98>
		release;
    12ac:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    12b0:	4f2f706f 	svcmi	0x002f706f
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    12b4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    12b8:	502f5445 	eorpl	r5, pc, r5, asr #8
    12bc:	534f4349 	movtpl	r4, #62281	; 0xf349
    12c0:	6369502f 	cmnvs	r9, #47	; 0x2f
    12c4:	502f534f 	eorpl	r5, pc, pc, asr #6
		syserror (ERESOURCE, "mal1");
    12c8:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    12cc:	2f4f492f 	svccs	0x004f492f
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    12d0:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    12d4:	2e736e6f 	cdpcs	14, 7, cr6, cr3, cr15, {3}
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12d8:	62700063 	rsbsvs	r0, r0, #99	; 0x63
	m_size (mpools [0]) = mlen - m_hdrlen;
    12dc:	6f747475 	svcvs	0x00747475
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12e0:	5f5f006e 	svcpl	0x005f006e
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12e4:	625f6970 	subsvs	r6, pc, #112, 18	; 0x1c0000
    12e8:	6f747475 	svcvs	0x00747475
}
    12ec:	6200736e 	andvs	r7, r0, #-1207959551	; 0xb8000001
    12f0:	6f747475 	svcvs	0x00747475
    12f4:	615f736e 	cmpvs	pc, lr, ror #6
    12f8:	6f697463 	svcvs	0x00697463
    12fc:	4345006e 	movtmi	r0, #20590	; 0x506e
    1300:	00746e6f 	rsbseq	r6, r4, pc, ror #28
void __pi_free (aword *ch) {
    1304:	695f6565 	ldmdbvs	pc, {r0, r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1308:	5f74696e 	svcpl	0x0074696e
    130c:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
		syserror (EMALLOC, "malg");
    1310:	70750065 	rsbsvc	r0, r5, r5, rrx
    1314:	63006f74 	movwvs	r6, #3956	; 0xf74
	mcfree [MA_NP] += m_size (ch);
    1318:	305f646d 	subscc	r6, pc, sp, ror #8
		m_size (ch) ^= MALLOC_UMASK;
    131c:	5f656500 	svcpl	0x00656500
    1320:	736f6c63 	cmnvc	pc, #25344	; 0x6300
	mcfree [MA_NP] += m_size (ch);
    1324:	65650065 	strbvs	r0, [r5, #-101]!	; 0xffffff9b
	QFREE;
    1328:	6172655f 	cmnvs	r2, pc, asr r5
	if (mevent [MA_NP] . nwait) {
    132c:	65006573 	strvs	r6, [r0, #-1395]	; 0xfffffa8d
    1330:	72775f65 	rsbsvc	r5, r7, #404	; 0x194
		trigger ((aword)(&(mevent [MA_NP])));
    1334:	00657469 	rsbeq	r7, r5, r9, ror #8
		mevent [MA_NP] . nwait --;
    1338:	65706f64 	ldrbvs	r6, [r0, #-3940]!	; 0xfffff09c
}
    133c:	6565006e 	strbvs	r0, [r5, #-110]!	; 0xffffff92
    1340:	65706f5f 	ldrbvs	r6, [r0, #-3935]!	; 0xfffff0a1
    1344:	4357006e 	cmpmi	r7, #110	; 0x6e
    1348:	00746e6f 	rsbseq	r6, r4, pc, ror #28
void kill (aword pid) {
    134c:	5f646d63 	svcpl	0x00646d63
		pid = (aword) __pi_curr;
    1350:	65650033 	strbvs	r0, [r5, #-51]!	; 0xffffffcd
	j = NULL;
    1354:	6e61705f 	mcrvs	0, 3, r7, cr1, cr15, {2}
	for_all_tasks (i) {
    1358:	65006369 	strvs	r6, [r0, #-873]	; 0xfffffc97
	syserror (EREQPAR, "kpi");
    135c:	79735f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1360:	6600636e 	strvs	r6, [r0], -lr, ror #6
		if ((aword)i == pid) {
    1364:	006d6f72 	rsbeq	r6, sp, r2, ror pc
    1368:	725f6565 	subsvc	r6, pc, #423624704	; 0x19400000
				__PCB = i->Next;
    136c:	00646165 	rsbeq	r6, r4, r5, ror #2
			killev (i);
    1370:	72736472 	rsbsvc	r6, r3, #1912602624	; 0x72000000
			ufree (i);
    1374:	6f682f00 	svcvs	0x00682f00
			if (i == __pi_curr)
    1378:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 11cc <__pi_strcpy+0xa>
    137c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
				release;
    1380:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
				j->Next = i->Next;
    1384:	6f746b73 	svcvs	0x00746b73
    1388:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    138c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
}
    1390:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1394:	2f534f43 	svccs	0x00534f43
    1398:	4f636950 	svcmi	0x00636950
	if (size < 8)
    139c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
		_size = 2;
    13a0:	2f736269 	svccs	0x00736269
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13a4:	726f7453 	rsbvc	r7, pc, #1392508928	; 0x53000000
		_size = (((aword)size) + 3) >> 2;
    13a8:	2f656761 	svccs	0x00656761
		if (m_magic (chunk) != MALLOC_MAGIC)
    13ac:	726f7473 	rsbvc	r7, pc, #1929379840	; 0x73000000
		_size = (((aword)size) + 3) >> 2;
    13b0:	5f656761 	svcpl	0x00656761
		if (mevent [MA_NP] . nfail != 255)
    13b4:	3532786d 	ldrcc	r7, [r2, #-2157]!	; 0xfffff793
    13b8:	33303872 	teqcc	r0, #7471104	; 0x720000
			mevent [MA_NP] . nfail ++;
    13bc:	00632e35 	rsbeq	r2, r3, r5, lsr lr
		mnfree [MA_NP] = 0;
    13c0:	6f6c6363 	svcvs	0x006c6363
    13c4:	64006573 	strvs	r6, [r0], #-1395	; 0xfffffa8d
		if (m_magic (chunk) != MALLOC_MAGIC)
    13c8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    13cc:	706f6300 	rsbvc	r6, pc, r0, lsl #6
			syserror (EMALLOC, "malc");
    13d0:	63006e65 	movwvs	r6, #3685	; 0xe65
    13d4:	00727470 	rsbseq	r7, r2, r0, ror r4
		if (m_size (chunk) >= _size)
    13d8:	735f6565 	cmpvc	pc, #423624704	; 0x19400000
    13dc:	00657a69 	rsbeq	r7, r5, r9, ror #20
		chunk = m_nextp (chunk)) {
    13e0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
		m_setnextp (cc, m_nextp (chunk));
    13e4:	44450079 	strbmi	r0, [r5], #-121	; 0xffffff87
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    13e8:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    13ec:	776f6470 			; <UNDEFINED> instruction: 0x776f6470
			m_size (chunk) = _size;
    13f0:	7777006e 	ldrbvc	r0, [r7, -lr, rrx]!
			cc = chunk + _size + m_hdrlen;
    13f4:	00746961 	rsbseq	r6, r4, r1, ror #18
    13f8:	5f746567 	svcpl	0x00746567
			m_size (cc) = waste - m_hdrlen;
    13fc:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
			QFREE;
    1400:	74757000 	ldrbtvc	r7, [r5], #-0
		mevent [MA_NP] . nfail = 0;
    1404:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
		mcfree [MA_NP] -= m_size (chunk);
    1408:	5f5f0065 	svcpl	0x005f0065
    140c:	6c706e69 	ldclvs	14, cr6, [r0], #-420	; 0xfffffe5c
    1410:	00656e69 	rsbeq	r6, r5, r9, ror #28
    1414:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1360 <kill+0x14>
		m_size (chunk) |= MALLOC_UMASK;
    1418:	616d2f65 	cmnvs	sp, r5, ror #30
		if (mnfree [MA_NP] > mcfree [MA_NP])
    141c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
		m_size (chunk) |= MALLOC_UMASK;
    1420:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
			mnfree [MA_NP] = mcfree [MA_NP];
    1424:	706f746b 	rsbvc	r7, pc, fp, ror #8
}
    1428:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    142c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1430:	4349502f 	movtmi	r5, #36911	; 0x902f
    1434:	502f534f 	eorpl	r5, pc, pc, asr #6
    1438:	534f6369 	movtpl	r6, #62313	; 0xf369
    143c:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    1440:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
aword __pi_fork (fsmcode func, aword data) {
    1444:	61697265 	cmnvs	r9, r5, ror #4
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1448:	65732f6c 	ldrbvs	r2, [r3, #-3948]!	; 0xfffff094
    144c:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
    1450:	7300632e 	movwvc	r6, #814	; 0x32e
		if ((j = __PCB) == NULL)
    1454:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
	i->Next = NULL;
    1458:	6573006e 	ldrbvs	r0, [r3, #-110]!	; 0xffffff92
	i->data = data;
    145c:	756f5f72 	strbvc	r5, [pc, #-3954]!	; 4f2 <tci_run_delay_timer+0x2e>
		if ((j = __PCB) == NULL)
    1460:	2f006674 	svccs	0x00006674
}
    1464:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
			for (; j->Next != NULL; j = j->Next);
    1468:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    146c:	2f6e6974 	svccs	0x006e6974
	return (aword) i;
    1470:	6b736544 	blvs	1cda988 <__ccfg+0x1cba9e0>
    1474:	2f706f74 	svccs	0x00706f74
	if (mevent [MA_NP] . nwait != 255)
    1478:	4f534c4f 	svcmi	0x00534c4f
    147c:	2f54454e 	svccs	0x0054454e
    1480:	4f434950 	svcmi	0x00434950
		mevent [MA_NP] . nwait ++;
    1484:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
	wait ((aword)(&(mevent [MA_NP])), state);
    1488:	2f534f63 	svccs	0x00534f63
    148c:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
void diag (const char *mess, ...) {
    1490:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    1494:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    1498:	7265732f 	rsbvc	r7, r5, #-1140850688	; 0xbc000000
	diag_disable_int (a, is);
    149c:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    14a0:	00632e66 	rsbeq	r2, r3, r6, ror #28
    14a4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 13f0 <__pi_malloc+0x54>
				d = (bc == 16) ? 10000 : 1000000000;
    14a8:	616d2f65 	cmnvs	sp, r5, ror #30
	diag_disable_int (a, is);
    14ac:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
	while (*mess != '\0') {
    14b0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
	dgout ('\r');
    14b4:	706f746b 	rsbvc	r7, pc, fp, ror #8
	dgout ('\n');
    14b8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    14bc:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    14c0:	4349502f 	movtmi	r5, #36911	; 0x902f
	diag_wait (a);
    14c4:	502f534f 	eorpl	r5, pc, pc, asr #6
	diag_enable_int (a, is);
    14c8:	534f6369 	movtpl	r6, #62313	; 0xf369
    14cc:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
}
    14d0:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    14d4:	61697265 	cmnvs	r9, r5, ror #4
    14d8:	65732f6c 	ldrbvs	r2, [r3, #-3948]!	; 0xfffff094
		if (*mess == '%') {
    14dc:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
    14e0:	00632e66 	rsbeq	r2, r3, r6, ror #28
			if (*mess == 'l') {
    14e4:	5f726573 	svcpl	0x00726573
    14e8:	00666e69 	rsbeq	r6, r6, r9, ror #28
				mess++;
    14ec:	75737369 	ldrbvc	r7, [r3, #-873]!	; 0xfffffc97
				val = va_arg (ap, lword);
    14f0:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
				bc = 32;
    14f4:	6f6d0064 	svcvs	0x006d0064
				bc = 16;
    14f8:	616c7564 	cmnvs	ip, r4, ror #10
			switch (*mess) {
    14fc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1500:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 1508 <diag+0x78>
    1504:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
				dgout ('%');
    1508:	62006f4e 	andvs	r6, r0, #312	; 0x138
    150c:	65707041 	ldrbvs	r7, [r0, #-65]!	; 0xffffffbf
				dgout (*mess);
    1510:	7453646e 	ldrbvc	r6, [r3], #-1134	; 0xfffffb92
    1514:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
			switch (*mess) {
    1518:	5f667200 	svcpl	0x00667200
					v = __pi_hex_enc_table [
    151c:	72006e6f 	andvc	r6, r0, #1776	; 0x6f0
					i += 4;
    1520:	69725466 	ldmdbvs	r2!, {r1, r2, r5, r6, sl, ip, lr}^
					(val >> (bc - i)) & 0xf];
    1524:	6f5f006d 	svcvs	0x005f006d
    1528:	78655f6e 	stmdavc	r5!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
					dgout (v);
    152c:	615f7469 	cmpvs	pc, r9, ror #8
    1530:	00736772 	rsbseq	r6, r3, r2, ror r7
				while (i < bc) {
    1534:	72615662 	rsbvc	r5, r1, #102760448	; 0x6200000
			mess++;
    1538:	006e654c 	rsbeq	r6, lr, ip, asr #10
					d /= 10;
    153c:	746b5070 	strbtvc	r5, [fp], #-112	; 0xffffff90
				if ((val >> (bc - 1)) & 1) {
    1540:	63775f00 	cmnvs	r7, #0, 30
    1544:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
					dgout ('-');
    1548:	6174735f 	cmnvs	r4, pc, asr r3
    154c:	63006574 	movwvs	r6, #1396	; 0x574
						val |= 0xffff0000;
    1550:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
    1554:	65724672 	ldrbvs	r4, [r2, #-1650]!	; 0xfffff98e
    1558:	6f630071 	svcvs	0x00630071
				d = (bc == 16) ? 10000 : 1000000000;
    155c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1560:	47657275 			; <UNDEFINED> instruction: 0x47657275
    1564:	73666e65 	cmnvc	r6, #1616	; 0x650
					v = (word) (val / d);
    1568:	7461506b 	strbtvc	r5, [r1], #-107	; 0xffffff95
					if (v || d == 1) break;
    156c:	5f006863 	svcpl	0x00006863
    1570:	00383472 	eorseq	r3, r8, r2, ror r4
					d /= 10;
    1574:	74696877 	strbtvc	r6, [r9], #-2167	; 0xfffff789
				d = (bc == 16) ? 10000 : 1000000000;
    1578:	6f4d6e65 	svcvs	0x004d6e65
					dgout (v + '0');
    157c:	72006564 	andvc	r6, r0, #100, 10	; 0x19000000
    1580:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    1584:	505f444d 	subspl	r4, pc, sp, asr #8
					d /= 10;
    1588:	5f504f52 	svcpl	0x00504f52
					val = val - (v * d);
    158c:	735f5343 	cmpvc	pc, #201326593	; 0xc000001
					if (d == 0) break;
    1590:	73617000 	cmnvc	r1, #0
					v = (word) (val / d);
    1594:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1598:	5f5f0067 	svcpl	0x005f0067
				if (bc == 16)
    159c:	735f6d74 	cmpvc	pc, #116, 26	; 0x1d00
				d = (bc == 16) ? 10000 : 1000000000;
    15a0:	72006365 	andvc	r6, r0, #-1811939327	; 0x94000001
					val &= 0xffff;
    15a4:	66667562 	strbtvs	r7, [r6], -r2, ror #10
					dgout (*s);
    15a8:	5244006c 	subpl	r0, r4, #108	; 0x6c
					s++;
    15ac:	4f4f4c5f 	svcmi	0x004f4c5f
				while (*s != '\0') {
    15b0:	005f5f50 	subseq	r5, pc, r0, asr pc	; <UNPREDICTABLE>
    15b4:	66626c5f 			; <UNDEFINED> instruction: 0x66626c5f
			dgout (*mess++);
    15b8:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
    15bc:	6c665f00 	stclvs	15, cr5, [r6], #-0
    15c0:	00736761 	rsbseq	r6, r3, r1, ror #14
    15c4:	74754f70 	ldrbtvc	r4, [r5], #-3952	; 0xfffff090
    15c8:	00747570 	rsbseq	r7, r4, r0, ror r5
	__pi_seed = __pi_seed * 1103515245 + 12345;
    15cc:	70655262 	rsbvc	r5, r5, r2, ror #4
    15d0:	4f746165 	svcmi	0x00746165
    15d4:	526e006b 	rsbpl	r0, lr, #107	; 0x6b
    15d8:	6e674978 			; <UNDEFINED> instruction: 0x6e674978
	^ entropy
    15dc:	6465726f 	strbtvs	r7, [r5], #-623	; 0xfffffd91
}
    15e0:	63656600 	cmnvs	r5, #0, 12
    15e4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    15e8:	78526e00 	ldmdavc	r2, {r9, sl, fp, sp, lr}^
    15ec:	006b6f4e 	rsbeq	r6, fp, lr, asr #30
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    15f0:	434f4c5f 	movtmi	r4, #64607	; 0xfc5f
	word cs = size + hblenb;
    15f4:	45525f4b 	ldrbmi	r5, [r2, #-3915]	; 0xfffff0b5
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    15f8:	53525543 	cmppl	r2, #281018368	; 0x10c00000
    15fc:	5f455649 	svcpl	0x00455649
	p -> length = size;
    1600:	666f0054 			; <UNDEFINED> instruction: 0x666f0054
}
    1604:	6c656466 	cfstrdvs	mvd6, [r5], #-408	; 0xfffffe68
	if (p->attributes.b.queued) {
    1608:	70007961 	andvc	r7, r0, r1, ror #18
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    160c:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    1610:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1614:	626d5f00 	rsbvs	r5, sp, #0, 30
		p->attributes.b.queued = 0;
    1618:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
    161c:	6174735f 	cmnvs	r4, pc, asr r3
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1620:	70006574 	andvc	r6, r0, r4, ror r5
	deq (p);	// Remove from queue
    1624:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
}
    1628:	72746e45 	rsbsvc	r6, r4, #1104	; 0x450
	tfree ((address)p);
    162c:	735f0079 	cmpvc	pc, #121	; 0x79
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1630:	756f6474 	strbvc	r6, [pc, #-1140]!	; 11c4 <__pi_strcpy+0x2>
    1634:	69740074 	ldmdbvs	r4!, {r2, r4, r5, r6}^
    1638:	7453656d 	ldrbvc	r6, [r3], #-1389	; 0xfffffa93
	sysassert (p->attributes.b.queued == 0, "tcv01");
    163c:	00706d61 	rsbseq	r6, r0, r1, ror #26
    1640:	6f70665f 	svcvs	0x0070665f
	if (q_empty (q))
    1644:	00745f73 	rsbseq	r5, r4, r3, ror pc
    1648:	72546672 	subsvc	r6, r4, #119537664	; 0x7200000
		trigger (q);
    164c:	745f6d69 	ldrbvc	r6, [pc], #-3433	; 1654 <enq+0x24>
	if (p->attributes.b.urgent) {
    1650:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
		p->u.bqueue.next = q->next;
    1654:	635f0073 	cmpvs	pc, #115	; 0x73
		p->u.bqueue.prev = q;
    1658:	696b6f6f 	stmdbvs	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
		q->next->prev = (qitem_t*) p;
    165c:	72690065 	rsbvc	r0, r9, #101	; 0x65
	p->attributes.b.queued = 1;
    1660:	746e4971 	strbtvc	r4, [lr], #-2417	; 0xfffff68f
    1664:	61770076 	cmnvs	r7, r6, ror r0
}
    1668:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
		p->u.bqueue.prev = q->prev;
    166c:	5f00646d 	svcpl	0x0000646d
		q->prev->next = (qitem_t*) p;
    1670:	69676942 	stmdbvs	r7!, {r1, r6, r8, fp, sp, lr}^
		q->prev = (qitem_t*) p;
    1674:	5f00746e 	svcpl	0x0000746e
    1678:	5f6d745f 	svcpl	0x006d745f
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    167c:	79616477 	stmdbvc	r1!, {r0, r1, r2, r4, r5, r6, sl, sp, lr}^
	deq (p);	// Soft dequeue, timer and hook left intact
    1680:	726f6600 	rsbvc	r6, pc, #0, 12
	switch (dv) {
    1684:	4374616d 	cmnmi	r4, #1073741851	; 0x4000001b
    1688:	00666e6f 	rsbeq	r6, r6, pc, ror #28
    168c:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
    1690:	00746c75 	rsbseq	r6, r4, r5, ror ip
			p->attributes.b.urgent = 1;
    1694:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    1698:	6d695474 	cfstrdvs	mvd5, [r9, #-464]!	; 0xfffffe30
			verify_ses (p, "dispose ses");
    169c:	5f5f0065 	svcpl	0x005f0065
    16a0:	685f6d74 	ldmdavs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    16a4:	0072756f 	rsbseq	r7, r2, pc, ror #10
    16a8:	70704162 	rsbsvc	r4, r0, r2, ror #2
    16ac:	54646e65 	strbtpl	r6, [r4], #-3685	; 0xfffff19b
			verify_phy (p, "dispose phy");
    16b0:	73656d69 	cmnvc	r5, #6720	; 0x1a40
    16b4:	706d6174 	rsbvc	r6, sp, r4, ror r1
}
    16b8:	654e7000 	strbvs	r7, [lr, #-0]
			enq (oqueues [p->attributes.b.phys], p);
    16bc:	6e457478 	mcrvs	4, 2, r7, cr5, cr8, {3}
			p->attributes.b.urgent = 1;
    16c0:	00797274 	rsbseq	r7, r9, r4, ror r2
    16c4:	6f635f5f 	svcvs	0x00635f5f
			verify_phy (p, "dispose phy");
    16c8:	00746e75 	rsbseq	r6, r4, r5, ror lr
    16cc:	635f4652 	cmpvs	pc, #85983232	; 0x5200000
    16d0:	7250646d 	subsvc	r6, r0, #1828716544	; 0x6d000000
    16d4:	6152706f 	cmpvs	r2, pc, rrx
    16d8:	446f6964 	strbtmi	r6, [pc], #-2404	; 16e0 <dispose+0x64>
    16dc:	65537669 	ldrbvs	r7, [r3, #-1641]	; 0xfffff997
			enq (oqueues [p->attributes.b.phys], p);
    16e0:	00707574 	rsbseq	r7, r0, r4, ror r5
    16e4:	65766571 	ldrbvs	r6, [r6, #-1393]!	; 0xfffffa8f
}
    16e8:	5f00746e 	svcpl	0x0000746e
			rlp (p);
    16ec:	5f6d745f 	svcpl	0x006d745f
}
    16f0:	006e696d 	rsbeq	r6, lr, sp, ror #18
    16f4:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
    16f8:	70006674 	andvc	r6, r0, r4, ror r6
    16fc:	6f43746b 	svcvs	0x0043746b
    1700:	5f00666e 	svcpl	0x0000666e
    1704:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1708:	70003834 	andvc	r3, r0, r4, lsr r8
	if (b->attributes.b.outgoing) {
    170c:	5f737968 	svcpl	0x00737968
	b = header (p);
    1710:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
	if (b->attributes.b.outgoing) {
    1714:	5f003035 	svcpl	0x00003035
		verify_ses (b, "tcv02");
    1718:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
    171c:	6b5f746c 	blvs	17de8d4 <__ccfg+0x17be92c>
    1720:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
    1724:	6c616e67 	stclvs	14, cr6, [r1], #-412	; 0xfffffe64
    1728:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
		verify_plg (b, tcv_out, "tcv03");
    172c:	73615f00 	cmnvc	r1, #0, 30
    1730:	6d697463 	cfstrdvs	mvd7, [r9, #-396]!	; 0xfffffe74
    1734:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xfffff09b
    1738:	5f5f0066 	svcpl	0x005f0066
    173c:	4c494673 	mcrrmi	6, 7, r4, r9, cr3
    1740:	775f0045 	ldrbvc	r0, [pc, -r5, asr #32]
    1744:	63007364 	movwvs	r7, #868	; 0x364
    1748:	35333163 	ldrcc	r3, [r3, #-355]!	; 0xfffffe9d
    174c:	72645f30 	rsbvc	r5, r4, #48, 30	; 0xc0
		dispose (b, plugins [b->attributes.b.plugin] ->
    1750:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
}
    1754:	63667200 	cmnvs	r6, #0, 4
		dispose (b, plugins [b->attributes.b.plugin] ->
    1758:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
		rlp (b);
    175c:	5f53465f 	svcpl	0x0053465f
}
    1760:	66720073 			; <UNDEFINED> instruction: 0x66720073
		rlp (b);
    1764:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    1768:	53465f44 	movtpl	r5, #28484	; 0x6f44
    176c:	7400745f 	strvc	r7, [r0], #-1119	; 0xfffffba1
    1770:	776f5078 			; <UNDEFINED> instruction: 0x776f5078
    1774:	5f007265 	svcpl	0x00007265
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1778:	4c49465f 	mcrrmi	6, 5, r4, r9, cr15
    177c:	78720045 	ldmdavc	r2!, {r0, r2, r6}^
    1780:	5f007742 	svcpl	0x00007742
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1784:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
	va_start (ap, plid);
    1788:	61007465 	tstvs	r0, r5, ror #8
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    178c:	796c7070 	stmdbvc	ip!, {r4, r5, r6, ip, sp, lr}^
    1790:	666e6547 	strbtvs	r6, [lr], -r7, asr #10
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1794:	61506b73 	cmpvs	r0, r3, ror fp
    1798:	00686374 	rsbeq	r6, r8, r4, ror r3
    179c:	6e616863 	cdpvs	8, 6, cr6, cr1, cr3, {3}
    17a0:	006c656e 	rsbeq	r6, ip, lr, ror #10
			syserror (ENODEVICE, "tcv04");
    17a4:	746e7973 	strbtvc	r7, [lr], #-2419	; 0xfffff68d
		syserror (EMALLOC, "tcv05");
    17a8:	6e6f4368 	cdpvs	3, 6, cr4, cr15, cr8, {3}
	attp.b.outgoing = 1;
    17ac:	655f0066 	ldrbvs	r0, [pc, #-102]	; 174e <tcv_endp+0x46>
    17b0:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
    17b4:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    17b8:	75416200 	strbvc	r6, [r1, #-512]	; 0xfffffe00
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    17bc:	6c466f74 	mcrrvs	15, 7, r6, r6, cr4
		if (descriptors [fd] == NULL)
    17c0:	43687375 	cmnmi	r8, #-738197503	; 0xd4000001
    17c4:	72456372 	subvc	r6, r5, #-939524095	; 0xc8000001
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    17c8:	6f630072 	svcvs	0x00630072
		return ERROR;
    17cc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
}
    17d0:	72466652 	subvc	r6, r6, #85983232	; 0x5200000
    17d4:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
    17d8:	6200646e 	andvs	r6, r0, #1845493760	; 0x6e000000
	s->attpattern.b.session = fd;
    17dc:	6f4d7854 	svcvs	0x004d7854
    17e0:	61006564 	tstvs	r0, r4, ror #10
	descriptors [fd] = s;
    17e4:	6f6c616e 	svcvs	0x006c616e
	q_init (&(s->rqueue));
    17e8:	67664367 	strbvs	r4, [r6, -r7, ror #6]!
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    17ec:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    17f0:	6e456200 	cdpvs	2, 4, cr6, cr5, cr0, {0}
    17f4:	646d4361 	strbtvs	r4, [sp], #-865	; 0xfffffc9f
    17f8:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    17fc:	72726f43 	rsbsvc	r6, r2, #268	; 0x10c
    1800:	00766e49 	rsbseq	r6, r6, r9, asr #28
    1804:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
	descriptors [fd] = s;
    1808:	6164795f 	cmnvs	r4, pc, asr r9
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    180c:	695f0079 	ldmdbvs	pc, {r0, r3, r4, r5, r6}^	; <UNPREDICTABLE>
    1810:	5f00636e 	svcpl	0x0000636e
	if (s == NULL)
    1814:	00646e69 	rsbeq	r6, r4, r9, ror #28
		syserror (EMALLOC, "tcv05");
    1818:	71724970 	cmnvc	r2, r0, ror r9
    181c:	63746150 	cmnvs	r4, #80, 2
    1820:	50700068 	rsbspl	r0, r0, r8, rrx
    1824:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    1828:	00636556 	rsbeq	r6, r3, r6, asr r5
    182c:	43434652 	movtmi	r4, #13906	; 0x3652
    1830:	6e496570 	mcrvs	5, 2, r6, cr9, cr0, {3}
    1834:	73694474 	cmnvc	r9, #116, 8	; 0x74000000
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    1838:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
	    (plugins [ord] != NULL && plugins [ord] != pl))
    183c:	78616d00 	stmdavc	r1!, {r8, sl, fp, sp, lr}^
    1840:	4c746b50 			; <UNDEFINED> instruction: 0x4c746b50
    1844:	5f006e65 	svcpl	0x00006e65
	plugins [ord] = pl;
    1848:	7273626d 	rsbsvc	r6, r3, #-805306362	; 0xd0000006
	return 0;
    184c:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
		return ERROR;
    1850:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
}
    1854:	00657461 	rsbeq	r7, r5, r1, ror #8
    1858:	72726f63 	rsbsvc	r6, r2, #396	; 0x18c
	verify_fds (fd, "tcv10");
    185c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    1860:	72006769 	andvc	r6, r0, #27525120	; 0x1a40000
	verify_fds (fd, "tcv10");
    1864:	00307461 	eorseq	r7, r0, r1, ror #8
    1868:	73616962 	cmnvc	r1, #1605632	; 0x188000
    186c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
	verify_plg (b, tcv_frm, "tcv11");
    1870:	43465200 	movtmi	r5, #25088	; 0x6200
	b = q_first (rq);
    1874:	30657043 	rsbcc	r7, r5, r3, asr #32
	if (q_end (b, rq)) {
    1878:	45746e49 	ldrbmi	r6, [r4, #-3657]!	; 0xfffff1b7
		if (state != WNONE) {
    187c:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    1880:	49620065 	stmdbmi	r2!, {r0, r2, r5, r6}^
			when (rq, state);
    1884:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
			release;
    1888:	72436564 	subvc	r6, r3, #100, 10	; 0x19000000
	deq (b);	// Dequeue the packet ...
    188c:	5f5f0063 	svcpl	0x005f0063
    1890:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
	p = ((address)(b + 1));
    1894:	6f630065 	svcvs	0x00630065
	verify_plg (b, tcv_frm, "tcv11");
    1898:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    189c:	64416649 	strbvs	r6, [r1], #-1609	; 0xfffff9b7
    18a0:	705f0063 	subsvc	r0, pc, r3, rrx
    18a4:	72007335 	andvc	r7, r0, #-738197504	; 0xd4000000
    18a8:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    18ac:	505f444d 	subspl	r4, pc, sp, asr #8
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    18b0:	5f504f52 	svcpl	0x00504f52
    18b4:	735f5852 	cmpvc	pc, #5373952	; 0x520000
		b->length - b->u.pointers.head - b->u.pointers.tail;
    18b8:	646e6500 	strbtvs	r6, [lr], #-1280	; 0xfffffb00
    18bc:	67697254 			; <UNDEFINED> instruction: 0x67697254
	b->u.pointers.tail =
    18c0:	00726567 	rsbseq	r6, r2, r7, ror #10
}
    18c4:	7363775f 	cmnvc	r3, #24903680	; 0x17c0000
		return NULL;
    18c8:	6d6f7472 	cfstrdvs	mvd7, [pc, #-456]!	; 1708 <tcv_endp>
    18cc:	735f7362 	cmpvc	pc, #-2013265919	; 0x88000001
    18d0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    18d4:	626d5f00 	rsbvs	r5, sp, #0, 30
    18d8:	5f6e656c 	svcpl	0x006e656c
	verify_fds (fd, "tcv16");
    18dc:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
								Boolean urg) {
    18e0:	66720065 	ldrbtvs	r0, [r2], -r5, rrx
    18e4:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
	verify_fds (fd, "tcv16");
    18e8:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    18ec:	435f504f 	cmpmi	pc, #79	; 0x4f
    18f0:	00745f53 	rsbseq	r5, r4, r3, asr pc
	verify_pld (s, tcv_frm, "tcv17");
    18f4:	6e6f7266 	cdpvs	2, 6, cr7, cr15, cr6, {3}
    18f8:	646e4574 	strbtvs	r4, [lr], #-1396	; 0xfffffa8c
    18fc:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1900:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 1908 <tcv_wnps+0x2c>
    1904:	646d5f6d 	strbtvs	r5, [sp], #-3949	; 0xfffff093
    1908:	5f007961 	svcpl	0x00007961
    190c:	5f676973 	svcpl	0x00676973
    1910:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
	ptrs.head = (word) fd;
    1914:	626d5f00 	rsbvs	r5, sp, #0, 30
	ptrs.tail = (word) urg;
    1918:	776f7472 			; <UNDEFINED> instruction: 0x776f7472
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    191c:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
    1920:	00657461 	rsbeq	r7, r5, r1, ror #8
		if (state != WNONE) {
    1924:	6574615f 	ldrbvs	r6, [r4, #-351]!	; 0xfffffea1
    1928:	30746978 	rsbscc	r6, r4, r8, ror r9
}
    192c:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
			when (eid, state);
    1930:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    1934:	70006f4e 	andvc	r6, r0, lr, asr #30
			release;
    1938:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    193c:	6e650065 	cdpvs	0, 6, cr0, cr5, cr5, {3}
    1940:	70795464 	rsbsvc	r5, r9, r4, ror #8
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    1944:	6d630065 	stclvs	0, cr0, [r3, #-404]!	; 0xfffffe6c
    1948:	73635f64 	cmnvc	r3, #100, 30	; 0x190
    194c:	73737200 	cmnvc	r3, #0, 4
    1950:	72685469 	rsbvc	r5, r8, #1761607680	; 0x69000000
    1954:	6c665f00 	stclvs	15, cr5, [r6], #-0
    1958:	5f6b636f 	svcpl	0x006b636f
		if (state != WNONE) {
    195c:	756e0074 	strbvc	r0, [lr, #-116]!	; 0xffffff8c
    1960:	726f436d 	rsbvc	r4, pc, #-1275068415	; 0xb4000001
			tmwait (state);
    1964:	73754272 	cmnvc	r5, #536870919	; 0x20000007
    1968:	5f5f0079 	svcpl	0x005f0079
	b->attributes = s->attpattern;
    196c:	00686377 	rsbeq	r6, r8, r7, ror r3
		b->attributes.b.urgent = 1;
    1970:	626f695f 	rsbvs	r6, pc, #1556480	; 0x17c000
    1974:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
	b->u.pointers.head = ptrs.head;
    1978:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
	b->u.pointers.tail = length;
    197c:	61565200 	cmpvs	r6, r0, lsl #4
	return (address) (b + 1);
    1980:	6f63006c 	svcvs	0x0063006c
    1984:	7469646e 	strbtvc	r6, [r9], #-1134	; 0xfffffb92
    1988:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    198c:	636e4962 	cmnvs	lr, #1605632	; 0x188000
    1990:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1994:	00726448 	rsbseq	r6, r2, r8, asr #8
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1998:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
    199c:	69737352 	ldmdbvs	r3!, {r1, r4, r6, r8, r9, ip, sp, lr}^
    19a0:	735f5f00 	cmpvc	pc, #0, 30
	verify_fph (phy, "tcv23");
    19a4:	69646964 	stmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
    19a8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    19ac:	54646f6d 	strbtpl	r6, [r4], #-3949	; 0xfffff093
    19b0:	00657079 	rsbeq	r7, r5, r9, ror r0
}
    19b4:	73614c70 	cmnvc	r1, #112, 24	; 0x7000
	return (physical [phy]) (opt, arg);
    19b8:	746e4574 	strbtvc	r4, [lr], #-1396	; 0xfffffa8c
    19bc:	6e007972 			; <UNDEFINED> instruction: 0x6e007972
    19c0:	75427852 	strbvc	r7, [r2, #-2130]	; 0xfffff7ae
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    19c4:	6c754666 	ldclvs	6, cr4, [r5], #-408	; 0xfffffe68
	if (opt < 0) {
    19c8:	7872006c 	ldmdavc	r2!, {r2, r3, r5, r6}^
		if (fd < 0)
    19cc:	0063615f 	rsbeq	r6, r3, pc, asr r1
		if (opt == PHYSOPT_PLUGINFO) {
    19d0:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
			if (fd >= TCV_MAX_PLUGS)
    19d4:	6b73614d 	blvs	1cd9f10 <__ccfg+0x1cb9f68>
			if ((p = plugins [fd]) == NULL)
    19d8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    19dc:	006e6964 	rsbeq	r6, lr, r4, ror #18
}
    19e0:	6d61675f 	stclvs	7, cr6, [r1, #-380]!	; 0xfffffe84
		if (fd >= TCV_MAX_PHYS)
    19e4:	735f616d 	cmpvc	pc, #1073741851	; 0x4000001b
		return physinfo [fd];
    19e8:	676e6769 	strbvs	r6, [lr, -r9, ror #14]!
    19ec:	63006d61 	movwvs	r6, #3425	; 0xd61
	verify_fds (fd, "tcv22");
    19f0:	646e4573 	strbtvs	r4, [lr], #-1395	; 0xfffffa8d
    19f4:	67697254 			; <UNDEFINED> instruction: 0x67697254
    19f8:	00726567 	rsbseq	r6, r2, r7, ror #10
    19fc:	7361625f 	cmnvc	r1, #-268435451	; 0xf0000005
    1a00:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
}
    1a04:	6c656572 	cfstr64vs	mvdx6, [r5], #-456	; 0xfffffe38
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    1a08:	00747369 	rsbseq	r7, r4, r9, ror #6
    1a0c:	6c756d5f 	ldclvs	13, cr6, [r5], #-380	; 0xfffffe84
			return 0;
    1a10:	5f5f0074 	svcpl	0x005f0074
    1a14:	6e6f4c55 	mcrvs	12, 3, r4, cr15, cr5, {2}
    1a18:	42620067 	rsbmi	r0, r2, #103	; 0x67
    1a1c:	65527469 	ldrbvs	r7, [r2, #-1129]	; 0xfffffb97
    1a20:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    1a24:	5f006c61 	svcpl	0x00006c61
    1a28:	74726377 	ldrbtvc	r6, [r2], #-887	; 0xfffffc89
	if (dsp != TCV_DSP_PASS) {
    1a2c:	5f626d6f 	svcpl	0x00626d6f
		if (ses == NONE)
    1a30:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
			syserror (EREQPAR, "tcv26");
    1a34:	5f5f0065 	svcpl	0x005f0065
		verify_fds (ses, "tcv27");
    1a38:	6d6d7564 	cfstr64vs	mvdx7, [sp, #-400]!	; 0xfffffe70
    1a3c:	5f003079 	svcpl	0x00003079
    1a40:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
    1a44:	6d797300 	ldclvs	3, cr7, [r9, #-0]
    1a48:	526c6f62 	rsbpl	r6, ip, #392	; 0x188
		if ((p = apb (size)) != NULL) {
    1a4c:	00657461 	rsbeq	r7, r5, r1, ror #8
    1a50:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
		return NULL;
    1a54:	7562725f 	strbvc	r7, [r2, #-607]!	; 0xfffffda1
			p->attributes = descriptors [ses] -> attpattern;
    1a58:	00736666 	rsbseq	r6, r3, r6, ror #12
			dispose (p, dsp);
    1a5c:	78654e70 	stmdavc	r5!, {r4, r5, r6, r9, sl, fp, lr}^
			p->attributes = descriptors [ses] -> attpattern;
    1a60:	00704f74 	rsbseq	r4, r0, r4, ror pc
			p->attributes.b.outgoing = 0;
    1a64:	46746e69 	ldrbtmi	r6, [r4], -r9, ror #28
			dispose (p, dsp);
    1a68:	00716572 	rsbseq	r6, r1, r2, ror r5
			return (address)(p + 1);
    1a6c:	6c635f5f 	stclvs	15, cr5, [r3], #-380	; 0xfffffe84
    1a70:	756e6165 	strbvc	r6, [lr, #-357]!	; 0xfffffe9b
	if ((p = apb (size)) != NULL)
    1a74:	41620070 	smcmi	8192	; 0x2000
    1a78:	466f7475 			; <UNDEFINED> instruction: 0x466f7475
		return (address)(p + 1);
    1a7c:	6873756c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    1a80:	6f6e6749 	svcvs	0x006e6749
    1a84:	00646572 	rsbeq	r6, r4, r2, ror r5
    1a88:	5f636672 	svcpl	0x00636672
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a8c:	69646172 	stmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1a90:	5f704f6f 	svcpl	0x00704f6f
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a94:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; 18cc <tcv_rnp+0x70>
    1a98:	61747362 	cmnvs	r4, r2, ror #6
		syserror (EREQPAR, "tcv28");
    1a9c:	745f6574 	ldrbvc	r6, [pc], #-1396	; 1aa4 <tcvphy_reg+0x18>
		syserror (EMALLOC, "tcv29");
    1aa0:	61747300 	cmnvs	r4, r0, lsl #6
	physical [phy] = ps;
    1aa4:	72547472 	subsvc	r7, r4, #1912602624	; 0x72000000
	physinfo [phy] = info;
    1aa8:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
    1aac:	61700072 	cmnvs	r0, r2, ror r0
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1ab0:	49686374 	stmdbmi	r8!, {r2, r4, r5, r6, r8, r9, sp, lr}^
    1ab4:	6567616d 	strbvs	r6, [r7, #-365]!	; 0xfffffe93
    1ab8:	666e6547 	strbtvs	r6, [lr], -r7, asr #10
		syserror (EMALLOC, "tcv29");
    1abc:	72006b73 	andvc	r6, r0, #117760	; 0x1cc00
    1ac0:	666f5f66 	strbtvs	r5, [pc], -r6, ror #30
	q_init (q);
    1ac4:	5f5f0066 	svcpl	0x005f0066
}
    1ac8:	695f6d74 	ldmdbvs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    1acc:	74736473 	ldrbtvc	r6, [r3], #-1139	; 0xfffffb8d
    1ad0:	6e456200 	cdpvs	2, 4, cr6, cr5, cr0, {0}
    1ad4:	726f4361 	rsbvc	r4, pc, #-2080374783	; 0x84000001
    1ad8:	685f0072 	ldmdavs	pc, {r1, r4, r5, r6}^	; <UNPREDICTABLE>
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1adc:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
	verify_fph (phy, "tcv30");
    1ae0:	62006f6e 	andvs	r6, r0, #440	; 0x1b8
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ae4:	664f7346 	strbvs	r7, [pc], -r6, asr #6
    1ae8:	6c644966 			; <UNDEFINED> instruction: 0x6c644966
	verify_fph (phy, "tcv30");
    1aec:	46520065 	ldrbmi	r0, [r2], -r5, rrx
    1af0:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    1af4:	70007346 	andvc	r7, r0, r6, asr #6
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1af8:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    1afc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1b00:	6e797300 	cdpvs	3, 7, cr7, cr9, cr0, {0}
    1b04:	726f5763 	rsbvc	r5, pc, #25952256	; 0x18c0000
		if (plugins [plg] == NULL)
    1b08:	706f0064 	rsbvc	r0, pc, r4, rrx
    1b0c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1b10:	74617000 	strbtvc	r7, [r1], #-0
}
    1b14:	65476863 	strbvs	r6, [r7, #-2147]	; 0xfffff79d
    1b18:	6b73666e 	blvs	1cdb4d8 <__ccfg+0x1cbb530>
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1b1c:	00656652 	rsbeq	r6, r5, r2, asr r6
    1b20:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1a6c <tcvp_new+0x48>
    1b24:	616d2f65 	cmnvs	sp, r5, ror #30
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1b28:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    1b2c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1b30:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1b34:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1b38:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1b3c:	4349502f 	movtmi	r5, #36911	; 0x902f
	len -= (ap.head + ap.tail);
    1b40:	502f534f 	eorpl	r5, pc, pc, asr #6
    1b44:	534f6369 	movtpl	r6, #62313	; 0xf369
    1b48:	3143432f 	cmpcc	r3, pc, lsr #6
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1b4c:	2f585833 	svccs	0x00585833
    1b50:	72706672 	rsbsvc	r6, r0, #119537664	; 0x7200000
    1b54:	632e706f 			; <UNDEFINED> instruction: 0x632e706f
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1b58:	45736300 	ldrbmi	r6, [r3, #-768]!	; 0xfffffd00
    1b5c:	6954646e 	ldmdbvs	r4, {r1, r2, r3, r5, r6, sl, sp, lr}^
    1b60:	7200656d 	andvc	r6, r0, #457179136	; 0x1b400000
	return 1;
    1b64:	62617461 	rsbvs	r7, r1, #1627389952	; 0x61000000
    1b68:	745f656c 	ldrbvc	r6, [pc], #-1388	; 1b70 <tcvphy_rcv+0x94>
    1b6c:	726f6300 	rsbvc	r6, pc, #0, 6
    1b70:	72655072 	rsbvc	r5, r5, #114	; 0x72
    1b74:	00646f69 	rsbeq	r6, r4, r9, ror #30
	verify_fph (phy, "tcv32");
    1b78:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
    1b7c:	6e6f6d5f 	mcrvs	13, 3, r6, cr15, cr15, {2}
    1b80:	756c7000 	strbvc	r7, [ip, #-0]!
    1b84:	00747267 	rsbseq	r7, r4, r7, ror #4
    1b88:	43434652 	movtmi	r4, #13906	; 0x3652
    1b8c:	6e496570 	mcrvs	5, 2, r6, cr9, cr0, {3}
	oq = oqueues [phy];
    1b90:	656c4374 	strbvs	r4, [ip, #-884]!	; 0xfffffc8c
	b = q_first (oq);
    1b94:	70007261 	andvc	r7, r0, r1, ror #4
	if (q_end (b, oq)) {
    1b98:	6367756c 	cmnvs	r7, #108, 10	; 0x1b000000
	*len = b->length;
    1b9c:	61720068 	cmnvs	r2, r8, rrx
	deq (b);	// Dequeue the packet ...
    1ba0:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
}
    1ba4:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
		return NULL;
    1ba8:	756f656d 	strbvc	r6, [pc, #-1389]!	; 1643 <enq+0x13>
    1bac:	73655274 	cmnvc	r5, #116, 4	; 0x40000007
    1bb0:	61726600 	cmnvs	r2, r0, lsl #12
    1bb4:	72467463 	subvc	r7, r6, #1660944384	; 0x63000000
	verify_fph (phy, "tcv33");
    1bb8:	70007165 	andvc	r7, r0, r5, ror #2
    1bbc:	63536572 	cmpvs	r3, #478150656	; 0x1c800000
    1bc0:	00656c61 	rsbeq	r6, r5, r1, ror #24
    1bc4:	4277536e 	rsbsmi	r5, r7, #-1207959551	; 0xb8000001
    1bc8:	00737469 	rsbseq	r7, r3, r9, ror #8
    1bcc:	79737562 	ldmdbvc	r3!, {r1, r5, r6, r8, sl, ip, sp, lr}^
	oq = oqueues [phy];
    1bd0:	6c00704f 	stcvs	0, cr7, [r0], {79}	; 0x4f
	b = q_first (oq);
    1bd4:	7669446f 	strbtvc	r4, [r9], -pc, ror #8
		return NULL;
    1bd8:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
	return (address)(b + 1);
    1bdc:	61747300 	cmnvs	r4, r0, lsl #6
}
    1be0:	00646974 	rsbeq	r6, r4, r4, ror r9
    1be4:	6574615f 	ldrbvs	r6, [r4, #-351]!	; 0xfffffea1
    1be8:	00746978 	rsbseq	r6, r4, r8, ror r9
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1bec:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
	verify_plg (b, tcv_xmt, "tcv34");
    1bf0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
	hblock_t *b = header (pkt);
    1bf4:	5f667200 	svcpl	0x00667200
	verify_plg (b, tcv_xmt, "tcv34");
    1bf8:	63746170 	cmnvs	r4, #112, 2
    1bfc:	70635f68 	rsbvc	r5, r3, r8, ror #30
    1c00:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
    1c04:	6b73666e 	blvs	1cdb5c4 <__ccfg+0x1cbb61c>
    1c08:	43787200 	cmnmi	r8, #0, 4
    1c0c:	00666e6f 	rsbeq	r6, r6, pc, ror #28
    1c10:	466f4e62 	strbtmi	r4, [pc], -r2, ror #28
	dispose (b, plugins [b->attributes.b.plugin] ->
    1c14:	776f5073 			; <UNDEFINED> instruction: 0x776f5073
}
    1c18:	70557265 	subsvc	r7, r5, r5, ror #4
	dispose (b, plugins [b->attributes.b.plugin] ->
    1c1c:	45524f00 	ldrbmi	r4, [r2, #-3840]	; 0xfffff100
    1c20:	00746e76 	rsbseq	r6, r4, r6, ror lr
    1c24:	4f734662 	svcmi	0x00734662
}
    1c28:	75426666 	strbvc	r6, [r2, #-1638]	; 0xfffff99a
    while(1)
    1c2c:	76007973 			; <UNDEFINED> instruction: 0x76007973
{
    1c30:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
    SetupTrimDevice();
    1c34:	74787400 	ldrbtvc	r7, [r8], #-1024	; 0xfffffc00
    pui32Src = &_etext;
    1c38:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1c3c:	734d6200 	movtvc	r6, #53760	; 0xd200
    __asm("    ldr     r0, =_bss\n"
    1c40:	72694662 	rsbvc	r4, r9, #102760448	; 0x6200000
    1c44:	72007473 	andvc	r7, r0, #1929379840	; 0x73000000
    1c48:	65645f78 	strbvs	r5, [r4, #-3960]!	; 0xfffff088
    1c4c:	5f787200 	svcpl	0x00787200
    1c50:	5f746e69 	svcpl	0x00746e69
   main();
    1c54:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    FaultISR();
    1c58:	6100656c 	tstvs	r0, ip, ror #10
        *pui32Dest++ = *pui32Src++;
    1c5c:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    1c60:	00307373 	eorseq	r7, r0, r3, ror r3
    1c64:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
    1c68:	31737365 	cmncc	r3, r5, ror #6
    1c6c:	63667200 	cmnvs	r6, #0, 4
    1c70:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
    1c74:	4f52505f 	svcmi	0x0052505f
    1c78:	41525f50 	cmpmi	r2, r0, asr pc
static byte get_byte () {
    1c7c:	5f4f4944 	svcpl	0x004f4944
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c80:	5f564944 	svcpl	0x00564944
    1c84:	55544553 	ldrbpl	r4, [r4, #-1363]	; 0xfffffaad
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c88:	00735f50 	rsbseq	r5, r3, r0, asr pc
    1c8c:	5f636672 	svcpl	0x00636672
		if (ee_inp)
    1c90:	5f444d43 	svcpl	0x00444d43
			b |= 1;
    1c94:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
    1c98:	4441525f 	strbmi	r5, [r1], #-607	; 0xfffffda1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c9c:	445f4f49 	ldrbmi	r4, [pc], #-3913	; 1ca4 <get_byte+0x28>
	for (b = 0, i = 0; i < 8; i++) {
    1ca0:	535f5649 	cmppl	pc, #76546048	; 0x4900000
}
    1ca4:	50555445 	subspl	r5, r5, r5, asr #8
    1ca8:	5f00745f 	svcpl	0x0000745f
    1cac:	0066735f 	rsbeq	r7, r6, pc, asr r3
static void put_byte (byte b) {
    1cb0:	5f636672 	svcpl	0x00636672
    1cb4:	5f444d43 	svcpl	0x00444d43
    1cb8:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
    1cbc:	5f58525f 	svcpl	0x0058525f
		if (b & 0x80)
    1cc0:	61700074 	cmnvs	r0, r4, ror r0
    1cc4:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cc8:	526e0065 	rsbpl	r0, lr, #101	; 0x65
	for (i = 0; i < 8; i++) {
    1ccc:	6f745378 	svcvs	0x00745378
		b <<= 1;
    1cd0:	64657070 	strbtvs	r7, [r5], #-112	; 0xffffff90
	for (i = 0; i < 8; i++) {
    1cd4:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
}
    1cd8:	69737352 	ldmdbvs	r3!, {r1, r4, r6, r8, r9, ip, sp, lr}^
    1cdc:	656c6449 	strbvs	r6, [ip, #-1097]!	; 0xfffffbb7
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1ce0:	74617200 	strbtvc	r7, [r1], #-512	; 0xfffffe00
    1ce4:	726f5765 	rsbvc	r5, pc, #26476544	; 0x1940000
	put_byte (cmd);
    1ce8:	5f5f0064 	svcpl	0x005f0064
    1cec:	62686377 	rsbvs	r6, r8, #-603979775	; 0xdc000001
}
    1cf0:	6c675f00 	stclvs	15, cr5, [r7], #-0
    1cf4:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
static void wwait (word st, word del) {
    1cf8:	706d695f 	rsbvc	r6, sp, pc, asr r9
    1cfc:	5f657275 	svcpl	0x00657275
    1d00:	00727470 	rsbseq	r7, r2, r0, ror r4
	while (dopen && (rdsr () & 1)) {
    1d04:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
    1d08:	6165795f 	cmnvs	r5, pc, asr r9
    1d0c:	78720072 	ldmdavc	r2!, {r1, r4, r5, r6}^
    1d10:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
	put_byte (CMD_RDSR);
    1d14:	65527000 	ldrbvs	r7, [r2, #-0]
	r = get_byte ();
    1d18:	65764f67 	ldrbvs	r4, [r6, #-3943]!	; 0xfffff099
    1d1c:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
	while (dopen && (rdsr () & 1)) {
    1d20:	61720065 	cmnvs	r2, r5, rrx
}
    1d24:	5f726d74 	svcpl	0x00726d74
		if (st == WNONE)
    1d28:	6c5f0074 	mrrcvs	0, 7, r0, pc, cr4	; <UNPREDICTABLE>
    1d2c:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
			mdelay (1);
    1d30:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    1d34:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
			delay (del, st);
    1d38:	70416200 	subvc	r6, r1, r0, lsl #4
    1d3c:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
			release;
    1d40:	69737352 	ldmdbvs	r3!, {r1, r4, r6, r8, r9, ip, sp, lr}^
    1d44:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
    1d48:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
static void ready () {
    1d4c:	63667200 	cmnvs	r6, #0, 4
	if (dopen) {
    1d50:	6f72705f 	svcvs	0x0072705f
		wwait (WNONE, 1);
    1d54:	4f785270 	svcmi	0x00785270
    1d58:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    1d5c:	00735f74 	rsbseq	r5, r3, r4, ror pc
	dstat = 0;
    1d60:	5f636672 	svcpl	0x00636672
}
    1d64:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    1d68:	754f7852 	strbvc	r7, [pc, #-2130]	; 151e <diag+0x8e>
    1d6c:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
	udelay (1);
    1d70:	5f00745f 	svcpl	0x0000745f
    1d74:	6c747663 	ldclvs	6, cr7, [r4], #-396	; 0xfffffe74
	udelay (1);
    1d78:	5f006e65 	svcpl	0x00006e65
		dopen = DOPEN_TEMP;
    1d7c:	7778616d 	ldrbvc	r6, [r8, -sp, ror #2]!
    1d80:	5f007364 	svcpl	0x00007364
    1d84:	6134366c 	teqvs	r4, ip, ror #12
    1d88:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
static void cclose () {
    1d8c:	43465200 	movtmi	r5, #25088	; 0x6200
	if (dopen == DOPEN_TEMP) {
    1d90:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1d94:	7369446b 	cmnvc	r9, #1795162112	; 0x6b000000
		wwait (WNONE, 1);
    1d98:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1d9c:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
	cmd_0 (CMD_DP);
    1da0:	53676966 	cmnpl	r7, #1671168	; 0x198000
    1da4:	68746e79 	ldmdavs	r4!, {r0, r3, r4, r5, r6, r9, sl, fp, sp, lr}^
		dopen = 0;
    1da8:	63787400 	cmnvs	r8, #0, 8
}
    1dac:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
word ee_open () {
    1db0:	5f007265 	svcpl	0x00007265
	ready ();
    1db4:	736b6c62 	cmnvc	fp, #25088	; 0x6200
	dopen = DOPEN_PERM;
    1db8:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1dbc:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
}
    1dc0:	6e656c00 	cdpvs	12, 6, cr6, cr5, cr0, {0}
	if (dopen) {
    1dc4:	72007a53 	andvc	r7, r0, #339968	; 0x53000
    1dc8:	725f6366 	subsvc	r6, pc, #-1744830463	; 0x98000001
		dopen = DOPEN_TEMP;
    1dcc:	6f696461 	svcvs	0x00696461
		cclose ();
    1dd0:	735f704f 	cmpvc	pc, #79	; 0x4f
}
    1dd4:	6f6c5f00 	svcvs	0x006c5f00
int ser_in (word st, char *buf, int len) {
    1dd8:	62006b63 	andvs	r6, r0, #101376	; 0x18c00
    1ddc:	65706552 	ldrbvs	r6, [r0, #-1362]!	; 0xfffffaae
	if (len == 0)
    1de0:	6f4e7461 	svcvs	0x004e7461
	if (__inpline == NULL) {
    1de4:	6966006b 	stmdbvs	r6!, {r0, r1, r3, r5, r6}^
		if ((prcs = running (__inserial)) == 0) {
    1de8:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    1dec:	7200704f 	andvc	r7, r0, #79	; 0x4f
			prcs = runthread (__inserial);
    1df0:	645f6366 	ldrbvs	r6, [pc], #-870	; 1df8 <ser_in+0x20>
    1df4:	45617461 	strbmi	r7, [r1, #-1121]!	; 0xfffffb9f
			if (prcs == 0) {
    1df8:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
				npwait (st);
    1dfc:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
		release;
    1e00:	5f6c6172 	svcpl	0x006c6172
		join (prcs, st);
    1e04:	66720073 			; <UNDEFINED> instruction: 0x66720073
    1e08:	61645f63 	cmnvs	r4, r3, ror #30
	if (*__inpline == NULL) // bin cmd
    1e0c:	6e456174 	mcrvs	1, 2, r6, cr5, cr4, {3}
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1e10:	47797274 			; <UNDEFINED> instruction: 0x47797274
	if (prcs >= len)
    1e14:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
		prcs = len-1;
    1e18:	745f6c61 	ldrbvc	r6, [pc], #-3169	; 1e20 <ser_in+0x48>
	memcpy (buf, __inpline, prcs);
    1e1c:	696e5f00 	stmdbvs	lr!, {r8, r9, sl, fp, ip, lr}^
    1e20:	0073626f 	rsbseq	r6, r3, pc, ror #4
    1e24:	746e6977 	strbtvc	r6, [lr], #-2423	; 0xfffff689
	ufree (__inpline);
    1e28:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
	__inpline = NULL;
    1e2c:	61705f66 	cmnvs	r0, r6, ror #30
	if (*buf) // if it's NULL, it's a bin cmd
    1e30:	5f686374 	svcpl	0x00686374
		buf [prcs] = '\0';
    1e34:	5f656672 	svcpl	0x00656672
}
    1e38:	666e6567 	strbtvs	r6, [lr], -r7, ror #10
		prcs = strlen (__inpline);
    1e3c:	6e006b73 	vmovvs.16	d0[1], r6
    1e40:	6b4f7852 	blvs	13dff90 <__ccfg+0x13bffe8>
		return 0;
    1e44:	65525200 	ldrbvs	r5, [r2, #-512]	; 0xfffffe00
    1e48:	645f0074 	ldrbvs	r0, [pc], #-116	; 1e50 <ser_outf>
    1e4c:	685f6f73 	ldmdavs	pc, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
int ser_outf (word st, const char *m, ...) {
    1e50:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1e54:	5f5f0065 	svcpl	0x005f0065
	if ((prcs = running (__outserial)) != 0) {
    1e58:	6d6d7564 	cfstr64vs	mvdx7, [sp, #-400]!	; 0xfffffe70
    1e5c:	5f003179 	svcpl	0x00003179
		join (prcs, st);
    1e60:	6d75645f 	cfldrdvs	mvd6, [r5, #-380]!	; 0xfffffe84
    1e64:	0032796d 	eorseq	r7, r2, sp, ror #18
		release;
    1e68:	75645f5f 	strbvc	r5, [r4, #-3935]!	; 0xfffff0a1
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1e6c:	33796d6d 	cmncc	r9, #6976	; 0x1b40
    1e70:	74496e00 	strbvc	r6, [r9], #-3584	; 0xfffff200
    1e74:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
		umwait (st);
    1e78:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    1e7c:	746b7000 	strbtvc	r7, [fp], #-0
	if (runstrand (__outserial, buf) == 0) {
    1e80:	006e654c 	rsbeq	r6, lr, ip, asr #10
    1e84:	656c7572 	strbvs	r7, [ip, #-1394]!	; 0xfffffa8e
    1e88:	5f465200 	svcpl	0x00465200
		ufree (buf);
    1e8c:	50646d63 	rsbpl	r6, r4, r3, ror #26
		npwait (st);
    1e90:	52706f72 	rsbspl	r6, r0, #456	; 0x1c8
}
    1e94:	46520078 			; <UNDEFINED> instruction: 0x46520078
    1e98:	45504343 	ldrbmi	r4, [r0, #-835]	; 0xfffffcbd
    1e9c:	746e4930 	strbtvc	r4, [lr], #-2352	; 0xfffff6d0
    1ea0:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
int ser_inf (word st, const char *fmt, ...) {
    1ea4:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1ea8:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
	if (fmt == NULL)
    1eac:	00667562 	rsbeq	r7, r6, r2, ror #10
	if (__inpline == NULL) {
    1eb0:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
		if ((prcs = running (__inserial)) == 0) {
    1eb4:	0074756f 	rsbseq	r7, r4, pc, ror #10
    1eb8:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
			prcs = runthread (__inserial);
    1ebc:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    1ec0:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
			if (prcs == 0) {
    1ec4:	76726400 	ldrbtvc	r6, [r2], -r0, lsl #8
				npwait (st);
    1ec8:	73637270 	cmnvc	r3, #112, 4
		release;
    1ecc:	72506e00 	subsvc	r6, r0, #0, 28
		join (prcs, st);
    1ed0:	426d6165 	rsbmi	r6, sp, #1073741849	; 0x40000019
    1ed4:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
	va_start (ap, fmt);
    1ed8:	6b636200 	blvs	18da6e0 <__ccfg+0x18ba738>
	prcs = vscan (__inpline, fmt, ap);
    1edc:	69745f66 	ldmdbvs	r4!, {r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1ee0:	0072656d 	rsbseq	r6, r2, sp, ror #10
	ufree (__inpline);
    1ee4:	5f636672 	svcpl	0x00636672
	__inpline = NULL;
    1ee8:	5f444d43 	svcpl	0x00444d43
}
    1eec:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
    1ef0:	5f58545f 	svcpl	0x0058545f
    1ef4:	66720074 			; <UNDEFINED> instruction: 0x66720074
		return 0;
    1ef8:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    1efc:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    1f00:	545f504f 	ldrbpl	r5, [pc], #-79	; 1f08 <plugch+0x4>
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    1f04:	00735f58 	rsbseq	r5, r3, r8, asr pc
    1f08:	656c6469 	strbvs	r6, [ip, #-1129]!	; 0xfffffb97
    1f0c:	6600704f 	strvs	r7, [r0], -pc, asr #32
	RF_cmdFs.frequency = 
    1f10:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
}
    1f14:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1f18:	735f5f00 	cmpvc	pc, #0, 30
    1f1c:	00667562 	rsbeq	r7, r6, r2, ror #10
    1f20:	74615070 	strbtvc	r5, [r1], #-112	; 0xffffff90
static int option (int opt, address val) {
    1f24:	61546863 	cmpvs	r4, r3, ror #16
    1f28:	73630062 	cmnvc	r3, #98	; 0x62
    1f2c:	6f437346 	svcvs	0x00437346
    1f30:	6300666e 	movwvs	r6, #1646	; 0x66e
    1f34:	735f646d 	cmpvc	pc, #1828716544	; 0x6d000000
    1f38:	62007472 	andvs	r7, r0, #1912602624	; 0x72000000
    1f3c:	664f7346 	strbvs	r7, [pc], -r6, asr #6
    1f40:	6f630066 	svcvs	0x00630066
    1f44:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1f48:	6373694d 	cmnvs	r3, #1261568	; 0x134000
    1f4c:	00636441 	rsbeq	r6, r3, r1, asr #8
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    1f50:	756c675f 	strbvc	r6, [ip, #-1887]!	; 0xfffff8a1
    1f54:	6e650065 	cdpvs	0, 6, cr0, cr5, cr5, {3}
			goto RVal;
    1f58:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
			_BIS (dstate, DSTATE_RXON);
    1f5c:	43620065 	cmnmi	r2, #101	; 0x65
    1f60:	64416b68 	strbvs	r6, [r1], #-2920	; 0xfffff498
	int ret = 0;
    1f64:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
			p_trigger (drvprcs, qevent);
    1f68:	6e650073 	mcrvs	0, 3, r0, cr5, cr3, {3}
    1f6c:	47726574 			; <UNDEFINED> instruction: 0x47726574
    1f70:	73666e65 	cmnvc	r6, #1616	; 0x650
    1f74:	6570436b 	ldrbvs	r4, [r0, #-875]!	; 0xfffffc95
    1f78:	63746150 	cmnvs	r4, #80, 2
    1f7c:	66720068 	ldrbtvs	r0, [r2], -r8, rrx
    1f80:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    1f84:	59535f44 	ldmdbpl	r3, {r2, r6, r8, r9, sl, fp, ip, lr}^
    1f88:	535f434e 	cmppl	pc, #939524097	; 0x38000001
    1f8c:	54524154 	ldrbpl	r4, [r2], #-340	; 0xfffffeac
}
    1f90:	5441525f 	strbpl	r5, [r1], #-607	; 0xfffffda1
			_BIC (dstate, DSTATE_RXON);
    1f94:	7200735f 	andvc	r7, r0, #2080374785	; 0x7c000001
    1f98:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
			statid = (val == NULL) ? 0 : *val;
    1f9c:	535f444d 	cmppl	pc, #1291845632	; 0x4d000000
    1fa0:	5f434e59 	svcpl	0x00434e59
	int ret = 0;
    1fa4:	52415453 	subpl	r5, r1, #1392508928	; 0x53000000
			ret = (int) statid;
    1fa8:	41525f54 	cmpmi	r2, r4, asr pc
	if (val != NULL)
    1fac:	00745f54 	rsbseq	r5, r4, r4, asr pc
		*val = ret;
    1fb0:	6c796170 	ldfvse	f6, [r9], #-448	; 0xfffffe40
			ret = rbuffl + 2;
    1fb4:	6e006e65 	cdpvs	14, 0, cr6, cr0, cr5, {3}
    1fb8:	73526d75 	cmpvc	r2, #7488	; 0x1d40
			if (val != NULL) {
    1fbc:	75426973 	strbvc	r6, [r2, #-2419]	; 0xfffff68d
				memcpy (val, &rxstat,
    1fc0:	5f007973 	svcpl	0x00007973
    1fc4:	6c67735f 	stclvs	3, cr7, [r7], #-380	; 0xfffffe84
				memset (&rxstat, 0, 
    1fc8:	74006575 	strvc	r6, [r0], #-1397	; 0xfffffa8b
    1fcc:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
			if (val == NULL)
    1fd0:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    1fd4:	6b6f7472 	blvs	1bdf1a4 <__ccfg+0x1bbf1fc>
    1fd8:	73616c5f 	cmnvc	r1, #24320	; 0x5f00
				utimer_set (bckf_timer, *val);
    1fdc:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; 1e14 <ser_in+0x3c>
    1fe0:	776f7462 	strbvc	r7, [pc, -r2, ror #8]!
    1fe4:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
			for (ret = 0; ret < 8; ret++)
    1fe8:	00657461 	rsbeq	r7, r5, r1, ror #8
				if (RF_cmdPropRadioDivSetup.txPower
    1fec:	65735562 	ldrbvs	r5, [r3, #-1378]!	; 0xfffffa9e
					== patable [ret])
    1ff0:	00637243 	rsbeq	r7, r3, r3, asr #4
				if (RF_cmdPropRadioDivSetup.txPower
    1ff4:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
			for (ret = 0; ret < 8; ret++)
    1ff8:	6e654772 	mcrvs	7, 3, r4, cr5, cr2, {3}
    1ffc:	536b7366 	cmnpl	fp, #-1744830463	; 0x98000001
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2000:	61507379 	cmpvs	r0, r9, ror r3
    2004:	00686374 	rsbeq	r6, r8, r4, ror r3
    2008:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    200c:	6f697461 	svcvs	0x00697461
    2010:	665f006e 	ldrbvs	r0, [pc], -lr, rrx
			_BIS (dstate, DSTATE_IRST);
    2014:	6772616e 	ldrbvs	r6, [r2, -lr, ror #2]!
    2018:	73630073 	cmnvc	r3, #115	; 0x73
    201c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
			ret = (int) channel;
    2020:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
			goto RVal;
    2024:	00746e65 	rsbseq	r6, r4, r5, ror #28
				(*val > 7) ? 7 : *val;
    2028:	61746164 	cmnvs	r4, r4, ror #2
    202c:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2030:	00745f65 	rsbseq	r5, r4, r5, ror #30
    2034:	746e665f 	strbtvc	r6, [lr], #-1631	; 0xfffff9a1
			plugch ();
    2038:	73657079 	cmnvc	r5, #121	; 0x79
			_BIS (dstate, DSTATE_IRST);
    203c:	6b536e00 	blvs	14dd844 <__ccfg+0x14bd89c>
    2040:	62007069 	andvs	r7, r0, #105	; 0x69
			ret = (int) vrate;
    2044:	52616e45 	rsbpl	r6, r1, #1104	; 0x450
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2048:	00697373 	rsbeq	r7, r9, r3, ror r3
    204c:	73796870 	cmnvc	r9, #112, 16	; 0x700000
    2050:	5f006469 	svcpl	0x00006469
    2054:	5f66666f 	svcpl	0x0066666f
    2058:	6e5f0074 	mrcvs	0, 2, r0, cr15, cr4, {3}
    205c:	00667562 	rsbeq	r7, r6, r2, ror #10
    2060:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
    2064:	5f646573 	svcpl	0x00646573
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2068:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
    206c:	5f465200 	svcpl	0x00465200
    2070:	50646d63 	rsbpl	r6, r4, r3, ror #26
    2074:	54706f72 	ldrbtpl	r6, [r0], #-3954	; 0xfffff08e
			syserror (EREQPAR, "cc13 op");
    2078:	755f0078 	ldrbvc	r0, [pc, #-120]	; 2008 <option+0xe4>
    207c:	6570736e 	ldrbvs	r7, [r0, #-878]!	; 0xfffffc92
    2080:	69666963 	stmdbvs	r6!, {r0, r1, r5, r6, r8, fp, sp, lr}^
    2084:	6c5f6465 	cfldrdvs	mvd6, [pc], {101}	; 0x65
    2088:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    208c:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
    2090:	72006f66 	andvc	r6, r0, #408	; 0x198
    2094:	72466665 	subvc	r6, r6, #105906176	; 0x6500000
    2098:	5f007165 	svcpl	0x00007165
    209c:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
    20a0:	5f003273 	svcpl	0x00003273
    20a4:	635f7369 	cmpvs	pc, #-1543503871	; 0xa4000001
    20a8:	52006178 	andpl	r6, r0, #120, 2
    20ac:	6c434346 	mcrrvs	3, 4, r4, r3, cr6
    20b0:	456b636f 	strbmi	r6, [fp, #-879]!	; 0xfffffc91
static void issue_cmd (lword cmd) {
    20b4:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    20b8:	725f0065 	subsvc	r0, pc, #101	; 0x65
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20bc:	5f646e61 	svcpl	0x00646e61
    20c0:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
    20c4:	6c5f5f00 	mrrcvs	15, 0, r5, pc, cr0	; <UNPREDICTABLE>
		if (res != 0x86)
    20c8:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
			syserror (EHARDWARE, "hang ic0");
    20cc:	00745f65 	rsbseq	r5, r4, r5, ror #30
    20d0:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
		if (cnt-- == 0) {
    20d4:	735f006b 	cmpvc	pc, #107	; 0x6b
			diag ("HUP %lx %lx", cmd, res);
    20d8:	72656474 	rsbvc	r6, r5, #116, 8	; 0x74000000
    20dc:	6e5f0072 	mrcvs	0, 2, r0, cr15, cr2, {3}
			syserror (EHARDWARE, "hang ic0");
    20e0:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
		udelay (1);
    20e4:	5f00636f 	svcpl	0x0000636f
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20e8:	66756275 			; <UNDEFINED> instruction: 0x66756275
}
    20ec:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
    20f0:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    20f4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    20f8:	4d544b00 	vldrmi	d20, [r4, #-0]
static void rx_de () {
    20fc:	6c702f50 	ldclvs	15, cr2, [r0], #-320	; 0xfffffec0
	if ((dstate & DSTATE_RXAC) == 0)
    2100:	6e5f6775 	mrcvs	7, 2, r6, cr15, cr5, {3}
    2104:	2e6c6c75 	mcrcs	12, 3, r6, cr12, cr5, {3}
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2108:	63740063 	cmnvs	r4, #99	; 0x63
	_BIC (dstate, DSTATE_RXAC);
    210c:	756f5f76 	strbvc	r5, [pc, #-3958]!	; 119e <running+0xe>
    2110:	756e5f74 	strbvc	r5, [lr, #-3956]!	; 0xfffff08c
}
    2114:	74006c6c 	strvc	r6, [r0], #-3180	; 0xfffff394
    2118:	725f7663 	subsvc	r7, pc, #103809024	; 0x6300000
    211c:	6e5f7663 	cdpvs	6, 5, cr7, cr15, cr3, {3}
static void rf_off () {
    2120:	006c6c75 	rsbeq	r6, ip, r5, ror ip
	if ((dstate & DSTATE_RFON) == 0)
    2124:	5f766374 	svcpl	0x00766374
    2128:	5f65706f 	svcpl	0x0065706f
	IntDisable (INT_RFC_CPE_0);
    212c:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
    2130:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    2134:	6d72665f 	ldclvs	6, cr6, [r2, #-380]!	; 0xfffffe84
	RFCAdi3VcoLdoVoltageMode (false);
    2138:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
	RFCSynthPowerDown ();
    213c:	6374006c 	cmnvs	r4, #108	; 0x6c
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2140:	6c635f76 	stclvs	15, cr5, [r3], #-472	; 0xfffffe28
    2144:	756e5f6f 	strbvc	r5, [lr, #-3951]!	; 0xfffff091
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2148:	74006c6c 	strvc	r6, [r0], #-3180	; 0xfffff394
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    214c:	785f7663 	ldmdavc	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2150:	6e5f746d 	cdpvs	4, 5, cr7, cr15, cr13, {3}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2154:	006c6c75 	rsbeq	r6, ip, r5, ror ip
    2158:	6e756f62 	cdpvs	15, 7, cr6, cr5, cr2, {3}
    215c:	6e007364 	cdpvs	3, 0, cr7, cr0, cr4, {3}
	_BIC (dstate, DSTATE_RFON);
    2160:	5f637364 	svcpl	0x00637364
    2164:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
}
    2168:	6f682f00 	svcvs	0x00682f00
    216c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1fc0 <option+0x9c>
    2170:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    2174:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    2178:	6f746b73 	svcvs	0x00746b73
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    217c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    2180:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    2184:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
		if (cmd->status == tstat)
    2188:	2f534f43 	svccs	0x00534f43
		if (timeout-- == 0) {
    218c:	4f636950 	svcmi	0x00636950
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2190:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    2194:	2f736269 	svccs	0x00736269
    2198:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
			syserror (EHARDWARE, "rt2");
    219c:	5f2f6c61 	svcpl	0x002f6c61
    21a0:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
		udelay (1);
    21a4:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
		if (cmd->status == tstat)
    21a8:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
}
    21ac:	61757100 	cmnvs	r5, r0, lsl #2
    21b0:	5f00746e 	svcpl	0x0000746e
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    21b4:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    21b8:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
static void rf_on () {
    21bc:	5f006c61 	svcpl	0x00006c61
    21c0:	5f4d4f5f 	svcpl	0x004d4f5f
	OSCHF_TurnOnXosc();
    21c4:	54495257 	strbpl	r5, [r9], #-599	; 0xfffffda9
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    21c8:	5f5f0045 	svcpl	0x005f0045
    21cc:	65736e69 	ldrbvs	r6, [r3, #-3689]!	; 0xfffff197
    21d0:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    21d4:	6f682f00 	svcvs	0x00682f00
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21d8:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 202c <option+0x108>
    21dc:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21e0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    21e4:	6f746b73 	svcvs	0x00746b73
	issue_cmd (
    21e8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    21ec:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    21f0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    21f4:	2f534f43 	svccs	0x00534f43
    21f8:	4f636950 	svcmi	0x00636950
   pPatchTab[80] = 0;
    21fc:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
   } while (--nIterations);
    2200:	2f736269 	svccs	0x00736269
   pPatchTab[53] = 2;
    2204:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    2208:	5f2f6c61 	svcpl	0x002f6c61
   pPatchTab[55] = 3;
    220c:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
   pPatchTab[110] = 4;
    2210:	61697265 	cmnvs	r9, r5, ror #4
   pPatchTab[107] = 5;
    2214:	00632e6c 	rsbeq	r2, r3, ip, ror #28
   pPatchTab[65] = 6;
    2218:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2164 <rf_off+0x44>
    221c:	616d2f65 	cmnvs	sp, r5, ror #30
   pPatchTab[57] = 1;
    2220:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
   pIrqPatch[1] = _IRQ_PATCH_0;
    2224:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
   const uint32_t *pS = patchGenfskRfe;
    2228:	706f746b 	rsbvc	r7, pc, fp, ror #8
      t2 = *pS++;
    222c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
      t4 = *pS++;
    2230:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
      t6 = *pS++;
    2234:	4349502f 	movtmi	r5, #36911	; 0x902f
      t8 = *pS++;
    2238:	502f534f 	eorpl	r5, pc, pc, asr #6
      *pD++ = t1;
    223c:	534f6369 	movtpl	r6, #62313	; 0xf369
      *pD++ = t2;
    2240:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
      *pD++ = t3;
    2244:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
      *pD++ = t5;
    2248:	61697265 	cmnvs	r9, r5, ror #4
      *pD++ = t7;
    224c:	66762f6c 	ldrbtvs	r2, [r6], -ip, ror #30
   } while (--nIterations);
    2250:	2e6d726f 	cdpcs	2, 6, cr7, cr13, cr15, {3}
    2254:	67410063 	strbvs	r0, [r1, -r3, rrx]
      *pD++ = t8;
    2258:	006e6961 	rsbeq	r6, lr, r1, ror #18
   } while (--nIterations);
    225c:	6374756f 	cmnvs	r4, #465567744	; 0x1bc00000
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2260:	705f5f00 	subsvc	r5, pc, r0, lsl #30
   *pD++ = t2;
    2264:	66765f69 	ldrbtvs	r5, [r6], -r9, ror #30
   *pD++ = t3;
    2268:	73726170 	cmnvc	r2, #112, 2
   *pD++ = t4;
    226c:	66760065 	ldrbtvs	r0, [r6], -r5, rrx
   *pD++ = t5;
    2270:	006d726f 	rsbeq	r7, sp, pc, ror #4
    2274:	72746552 	rsbsvc	r6, r4, #343932928	; 0x14800000
	RFCAdi3VcoLdoVoltageMode (true);
    2278:	5f645f79 	svcpl	0x00645f79
    227c:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
       	RFCRfTrimSet (&rfTrim);
    2280:	6f682f00 	svcvs	0x00682f00
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2284:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 20d8 <issue_cmd+0x24>
    2288:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    228c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    2290:	6f746b73 	svcvs	0x00746b73
	issue_cmd ((lword)&cmd_srt);
    2294:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    2298:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
	issue_cmd ((lword)&RF_cmdFs);
    229c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    22a0:	2f534f43 	svccs	0x00534f43
    22a4:	4f636950 	svcmi	0x00636950
    22a8:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
	IntEnable (INT_RFC_CPE_0);
    22ac:	2f736269 	svccs	0x00736269
	_BIC (dstate, DSTATE_IRST);
    22b0:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    22b4:	762f6c61 	strtvc	r6, [pc], -r1, ror #24
    22b8:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22bc:	7600632e 	strvc	r6, [r0], -lr, lsr #6
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22c0:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
	IntEnable (INT_RFC_CPE_0);
    22c4:	74655200 	strbtvc	r5, [r5], #-512	; 0xfffffe00
    22c8:	645f7972 	ldrbvs	r7, [pc], #-2418	; 22d0 <rf_on.part.0+0x11c>
}
    22cc:	6f776c5f 	svcvs	0x00776c5f
	IntEnable (INT_RFC_CPE_0);
    22d0:	2f006472 	svccs	0x00006472
    22d4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    22d8:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    22dc:	2f6e6974 	svccs	0x006e6974
    22e0:	6b736544 	blvs	1cdb7f8 <__ccfg+0x1cbb850>
    22e4:	2f706f74 	svccs	0x00706f74
    22e8:	4f534c4f 	svcmi	0x00534c4f
    22ec:	2f54454e 	svccs	0x0054454e
    22f0:	4f434950 	svcmi	0x00434950
    22f4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    22f8:	2f534f63 	svccs	0x00534f63
    22fc:	33314343 	teqcc	r1, #201326593	; 0xc000001
    2300:	732f5858 			; <UNDEFINED> instruction: 0x732f5858
    2304:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    2308:	735f6672 	cmpvc	pc, #119537664	; 0x7200000
    230c:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    2310:	5f73676e 	svcpl	0x0073676e
    2314:	685f706c 	ldmdavs	pc, {r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    2318:	00632e72 	rsbeq	r2, r3, r2, ror lr
    231c:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
    2320:	5f727470 	svcpl	0x00727470
    2324:	4f700074 	svcmi	0x00700074
    2328:	72726576 	rsbsvc	r6, r2, #494927872	; 0x1d800000
    232c:	73656469 	cmnvc	r5, #1761607680	; 0x69000000
    2330:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 1438 <__pi_malloc+0x9c>
static void rx_int_enable () {
    2334:	33746e69 	cmncc	r4, #1680	; 0x690
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2338:	00745f32 	rsbseq	r5, r4, r2, lsr pc
    233c:	71724962 	cmnvc	r2, r2, ror #18
    2340:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    2344:	0064656c 	rsbeq	r6, r4, ip, ror #10
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2348:	65666153 	strbvs	r6, [r6, #-339]!	; 0xfffffead
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    234c:	69706148 	ldmdbvs	r0!, {r3, r6, r8, sp, lr}^
    2350:	41787541 	cmnmi	r8, r1, asr #10
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2354:	65536964 	ldrbvs	r6, [r3, #-2404]	; 0xfffff69c
    2358:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    235c:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2360:	4f565f52 	svcmi	0x00565f52
    2364:	565f4449 	ldrbpl	r4, [pc], -r9, asr #8
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2368:	5f44494f 	svcpl	0x0044494f
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    236c:	4f4e0054 	svcmi	0x004e0054
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2370:	5f4d4f52 	svcpl	0x004d4f52
		if (db->status == DATA_ENTRY_FINISHED) {
    2374:	63555043 	cmpvs	r5, #67	; 0x43
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2378:	64697370 	strbtvs	r7, [r9], #-880	; 0xfffffc90
    237c:	524f4e00 	subpl	r4, pc, #0, 28
			nr++;
    2380:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2384:	70635550 	rsbvc	r5, r3, r0, asr r5
    2388:	00656973 	rsbeq	r6, r5, r3, ror r9
    238c:	65666153 	strbvs	r6, [r6, #-339]!	; 0xfffffead
    2390:	69706148 	ldmdbvs	r0!, {r3, r6, r8, sp, lr}^
				__dp [pl + 1] = __dp [pl] - 128;
    2394:	64696f56 	strbtvs	r6, [r9], #-3926	; 0xfffff0aa
				pl = __dp [1] + 2;
    2398:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 14a0 <diag+0x10>
				__dp [pl + 1] = __dp [pl] - 128;
    239c:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    23a0:	2e00745f 	cfmvsrcs	mvf0, r7
				__dp [pl] = 0;
    23a4:	2f2e2e2f 	svccs	0x002e2e2f
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    23a8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    23ac:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    23b0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
			db->status = DATA_ENTRY_PENDING;
    23b4:	2f62696c 	svccs	0x0062696c
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    23b8:	2e696461 	cdpcs	4, 6, cr6, cr9, cr1, {3}
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    23bc:	4e470063 	cdpmi	0, 4, cr0, cr7, cr3, {3}
				diag ("BAD RX");
    23c0:	20432055 	subcs	r2, r3, r5, asr r0
    23c4:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}
	if (nr) {
    23c8:	30322033 	eorscc	r2, r2, r3, lsr r0
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23cc:	35303531 	ldrcc	r3, [r0, #-1329]!	; 0xfffffacf
}
    23d0:	28203932 	stmdacs	r0!, {r1, r4, r5, r8, fp, ip, sp}
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23d4:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
    23d8:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    23dc:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
}
    23e0:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
    23e4:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
    23e8:	342d6465 	strtcc	r6, [sp], #-1125	; 0xfffffb9b
    23ec:	622d395f 	eorvs	r3, sp, #1556480	; 0x17c000
    23f0:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
    23f4:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
    23f8:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    23fc:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
    2400:	37393732 			; <UNDEFINED> instruction: 0x37393732
thread (cc1350_driver)
    2404:	2d205d37 	stccs	13, cr5, [r0, #-220]!	; 0xffffff24
    2408:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
    240c:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
    2410:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
    2414:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
		if (dstate & DSTATE_IRST) {
    2418:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
    241c:	2d20336d 	stccs	3, cr3, [r0, #-436]!	; 0xfffffe4c
    2420:	4f2d2067 	svcmi	0x002d2067
			rf_off ();
    2424:	732d2073 			; <UNDEFINED> instruction: 0x732d2073
			_BIC (dstate,
    2428:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
    242c:	2d203939 			; <UNDEFINED> instruction: 0x2d203939
		if (dstate & DSTATE_RXAC) {
    2430:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; 22a0 <rf_on.part.0+0xec>
    2434:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
			if ((dstate & DSTATE_RXON) == 0)
    2438:	612d7463 			; <UNDEFINED> instruction: 0x612d7463
				rx_de ();
    243c:	7361696c 	cmnvc	r1, #108, 18	; 0x1b0000
		if (paylen == 0) {
    2440:	20676e69 	rsbcs	r6, r7, r9, ror #28
    2444:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0xfffff9d3
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2448:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    244c:	732d6e6f 			; <UNDEFINED> instruction: 0x732d6e6f
    2450:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2454:	20736e6f 	rsbscs	r6, r3, pc, ror #28
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2458:	6164662d 	cmnvs	r4, sp, lsr #12
    245c:	732d6174 			; <UNDEFINED> instruction: 0x732d6174
    2460:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2464:	20736e6f 	rsbscs	r6, r3, pc, ror #28
    2468:	7361662d 	cmnvc	r1, #47185920	; 0x2d00000
    246c:	5066006d 	rsbpl	r0, r6, sp, rrx
    2470:	46007274 			; <UNDEFINED> instruction: 0x46007274
    2474:	5f525450 	svcpl	0x00525450
		} else if (dstate & DSTATE_RXON) {
    2478:	44494f56 	strbmi	r4, [r9], #-3926	; 0xfffff0aa
	if (dstate & DSTATE_RFON)
    247c:	4e49555f 	mcrmi	5, 2, r5, cr9, cr15, {2}
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2480:	545f3854 	ldrbpl	r3, [pc], #-2132	; 2488 <cc1350_driver+0x84>
		re->status = DATA_ENTRY_PENDING;
    2484:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2488:	6b6e654a 	blvs	1b9b9b8 <__ccfg+0x1b7ba10>
	issue_cmd ((lword)&RF_cmdPropRx);
    248c:	5c736e69 	ldclpl	14, cr6, [r3], #-420	; 0xfffffe5c
	_BIS (dstate, DSTATE_RXAC);
    2490:	73626f6a 	cmnvc	r2, #424	; 0x1a8
    2494:	4757465c 			; <UNDEFINED> instruction: 0x4757465c
    2498:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    249c:	6972442d 	ldmdbvs	r2!, {r0, r2, r3, r5, sl, lr}^
	if (dstate & DSTATE_RXAC)
    24a0:	4c726576 	cfldr64mi	mvdx6, [r2], #-472	; 0xfffffe28
    24a4:	775c6269 	ldrbvc	r6, [ip, -r9, ror #4]
				if (statid != 0xffff)
    24a8:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
    24ac:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
					((address)(RF_cmdPropTx.pPkt)) [0] =
    24b0:	646f6d5c 	strbtvs	r6, [pc], #-3420	; 24b8 <cc1350_driver+0xb4>
				RF_cmdPropTx.pktLen = (byte) paylen;
    24b4:	73656c75 	cmnvc	r5, #29952	; 0x7500
		if (paylen == 0) {
    24b8:	74756f5c 	ldrbtvc	r6, [r5], #-3932	; 0xfffff0a4
			wait (qevent, DR_LOOP);
    24bc:	5c747570 	cfldr64pl	mvdx7, [r4], #-448	; 0xfffffe40
    24c0:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
			if (dstate & DSTATE_RXAC) {
    24c4:	635f7878 	cmpvs	pc, #120, 16	; 0x780000
    24c8:	325f6168 	subscc	r6, pc, #104, 2
				rx_int_enable ();
    24cc:	655f305f 	ldrbvs	r3, [pc, #-95]	; 2475 <cc1350_driver+0x71>
			release;
    24d0:	645c7478 	ldrbvs	r7, [ip], #-1144	; 0xfffffb88
			} else if (dstate & DSTATE_RFON) {
    24d4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
				delay (offdelay, DR_GOOF);
    24d8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    24dc:	6e69625c 	mcrvs	2, 3, r6, cr9, cr12, {2}
    24e0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
		if (bckf_timer) {
    24e4:	38747500 	ldmdacc	r4!, {r8, sl, ip, sp, lr}^
			wait (qevent, DR_LOOP);
    24e8:	6e676953 			; <UNDEFINED> instruction: 0x6e676953
    24ec:	4e006c61 	cdpmi	12, 0, cr6, cr0, cr1, {3}
    24f0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 23bc <rx_int_enable+0x88>
			delay (bckf_timer, DR_LOOP);
    24f4:	4e4f415f 	mcrmi	1, 2, r4, cr15, cr15, {2}
    24f8:	4d746142 	ldfmie	f6, [r4, #-264]!	; 0xfffffef8
			if (dstate & DSTATE_RXAC)
    24fc:	65546e6f 	ldrbvs	r6, [r4, #-3695]	; 0xfffff191
    2500:	7265706d 	rsbvc	r7, r5, #109	; 0x6d
	if (dstate & DSTATE_RFON)
    2504:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    2508:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
		rx_de ();
    250c:	43676544 	cmnmi	r7, #68, 10	; 0x11000000
		RF_cmdPropTx . status = 0;
    2510:	6c6f7600 	stclvs	6, cr7, [pc], #-0	; 2518 <cc1350_driver+0x114>
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2514:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    2518:	706f6c53 	rsbvc	r6, pc, r3, asr ip	; <UNPREDICTABLE>
    251c:	5f5f0065 	svcpl	0x005f0065
		issue_cmd ((lword)&cmd_cs);
    2520:	33746e69 	cmncc	r4, #1680	; 0x690
		if (dstate & DSTATE_IRST)
    2524:	00745f32 	rsbseq	r5, r4, r2, lsr pc
    2528:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    252c:	745f3874 	ldrbvc	r3, [pc], #-2164	; 2534 <cc1350_driver+0x130>
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2530:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    2534:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
			delay (1, DR_XMIT);
    2538:	2f2e2e2f 	svccs	0x002e2e2f
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    253c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    2540:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2544:	6f612f62 	svcvs	0x00612f62
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2548:	61625f6e 	cmnvs	r2, lr, ror #30
    254c:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
				RF_cmdPropTx . status = 0;
    2550:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2554:	43706d65 	cmnmi	r0, #6464	; 0x1940
				issue_cmd ((lword)&RF_cmdPropTx);
    2558:	6572726f 	ldrbvs	r7, [r2, #-623]!	; 0xfffffd91
				proceed (DR_XMIT);
    255c:	6f697463 	svcvs	0x00697463
    2560:	6973006e 	ldmdbvs	r3!, {r1, r2, r3, r5, r6}^
			txtries++;
    2564:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2568:	706d6554 	rsbvc	r6, sp, r4, asr r5
    256c:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
    2570:	566e7275 			; <UNDEFINED> instruction: 0x566e7275
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2574:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
		goto DR_LOOP__;
    2578:	33697500 	cmncc	r9, #0, 10
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    257c:	72754332 	rsbsvc	r4, r5, #-939524096	; 0xc8000000
		paylen = 0;
    2580:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2584:	00636553 	rsbeq	r6, r3, r3, asr r5
		txtries = 0;
    2588:	4f524f4e 	svcmi	0x00524f4e
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    258c:	4f415f4d 	svcmi	0x00415f4d
    2590:	4354524e 	cmpmi	r4, #-536870908	; 0xe0000004
    2594:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    2598:	43746e65 	cmnmi	r4, #1616	; 0x650
    259c:	61706d6f 	cmnvs	r0, pc, ror #26
		    tcvphy_top (physid) == NULL)
    25a0:	61566572 	cmpvs	r6, r2, ror r5
    25a4:	4765756c 	strbmi	r7, [r5, -ip, ror #10]!
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    25a8:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
    25ac:	53323369 	teqpl	r2, #-1543503871	; 0xa4000001
			rf_off ();
    25b0:	6e6f6365 	cdpvs	3, 6, cr6, cr15, cr5, {3}
endthread
    25b4:	63655364 	cmnvs	r5, #100, 6	; 0x90000001
    25b8:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    25bc:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 16c4 <dispose+0x48>
    25c0:	36746e69 	ldrbtcc	r6, [r4], -r9, ror #28
    25c4:	00745f34 	rsbseq	r5, r4, r4, lsr pc
    25c8:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    25cc:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    25d0:	53746e65 	cmnpl	r4, #1616	; 0x650
    25d4:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
    25d8:	4f4e0063 	svcmi	0x004e0063
    25dc:	5f4d4f52 	svcpl	0x004d4f52
    25e0:	524e4f41 	subpl	r4, lr, #260	; 0x104
    25e4:	75434354 	strbvc	r4, [r3, #-852]	; 0xfffffcac
    25e8:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    25ec:	42343674 	eorsmi	r3, r4, #116, 12	; 0x7400000
    25f0:	61567469 	cmpvs	r6, r9, ror #8
void RFCCPE0IntHandler (void) {
    25f4:	4765756c 	strbmi	r7, [r5, -ip, ror #10]!
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    25f8:	63007465 	movwvs	r7, #1125	; 0x465
		_BIS (dstate, DSTATE_IRST);
    25fc:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    2600:	7452746e 	ldrbvc	r7, [r2], #-1134	; 0xfffffb92
    2604:	65730063 	ldrbvs	r0, [r3, #-99]!	; 0xffffff9d
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2608:	646e4163 	strbtvs	r4, [lr], #-355	; 0xfffffe9d
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    260c:	53627553 	cmnpl	r2, #348127232	; 0x14c00000
    2610:	2e006365 	cdpcs	3, 0, cr6, cr0, cr5, {3}
	p_trigger (drvprcs, qevent);
    2614:	2f2e2e2f 	svccs	0x002e2e2f
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2618:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    261c:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    2620:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2624:	2f62696c 	svccs	0x0062696c
    2628:	5f6e6f61 	svcpl	0x006e6f61
    262c:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
    2630:	69730063 	ldmdbvs	r3!, {r0, r1, r5, r6}^
    2634:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
    2638:	4e006570 	cfrshl64mi	mvdx0, mvdx0, r6
    263c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2508 <cc1350_driver+0x104>
	RISE_N_SHINE;
    2640:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    2644:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    2648:	47697270 			; <UNDEFINED> instruction: 0x47697270
}
    264c:	4e007465 	cdpmi	4, 0, cr7, cr0, cr5, {3}
    2650:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 251c <cc1350_driver+0x118>
    2654:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    2658:	616c6564 	cmnvs	ip, r4, ror #10
    265c:	69750079 	ldmdbvs	r5!, {r0, r3, r4, r5, r6}^
    2660:	65523233 	ldrbvs	r3, [r2, #-563]	; 0xfffffdcd
void phys_cc1350 (int phy, int mbs) {
    2664:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
	if (rbuffl != 0)
    2668:	6f433233 	svcvs	0x00433233
    266c:	00746e75 	rsbseq	r6, r4, r5, ror lr
		syserror (ETOOMANY, "cc13");
    2670:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
		syserror (EREQPAR, "cc13 mb");
    2674:	2f2e2e2f 	svccs	0x002e2e2f
	if (mbs == 0)
    2678:	642f2e2e 	strtvs	r2, [pc], #-3630	; 2680 <phys_cc1350+0x1c>
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    267c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
		syserror (EREQPAR, "cc13 mb");
    2680:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    2684:	7570632f 	ldrbvc	r6, [r0, #-815]!	; 0xfffffcd1
	i = 0;
    2688:	4e00632e 	cdpmi	3, 0, cr6, cr0, cr14, {1}
	rbuffl = (byte) mbs;
    268c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2558 <cc1350_driver+0x154>
		db->config.type = 0;	// General (data in structure)
    2690:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
	rbuffl = (byte) mbs;
    2694:	6d697270 	sfmvs	f7, 2, [r9, #-448]!	; 0xfffffe40
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2698:	006b7361 	rsbeq	r7, fp, r1, ror #6
    269c:	4f524f4e 	svcmi	0x00524f4e
		if (db == NULL)
    26a0:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
			syserror (EMALLOC, "cc13");
    26a4:	6f6c4343 	svcvs	0x006c4343
    26a8:	6f536b63 	svcvs	0x00536b63
    26ac:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
		db->status = DATA_ENTRY_PENDING;
    26b0:	00746553 	rsbseq	r6, r4, r3, asr r5
		if (i)
    26b4:	52545046 	subspl	r5, r4, #70	; 0x46
			da->pNextEntry = (byte*) db;
    26b8:	454c465f 	strbmi	r4, [ip, #-1631]	; 0xfffff9a1
		db->length = rbuffl + 2;
    26bc:	45484354 	strbmi	r4, [r8, #-852]	; 0xfffffcac
    26c0:	5f323352 	svcpl	0x00323352
		db->config.type = 0;	// General (data in structure)
    26c4:	50460054 	subpl	r0, r6, r4, asr r0
		db->length = rbuffl + 2;
    26c8:	535f5254 	cmppl	pc, #84, 4	; 0x40000005
	db->pNextEntry = (byte*) re;
    26cc:	56444454 			; <UNDEFINED> instruction: 0x56444454
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    26d0:	545f4c41 	ldrbpl	r4, [pc], #-3137	; 26d8 <phys_cc1350+0x74>
    26d4:	524f4e00 	subpl	r4, pc, #0, 28
	if (rbuffs == NULL)
    26d8:	4f5f4d4f 	svcmi	0x005f4d4f
	rbuffs->pCurrEntry = (byte*) re;
    26dc:	6c434353 	mcrrvs	3, 5, r4, r3, cr3
	rbuffs->pLastEntry = NULL;
    26e0:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    26e4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26e8:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    26ec:	33697500 	cmncc	r9, #0, 10
    26f0:	63734f32 	cmnvs	r3, #50, 30	; 0xc8
    26f4:	6c655300 	stclvs	3, cr5, [r5], #-0
	rbuffl -= 2;
    26f8:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26fc:	42706d6f 	rsbsmi	r6, r0, #7104	; 0x1bc0
	rbuffl -= 2;
    2700:	00666552 	rsbeq	r6, r6, r2, asr r5
	physid = phy;
    2704:	52545046 	subspl	r5, r4, #70	; 0x46
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2708:	5345525f 	movtpl	r5, #21087	; 0x525f
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    270c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2710:	545f3444 	ldrbpl	r3, [pc], #-1092	; 2718 <phys_cc1350+0xb4>
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2714:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    2718:	736f5865 	cmnvc	pc, #6619136	; 0x650000
	utimer_add (&bckf_timer);
    271c:	5f6e4f63 	svcpl	0x006e4f63
	drvprcs = runthread (cc1350_driver);
    2720:	4e005643 	cfmadd32mi	mvax2, mvfx5, mvfx0, mvfx3
    2724:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 25f0 <cc1350_driver+0x1ec>
    2728:	43534f5f 	cmpmi	r3, #380	; 0x17c
	if (drvprcs == 0)
    272c:	415f4648 	cmpmi	pc, r8, asr #12
		syserror (ERESOURCE, "cc13");
    2730:	6d657474 	cfstrdvs	mvd7, [r5, #-464]!	; 0xfffffe30
    2734:	6f547470 	svcvs	0x00547470
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2738:	74697753 	strbtvc	r7, [r9], #-1875	; 0xfffff8ad
    273c:	6f546863 	svcvs	0x00546863
    2740:	63736f58 	cmnvs	r3, #88, 30	; 0x160
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2744:	53464800 	movtpl	r4, #26624	; 0x6800
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2748:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    274c:	66615365 	strbtvs	r5, [r1], -r5, ror #6
    2750:	69775365 	ldmdbvs	r7!, {r0, r2, r5, r6, r8, r9, ip, lr}^
    2754:	00686374 	rsbeq	r6, r8, r4, ror r3
    2758:	706d6574 	rsbvc	r6, sp, r4, ror r5
    275c:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2760:	0066664f 	rsbeq	r6, r6, pc, asr #12
    2764:	5377656e 	cmnpl	r7, #461373440	; 0x1b800000
    2768:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    276c:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
	plugch ();
    2770:	6e49656d 	cdpvs	5, 4, cr6, cr9, cr13, {3}
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2774:	70007355 	andvc	r7, r0, r5, asr r3
    2778:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    277c:	70003150 	andvc	r3, r0, r0, asr r1
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2780:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    2784:	70003250 	andvc	r3, r0, r0, asr r2
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2788:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
}
    278c:	5f003350 	svcpl	0x00003350
    2790:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
    2794:	5f363174 	svcpl	0x00363174
    2798:	50460074 	subpl	r0, r6, r4, ror r0
    279c:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    27a0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    27a4:	33444556 	movtcc	r4, #17750	; 0x4556
    27a8:	7000545f 	andvc	r5, r0, pc, asr r4
    27ac:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    27b0:	5373756f 	cmnpl	r3, #465567744	; 0x1bc00000
    27b4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    27b8:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
    27bc:	6e49656d 	cdpvs	5, 4, cr6, cr9, cr13, {3}
    27c0:	2e007355 	mcrcs	3, 0, r7, cr0, cr5, {2}
    27c4:	2f2e2e2f 	svccs	0x002e2e2f
    27c8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    27cc:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    27d0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    27d4:	2f62696c 	svccs	0x0062696c
    27d8:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
    27dc:	69740063 	ldmdbvs	r4!, {r0, r1, r5, r6}^
    27e0:	6f58656d 	svcvs	0x0058656d
    27e4:	74536373 	ldrbvc	r6, [r3], #-883	; 0xfffffc8d
    27e8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    27ec:	0056435f 	subseq	r4, r6, pc, asr r3
    27f0:	706d6574 	rsbvc	r6, sp, r4, ror r5
    27f4:	746c6544 	strbtvc	r6, [ip], #-1348	; 0xfffffabc
    27f8:	6f6c0061 	svcvs	0x006c0061
    27fc:	72685477 	rsbvc	r5, r8, #1996488704	; 0x77000000
    2800:	6f687365 	svcvs	0x00687365
    2804:	5200646c 	andpl	r6, r0, #108, 8	; 0x6c000000
    2808:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    280c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    2810:	4e006563 	cfsh32mi	mvfx6, mvfx0, #51
    2814:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 26e0 <phys_cc1350+0x7c>
    2818:	43534f5f 	cmpmi	r3, #380	; 0x17c
    281c:	545f4648 	ldrbpl	r4, [pc], #-1608	; 2824 <tcv_frm_null+0x4>
    2820:	4f6e7275 	svcmi	0x006e7275
    2824:	736f586e 	cmnvc	pc, #7208960	; 0x6e0000
    2828:	50460063 	subpl	r0, r6, r3, rrx
    282c:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    2830:	54455345 	strbpl	r5, [r5], #-837	; 0xfffffcbb
    2834:	5f564544 	svcpl	0x00564544
    2838:	50460054 	subpl	r0, r6, r4, asr r0
    283c:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    2840:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    2844:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
    2848:	5200545f 	andpl	r5, r0, #1593835520	; 0x5f000000
    284c:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    2850:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    2854:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    2858:	336e6f69 	cmncc	lr, #420	; 0x1a4
    285c:	706d6100 	rsbvc	r6, sp, r0, lsl #2
    2860:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    2864:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
    2868:	76726573 			; <UNDEFINED> instruction: 0x76726573
    286c:	6f4c6465 	svcvs	0x004c6465
    2870:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    2874:	00346e6f 	eorseq	r6, r4, pc, ror #28
strand (__outserial, const char*)
    2878:	4f524f4e 	svcmi	0x00524f4e
    287c:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2880:	5f464843 	svcpl	0x00464843
    2884:	74697753 	strbtvc	r7, [r9], #-1875	; 0xfffff8ad
endstrand
    2888:	6f546863 	svcvs	0x00546863
    288c:	734f6352 	movtvc	r6, #62290	; 0xf352
	ptr = data;
    2890:	72755463 	rsbsvc	r5, r5, #1660944384	; 0x63000000
    2894:	66664f6e 	strbtvs	r4, [r6], -lr, ror #30
	if (*ptr)
    2898:	63736f58 	cmnvs	r3, #88, 30	; 0x160
		len = strlen (ptr);
    289c:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    28a0:	414d5f52 	cmpmi	sp, r2, asr pc
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    28a4:	4c415658 	mcrrmi	6, 5, r5, r1, cr8
    28a8:	5300545f 	movwpl	r5, #1119	; 0x45f
    28ac:	63656c65 	cmnvs	r5, #25856	; 0x6500
    28b0:	43444174 	movtmi	r4, #16756	; 0x4174
    28b4:	706d6f43 	rsbvc	r6, sp, r3, asr #30
	len -= quant;
    28b8:	706e4942 	rsbvc	r4, lr, r2, asr #18
    28bc:	64007475 	strvs	r7, [r0], #-1141	; 0xfffffb8b
    28c0:	61746c65 	cmnvs	r4, r5, ror #24
	if (len == 0) {
    28c4:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
		ufree (data);
    28c8:	78614d00 	stmdavc	r1!, {r8, sl, fp, lr}^
		finish;
    28cc:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    28d0:	4f4e0065 	svcmi	0x004e0065
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    28d4:	5f4d4f52 	svcpl	0x004d4f52
    28d8:	5f43534f 	svcpl	0x0043534f
    28dc:	534f5048 	movtpl	r5, #61512	; 0xf048
    28e0:	6c655243 	sfmvs	f5, 2, [r5], #-268	; 0xfffffef4
    28e4:	76697461 	strbtvc	r7, [r9], -r1, ror #8
strand (__inserial, address)
    28e8:	65724665 	ldrbvs	r4, [r2, #-1637]!	; 0xfffff99b
    28ec:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    28f0:	664f7963 	strbvs	r7, [pc], -r3, ror #18
    28f4:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    28f8:	00746547 	rsbseq	r6, r4, r7, asr #10
	if (__inpline != NULL)
    28fc:	4f524f4e 	svcmi	0x00524f4e
    2900:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
		finish;
    2904:	5f464843 	svcpl	0x00464843
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    2908:	75626544 	strbvc	r6, [r2, #-1348]!	; 0xfffffabc
    290c:	74654767 	strbtvc	r4, [r5], #-1895	; 0xfffff899
    2910:	73797243 	cmnvc	r9, #805306372	; 0x30000004
    2914:	416c6174 	smcmi	50708	; 0xc614
		umwait (IM_INIT);
    2918:	696c706d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, ip, sp, lr}^
		release;
    291c:	65647574 	strbvs	r7, [r4, #-1396]!	; 0xfffffa8c
	savedata (data);
    2920:	61654d00 	cmnvs	r5, r0, lsl #26
	len = MAX_LINE_LENGTH;
    2924:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
	io (IM_READ, __cport, READ, ptr, 1);
    2928:	46006575 			; <UNDEFINED> instruction: 0x46006575
    292c:	5f525450 	svcpl	0x00525450
    2930:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    2934:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
	if (ptr == (char*) data) { // new line
    2938:	00545f31 	subseq	r5, r4, r1, lsr pc
    293c:	33637243 	cmncc	r3, #805306372	; 0x30000004
		if (*ptr == '\0') { // bin cmd
    2940:	6c460032 	mcrrvs	0, 3, r0, r6, cr2
			proceed (IM_BIN);
    2944:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    2948:	32337265 	eorscc	r7, r3, #1342177286	; 0x50000006
		if (*ptr < 0x20)
    294c:	74654700 	strbtvc	r4, [r5], #-1792	; 0xfffff900
    2950:	70696843 	rsbvc	r6, r9, r3, asr #16
			proceed (IM_READ);
    2954:	46006449 	strmi	r6, [r0], -r9, asr #8
    2958:	5f525450 	svcpl	0x00525450
	if (*ptr == '\n' || *ptr == '\r') {
    295c:	4e41454d 	cdpmi	5, 4, cr4, cr1, cr13, {2}
    2960:	5f4c4156 	svcpl	0x004c4156
    2964:	50460054 	subpl	r0, r6, r4, asr r0
		*ptr = '\0';
    2968:	415f5254 	cmpmi	pc, r4, asr r2	; <UNPREDICTABLE>
		__inpline = (char*)data;
    296c:	4f434344 	svcmi	0x00434344
		finish;
    2970:	4942504d 	stmdbmi	r2, {r0, r2, r3, r6, ip, lr}^
	if (len) {
    2974:	00545f4e 	subseq	r5, r4, lr, asr #30
		ptr++;
    2978:	52545046 	subspl	r5, r4, #70	; 0x46
    297c:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 2808 <tcv_rcv_null+0xc>
		len--;
    2980:	45524250 	ldrbmi	r4, [r2, #-592]	; 0xfffffdb0
	proceed (IM_READ);
    2984:	00545f46 	subseq	r5, r4, r6, asr #30
	io (IM_BIN, __cport, READ, ptr, 1);
    2988:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    298c:	6f437463 	svcvs	0x00437463
    2990:	4941706d 	stmdbmi	r1, {r0, r2, r3, r5, r6, ip, sp, lr}^
    2994:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
    2998:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
	len -= 2;
    299c:	4f435f52 	svcmi	0x00435f52
	if (len > *ptr + 1) // 1 for 0x04
    29a0:	4941504d 	stmdbmi	r1, {r0, r2, r3, r6, ip, lr}^
    29a4:	00545f4e 	subseq	r5, r4, lr, asr #30
		len = *ptr + 1;
    29a8:	706d6574 	rsbvc	r6, sp, r4, ror r5
    29ac:	746c6544 	strbtvc	r6, [ip], #-1348	; 0xfffffabc
	ptr++;
    29b0:	00325861 	eorseq	r5, r2, r1, ror #16
	quant = io (IM_BINL, __cport, READ, ptr, len);
    29b4:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    29b8:	6f6c4766 	svcvs	0x006c4766
    29bc:	736c6162 	cmnvc	ip, #-2147483624	; 0x80000018
    29c0:	4f504800 	svcmi	0x00504800
    29c4:	525f4353 	subspl	r4, pc, #1275068417	; 0x4c000001
    29c8:	72466c65 	subvc	r6, r6, #25856	; 0x6500
	len -= quant;
    29cc:	664f7165 	strbvs	r7, [pc], -r5, ror #2
		__inpline = (char*)data;
    29d0:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
		finish;
    29d4:	6c656400 	cfstrdvs	mvd6, [r5], #-0
	ptr += quant;
    29d8:	69546174 	ldmdbvs	r4, {r2, r4, r5, r6, r8, sp, lr}^
    29dc:	6953656d 	ldmdbvs	r3, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
endstrand
    29e0:	5865636e 	stmdapl	r5!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    29e4:	4f63736f 	svcmi	0x0063736f
	proceed (IM_BINL);
    29e8:	4d6e496e 			; <UNDEFINED> instruction: 0x4d6e496e
endstrand
    29ec:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
    29f0:	5461746c 	strbtpl	r7, [r1], #-1132	; 0xfffffb94
    29f4:	53706d65 	cmnpl	r0, #6464	; 0x1940
    29f8:	65636e69 	strbvs	r6, [r3, #-3689]!	; 0xfffff197
    29fc:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2a00:	66006e4f 	strvs	r6, [r0], -pc, asr #28
		if (res && (d < n))
    2a04:	61507469 	cmpvs	r0, r9, ror #8
    2a08:	736d6172 	cmnvc	sp, #-2147483620	; 0x8000001c
    2a0c:	61747300 	cmnvs	r4, r0, lsl #6
    2a10:	70757472 	rsbsvc	r7, r5, r2, ror r4
			res [d] = (char) c;
    2a14:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
		d++;
    2a18:	73556e49 	cmpvc	r5, #1168	; 0x490
    2a1c:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    2a20:	736f5865 	cmnvc	pc, #6619136	; 0x650000
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a24:	66664f63 	strbtvs	r4, [r6], -r3, ror #30
    2a28:	0056435f 	subseq	r4, r6, pc, asr r3
    2a2c:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
				enci (10000);
    2a30:	756f5366 	strbvc	r5, [pc, #-870]!	; 26d2 <phys_cc1350+0x6e>
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a34:	52656372 	rsbpl	r6, r5, #-939524095	; 0xc8000001
    2a38:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
	d = 0;
    2a3c:	706d6100 	rsbvc	r6, sp, r0, lsl #2
		c = *fm++;
    2a40:	706d6f43 	rsbvc	r6, sp, r3, asr #30
		if (c == '\\') {
    2a44:	00316854 	eorseq	r6, r1, r4, asr r8
			if ((c = *fm++) == '\0') {
    2a48:	4863734f 	stmdami	r3!, {r0, r1, r2, r3, r6, r8, r9, ip, sp, lr}^
    2a4c:	6f6c4766 	svcvs	0x006c4766
				outc ('\\');
    2a50:	736c6162 	cmnvc	ip, #-2147483624	; 0x80000018
			if ((c = *fm++) == '\0') {
    2a54:	4800745f 	stmdami	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
				outc ('\\');
    2a58:	5f445241 	svcpl	0x00445241
    2a5c:	5f495041 	svcpl	0x00495041
			outc (c);
    2a60:	69740054 	ldmdbvs	r4!, {r2, r4, r6}^
    2a64:	6e55656d 	cdpvs	5, 5, cr6, cr5, cr13, {3}
			if (c == '\0')
    2a68:	576c6974 			; <UNDEFINED> instruction: 0x576c6974
    2a6c:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
			outc (c);
    2a70:	4d6e4970 			; <UNDEFINED> instruction: 0x4d6e4970
				outc (val);
    2a74:	69750073 	ldmdbvs	r5!, {r0, r1, r4, r5, r6}^
				val = (word) va_arg (ap, aword);
    2a78:	72533233 	subsvc	r3, r3, #805306371	; 0x30000003
		if (c == '%') {
    2a7c:	6b6c4363 	blvs	1b13810 <__ccfg+0x1af3868>
    2a80:	43534f00 	cmpmi	r3, #0, 30
			c = *fm++;
    2a84:	6f536648 	svcvs	0x00536648
			switch (c) {
    2a88:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2a8c:	74697753 	strbtvc	r7, [r9], #-1875	; 0xfffff8ad
    2a90:	46006863 	strmi	r6, [r0], -r3, ror #16
    2a94:	5f525450 	svcpl	0x00525450
    2a98:	33435243 	movtcc	r5, #12867	; 0x3243
    2a9c:	00545f32 	subseq	r5, r4, r2, lsr pc
    2aa0:	706d6574 	rsbvc	r6, sp, r4, ror r5
    2aa4:	43676544 	cmnmi	r7, #68, 10	; 0x11000000
				outc ('%');
    2aa8:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2aac:	494d5f52 	stmdbmi	sp, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
				outc (c);
    2ab0:	4c41564e 	mcrrmi	6, 4, r5, r1, cr14
    2ab4:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
    2ab8:	5f525450 	svcpl	0x00525450
				if (c == '\0')
    2abc:	4f534648 	svcmi	0x00534648
				return d;
    2ac0:	45435255 	strbmi	r5, [r3, #-597]	; 0xfffffdab
}
    2ac4:	45464153 	strbmi	r4, [r6, #-339]	; 0xfffffead
    2ac8:	54495753 	strbpl	r5, [r9], #-1875	; 0xfffff8ad
			switch (c) {
    2acc:	545f4843 	ldrbpl	r4, [pc], #-2115	; 2ad4 <__pi_vfparse+0xb0>
    2ad0:	6e694d00 	cdpvs	13, 6, cr4, cr9, cr0, {0}
    2ad4:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
				for (i = 12; ; i -= 4) {
    2ad8:	72700065 	rsbsvc	r0, r0, #101	; 0x65
				val = (word) va_arg (ap, aword);
    2adc:	694c7665 	stmdbvs	ip, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
						[ (val >> i) & 0xf ]);
    2ae0:	74696d6d 	strbtvc	r6, [r9], #-3437	; 0xfffff293
    2ae4:	6e493532 	mcrvs	5, 2, r3, cr9, cr2, {1}
    2ae8:	4e007355 	mcrmi	3, 0, r7, cr0, cr5, {2}
					outc (__pi_hex_enc_table
    2aec:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 29b8 <__inserial+0xd0>
    2af0:	43534f5f 	cmpmi	r3, #380	; 0x17c
					if (i == 0)
    2af4:	4f50485f 	svcmi	0x0050485f
    2af8:	65524353 	ldrbvs	r4, [r2, #-851]	; 0xfffffcad
				for (i = 12; ; i -= 4) {
    2afc:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
				val = (word) va_arg (ap, aword);
    2b00:	72466576 	subvc	r6, r6, #494927872	; 0x1d800000
				if (c == 'd' && (val & 0x8000) != 0) {
    2b04:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
				val = (word) va_arg (ap, aword);
    2b08:	4f79636e 	svcmi	0x0079636e
				if (c == 'd' && (val & 0x8000) != 0) {
    2b0c:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    2b10:	526f5474 	rsbpl	r5, pc, #116, 8	; 0x74000000
					outc ('-');
    2b14:	726f4346 	rsbvc	r4, pc, #402653185	; 0x18000001
    2b18:	726f4665 	rsbvc	r4, pc, #105906176	; 0x6500000
					val = (~val) + 1;
    2b1c:	4374616d 	cmnmi	r4, #1073741851	; 0x4000001b
    2b20:	65766e6f 	ldrbvs	r6, [r6, #-3695]!	; 0xfffff191
				for (i = 12; ; i -= 4) {
    2b24:	53007472 	movwpl	r7, #1138	; 0x472
				enci (10000);
    2b28:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2b2c:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 2964 <__inserial+0x7c>
    2b30:	65524170 	ldrbvs	r4, [r2, #-368]	; 0xfffffe90
    2b34:	69750066 	ldmdbvs	r5!, {r1, r2, r5, r6}^
    2b38:	6c433233 	sfmvs	f3, 2, [r3], {51}	; 0x33
    2b3c:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    2b40:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2b44:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
    2b48:	76726573 			; <UNDEFINED> instruction: 0x76726573
    2b4c:	6f4c6465 	svcvs	0x004c6465
    2b50:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    2b54:	00316e6f 	eorseq	r6, r1, pc, ror #28
    2b58:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2b5c:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    2b60:	61636f4c 	cmnvs	r3, ip, asr #30
    2b64:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    2b68:	5f5f0032 	svcpl	0x005f0032
    2b6c:	31746e69 	cmncc	r4, r9, ror #28
				if (c == 'd' || c == 'u') {
    2b70:	00745f36 	rsbseq	r5, r4, r6, lsr pc
    2b74:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
					if (c == 'd' &&
    2b78:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
					val = va_arg (ap, lword);
    2b7c:	61636f4c 	cmnvs	r3, ip, asr #30
					fm++;
    2b80:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
					if (c == 'd' &&
    2b84:	74530035 	ldrbvc	r0, [r3], #-53	; 0xffffffcb
    2b88:	44646e61 	strbtmi	r6, [r4], #-3681	; 0xfffff19f
						outc ('-');
    2b8c:	61697665 	cmnvs	r9, r5, ror #12
    2b90:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
						val = (~val) + 1;
    2b94:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
				enci (10000);
    2b98:	66720065 	ldrbtvs	r0, [r2], -r5, rrx
					enci (1000000000UL);
    2b9c:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
    2ba0:	71657246 	cmnvc	r5, r6, asr #4
    2ba4:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    2ba8:	68007465 	stmdavs	r0, {r0, r2, r5, r6, sl, ip, sp, lr}
    2bac:	54686769 	strbtpl	r6, [r8], #-1897	; 0xfffff897
    2bb0:	73657268 	cmnvc	r5, #104, 4	; 0x80000006
    2bb4:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xfffff098
    2bb8:	524f4e00 	subpl	r4, pc, #0, 28
    2bbc:	4f5f4d4f 	svcmi	0x005f4d4f
    2bc0:	46484353 			; <UNDEFINED> instruction: 0x46484353
    2bc4:	6265445f 	rsbvs	r4, r5, #1593835520	; 0x5f000000
    2bc8:	65476775 	strbvs	r6, [r7, #-1909]	; 0xfffff88b
    2bcc:	70784574 	rsbsvc	r4, r8, r4, ror r5
    2bd0:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
    2bd4:	65764164 	ldrbvs	r4, [r6, #-356]!	; 0xfffffe9c
    2bd8:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    2bdc:	73797243 	cmnvc	r9, #805306372	; 0x30000004
				} else if (c == 'x') {
    2be0:	416c6174 	smcmi	50708	; 0xc614
					for (i = 28; ; i -= 4) {
    2be4:	696c706d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, ip, sp, lr}^
					val = va_arg (ap, lword);
    2be8:	65647574 	strbvs	r7, [r4, #-1396]!	; 0xfffffa8c
							[ (val >> i) & 0xf ]);
    2bec:	63736f00 	cmnvs	r3, #0, 30
    2bf0:	52676643 	rsbpl	r6, r7, #70254592	; 0x4300000
						outc (__pi_hex_enc_table
    2bf4:	6f436765 	svcvs	0x00436765
    2bf8:	46007970 			; <UNDEFINED> instruction: 0x46007970
    2bfc:	5f525450 	svcpl	0x00525450
						if (i == 0)
    2c00:	46544547 	ldrbmi	r4, [r4], -r7, asr #10
    2c04:	5a49534c 	bpl	125793c <__ccfg+0x1237994>
					for (i = 28; ; i -= 4) {
    2c08:	00545f45 	subseq	r5, r4, r5, asr #30
					outc ('%');
    2c0c:	4f524f4e 	svcmi	0x00524f4e
    2c10:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2c14:	5f464843 	svcpl	0x00464843
					outc ('l');
    2c18:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    2c1c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
				val = (word) va_arg (ap, aword);
    2c20:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
				outc (val);
    2c24:	4600656d 	strmi	r6, [r0], -sp, ror #10
    2c28:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
				while (*st != '\0') {
    2c2c:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    2c30:	00657a69 	rsbeq	r7, r5, r9, ror #20
    2c34:	52545046 	subspl	r5, r4, #70	; 0x46
    2c38:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 2ac4 <__pi_vfparse+0xa0>
					outc (*st);
    2c3c:	45524150 	ldrbmi	r4, [r2, #-336]	; 0xfffffeb0
    2c40:	00545f46 	subseq	r5, r4, r6, asr #30
					st++;
    2c44:	52545046 	subspl	r5, r4, #70	; 0x46
		c = *fm++;
    2c48:	5445475f 	strbpl	r4, [r5], #-1887	; 0xfffff8a1
    2c4c:	50494843 	subpl	r4, r9, r3, asr #16
    2c50:	545f4449 	ldrbpl	r4, [pc], #-1097	; 2c58 <vform+0x4>
char *vform (char *res, const char *fm, va_list aq) {
    2c54:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2c58:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
	if (res != NULL) {
    2c5c:	56524553 			; <UNDEFINED> instruction: 0x56524553
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2c60:	5f354445 	svcpl	0x00354445
    2c64:	61700054 	cmnvs	r0, r4, asr r0
    2c68:	506d6172 	rsbpl	r6, sp, r2, ror r1
}
    2c6c:	4f4e0030 	svcmi	0x004e0030
    2c70:	5f4d4f52 	svcpl	0x004d4f52
	fml = strlen (fm) + 17;
    2c74:	43434652 	movtmi	r4, #13906	; 0x3652
    2c78:	6e496570 	mcrvs	5, 2, r6, cr9, cr0, {3}
    2c7c:	74654774 	strbtvc	r4, [r5], #-1908	; 0xfffff88c
	if ((res = (char*) umalloc (fml)) == NULL)
    2c80:	43646e41 	cmnmi	r4, #1040	; 0x410
    2c84:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2c88:	764f7000 	strbvc	r7, [pc], -r0
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2c8c:	69727265 	ldmdbvs	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2c90:	73006564 	movwvc	r6, #1380	; 0x564
    2c94:	5f657a69 	svcpl	0x00657a69
    2c98:	766f0074 			; <UNDEFINED> instruction: 0x766f0074
		ufree (res);
    2c9c:	69727265 	ldmdbvs	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
		goto Again;
    2ca0:	695f6564 	ldmdbvs	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
	if (buf == NULL || fmt == NULL)
    2ca4:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
int vscan (const char *buf, const char *fmt, va_list ap) {
    2ca8:	524f4e00 	subpl	r4, pc, #0, 28
	if (buf == NULL || fmt == NULL)
    2cac:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
    2cb0:	64414346 	strbvs	r4, [r1], #-838	; 0xfffffcba
    2cb4:	63563369 	cmpvs	r6, #-1543503871	; 0xa4000001
		    	    case 'u': scanu (lword); break;
    2cb8:	6f644c6f 	svcvs	0x00644c6f
			while (isspace (*buf)) buf++;
    2cbc:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
    2cc0:	4d656761 	stclmi	7, cr6, [r5, #-388]!	; 0xfffffe7c
	while (*fmt != '\0') {
    2cc4:	0065646f 	rsbeq	r6, r5, pc, ror #8
		if (*fmt++ != '%')
    2cc8:	5f636672 	svcpl	0x00636672
		switch (*fmt++) {
    2ccc:	5f444d43 	svcpl	0x00444d43
    2cd0:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
    2cd4:	4441525f 	strbmi	r5, [r1], #-607	; 0xfffffda1
    2cd8:	535f4f49 	cmppl	pc, #292	; 0x124
    2cdc:	50555445 	subspl	r5, r5, r5, asr #8
    2ce0:	4e00745f 	cfmvsrmi	mvf0, r7
    2ce4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2bb0 <__pi_vfparse+0x18c>
}
    2ce8:	4346525f 	movtmi	r5, #25183	; 0x625f
		switch (*fmt++) {
    2cec:	72546652 	subsvc	r6, r4, #85983232	; 0x5200000
    2cf0:	65536d69 	ldrbvs	r6, [r3, #-3433]	; 0xfffff297
    2cf4:	4f4e0074 	svcmi	0x004e0074
    2cf8:	5f4d4f52 	svcpl	0x004d4f52
			while (isspace (*buf)) buf++;
    2cfc:	53434652 	movtpl	r4, #13906	; 0x3652
    2d00:	68746e79 	ldmdavs	r4!, {r0, r3, r4, r5, r6, r9, sl, fp, sp, lr}^
    2d04:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    2d08:	776f4472 			; <UNDEFINED> instruction: 0x776f4472
    2d0c:	766f006e 	strbtvc	r0, [pc], -lr, rrx
    2d10:	69727265 	ldmdbvs	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
			if (*buf == '\0')
    2d14:	725f6564 	subsvc	r6, pc, #100, 10	; 0x19000000
			if (*buf != ',') {
    2d18:	6d697274 	sfmvs	f7, 2, [r9, #-464]!	; 0xfffffe30
			sap = va_arg (ap, char*);
    2d1c:	704f7000 	subvc	r7, pc, r0
			nc++;
    2d20:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
			if (*buf != ',') {
    2d24:	69750070 	ldmdbvs	r5!, {r4, r5, r6}^
				while (!isspace (*buf) && *buf != ',' &&
    2d28:	66493233 			; <UNDEFINED> instruction: 0x66493233
    2d2c:	66720067 	ldrbtvs	r0, [r2], -r7, rrx
    2d30:	65645f63 	strbvs	r5, [r4, #-3939]!	; 0xfffff09d
    2d34:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    2d38:	71724974 	cmnvc	r2, r4, ror r9
    2d3c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    2d40:	524f4e00 	subpl	r4, pc, #0, 28
			while (isspace (*buf)) buf++;
    2d44:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
    2d48:	50434346 	subpl	r4, r3, r6, asr #6
    2d4c:	74615045 	strbtvc	r5, [r1], #-69	; 0xffffffbb
    2d50:	65526863 	ldrbvs	r6, [r2, #-2147]	; 0xfffff79d
    2d54:	00746573 	rsbseq	r6, r4, r3, ror r5
			if (*buf == ',') buf++;
    2d58:	5f636672 	svcpl	0x00636672
    2d5c:	5f444d43 	svcpl	0x00444d43
			*sap = '\0';
    2d60:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
			break;
    2d64:	4441525f 	strbmi	r5, [r1], #-607	; 0xfffffda1
		    case 'd': scani (word); break;
    2d68:	535f4f49 	cmppl	pc, #292	; 0x124
    2d6c:	50555445 	subspl	r5, r5, r5, asr #8
    2d70:	7000735f 	andvc	r7, r0, pc, asr r3
    2d74:	72546652 	subsvc	r6, r4, #85983232	; 0x5200000
    2d78:	6f006d69 	svcvs	0x00006d69
    2d7c:	72726576 	rsbsvc	r6, r2, #494927872	; 0x1d800000
    2d80:	5f656469 	svcpl	0x00656469
    2d84:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
    2d88:	2f2e0065 	svccs	0x002e0065
    2d8c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2d90:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2d94:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    2d98:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    2d9c:	722f6269 	eorvc	r6, pc, #-1879048186	; 0x90000006
    2da0:	632e6366 			; <UNDEFINED> instruction: 0x632e6366
    2da4:	63667200 	cmnvs	r6, #0, 4
    2da8:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
    2dac:	4441525f 	strbmi	r5, [r1], #-607	; 0xfffffda1
    2db0:	535f4f49 	cmppl	pc, #292	; 0x124
    2db4:	50555445 	subspl	r5, r5, r5, asr #8
    2db8:	7200735f 	andvc	r7, r0, #2080374785	; 0x7c000001
    2dbc:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    2dc0:	525f444d 	subspl	r4, pc, #1291845632	; 0x4d000000
    2dc4:	4f494441 	svcmi	0x00494441
    2dc8:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    2dcc:	745f5055 	ldrbvc	r5, [pc], #-85	; 2dd4 <vscan+0x130>
    2dd0:	6e456200 	cdpvs	2, 4, cr6, cr5, cr0, {0}
    2dd4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
		    case 'u': scanu (word); break;
    2dd8:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    2ddc:	725f3167 	subsvc	r3, pc, #-1073741799	; 0xc0000019
    2de0:	6d697274 	sfmvs	f7, 2, [r9, #-464]!	; 0xfffffe30
    2de4:	524f4e00 	subpl	r4, pc, #0, 28
    2de8:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
    2dec:	54524346 	ldrbpl	r4, [r2], #-838	; 0xfffffcba
    2df0:	006d6972 	rsbeq	r6, sp, r2, ror r9
    2df4:	4f524f4e 	svcmi	0x00524f4e
    2df8:	46525f4d 	ldrbmi	r5, [r2], -sp, asr #30
    2dfc:	6f6f4443 	svcvs	0x006f4443
    2e00:	6c656272 	sfmvs	f6, 2, [r5], #-456	; 0xfffffe38
    2e04:	6e65536c 	cdpvs	3, 6, cr5, cr5, cr12, {3}
    2e08:	006f5464 	rsbeq	r5, pc, r4, ror #8
    2e0c:	41434652 	cmpmi	r3, r2, asr r6
    2e10:	6e496b63 	vmlsvs.f64	d22, d9, d19
    2e14:	656c4374 	strbvs	r4, [ip, #-884]!	; 0xfffffc8c
    2e18:	64007261 	strvs	r7, [r0], #-609	; 0xfffffd9f
    2e1c:	64697669 	strbtvs	r7, [r9], #-1641	; 0xfffff997
		    case 'x': scanx (word); break;
    2e20:	4e007265 	cdpmi	2, 0, cr7, cr0, cr5, {3}
    2e24:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2cf0 <vscan+0x4c>
    2e28:	4346525f 	movtmi	r5, #25183	; 0x625f
    2e2c:	72546652 	subsvc	r6, r4, #85983232	; 0x5200000
    2e30:	65526d69 	ldrbvs	r6, [r2, #-3433]	; 0xfffff297
    2e34:	6d006461 	cfstrsvs	mvf6, [r0, #-388]	; 0xfffffe7c
    2e38:	65723170 	ldrbvs	r3, [r2, #-368]!	; 0xfffffe90
    2e3c:	72540076 	subsvc	r0, r4, #118	; 0x76
    2e40:	66416d69 	strbvs	r6, [r1], -r9, ror #26
    2e44:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    2e48:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
    2e4c:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    2e50:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    2e54:	72467075 	subvc	r7, r6, #117	; 0x75
    2e58:	68536d6f 	ldmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    2e5c:	6f447475 	svcvs	0x00447475
    2e60:	4e006e77 	mcrmi	14, 0, r6, cr0, cr7, {3}
    2e64:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2d30 <vscan+0x8c>
    2e68:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    2e6c:	66417075 			; <UNDEFINED> instruction: 0x66417075
    2e70:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    2e74:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
    2e78:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    2e7c:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    2e80:	72467075 	subvc	r7, r6, #117	; 0x75
    2e84:	68536d6f 	ldmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    2e88:	6f447475 	svcvs	0x00447475
    2e8c:	66436e77 			; <UNDEFINED> instruction: 0x66436e77
    2e90:	4e003167 	adfmisz	f3, f0, f7
    2e94:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2d60 <vscan+0xbc>
			switch (*fmt++) {
    2e98:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    2e9c:	66417075 			; <UNDEFINED> instruction: 0x66417075
    2ea0:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    2ea4:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
    2ea8:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    2eac:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
		    	    case 'd': scani (lword); break;
    2eb0:	72467075 	subvc	r7, r6, #117	; 0x75
    2eb4:	68536d6f 	ldmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    2eb8:	6f447475 	svcvs	0x00447475
    2ebc:	66436e77 			; <UNDEFINED> instruction: 0x66436e77
    2ec0:	4e003267 	cdpmi	2, 0, cr3, cr0, cr7, {3}
    2ec4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2d90 <vscan+0xec>
    2ec8:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    2ecc:	66417075 			; <UNDEFINED> instruction: 0x66417075
    2ed0:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    2ed4:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
    2ed8:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    2edc:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    2ee0:	72467075 	subvc	r7, r6, #117	; 0x75
    2ee4:	68536d6f 	ldmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    2ee8:	6f447475 	svcvs	0x00447475
    2eec:	66436e77 			; <UNDEFINED> instruction: 0x66436e77
    2ef0:	2e003367 	cdpcs	3, 0, cr3, cr0, cr7, {3}
    2ef4:	2f2e2e2f 	svccs	0x002e2e2f
    2ef8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2efc:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    2f00:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2f04:	2f62696c 	svccs	0x0062696c
    2f08:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
		    	    case 'x': scanx (lword); break;
    2f0c:	00632e70 	rsbeq	r2, r3, r0, ror lr
    2f10:	4f524f4e 	svcmi	0x00524f4e
    2f14:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    2f18:	53707574 	cmnpl	r0, #116, 10	; 0x1d000000
    2f1c:	61437465 	cmpvs	r3, r5, ror #8
    2f20:	4d656863 	stclmi	8, cr6, [r5, #-396]!	; 0xfffffe74
    2f24:	4165646f 	cmnmi	r5, pc, ror #8
    2f28:	726f6363 	rsbvc	r6, pc, #-1946157055	; 0x8c000001
    2f2c:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    2f30:	63436f54 	movtvs	r6, #16212	; 0x3f54
    2f34:	65536766 	ldrbvs	r6, [r3, #-1894]	; 0xfffff89a
    2f38:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
    2f3c:	69750067 	ldmdbvs	r5!, {r0, r1, r2, r5, r6}^
    2f40:	63463233 	movtvs	r3, #25139	; 0x6233
    2f44:	52316766 	eorspl	r6, r1, #26738688	; 0x1980000
    2f48:	73697665 	cmnvc	r9, #105906176	; 0x6500000
    2f4c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    2f50:	574e4f41 	strbpl	r4, [lr, -r1, asr #30]
    2f54:	744a4355 	strbvc	r4, [sl], #-853	; 0xfffffcab
    2f58:	6f506761 	svcvs	0x00506761
    2f5c:	4f726577 	svcmi	0x00726577
    2f60:	54006666 	strpl	r6, [r0], #-1638	; 0xfffff99a
    2f64:	416d6972 	smcmi	54930	; 0xd692
    2f68:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
    2f6c:	646c6f43 	strbtvs	r6, [ip], #-3907	; 0xfffff0bd
    2f70:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2f74:	4f4e0074 	svcmi	0x004e0074
    2f78:	5f4d4f52 	svcpl	0x004d4f52
		    	    case 'd': scani (lword); break;
    2f7c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    2f80:	69725470 	ldmdbvs	r2!, {r4, r5, r6, sl, ip, lr}^
    2f84:	7665446d 	strbtvc	r4, [r5], -sp, ror #8
    2f88:	00656369 	rsbeq	r6, r5, r9, ror #6
    2f8c:	69727476 	ldmdbvs	r2!, {r1, r2, r4, r5, r6, sl, ip, sp, lr}^
    2f90:	64755f6d 	ldrbtvs	r5, [r5], #-3949	; 0xfffff093
    2f94:	75006769 	strvc	r6, [r0, #-1897]	; 0xfffff897
		    	    case 'u': scanu (lword); break;
    2f98:	41323369 	teqmi	r2, r9, ror #6
    2f9c:	79536e6f 	ldmdbvc	r3, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2fa0:	73655273 	cmnvc	r5, #805306375	; 0x30000007
    2fa4:	74637465 	strbtvc	r7, [r3], #-1125	; 0xfffffb9b
    2fa8:	6363006c 	cmnvs	r3, #108	; 0x6c
    2fac:	4d5f6766 	ldclmi	7, cr6, [pc, #-408]	; 2e1c <vscan+0x178>
    2fb0:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    2fb4:	52666e6f 	rsbpl	r6, r6, #1776	; 0x6f0
    2fb8:	54006765 	strpl	r6, [r0], #-1893	; 0xfffff89b
    2fbc:	416d6972 	smcmi	54930	; 0xd692
    2fc0:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
    2fc4:	646c6f43 	strbtvs	r6, [ip], #-3907	; 0xfffff0bd
    2fc8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2fcc:	6b615774 	blvs	1858da4 <__ccfg+0x1838dfc>
    2fd0:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
    2fd4:	536d6f72 	cmnpl	sp, #456	; 0x1c8
    2fd8:	44747568 	ldrbtmi	r7, [r4], #-1384	; 0xfffffa98
    2fdc:	576e776f 	strbpl	r7, [lr, -pc, ror #14]!
		    	    case 'x': scanx (lword); break;
    2fe0:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    2fe4:	6f724670 	svcvs	0x00724670
			if ((c = *buf++) == '\0')
    2fe8:	776f506d 	strbvc	r5, [pc, -sp, rrx]!
    2fec:	6f447265 	svcvs	0x00447265
			sap = va_arg (ap, char*);
    2ff0:	4e006e77 	mcrmi	14, 0, r6, cr0, cr7, {3}
			nc++;
    2ff4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2ec0 <vscan+0x21c>
			break;
    2ff8:	6968545f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
			while (isspace (*buf)) buf++;
    2ffc:	646f4373 	strbtvs	r4, [pc], #-883	; 3004 <vscan+0x360>
    3000:	42734965 	rsbsmi	r4, r3, #1654784	; 0x194000
    3004:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
						*sap++ = *buf++;
    3008:	43726f46 	cmnmi	r2, #280	; 0x118
    300c:	78333143 	ldmdavc	r3!, {r0, r1, r6, r8, ip, sp}
			while (isspace (*buf)) buf++;
    3010:	52774878 	rsbspl	r4, r7, #120, 16	; 0x780000
    3014:	30327665 	eorscc	r7, r2, r5, ror #12
    3018:	4c646e41 	stclmi	14, cr6, [r4], #-260	; 0xfffffefc
		return 0;
    301c:	72657461 	rsbvc	r7, r5, #1627389952	; 0x61000000
    3020:	6c61485f 	stclvs	8, cr4, [r1], #-380	; 0xfffffe84
		    case 'x': scanx (word); break;
    3024:	56664974 			; <UNDEFINED> instruction: 0x56664974
    3028:	616c6f69 	cmnvs	ip, r9, ror #30
		    	    case 'x': scanx (lword); break;
    302c:	00646574 	rsbeq	r6, r4, r4, ror r5
    3030:	69727476 	ldmdbvs	r2!, {r1, r2, r4, r5, r6, sl, ip, sp, lr}^
    3034:	6f625f6d 	svcvs	0x00625f6d
    3038:	63630064 	cmnvs	r3, #100	; 0x64
    303c:	78456766 	stmdavc	r5, {r1, r2, r5, r6, r8, r9, sl, sp, lr}^
    3040:	43664c74 	cmnmi	r6, #116, 24	; 0x7400
    3044:	63006b6c 	movwvs	r6, #2924	; 0xb6c
    3048:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    304c:	6648746e 	strbvs	r7, [r8], -lr, ror #8
    3050:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    3054:	6975006b 	ldmdbvs	r5!, {r0, r1, r3, r5, r6}^
    3058:	64563233 	ldrbvs	r3, [r6], #-563	; 0xfffffdcd
    305c:	72547264 	subsvc	r7, r4, #100, 4	; 0x40000006
    3060:	61566d69 	cmpvs	r6, r9, ror #26
    3064:	4f4e006c 	svcmi	0x004e006c
    3068:	5f4d4f52 	svcpl	0x004d4f52
    306c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3070:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    3074:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3078:	41726f46 	cmnmi	r2, r6, asr #30
    307c:	7962616e 	stmdbvc	r2!, {r1, r2, r3, r5, r6, r8, sp, lr}^
    3080:	73736170 	cmnvc	r3, #112, 2
    3084:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    3088:	4e003165 	adfmisz	f3, f0, f5
    308c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2f58 <vscan+0x2b4>
    3090:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3094:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    3098:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    309c:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    30a0:	726c6244 	rsbvc	r6, ip, #68, 4	; 0x40000004
    30a4:	706f6f4c 	rsbvc	r6, pc, ip, asr #30
    30a8:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
    30ac:	65527265 	ldrbvs	r7, [r2, #-613]	; 0xfffffd9b
    30b0:	56746573 			; <UNDEFINED> instruction: 0x56746573
    30b4:	61746c6f 	cmnvs	r4, pc, ror #24
    30b8:	63006567 	movwvs	r6, #1383	; 0x567
    30bc:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    30c0:	7254746e 	subsvc	r7, r4, #1845493760	; 0x6e000000
    30c4:	76006d69 	strvc	r6, [r0], -r9, ror #26
    30c8:	43736d69 	cmnmi	r3, #6720	; 0x1a40
    30cc:	6f4d6c74 	svcvs	0x004d6c74
    30d0:	00306564 	eorseq	r6, r0, r4, ror #10
    30d4:	61696269 	cmnvs	r9, r9, ror #4
    30d8:	66664f73 	uqsub16vs	r4, r6, r3
    30dc:	00746573 	rsbseq	r6, r4, r3, ror r5
    30e0:	54746567 	ldrbtpl	r6, [r4], #-1383	; 0xfffffa99
    30e4:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    30e8:	6f58726f 	svcvs	0x0058726f
    30ec:	66686373 			; <UNDEFINED> instruction: 0x66686373
    30f0:	566c7443 	strbtpl	r7, [ip], -r3, asr #8
    30f4:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    30f8:	524f4e00 	subpl	r4, pc, #0, 28
    30fc:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3100:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3104:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    3108:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    310c:	6f58726f 	svcvs	0x0058726f
    3110:	66486373 			; <UNDEFINED> instruction: 0x66486373
    3114:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
    3118:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    311c:	4f4e0074 	svcmi	0x004e0074
    3120:	5f4d4f52 	svcpl	0x004d4f52
    3124:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3128:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    312c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3130:	52726f46 	rsbspl	r6, r2, #280	; 0x118
    3134:	63734f63 	cmnvs	r3, #396	; 0x18c
    3138:	4249664c 	submi	r6, r9, #76, 12	; 0x4c00000
    313c:	54736169 	ldrbtpl	r6, [r3], #-361	; 0xfffffe97
    3140:	006d6972 	rsbeq	r6, sp, r2, ror r9
    3144:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
    3148:	6a644161 	bvs	19136d4 <__ccfg+0x18f372c>
    314c:	00747375 	rsbseq	r7, r4, r5, ror r3
    3150:	4f524f4e 	svcmi	0x00524f4e
    3154:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3158:	47707574 			; <UNDEFINED> instruction: 0x47707574
    315c:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    3160:	6f466d69 	svcvs	0x00466d69
    3164:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    3168:	43664863 	cmnmi	r6, #6488064	; 0x630000
    316c:	67006c74 	smlsdxvs	r0, r4, ip, r6
    3170:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    3174:	6f466d69 	svcvs	0x00466d69
    3178:	64615272 	strbtvs	r5, [r1], #-626	; 0xfffffd8e
    317c:	74784563 	ldrbtvc	r4, [r8], #-1379	; 0xfffffa9d
    3180:	56676643 	strbtpl	r6, [r7], -r3, asr #12
    3184:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3188:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    318c:	72546174 	subsvc	r6, r4, #116, 2
    3190:	75006d69 	strvc	r6, [r0, #-3433]	; 0xfffff297
    3194:	58323369 	ldmdapl	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
    3198:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    319c:	73614666 	cmnvc	r1, #106954752	; 0x6600000
    31a0:	61745374 	cmnvs	r4, r4, ror r3
    31a4:	61567472 	cmpvs	r6, r2, ror r4
    31a8:	0065756c 	rsbeq	r7, r5, ip, ror #10
    31ac:	4f524f4e 	svcmi	0x00524f4e
    31b0:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    31b4:	47707574 			; <UNDEFINED> instruction: 0x47707574
    31b8:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    31bc:	6f466d69 	svcvs	0x00466d69
    31c0:	706d4172 	rsbvc	r4, sp, r2, ror r1
    31c4:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    31c8:	00316854 	eorseq	r6, r1, r4, asr r8
    31cc:	4f524f4e 	svcmi	0x00524f4e
    31d0:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    31d4:	47707574 			; <UNDEFINED> instruction: 0x47707574
    31d8:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    31dc:	6f466d69 	svcvs	0x00466d69
    31e0:	706d4172 	rsbvc	r4, sp, r2, ror r1
    31e4:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    31e8:	00326854 	eorseq	r6, r2, r4, asr r8
    31ec:	4f524f4e 	svcmi	0x00524f4e
    31f0:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    31f4:	47707574 			; <UNDEFINED> instruction: 0x47707574
    31f8:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    31fc:	6f466d69 	svcvs	0x00466d69
    3200:	63644172 	cmnvs	r4, #-2147483620	; 0x8000001c
    3204:	62566853 	subsvs	r6, r6, #5439488	; 0x530000
    3208:	6e456675 	mcrvs	6, 2, r6, cr5, cr5, {3}
    320c:	524f4e00 	subpl	r4, pc, #0, 28
    3210:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 3218 <NOROM_RFCDoorbellSendTo+0x10>
    3214:	32334944 	eorscc	r4, r3, #68, 18	; 0x110000
    3218:	57676552 			; <UNDEFINED> instruction: 0x57676552
    321c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    3220:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    3224:	61443167 	cmpvs	r4, r7, ror #2
    3228:	74006174 	strvc	r6, [r0], #-372	; 0xfffffe8c
    322c:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3230:	6352726f 	cmpvs	r2, #-268435450	; 0xf0000006
    3234:	4c63734f 	stclmi	3, cr7, [r3], #-316	; 0xfffffec4
    3238:	69424966 	stmdbvs	r2, {r1, r2, r5, r6, r8, fp, lr}^
    323c:	72547361 	subsvc	r7, r4, #-2080374783	; 0x84000001
    3240:	61566d69 	cmpvs	r6, r9, ror #26
    3244:	0065756c 	rsbeq	r7, r5, ip, ror #10
    3248:	67726174 			; <UNDEFINED> instruction: 0x67726174
    324c:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    3250:	4e006d69 	cdpmi	13, 0, cr6, cr0, cr9, {3}
    3254:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3120 <NOROM_OSCClockSourceSet+0x4c>
    3258:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    325c:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    3260:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    3264:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3268:	63646152 	cmnvs	r4, #-2147483628	; 0x80000014
    326c:	43747845 	cmnmi	r4, #4521984	; 0x450000
    3270:	2e006766 	cdpcs	7, 0, cr6, cr0, cr6, {3}
    3274:	2f2e2e2f 	svccs	0x002e2e2f
    3278:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    327c:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    3280:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3284:	2f62696c 	svccs	0x0062696c
    3288:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    328c:	6f725f70 	svcvs	0x00725f70
    3290:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    3294:	53627573 	cmnpl	r2, #482344960	; 0x1cc00000
    3298:	6e496365 	cdpvs	3, 4, cr6, cr9, cr5, {3}
    329c:	4f4e0063 	svcmi	0x004e0063
    32a0:	5f4d4f52 	svcpl	0x004d4f52
    32a4:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    32a8:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    32ac:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    32b0:	52726f46 	rsbspl	r6, r2, #280	; 0x118
    32b4:	63734f63 	cmnvs	r3, #396	; 0x18c
    32b8:	7452664c 	ldrbvc	r6, [r2], #-1612	; 0xfffff9b4
    32bc:	43656e75 	cmnmi	r5, #1872	; 0x750
    32c0:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    32c4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    32c8:	524f4e00 	subpl	r4, pc, #0, 28
    32cc:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    32d0:	70757465 	rsbsvc	r7, r5, r5, ror #8
    32d4:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    32d8:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    32dc:	6f58726f 	svcvs	0x0058726f
    32e0:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    32e4:	75676552 	strbvc	r6, [r7, #-1362]!	; 0xfffffaae
    32e8:	6f74616c 	svcvs	0x0074616c
    32ec:	646e4172 	strbtvs	r4, [lr], #-370	; 0xfffffe8e
    32f0:	72696d43 	rsbvc	r6, r9, #4288	; 0x10c0
    32f4:	52727772 	rsbspl	r7, r2, #29884416	; 0x1c80000
    32f8:	6f697461 	svcvs	0x00697461
    32fc:	33697500 	cmncc	r9, #0, 10
    3300:	69725432 	ldmdbvs	r2!, {r1, r4, r5, sl, ip, lr}^
    3304:	6553006d 	ldrbvs	r0, [r3, #-109]	; 0xffffff93
    3308:	53707574 	cmnpl	r0, #116, 10	; 0x1d000000
    330c:	456e6769 	strbmi	r6, [lr, #-1897]!	; 0xfffff897
    3310:	6e657478 	mcrvs	4, 3, r7, cr5, cr8, {3}
    3314:	64645664 	strbtvs	r5, [r4], #-1636	; 0xfffff99c
    3318:	69725472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, lr}^
    331c:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
    3320:	67006575 	smlsdxvs	r0, r5, r5, r6
    3324:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    3328:	6f466d69 	svcvs	0x00466d69
    332c:	63644172 	cmnvs	r4, #-2147483620	; 0x8000001c
    3330:	62566853 	subsvs	r6, r6, #5439488	; 0x530000
    3334:	6e456675 	mcrvs	6, 2, r6, cr5, cr5, {3}
    3338:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    333c:	4f4e0065 	svcmi	0x004e0065
    3340:	5f4d4f52 	svcpl	0x004d4f52
    3344:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3348:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    334c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3350:	41726f46 	cmnmi	r2, r6, asr #30
    3354:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    3358:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    335c:	69006e45 	stmdbvs	r0, {r0, r2, r6, r9, sl, fp, sp, lr}
    3360:	69533233 	ldmdbvs	r3, {r0, r1, r4, r5, r9, ip, sp}^
    3364:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
    3368:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    336c:	006c6156 	rsbeq	r6, ip, r6, asr r1
    3370:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
    3374:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3378:	69750031 	ldmdbvs	r5!, {r0, r4, r5}^
    337c:	63463233 	movtvs	r3, #25139	; 0x6233
    3380:	56316766 	ldrtpl	r6, [r1], -r6, ror #14
    3384:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3388:	524f4e00 	subpl	r4, pc, #0, 28
    338c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3390:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3394:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    3398:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    339c:	6f58726f 	svcvs	0x0058726f
    33a0:	66486373 			; <UNDEFINED> instruction: 0x66486373
    33a4:	61696249 	cmnvs	r9, r9, asr #4
    33a8:	65687473 	strbvs	r7, [r8, #-1139]!	; 0xfffffb8d
    33ac:	67006d72 	smlsdxvs	r0, r2, sp, r6
    33b0:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    33b4:	6f466d69 	svcvs	0x00466d69
    33b8:	63644172 	cmnvs	r4, #-2147483620	; 0x8000001c
    33bc:	6f4d6853 	svcvs	0x004d6853
    33c0:	6e456564 	cdpvs	5, 4, cr6, cr5, cr4, {3}
    33c4:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    33c8:	33690065 	cmncc	r9, #101	; 0x65
    33cc:	64645632 	strbtvs	r5, [r4], #-1586	; 0xfffff9ce
    33d0:	656c5372 	strbvs	r5, [ip, #-882]!	; 0xfffffc8e
    33d4:	72547065 	subsvc	r7, r4, #101	; 0x65
    33d8:	66006d69 	strvs	r6, [r0], -r9, ror #26
    33dc:	31676663 	cmncc	r7, r3, ror #12
    33e0:	4363734f 	cmnmi	r3, #1006632961	; 0x3c000001
    33e4:	00666e6f 	rsbeq	r6, r6, pc, ror #28
    33e8:	726c6264 	rsbvc	r6, ip, #100, 4	; 0x40000006
    33ec:	706f6f4c 	rsbvc	r6, pc, ip, asr #30
    33f0:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
    33f4:	65527265 	ldrbvs	r7, [r2, #-613]	; 0xfffffd9b
    33f8:	56746573 			; <UNDEFINED> instruction: 0x56746573
    33fc:	61746c6f 	cmnvs	r4, pc, ror #24
    3400:	61566567 	cmpvs	r6, r7, ror #10
    3404:	0065756c 	rsbeq	r7, r5, ip, ror #10
    3408:	6d697274 	sfmvs	f7, 2, [r9, #-464]!	; 0xfffffe30
    340c:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    3410:	4c63736f 	stclmi	3, cr7, [r3], #-444	; 0xfffffe44
    3414:	67655266 	strbvs	r5, [r5, -r6, ror #4]!
    3418:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xfffff38b
    341c:	6e41726f 	cdpvs	2, 4, cr7, cr1, cr15, {3}
    3420:	696d4364 	stmdbvs	sp!, {r2, r5, r6, r8, r9, lr}^
    3424:	72777272 	rsbsvc	r7, r7, #536870919	; 0x20000007
    3428:	69746152 	ldmdbvs	r4!, {r1, r4, r6, r8, sp, lr}^
    342c:	6c61566f 	stclvs	6, cr5, [r1], #-444	; 0xfffffe44
    3430:	69006575 	stmdbvs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    3434:	73616962 	cmnvc	r1, #1605632	; 0x188000
    3438:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    343c:	524f4e00 	subpl	r4, pc, #0, 28
    3440:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3444:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3448:	41746553 	cmnmi	r4, r3, asr r5
    344c:	74526e6f 	ldrbvc	r6, [r2], #-3695	; 0xfffff191
    3450:	62755363 	rsbsvs	r5, r5, #-1946157055	; 0x8c000001
    3454:	49636553 	stmdbmi	r3!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    3458:	4e00636e 	cdpmi	3, 0, cr6, cr0, cr14, {3}
    345c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3328 <NOROM_RFCRfTrimRead+0xac>
    3460:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3464:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    3468:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    346c:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3470:	63706d41 	cmnvs	r0, #4160	; 0x1040
    3474:	43706d6f 	cmnmi	r0, #7104	; 0x1bc0
    3478:	006c7274 	rsbeq	r7, ip, r4, ror r2
    347c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3480:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    3484:	6f526648 	svcvs	0x00526648
    3488:	69750077 	ldmdbvs	r5!, {r0, r1, r2, r4, r5, r6}^
    348c:	6f583233 	svcvs	0x00583233
    3490:	66486373 			; <UNDEFINED> instruction: 0x66486373
    3494:	006c6f43 	rsbeq	r6, ip, r3, asr #30
    3498:	4f524f4e 	svcmi	0x00524f4e
    349c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    34a0:	53707574 	cmnpl	r0, #116, 10	; 0x1d000000
    34a4:	64567465 	ldrbvs	r7, [r6], #-1125	; 0xfffffb9b
    34a8:	654c7264 	strbvs	r7, [ip, #-612]	; 0xfffffd9c
    34ac:	006c6576 	rsbeq	r6, ip, r6, ror r5
    34b0:	5477656e 	ldrbtpl	r6, [r7], #-1390	; 0xfffffa92
    34b4:	526d6972 	rsbpl	r6, sp, #1867776	; 0x1c8000
    34b8:	75007761 	strvc	r7, [r0, #-1889]	; 0xfffff89f
    34bc:	54323369 	ldrtpl	r3, [r2], #-873	; 0xfffffc97
    34c0:	566d6972 			; <UNDEFINED> instruction: 0x566d6972
    34c4:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    34c8:	32336900 	eorscc	r6, r3, #0, 18
    34cc:	74737543 	ldrbtvc	r7, [r3], #-1347	; 0xfffffabd
    34d0:	72656d6f 	rsbvc	r6, r5, #7104	; 0x1bc0
    34d4:	746c6544 	strbtvc	r6, [ip], #-1348	; 0xfffffabc
    34d8:	6a644161 	bvs	1913a64 <__ccfg+0x18f3abc>
    34dc:	00747375 	rsbseq	r7, r4, r5, ror r3
    34e0:	56323369 	ldrtpl	r3, [r2], -r9, ror #6
    34e4:	53726464 	cmnpl	r2, #100, 8	; 0x64000000
    34e8:	7065656c 	rsbvc	r6, r5, ip, ror #10
    34ec:	746c6544 	strbtvc	r6, [ip], #-1348	; 0xfffffabc
    34f0:	64760061 	ldrbtvs	r0, [r6], #-97	; 0xffffff9f
    34f4:	72547264 	subsvc	r7, r4, #100, 4	; 0x40000006
    34f8:	63416d69 	movtvs	r6, #7529	; 0x1d69
    34fc:	00657674 	rsbeq	r7, r5, r4, ror r6
    3500:	54727563 	ldrbtpl	r7, [r2], #-1379	; 0xfffffa9d
    3504:	00706d65 	rsbseq	r6, r0, r5, ror #26
    3508:	66666964 	strbtvs	r6, [r6], -r4, ror #18
    350c:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    3510:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    3514:	6c536576 	cfldr64vs	mvdx6, [r3], {118}	; 0x76
    3518:	00706565 	rsbseq	r6, r0, r5, ror #10
    351c:	6d637270 	sfmvs	f7, 2, [r3, #-448]!	; 0xfffffe40
    3520:	526d6152 	rsbpl	r6, sp, #-2147483628	; 0x80000014
    3524:	6e657465 	cdpvs	4, 6, cr7, cr5, cr5, {3}
    3528:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    352c:	524f4e00 	subpl	r4, pc, #0, 28
    3530:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3534:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    3538:	64416c72 	strbvs	r6, [r1], #-3186	; 0xfffff38e
    353c:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
    3540:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    3544:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    3548:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    354c:	776f5072 			; <UNDEFINED> instruction: 0x776f5072
    3550:	6f447265 	svcvs	0x00447265
    3554:	4e006e77 	mcrmi	14, 0, r6, cr0, cr7, {3}
    3558:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3424 <NOROM_RFCRTrim+0x58>
    355c:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    3560:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    3564:	52746553 	rsbspl	r6, r4, #348127232	; 0x14c00000
    3568:	61686365 	cmnvs	r8, r5, ror #6
    356c:	42656772 	rsbmi	r6, r5, #29884416	; 0x1c80000
    3570:	726f6665 	rsbvc	r6, pc, #105906176	; 0x6500000
    3574:	776f5065 	strbvc	r5, [pc, -r5, rrx]!
    3578:	6f447265 	svcvs	0x00447265
    357c:	2e006e77 	mcrcs	14, 0, r6, cr0, cr7, {3}
    3580:	2f2e2e2f 	svccs	0x002e2e2f
    3584:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3588:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    358c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3590:	2f62696c 	svccs	0x0062696c
    3594:	5f737973 	svcpl	0x00737973
    3598:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    359c:	4e00632e 	cdpmi	3, 0, cr6, cr0, cr14, {1}
    35a0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 346c <NOROM_RFCRTrim+0xa0>
    35a4:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    35a8:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    35ac:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    35b0:	756f5374 	strbvc	r5, [pc, #-884]!	; 3244 <NOROM_RFCSynthPowerDown+0x14>
    35b4:	47656372 			; <UNDEFINED> instruction: 0x47656372
    35b8:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
    35bc:	44323369 	ldrtmi	r3, [r2], #-873	; 0xfffffc97
    35c0:	69616d6f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    35c4:	7000736e 	andvc	r7, r0, lr, ror #6
    35c8:	00457265 	subeq	r7, r5, r5, ror #4
    35cc:	65546470 	ldrbvs	r6, [r4, #-1136]	; 0xfffffb90
    35d0:	7500706d 	strvc	r7, [r0, #-109]	; 0xffffff93
    35d4:	41323369 	teqmi	r2, r9, ror #6
    35d8:	6c437875 	mcrrvs	8, 7, r7, r3, cr5
    35dc:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    35e0:	43525000 	cmpmi	r2, #0
    35e4:	6d6f444d 	cfstrdvs	mvd4, [pc, #-308]!	; 34b8 <NOROM_RFCRTrim+0xec>
    35e8:	456e6961 	strbmi	r6, [lr, #-2401]!	; 0xfffff69f
    35ec:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    35f0:	65700065 	ldrbvs	r0, [r0, #-101]!	; 0xffffff9b
    35f4:	6e004d72 	mcrvs	13, 0, r4, cr0, cr2, {3}
    35f8:	65527765 	ldrbvs	r7, [r2, #-1893]	; 0xfffff89b
    35fc:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    3600:	65506567 	ldrbvs	r6, [r0, #-1383]	; 0xfffffa99
    3604:	646f6972 	strbtvs	r6, [pc], #-2418	; 360c <NOROM_SetupTrimDevice+0x18>
    3608:	64647600 	strbtvs	r7, [r4], #-1536	; 0xfffffa00
    360c:	70614372 	rsbvc	r4, r1, r2, ror r3
    3610:	33697500 	cmncc	r9, #0, 10
    3614:	78644932 	stmdavc	r4!, {r1, r4, r5, r8, fp, lr}^
    3618:	53647000 	cmnpl	r4, #0
    361c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    3620:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
    3624:	74736567 	ldrbtvc	r6, [r3], #-1383	; 0xfffffa99
    3628:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    362c:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    3630:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3634:	6400646f 	strvs	r6, [r0], #-1135	; 0xfffffb91
    3638:	61746c65 	cmnvs	r4, r5, ror #24
    363c:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    3640:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    3644:	69725470 	ldmdbvs	r2!, {r4, r5, r6, sl, ip, lr}^
    3648:	6162006d 	cmnvs	r2, sp, rrx
    364c:	72685474 	rsbvc	r5, r8, #116, 8	; 0x74000000
    3650:	6f687365 	svcvs	0x00687365
    3654:	7800646c 	stmdavc	r0, {r2, r3, r5, r6, sl, sp, lr}
    3658:	5063736f 	rsbpl	r7, r3, pc, ror #6
    365c:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    3660:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    3664:	43525000 	cmpmi	r2, #0
    3668:	616f4c4d 	cmnvs	pc, sp, asr #24
    366c:	74654764 	strbtvc	r4, [r5], #-1892	; 0xfffff89c
    3670:	69687300 	stmdbvs	r8!, {r8, r9, ip, sp, lr}^
    3674:	64657466 	strbtvs	r7, [r5], #-1126	; 0xfffffb9a
    3678:	706d6554 	rsbvc	r6, sp, r4, asr r5
    367c:	44637400 	strbtmi	r7, [r3], #-1024	; 0xfffffc00
    3680:	61746c65 	cmnvs	r4, r5, ror #24
    3684:	705f6700 	subsvc	r6, pc, r0, lsl #14
    3688:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    368c:	75646f4d 	strbvc	r6, [r4, #-3917]!	; 0xfffff0b3
    3690:	4743656c 	strbmi	r6, [r3, -ip, ror #10]
    3694:	72756300 	rsbsvc	r6, r5, #0, 6
    3698:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    369c:	6f610065 	svcvs	0x00610065
    36a0:	7379536e 	cmnvc	r9, #-1207959551	; 0xb8000001
    36a4:	506c7463 	rsbpl	r7, ip, r3, ror #8
    36a8:	74637277 	strbtvc	r7, [r3], #-631	; 0xfffffd89
    36ac:	6470006c 	ldrbtvs	r0, [r0], #-108	; 0xffffff94
    36b0:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    36b4:	524f4e00 	subpl	r4, pc, #0, 28
    36b8:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    36bc:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    36c0:	6f506c72 	svcvs	0x00506c72
    36c4:	45726577 	ldrbmi	r6, [r2, #-1399]!	; 0xfffffa89
    36c8:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    36cc:	6e696874 	mcrvs	8, 3, r6, cr9, cr4, {3}
    36d0:	4c700067 	ldclmi	0, cr0, [r0], #-412	; 0xfffffe64
    36d4:	756b6f6f 	strbvc	r6, [fp, #-3951]!	; 0xfffff091
    36d8:	62615470 	rsbvs	r5, r1, #112, 8	; 0x70000000
    36dc:	7000656c 	andvc	r6, r0, ip, ror #10
    36e0:	63655264 	cmnvs	r5, #100, 4	; 0x40000006
    36e4:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    36e8:	72655065 	rsbvc	r5, r5, #101	; 0x65
    36ec:	00646f69 	rsbeq	r6, r4, r9, ror #30
    36f0:	426e6f61 	rsbmi	r6, lr, #388	; 0x184
    36f4:	6f6d7461 	svcvs	0x006d7461
    36f8:	7461426e 	strbtvc	r4, [r1], #-622	; 0xfffffd92
    36fc:	64647600 	strbtvs	r7, [r4], #-1536	; 0xfffffa00
    3700:	69725472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, lr}^
    3704:	656c536d 	strbvs	r5, [ip, #-877]!	; 0xfffffc93
    3708:	50007065 	andpl	r7, r0, r5, rrx
    370c:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    3710:	6c617551 	cfstr64vs	mvdx7, [r1], #-324	; 0xfffffebc
    3714:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
    3718:	5f736c61 	svcpl	0x00736c61
    371c:	4f4e0074 	svcmi	0x004e0074
    3720:	5f4d4f52 	svcpl	0x004d4f52
    3724:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    3728:	5f6c7274 	svcpl	0x006c7274
    372c:	43444344 	movtmi	r4, #17220	; 0x4344
    3730:	6c6f565f 	stclvs	6, cr5, [pc], #-380	; 35bc <TrimAfterColdResetWakeupFromShutDown+0x9c>
    3734:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    3738:	646e6f43 	strbtvs	r6, [lr], #-3907	; 0xfffff0bd
    373c:	6f697469 	svcvs	0x00697469
    3740:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    3744:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    3748:	70006c6f 	andvc	r6, r0, pc, ror #24
    374c:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    3750:	6c617551 	cfstr64vs	mvdx7, [r1], #-324	; 0xfffffebc
    3754:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
    3758:	00736c61 	rsbseq	r6, r3, r1, ror #24
    375c:	544f5250 	strbpl	r5, [pc], #-592	; 3764 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x50>
    3760:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    3764:	5f544942 	svcpl	0x00544942
    3768:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
    376c:	74656972 	strbtvc	r6, [r5], #-2418	; 0xfffff68e
    3770:	00797261 	rsbseq	r7, r9, r1, ror #4
    3774:	4b434150 	blmi	10d3cbc <__ccfg+0x10b3d14>
    3778:	5f454741 	svcpl	0x00454741
    377c:	00347834 	eorseq	r7, r4, r4, lsr r8
    3780:	50494843 	subpl	r4, r9, r3, asr #16
    3784:	5059545f 	subspl	r5, r9, pc, asr r4
    3788:	43435f45 	movtmi	r5, #16197	; 0x3f45
    378c:	30343632 	eorscc	r3, r4, r2, lsr r6
    3790:	66617700 	strbtvs	r7, [r1], -r0, lsl #14
    3794:	64497265 	strbvs	r7, [r9], #-613	; 0xfffffd9b
    3798:	4d414600 	stclmi	6, cr4, [r1, #-0]
    379c:	5f594c49 	svcpl	0x00594c49
    37a0:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    37a4:	4c5f7878 	mrrcmi	8, 7, r7, pc, cr8	; <UNPREDICTABLE>
    37a8:	4e007a69 	vmlsmi.f32	s14, s0, s19
    37ac:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3678 <NOROM_SetupTrimDevice+0x84>
    37b0:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    37b4:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    37b8:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    37bc:	69684374 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, lr}^
    37c0:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    37c4:	00796c69 	rsbseq	r6, r9, r9, ror #24
    37c8:	4f524f4e 	svcmi	0x00524f4e
    37cc:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    37d0:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    37d4:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    37d8:	61507465 	cmpvs	r0, r5, ror #8
    37dc:	67616b63 	strbvs	r6, [r1, -r3, ror #22]!
    37e0:	70795465 	rsbsvc	r5, r9, r5, ror #8
    37e4:	4f4e0065 	svcmi	0x004e0065
    37e8:	5f4d4f52 	svcpl	0x004d4f52
    37ec:	70696843 	rsbvc	r6, r9, r3, asr #16
    37f0:	6f666e49 	svcvs	0x00666e49
    37f4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    37f8:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    37fc:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    3800:	70006e6f 	andvc	r6, r0, pc, ror #28
    3804:	546b6361 	strbtpl	r6, [fp], #-865	; 0xfffffc9f
    3808:	00657079 	rsbeq	r7, r5, r9, ror r0
    380c:	70696843 	rsbvc	r6, r9, r3, asr #16
    3810:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    3814:	4800745f 	stmdami	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
    3818:	76655277 			; <UNDEFINED> instruction: 0x76655277
    381c:	6f697369 	svcvs	0x00697369
    3820:	00745f6e 	rsbseq	r5, r4, lr, ror #30
    3824:	50494843 	subpl	r4, r9, r3, asr #16
    3828:	5059545f 	subspl	r5, r9, pc, asr r4
    382c:	43435f45 	movtmi	r5, #16197	; 0x3f45
    3830:	30313331 	eorscc	r3, r1, r1, lsr r3
    3834:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    3838:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    383c:	5f796c69 	svcpl	0x00796c69
    3840:	77680074 			; <UNDEFINED> instruction: 0x77680074
    3844:	00766552 	rsbseq	r6, r6, r2, asr r5
    3848:	50494843 	subpl	r4, r9, r3, asr #16
    384c:	5059545f 	subspl	r5, r9, pc, asr r4
    3850:	43435f45 	movtmi	r5, #16197	; 0x3f45
    3854:	30353632 	eorscc	r3, r5, r2, lsr r6
    3858:	43415000 	movtmi	r5, #4096	; 0x1000
    385c:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    3860:	5343575f 	movtpl	r5, #14175	; 0x375f
    3864:	696d0050 	stmdbvs	sp!, {r4, r6}^
    3868:	52726f6e 	rsbspl	r6, r2, #440	; 0x1b8
    386c:	46007665 	strmi	r7, [r0], -r5, ror #12
    3870:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    3874:	43435f59 	movtmi	r5, #16217	; 0x3f59
    3878:	78783632 	ldmdavc	r8!, {r1, r4, r5, r9, sl, ip, sp}^
    387c:	0032525f 	eorseq	r5, r2, pc, asr r2
    3880:	50494843 	subpl	r4, r9, r3, asr #16
    3884:	5059545f 	subspl	r5, r9, pc, asr r4
    3888:	43435f45 	movtmi	r5, #16197	; 0x3f45
    388c:	30353331 	eorscc	r3, r5, r1, lsr r3
    3890:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    3894:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    3898:	68435f6f 	stmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    389c:	61467069 	cmpvs	r6, r9, rrx
    38a0:	796c696d 	stmdbvc	ip!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^
    38a4:	43437349 	movtmi	r7, #13129	; 0x3349
    38a8:	78783331 	ldmdavc	r8!, {r0, r4, r5, r8, r9, ip, sp}^
    38ac:	4d414600 	stclmi	6, cr4, [r1, #-0]
    38b0:	5f594c49 	svcpl	0x00594c49
    38b4:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    38b8:	006e776f 	rsbeq	r7, lr, pc, ror #14
    38bc:	50494843 	subpl	r4, r9, r3, asr #16
    38c0:	5059545f 	subspl	r5, r9, pc, asr r4
    38c4:	43435f45 	movtmi	r5, #16197	; 0x3f45
    38c8:	30323632 	eorscc	r3, r2, r2, lsr r6
    38cc:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    38d0:	65523167 	ldrbvs	r3, [r2, #-359]	; 0xfffffe99
    38d4:	41460076 	hvcmi	24582	; 0x6006
    38d8:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    38dc:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    38e0:	00787836 	rsbseq	r7, r8, r6, lsr r8
    38e4:	70696863 	rsbvc	r6, r9, r3, ror #16
    38e8:	006d6146 	rsbeq	r6, sp, r6, asr #2
    38ec:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    38f0:	6e555f56 	mrcvs	15, 2, r5, cr5, cr6, {2}
    38f4:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    38f8:	6366006e 	cmnvs	r6, #110	; 0x6e
    38fc:	50316766 	eorspl	r6, r1, r6, ror #14
    3900:	6f746f72 	svcvs	0x00746f72
    3904:	006c6f63 	rsbeq	r6, ip, r3, ror #30
    3908:	746f7250 	strbtvc	r7, [pc], #-592	; 3910 <NOROM_SetupGetTrimForXoscHfCtl+0x18>
    390c:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 3758 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x44>
    3910:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
    3914:	6f746365 	svcvs	0x00746365
    3918:	00745f72 	rsbseq	r5, r4, r2, ror pc
    391c:	544f5250 	strbpl	r5, [pc], #-592	; 3924 <NOROM_SetupGetTrimForXoscHfFastStart+0x4>
    3920:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    3924:	5f544942 	svcpl	0x00544942
    3928:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
    392c:	3230385f 	eorscc	r3, r0, #6225920	; 0x5f0000
    3930:	5f35315f 	svcpl	0x0035315f
    3934:	48430034 	stmdami	r3, {r2, r4, r5}^
    3938:	545f5049 	ldrbpl	r5, [pc], #-73	; 3940 <NOROM_SetupGetTrimForRadcExtCfg+0x10>
    393c:	5f455059 	svcpl	0x00455059
    3940:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    3944:	006e776f 	rsbeq	r7, lr, pc, ror #14
    3948:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    394c:	5f325f56 	svcpl	0x00325f56
    3950:	41460032 	cmpmi	r6, r2, lsr r0
    3954:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    3958:	3143435f 	cmpcc	r3, pc, asr r3
    395c:	00787833 	rsbseq	r7, r8, r3, lsr r8
    3960:	4b434150 	blmi	10d3ea8 <__ccfg+0x10b3f00>
    3964:	5f454741 	svcpl	0x00454741
    3968:	00377837 	eorseq	r7, r7, r7, lsr r8
    396c:	544f5250 	strbpl	r5, [pc], #-592	; 3974 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x4>
    3970:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    3974:	6b6e555f 	blvs	1b98ef8 <__ccfg+0x1b78f50>
    3978:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    397c:	52574800 	subspl	r4, r7, #0, 16
    3980:	325f5645 	subscc	r5, pc, #72351744	; 0x4500000
    3984:	4e00305f 	mcrmi	0, 0, r3, cr0, cr15, {2}
    3988:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3854 <NOROM_SetupGetTrimForAmpcompTh1+0x10>
    398c:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    3990:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    3994:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    3998:	69684374 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, lr}^
    399c:	70795470 	rsbsvc	r5, r9, r0, ror r4
    39a0:	57480065 	strbpl	r0, [r8, -r5, rrx]
    39a4:	5f564552 	svcpl	0x00564552
    39a8:	00315f32 	eorseq	r5, r1, r2, lsr pc
    39ac:	544f5250 	strbpl	r5, [pc], #-592	; 39b4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x30>
    39b0:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    39b4:	5f544942 	svcpl	0x00544942
    39b8:	00454c42 	subeq	r4, r5, r2, asr #24
    39bc:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    39c0:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    39c4:	78363243 	ldmdavc	r6!, {r0, r1, r6, r9, ip, sp}
    39c8:	67415f78 	smlsldxvs	r5, r1, r8, pc	; <UNPREDICTABLE>
    39cc:	57480061 	strbpl	r0, [r8, -r1, rrx]
    39d0:	5f564552 	svcpl	0x00564552
    39d4:	00335f32 	eorseq	r5, r3, r2, lsr pc
    39d8:	70696863 	rsbvc	r6, r9, r3, ror #16
    39dc:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    39e0:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    39e4:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    39e8:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    39ec:	4f545355 	svcmi	0x00545355
    39f0:	00305f4d 	eorseq	r5, r0, sp, asr #30
    39f4:	50494843 	subpl	r4, r9, r3, asr #16
    39f8:	5059545f 	subspl	r5, r9, pc, asr r4
    39fc:	55435f45 	strbpl	r5, [r3, #-3909]	; 0xfffff0bb
    3a00:	4d4f5453 	cfstrdmi	mvd5, [pc, #-332]	; 38bc <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>
    3a04:	4300315f 	movwmi	r3, #351	; 0x15f
    3a08:	5f504948 	svcpl	0x00504948
    3a0c:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    3a10:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    3a14:	00303336 	eorseq	r3, r0, r6, lsr r3
    3a18:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    3a1c:	5f315f56 	svcpl	0x00315f56
    3a20:	41500030 	cmpmi	r0, r0, lsr r0
    3a24:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    3a28:	6e555f45 	cdpvs	15, 5, cr5, cr5, cr5, {2}
    3a2c:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    3a30:	2f2e006e 	svccs	0x002e006e
    3a34:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3a38:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3a3c:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    3a40:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    3a44:	632f6269 			; <UNDEFINED> instruction: 0x632f6269
    3a48:	69706968 	ldmdbvs	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    3a4c:	2e6f666e 	cdpcs	6, 6, cr6, cr15, cr14, {3}
    3a50:	63660063 	cmnvs	r6, #99	; 0x63
    3a54:	55316766 	ldrpl	r6, [r1, #-1894]!	; 0xfffff89a
    3a58:	49726573 	ldmdbmi	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    3a5c:	68430064 	stmdavs	r3, {r2, r5, r6}^
    3a60:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    3a64:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    3a68:	65447465 	strbvs	r7, [r4, #-1125]	; 0xfffffb9b
    3a6c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    3a70:	77486449 	strbvc	r6, [r8, -r9, asr #8]
    3a74:	43766552 	cmnmi	r6, #343932928	; 0x14800000
    3a78:	0065646f 	rsbeq	r6, r5, pc, ror #8
    3a7c:	70696843 	rsbvc	r6, r9, r3, asr #16
    3a80:	6f666e49 	svcvs	0x00666e49
    3a84:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    3a88:	6f6e694d 	svcvs	0x006e694d
    3a8c:	52774872 	rsbspl	r4, r7, #7471104	; 0x720000
    3a90:	6d007665 	stcvs	6, cr7, [r0, #-404]	; 0xfffffe6c
    3a94:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
    3a98:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    3a9c:	4f4e0076 	svcmi	0x004e0076
    3aa0:	5f4d4f52 	svcpl	0x004d4f52
    3aa4:	70696843 	rsbvc	r6, r9, r3, asr #16
    3aa8:	6f666e49 	svcvs	0x00666e49
    3aac:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    3ab0:	70707553 	rsbsvc	r7, r0, r3, asr r5
    3ab4:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    3ab8:	6f725064 	svcvs	0x00725064
    3abc:	6f636f74 	svcvs	0x00636f74
    3ac0:	56425f6c 	strbpl	r5, [r2], -ip, ror #30
    3ac4:	43415000 	movtmi	r5, #4096	; 0x1000
    3ac8:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    3acc:	4641575f 			; <UNDEFINED> instruction: 0x4641575f
    3ad0:	50005245 	andpl	r5, r0, r5, asr #4
    3ad4:	414b4341 	cmpmi	fp, r1, asr #6
    3ad8:	355f4547 	ldrbcc	r4, [pc, #-1351]	; 3599 <TrimAfterColdResetWakeupFromShutDown+0x79>
    3adc:	50003578 	andpl	r3, r0, r8, ror r5
    3ae0:	616b6361 	cmnvs	fp, r1, ror #6
    3ae4:	79546567 	ldmdbvc	r4, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
    3ae8:	745f6570 	ldrbvc	r6, [pc], #-1392	; 3af0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x5c>
    3aec:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    3af0:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    3af4:	77485f6f 	strbvc	r5, [r8, -pc, ror #30]
    3af8:	69766552 	ldmdbvs	r6!, {r1, r4, r6, r8, sl, sp, lr}^
    3afc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    3b00:	475f7349 	ldrbmi	r7, [pc, -r9, asr #6]
    3b04:	5f514554 	svcpl	0x00514554
    3b08:	00305f32 	eorseq	r5, r0, r2, lsr pc
    3b0c:	70696843 	rsbvc	r6, r9, r3, asr #16
    3b10:	6f666e49 	svcvs	0x00666e49
    3b14:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    3b18:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    3b1c:	75006449 	strvc	r6, [r0, #-1097]	; 0xfffffbb7
    3b20:	52323369 	eorspl	r3, r2, #-1543503871	; 0xa4000001
    3b24:	4e006765 	cdpmi	7, 0, cr6, cr0, cr5, {3}
    3b28:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 39f4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x70>
    3b2c:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3b30:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    3b34:	65696674 	strbvs	r6, [r9, #-1652]!	; 0xfffff98c
    3b38:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    3b3c:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
    3b40:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    3b44:	524f4e00 	subpl	r4, pc, #0, 28
    3b48:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 3b50 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x30>
    3b4c:	36314944 	ldrtcc	r4, [r1], -r4, asr #18
    3b50:	52746942 	rsbspl	r6, r4, #1081344	; 0x108000
    3b54:	00646165 	rsbeq	r6, r4, r5, ror #2
    3b58:	7465526e 	strbtvc	r5, [r5], #-622	; 0xfffffd92
    3b5c:	78754100 	ldmdavc	r5!, {r8, lr}^
    3b60:	44696441 	strbtmi	r6, [r9], #-1089	; 0xfffffbbf
    3b64:	61536964 	cmpvs	r3, r4, ror #18
    3b68:	72576566 	subsvc	r6, r7, #427819008	; 0x19800000
    3b6c:	00657469 	rsbeq	r7, r5, r9, ror #8
    3b70:	36316975 			; <UNDEFINED> instruction: 0x36316975
    3b74:	61746144 	cmnvs	r4, r4, asr #2
    3b78:	33697500 	cmncc	r9, #0, 10
    3b7c:	44725732 	ldrbtmi	r5, [r2], #-1842	; 0xfffff8ce
    3b80:	00617461 	rsbeq	r7, r1, r1, ror #8
    3b84:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3b88:	61746144 	cmnvs	r4, r4, asr #2
    3b8c:	33697500 	cmncc	r9, #0, 10
    3b90:	69685332 	stmdbvs	r8!, {r1, r4, r5, r8, r9, ip, lr}^
    3b94:	4e007466 	cdpmi	4, 0, cr7, cr0, cr6, {3}
    3b98:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3a64 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xe0>
    3b9c:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3ba0:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    3ba4:	65696674 	strbvs	r6, [r9, #-1652]!	; 0xfffff98c
    3ba8:	7257646c 	subsvc	r6, r7, #108, 8	; 0x6c000000
    3bac:	00657469 	rsbeq	r7, r5, r9, ror #8
    3bb0:	7461446e 	strbtvc	r4, [r1], #-1134	; 0xfffffb92
    3bb4:	69750061 	ldmdbvs	r5!, {r0, r5, r6}^
    3bb8:	61563233 	cmpvs	r6, r3, lsr r2
    3bbc:	7541006c 	strbvc	r0, [r1, #-108]	; 0xffffff94
    3bc0:	69644178 	stmdbvs	r4!, {r3, r4, r5, r6, r8, lr}^
    3bc4:	53696444 	cmnpl	r9, #68, 8	; 0x44000000
    3bc8:	52656661 	rsbpl	r6, r5, #101711872	; 0x6100000
    3bcc:	00646165 	rsbeq	r6, r4, r5, ror #2
    3bd0:	4f524f4e 	svcmi	0x00524f4e
    3bd4:	44445f4d 	strbmi	r5, [r4], #-3917	; 0xfffff0b3
    3bd8:	42363149 	eorsmi	r3, r6, #1073741842	; 0x40000012
    3bdc:	72577469 	subsvc	r7, r7, #1761607680	; 0x69000000
    3be0:	00657469 	rsbeq	r7, r5, r9, ror #8
    3be4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3be8:	2f2e2e2f 	svccs	0x002e2e2f
    3bec:	642f2e2e 	strtvs	r2, [pc], #-3630	; 3bf4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xd4>
    3bf0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    3bf4:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    3bf8:	6964642f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    3bfc:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
    3c00:	52323369 	eorspl	r3, r2, #-1543503871	; 0xa4000001
    3c04:	64416765 	strbvs	r6, [r1], #-1893	; 0xfffff89b
    3c08:	6e007264 	cdpvs	2, 0, cr7, cr0, cr4, {3}
    3c0c:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    3c10:	5f435f00 	svcpl	0x00435f00
    3c14:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
    3c18:	5f636972 	svcpl	0x00636972
    3c1c:	61636f6c 	cmnvs	r3, ip, ror #30
    3c20:	6300656c 	movwvs	r6, #1388	; 0x56c
    3c24:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    3c28:	5f79636e 	svcpl	0x0079636e
    3c2c:	626d7973 	rsbvs	r7, sp, #1884160	; 0x1cc000
    3c30:	63006c6f 	movwvs	r6, #3183	; 0xc6f
    3c34:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    3c38:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
    3c3c:	74736400 	ldrbtvc	r6, [r3], #-1024	; 0xfffffc00
    3c40:	6c610030 	stclvs	0, cr0, [r1], #-192	; 0xffffff40
    3c44:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
    3c48:	73645f64 	cmnvc	r4, #100, 30	; 0x190
    3c4c:	6e690074 	mcrvs	0, 3, r0, cr9, cr4, {3}
    3c50:	5f6e5f74 	svcpl	0x006e5f74
    3c54:	5f706573 	svcpl	0x00706573
    3c58:	735f7962 	cmpvc	pc, #1605632	; 0x188000
    3c5c:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    3c60:	6f636c00 	svcvs	0x00636c00
    3c64:	6300766e 	movwvs	r7, #1646	; 0x66e
    3c68:	6c5f6b6a 	mrrcvs	11, 6, r6, pc, cr10	; <UNPREDICTABLE>
    3c6c:	00676e61 	rsbeq	r6, r7, r1, ror #28
    3c70:	6e5f636c 	cdpvs	3, 5, cr6, cr15, cr12, {3}
    3c74:	72656d75 	rsbvc	r6, r5, #7488	; 0x1d40
    3c78:	545f6369 	ldrbpl	r6, [pc], #-873	; 3c80 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x10>
    3c7c:	5f435f00 	svcpl	0x00435f00
    3c80:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    3c84:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    3c88:	00656c61 	rsbeq	r6, r5, r1, ror #24
    3c8c:	5f746e69 	svcpl	0x00746e69
    3c90:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    3c94:	6d79735f 	ldclvs	3, cr7, [r9, #-380]!	; 0xfffffe84
    3c98:	006c6f62 	rsbeq	r6, ip, r2, ror #30
    3c9c:	745f636c 	ldrbvc	r6, [pc], #-876	; 3ca4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x34>
    3ca0:	5f656d69 	svcpl	0x00656d69
    3ca4:	6c610054 	stclvs	0, cr0, [r1], #-336	; 0xfffffeb0
    3ca8:	69645f74 	stmdbvs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3cac:	73746967 	cmnvc	r4, #1687552	; 0x19c000
    3cb0:	5f435f00 	svcpl	0x00435f00
    3cb4:	70797463 	rsbsvc	r7, r9, r3, ror #8
    3cb8:	6f6c5f65 	svcvs	0x006c5f65
    3cbc:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    3cc0:	5f6d6100 	svcpl	0x006d6100
    3cc4:	65006d70 	strvs	r6, [r0, #-3440]	; 0xfffff290
    3cc8:	645f6172 	ldrbvs	r6, [pc], #-370	; 3cd0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x60>
    3ccc:	665f745f 			; <UNDEFINED> instruction: 0x665f745f
    3cd0:	6e00746d 	cdpvs	4, 0, cr7, cr0, cr13, {3}
    3cd4:	7274736f 	rsbsvc	r7, r4, #-1140850687	; 0xbc000001
    3cd8:	5f636c00 	svcpl	0x00636c00
    3cdc:	656e6f6d 	strbvs	r6, [lr, #-3949]!	; 0xfffff093
    3ce0:	79726174 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, sp, lr}^
    3ce4:	6d00545f 	cfstrsvs	mvf5, [r0, #-380]	; 0xfffffe84
    3ce8:	61737365 	cmnvs	r3, r5, ror #6
    3cec:	635f6567 	cmpvs	pc, #432013312	; 0x19c00000
    3cf0:	7365646f 	cmnvc	r5, #1862270976	; 0x6f000000
    3cf4:	6d007465 	cfstrsvs	mvf7, [r0, #-404]	; 0xfffffe6c
    3cf8:	776f7462 	strbvc	r7, [pc, -r2, ror #8]!
    3cfc:	435f0063 	cmpmi	pc, #99	; 0x63
    3d00:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
    3d04:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    3d08:	6f6c5f73 	svcvs	0x006c5f73
    3d0c:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    3d10:	746e6900 	strbtvc	r6, [lr], #-2304	; 0xfffff700
    3d14:	735f705f 	cmpvc	pc, #95	; 0x5f
    3d18:	5f6e6769 	svcpl	0x006e6769
    3d1c:	6e736f70 	mrcvs	15, 3, r6, cr3, cr0, {3}
    3d20:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
    3d24:	6f72675f 	svcvs	0x0072675f
    3d28:	6e697075 	mcrvs	0, 3, r7, cr9, cr5, {3}
    3d2c:	5f580067 	svcpl	0x00580067
    3d30:	00746d66 	rsbseq	r6, r4, r6, ror #26
    3d34:	5f746e69 	svcpl	0x00746e69
    3d38:	73635f70 	cmnvc	r3, #112, 30	; 0x1c0
    3d3c:	6572705f 	ldrbvs	r7, [r2, #-95]!	; 0xffffffa1
    3d40:	65646563 	strbvs	r6, [r4, #-1379]!	; 0xfffffa9d
    3d44:	6f6d0073 	svcvs	0x006d0073
    3d48:	65645f6e 	strbvs	r5, [r4, #-3950]!	; 0xfffff092
    3d4c:	616d6963 	cmnvs	sp, r3, ror #18
    3d50:	6f705f6c 	svcvs	0x00705f6c
    3d54:	00746e69 	rsbseq	r6, r4, r9, ror #28
    3d58:	6d665f63 	stclvs	15, cr5, [r6, #-396]!	; 0xfffffe74
    3d5c:	61640074 	smcvs	16388	; 0x4004
    3d60:	665f6574 			; <UNDEFINED> instruction: 0x665f6574
    3d64:	6e00746d 	cdpvs	4, 0, cr7, cr0, cr13, {3}
    3d68:	74616765 	strbtvc	r6, [r1], #-1893	; 0xfffff89b
    3d6c:	5f657669 	svcpl	0x00657669
    3d70:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
    3d74:	5f626d00 	svcpl	0x00626d00
    3d78:	5f727563 	svcpl	0x00727563
    3d7c:	0078616d 	rsbseq	r6, r8, sp, ror #2
    3d80:	61686377 	smcvs	34359	; 0x8637
    3d84:	00745f72 	rsbseq	r5, r4, r2, ror pc
    3d88:	69736f70 	ldmdbvs	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    3d8c:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
    3d90:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
    3d94:	7463006e 	strbtvc	r0, [r3], #-110	; 0xffffff92
    3d98:	5f657079 	svcpl	0x00657079
    3d9c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    3da0:	00746573 	rsbseq	r6, r4, r3, ror r5
    3da4:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
    3da8:	756f6420 	strbvc	r6, [pc, #-1056]!	; 3990 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xc>
    3dac:	00656c62 	rsbeq	r6, r5, r2, ror #24
    3db0:	78656f6e 	stmdavc	r5!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    3db4:	78007270 	stmdavc	r0, {r4, r5, r6, r9, ip, sp, lr}
    3db8:	746d665f 	strbtvc	r6, [sp], #-1631	; 0xfffff9a1
    3dbc:	62757300 	rsbsvs	r7, r5, #0, 6
    3dc0:	6174706f 	cmnvs	r4, pc, rrx
    3dc4:	69006772 	stmdbvs	r0, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    3dc8:	705f746e 	subsvc	r7, pc, lr, ror #8
    3dcc:	7065735f 	rsbvc	r7, r5, pc, asr r3
    3dd0:	5f79625f 	svcpl	0x0079625f
    3dd4:	63617073 	cmnvs	r1, #115	; 0x73
    3dd8:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    3ddc:	5f6e5f74 	svcpl	0x006e5f74
    3de0:	705f7363 	subsvc	r7, pc, r3, ror #6
    3de4:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    3de8:	00736564 	rsbseq	r6, r3, r4, ror #10
    3dec:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3df0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3df4:	2f2e2e2f 	svccs	0x002e2e2f
    3df8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3dfc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3e00:	2f2e2e2f 	svccs	0x002e2e2f
    3e04:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    3e08:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 3c6c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x14c>
    3e0c:	2f636269 	svccs	0x00636269
    3e10:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    3e14:	2f656e69 	svccs	0x00656e69
    3e18:	2f6d7261 	svccs	0x006d7261
    3e1c:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
    3e20:	732d7970 			; <UNDEFINED> instruction: 0x732d7970
    3e24:	2e627574 	mcrcs	5, 3, r7, cr2, cr4, {3}
    3e28:	646d0063 	strbtvs	r0, [sp], #-99	; 0xffffff9d
    3e2c:	64726f5f 	ldrbtvs	r6, [r2], #-3935	; 0xfffff0a1
    3e30:	79007265 	stmdbvc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    3e34:	74737365 	ldrbtvc	r7, [r3], #-869	; 0xfffffc9b
    3e38:	65790072 	ldrbvs	r0, [r9, #-114]!	; 0xffffff8e
    3e3c:	70786573 	rsbsvc	r6, r8, r3, ror r5
    3e40:	72650072 	rsbvc	r0, r5, #114	; 0x72
    3e44:	5f645f61 	svcpl	0x00645f61
    3e48:	00746d66 	rsbseq	r6, r4, r6, ror #26
    3e4c:	635f636c 	cmpvs	pc, #108, 6	; 0xb0000001
    3e50:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    3e54:	6500545f 	strvs	r5, [r0, #-1119]	; 0xfffffba1
    3e58:	745f6172 	ldrbvc	r6, [pc], #-370	; 3e60 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>
    3e5c:	746d665f 	strbtvc	r6, [sp], #-1631	; 0xfffff9a1
    3e60:	74637700 	strbtvc	r7, [r3], #-1792	; 0xfffff900
    3e64:	00626d6f 	rsbeq	r6, r2, pc, ror #26
    3e68:	5f6e6f6d 	svcpl	0x006e6f6d
    3e6c:	756f6874 	strbvc	r6, [pc, #-2164]!	; 3600 <NOROM_SetupTrimDevice+0xc>
    3e70:	646e6173 	strbtvs	r6, [lr], #-371	; 0xfffffe8d
    3e74:	65735f73 	ldrbvs	r5, [r3, #-3955]!	; 0xfffff08d
    3e78:	6d610070 	stclvs	0, cr0, [r1, #-448]!	; 0xfffffe40
    3e7c:	665f6d70 			; <UNDEFINED> instruction: 0x665f6d70
    3e80:	6c00746d 	cfstrsvs	mvf7, [r0], {109}	; 0x6d
    3e84:	656d5f63 	strbvs	r5, [sp, #-3939]!	; 0xfffff09d
    3e88:	67617373 			; <UNDEFINED> instruction: 0x67617373
    3e8c:	545f7365 	ldrbpl	r7, [pc], #-869	; 3e94 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4>
    3e90:	65657700 	strbvs	r7, [r5, #-1792]!	; 0xfffff900
    3e94:	7961646b 	stmdbvc	r1!, {r0, r1, r3, r5, r6, sl, sp, lr}^
    3e98:	5f435f00 	svcpl	0x00435f00
    3e9c:	656e6f6d 	strbvs	r6, [lr, #-3949]!	; 0xfffff093
    3ea0:	79726174 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, sp, lr}^
    3ea4:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    3ea8:	00656c61 	rsbeq	r6, r5, r1, ror #24
    3eac:	65746163 	ldrbvs	r6, [r4, #-355]!	; 0xfffffe9d
    3eb0:	69726f67 	ldmdbvs	r2!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp, lr}^
    3eb4:	69007365 	stmdbvs	r0, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    3eb8:	6e5f746e 	cdpvs	4, 5, cr7, cr15, cr14, {3}
    3ebc:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
    3ec0:	6f705f6e 	svcvs	0x00705f6e
    3ec4:	61006e73 	tstvs	r0, r3, ror lr
    3ec8:	6e67696c 	vnmulvs.f16	s13, s14, s25	; <UNPREDICTABLE>
    3ecc:	735f6465 	cmpvc	pc, #1694498816	; 0x65000000
    3ed0:	47006372 	smlsdxmi	r0, r2, r3, r6
    3ed4:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
    3ed8:	38203731 	stmdacc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
    3edc:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    3ee0:	31303220 	teqcc	r0, r0, lsr #4
    3ee4:	30373039 	eorscc	r3, r7, r9, lsr r0
    3ee8:	72282033 	eorvc	r2, r8, #51	; 0x33
    3eec:	61656c65 	cmnvs	r5, r5, ror #24
    3ef0:	20296573 	eorcs	r6, r9, r3, ror r5
    3ef4:	6363675b 	cmnvs	r3, #23855104	; 0x16c0000
    3ef8:	622d382d 	eorvs	r3, sp, #2949120	; 0x2d0000
    3efc:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
    3f00:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
    3f04:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    3f08:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
    3f0c:	32303337 	eorscc	r3, r0, #-603979776	; 0xdc000000
    3f10:	2d205d37 	stccs	13, cr5, [r0, #-220]!	; 0xffffff24
    3f14:	6f6c666d 	svcvs	0x006c666d
    3f18:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
    3f1c:	733d6962 	teqvc	sp, #1605632	; 0x188000
    3f20:	2074666f 	rsbscs	r6, r4, pc, ror #12
    3f24:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
    3f28:	20626d75 	rsbcs	r6, r2, r5, ror sp
    3f2c:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
    3f30:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
    3f34:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
    3f38:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
    3f3c:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
    3f40:	613d7570 	teqvs	sp, r0, ror r5
    3f44:	74376d72 	ldrtvc	r6, [r7], #-3442	; 0xfffff28e
    3f48:	20696d64 	rsbcs	r6, r9, r4, ror #26
    3f4c:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
    3f50:	613d6863 	teqvs	sp, r3, ror #16
    3f54:	34766d72 	ldrbtcc	r6, [r6], #-3442	; 0xfffff28e
    3f58:	672d2074 			; <UNDEFINED> instruction: 0x672d2074
    3f5c:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    3f60:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
    3f64:	75622d6f 	strbvc	r2, [r2, #-3439]!	; 0xfffff291
    3f68:	69746c69 	ldmdbvs	r4!, {r0, r3, r5, r6, sl, fp, sp, lr}^
    3f6c:	622f006e 	eorvs	r0, pc, #110	; 0x6e
    3f70:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    3f74:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3f78:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    3f7c:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    3f80:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    3f84:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3f88:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    3f8c:	2f302e33 	svccs	0x00302e33
    3f90:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    3f94:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
    3f98:	6f6e2d6d 	svcvs	0x006e2d6d
    3f9c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3fa0:	2f696261 	svccs	0x00696261
    3fa4:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    3fa8:	6f6e2f62 	svcvs	0x006e2f62
    3fac:	6e2f7066 	cdpvs	0, 2, cr7, cr15, cr6, {3}
    3fb0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3fb4:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    3fb8:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 3e38 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    3fbc:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    3fc0:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    3fc4:	6c006d72 	stcvs	13, cr6, [r0], {114}	; 0x72
    3fc8:	00306e65 	eorseq	r6, r0, r5, ror #28
    3fcc:	5f746e69 	svcpl	0x00746e69
    3fd0:	63617266 	cmnvs	r1, #1610612742	; 0x60000006
    3fd4:	6769645f 			; <UNDEFINED> instruction: 0x6769645f
    3fd8:	00737469 	rsbseq	r7, r3, r9, ror #8
    3fdc:	30637273 	rsbcc	r7, r3, r3, ror r2
    3fe0:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    3fe4:	6e6f6d5f 	mcrvs	13, 3, r6, cr15, cr15, {2}
    3fe8:	Address 0x0000000000003fe8 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__ccfg+0x10b0d7c>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
}
   8:	322d393a 	eorcc	r3, sp, #950272	; 0xe8000
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
  10:	302d3471 	eorcc	r3, sp, r1, ror r4
  14:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
  18:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
  1c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  24:	31393130 	teqcc	r9, r0, lsr r1
  28:	20353230 	eorscs	r3, r5, r0, lsr r2
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  3c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
			i = k;
  40:	6172622d 	cmnvs	r2, sp, lsr #4
				j->Next = k;
  44:	2068636e 	rsbcs	r6, r8, lr, ror #6
  48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
}
  4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  50:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  54:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
		release;
  58:	43434700 	movtmi	r4, #14080	; 0x3700
  5c:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
			nq++;
  60:	5420554e 	strtpl	r5, [r0], #-1358	; 0xfffffab2
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
  64:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  68:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  6c:	4d524120 	ldfmie	f4, [r2, #-128]	; 0xffffff80
  70:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  74:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  78:	72502064 	subsvc	r2, r0, #100	; 0x64
  7c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  80:	73726f73 	cmnvc	r2, #460	; 0x1cc
  84:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  88:	20332e39 	eorscs	r2, r3, r9, lsr lr
  8c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
	if (!button_still_pressed (__button_list [pbutton]))
  90:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
  94:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  98:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
	if (baction == NULL)
  9c:	5b202965 	blpl	80a638 <__ccfg+0x7ea690>
  a0:	2f4d5241 	svccs	0x004d5241
	(*baction) (pbutton);
  a4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
endthread
  a8:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
  ac:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
  b0:	6172622d 	cmnvs	r2, sp, lsr #4
endthread
  b4:	2068636e 	rsbcs	r6, r8, lr, ror #6
  b8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  bc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  c0:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
  c4:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
fsm receiver {
  c8:	43434700 	movtmi	r4, #14080	; 0x3700
  cc:	3128203a 			; <UNDEFINED> instruction: 0x3128203a
  d0:	2d383a35 	vldmdbcs	r8!, {s6-s58}
  d4:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
        packet = tcv_rnp(Receiving, sfd);
  d8:	2d33712d 	ldfcss	f7, [r3, #-180]!	; 0xffffff4c
  dc:	38202931 	stmdacc	r0!, {r0, r4, r5, r8, fp, sp}
  e0:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  e4:	31303220 	teqcc	r0, r0, lsr #4
        receivedMessage = (message *)(packet + 1);
  e8:	30373039 	eorscc	r3, r7, r9, lsr r0
  ec:	72282033 	eorvc	r2, r8, #51	; 0x33
        if(receivedMessage->receiverId == nodeId) {
  f0:	61656c65 	cmnvs	r5, r5, ror #24
  f4:	20296573 	eorcs	r6, r9, r3, ror r5
  f8:	6363675b 	cmnvs	r3, #23855104	; 0x16c0000
            proceed From_Broadcast;
  fc:	622d382d 	eorvs	r3, sp, #2949120	; 0x2d0000
        proceed Receiving;
 100:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
 104:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
        ser_outf(Get_Message, "Message ");
 108:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
 10c:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
        proceed Show_Message;
 110:	32303337 	eorscc	r3, r0, #-603979776	; 0xdc000000
        ser_outf(From_Broadcast, "Broadcast ");
 114:	Address 0x0000000000000114 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
   4:	61656100 	cmnvs	r5, r0, lsl #2
}
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
  10:	4d2d3705 	stcmi	7, cr3, [sp, #-20]!	; 0xffffffec
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	0901084d 	stmdbeq	r1, {r0, r2, r3, r6, fp}
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1e011a01 	vmlane.f32	s2, s2, s2
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000001c 	andeq	r0, r0, ip, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	000000c8 	andeq	r0, r0, r8, asr #1
      1c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
      20:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
      24:	0e0a7901 	vmlaeq.f16	s14, s20, s2	; <UNPREDICTABLE>
      28:	0ece4204 	cdpeq	2, 12, cr4, cr14, cr4, {0}
      2c:	000b4200 	andeq	r4, fp, r0, lsl #4
      30:	00000028 	andeq	r0, r0, r8, lsr #32
      34:	00000000 	andeq	r0, r0, r0
      38:	00000178 	andeq	r0, r0, r8, ror r1
      3c:	00000070 	andeq	r0, r0, r0, ror r0
			i = k;
      40:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
				j->Next = k;
      44:	86038504 	strhi	r8, [r3], -r4, lsl #10
      48:	46018e02 	strmi	r8, [r1], -r2, lsl #28
}
      4c:	c5c6ce0a 	strbgt	ip, [r6, #3594]	; 0xe0a
      50:	42000ec4 	andmi	r0, r0, #196, 28	; 0xc40
      54:	c6ce640b 	strbgt	r6, [lr], fp, lsl #8
      58:	000ec4c5 	andeq	ip, lr, r5, asr #9
      5c:	0000000c 	andeq	r0, r0, ip
	...
      68:	0000000c 	andeq	r0, r0, ip
      6c:	0000001c 	andeq	r0, r0, ip, lsl r0
      70:	00000000 	andeq	r0, r0, r0
      74:	000001e8 	andeq	r0, r0, r8, ror #3
      78:	000001a8 	andeq	r0, r0, r8, lsr #3
      7c:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
      80:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
      84:	0eb10201 	cdpeq	2, 11, cr0, cr1, cr1, {0}
      88:	0000000c 	andeq	r0, r0, ip
      8c:	0000000c 	andeq	r0, r0, ip
	if (!button_still_pressed (__button_list [pbutton]))
      90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      94:	7c020001 	stcvc	0, cr0, [r2], {1}
      98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	if (baction == NULL)
      9c:	0000000c 	andeq	r0, r0, ip
      a0:	0000008c 	andeq	r0, r0, ip, lsl #1
	(*baction) (pbutton);
      a4:	00000390 	muleq	r0, r0, r3
endthread
      a8:	0000000c 	andeq	r0, r0, ip
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00000018 	andeq	r0, r0, r8, lsl r0
      b0:	0000008c 	andeq	r0, r0, ip, lsl #1
endthread
      b4:	0000039c 	muleq	r0, ip, r3
      b8:	0000002c 	andeq	r0, r0, ip, lsr #32
      bc:	47080e41 	strmi	r0, [r8, -r1, asr #28]
      c0:	41000e0a 	tstmi	r0, sl, lsl #28
      c4:	0000000b 	andeq	r0, r0, fp
fsm receiver {
      c8:	00000018 	andeq	r0, r0, r8, lsl r0
      cc:	0000008c 	andeq	r0, r0, ip, lsl #1
      d0:	000003c8 	andeq	r0, r0, r8, asr #7
      d4:	0000002a 	andeq	r0, r0, sl, lsr #32
        packet = tcv_rnp(Receiving, sfd);
      d8:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
      dc:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
      e0:	000b4204 	andeq	r4, fp, r4, lsl #4
      e4:	00000018 	andeq	r0, r0, r8, lsl r0
        receivedMessage = (message *)(packet + 1);
      e8:	0000008c 	andeq	r0, r0, ip, lsl #1
      ec:	000003f4 	strdeq	r0, [r0], -r4
        if(receivedMessage->receiverId == nodeId) {
      f0:	0000003c 	andeq	r0, r0, ip, lsr r0
      f4:	83100e41 	tsthi	r0, #1040	; 0x410
      f8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
            proceed From_Broadcast;
      fc:	00018e02 	andeq	r8, r1, r2, lsl #28
        proceed Receiving;
     100:	00000018 	andeq	r0, r0, r8, lsl r0
     104:	0000008c 	andeq	r0, r0, ip, lsl #1
        ser_outf(Get_Message, "Message ");
     108:	00000430 	andeq	r0, r0, r0, lsr r4
     10c:	00000040 	andeq	r0, r0, r0, asr #32
        proceed Show_Message;
     110:	83100e41 	tsthi	r0, #1040	; 0x410
        ser_outf(From_Broadcast, "Broadcast ");
     114:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     118:	00018e02 	andeq	r8, r1, r2, lsl #28
        ser_outf(Show_Message, "from node %d (Seq %d): %s\n\r", receivedMessage->senderId, receivedMessage->sequenceNumber, receivedMessage->payload);
     11c:	00000014 	andeq	r0, r0, r4, lsl r0
     120:	0000008c 	andeq	r0, r0, ip, lsl #1
     124:	00000000 	andeq	r0, r0, r0
     128:	00000020 	andeq	r0, r0, r0, lsr #32
     12c:	83080e42 	movwhi	r0, #36418	; 0x8e42
        tcv_endp(packet);
     130:	00018e02 	andeq	r8, r1, r2, lsl #28
     134:	00000014 	andeq	r0, r0, r4, lsl r0
        proceed Receiving;
     138:	0000008c 	andeq	r0, r0, ip, lsl #1
}
     13c:	00000470 	andeq	r0, r0, r0, ror r4
        proceed Receiving;
     140:	00000054 	andeq	r0, r0, r4, asr r0
        } else if (receivedMessage->receiverId == '0' || receivedMessage->receiverId == 0) {
     144:	87080e42 	strhi	r0, [r8, -r2, asr #28]
     148:	00018e02 	andeq	r8, r1, r2, lsl #28
            proceed From_Broadcast;
     14c:	00000014 	andeq	r0, r0, r4, lsl r0
}
     150:	0000008c 	andeq	r0, r0, ip, lsl #1
     154:	000004c4 	andeq	r0, r0, r4, asr #9
     158:	00000040 	andeq	r0, r0, r0, asr #32
     15c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     160:	00018e02 	andeq	r8, r1, r2, lsl #28
     164:	00000014 	andeq	r0, r0, r4, lsl r0
     168:	0000008c 	andeq	r0, r0, ip, lsl #1
     16c:	00000504 	andeq	r0, r0, r4, lsl #10
     170:	00000028 	andeq	r0, r0, r8, lsr #32
     174:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
fsm transmitter (message * messagePtr) {
     178:	00018e02 	andeq	r8, r1, r2, lsl #28
     17c:	00000014 	andeq	r0, r0, r4, lsl r0
     180:	0000008c 	andeq	r0, r0, ip, lsl #1
}
     184:	0000052c 	andeq	r0, r0, ip, lsr #10
     188:	00000114 	andeq	r0, r0, r4, lsl r1
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
     18c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     190:	00018e02 	andeq	r8, r1, r2, lsl #28
     194:	0000001c 	andeq	r0, r0, ip, lsl r0
     198:	0000008c 	andeq	r0, r0, ip, lsl #1
     19c:	00000640 	andeq	r0, r0, r0, asr #12
        *p = messagePtr->senderId; p++;
     1a0:	00000050 	andeq	r0, r0, r0, asr r0
     1a4:	83180e41 	tsthi	r8, #1040	; 0x410
        strcpy(p, messagePtr->payload);
     1a8:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
        *p = messagePtr->receiverId; p++;
     1ac:	87038604 	strhi	r8, [r3, -r4, lsl #12]
        *p = messagePtr->sequenceNumber; p++;
     1b0:	00018e02 	andeq	r8, r1, r2, lsl #28
        strcpy(p, messagePtr->payload);
     1b4:	00000018 	andeq	r0, r0, r8, lsl r0
        tcv_endp (spkt);
     1b8:	0000008c 	andeq	r0, r0, ip, lsl #1
     1bc:	00000690 	muleq	r0, r0, r6
        sequence++;
     1c0:	00000054 	andeq	r0, r0, r4, asr r0
     1c4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
        ser_outf(Transmit_Message, "Message Sent\n\r");
     1c8:	86038504 	strhi	r8, [r3], -r4, lsl #10
     1cc:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     1d0:	0000000c 	andeq	r0, r0, ip
        finish;
     1d4:	0000008c 	andeq	r0, r0, ip, lsl #1
     1d8:	000006e4 	andeq	r0, r0, r4, ror #13
     1dc:	00000038 	andeq	r0, r0, r8, lsr r0
     1e0:	00000020 	andeq	r0, r0, r0, lsr #32
     1e4:	0000008c 	andeq	r0, r0, ip, lsl #1
fsm root {
     1e8:	0000071c 	andeq	r0, r0, ip, lsl r7
     1ec:	00000110 	andeq	r0, r0, r0, lsl r1
     1f0:	83200e43 			; <UNDEFINED> instruction: 0x83200e43
     1f4:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     1f8:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     1fc:	89038804 	stmdbhi	r3, {r2, fp, pc}
        nodeId = 1;
     200:	00018e02 	andeq	r8, r1, r2, lsl #28
     204:	0000000c 	andeq	r0, r0, ip
     208:	0000008c 	andeq	r0, r0, ip, lsl #1
        sfd = tcv_open(WNONE, 0, 0);
     20c:	00000000 	andeq	r0, r0, r0
        messagePtr = (message *) umalloc(sizeof(message));
     210:	0000000c 	andeq	r0, r0, ip
     214:	00000018 	andeq	r0, r0, r8, lsl r0
     218:	0000008c 	andeq	r0, r0, ip, lsl #1
        phys_cc1350(0, MAX_PACKET_LENGTH);
     21c:	0000082c 	andeq	r0, r0, ip, lsr #16
        tcv_plug(0, &plug_null);
     220:	000000c0 	andeq	r0, r0, r0, asr #1
     224:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
        sfd = tcv_open(WNONE, 0, 0);
     228:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     22c:	00000001 	andeq	r0, r0, r1
     230:	00000018 	andeq	r0, r0, r8, lsl r0
		tcv_control(sfd, PHYSOPT_ON, NULL);
     234:	0000008c 	andeq	r0, r0, ip, lsl #1
        sfd = tcv_open(WNONE, 0, 0);
     238:	000008ec 	andeq	r0, r0, ip, ror #17
		tcv_control(sfd, PHYSOPT_ON, NULL);
     23c:	00000044 	andeq	r0, r0, r4, asr #32
		if (sfd < 0) {
     240:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
			diag("Cannot open tcv interface");
     244:	86038504 	strhi	r8, [r3], -r4, lsl #10
     248:	00018e02 	andeq	r8, r1, r2, lsl #28
			halt();
     24c:	0000001c 	andeq	r0, r0, ip, lsl r0
        runfsm receiver;
     250:	0000008c 	andeq	r0, r0, ip, lsl #1
     254:	00000930 	andeq	r0, r0, r0, lsr r9
        receiverId = 0;
     258:	0000003c 	andeq	r0, r0, ip, lsr r0
     25c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
        ser_outf(Menu_Start, "P2P Chat (Node #%d)\n\r", nodeId);
     260:	86048505 	strhi	r8, [r4], -r5, lsl #10
     264:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
        ser_outf(Menu_Choices, menuText);
     268:	00000001 	andeq	r0, r0, r1
     26c:	00000018 	andeq	r0, r0, r8, lsl r0
        ser_inf(Choice, "%c", &choice);
     270:	0000008c 	andeq	r0, r0, ip, lsl #1
     274:	0000096c 	andeq	r0, r0, ip, ror #18
     278:	000000a4 	andeq	r0, r0, r4, lsr #1
        switch (choice)
     27c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     280:	86038504 	strhi	r8, [r3], -r4, lsl #10
     284:	00018e02 	andeq	r8, r1, r2, lsl #28
     288:	00000030 	andeq	r0, r0, r0, lsr r0
     28c:	0000008c 	andeq	r0, r0, ip, lsl #1
     290:	00000a10 	andeq	r0, r0, r0, lsl sl
                proceed Menu_Start;
     294:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     298:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     29c:	86078508 	strhi	r8, [r7], -r8, lsl #10
                proceed Direct_Transmission;
     2a0:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
                proceed Menu_Start;
     2a4:	8a038904 	bhi	e26bc <__ccfg+0xc2714>
        ser_outf(Change_ID, "New node ID (1-25):");
     2a8:	02018e02 	andeq	r8, r1, #2, 28
     2ac:	cace0aa2 	bgt	ff382d3c <_estack+0xdf37dd3c>
        ser_inf(Get_New_ID, "%d", &nodeId);
     2b0:	c6c7c8c9 	strbgt	ip, [r7], r9, asr #17
     2b4:	000ec4c5 	andeq	ip, lr, r5, asr #9
     2b8:	00000b42 	andeq	r0, r0, r2, asr #22
    if (node < 1 || node > 25) {
     2bc:	0000000c 	andeq	r0, r0, ip
     2c0:	0000008c 	andeq	r0, r0, ip, lsl #1
            proceed Change_ID;
     2c4:	00000bc8 	andeq	r0, r0, r8, asr #23
     2c8:	00000024 	andeq	r0, r0, r4, lsr #32
        proceed Menu_Start;
     2cc:	0000000c 	andeq	r0, r0, ip
        ser_outf(Direct_Transmission, "Receiver node ID (1-25):");
     2d0:	0000008c 	andeq	r0, r0, ip, lsl #1
     2d4:	00000000 	andeq	r0, r0, r0
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     2d8:	00000028 	andeq	r0, r0, r8, lsr #32
     2dc:	0000001c 	andeq	r0, r0, ip, lsl r0
     2e0:	0000008c 	andeq	r0, r0, ip, lsl #1
    if (node < 1 || node > 25) {
     2e4:	00000bec 	andeq	r0, r0, ip, ror #23
     2e8:	00000258 	andeq	r0, r0, r8, asr r2
            proceed Direct_Transmission;
     2ec:	870c0e42 	strhi	r0, [ip, -r2, asr #28]
     2f0:	8e028b03 	vmlahi.f64	d8, d2, d3
        ser_outf(Broadcast_Transmission, "Message: ");
     2f4:	180e4101 	stmdane	lr, {r0, r8, lr}
     2f8:	00070d42 	andeq	r0, r7, r2, asr #26
        ser_in(Get_Message, messagePtr->payload, PAYLOAD_LENGTH);
     2fc:	00000014 	andeq	r0, r0, r4, lsl r0
     300:	0000008c 	andeq	r0, r0, ip, lsl #1
     304:	00000e44 	andeq	r0, r0, r4, asr #28
        if(strlen(messagePtr->payload) > PAYLOAD_LENGTH) {
     308:	00000030 	andeq	r0, r0, r0, lsr r0
     30c:	83080e42 	movwhi	r0, #36418	; 0x8e42
     310:	00018e02 	andeq	r8, r1, r2, lsl #28
            messagePtr->payload[PAYLOAD_LENGTH - 1] = '/0';
     314:	00000018 	andeq	r0, r0, r8, lsl r0
     318:	0000008c 	andeq	r0, r0, ip, lsl #1
        call transmitter(messagePtr, Menu_Start);
     31c:	00000000 	andeq	r0, r0, r0
        messagePtr->senderId = nodeId;
     320:	0000005c 	andeq	r0, r0, ip, asr r0
     324:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
        messagePtr->receiverId = receiverId;
     328:	86038504 	strhi	r8, [r3], -r4, lsl #10
        messagePtr->sequenceNumber = sequence;
     32c:	00018e02 	andeq	r8, r1, r2, lsl #28
     330:	00000014 	andeq	r0, r0, r4, lsl r0
        call transmitter(messagePtr, Menu_Start);
     334:	0000008c 	andeq	r0, r0, ip, lsl #1
     338:	00000e74 	andeq	r0, r0, r4, ror lr
     33c:	00000060 	andeq	r0, r0, r0, rrx
     340:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
                proceed Broadcast_Transmission;
     344:	00018e02 	andeq	r8, r1, r2, lsl #28
     348:	0000000c 	andeq	r0, r0, ip
     34c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     350:	7c020001 	stcvc	0, cr0, [r2], {1}
     354:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     358:	00000018 	andeq	r0, r0, r8, lsl r0
     35c:	00000348 	andeq	r0, r0, r8, asr #6
     360:	00000ed4 	ldrdeq	r0, [r0], -r4
     364:	0000003c 	andeq	r0, r0, ip, lsr r0
     368:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     36c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     370:	00018e02 	andeq	r8, r1, r2, lsl #28
     374:	00000018 	andeq	r0, r0, r8, lsl r0
     378:	00000348 	andeq	r0, r0, r8, asr #6
     37c:	00000f10 	andeq	r0, r0, r0, lsl pc
     380:	00000080 	andeq	r0, r0, r0, lsl #1
     384:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     388:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     38c:	00000001 	andeq	r0, r0, r1
static void devinit_uart (int devnum) {
     390:	0000000c 	andeq	r0, r0, ip
	adddevfunc (ioreq_uart_a, devnum);
     394:	00000348 	andeq	r0, r0, r8, asr #6
     398:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
void udelay (volatile word n) {
     39c:	00000018 	andeq	r0, r0, r8, lsl r0
     3a0:	00000014 	andeq	r0, r0, r4, lsl r0
	while (n) {
     3a4:	00000348 	andeq	r0, r0, r8, asr #6
     3a8:	00000000 	andeq	r0, r0, r0
}
     3ac:	00000024 	andeq	r0, r0, r4, lsr #32
	while (n--);
     3b0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     3b4:	00018e02 	andeq	r8, r1, r2, lsl #28
     3b8:	00000014 	andeq	r0, r0, r4, lsl r0
		n--;
     3bc:	00000348 	andeq	r0, r0, r8, asr #6
     3c0:	00000fa8 	andeq	r0, r0, r8, lsr #31
     3c4:	00000010 	andeq	r0, r0, r0, lsl r0
void mdelay (volatile word n) {
     3c8:	83080e42 	movwhi	r0, #36418	; 0x8e42
     3cc:	00018e02 	andeq	r8, r1, r2, lsl #28
	while (n) {
     3d0:	00000014 	andeq	r0, r0, r4, lsl r0
     3d4:	00000348 	andeq	r0, r0, r8, asr #6
}
     3d8:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
		udelay (999);
     3dc:	0000002c 	andeq	r0, r0, ip, lsr #32
     3e0:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
		n--;
     3e4:	00018e02 	andeq	r8, r1, r2, lsl #28
     3e8:	00000014 	andeq	r0, r0, r4, lsl r0
     3ec:	00000348 	andeq	r0, r0, r8, asr #6
     3f0:	00000000 	andeq	r0, r0, r0
void __pi_ondomain (lword d) {
     3f4:	0000004c 	andeq	r0, r0, ip, asr #32
     3f8:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
		if (__pi_systat.effpdm > 1)
     3fc:	00018e02 	andeq	r8, r1, r2, lsl #28
     400:	0000000c 	andeq	r0, r0, ip
			__pi_systat.effpdm = 1;
     404:	00000348 	andeq	r0, r0, r8, asr #6
	PRCMPowerDomainOn (d);
     408:	00000fe4 	andeq	r0, r0, r4, ror #31
     40c:	00000006 	andeq	r0, r0, r6
     410:	00000028 	andeq	r0, r0, r8, lsr #32
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     414:	00000348 	andeq	r0, r0, r8, asr #6
     418:	00000fec 	andeq	r0, r0, ip, ror #31
     41c:	000000cc 	andeq	r0, r0, ip, asr #1
	__pi_systat.ondmns |= d;
     420:	83180e41 	tsthi	r8, #1040	; 0x410
     424:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
}
     428:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     42c:	02018e02 	andeq	r8, r1, #2, 28
void __pi_offdomain (lword d) {
     430:	c7ce0a59 			; <UNDEFINED> instruction: 0xc7ce0a59
     434:	c3c4c5c6 	bicgt	ip, r4, #830472192	; 0x31800000
	PRCMPowerDomainOff (d);
     438:	0b42000e 	bleq	1080478 <__ccfg+0x10604d0>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     43c:	00000014 	andeq	r0, r0, r4, lsl r0
     440:	00000348 	andeq	r0, r0, r8, asr #6
     444:	000010b8 	strheq	r1, [r0], -r8
	if (d & PRCM_DOMAIN_RFCORE) {
     448:	00000014 	andeq	r0, r0, r4, lsl r0
     44c:	83080e41 	movwhi	r0, #36417	; 0x8e41
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     450:	00018e02 	andeq	r8, r1, r2, lsl #28
     454:	00000014 	andeq	r0, r0, r4, lsl r0
			__pi_systat.effpdm = __pi_systat.reqpdm;
     458:	00000348 	andeq	r0, r0, r8, asr #6
     45c:	000010cc 	andeq	r1, r0, ip, asr #1
	__pi_systat.ondmns &= ~d;
     460:	00000034 	andeq	r0, r0, r4, lsr r0
     464:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
}
     468:	00018e02 	andeq	r8, r1, r2, lsl #28
     46c:	00000018 	andeq	r0, r0, r8, lsl r0
void __pi_syserror (word ec, const char *m) {
     470:	00000348 	andeq	r0, r0, r8, asr #6
	diag ("SYSERR: %x, %s", ec, m);
     474:	00001100 	andeq	r1, r0, r0, lsl #2
     478:	00000034 	andeq	r0, r0, r4, lsr r0
  __ASM volatile ("cpsid i" : : : "memory");
     47c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     480:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     484:	00000001 	andeq	r0, r0, r1
     488:	00000018 	andeq	r0, r0, r8, lsl r0
		all_leds_blink;
     48c:	00000348 	andeq	r0, r0, r8, asr #6
     490:	00000000 	andeq	r0, r0, r0
     494:	0000002c 	andeq	r0, r0, ip, lsr #32
     498:	83100e41 	tsthi	r0, #1040	; 0x410
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     49c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     4a0:	00018e02 	andeq	r8, r1, r2, lsl #28
     4a4:	00000014 	andeq	r0, r0, r4, lsl r0
     4a8:	00000348 	andeq	r0, r0, r8, asr #6
     4ac:	00001134 	andeq	r1, r0, r4, lsr r1
     4b0:	00000024 	andeq	r0, r0, r4, lsr #32
	while (1) {
     4b4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     4b8:	00018e02 	andeq	r8, r1, r2, lsl #28
     4bc:	00000018 	andeq	r0, r0, r8, lsl r0
     4c0:	00000348 	andeq	r0, r0, r8, asr #6
void tci_run_delay_timer () {
     4c4:	00001158 	andeq	r1, r0, r8, asr r1
	setdel = __pi_mintk - __pi_old;
     4c8:	00000038 	andeq	r0, r0, r8, lsr r0
     4cc:	83100e41 	tsthi	r0, #1040	; 0x410
     4d0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     4d4:	00018e02 	andeq	r8, r1, r2, lsl #28
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     4d8:	0000000c 	andeq	r0, r0, ip
     4dc:	00000348 	andeq	r0, r0, r8, asr #6
     4e0:	00000000 	andeq	r0, r0, r0
     4e4:	00000014 	andeq	r0, r0, r4, lsl r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     4e8:	00000014 	andeq	r0, r0, r4, lsl r0
	sti_tim;
     4ec:	00000348 	andeq	r0, r0, r8, asr #6
}
     4f0:	00000000 	andeq	r0, r0, r0
     4f4:	00000040 	andeq	r0, r0, r0, asr #32
     4f8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     4fc:	00018e02 	andeq	r8, r1, r2, lsl #28
     500:	00000014 	andeq	r0, r0, r4, lsl r0
	cli_aux;
     504:	00000348 	andeq	r0, r0, r8, asr #6
     508:	00000000 	andeq	r0, r0, r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     50c:	00000018 	andeq	r0, r0, r8, lsl r0
     510:	83080e41 	movwhi	r0, #36417	; 0x8e41
     514:	00018e02 	andeq	r8, r1, r2, lsl #28
     518:	0000000c 	andeq	r0, r0, ip
	sti_aux;
     51c:	00000348 	andeq	r0, r0, r8, asr #6
}
     520:	00001190 	muleq	r0, r0, r1
     524:	00000024 	andeq	r0, r0, r4, lsr #32
     528:	0000000c 	andeq	r0, r0, ip
void AONRTCIntHandler () {
     52c:	00000348 	andeq	r0, r0, r8, asr #6
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     530:	00000000 	andeq	r0, r0, r0
     534:	00000020 	andeq	r0, r0, r0, lsr #32
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     538:	0000000c 	andeq	r0, r0, ip
		if (__pi_utims [0] == 0)
     53c:	00000348 	andeq	r0, r0, r8, asr #6
     540:	000011b4 			; <UNDEFINED> instruction: 0x000011b4
		if (*(__pi_utims [0])) {
     544:	0000000e 	andeq	r0, r0, lr
     548:	0000000c 	andeq	r0, r0, ip
			(*(__pi_utims [0]))--;
     54c:	00000348 	andeq	r0, r0, r8, asr #6
		if (__pi_utims [1] == 0)
     550:	000011c2 	andeq	r1, r0, r2, asr #3
		if (*(__pi_utims [1])) {
     554:	00000010 	andeq	r0, r0, r0, lsl r0
			aux_timer_inactive = 0;
     558:	0000000c 	andeq	r0, r0, ip
			(*(__pi_utims [1]))--;
     55c:	00000348 	andeq	r0, r0, r8, asr #6
		if (__pi_utims [2] == 0)
     560:	00000000 	andeq	r0, r0, r0
		if (*(__pi_utims [2])) {
     564:	0000001c 	andeq	r0, r0, ip, lsl r0
			(*(__pi_utims [2]))--;
     568:	0000000c 	andeq	r0, r0, ip
		if (__pi_utims [3] != 0) {
     56c:	00000348 	andeq	r0, r0, r8, asr #6
			if (*(__pi_utims [3])) {
     570:	00000000 	andeq	r0, r0, r0
				aux_timer_inactive = 0;
     574:	00000010 	andeq	r0, r0, r0, lsl r0
				(*(__pi_utims [3]))--;
     578:	0000000c 	andeq	r0, r0, ip
	if (__pi_systat.ledsts) {
     57c:	00000348 	andeq	r0, r0, r8, asr #6
     580:	00000000 	andeq	r0, r0, r0
		if (__pi_systat.ledblc++ == 0) {
     584:	00000006 	andeq	r0, r0, r6
     588:	0000000c 	andeq	r0, r0, ip
			if (__pi_systat.ledblk) {
     58c:	00000348 	andeq	r0, r0, r8, asr #6
     590:	000011d2 	ldrdeq	r1, [r0], -r2
     594:	00000014 	andeq	r0, r0, r4, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     598:	0000000c 	andeq	r0, r0, ip
     59c:	00000348 	andeq	r0, r0, r8, asr #6
				if (__pi_systat.ledsts & 0x2)
     5a0:	000011e6 	andeq	r1, r0, r6, ror #3
     5a4:	0000000e 	andeq	r0, r0, lr
     5a8:	00000014 	andeq	r0, r0, r4, lsl r0
				if (__pi_systat.ledsts & 0x4)
     5ac:	00000348 	andeq	r0, r0, r8, asr #6
				__pi_systat.ledblk = 0;
     5b0:	000011f4 	strdeq	r1, [r0], -r4
     5b4:	00000024 	andeq	r0, r0, r4, lsr #32
			if (__pi_systat.fstblk)
     5b8:	83080e41 	movwhi	r0, #36417	; 0x8e41
     5bc:	00018e02 	andeq	r8, r1, r2, lsl #28
				__pi_systat.ledblc = 200;
     5c0:	00000020 	andeq	r0, r0, r0, lsr #32
	if (events & AON_RTC_EVFLAGS_CH0) {
     5c4:	00000348 	andeq	r0, r0, r8, asr #6
		cli_tim;
     5c8:	00001218 	andeq	r1, r0, r8, lsl r2
		__pi_new += setdel;
     5cc:	0000009c 	muleq	r0, ip, r0
     5d0:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
		setdel = 0;
     5d4:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
		RISE_N_SHINE;
     5d8:	87058606 	strhi	r8, [r5, -r6, lsl #12]
		__pi_new += setdel;
     5dc:	89038804 	stmdbhi	r3, {r2, fp, pc}
		RISE_N_SHINE;
     5e0:	00018e02 	andeq	r8, r1, r2, lsl #28
     5e4:	00000014 	andeq	r0, r0, r4, lsl r0
		aux_timer_inactive = 1;
     5e8:	00000348 	andeq	r0, r0, r8, asr #6
     5ec:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
				if (__pi_systat.ledsts & 0x1)
     5f0:	00000050 	andeq	r0, r0, r0, asr r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     5f4:	83080e42 	movwhi	r0, #36418	; 0x8e42
     5f8:	00018e02 	andeq	r8, r1, r2, lsl #28
				if (__pi_systat.ledsts & 0x2)
     5fc:	00000014 	andeq	r0, r0, r4, lsl r0
     600:	00000348 	andeq	r0, r0, r8, asr #6
     604:	00001304 	andeq	r1, r0, r4, lsl #6
				if (__pi_systat.ledsts & 0x8)
     608:	00000048 	andeq	r0, r0, r8, asr #32
				__pi_systat.ledblk = 1;
     60c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     610:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (aux_timer_inactive) {
     614:	00000014 	andeq	r0, r0, r4, lsl r0
			cli_aux;
     618:	00000348 	andeq	r0, r0, r8, asr #6
     61c:	0000134c 	andeq	r1, r0, ip, asr #6
     620:	00000050 	andeq	r0, r0, r0, asr r0
     624:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     628:	00018e02 	andeq	r8, r1, r2, lsl #28
     62c:	00000020 	andeq	r0, r0, r0, lsr #32
     630:	00000348 	andeq	r0, r0, r8, asr #6
     634:	00000000 	andeq	r0, r0, r0
     638:	00000058 	andeq	r0, r0, r8, asr r0
     63c:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
word tci_update_delay_ticks (Boolean force) {
     640:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
	cli_tim;
     644:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     648:	89038804 	stmdbhi	r3, {r2, fp, pc}
	if (setdel) {
     64c:	00018e02 	andeq	r8, r1, r2, lsl #28
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     650:	00000018 	andeq	r0, r0, r8, lsl r0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     654:	00000348 	andeq	r0, r0, r8, asr #6
     658:	0000139c 	muleq	r0, ip, r3
     65c:	000000a8 	andeq	r0, r0, r8, lsr #1
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     660:	83100e44 	tsthi	r0, #68, 28	; 0x440
				AON_RTC_O_CH0CMP)) - gettav ());
     664:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	return NO;
     668:	00018e02 	andeq	r8, r1, r2, lsl #28
			setdel = 0;
     66c:	00000018 	andeq	r0, r0, r8, lsl r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     670:	00000348 	andeq	r0, r0, r8, asr #6
     674:	00001444 	andeq	r1, r0, r4, asr #8
}
     678:	00000034 	andeq	r0, r0, r4, lsr r0
		sti_tim;
     67c:	83100e41 	tsthi	r0, #1040	; 0x410
		return YES;
     680:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     684:	00018e02 	andeq	r8, r1, r2, lsl #28
     688:	0000000c 	andeq	r0, r0, ip
     68c:	00000348 	andeq	r0, r0, r8, asr #6
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     690:	00001478 	andeq	r1, r0, r8, ror r4
	UARTDisable (UART0_BASE);
     694:	00000018 	andeq	r0, r0, r8, lsl r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     698:	00000014 	andeq	r0, r0, r4, lsl r0
	UARTDisable (UART0_BASE);
     69c:	00000348 	andeq	r0, r0, r8, asr #6
	UARTConfigSetExpClk (UART0_BASE,
     6a0:	00000000 	andeq	r0, r0, r0
     6a4:	00000030 	andeq	r0, r0, r0, lsr r0
     6a8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     6ac:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6b0:	00000014 	andeq	r0, r0, r4, lsl r0
     6b4:	00000348 	andeq	r0, r0, r8, asr #6
     6b8:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     6bc:	00000038 	andeq	r0, r0, r8, lsr r0
     6c0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     6c4:	00018e02 	andeq	r8, r1, r2, lsl #28
	urates [0] = rate;
     6c8:	00000040 	andeq	r0, r0, r0, asr #32
}
     6cc:	00000348 	andeq	r0, r0, r8, asr #6
     6d0:	00001490 	muleq	r0, r0, r4
     6d4:	0000013c 	andeq	r0, r0, ip, lsr r1
     6d8:	80100e41 	andshi	r0, r0, r1, asr #28
     6dc:	82038104 	andhi	r8, r3, #4, 2
     6e0:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6e4:	0b84380e 	bleq	fe10e724 <_estack+0xde109724>
     6e8:	09860a85 	stmibeq	r6, {r0, r2, r7, r9, fp}
     6ec:	07880887 	streq	r0, [r8, r7, lsl #17]
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     6f0:	058e0689 	streq	r0, [lr, #1673]	; 0x689
     6f4:	2c0e0a5e 			; <UNDEFINED> instruction: 0x2c0e0a5e
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     6f8:	c8c9ce42 	stmiagt	r9, {r1, r6, r9, sl, fp, lr, pc}^
     6fc:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
	__pi_uart_setrate (urates [0], __pi_uart);
     700:	c341100e 	movtgt	r1, #4110	; 0x100e
     704:	0ec0c1c2 	acseqdm	f4, f2
     708:	000b4100 	andeq	r4, fp, r0, lsl #2
     70c:	0000000c 	andeq	r0, r0, ip
     710:	00000348 	andeq	r0, r0, r8, asr #6
     714:	000015cc 	andeq	r1, r0, ip, asr #11
     718:	00000024 	andeq	r0, r0, r4, lsr #32
	switch (operation) {
     71c:	0000000c 	andeq	r0, r0, ip
static int ioreq_uart_a (int operation, char *buf, int len) {
     720:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     724:	7c020001 	stcvc	0, cr0, [r2], {1}
     728:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     72c:	00000014 	andeq	r0, r0, r4, lsl r0
     730:	0000071c 	andeq	r0, r0, ip, lsl r7
				*buf++ = uart_a_read;
     734:	000015f0 	strdeq	r1, [r0], -r0
     738:	00000016 	andeq	r0, r0, r6, lsl r0
			while (len && uart_a_char_available) {
     73c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     740:	00018e02 	andeq	r8, r1, r2, lsl #28
     744:	0000000c 	andeq	r0, r0, ip
			if (len != operation) {
     748:	0000071c 	andeq	r0, r0, ip, lsl r7
}
     74c:	00001606 	andeq	r1, r0, r6, lsl #12
     750:	0000001a 	andeq	r0, r0, sl, lsl r0
			uart_a_disable_int;
     754:	00000018 	andeq	r0, r0, r8, lsl r0
			if (uart_a_char_available) {
     758:	0000071c 	andeq	r0, r0, ip, lsl r7
				*buf++ = uart_a_read;
     75c:	00001620 	andeq	r1, r0, r0, lsr #12
			uart_a_disable_int;
     760:	0000000e 	andeq	r0, r0, lr
     764:	83080e41 	movwhi	r0, #36417	; 0x8e41
			if (uart_a_char_available) {
     768:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
     76c:	000ec3ce 	andeq	ip, lr, lr, asr #7
				uart_a_enable_int;
     770:	00000018 	andeq	r0, r0, r8, lsl r0
     774:	0000071c 	andeq	r0, r0, ip, lsl r7
				goto Redo_rx;
     778:	00001630 	andeq	r1, r0, r0, lsr r6
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     77c:	0000004c 	andeq	r0, r0, ip, asr #32
     780:	83100e41 	tsthi	r0, #1040	; 0x410
			return -2;
     784:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     788:	00018e02 	andeq	r8, r1, r2, lsl #28
				uart_a_write (*buf);
     78c:	00000020 	andeq	r0, r0, r0, lsr #32
     790:	0000071c 	andeq	r0, r0, ip, lsl r7
			while (len && uart_a_room_in_tx) {
     794:	0000167c 	andeq	r1, r0, ip, ror r6
     798:	0000008c 	andeq	r0, r0, ip, lsl #1
     79c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			if (len != operation) {
     7a0:	5f018e02 	svcpl	0x00018e02
			uart_a_disable_int;
     7a4:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     7a8:	560b4200 	strpl	r4, [fp], -r0, lsl #4
			if (uart_a_room_in_tx) {
     7ac:	000ec4ce 	andeq	ip, lr, lr, asr #9
     7b0:	00000020 	andeq	r0, r0, r0, lsr #32
				uart_a_enable_int;
     7b4:	0000071c 	andeq	r0, r0, ip, lsl r7
     7b8:	00001708 	andeq	r1, r0, r8, lsl #14
				*buf++ = uart_a_read;
     7bc:	00000070 	andeq	r0, r0, r0, ror r0
			if (uart_a_room_in_tx) {
     7c0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				uart_a_write (*buf);
     7c4:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
     7c8:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7cc:	430b4200 	movwmi	r4, #45568	; 0xb200
     7d0:	000ec4ce 	andeq	ip, lr, lr, asr #9
			uart_a_enable_int;
     7d4:	0000003c 	andeq	r0, r0, ip, lsr r0
     7d8:	0000071c 	andeq	r0, r0, ip, lsl r7
     7dc:	00001778 	andeq	r1, r0, r8, ror r7
			return 0;
     7e0:	000000c0 	andeq	r0, r0, r0, asr #1
			if (len == UART_CNTRL_SETRATE) {
     7e4:	82080e41 	andhi	r0, r8, #1040	; 0x410
				if (__pi_uart_setrate (*((word*)buf),
     7e8:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     7ec:	0a84300e 	beq	fe10c82c <_estack+0xde10782c>
     7f0:	08860985 	stmeq	r6, {r0, r2, r7, r8, fp}
				syserror (EREQPAR, "uar");
     7f4:	06880787 	streq	r0, [r8], r7, lsl #15
			syserror (ENOOPER, "uai");
     7f8:	048a0589 	streq	r0, [sl], #1417	; 0x589
			if (len == UART_CNTRL_GETRATE) {
     7fc:	0a6b038e 	beq	1ac163c <__ccfg+0x1aa1694>
				return 1;
     800:	ce42280e 	cdpgt	8, 4, cr2, cr2, cr14, {0}
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     804:	c7c8c9ca 	strbgt	ip, [r8, sl, asr #19]
			syserror (ENOOPER, "uai");
     808:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     80c:	c2c34108 	sbcgt	r4, r3, #8, 2
     810:	0b41000e 	bleq	1040850 <__ccfg+0x10208a8>
     814:	0000001c 	andeq	r0, r0, ip, lsl r0
     818:	0000071c 	andeq	r0, r0, ip, lsl r7
     81c:	00000000 	andeq	r0, r0, r0
     820:	0000006c 	andeq	r0, r0, ip, rrx
     824:	83180e42 	tsthi	r8, #1056	; 0x420
     828:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     82c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
void UART0IntHandler () {
     830:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     834:	0000000c 	andeq	r0, r0, ip
     838:	0000071c 	andeq	r0, r0, ip, lsl r7
     83c:	00001838 	andeq	r1, r0, r8, lsr r8
     840:	00000024 	andeq	r0, r0, r4, lsr #32
     844:	00000018 	andeq	r0, r0, r8, lsl r0
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     848:	0000071c 	andeq	r0, r0, ip, lsl r7
     84c:	0000185c 	andeq	r1, r0, ip, asr r8
		RISE_N_SHINE;
     850:	00000080 	andeq	r0, r0, r0, lsl #1
     854:	83100e42 	tsthi	r0, #1056	; 0x420
		i_trigger (devevent (UART_A, READ));
     858:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     85c:	00018e02 	andeq	r8, r1, r2, lsl #28
     860:	00000014 	andeq	r0, r0, r4, lsl r0
     864:	0000071c 	andeq	r0, r0, ip, lsl r7
     868:	00000000 	andeq	r0, r0, r0
     86c:	00000070 	andeq	r0, r0, r0, ror r0
     870:	83080e42 	movwhi	r0, #36418	; 0x8e42
     874:	00018e02 	andeq	r8, r1, r2, lsl #28
     878:	00000018 	andeq	r0, r0, r8, lsl r0
     87c:	0000071c 	andeq	r0, r0, ip, lsl r7
     880:	00000000 	andeq	r0, r0, r0
     884:	00000078 	andeq	r0, r0, r8, ror r0
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     888:	83100e42 	tsthi	r0, #1056	; 0x420
     88c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     890:	00018e02 	andeq	r8, r1, r2, lsl #28
		i_trigger (devevent (UART_A, WRITE));
     894:	00000020 	andeq	r0, r0, r0, lsr #32
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     898:	0000071c 	andeq	r0, r0, ip, lsl r7
     89c:	000018dc 	ldrdeq	r1, [r0], -ip
		RISE_N_SHINE;
     8a0:	000000bc 	strheq	r0, [r0], -ip
     8a4:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     8a8:	86048505 	strhi	r8, [r4], -r5, lsl #10
		i_trigger (devevent (UART_A, WRITE));
     8ac:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     8b0:	0e0a6701 	cdpeq	7, 0, cr6, cr10, cr1, {0}
     8b4:	000b4114 	andeq	r4, fp, r4, lsl r1
     8b8:	00000018 	andeq	r0, r0, r8, lsl r0
     8bc:	0000071c 	andeq	r0, r0, ip, lsl r7
     8c0:	00000000 	andeq	r0, r0, r0
     8c4:	0000003a 	andeq	r0, r0, sl, lsr r0
     8c8:	83100e41 	tsthi	r0, #1040	; 0x410
     8cc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     8d0:	00018e02 	andeq	r8, r1, r2, lsl #28
     8d4:	00000018 	andeq	r0, r0, r8, lsl r0
}
     8d8:	0000071c 	andeq	r0, r0, ip, lsl r7
     8dc:	00000000 	andeq	r0, r0, r0
     8e0:	00000038 	andeq	r0, r0, r8, lsr r0
     8e4:	83100e41 	tsthi	r0, #1040	; 0x410
     8e8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
void __buttons_setirq (int val) {
     8ec:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     8f0:	0000000c 	andeq	r0, r0, ip
     8f4:	0000071c 	andeq	r0, r0, ip, lsl r7
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     8f8:	00000000 	andeq	r0, r0, r0
     8fc:	0000000a 	andeq	r0, r0, sl
     900:	00000018 	andeq	r0, r0, r8, lsl r0
		bn = BUTTON_GPIO (__button_list [i]);
     904:	0000071c 	andeq	r0, r0, ip, lsl r7
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     908:	00001998 	muleq	r0, r8, r9
     90c:	0000002c 	andeq	r0, r0, ip, lsr #32
     910:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     914:	4c018e02 	stcmi	14, cr8, [r1], {2}
     918:	000ec4ce 	andeq	ip, lr, lr, asr #9
     91c:	0000001c 	andeq	r0, r0, ip, lsl r0
}
     920:	0000071c 	andeq	r0, r0, ip, lsl r7
     924:	000019c4 	andeq	r1, r0, r4, asr #19
     928:	00000060 	andeq	r0, r0, r0, rrx
     92c:	83080e41 	movwhi	r0, #36417	; 0x8e41
void __pinlist_setirq (int val) {
     930:	61018e02 	tstvs	r1, r2, lsl #28
	for (i = 0; i < N_PINLIST; i++) {
     934:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     938:	000b4300 	andeq	r4, fp, r0, lsl #6
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     93c:	00000014 	andeq	r0, r0, r4, lsl r0
	for (i = 0; i < N_PINLIST; i++) {
     940:	0000071c 	andeq	r0, r0, ip, lsl r7
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     944:	00000000 	andeq	r0, r0, r0
     948:	00000040 	andeq	r0, r0, r0, asr #32
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     94c:	83080e42 	movwhi	r0, #36418	; 0x8e42
     950:	00018e02 	andeq	r8, r1, r2, lsl #28
     954:	00000014 	andeq	r0, r0, r4, lsl r0
	for (i = 0; i < N_PINLIST; i++) {
     958:	0000071c 	andeq	r0, r0, ip, lsl r7
}
     95c:	00000000 	andeq	r0, r0, r0
     960:	0000002c 	andeq	r0, r0, ip, lsr #32
     964:	83080e42 	movwhi	r0, #36418	; 0x8e42
     968:	00018e02 	andeq	r8, r1, r2, lsl #28
void GPIOIntHandler () {
     96c:	0000001c 	andeq	r0, r0, ip, lsl r0
if (buttons_int) {
     970:	0000071c 	andeq	r0, r0, ip, lsl r7
     974:	00000000 	andeq	r0, r0, r0
	buttons_disable ();
     978:	0000003c 	andeq	r0, r0, ip, lsr r0
     97c:	83180e41 	tsthi	r8, #1040	; 0x410
	i_trigger ((aword)&__button_list);
     980:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     984:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     988:	00018e02 	andeq	r8, r1, r2, lsl #28
     98c:	0000000c 	andeq	r0, r0, ip
     990:	0000071c 	andeq	r0, r0, ip, lsl r7
     994:	00000000 	andeq	r0, r0, r0
     998:	00000006 	andeq	r0, r0, r6
     99c:	0000001c 	andeq	r0, r0, ip, lsl r0
     9a0:	0000071c 	andeq	r0, r0, ip, lsl r7
     9a4:	00001a24 	andeq	r1, r0, r4, lsr #20
     9a8:	00000068 	andeq	r0, r0, r8, rrx
	RISE_N_SHINE;
     9ac:	83180e41 	tsthi	r8, #1040	; 0x410
     9b0:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     9b4:	87038604 	strhi	r8, [r3, -r4, lsl #12]
if (pin_sensor_int) {
     9b8:	00018e02 	andeq	r8, r1, r2, lsl #28
     9bc:	00000014 	andeq	r0, r0, r4, lsl r0
	i_trigger ((aword)(&__input_pins));
     9c0:	0000071c 	andeq	r0, r0, ip, lsl r7
     9c4:	00001a8c 	andeq	r1, r0, ip, lsl #21
     9c8:	00000050 	andeq	r0, r0, r0, asr r0
     9cc:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     9d0:	00018e02 	andeq	r8, r1, r2, lsl #28
     9d4:	0000002c 	andeq	r0, r0, ip, lsr #32
     9d8:	0000071c 	andeq	r0, r0, ip, lsl r7
     9dc:	00001adc 	ldrdeq	r1, [r0], -ip
     9e0:	0000009c 	muleq	r0, ip, r0
     9e4:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     9e8:	86088509 	strhi	r8, [r8], -r9, lsl #10
	__pinsen_disable_and_clear;
     9ec:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
	RISE_N_SHINE;
     9f0:	8a048905 	bhi	122e0c <__ccfg+0x102e64>
     9f4:	8e028b03 	vmlahi.f64	d8, d2, d3
     9f8:	380e4501 	stmdacc	lr, {r0, r8, sl, lr}
}
     9fc:	240e0a56 	strcs	r0, [lr], #-2646	; 0xfffff5aa
     a00:	00000b42 	andeq	r0, r0, r2, asr #22
     a04:	00000014 	andeq	r0, r0, r4, lsl r0
     a08:	0000071c 	andeq	r0, r0, ip, lsl r7
     a0c:	00001b78 	andeq	r1, r0, r8, ror fp
void system_init () {
     a10:	00000040 	andeq	r0, r0, r0, asr #32
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a14:	83080e42 	movwhi	r0, #36418	; 0x8e42
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a18:	00018e02 	andeq	r8, r1, r2, lsl #28
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a1c:	00000014 	andeq	r0, r0, r4, lsl r0
     a20:	0000071c 	andeq	r0, r0, ip, lsl r7
     a24:	00001bb8 			; <UNDEFINED> instruction: 0x00001bb8
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a28:	00000034 	andeq	r0, r0, r4, lsr r0
     a2c:	83080e42 	movwhi	r0, #36418	; 0x8e42
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a30:	00018e02 	andeq	r8, r1, r2, lsl #28
     a34:	00000018 	andeq	r0, r0, r8, lsl r0
     a38:	0000071c 	andeq	r0, r0, ip, lsl r7
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a3c:	00001bec 	andeq	r1, r0, ip, ror #23
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a40:	0000003c 	andeq	r0, r0, ip, lsr r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a44:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a48:	57018e02 	strpl	r8, [r1, -r2, lsl #28]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a4c:	000ec4ce 	andeq	ip, lr, lr, asr #9
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a50:	00000018 	andeq	r0, r0, r8, lsl r0
		pin = (port_confs [i] >> 19) & 0x1f;
     a54:	0000071c 	andeq	r0, r0, ip, lsl r7
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a58:	00000000 	andeq	r0, r0, r0
		pin = (port_confs [i] >> 19) & 0x1f;
     a5c:	0000003c 	andeq	r0, r0, ip, lsr r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a60:	83100e42 	tsthi	r0, #1056	; 0x420
     a64:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     a68:	00018e02 	andeq	r8, r1, r2, lsl #28
     a6c:	0000000c 	andeq	r0, r0, ip
		if (port_confs [i] & 0x80)
     a70:	0000071c 	andeq	r0, r0, ip, lsl r7
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a74:	00001c28 	andeq	r1, r0, r8, lsr #24
     a78:	00000002 	andeq	r0, r0, r2
		if (port_confs [i] & 0x40)
     a7c:	0000000c 	andeq	r0, r0, ip
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     a84:	7c020001 	stcvc	0, cr0, [r2], {1}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a88:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a8c:	0000000c 	andeq	r0, r0, ip
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a90:	00000a7c 	andeq	r0, r0, ip, ror sl
	all_leds_blink;
     a94:	00001c2a 	andeq	r1, r0, sl, lsr #24
     a98:	00000002 	andeq	r0, r0, r2
     a9c:	0000000c 	andeq	r0, r0, ip
     aa0:	00000a7c 	andeq	r0, r0, ip, ror sl
     aa4:	00001c2c 	andeq	r1, r0, ip, lsr #24
     aa8:	00000002 	andeq	r0, r0, r2
     aac:	0000000c 	andeq	r0, r0, ip
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ab0:	00000a7c 	andeq	r0, r0, ip, ror sl
     ab4:	00001c2e 	andeq	r1, r0, lr, lsr #24
     ab8:	00000002 	andeq	r0, r0, r2
     abc:	00000014 	andeq	r0, r0, r4, lsl r0
     ac0:	00000a7c 	andeq	r0, r0, ip, ror sl
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     ac4:	00001c30 	andeq	r1, r0, r0, lsr ip
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     ac8:	00000044 	andeq	r0, r0, r4, asr #32
     acc:	83080e41 	movwhi	r0, #36417	; 0x8e41
	IntEnable (INT_AON_RTC_COMB);
     ad0:	00018e02 	andeq	r8, r1, r2, lsl #28
     ad4:	0000000c 	andeq	r0, r0, ip
     ad8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	__pi_malloc_init ();
     adc:	7c020001 	stcvc	0, cr0, [r2], {1}
	IntEnable (INT_AON_GPIO_EDGE);
     ae0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ae4:	0000000c 	andeq	r0, r0, ip
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     ae8:	00000ad4 	ldrdeq	r0, [r0], -r4
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     aec:	00000000 	andeq	r0, r0, r0
     af0:	00000002 	andeq	r0, r0, r2
     af4:	00000018 	andeq	r0, r0, r8, lsl r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     af8:	00000ad4 	ldrdeq	r0, [r0], -r4
     afc:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b00:	00000058 	andeq	r0, r0, r8, asr r0
     b04:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     b08:	86038504 	strhi	r8, [r3], -r4, lsl #10
	urates [0] = UART_RATE / 100;
     b0c:	00018e02 	andeq	r8, r1, r2, lsl #28
     b10:	0000000c 	andeq	r0, r0, ip
	reinit_uart ();
     b14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	EXTRA_INITIALIZERS;
     b18:	7c020001 	stcvc	0, cr0, [r2], {1}
     b1c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b20:	0000002c 	andeq	r0, r0, ip, lsr #32
     b24:	00000b10 	andeq	r0, r0, r0, lsl fp
     b28:	00000000 	andeq	r0, r0, r0
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b2c:	000000cc 	andeq	r0, r0, ip, asr #1
     b30:	83100e42 	tsthi	r0, #1056	; 0x420
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b34:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     b38:	02018e02 	andeq	r8, r1, #2, 28
			devinit [i] . init (devinit [i] . param);
     b3c:	c5ce0a54 	strbgt	r0, [lr, #2644]	; 0xa54
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b40:	000ec3c4 	andeq	ip, lr, r4, asr #7
     b44:	ce420b44 	vmlsgt.f64	d16, d2, d4
     b48:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
	IntEnable (INT_UART0_COMB);
     b4c:	00000000 	andeq	r0, r0, r0
     b50:	00000024 	andeq	r0, r0, r4, lsr #32
}
     b54:	00000b10 	andeq	r0, r0, r0, lsl fp
	tci_run_auxiliary_timer ();
     b58:	00000000 	andeq	r0, r0, r0
		diag ("");
     b5c:	00000038 	andeq	r0, r0, r8, lsr r0
     b60:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     b64:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     b68:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
		diag ("Leftover RAM: %d bytes",
     b6c:	4a0b4300 	bmi	2d1774 <__ccfg+0x2b17cc>
     b70:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     b74:	000b4300 	andeq	r4, fp, r0, lsl #6
     b78:	0000000c 	andeq	r0, r0, ip
     b7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b80:	7c020001 	stcvc	0, cr0, [r2], {1}
     b84:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b88:	00000018 	andeq	r0, r0, r8, lsl r0
     b8c:	00000b78 	andeq	r0, r0, r8, ror fp
     b90:	00001c7c 	andeq	r1, r0, ip, ror ip
     b94:	00000034 	andeq	r0, r0, r4, lsr r0
     b98:	84100e45 	ldrhi	r0, [r0], #-3653	; 0xfffff1bb
     b9c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     ba0:	00018e02 	andeq	r8, r1, r2, lsl #28
     ba4:	00000018 	andeq	r0, r0, r8, lsl r0
     ba8:	00000b78 	andeq	r0, r0, r8, ror fp
     bac:	00001cb0 			; <UNDEFINED> instruction: 0x00001cb0
     bb0:	00000030 	andeq	r0, r0, r0, lsr r0
     bb4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     bb8:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     bbc:	00000001 	andeq	r0, r0, r1
     bc0:	00000014 	andeq	r0, r0, r4, lsl r0
     bc4:	00000b78 	andeq	r0, r0, r8, ror fp
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     bc8:	00001ce0 	andeq	r1, r0, r0, ror #25
     bcc:	00000018 	andeq	r0, r0, r8, lsl r0
     bd0:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     bd4:	00018e02 	andeq	r8, r1, r2, lsl #28
     bd8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bdc:	00000b78 	andeq	r0, r0, r8, ror fp
     be0:	00001cf8 	strdeq	r1, [r0], -r8
     be4:	00000054 	andeq	r0, r0, r4, asr r0
}
     be8:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
__attribute__ ((noreturn)) void __pi_release () {
     bec:	86058506 	strhi	r8, [r5], -r6, lsl #10
     bf0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     bf4:	00018e02 	andeq	r8, r1, r2, lsl #28
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     bf8:	0000001c 	andeq	r0, r0, ip, lsl r0
	check_stack_overflow;
     bfc:	00000b78 	andeq	r0, r0, r8, ror fp
     c00:	00001d4c 	andeq	r1, r0, ip, asr #26
     c04:	00000040 	andeq	r0, r0, r0, asr #32
	update_n_wake (MAX_WORD, NO);
     c08:	83180e41 	tsthi	r8, #1040	; 0x410
     c0c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c10:	87038604 	strhi	r8, [r3, -r4, lsl #12]
	for_all_tasks (__pi_curr) {
     c14:	00018e02 	andeq	r8, r1, r2, lsl #28
     c18:	00000014 	andeq	r0, r0, r4, lsl r0
     c1c:	00000b78 	andeq	r0, r0, r8, ror fp
  __ASM volatile ("cpsid i" : : : "memory");
     c20:	00001d8c 	andeq	r1, r0, ip, lsl #27
	__SLEEP;
     c24:	00000024 	andeq	r0, r0, r4, lsr #32
     c28:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     c2c:	00018e02 	andeq	r8, r1, r2, lsl #28
     c30:	00000014 	andeq	r0, r0, r4, lsl r0
	system_event_count ++;
     c34:	00000b78 	andeq	r0, r0, r8, ror fp
     c38:	00001db0 			; <UNDEFINED> instruction: 0x00001db0
	switch (__pi_systat.effpdm) {
     c3c:	00000014 	andeq	r0, r0, r4, lsl r0
     c40:	83080e41 	movwhi	r0, #36417	; 0x8e41
     c44:	00018e02 	andeq	r8, r1, r2, lsl #28
     c48:	0000000c 	andeq	r0, r0, ip
			__WFI ();
     c4c:	00000b78 	andeq	r0, r0, r8, ror fp
     c50:	00001dc4 	andeq	r1, r0, r4, asr #27
     c54:	00000014 	andeq	r0, r0, r4, lsl r0
	check_stack_overflow;
     c58:	0000001c 	andeq	r0, r0, ip, lsl r0
     c5c:	00000b78 	andeq	r0, r0, r8, ror fp
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c60:	00000000 	andeq	r0, r0, r0
     c64:	00000064 	andeq	r0, r0, r4, rrx
			(__pi_curr->code) (tstate (__pi_curr));
     c68:	83180e41 	tsthi	r8, #1040	; 0x410
			goto Redo;
     c6c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
	for_all_tasks (__pi_curr) {
     c70:	87038604 	strhi	r8, [r3, -r4, lsl #12]
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c74:	00018e02 	andeq	r8, r1, r2, lsl #28
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c78:	0000001c 	andeq	r0, r0, ip, lsl r0
     c7c:	00000b78 	andeq	r0, r0, r8, ror fp
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c80:	00000000 	andeq	r0, r0, r0
     c84:	00000128 	andeq	r0, r0, r8, lsr #2
     c88:	83180e41 	tsthi	r8, #1040	; 0x410
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c8c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c90:	87038604 	strhi	r8, [r3, -r4, lsl #12]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c94:	00018e02 	andeq	r8, r1, r2, lsl #28
     c98:	00000024 	andeq	r0, r0, r4, lsr #32
			__WFI ();
     c9c:	00000b78 	andeq	r0, r0, r8, ror fp
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     ca0:	00000000 	andeq	r0, r0, r0
     ca4:	000000ec 	andeq	r0, r0, ip, ror #1
}
     ca8:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cac:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cb0:	87078608 	strhi	r8, [r7, -r8, lsl #12]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cb4:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
     cb8:	8b038a04 	blhi	e34d0 <__ccfg+0xc3528>
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cbc:	00018e02 	andeq	r8, r1, r2, lsl #28
     cc0:	0000000c 	andeq	r0, r0, ip
     cc4:	00000b78 	andeq	r0, r0, r8, ror fp
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cc8:	00000000 	andeq	r0, r0, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ccc:	00000002 	andeq	r0, r0, r2
     cd0:	0000000c 	andeq	r0, r0, ip
     cd4:	00000b78 	andeq	r0, r0, r8, ror fp
     cd8:	00000000 	andeq	r0, r0, r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     cdc:	00000004 	andeq	r0, r0, r4
     ce0:	0000000c 	andeq	r0, r0, ip
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ce4:	00000b78 	andeq	r0, r0, r8, ror fp
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     ce8:	00000000 	andeq	r0, r0, r0
     cec:	00000014 	andeq	r0, r0, r4, lsl r0
     cf0:	00000018 	andeq	r0, r0, r8, lsl r0
     cf4:	00000b78 	andeq	r0, r0, r8, ror fp
     cf8:	00000000 	andeq	r0, r0, r0
			SysCtrlSetRechargeBeforePowerDown
     cfc:	0000001a 	andeq	r0, r0, sl, lsl r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d00:	83080e41 	movwhi	r0, #36417	; 0x8e41
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d04:	4a018e02 	bmi	64514 <__ccfg+0x4456c>
     d08:	000ec3ce 	andeq	ip, lr, lr, asr #7
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d0c:	0000000c 	andeq	r0, r0, ip
     d10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d14:	7c020001 	stcvc	0, cr0, [r2], {1}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d18:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d1c:	0000001c 	andeq	r0, r0, ip, lsl r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d20:	00000d0c 	andeq	r0, r0, ip, lsl #26
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d24:	00001dd8 	ldrdeq	r1, [r0], -r8
     d28:	00000078 	andeq	r0, r0, r8, ror r0
     d2c:	83180e41 	tsthi	r8, #1040	; 0x410
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d30:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
			while (!(AONWUCPowerStatusGet () &
     d34:	87038604 	strhi	r8, [r3, -r4, lsl #12]
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d38:	00018e02 	andeq	r8, r1, r2, lsl #28
     d3c:	0000000c 	andeq	r0, r0, ip
     d40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d44:	7c020001 	stcvc	0, cr0, [r2], {1}
     d48:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d4c:	00000030 	andeq	r0, r0, r0, lsr r0
     d50:	00000d3c 	andeq	r0, r0, ip, lsr sp
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d54:	00001e50 	andeq	r1, r0, r0, asr lr
     d58:	00000054 	andeq	r0, r0, r4, asr r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d5c:	810c0e41 	tsthi	ip, r1, asr #28
     d60:	83028203 	movwhi	r8, #8707	; 0x2203
			SysCtrlAdjustRechargeAfterPowerDown ();
     d64:	280e4101 	stmdacs	lr, {r0, r8, lr}
			reinit_uart ();
     d68:	06850784 	streq	r0, [r5], r4, lsl #15
     d6c:	048e0586 	streq	r0, [lr], #1414	; 0x586
     d70:	421c0e61 	andsmi	r0, ip, #1552	; 0x610
}
     d74:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d78:	c3410c0e 	movtgt	r0, #7182	; 0x1c0e
     d7c:	000ec1c2 	andeq	ip, lr, r2, asr #3
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d80:	0000000c 	andeq	r0, r0, ip
     d84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d88:	7c020001 	stcvc	0, cr0, [r2], {1}
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     d8c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d90:	00000030 	andeq	r0, r0, r0, lsr r0
     d94:	00000d80 	andeq	r0, r0, r0, lsl #27
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     d98:	00001ea4 	andeq	r1, r0, r4, lsr #29
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     d9c:	00000060 	andeq	r0, r0, r0, rrx
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     da0:	810c0e41 	tsthi	ip, r1, asr #28
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     da4:	83028203 	movwhi	r8, #8707	; 0x2203
     da8:	200e4101 	andcs	r4, lr, r1, lsl #2
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     dac:	05850684 	streq	r0, [r5, #1668]	; 0x684
     db0:	0a64048e 	beq	1901ff0 <__ccfg+0x18e2048>
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     db4:	ce42180e 	cdpgt	8, 4, cr1, cr2, cr14, {0}
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     db8:	0c0ec4c5 	cfstrseq	mvf12, [lr], {197}	; 0xc5
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     dbc:	c1c2c341 	bicgt	ip, r2, r1, asr #6
     dc0:	0b41000e 	bleq	1040e00 <__ccfg+0x1020e58>
			PRCMPowerDomainOff (
     dc4:	0000000c 	andeq	r0, r0, ip
     dc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	__SLEEP;
     dcc:	7c020001 	stcvc	0, cr0, [r2], {1}
     dd0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  __ASM volatile ("cpsie i" : : : "memory");
     dd4:	0000000c 	andeq	r0, r0, ip
	goto Redo;
     dd8:	00000dc4 	andeq	r0, r0, r4, asr #27
     ddc:	00001f04 	andeq	r1, r0, r4, lsl #30
     de0:	00000020 	andeq	r0, r0, r0, lsr #32
     de4:	00000018 	andeq	r0, r0, r8, lsl r0
     de8:	00000dc4 	andeq	r0, r0, r4, asr #27
     dec:	00001f24 	andeq	r1, r0, r4, lsr #30
     df0:	00000190 	muleq	r0, r0, r1
     df4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     df8:	86038504 	strhi	r8, [r3], -r4, lsl #10
     dfc:	00018e02 	andeq	r8, r1, r2, lsl #28
     e00:	00000018 	andeq	r0, r0, r8, lsl r0
     e04:	00000dc4 	andeq	r0, r0, r4, asr #27
     e08:	000020b4 	strheq	r2, [r0], -r4
     e0c:	00000048 	andeq	r0, r0, r8, asr #32
     e10:	83100e41 	tsthi	r0, #1040	; 0x410
     e14:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     e18:	00018e02 	andeq	r8, r1, r2, lsl #28
     e1c:	00000014 	andeq	r0, r0, r4, lsl r0
     e20:	00000dc4 	andeq	r0, r0, r4, asr #27
     e24:	000020fc 	strdeq	r2, [r0], -ip
     e28:	00000024 	andeq	r0, r0, r4, lsr #32
     e2c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     e30:	00018e02 	andeq	r8, r1, r2, lsl #28
     e34:	00000018 	andeq	r0, r0, r8, lsl r0
     e38:	00000dc4 	andeq	r0, r0, r4, asr #27
     e3c:	00002120 	andeq	r2, r0, r0, lsr #2
     e40:	0000005c 	andeq	r0, r0, ip, asr r0
	cli_tim;
     e44:	83100e41 	tsthi	r0, #1040	; 0x410
     e48:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     e4c:	00018e02 	andeq	r8, r1, r2, lsl #28
	diag ("PicOS halted");
     e50:	00000018 	andeq	r0, r0, r8, lsl r0
	mdelay (500);
     e54:	00000dc4 	andeq	r0, r0, r4, asr #27
     e58:	0000217c 	andeq	r2, r0, ip, ror r1
	setpowermode (2);
     e5c:	00000038 	andeq	r0, r0, r8, lsr r0
	__PCB = NULL;
     e60:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
	release;
     e64:	86038504 	strhi	r8, [r3], -r4, lsl #10
     e68:	00018e02 	andeq	r8, r1, r2, lsl #28
     e6c:	00000028 	andeq	r0, r0, r8, lsr #32
     e70:	00000dc4 	andeq	r0, r0, r4, asr #27
int main (void) {
     e74:	000021b4 			; <UNDEFINED> instruction: 0x000021b4
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e78:	00000180 	andeq	r0, r0, r0, lsl #3
     e7c:	84180e45 	ldrhi	r0, [r8], #-3653	; 0xfffff1bb
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e80:	86058506 	strhi	r8, [r5], -r6, lsl #10
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e84:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
	system_init ();
     e88:	02018e02 	andeq	r8, r1, #2, 28
	tcv_init ();
     e8c:	c7c8ce88 	strbgt	ip, [r8, r8, lsl #29]
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e90:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     e94:	00000000 	andeq	r0, r0, r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e98:	00000030 	andeq	r0, r0, r0, lsr r0
     e9c:	00000dc4 	andeq	r0, r0, r4, asr #27
     ea0:	00002334 	andeq	r2, r0, r4, lsr r3
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     ea4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     ea8:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
	delay (16, 0);
     eac:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     eb0:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     eb4:	89038804 	stmdbhi	r3, {r2, fp, pc}
	__pi_release ();
     eb8:	02018e02 	andeq	r8, r1, #2, 28
     ebc:	c9ce0a4d 	stmibgt	lr, {r0, r2, r3, r6, r9, fp}^
     ec0:	c5c6c7c8 	strbgt	ip, [r6, #1992]	; 0x7c8
     ec4:	000ec3c4 	andeq	ip, lr, r4, asr #7
     ec8:	00000b46 	andeq	r0, r0, r6, asr #22
     ecc:	00000020 	andeq	r0, r0, r0, lsr #32
     ed0:	00000dc4 	andeq	r0, r0, r4, asr #27
static void killev (__pi_pcb_t *pid) {
     ed4:	00002404 	andeq	r2, r0, r4, lsl #8
	wfun = (aword)(pid->code);
     ed8:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	for_all_tasks (i) {
     edc:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
		for (j = 0; j < nevents (i); j++) {
     ee0:	86038504 	strhi	r8, [r3], -r4, lsl #10
     ee4:	02018e02 	andeq	r8, r1, #2, 28
     ee8:	c5c6ced8 	strbgt	ip, [r6, #3800]	; 0xed8
			    || i->Events [j] . Event == wfun
     eec:	00000ec4 	andeq	r0, r0, r4, asr #29
		for (j = 0; j < nevents (i); j++) {
     ef0:	00000018 	andeq	r0, r0, r8, lsl r0
			if (i->Events [j] . Event == (aword)pid
     ef4:	00000dc4 	andeq	r0, r0, r4, asr #27
     ef8:	000025f4 	strdeq	r2, [r0], -r4
     efc:	00000070 	andeq	r0, r0, r0, ror r0
				wakeupev (i, j);
     f00:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     f04:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	for_all_tasks (i) {
     f08:	00000001 	andeq	r0, r0, r1
}
     f0c:	00000024 	andeq	r0, r0, r4, lsr #32
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f10:	00000dc4 	andeq	r0, r0, r4, asr #27
static void qfree (aword *ch) {
     f14:	00002664 	andeq	r2, r0, r4, ror #12
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f18:	00000174 	andeq	r0, r0, r4, ror r1
	cc = (aword*)(mpools + MA_NP);
     f1c:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
	m_setnextp (ch, chunk);
     f20:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
	m_setnextp (cc, ch);
     f24:	87078608 	strhi	r8, [r7, -r8, lsl #12]
}
     f28:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f2c:	8b038a04 	blhi	e3744 <__ccfg+0xc379c>
     f30:	00018e02 	andeq	r8, r1, r2, lsl #28
     f34:	0000000c 	andeq	r0, r0, ip
			m_setnextp (cc, m_nextp (chunk));
     f38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			m_size (chunk) += m_hdrlen + m_size (ch);
     f3c:	7c020001 	stcvc	0, cr0, [r2], {1}
     f40:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f44:	00000014 	andeq	r0, r0, r4, lsl r0
     f48:	00000f34 	andeq	r0, r0, r4, lsr pc
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f4c:	000027d8 	ldrdeq	r2, [r0], -r8
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f50:	00000024 	andeq	r0, r0, r4, lsr #32
     f54:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     f58:	00018e02 	andeq	r8, r1, r2, lsl #28
			m_setnextp (cc, m_nextp (chunk));
     f5c:	0000000c 	andeq	r0, r0, ip
			m_size (ch) += m_hdrlen + m_size (chunk);
     f60:	00000f34 	andeq	r0, r0, r4, lsr pc
     f64:	000027fc 	strdeq	r2, [r0], -ip
     f68:	00000024 	andeq	r0, r0, r4, lsr #32
     f6c:	0000000c 	andeq	r0, r0, ip
     f70:	00000f34 	andeq	r0, r0, r4, lsr pc
     f74:	00002820 	andeq	r2, r0, r0, lsr #16
			if (m_size (chunk) >= m_size (ch))
     f78:	00000008 	andeq	r0, r0, r8
     f7c:	0000000c 	andeq	r0, r0, ip
     f80:	00000f34 	andeq	r0, r0, r4, lsr pc
		chunk = m_nextp (chunk))
     f84:	00002828 	andeq	r2, r0, r8, lsr #16
     f88:	00000004 	andeq	r0, r0, r4
     f8c:	0000000c 	andeq	r0, r0, ip
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f90:	00000f34 	andeq	r0, r0, r4, lsr pc
	diag_wait (a);
     f94:	0000282c 	andeq	r2, r0, ip, lsr #16
	diag_wchar (c, a);
     f98:	00000004 	andeq	r0, r0, r4
     f9c:	00000018 	andeq	r0, r0, r8, lsl r0
}
     fa0:	00000f34 	andeq	r0, r0, r4, lsr pc
     fa4:	00002830 	andeq	r2, r0, r0, lsr r8
	syserror (ESTATE, "state");
     fa8:	00000048 	andeq	r0, r0, r8, asr #32
     fac:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     fb0:	86038504 	strhi	r8, [r3], -r4, lsl #10
     fb4:	00018e02 	andeq	r8, r1, r2, lsl #28
	for (i = 0; i < MAX_UTIMERS; i++)
     fb8:	0000000c 	andeq	r0, r0, ip
void utimer_add (address ut) {
     fbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     fc0:	7c020001 	stcvc	0, cr0, [r2], {1}
		if (__pi_utims [i] == NULL)
     fc4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	for (i = 0; i < MAX_UTIMERS; i++)
     fc8:	00000028 	andeq	r0, r0, r8, lsr #32
     fcc:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
		syserror (ERESOURCE, "ut a");
     fd0:	00002878 	andeq	r2, r0, r8, ror r8
	__pi_utims [i] = ut;
     fd4:	00000070 	andeq	r0, r0, r0, ror r0
}
     fd8:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
     fdc:	86048505 	strhi	r8, [r4], -r5, lsl #10
     fe0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
	*t = v;
     fe4:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
	TCI_RUN_AUXILIARY_TIMER;
     fe8:	c7ce4214 	bfigt	r4, r4, #4, #11
void update_n_wake (word min, Boolean force) {
     fec:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
	if (TCI_UPDATE_DELAY_TICKS (force))
     ff0:	000b4200 	andeq	r4, fp, r0, lsl #4
     ff4:	0000000c 	andeq	r0, r0, ip
     ff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     ffc:	7c020001 	stcvc	0, cr0, [r2], {1}
    1000:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1004:	00000028 	andeq	r0, r0, r8, lsr #32
    1008:	00000ff4 	strdeq	r0, [r0], -r4
    100c:	000028e8 	andeq	r2, r0, r8, ror #17
    1010:	0000011c 	andeq	r0, r0, ip, lsl r1
    1014:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
    1018:	86048505 	strhi	r8, [r4], -r5, lsl #10
    101c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1020:	0e7c0201 	cdpeq	2, 7, cr0, cr12, cr1, {0}
    1024:	c7ce4214 	bfigt	r4, r4, #4, #11
    1028:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    102c:	00000000 	andeq	r0, r0, r0
		for_all_tasks (i) {
    1030:	0000000c 	andeq	r0, r0, ip
	__pi_mintk = znew + min;
    1034:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1038:	7c020001 	stcvc	0, cr0, [r2], {1}
			if (!twaiting (i))
    103c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1040:	0000000c 	andeq	r0, r0, ip
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1044:	00001030 	andeq	r1, r0, r0, lsr r0
    1048:	00002a04 	andeq	r2, r0, r4, lsl #20
    104c:	00000020 	andeq	r0, r0, r0, lsr #32
    1050:	00000028 	andeq	r0, r0, r8, lsr #32
    1054:	00001030 	andeq	r1, r0, r0, lsr r0
    1058:	00002a24 	andeq	r2, r0, r4, lsr #20
    105c:	00000230 	andeq	r0, r0, r0, lsr r2
    1060:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
    1064:	86078508 	strhi	r8, [r7], -r8, lsl #10
    1068:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    106c:	8a038904 	bhi	e3484 <__ccfg+0xc34dc>
    1070:	02018e02 	andeq	r8, r1, #2, 28
				wakeuptm (i);
    1074:	200e0a4f 	andcs	r0, lr, pc, asr #20
    1078:	00000b42 	andeq	r0, r0, r2, asr #22
		for_all_tasks (i) {
    107c:	0000001c 	andeq	r0, r0, ip, lsl r0
				d = i->Timer - znew;
    1080:	00001030 	andeq	r1, r0, r0, lsr r0
    1084:	00002c54 	andeq	r2, r0, r4, asr ip
    1088:	00000050 	andeq	r0, r0, r0, asr r0
		if ((word)(__pi_mintk - znew) < min) 
    108c:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    1090:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1094:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
	__pi_old = znew;
    1098:	00018e02 	andeq	r8, r1, r2, lsl #28
}
    109c:	0000000c 	andeq	r0, r0, ip
	TCI_RUN_DELAY_TIMER;
    10a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
}
    10a4:	7c020001 	stcvc	0, cr0, [r2], {1}
    10a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    10ac:	00000020 	andeq	r0, r0, r0, lsr #32
    10b0:	0000109c 	muleq	r0, ip, r0
    10b4:	00002ca4 	andeq	r2, r0, r4, lsr #25
void proceed (word state) {
    10b8:	00000390 	muleq	r0, r0, r3
	prcdstate (__pi_curr, state);
    10bc:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xfffff1bd
    10c0:	86068507 	strhi	r8, [r6], -r7, lsl #10
	release;
    10c4:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    10c8:	8e028903 	vmlahi.f16	s16, s4, s6	; <UNPREDICTABLE>
void __pi_wait (aword event, word state) {
    10cc:	00000001 	andeq	r0, r0, r1
	sint j = nevents (__pi_curr);
    10d0:	0000000c 	andeq	r0, r0, ip
	if (j >= MAX_EVENTS_PER_TASK)
    10d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    10d8:	7c020001 	stcvc	0, cr0, [r2], {1}
    10dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    10e0:	00000024 	andeq	r0, r0, r4, lsr #32
		syserror (ENEVENTS, "sw");
    10e4:	000010d0 	ldrdeq	r1, [r0], -r0
	setestate (__pi_curr->Events [j], state, event);
    10e8:	00003034 	andeq	r3, r0, r4, lsr r0
	incwait (__pi_curr);
    10ec:	00000028 	andeq	r0, r0, r8, lsr #32
	setestate (__pi_curr->Events [j], state, event);
    10f0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
}
    10f4:	86038504 	strhi	r8, [r3], -r4, lsl #10
    10f8:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
    10fc:	c5c6ce0a 	strbgt	ip, [r6, #3594]	; 0xe0a
void __pi_trigger (aword event) {
    1100:	42000ec4 	andmi	r0, r0, #196, 28	; 0xc40
	for_all_tasks (i) {
    1104:	0000000b 	andeq	r0, r0, fp
		for (j = 0; j < nevents (i); j++) {
    1108:	00000028 	andeq	r0, r0, r8, lsr #32
    110c:	000010d0 	ldrdeq	r1, [r0], -r0
    1110:	00000000 	andeq	r0, r0, r0
    1114:	0000002c 	andeq	r0, r0, ip, lsr #32
			if (i->Events [j] . Event == event) {
    1118:	83180e41 	tsthi	r8, #1040	; 0x410
    111c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    1120:	87038604 	strhi	r8, [r3, -r4, lsl #12]
				wakeupev (i, j);
    1124:	50018e02 	andpl	r8, r1, r2, lsl #28
    1128:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
	for_all_tasks (i) {
    112c:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
}
    1130:	000b4200 	andeq	r4, fp, r0, lsl #4
aword __pi_join (aword pid, word st) {
    1134:	0000000c 	andeq	r0, r0, ip
	for_all_tasks (i) {
    1138:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    113c:	7c020001 	stcvc	0, cr0, [r2], {1}
	return 0;
    1140:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1144:	0000000c 	andeq	r0, r0, ip
			__pi_wait (pid, st);
    1148:	00001134 	andeq	r1, r0, r4, lsr r1
}
    114c:	0000305c 	andeq	r3, r0, ip, asr r0
	for_all_tasks (i) {
    1150:	00000030 	andeq	r0, r0, r0, lsr r0
    1154:	0000000c 	andeq	r0, r0, ip
void delay (word d, word state) {
    1158:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	settstate (__pi_curr, state);
    115c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1160:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1164:	0000000c 	andeq	r0, r0, ip
    1168:	00001154 	andeq	r1, r0, r4, asr r1
	update_n_wake (d, YES);
    116c:	0000308c 	andeq	r3, r0, ip, lsl #1
    1170:	00000020 	andeq	r0, r0, r0, lsr #32
	__pi_curr->Timer = __pi_old + d;
    1174:	0000000c 	andeq	r0, r0, ip
    1178:	00001154 	andeq	r1, r0, r4, asr r1
	inctimer (__pi_curr);
    117c:	000030ac 	andeq	r3, r0, ip, lsr #1
    1180:	00000018 	andeq	r0, r0, r8, lsl r0
    1184:	0000000c 	andeq	r0, r0, ip
}
    1188:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    118c:	7c020001 	stcvc	0, cr0, [r2], {1}
	if (fun == NULL)
    1190:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1194:	0000000c 	andeq	r0, r0, ip
		return (int) __pi_curr;
    1198:	00001184 	andeq	r1, r0, r4, lsl #3
	for_all_tasks (i)
    119c:	000030c4 	andeq	r3, r0, r4, asr #1
}
    11a0:	00000008 	andeq	r0, r0, r8
		if (i->code == fun)
    11a4:	0000000c 	andeq	r0, r0, ip
	for_all_tasks (i)
    11a8:	00001184 	andeq	r1, r0, r4, lsl #3
    11ac:	00000000 	andeq	r0, r0, r0
    11b0:	00000006 	andeq	r0, r0, r6
int __pi_strlen (const char *s) {
    11b4:	0000000c 	andeq	r0, r0, ip
	for (i = 0; *(s+i) != '\0'; i++);
    11b8:	00001184 	andeq	r1, r0, r4, lsl #3
}
    11bc:	000030cc 	andeq	r3, r0, ip, asr #1
	for (i = 0; *(s+i) != '\0'; i++);
    11c0:	00000008 	andeq	r0, r0, r8
	while ((Boolean)(*d++ = *s++));
    11c4:	0000000c 	andeq	r0, r0, ip
    11c8:	00001184 	andeq	r1, r0, r4, lsl #3
    11cc:	00000000 	andeq	r0, r0, r0
}
    11d0:	00000006 	andeq	r0, r0, r6
	while (n--)
    11d4:	0000000c 	andeq	r0, r0, ip
    11d8:	00001184 	andeq	r1, r0, r4, lsl #3
		*dest++ = *src++;
    11dc:	00000000 	andeq	r0, r0, r0
    11e0:	00000008 	andeq	r0, r0, r8
    11e4:	0000000c 	andeq	r0, r0, ip
	while (n--)
    11e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
}
    11ec:	7c020001 	stcvc	0, cr0, [r2], {1}
		*dest++ = c;
    11f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11f4:	0000001c 	andeq	r0, r0, ip, lsl r0
		syserror (EREQPAR, "addv");
    11f8:	000011e4 	andeq	r1, r0, r4, ror #3
		syserror (ERESOURCE, "addv");
    11fc:	000030d4 	ldrdeq	r3, [r0], -r4
	if (ioreq [loc] != NULL)
    1200:	0000005c 	andeq	r0, r0, ip, asr r0
    1204:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
		syserror (ERESOURCE, "addv");
    1208:	86038504 	strhi	r8, [r3], -r4, lsl #10
	ioreq [loc] = rf;
    120c:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
}
    1210:	0000100e 	andeq	r1, r0, lr
    1214:	00000014 	andeq	r0, r0, r4, lsl r0
sint io (word retry, word dev, word operation, char *buf, word len) {
    1218:	000011e4 	andeq	r1, r0, r4, ror #3
    121c:	00003130 	andeq	r3, r0, r0, lsr r1
    1220:	0000002c 	andeq	r0, r0, ip, lsr #32
    1224:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1228:	00018e02 	andeq	r8, r1, r2, lsl #28
    122c:	00000018 	andeq	r0, r0, r8, lsl r0
    1230:	000011e4 	andeq	r1, r0, r4, ror #3
		syserror (ENODEVICE, "io");
    1234:	00000000 	andeq	r0, r0, r0
    1238:	00000090 	muleq	r0, r0, r0
	if (len == 0)
    123c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
	ret = (ioreq [dev]) (operation, buf, len);
    1240:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1244:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (ret >= 0)
    1248:	00000014 	andeq	r0, r0, r4, lsl r0
	if (ret == -1) {
    124c:	000011e4 	andeq	r1, r0, r4, ror #3
    1250:	0000315c 	andeq	r3, r0, ip, asr r1
		if (retry == WNONE)
    1254:	00000018 	andeq	r0, r0, r8, lsl r0
		iowait (dev, operation, retry);
    1258:	83080e41 	movwhi	r0, #36417	; 0x8e41
    125c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1260:	00000014 	andeq	r0, r0, r4, lsl r0
			release;
    1264:	000011e4 	andeq	r1, r0, r4, ror #3
	if (ret == -2) {
    1268:	00003174 	andeq	r3, r0, r4, ror r1
		if (retry != WNONE) {
    126c:	00000060 	andeq	r0, r0, r0, rrx
    1270:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			iowait (dev, operation, retry);
    1274:	00018e02 	andeq	r8, r1, r2, lsl #28
    1278:	00000014 	andeq	r0, r0, r4, lsl r0
			(ioreq [dev]) (NONE, buf, len);
    127c:	000011e4 	andeq	r1, r0, r4, ror #3
    1280:	000031d4 	ldrdeq	r3, [r0], -r4
    1284:	00000034 	andeq	r0, r0, r4, lsr r0
		(ioreq [dev]) (NONE, buf, len);
    1288:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    128c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1290:	00000018 	andeq	r0, r0, r8, lsl r0
}
    1294:	000011e4 	andeq	r1, r0, r4, ror #3
	if (retry != WNONE) {
    1298:	00000000 	andeq	r0, r0, r0
		delay (-ret - 2, retry);
    129c:	00000038 	andeq	r0, r0, r8, lsr r0
    12a0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    12a4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    12a8:	00000001 	andeq	r0, r0, r1
		release;
    12ac:	0000000c 	andeq	r0, r0, ip
    12b0:	000011e4 	andeq	r1, r0, r4, ror #3
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    12b4:	00000000 	andeq	r0, r0, r0
    12b8:	0000000c 	andeq	r0, r0, ip
    12bc:	00000018 	andeq	r0, r0, r8, lsl r0
    12c0:	000011e4 	andeq	r1, r0, r4, ror #3
    12c4:	00000000 	andeq	r0, r0, r0
		syserror (ERESOURCE, "mal1");
    12c8:	00000034 	andeq	r0, r0, r4, lsr r0
    12cc:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    12d0:	86038504 	strhi	r8, [r3], -r4, lsl #10
    12d4:	00018e02 	andeq	r8, r1, r2, lsl #28
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12d8:	0000000c 	andeq	r0, r0, ip
	m_size (mpools [0]) = mlen - m_hdrlen;
    12dc:	000011e4 	andeq	r1, r0, r4, ror #3
	m_magic (mpools [0]) = MALLOC_MAGIC;
    12e0:	00000000 	andeq	r0, r0, r0
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    12e4:	0000001c 	andeq	r0, r0, ip, lsl r0
    12e8:	0000000c 	andeq	r0, r0, ip
}
    12ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    12f0:	7c020001 	stcvc	0, cr0, [r2], {1}
    12f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12f8:	0000000c 	andeq	r0, r0, ip
    12fc:	000012e8 	andeq	r1, r0, r8, ror #5
    1300:	00000000 	andeq	r0, r0, r0
void __pi_free (aword *ch) {
    1304:	00000014 	andeq	r0, r0, r4, lsl r0
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1308:	0000000c 	andeq	r0, r0, ip
    130c:	000012e8 	andeq	r1, r0, r8, ror #5
		syserror (EMALLOC, "malg");
    1310:	00003208 	andeq	r3, r0, r8, lsl #4
    1314:	00000028 	andeq	r0, r0, r8, lsr #32
	mcfree [MA_NP] += m_size (ch);
    1318:	0000000c 	andeq	r0, r0, ip
		m_size (ch) ^= MALLOC_UMASK;
    131c:	000012e8 	andeq	r1, r0, r8, ror #5
    1320:	00003230 	andeq	r3, r0, r0, lsr r2
	mcfree [MA_NP] += m_size (ch);
    1324:	0000004c 	andeq	r0, r0, ip, asr #32
	QFREE;
    1328:	0000000c 	andeq	r0, r0, ip
	if (mevent [MA_NP] . nwait) {
    132c:	000012e8 	andeq	r1, r0, r8, ror #5
    1330:	0000327c 	andeq	r3, r0, ip, ror r2
		trigger ((aword)(&(mevent [MA_NP])));
    1334:	00000150 	andeq	r0, r0, r0, asr r1
		mevent [MA_NP] . nwait --;
    1338:	00000018 	andeq	r0, r0, r8, lsl r0
}
    133c:	000012e8 	andeq	r1, r0, r8, ror #5
    1340:	000033cc 	andeq	r3, r0, ip, asr #7
    1344:	00000118 	andeq	r0, r0, r8, lsl r1
    1348:	84100e43 	ldrhi	r0, [r0], #-3651	; 0xfffff1bd
void kill (aword pid) {
    134c:	86038504 	strhi	r8, [r3], -r4, lsl #10
		pid = (aword) __pi_curr;
    1350:	00018e02 	andeq	r8, r1, r2, lsl #28
	j = NULL;
    1354:	00000018 	andeq	r0, r0, r8, lsl r0
	for_all_tasks (i) {
    1358:	000012e8 	andeq	r1, r0, r8, ror #5
	syserror (EREQPAR, "kpi");
    135c:	000034e4 	andeq	r3, r0, r4, ror #9
    1360:	00000020 	andeq	r0, r0, r0, lsr #32
		if ((aword)i == pid) {
    1364:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1368:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
				__PCB = i->Next;
    136c:	00000001 	andeq	r0, r0, r1
			killev (i);
    1370:	00000014 	andeq	r0, r0, r4, lsl r0
			ufree (i);
    1374:	000012e8 	andeq	r1, r0, r8, ror #5
			if (i == __pi_curr)
    1378:	00000000 	andeq	r0, r0, r0
    137c:	00000060 	andeq	r0, r0, r0, rrx
				release;
    1380:	83080e41 	movwhi	r0, #36417	; 0x8e41
				j->Next = i->Next;
    1384:	00018e02 	andeq	r8, r1, r2, lsl #28
    1388:	0000000c 	andeq	r0, r0, ip
    138c:	000012e8 	andeq	r1, r0, r8, ror #5
}
    1390:	00003504 	andeq	r3, r0, r4, lsl #10
    1394:	0000001c 	andeq	r0, r0, ip, lsl r0
    1398:	0000000c 	andeq	r0, r0, ip
	if (size < 8)
    139c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		_size = 2;
    13a0:	7c020001 	stcvc	0, cr0, [r2], {1}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    13a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    13a8:	00000018 	andeq	r0, r0, r8, lsl r0
		if (m_magic (chunk) != MALLOC_MAGIC)
    13ac:	00001398 	muleq	r0, r8, r3
		_size = (((aword)size) + 3) >> 2;
    13b0:	00003520 	andeq	r3, r0, r0, lsr #10
		if (mevent [MA_NP] . nfail != 255)
    13b4:	000000d4 	ldrdeq	r0, [r0], -r4
    13b8:	83100e41 	tsthi	r0, #1040	; 0x410
			mevent [MA_NP] . nfail ++;
    13bc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		mnfree [MA_NP] = 0;
    13c0:	00018e02 	andeq	r8, r1, r2, lsl #28
    13c4:	00000014 	andeq	r0, r0, r4, lsl r0
		if (m_magic (chunk) != MALLOC_MAGIC)
    13c8:	00001398 	muleq	r0, r8, r3
    13cc:	000035f4 	strdeq	r3, [r0], -r4
			syserror (EMALLOC, "malc");
    13d0:	000000a4 	andeq	r0, r0, r4, lsr #1
    13d4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		if (m_size (chunk) >= _size)
    13d8:	00018e02 	andeq	r8, r1, r2, lsl #28
    13dc:	0000000c 	andeq	r0, r0, ip
		chunk = m_nextp (chunk)) {
    13e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		m_setnextp (cc, m_nextp (chunk));
    13e4:	7c020001 	stcvc	0, cr0, [r2], {1}
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    13e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    13ec:	00000018 	andeq	r0, r0, r8, lsl r0
			m_size (chunk) = _size;
    13f0:	000013dc 	ldrdeq	r1, [r0], -ip
			cc = chunk + _size + m_hdrlen;
    13f4:	00003698 	muleq	r0, r8, r6
    13f8:	0000007c 	andeq	r0, r0, ip, ror r0
			m_size (cc) = waste - m_hdrlen;
    13fc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
			QFREE;
    1400:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
		mevent [MA_NP] . nfail = 0;
    1404:	00000001 	andeq	r0, r0, r1
		mcfree [MA_NP] -= m_size (chunk);
    1408:	00000014 	andeq	r0, r0, r4, lsl r0
    140c:	000013dc 	ldrdeq	r1, [r0], -ip
    1410:	00003714 	andeq	r3, r0, r4, lsl r7
    1414:	000000ac 	andeq	r0, r0, ip, lsr #1
		m_size (chunk) |= MALLOC_UMASK;
    1418:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
		if (mnfree [MA_NP] > mcfree [MA_NP])
    141c:	00018e02 	andeq	r8, r1, r2, lsl #28
		m_size (chunk) |= MALLOC_UMASK;
    1420:	0000000c 	andeq	r0, r0, ip
			mnfree [MA_NP] = mcfree [MA_NP];
    1424:	000013dc 	ldrdeq	r1, [r0], -ip
}
    1428:	000037c0 	andeq	r3, r0, r0, asr #15
    142c:	0000005c 	andeq	r0, r0, ip, asr r0
    1430:	0000000c 	andeq	r0, r0, ip
    1434:	000013dc 	ldrdeq	r1, [r0], -ip
    1438:	0000381c 	andeq	r3, r0, ip, lsl r8
    143c:	00000018 	andeq	r0, r0, r8, lsl r0
    1440:	0000000c 	andeq	r0, r0, ip
aword __pi_fork (fsmcode func, aword data) {
    1444:	000013dc 	ldrdeq	r1, [r0], -ip
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1448:	00000000 	andeq	r0, r0, r0
    144c:	00000010 	andeq	r0, r0, r0, lsl r0
    1450:	0000000c 	andeq	r0, r0, ip
		if ((j = __PCB) == NULL)
    1454:	000013dc 	ldrdeq	r1, [r0], -ip
	i->Next = NULL;
    1458:	00003834 	andeq	r3, r0, r4, lsr r8
	i->data = data;
    145c:	00000010 	andeq	r0, r0, r0, lsl r0
		if ((j = __PCB) == NULL)
    1460:	0000000c 	andeq	r0, r0, ip
}
    1464:	000013dc 	ldrdeq	r1, [r0], -ip
			for (; j->Next != NULL; j = j->Next);
    1468:	00003844 	andeq	r3, r0, r4, asr #16
    146c:	00000014 	andeq	r0, r0, r4, lsl r0
	return (aword) i;
    1470:	00000018 	andeq	r0, r0, r8, lsl r0
    1474:	000013dc 	ldrdeq	r1, [r0], -ip
	if (mevent [MA_NP] . nwait != 255)
    1478:	00003858 	andeq	r3, r0, r8, asr r8
    147c:	00000064 	andeq	r0, r0, r4, rrx
    1480:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		mevent [MA_NP] . nwait ++;
    1484:	86038504 	strhi	r8, [r3], -r4, lsl #10
	wait ((aword)(&(mevent [MA_NP])), state);
    1488:	00018e02 	andeq	r8, r1, r2, lsl #28
    148c:	0000000c 	andeq	r0, r0, ip
void diag (const char *mess, ...) {
    1490:	000013dc 	ldrdeq	r1, [r0], -ip
    1494:	000038bc 			; <UNDEFINED> instruction: 0x000038bc
    1498:	00000014 	andeq	r0, r0, r4, lsl r0
	diag_disable_int (a, is);
    149c:	0000000c 	andeq	r0, r0, ip
    14a0:	000013dc 	ldrdeq	r1, [r0], -ip
    14a4:	000038d0 	ldrdeq	r3, [r0], -r0
				d = (bc == 16) ? 10000 : 1000000000;
    14a8:	00000014 	andeq	r0, r0, r4, lsl r0
	diag_disable_int (a, is);
    14ac:	0000000c 	andeq	r0, r0, ip
	while (*mess != '\0') {
    14b0:	000013dc 	ldrdeq	r1, [r0], -ip
	dgout ('\r');
    14b4:	000038e4 	andeq	r3, r0, r4, ror #17
	dgout ('\n');
    14b8:	00000014 	andeq	r0, r0, r4, lsl r0
    14bc:	0000000c 	andeq	r0, r0, ip
    14c0:	000013dc 	ldrdeq	r1, [r0], -ip
	diag_wait (a);
    14c4:	000038f8 	strdeq	r3, [r0], -r8
	diag_enable_int (a, is);
    14c8:	00000028 	andeq	r0, r0, r8, lsr #32
    14cc:	0000000c 	andeq	r0, r0, ip
}
    14d0:	000013dc 	ldrdeq	r1, [r0], -ip
    14d4:	00003920 	andeq	r3, r0, r0, lsr #18
    14d8:	00000010 	andeq	r0, r0, r0, lsl r0
		if (*mess == '%') {
    14dc:	0000000c 	andeq	r0, r0, ip
    14e0:	000013dc 	ldrdeq	r1, [r0], -ip
			if (*mess == 'l') {
    14e4:	00003930 	andeq	r3, r0, r0, lsr r9
    14e8:	0000002c 	andeq	r0, r0, ip, lsr #32
				mess++;
    14ec:	0000000c 	andeq	r0, r0, ip
				val = va_arg (ap, lword);
    14f0:	000013dc 	ldrdeq	r1, [r0], -ip
				bc = 32;
    14f4:	0000395c 	andeq	r3, r0, ip, asr r9
				bc = 16;
    14f8:	00000014 	andeq	r0, r0, r4, lsl r0
			switch (*mess) {
    14fc:	0000000c 	andeq	r0, r0, ip
    1500:	000013dc 	ldrdeq	r1, [r0], -ip
    1504:	00003970 	andeq	r3, r0, r0, ror r9
				dgout ('%');
    1508:	00000014 	andeq	r0, r0, r4, lsl r0
    150c:	0000001c 	andeq	r0, r0, ip, lsl r0
				dgout (*mess);
    1510:	000013dc 	ldrdeq	r1, [r0], -ip
    1514:	00003984 	andeq	r3, r0, r4, lsl #19
			switch (*mess) {
    1518:	00000110 	andeq	r0, r0, r0, lsl r1
					v = __pi_hex_enc_table [
    151c:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
					i += 4;
    1520:	86038504 	strhi	r8, [r3], -r4, lsl #10
					(val >> (bc - i)) & 0xf];
    1524:	02018e02 	andeq	r8, r1, #2, 28
    1528:	00100e76 	andseq	r0, r0, r6, ror lr
					dgout (v);
    152c:	00000018 	andeq	r0, r0, r8, lsl r0
    1530:	000013dc 	ldrdeq	r1, [r0], -ip
				while (i < bc) {
    1534:	00003a94 	muleq	r0, r4, sl
			mess++;
    1538:	00000064 	andeq	r0, r0, r4, rrx
					d /= 10;
    153c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
				if ((val >> (bc - 1)) & 1) {
    1540:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1544:	00000001 	andeq	r0, r0, r1
					dgout ('-');
    1548:	0000000c 	andeq	r0, r0, ip
    154c:	000013dc 	ldrdeq	r1, [r0], -ip
						val |= 0xffff0000;
    1550:	00003af8 	strdeq	r3, [r0], -r8
    1554:	00000028 	andeq	r0, r0, r8, lsr #32
    1558:	00000014 	andeq	r0, r0, r4, lsl r0
				d = (bc == 16) ? 10000 : 1000000000;
    155c:	000013dc 	ldrdeq	r1, [r0], -ip
    1560:	00003b20 	andeq	r3, r0, r0, lsr #22
    1564:	00000150 	andeq	r0, r0, r0, asr r1
					v = (word) (val / d);
    1568:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
					if (v || d == 1) break;
    156c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1570:	0000000c 	andeq	r0, r0, ip
					d /= 10;
    1574:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
				d = (bc == 16) ? 10000 : 1000000000;
    1578:	7c020001 	stcvc	0, cr0, [r2], {1}
					dgout (v + '0');
    157c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1580:	0000001c 	andeq	r0, r0, ip, lsl r0
    1584:	00001570 	andeq	r1, r0, r0, ror r5
					d /= 10;
    1588:	00000000 	andeq	r0, r0, r0
					val = val - (v * d);
    158c:	000000f4 	strdeq	r0, [r0], -r4
					if (d == 0) break;
    1590:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
					v = (word) (val / d);
    1594:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1598:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
				if (bc == 16)
    159c:	00018e02 	andeq	r8, r1, r2, lsl #28
				d = (bc == 16) ? 10000 : 1000000000;
    15a0:	00000028 	andeq	r0, r0, r8, lsr #32
					val &= 0xffff;
    15a4:	00001570 	andeq	r1, r0, r0, ror r5
					dgout (*s);
    15a8:	00003c70 	andeq	r3, r0, r0, ror ip
					s++;
    15ac:	00000220 	andeq	r0, r0, r0, lsr #4
				while (*s != '\0') {
    15b0:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
    15b4:	86088509 	strhi	r8, [r8], -r9, lsl #10
			dgout (*mess++);
    15b8:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    15bc:	8a048905 	bhi	1239d8 <__ccfg+0x103a30>
    15c0:	8e028b03 	vmlahi.f64	d8, d2, d3
    15c4:	0eee0201 	cdpeq	2, 14, cr0, cr14, cr1, {0}
    15c8:	00000024 	andeq	r0, r0, r4, lsr #32
	__pi_seed = __pi_seed * 1103515245 + 12345;
    15cc:	00000014 	andeq	r0, r0, r4, lsl r0
    15d0:	00001570 	andeq	r1, r0, r0, ror r5
    15d4:	00003e90 	muleq	r0, r0, lr
    15d8:	00000060 	andeq	r0, r0, r0, rrx
	^ entropy
    15dc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
}
    15e0:	00018e02 	andeq	r8, r1, r2, lsl #28
    15e4:	00000014 	andeq	r0, r0, r4, lsl r0
    15e8:	00001570 	andeq	r1, r0, r0, ror r5
    15ec:	00000000 	andeq	r0, r0, r0
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    15f0:	00000078 	andeq	r0, r0, r8, ror r0
	word cs = size + hblenb;
    15f4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    15f8:	00018e02 	andeq	r8, r1, r2, lsl #28
    15fc:	0000000c 	andeq	r0, r0, ip
	p -> length = size;
    1600:	00001570 	andeq	r1, r0, r0, ror r5
}
    1604:	00003ef0 	strdeq	r3, [r0], -r0
	if (p->attributes.b.queued) {
    1608:	00000018 	andeq	r0, r0, r8, lsl r0
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    160c:	0000000c 	andeq	r0, r0, ip
    1610:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1614:	7c020001 	stcvc	0, cr0, [r2], {1}
		p->attributes.b.queued = 0;
    1618:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    161c:	0000000c 	andeq	r0, r0, ip
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1620:	0000160c 	andeq	r1, r0, ip, lsl #12
	deq (p);	// Remove from queue
    1624:	00000000 	andeq	r0, r0, r0
}
    1628:	00000010 	andeq	r0, r0, r0, lsl r0
	tfree ((address)p);
    162c:	0000000c 	andeq	r0, r0, ip
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1630:	0000160c 	andeq	r1, r0, ip, lsl #12
    1634:	00000000 	andeq	r0, r0, r0
    1638:	00000018 	andeq	r0, r0, r8, lsl r0
	sysassert (p->attributes.b.queued == 0, "tcv01");
    163c:	0000000c 	andeq	r0, r0, ip
    1640:	0000160c 	andeq	r1, r0, ip, lsl #12
	if (q_empty (q))
    1644:	00003f08 	andeq	r3, r0, r8, lsl #30
    1648:	0000004c 	andeq	r0, r0, ip, asr #32
		trigger (q);
    164c:	00000014 	andeq	r0, r0, r4, lsl r0
	if (p->attributes.b.urgent) {
    1650:	0000160c 	andeq	r1, r0, ip, lsl #12
		p->u.bqueue.next = q->next;
    1654:	00000000 	andeq	r0, r0, r0
		p->u.bqueue.prev = q;
    1658:	00000030 	andeq	r0, r0, r0, lsr r0
		q->next->prev = (qitem_t*) p;
    165c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	p->attributes.b.queued = 1;
    1660:	00018e02 	andeq	r8, r1, r2, lsl #28
    1664:	00000018 	andeq	r0, r0, r8, lsl r0
}
    1668:	0000160c 	andeq	r1, r0, ip, lsl #12
		p->u.bqueue.prev = q->prev;
    166c:	00003f54 	andeq	r3, r0, r4, asr pc
		q->prev->next = (qitem_t*) p;
    1670:	0000006c 	andeq	r0, r0, ip, rrx
		q->prev = (qitem_t*) p;
    1674:	83100e41 	tsthi	r0, #1040	; 0x410
    1678:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    167c:	00018e02 	andeq	r8, r1, r2, lsl #28
	deq (p);	// Soft dequeue, timer and hook left intact
    1680:	00000014 	andeq	r0, r0, r4, lsl r0
	switch (dv) {
    1684:	0000160c 	andeq	r1, r0, ip, lsl #12
    1688:	00003fc0 	andeq	r3, r0, r0, asr #31
    168c:	00000016 	andeq	r0, r0, r6, lsl r0
    1690:	83080e41 	movwhi	r0, #36417	; 0x8e41
			p->attributes.b.urgent = 1;
    1694:	00018e02 	andeq	r8, r1, r2, lsl #28
    1698:	0000000c 	andeq	r0, r0, ip
			verify_ses (p, "dispose ses");
    169c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    16a0:	7c020001 	stcvc	0, cr0, [r2], {1}
    16a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16a8:	00000024 	andeq	r0, r0, r4, lsr #32
    16ac:	00001698 	muleq	r0, r8, r6
			verify_phy (p, "dispose phy");
    16b0:	00003fd8 	ldrdeq	r3, [r0], -r8
    16b4:	00000028 	andeq	r0, r0, r8, lsr #32
}
    16b8:	83100e41 	tsthi	r0, #1040	; 0x410
			enq (oqueues [p->attributes.b.phys], p);
    16bc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			p->attributes.b.urgent = 1;
    16c0:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
    16c4:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
			verify_phy (p, "dispose phy");
    16c8:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
    16cc:	0000000b 	andeq	r0, r0, fp
    16d0:	0000000c 	andeq	r0, r0, ip
    16d4:	00001698 	muleq	r0, r8, r6
    16d8:	00004000 	andeq	r4, r0, r0
    16dc:	00000008 	andeq	r0, r0, r8
			enq (oqueues [p->attributes.b.phys], p);
    16e0:	0000000c 	andeq	r0, r0, ip
    16e4:	00001698 	muleq	r0, r8, r6
}
    16e8:	00000000 	andeq	r0, r0, r0
			rlp (p);
    16ec:	00000022 	andeq	r0, r0, r2, lsr #32
}
    16f0:	00000018 	andeq	r0, r0, r8, lsl r0
    16f4:	00001698 	muleq	r0, r8, r6
    16f8:	00000000 	andeq	r0, r0, r0
    16fc:	0000002e 	andeq	r0, r0, lr, lsr #32
    1700:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1704:	54018e02 	strpl	r8, [r1], #-3586	; 0xfffff1fe
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1708:	000ec4ce 	andeq	ip, lr, lr, asr #9
	if (b->attributes.b.outgoing) {
    170c:	00000018 	andeq	r0, r0, r8, lsl r0
	b = header (p);
    1710:	00001698 	muleq	r0, r8, r6
	if (b->attributes.b.outgoing) {
    1714:	00000000 	andeq	r0, r0, r0
		verify_ses (b, "tcv02");
    1718:	00000034 	andeq	r0, r0, r4, lsr r0
    171c:	83100e41 	tsthi	r0, #1040	; 0x410
    1720:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    1724:	00018e02 	andeq	r8, r1, r2, lsl #28
    1728:	00000018 	andeq	r0, r0, r8, lsl r0
		verify_plg (b, tcv_out, "tcv03");
    172c:	00001698 	muleq	r0, r8, r6
    1730:	00000000 	andeq	r0, r0, r0
    1734:	00000040 	andeq	r0, r0, r0, asr #32
    1738:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    173c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1740:	00018e02 	andeq	r8, r1, r2, lsl #28
    1744:	0000000c 	andeq	r0, r0, ip
    1748:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    174c:	7c020001 	stcvc	0, cr0, [r2], {1}
		dispose (b, plugins [b->attributes.b.plugin] ->
    1750:	000d0c0e 	andeq	r0, sp, lr, lsl #24
}
    1754:	00000020 	andeq	r0, r0, r0, lsr #32
		dispose (b, plugins [b->attributes.b.plugin] ->
    1758:	00001744 	andeq	r1, r0, r4, asr #14
		rlp (b);
    175c:	00004008 	andeq	r4, r0, r8
}
    1760:	000000aa 	andeq	r0, r0, sl, lsr #1
		rlp (b);
    1764:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    1768:	86048505 	strhi	r8, [r4], -r5, lsl #10
    176c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1770:	180e4201 	stmdane	lr, {r0, r9, lr}
    1774:	00000688 	andeq	r0, r0, r8, lsl #13
